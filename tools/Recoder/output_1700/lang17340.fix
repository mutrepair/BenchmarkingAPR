{
          "0": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), multiplyBy((denominator / d2), (fraction.denominator / d1)));    }",
          "1": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((d2 / d2), (fraction.denominator / d1)));    }",
          "2": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (numerator / d1)));    }",
          "3": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (denominator / d1)));    }",
          "4": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (hashCode / d1)));    }",
          "5": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((d2 / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "6": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(multiplyBy((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "7": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator - d1)));    }",
          "8": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (d2 / d1)));    }",
          "9": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator <= d1)));    }",
          "10": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((numerator / d2), (fraction.denominator / d1)));    }",
          "11": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "12": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((hashCode / d2), (fraction.denominator / d1)));    }",
          "13": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (d2 + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "14": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "15": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (denominator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "16": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (hashCode + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "17": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)));    }",
          "18": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "19": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator + d1)));    }",
          "20": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn multiplyBy(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "21": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((denominator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "22": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((hashCode / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "23": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction((denominator / d2), (fraction.denominator / d1));    }",
          "24": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator >= d1)));    }",
          "25": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), greatestCommonDivisor((denominator / d2), (fraction.denominator / d1)));    }",
          "26": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "27": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction((numerator / d1), (fraction.numerator + d2));    }",
          "28": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction / d1)));    }",
          "29": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((fraction / d2), (fraction.denominator / d1)));    }",
          "30": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulAndCheck((numerator / d1), (fraction.numerator + d2)));    }",
          "31": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn ZERO;    }",
          "32": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((d1 / d2), (fraction.denominator / d1)));    }",
          "33": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn mulAndCheck((numerator / d1), (fraction.numerator + d2));    }",
          "34": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(greatestCommonDivisor((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "35": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((ZERO / d2), (fraction.denominator / d1)));    }",
          "36": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (d1 / d1)));    }",
          "37": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.numerator / d1)));    }",
          "38": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn mulPosAndCheck((denominator / d2), (fraction.denominator / d1));    }",
          "39": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator > d1)));    }",
          "40": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (numerator.numerator / d1)));    }",
          "41": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (denominator.numerator / d1)));    }",
          "42": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (hashCode.numerator / d1)));    }",
          "43": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (getNumerator().numerator / d1)));    }",
          "44": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (getDenominator().numerator / d1)));    }",
          "45": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (getProperNumerator().numerator / d1)));    }",
          "46": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (getProperWhole().numerator / d1)));    }",
          "47": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (intValue().numerator / d1)));    }",
          "48": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (hashCode().numerator / d1)));    }",
          "49": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator < d1)));    }",
          "50": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((fraction / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "51": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "52": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn debug(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "53": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((d1 / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "54": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator * d1)));    }",
          "55": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), add((denominator / d2), (fraction.denominator / d1)));    }",
          "56": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator == d1)));    }",
          "57": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((ZERO / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "58": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (ZERO / d1)));    }",
          "59": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator % d1)));    }",
          "60": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(add((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "61": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn greatestCommonDivisor(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "62": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn add(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)));    }",
          "63": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn ZERO;        return getReducedFraction\n            (mulAndCheck(numerator/d1, fraction.numerator + d2),\n             mulPosAndCheck(denominator/d2, fraction.denominator/d1));    }",
          "64": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), debug((denominator / d2), (fraction.denominator / d1)));    }",
          "65": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn;\n        return getReducedFraction\n            (mulAndCheck(numerator/d1, fraction.numerator + d2),\n             mulPosAndCheck(denominator/d2, fraction.denominator/d1));    }",
          "66": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck(d2));    }",
          "67": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulAndCheck(d2));    }",
          "68": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck(d2));    }",
          "69": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nbreak;\n        return getReducedFraction\n            (mulAndCheck(numerator/d1, fraction.numerator + d2),\n             mulPosAndCheck(denominator/d2, fraction.denominator/d1));    }",
          "70": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck(d2, mulPosAndCheck((denominator / d2), (fraction.denominator / d1))));    }",
          "71": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulAndCheck(d2));    }",
          "72": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck(d2, mulPosAndCheck((denominator / d2), (fraction.denominator / d1))));    }",
          "73": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck(d2));    }",
          "74": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck(numerator));    }",
          "75": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck(denominator));    }",
          "76": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck(hashCode));    }",
          "77": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulAndCheck(d2));    }",
          "78": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulAndCheck(numerator));    }",
          "79": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulAndCheck(denominator));    }",
          "80": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulAndCheck(hashCode));    }",
          "81": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck((numerator / d1), (fraction.numerator + d2)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck(d2));    }",
          "82": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck(fraction));    }",
          "83": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck(d2, mulPosAndCheck(d2)));    }",
          "84": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulAndCheck(d2, mulPosAndCheck(d2)));    }",
          "85": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulAndCheck((d2 - d2)));    }",
          "86": "    public Fraction multiplyBy(final Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        final int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        final int d2 = greatestCommonDivisor(fraction.numerator, denominator);\nreturn getReducedFraction(mulPosAndCheck((denominator / d2), (fraction.denominator / d1)), mulPosAndCheck((d2 - d2)));    }"
}