{
          "0": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(true){                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "1": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nprefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "2": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nclear();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "3": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nincrementSize();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "4": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\ndecrementSize();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "5": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nincrementModCount();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "6": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nremove();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "7": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nexpectedModCount = this.AbstractPatriciaTrie..modCount;\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "8": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "9": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nAbstractPatriciaTrie.clear();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "10": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nAbstractPatriciaTrie.incrementSize();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "11": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nAbstractPatriciaTrie.decrementSize();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "12": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nAbstractPatriciaTrie.incrementModCount();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "13": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nAbstractPatriciaTrie.remove();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "14": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nCollections.clear();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "15": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nCollections.incrementSize();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "16": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nCollections.decrementSize();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "17": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nCollections.incrementModCount();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "18": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nCollections.remove();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "19": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nthis.clear();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "20": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nthis.incrementSize();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "21": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nthis.decrementSize();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "22": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nthis.incrementModCount();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "23": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nthis.remove();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "24": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nreturn null;            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "25": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(isEmpty()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "26": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(isInternalNode()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "27": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(isExternalNode()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "28": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(hasNext()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "29": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(hasPrevious()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "30": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(isFromInclusive()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "31": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(isToInclusive()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "32": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nbreak;\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "33": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nsuper.iterator();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "34": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(AbstractPatriciaTrie.isEmpty()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "35": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(AbstractPatriciaTrie.isInternalNode()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "36": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(AbstractPatriciaTrie.isExternalNode()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "37": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(AbstractPatriciaTrie.hasNext()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "38": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(AbstractPatriciaTrie.hasPrevious()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "39": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(AbstractPatriciaTrie.isFromInclusive()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "40": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(AbstractPatriciaTrie.isToInclusive()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "41": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(Collections.isEmpty()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "42": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(Collections.isInternalNode()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "43": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(Collections.isExternalNode()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "44": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(Collections.hasNext()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "45": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(Collections.hasPrevious()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "46": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(Collections.isFromInclusive()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "47": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(Collections.isToInclusive()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "48": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(modCount){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "49": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nreturn empty.iterator();            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "50": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nreturn;\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "51": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nreturn new SingletonIterator(prefixStart);            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "52": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nreturn new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "53": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(this.isEmpty()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "54": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(this.isInternalNode()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "55": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(this.isExternalNode()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "56": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(this.hasNext()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "57": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(this.hasPrevious()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "58": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(this.isFromInclusive()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "59": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(this.isToInclusive()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "60": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(expectedModCount){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "61": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(prefixStart){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "62": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nexpectedModCount = false;\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "63": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(!isEmpty()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "64": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(!isInternalNode()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "65": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(!isExternalNode()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "66": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(!hasNext()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "67": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(!hasPrevious()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "68": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(!isFromInclusive()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "69": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(!isToInclusive()){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "70": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nexpectedModCount = null;\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "71": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nprefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\nexpectedModCount = this.AbstractPatriciaTrie..modCount;\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "72": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nprefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\nprefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "73": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(-true){                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "74": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nexpectedModCount = true;\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "75": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif((modCount != null)){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "76": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nthis.modCount.clear();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "77": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nthis.modCount.incrementSize();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "78": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nthis.modCount.decrementSize();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "79": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nthis.modCount.incrementModCount();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "80": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nthis.modCount.remove();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "81": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(\"null\"){                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "82": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif((delegate.lengthInBits > prefixStart.bitIndex)){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "83": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nreturn this;            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "84": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif((this.AbstractPatriciaTrie..modCount != expectedModCount)){\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "85": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif((modCount != null)){\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n}\n        }",
          "86": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nbreak;\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "87": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif((expectedModCount != null)){\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n}\n        }",
          "88": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\ncontinue;\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "89": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nthis.modCount = false;\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "90": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nthis.modCount = true;\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "91": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(null){                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "92": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nprefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "93": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif((delegate.lengthInBits > prefixStart.bitIndex)){\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n}\n        }",
          "94": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nif(false){                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "95": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nexpectedModCount = this.AbstractPatriciaTrie..modCount;\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "96": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nfinal Set<Map> empty = Collections.emptySet();\n            if (false) {                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "97": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\nreturn;\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }",
          "98": "        public Iterator<Map.Entry<K,V>> iterator() {\n            if (AbstractPatriciaTrie.this.modCount != expectedModCount) {\n                prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n                expectedModCount = AbstractPatriciaTrie.this.modCount;\n            }\n\ncontinue;\n                final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                return empty.iterator();\n            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                return new SingletonIterator(prefixStart);\n            } else {\n                return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n            }\n        }"
}