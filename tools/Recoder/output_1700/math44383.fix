{
          "0": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows >= 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "1": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows > 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "2": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows <= 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "3": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows < 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "4": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows == 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "5": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows != 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "6": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nCols >= 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "7": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((row >= 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "8": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nreturn;\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "9": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((subMatrix >= 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "10": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows + row)){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "11": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((nRows != 0)){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "12": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nCols + column)){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "13": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows[0].length >= 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "14": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((nRows != null)){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "15": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((column >= 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "16": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows && 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "17": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows || 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "18": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((nRows + row)){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "19": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\ncheckRowIndex(((nRows + row) - 1));\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "20": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nsetEntry((row + i), (column + j), subMatrix[i].[j]);\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "21": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((nCols + column)){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "22": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\ncheckColumnIndex(column);\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "23": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((-nRows >= 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "24": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\ncheckRowIndex(row);\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "25": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((nRows == 0)){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "26": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) || (nRows > nRows))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "27": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\ncheckColumnIndex(((nCols + column) - 1));\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "28": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) || (nRows > row))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "29": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) || (nRows > 0))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "30": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && (nRows == 0))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "31": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && (nRows > nRows))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "32": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows < (nRows >= 0))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "33": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif(nRows){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "34": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((nRows == null)){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "35": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) || nRows)){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "36": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && (nRows > row))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "37": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(nRows){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "38": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((~nRows >= 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "39": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((nRows == 0)){\nreturn;\n}\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "40": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) || isSquare())){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "41": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif(isSquare()){\nreturn;\n}\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "42": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows >= 2)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "43": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && (nRows > 0))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "44": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && isSquare())){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "45": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && (nRows != 0))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "46": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((nRows == row)){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "47": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nnRows = nRows;\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "48": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif(row){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "49": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows[r].length >= 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "50": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && nRows)){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "51": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows < nRows)){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "52": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((nRows > 0)){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "53": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((r >= 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "54": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows + row) - 1)){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "55": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && (nRows == row))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "56": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows > nRows)){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "57": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(isSquare()){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "58": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows & 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "59": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) || (row > nRows))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "60": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((subMatrix[r].length != nCols)){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "61": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && (row == 0))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "62": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) || (nRows < nRows))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "63": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows[i].[j] >= 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "64": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((nRows > row)){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "65": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) || (nRows > subMatrix))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "66": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && (row > nRows))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "67": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((nCols == 0)){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "68": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) || (nRows < row))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "69": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((i >= 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "70": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && (nRows < nRows))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "71": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && (nRows == nRows))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "72": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) || (row > row))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "73": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && (nRows > subMatrix))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "74": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && (nRows < row))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "75": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif((nRows instanceof 0)){            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "76": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;\nif(((nRows >= 0) && (row > row))){\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n    }",
          "77": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((subMatrix == null)){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "78": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((nRows > nRows)){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }",
          "79": "    public void setSubMatrix(final T[][] subMatrix, final int row,\n                             final int column)\n        throws DimensionMismatchException, OutOfRangeException,\n        NoDataException, NullArgumentException {\n        if (subMatrix == null) {\n            throw new NullArgumentException();\n        }\n        final int nRows = subMatrix.length;        if (nRows >= 0) {            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n\nif((nRows == nRows)){\n\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n\n        for (int r = 1; r < nRows; ++r) {\n            if (subMatrix[r].length != nCols) {\n                throw new DimensionMismatchException(nCols, subMatrix[r].length);\n            }\n        }\n\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n\n        for (int i = 0; i < nRows; ++i) {\n            for (int j = 0; j < nCols; ++j) {\n                setEntry(row + i, column + j, subMatrix[i][j]);\n            }\n        }\n}\n    }"
}