{
          "0": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif((false && roundUp)){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "1": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif((modType == MODIFY_CEILING)){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "2": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "3": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == SEMI_MONTH) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "4": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == fields) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "5": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == RANGE_WEEK_SUNDAY) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "6": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == RANGE_WEEK_MONDAY) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "7": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == RANGE_WEEK_RELATIVE) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "8": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == RANGE_WEEK_CENTER) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "9": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == RANGE_MONTH_SUNDAY) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "10": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == RANGE_MONTH_MONDAY) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "11": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_TRUNCATE) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "12": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_ROUND) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "13": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType >= MODIFY_CEILING) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "14": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType <= MODIFY_CEILING) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "15": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType > MODIFY_CEILING) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "16": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType != MODIFY_CEILING) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "17": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif((((modType == MODIFY_CEILING) || (false && roundUp)) || (false && roundUp))){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "18": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (false && roundUp))){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "19": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (false && element))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "20": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(MODIFY_CEILING){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "21": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == element) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "22": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (false >= roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "23": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (false && MODIFY_CEILING))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "24": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(hasNext()){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "25": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (false && aField))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "26": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) && (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "27": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType < MODIFY_CEILING) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "28": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == aField) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "29": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (false == roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "30": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) && (false && roundUp))){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "31": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(roundUp){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "32": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == roundUp) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "33": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (false > roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "34": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (false <= roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "35": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((element == MODIFY_CEILING) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "36": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (false && field))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "37": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (false && modType))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "38": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (true && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "39": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((MODIFY_CEILING == MODIFY_CEILING) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "40": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == field) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "41": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == modType) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "42": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif((((modType == MODIFY_CEILING) || (false && roundUp)) && (false && roundUp))){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "43": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nval.add(Calendar.DATE, -15);\n                    if (modType == MODIFY_CEILING || (false && roundUp)) {                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "44": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((roundUp == MODIFY_CEILING) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "45": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || ((modType == MODIFY_CEILING) || (false && roundUp)))){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "46": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nreturn;\n                    if (modType == MODIFY_CEILING || (false && roundUp)) {                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "47": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nval.add(Calendar.MONTH, 1);\n                    if (modType == MODIFY_CEILING || (false && roundUp)) {                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "48": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (false < roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "49": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif((false || (false && roundUp))){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "50": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nval.add(Calendar.DATE, 1);\n                    if (modType == MODIFY_CEILING || (false && roundUp)) {                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "51": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (false != roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "52": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((aField == MODIFY_CEILING) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "53": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nval.add(Calendar.HOUR_OF_DAY, -12);\n                    if (modType == MODIFY_CEILING || (false && roundUp)) {                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "54": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(modType){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "55": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nval.add(Calendar.DATE, 15);\n                    if (modType == MODIFY_CEILING || (false && roundUp)) {                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "56": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((field == MODIFY_CEILING) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "57": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (modType == MODIFY_CEILING))){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "58": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((false || (false && roundUp)) || (false && roundUp))){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "59": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nval.add(Calendar.HOUR_OF_DAY, 12);\n                    if (modType == MODIFY_CEILING || (false && roundUp)) {                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "60": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif((field == Calendar.AM_PM)){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "61": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(!MODIFY_CEILING){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "62": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif((val.get(Calendar.HOUR_OF_DAY) == 0)){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "63": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || ((false && roundUp) || (false && roundUp)))){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "64": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif((val.get(Calendar.HOUR_OF_DAY) || (false && roundUp))){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "65": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (15 && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "66": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nval.add(aField[0], 1);\n                    if (modType == MODIFY_CEILING || (false && roundUp)) {                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "67": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif((false && roundUp)){\n                    if (modType == MODIFY_CEILING || (false && roundUp)) {                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n}\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "68": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "69": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif((modType == MODIFY_CEILING)){\n                    if (modType == MODIFY_CEILING || (false && roundUp)) {                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n}\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "70": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (12 && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "71": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (-12 && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "72": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif((val.get(Calendar.DATE) == 1)){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "73": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(aField){\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "74": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (false && aField[0]))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "75": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType == MODIFY_CEILING) || (-15 && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "76": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType - MODIFY_CEILING) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "77": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nif(((modType && MODIFY_CEILING) || (false && roundUp))){                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "78": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\nbreak;\n                    if (modType == MODIFY_CEILING || (false && roundUp)) {                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
          "79": "    private static void modify(final Calendar val, final int field, final int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        final Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        final int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        final int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        final int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (final int[] aField : fields) {\n            for (final int element : aField) {\n                if (element == field) {\n                    //This is our field... we stop looping\ncontinue;\n                    if (modType == MODIFY_CEILING || (false && roundUp)) {                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(aField[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                final int min = val.getActualMinimum(aField[0]);\n                final int max = val.getActualMaximum(aField[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(aField[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(aField[0], val.get(aField[0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }"
}