{
          "0": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) >>> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "1": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "2": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) & 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "3": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) % 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "4": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) > 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "5": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) <= 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "6": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) - 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "7": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) >= 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "8": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) < 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "9": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) << 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "10": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "11": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears += ((relativeYear / 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "12": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears -= ((relativeYear / 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "13": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 1) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "14": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = (relativeYear / 3);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "15": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nreturn;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "16": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears++;\n            leapYears = (relativeYear / 3) >> 2;        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "17": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears++;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "18": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 365L) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "19": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) >> 1);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "20": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = (relativeYear >> 2);\n            leapYears = (relativeYear / 3) >> 2;        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "21": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears &= ((relativeYear / 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "22": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears += (relativeYear / 3);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "23": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = leapYears;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "24": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 112) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "25": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears += leapYears;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "26": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) >> 365L);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "27": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears *= ((relativeYear / 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "28": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((leapYears / 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "29": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = (relativeYear >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "30": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears -= (relativeYear / 3);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "31": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears |= ((relativeYear / 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "32": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) >> 112);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "33": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nreturn leapYears;        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "34": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 0) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "35": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nrelativeYear = ((relativeYear / 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "36": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nreturn (millis + ((365L - 112) * DateTimeConstants.MILLIS_PER_DAY));            leapYears = (relativeYear / 3) >> 2;        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "37": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears &= (relativeYear / 3);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "38": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 1687) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "39": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear >> 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "40": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) >> 0);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "41": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 2) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "42": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear >>> 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "43": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nif((relativeYear <= 0)){\n            leapYears = (relativeYear / 3) >> 2;        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n}\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "44": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = (( / 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "45": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) >> 1687);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "46": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear - 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "47": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears *= (relativeYear / 3);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "48": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nif(!isLeapYear(year)){\n            leapYears = (relativeYear / 3) >> 2;        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n}\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "49": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((year / 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "50": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / -1) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "51": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nif(((relativeYear * 365L) + leapYears)){\n            leapYears = (relativeYear / 3) >> 2;        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n}\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "52": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) >> 3);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "53": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nif((relativeYear / 3)){\n            leapYears = (relativeYear / 3) >> 2;        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n}\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "54": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nif((relativeYear * 365L)){\n            leapYears = (relativeYear / 3) >> 2;        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n}\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "55": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear % 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "56": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nif(((365L - 112) * DateTimeConstants.MILLIS_PER_DAY)){\n            leapYears = (relativeYear / 3) >> 2;        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n}\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "57": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nreturn leapYears = ((relativeYear / 3) >> 2);        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "58": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((MILLIS_PER_DAY / 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "59": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n = ((relativeYear / 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "60": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nreturn;\n            leapYears = (relativeYear / 3) >> 2;        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "61": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = (((relativeYear / 3) >> 2) * leapYears);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "62": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nbreak;\n            leapYears = (relativeYear / 3) >> 2;        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "63": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear <= 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "64": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear >= 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "65": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear / 3) >> 2);\n            leapYears = (relativeYear / 3) >> 2;        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "66": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear * 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "67": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nreturn (millis + ((365L - 112) * DateTimeConstants.MILLIS_PER_DAY));        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "68": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear > 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "69": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((relativeYear << 3) >> 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "70": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((((relativeYear / 3) >> 2) * leapYears) * 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "71": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((((relativeYear / 3) >> 2) * leapYears) + 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "72": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((((relativeYear / 3) >> 2) / leapYears) * 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "73": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((leapYears / leapYears) * 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "74": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((leapYears * leapYears) * 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "75": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((leapYears / leapYears) + 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "76": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((leapYears * leapYears) + 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "77": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\nleapYears = ((leapYears / leapYears) / 2);\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \n        long millis = (relativeYear * 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }"
}