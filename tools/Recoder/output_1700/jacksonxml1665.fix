{
          "0": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif(true){                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "1": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "2": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif(false){                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "3": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nreturn;\n                if (false) {                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "4": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\ncdata.set(i);\n                if (false) {                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "5": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\ncdata = new BitSet(len);\n                if (false) {                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "6": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nbreak;\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "7": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nbreak;\n                if (false) {                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "8": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif(\"null\"){                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "9": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif(-true){                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "10": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\n_cdata = cdata;\n                if (false) {                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "11": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif(){\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "12": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif(_props){\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "13": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif(e){\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "14": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif((len != null)){\n                if (false) {                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n}\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "15": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif((i < len)){\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "16": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\ncontinue;\n                if (false) {                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "17": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif(true){\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "18": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif(_isCData(bpw)){\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "19": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif(_isCData(bpw)){\n                if (false) {                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n}\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "20": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif((len == null)){\n                if (false) {                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n}\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "21": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\ncontinue;\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "22": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nfor(int i = 0,i = 0;(i < len);++i) {                if (false) {                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "23": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif(null){                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "24": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif((len && (len != null))){\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "25": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif(((len != null) && (i < len))){\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "26": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif((e && (len != null))){\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "27": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\ncdata.set(i);\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "28": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif((len && (len == null))){\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "29": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nBeanPropertyWriter bpw = _props[i];\n                if (false) {                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "30": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\ncdata = new BitSet(len);\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "31": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif((e && (len == null))){\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "32": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif(((len != null) && (len != null))){\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }",
          "33": "    public XmlBeanSerializerBase(BeanSerializerBase src)\n    {\n        super(src);\n\n        /* Then make sure attributes are sorted before elements, keep track\n         * of how many there are altogether\n         */\n        int attrCount = 0;\n        for (BeanPropertyWriter bpw : _props) {\n            if (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n                attrCount = _orderAttributesFirst(_props, _filteredProps);\n                break;\n            }\n        }\n        _attributeCount = attrCount;\n\n        // also: pre-compute need, if any, for CDATA handling:\n        BitSet cdata = null;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            if (_isCData(bpw)) {\nif(((len != null) && (len == null))){\n                    cdata = new BitSet(len);\n                }\n                cdata.set(i);\n            }\n        }\n        _cdata = cdata;\n        \n        // And then collect namespace information\n        _xmlNames = new QName[_props.length];\n        int textIndex = -1;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _props[i];\n            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n            String ns = null;\n            if (info != null) {\n                ns = info.getNamespace();\n                if (textIndex < 0 && info.isText()) {\n                    textIndex = i;\n                }\n            }\n            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n        }\n        _textPropertyIndex = textIndex;\n    }"
}