{
          "0": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();false;c = c.getNext()) {      validateString(c);\n    }\n  }",
          "1": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nreturn;\n    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n  }",
          "2": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();true;c = c.getNext()) {      validateString(c);\n    }\n  }",
          "3": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();true;c = n.getNext()) {      validateString(c);\n    }\n  }",
          "4": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\n(;;)      validateString(c);\n    }\n  }",
          "5": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nvalidateString(c);\n    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n  }",
          "6": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nif((n != null)){\n    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n}\n  }",
          "7": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();;c = c.getNext()) {      validateString(c);\n    }\n  }",
          "8": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nvalidateMaximumChildCount(n, 2);\n    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n  }",
          "9": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\n(true)      validateString(c);\n    }\n  }",
          "10": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = Token.getFirstChild();true;c = c.getNext()) {      validateString(c);\n    }\n  }",
          "11": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nvalidateMinimumChildCount(n, 1);\n    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n  }",
          "12": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nvalidateNodeType(Token.REGEXP, n);\n    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n  }",
          "13": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();2;c = c.getNext()) {      validateString(c);\n    }\n  }",
          "14": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();-1;c = c.getNext()) {      validateString(c);\n    }\n  }",
          "15": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nif((n == null)){\n    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n}\n  }",
          "16": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = c.getFirstChild();true;c = c.getNext()) {      validateString(c);\n    }\n  }",
          "17": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();true;c = Token.getNext()) {      validateString(c);\n    }\n  }",
          "18": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nc = n;\n    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n  }",
          "19": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();true;c = c.validateRegExpLit()) {      validateString(c);\n    }\n  }",
          "20": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = .getFirstChild();true;c = c.getNext()) {      validateString(c);\n    }\n  }",
          "21": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();true;c = .getNext()) {      validateString(c);\n    }\n  }",
          "22": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();true;n = c.getNext()) {      validateString(c);\n    }\n  }",
          "23": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nsuper.validateRegExpLit();\n    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n  }",
          "24": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nif(n){\n    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n}\n  }",
          "25": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();true;c = c.getName()) {      validateString(c);\n    }\n  }",
          "26": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nif(c.getNext()){\n    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n}\n  }",
          "27": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();0;c = c.getNext()) {      validateString(c);\n    }\n  }",
          "28": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\n    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n  }",
          "29": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.validateRegExpLit();true;c = c.getNext()) {      validateString(c);\n    }\n  }",
          "30": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nif((n == null)){\nreturn;\n}    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n  }",
          "31": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();true;c = c.getFirstChild()) {      validateString(c);\n    }\n  }",
          "32": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nif(true){\n    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n}\n  }",
          "33": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();1;c = c.getNext()) {      validateString(c);\n    }\n  }",
          "34": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();true;c = c.REGEXP()) {      validateString(c);\n    }\n  }",
          "35": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nbreak;\n    for (Node c = n.getFirstChild(); true; c = c.getNext()) {      validateString(c);\n    }\n  }",
          "36": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getNext();true;c = c.getNext()) {      validateString(c);\n    }\n  }",
          "37": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();null;c = c.getNext()) {      validateString(c);\n    }\n  }",
          "38": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();true;c = c.get()) {      validateString(c);\n    }\n  }",
          "39": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();true;c = c.validateNodeType()) {      validateString(c);\n    }\n  }",
          "40": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = n.getFirstChild();true;c = c.validateString()) {      validateString(c);\n    }\n  }",
          "41": "  private void validateRegExpLit(Node n) {\n    validateNodeType(Token.REGEXP, n);\n    validateMinimumChildCount(n, 1);\n    validateMaximumChildCount(n, 2);\nfor(Node c = LOG.getFirstChild();true;c = c.getNext()) {      validateString(c);\n    }\n  }"
}