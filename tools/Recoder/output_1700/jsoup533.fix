{
          "0": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag.isBlock = false;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "1": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag.isBlock = tag.isBlock;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "2": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "3": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag.isBlock = true;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "4": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag = true;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "5": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\nisBlock = true;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "6": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ncanContainBlock = true;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "7": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ncanContainInline = true;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "8": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\noptionalClosing = true;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "9": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\nempty = true;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "10": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\npreserveWhitespace = true;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "11": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag.isBlock = null;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "12": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag.isBlock = tagName;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "13": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag.isBlock();\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "14": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag.isBlock = tag;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "15": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\nif((tag.isBlock != null)){\n                tag.isBlock = true;                tag.canContainBlock = true;\n}\n            }\n            return tag;\n        }\n    }",
          "16": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntagName = true;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "17": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\nreturn;\n                tag.isBlock = true;                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "18": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\nif((isBlock != null)){\n                tag.isBlock = true;                tag.canContainBlock = true;\n}\n            }\n            return tag;\n        }\n    }",
          "19": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\nif((tag != null)){\n                tag.isBlock = true;                tag.canContainBlock = true;\n}\n            }\n            return tag;\n        }\n    }",
          "20": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag.isBlock = -1;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "21": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag = new Tag(tagName);\n                tag.isBlock = true;                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "22": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag.canContainBlock = true;\n                tag.isBlock = true;                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "23": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\n = true;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "24": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag.canContainBlock = true;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "25": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntags.get(tagName);\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "26": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag.isBlock = 1;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "27": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\nValidate.notEmpty(tagName);\n                tag.isBlock = true;                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "28": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag.setAncestor(defaultAncestor.tagName);\n                tag.isBlock = true;                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "29": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\nbreak;\n                tag.isBlock = true;                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "30": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\nValidate.notNull(tagName);\n                tag.isBlock = true;                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "31": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag = new Tag(tagName);\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "32": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntagName = tagName.trim().toLowerCase();\n                tag.isBlock = true;                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "33": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\nreturn tag;                tag.isBlock = true;                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "34": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\n = true;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "35": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntag.isBlock = 0;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "36": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\nreturn;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
          "37": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\ntags = true;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }"
}