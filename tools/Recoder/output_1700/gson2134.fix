{
          "0": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.isJsonNull()){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "1": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.isJsonNull()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "2": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(!value.isJsonNull()){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "3": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(serializeNulls.isJsonNull()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "4": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif((value != null)){\n        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n}\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "5": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(e.isJsonNull()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "6": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "7": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(.isJsonNull()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "8": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "9": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(primitive.isJsonNull()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "10": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.write()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "11": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(!value){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "12": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(((value != null) && value.isJsonNull())){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "13": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(element.isJsonNull()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "14": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.beginArray()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "15": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.isJsonArray()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "16": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.isBoolean()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "17": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.isJsonObject()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "18": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(!value.isJsonNull(e.getKey())){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "19": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.nullValue()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "20": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(isJsonNull()){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "21": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.isNumber()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "22": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(!value.isJsonNull().entrySet()){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "23": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.getName()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "24": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.isJsonNull(value, serializeNulls, writer)){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "25": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nreturn;\n        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "26": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(writer.isJsonNull()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "27": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif((value.isJsonNull() && element.isJsonNull())){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "28": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif((element == null)){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "29": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(((element == null) && value.isJsonNull())){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "30": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.isJsonNull(e, serializeNulls, writer)){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "31": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(!value.isJsonNull(primitive.getAsBoolean())){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "32": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif((value != null)){\ncontinue;\n}        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "33": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif((value && value.isJsonNull())){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "34": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.isJsonNull().isJsonNull()){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "35": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(isJsonNull(value)){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "36": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(!isJsonNull()){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "37": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(((value != null) || value.isJsonNull())){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "38": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(!value.isJsonNull(value, serializeNulls, writer)){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "39": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(!value.isJsonNull(primitive.getAsString())){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "40": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.isJsonNull(serializeNulls)){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "41": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif((element == null)){\n        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n}\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "42": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif((value == null)){\ncontinue;\n}        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "43": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif((value.isJsonNull() || element.isJsonNull())){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "44": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(((value == null) && value.isJsonNull())){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "45": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(!value.isJsonNull(primitive.getAsNumber())){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "46": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(value.isJsonNull(e)){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "47": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(!value.isJsonNull(e, serializeNulls, writer)){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "48": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(element.isJsonObject()){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "49": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif((value == null)){\n        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n}\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "50": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif((value != null)){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "51": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(e){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "52": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(e.isJsonNull()){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "53": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(!value.isJsonNull((\"null\" + element.getClass()))){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "54": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nvalue.isJsonNull();\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "55": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nwriter.nullValue();\n        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "56": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(serializeNulls){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "57": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(.isJsonNull()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "58": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(.isJsonNull()){          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "59": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif((value.isJsonNull() && value.isEmpty())){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "60": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif((\"null\" + element.getClass())){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "61": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(element.isJsonArray()){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "62": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nflush();\n        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "63": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nclose();\n        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "64": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nwriter.value(primitive.getAsNumber());\n        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "65": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nbreak;\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "66": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif((value.isJsonNull() && !value.isEmpty())){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "67": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nwriter.value(primitive.getAsBoolean());\n        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "68": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(element.isJsonObject()){\n        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n}\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "69": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nwriter.value(primitive.getAsString());\n        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "70": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(serializeNulls){\n        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n}\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "71": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(e.isJsonNull()){\n        if (value.isJsonNull()) {          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n}\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "72": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\n    if (element == null || element.isJsonNull()) {\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\nif(primitive.isNumber()){\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }"
}