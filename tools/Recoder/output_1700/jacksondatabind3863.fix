{
          "0": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nanyViews = anyViews;\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "1": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "2": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\npropertyMap = propertyMap.withProperty(prop);\n                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "3": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nif((anyViews != null)){\n                    anyViews = false;                    break;\n}\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "4": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nsetIgnoreUnknownProperties(anyViews);\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "5": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nanyViews = false;\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "6": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nanyViews = true;\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "7": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nbreak;\n                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "8": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\npropertyMap.assignIndexes();\n                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "9": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nreturn;\n                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "10": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nprop.hasViews();\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "11": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nanyViews = null;\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "12": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\npropertyMap.withProperty(prop);\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "13": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nanyViews = \"null\";\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "14": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nanyViews.hasViews();\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "15": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nif(prop.hasViews()){\n                    anyViews = false;                    break;\n}\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "16": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nanyViews++;\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "17": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nif((anyViews == null)){\n                    anyViews = false;                    break;\n}\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "18": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nanyViews = true;\n                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "19": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nreturn;\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "20": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nif(anyViews){\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "21": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nif(!anyViews){\n                    anyViews = false;                    break;\n}\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "22": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nanyViews = anyViews;\n                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "23": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nprop = false;\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "24": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nanyViews++;\n                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "25": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nanyViews = null;\n                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "26": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nsuper.build();\n                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "27": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\npropertyMap = propertyMap.withProperty(prop);\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "28": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nanyViews--;\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "29": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nreturn new BeanDeserializer(this, _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown, anyViews);                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "30": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nanyViews = anyViews.hasViews();\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "31": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nif((_objectIdReader != null)){\n                    anyViews = false;                    break;\n}\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "32": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\npropertyMap.assignIndexes();\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "33": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\ncontinue;\n                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "34": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\n = false;\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "35": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\n(SettableBeanProperty prop = ;\n:props)                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "36": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\npropertyMap = false;\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "37": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\n_beanDesc = false;\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "38": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nif((anyViews == null)){\ncontinue;\n}                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "39": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\npropertyMap = false;\n                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "40": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\n_beanDesc = false;\n                    anyViews = false;                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "41": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\n_defaultViewInclusion = false;\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "42": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\nprops = false;\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }",
          "43": "    public JsonDeserializer<?> build()\n    {\n        Collection<SettableBeanProperty> props = _properties.values();\n        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n        propertyMap.assignIndexes();\n\n        // view processing must be enabled if:\n        // (a) fields are not included by default (when deserializing with view), OR\n        // (b) one of properties has view(s) to included in defined\n        boolean anyViews = !_defaultViewInclusion;\n\n        if (!anyViews) {\n            for (SettableBeanProperty prop : props) {\n                if (prop.hasViews()) {\n_ignorableProps = false;\n                    break;\n                }\n            }\n        }\n\n        // one more thing: may need to create virtual ObjectId property:\n        if (_objectIdReader != null) {\n            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n             *   but no easy access. But hard to see id property being optional,\n             *   so let's consider required at this point.\n             */\n            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n            propertyMap = propertyMap.withProperty(prop);\n        }\n        \n        return new BeanDeserializer(this,\n                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                anyViews);\n    }"
}