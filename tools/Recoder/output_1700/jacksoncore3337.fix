{
          "0": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid > NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "1": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid < NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "2": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _inputPtr) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "3": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _inputEnd) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "4": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _currInputRow) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "5": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _currInputRowStart) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "6": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _tokenInputRow) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "7": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _tokenInputCol) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "8": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_UNKNOWN) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "9": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_INT) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "10": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_LONG) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "11": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGINT) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "12": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_DOUBLE) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "13": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "14": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & MIN_LONG_D) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "15": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & MAX_LONG_D) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "16": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & MIN_INT_D) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "17": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & MAX_INT_D) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "18": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_0) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "19": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_1) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "20": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_2) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "21": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_3) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "22": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_4) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "23": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_5) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "24": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_6) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "25": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_7) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "26": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_8) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "27": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_9) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "28": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_MINUS) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "29": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_PLUS) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "30": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_DECIMAL_POINT) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "31": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_e) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "32": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_E) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "33": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "34": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _numberInt) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "35": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _numberDouble) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "36": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _intLength) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "37": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _fractLength) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "38": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _expLength) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "39": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif((_numTypesValid & NR_BIGDECIMAL)){\n                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "40": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_inputPtr & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "41": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_inputEnd & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "42": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_currInputRow & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "43": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_currInputRowStart & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "44": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_tokenInputRow & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "45": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_tokenInputCol & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "46": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_UNKNOWN & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "47": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_INT & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "48": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_LONG & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "49": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_BIGINT & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "50": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_DOUBLE & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "51": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "52": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((MIN_LONG_D & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "53": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((MAX_LONG_D & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "54": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((MIN_INT_D & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "55": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((MAX_INT_D & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "56": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_0 & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "57": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_1 & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "58": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_2 & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "59": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_3 & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "60": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_4 & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "61": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_5 & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "62": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_6 & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "63": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_7 & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "64": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_8 & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "65": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_9 & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "66": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_MINUS & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "67": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_PLUS & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "68": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_DECIMAL_POINT & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "69": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_e & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "70": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_E & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "71": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numberInt & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "72": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numberDouble & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "73": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_intLength & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "74": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_fractLength & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "75": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_expLength & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "76": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL) >= 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "77": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid >= NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "78": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nclose();\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "79": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nloadMoreGuaranteed();\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "80": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\n_finishString();\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "81": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\n_closeInput();\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "82": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\n_releaseBuffers();\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "83": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\n_handleEOF();\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "84": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nconvertNumberToInt();\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "85": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nconvertNumberToLong();\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "86": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nconvertNumberToBigInteger();\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "87": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nconvertNumberToDouble();\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "88": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nconvertNumberToBigDecimal();\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "89": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nreportOverflowInt();\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "90": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nreportOverflowLong();\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "91": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL) > 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "92": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL) != 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "93": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL) == 2)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "94": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid <= NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "95": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL) <= 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "96": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid && NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "97": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid == NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "98": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL) < 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "99": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid || NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "100": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid != NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "101": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif((_numTypesValid & NR_BIGDECIMAL)){\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n}\n        }\n        return _numberBigDecimal;\n    }",
          "102": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(_numTypesValid){\n                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "103": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(NR_BIGDECIMAL){\n                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "104": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nreturn null;            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "105": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(isClosed()){\n                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "106": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(hasTextCharacters()){\n                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "107": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(loadMore()){\n                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "108": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid | NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "109": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL) && 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "110": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nreturn;\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "111": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _inputPtr.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "112": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _inputEnd.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "113": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _currInputRow.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "114": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _currInputRowStart.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "115": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _tokenInputRow.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "116": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _tokenInputCol.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "117": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_UNKNOWN.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "118": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_INT.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "119": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_LONG.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "120": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGINT.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "121": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_DOUBLE.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "122": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "123": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_0.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "124": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_1.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "125": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_2.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "126": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_3.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "127": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_4.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "128": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_5.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "129": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_6.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "130": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_7.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "131": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_8.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "132": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_9.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "133": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_MINUS.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "134": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_PLUS.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "135": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_DECIMAL_POINT.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "136": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_e.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "137": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_E.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "138": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _numTypesValid.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "139": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _numberInt.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "140": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _intLength.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "141": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _fractLength.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "142": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _expLength.NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "143": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & getTokenLineNr().NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "144": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & getTokenColumnNr().NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "145": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & getIntValue().NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "146": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nbreak;\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "147": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _numberBigDecimal) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "148": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\n_parseNumericValue(NR_BIGDECIMAL);\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "149": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(!_numTypesValid){\n                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "150": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numberBigDecimal & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "151": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_inputPtr.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "152": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_inputEnd.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "153": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_currInputRow.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "154": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_currInputRowStart.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "155": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_tokenInputRow.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "156": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_tokenInputCol.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "157": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_UNKNOWN.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "158": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_INT.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "159": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_LONG.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "160": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_BIGINT.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "161": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_DOUBLE.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "162": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_BIGDECIMAL.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "163": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_0.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "164": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_1.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "165": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_2.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "166": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_3.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "167": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_4.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "168": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_5.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "169": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_6.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "170": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_7.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "171": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_8.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "172": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_9.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "173": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_MINUS.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "174": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_PLUS.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "175": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_DECIMAL_POINT.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "176": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_e.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "177": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_E.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "178": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "179": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numberInt.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "180": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_intLength.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "181": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_fractLength.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "182": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_expLength.NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "183": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((getTokenLineNr().NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "184": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((getTokenColumnNr().NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "185": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((getIntValue().NR_BIGDECIMAL & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "186": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif((_numTypesValid == NR_UNKNOWN)){\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n}\n        }\n        return _numberBigDecimal;\n    }",
          "187": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(!NR_BIGDECIMAL){\n                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "188": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _inputPtr._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "189": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _inputEnd._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "190": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _currInputRow._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "191": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _currInputRowStart._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "192": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _tokenInputRow._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "193": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _tokenInputCol._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "194": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_UNKNOWN._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "195": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_INT._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "196": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_LONG._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "197": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGINT._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "198": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_DOUBLE._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "199": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "200": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_0._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "201": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_1._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "202": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_2._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "203": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_3._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "204": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_4._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "205": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_5._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "206": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_6._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "207": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_7._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "208": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_8._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "209": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_9._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "210": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_MINUS._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "211": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_PLUS._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "212": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_DECIMAL_POINT._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "213": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_e._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "214": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & INT_E._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "215": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _numTypesValid._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "216": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _numberInt._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "217": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _intLength._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "218": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _fractLength._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "219": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & _expLength._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "220": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & getTokenLineNr()._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "221": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & getTokenColumnNr()._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "222": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & getIntValue()._numTypesValid) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "223": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL) & 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "224": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL) == 0)){\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n}\n        }\n        return _numberBigDecimal;\n    }",
          "225": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL) || 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "226": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_inputPtr._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "227": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_inputEnd._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "228": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_currInputRow._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "229": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_currInputRowStart._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "230": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_tokenInputRow._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "231": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_tokenInputCol._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "232": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_UNKNOWN._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "233": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_INT._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "234": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_LONG._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "235": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_BIGINT._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "236": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_DOUBLE._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "237": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((NR_BIGDECIMAL._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "238": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_0._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "239": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_1._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "240": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_2._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "241": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_3._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "242": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_4._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "243": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_5._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "244": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_6._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "245": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_7._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "246": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_8._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "247": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_9._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "248": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_MINUS._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "249": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_PLUS._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "250": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_DECIMAL_POINT._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "251": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_e._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "252": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((INT_E._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "253": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "254": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numberInt._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "255": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_intLength._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "256": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_fractLength._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "257": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_expLength._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "258": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((getTokenLineNr()._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "259": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((getTokenColumnNr()._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "260": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((getIntValue()._numTypesValid & NR_BIGDECIMAL) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "261": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nreturn _numberBigDecimal;            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "262": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif((_numTypesValid == NR_UNKNOWN)){\n                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "263": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL) | 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "264": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & ) == 1)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "265": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL) == 0)){\n                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "266": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nNR_BIGDECIMAL = false;\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "267": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\nif(((_numTypesValid & NR_BIGDECIMAL) == 0)){                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "268": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }",
          "269": "    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n    {\n        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {\n            if (_numTypesValid == NR_UNKNOWN) {\n                _parseNumericValue(NR_BIGDECIMAL);\n            }\ncontinue;\n            if ((_numTypesValid & NR_BIGDECIMAL) == 1) {                convertNumberToBigDecimal();\n            }\n        }\n        return _numberBigDecimal;\n    }"
}