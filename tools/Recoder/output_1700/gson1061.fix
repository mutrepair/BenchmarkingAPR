{
          "0": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((pos % i)){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "1": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] != NON_EXECUTE_PREFIX[(pos % i)])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "2": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] >= NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "3": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((NON_EXECUTE_PREFIX[(pos % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "4": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] != NON_EXECUTE_PREFIX)){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "5": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] != buffer)){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "6": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "7": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] != buffer[(pos % i)])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "8": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((NON_EXECUTE_PREFIX[i] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "9": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] != pos[(pos % i)])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "10": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos >= i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "11": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] > NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "12": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((pos[(pos % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "13": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nbeginArray();\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "14": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nendArray();\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "15": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nbeginObject();\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "16": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nendObject();\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "17": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nconsumeNonExecutePrefix();\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "18": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nnextNull();\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "19": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nclose();\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "20": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nskipValue();\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "21": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\ncheckLenient();\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "22": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nskipToEndOfLine();\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "23": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\ndecodeLiteral();\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "24": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] != buffer[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "25": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(NON_EXECUTE_PREFIX[(pos % i)] % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "26": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((NON_EXECUTE_PREFIX != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "27": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "28": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] <= NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "29": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[i] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "30": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] != pos[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "31": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(buffer[(pos % i)] % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "32": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((pos[i] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "33": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((i[(pos % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "34": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(NON_EXECUTE_PREFIX[i] % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "35": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos <= i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "36": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] != i[(pos % i)])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "37": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(i[(pos % i)] % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "38": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos[(pos % i)] % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "39": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos == i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "40": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(buffer[i] % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "41": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] == NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "42": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos > i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "43": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((pos + NON_EXECUTE_PREFIX.length) > limit)){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "44": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((i[i] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "45": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(i % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "46": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] < NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "47": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos[i] % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "48": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(i[i] % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "49": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos != i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "50": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] != i[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "51": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nreturn;\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "52": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(isLenient()){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "53": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(hasNext()){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "54": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(nextBoolean()){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "55": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((i != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "56": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(NON_EXECUTE_PREFIX % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "57": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((buffer[(pos % i)] != NON_EXECUTE_PREFIX[i]) && !fillBuffer(NON_EXECUTE_PREFIX.length))){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "58": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((((pos + NON_EXECUTE_PREFIX.length) > limit) && !fillBuffer(NON_EXECUTE_PREFIX.length))){\ncontinue;\n}\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "59": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((pos + NON_EXECUTE_PREFIX.length)){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "60": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] != i)){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "61": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\npos += NON_EXECUTE_PREFIX.length;\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "62": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(buffer % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "63": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos < i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "64": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((i != null)){\ncontinue;\n}\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "65": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nnextNonWhitespace();\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "66": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(limit % i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "67": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((pos != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "68": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\npos--;\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "69": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nfor(int i = 0;(i < NON_EXECUTE_PREFIX.length);i++) {      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "70": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nbreak;\n      if (buffer[pos % i] != NON_EXECUTE_PREFIX[i]) {        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "71": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] & NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "72": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] && NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "73": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] - NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "74": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos % i)] || NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "75": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((i != null) && (buffer[(pos % i)] != NON_EXECUTE_PREFIX[i]))){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "76": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos >>> i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "77": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos - i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "78": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif((buffer[(pos >> i)] != NON_EXECUTE_PREFIX[i])){        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "79": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((buffer[(pos % i)] != NON_EXECUTE_PREFIX[i]) && (i == null))){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "80": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((buffer[(pos % i)] != NON_EXECUTE_PREFIX[i]) && (i == 0))){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "81": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((buffer[(pos % i)] != NON_EXECUTE_PREFIX[i]) && (i == NON_EXECUTE_PREFIX))){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "82": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((buffer[(pos % i)] != NON_EXECUTE_PREFIX[i]) && (NON_EXECUTE_PREFIX == i))){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "83": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((buffer[(pos % i)] != NON_EXECUTE_PREFIX[i]) && (buffer == i))){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "84": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((buffer[(pos % i)] != NON_EXECUTE_PREFIX[i]) && (i == pos))){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "85": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((buffer[(pos % i)] != NON_EXECUTE_PREFIX[i]) && (i == NON_EXECUTE_PREFIX[(pos % i)]))){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "86": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((buffer[(pos % i)] != NON_EXECUTE_PREFIX[i]) && (i == NON_EXECUTE_PREFIX[i]))){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "87": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((buffer[(pos % i)] != NON_EXECUTE_PREFIX[i]) && (i == buffer[(pos % i)]))){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "88": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((buffer[(pos % i)] != NON_EXECUTE_PREFIX[i]) && (i != NON_EXECUTE_PREFIX[(pos % i)]))){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "89": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((buffer[(pos % i)] != NON_EXECUTE_PREFIX[i]) && (i == buffer[i]))){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }",
          "90": "  private void consumeNonExecutePrefix() throws IOException {\n    // fast forward through the leading whitespace\n    nextNonWhitespace();\n    pos--;\n    \n    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n      return;\n    }\n    \n    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif(((buffer[(pos % i)] != NON_EXECUTE_PREFIX[i]) && (i != NON_EXECUTE_PREFIX[i]))){\n        return; // not a security token!\n      }\n    }\n    \n    // we consumed a security token!\n    pos += NON_EXECUTE_PREFIX.length;\n  }"
}