{
          "0": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif(true){            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "1": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\n            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "2": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\ncalendar.setTimeInMillis((calendar.getTimeInMillis() + 60000));\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "3": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\ncheck = LocalDateTime.fromCalendarFields(calendar);\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "4": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nbreak;\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "5": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\ncalendar.setTimeInMillis((calendar.getTimeInMillis() - 1000));\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "6": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nreturn calendar.getTime();        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "7": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\ncalendar = earlier;\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "8": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nearlier.setTimeInMillis((calendar.getTimeInMillis() - timeZone.getDSTSavings()));\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "9": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\ncheck = LocalDateTime.fromCalendarFields(earlier);\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "10": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\ncalendar.setTimeInMillis((calendar.getTimeInMillis() + 1000));\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "11": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif(check){\n            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "12": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\ncalendar.setTime(date);\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "13": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nreturn null;        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "14": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif(earlier){\n            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "15": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif(calendar){\n            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "16": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif(1000){            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "17": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nreturn;\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "18": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif(!earlier){\n            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "19": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif((calendar.getTimeInMillis() + 1000)){\n            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "20": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif(calendar.getTimeInMillis()){\n            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "21": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif(\"null\"){            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "22": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nbreak;\n            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "23": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif((timeZone != null)){\n            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "24": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif((calendar.getTimeInMillis() + 1000)){\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n}\n        }\n        return calendar.getTime();\n    }",
          "25": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif((timeZone != null)){\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n}\n        }\n        return calendar.getTime();\n    }",
          "26": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif((calendar != null)){\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n}\n        }\n        return calendar.getTime();\n    }",
          "27": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif(check.equals(this)){\n            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "28": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\ncontinue;\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "29": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif(null){            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "30": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif(check.equals(this)){\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n}\n        }\n        return calendar.getTime();\n    }",
          "31": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif(false){            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "32": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "33": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif(60000){            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "34": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\ncontinue;\n            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "35": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nfinal Calendar earlier = Calendar.getInstance(timeZone);\n        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "36": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\ncalendar.setTimeInMillis((calendar.getTimeInMillis() + 60000));\n            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "37": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\ncheck = LocalDateTime.fromCalendarFields(calendar);\n            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "38": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\ncalendar.setTimeInMillis((calendar.getTimeInMillis() - 1000));\n            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }",
          "39": "    private Date correctDstTransition(Date date, final TimeZone timeZone) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.setTime(date);\n        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n        if (check.isBefore(this)) {\n            // DST gap\n            // move forward in units of one minute until equal/after\n            while (check.isBefore(this)) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            // move back in units of one second until date wrong\n            while (check.isBefore(this) == false) {\n                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n                check = LocalDateTime.fromCalendarFields(calendar);\n            }\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\nif((timeZone != null)){\ncheck = null;\n}        } else if (false) {            // check for DST overlap\n            final Calendar earlier = Calendar.getInstance(timeZone);\n            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n            check = LocalDateTime.fromCalendarFields(earlier);\n            if (check.equals(this)) {\n                calendar = earlier;\n            }\n        }\n        return calendar.getTime();\n    }"
}