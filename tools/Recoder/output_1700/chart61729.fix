{
          "0": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item + 0));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "1": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item + 2));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "2": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "3": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\nlong y0 = dataset.getYValue(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "4": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(xAxisLocation, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "5": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(dataArea, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "6": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "7": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\nint y0 = dataset.getYValue(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "8": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item - 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "9": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndataset.getYValue(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "10": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item + false));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "11": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item + -1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "12": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item + null));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "13": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue(series);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "14": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.drawItem(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "15": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (series + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "16": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue((item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "17": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item + \"null\"));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "18": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item + true));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "19": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\nfinal double y0 = dataset.getYValue(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "20": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble transX0 = dataset.getYValue(series);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "21": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, ( + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "22": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue(series, series);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "23": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble transX0 = dataset.getYValue(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "24": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = getYValue(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "25": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble transX0 = dataset.getYValue((item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "26": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item / 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "27": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getXValue(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "28": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble transX0 = dataset.getYValue(series, series);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "29": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item * 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "30": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = (double)dataset.getYValue(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "31": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (dataArea + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "32": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item % 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "33": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue(series, 0);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "34": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "35": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble transX0 = getYValue(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "36": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item <= 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "37": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue((item + 1), series);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "38": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item == 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "39": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue((item + 1), 0);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "40": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.e(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "41": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.debug(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "42": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble transX0 = (double)dataset.getYValue(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "43": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = domainAxis.getYValue(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "44": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble transX0 = dataset.getYValue(series, 0);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "45": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue(series, item);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "46": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue(item);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "47": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue(dataset.getYValue(series, (item + 1)));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "48": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue(series, 1);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "49": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble transX0 = dataset.getYValue((item + 1), series);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "50": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "51": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item >= 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "52": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue(series, dataset.getYValue(series, (item + 1)));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "53": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble transX0 = dataset.getYValue((item + 1), 0);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "54": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.get(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "55": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item & 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "56": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.add(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "57": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.getYValue(series, (item != 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "58": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue(series, 2);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "59": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = LOG.getYValue(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "60": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble transX0 = dataset.getYValue(series, item);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "61": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue(series, (item + 1), 0);\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "62": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble y0 = dataset.toString(series, (item + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "63": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue((series + series));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "64": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue(series, (series + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "65": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue((series + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "66": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble transX0 = dataset.getYValue(series, (series + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "67": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue(series, (series + series));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "68": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\ndouble  = dataset.getYValue(series, ((series + series) + 1));\n            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "69": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\nreturn;\n            double y0 = dataset.getYValue(series, item + 1);            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }",
          "70": "    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series,\n            int item, boolean selected, int pass) {\n\n        // do nothing if item is not visible\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        Paint seriesPaint = getItemPaint(series, item, selected);\n        Stroke seriesStroke = getItemStroke(series, item, selected);\n        g2.setPaint(seriesPaint);\n        g2.setStroke(seriesStroke);\n\n        // get the data point...\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = (Double.isNaN(y1) ? Double.NaN\n                : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));\n\n        if (pass== 0 && item > 0) {\n            // get the previous data point...\n            double x0 = dataset.getXValue(series, item - 1);\n            double y0 = dataset.getYValue(series, item + 1);            double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                    xAxisLocation);\n            double transY0 = (Double.isNaN(y0) ? Double.NaN\n                    : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));\n\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                if (transY0 == transY1) {\n                    // this represents the situation\n                    // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transY0, transX0, transY1,\n                            transX1);\n                }\n                else {  //this handles the need to perform a 'step'.\n\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transY0, transX0, transY0,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY0, transXs, transY1,\n                            transXs);\n                    drawLine(g2, state.workingLine, transY1, transXs, transY1,\n                            transX1);\n                }\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                if (transY0 == transY1) { // this represents the situation\n                                          // for drawing a horizontal bar.\n                    drawLine(g2, state.workingLine, transX0, transY0, transX1,\n                            transY1);\n                }\n                else {  //this handles the need to perform a 'step'.\n                    // calculate the step point\n                    double transXs = transX0 + (getStepPoint()\n                            * (transX1 - transX0));\n                    drawLine(g2, state.workingLine, transX0, transY0, transXs,\n                            transY0);\n                    drawLine(g2, state.workingLine, transXs, transY0, transXs,\n                            transY1);\n                    drawLine(g2, state.workingLine, transXs, transY1, transX1,\n                            transY1);\n                }\n            }\n\n            // submit this data item as a candidate for the crosshair point\n            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n            XYCrosshairState crosshairState = state.getCrosshairState();\n            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                    rangeAxisIndex, transX1, transY1, orientation);\n\n            // collect entity and tool tip information...\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addEntity(entities, null, dataset, series, item, selected, \n                        transX1, transY1);\n            }\n\n        }\n\n        if (pass == 1) {\n            // draw the item label if there is one...\n            if (isItemLabelVisible(series, item, selected)) {\n                double xx = transX1;\n                double yy = transY1;\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    xx = transY1;\n                    yy = transX1;\n                }\n                drawItemLabel(g2, orientation, dataset, series, item, selected,\n                        xx, yy, (y1 < 0.0));\n            }\n        }\n    }"
}