{
          "0": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(false){        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "1": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nreturn;\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "2": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(hasExternsRoot()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "3": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(isTypeInferred()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "4": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(canEliminate()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "5": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(isSimpleStubDeclaration()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "6": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(canCollapse()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "7": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(isGetOrSetDefinition()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "8": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(canCollapseUnannotatedChildNames()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "9": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(shouldKeepKeys()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "10": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(needsToBeStubbed()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "11": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(isDeclaredType()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "12": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(isNamespace()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "13": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(isSimpleName()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "14": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(isSet()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "15": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nensureGenerated();\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "16": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nprocess();\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "17": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nsetDeclaredType();\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "18": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(currentPreOrderIndex){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "19": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!hasExternsRoot()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "20": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!isTypeInferred()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "21": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!canEliminate()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "22": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!isSimpleStubDeclaration()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "23": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!canCollapse()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "24": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!isGetOrSetDefinition()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "25": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!canCollapseUnannotatedChildNames()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "26": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!shouldKeepKeys()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "27": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!needsToBeStubbed()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "28": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!isDeclaredType()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "29": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!isNamespace()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "30": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!isSimpleName()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "31": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!isSet()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "32": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(declaration);\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "33": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(twin);\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "34": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(Ref.Type.declaration);\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "35": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(Ref.Type.twin);\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "36": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(false);\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "37": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!currentPreOrderIndex){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "38": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(nameObj){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "39": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(true);\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "40": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(set){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "41": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(n){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "42": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(\"null\");\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "43": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(t){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "44": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nbreak;\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "45": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(Ref.hasExternsRoot()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "46": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(Ref.isTypeInferred()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "47": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(Ref.canEliminate()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "48": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(Ref.isSimpleStubDeclaration()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "49": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(Ref.canCollapse()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "50": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(Ref.isGetOrSetDefinition()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "51": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(Ref.canCollapseUnannotatedChildNames()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "52": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(Ref.shouldKeepKeys()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "53": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(Ref.needsToBeStubbed()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "54": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(Ref.isDeclaredType()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "55": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(Ref.isNamespace()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "56": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(Ref.isSimpleName()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "57": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(Ref.isSet()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "58": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nRef.ensureGenerated();\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "59": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nRef.process();\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "60": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nRef.setDeclaredType();\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "61": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(get){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "62": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef();\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "63": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(t.isEmpty()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "64": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nRef.markTwins(set, get);\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "65": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(get);\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "66": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.markTwins(Ref.Type.declaration);\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "67": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.markTwins(Ref.Type.twin);\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "68": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(n.isEmpty()){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "69": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "70": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!n){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "71": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!set){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "72": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(!get){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "73": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(parent){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "74": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(-false){        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "75": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(set);\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "76": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif((nameObj != null)){\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n}\n    }",
          "77": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(Ref.Type.declaration, \"null\");\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "78": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(Ref.Type.twin, \"null\");\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "79": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\ncontinue;\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "80": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(maybeHandlePrototypePrefix(t, n, parent, name)){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "81": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nbreak;\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "82": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif((parent || (parent != null))){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "83": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(declaration, \"null\");\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "84": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(twin, \"null\");\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "85": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(false, false);\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "86": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif((parent || (parent == null))){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "87": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif((parent && (parent != null))){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "88": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(\"null\"){        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "89": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nnameObj.addRef(\"null\", \"null\");\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "90": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(1){        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "91": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(null){        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "92": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif((parent && (parent == null))){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "93": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "94": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(maybeHandlePrototypePrefix(t, n, parent, name)){\n      if (true) {        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n}\n    }",
          "95": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nreturn;\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "96": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif((n || (parent != null))){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "97": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif(0){        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }",
          "98": "    void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      Ref set = new Ref(t, n, nameObj,\n          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n      nameObj.addRef(set);\n\nif((currentPreOrderIndex || (n != null))){\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj,\n            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      }\n    }"
}