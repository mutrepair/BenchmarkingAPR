{
          "0": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "1": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif(true){                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "2": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nreturn;\n                    if (false) {                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "3": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nbreak;\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "4": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nctorPropNames[param.getIndex()] = propDef.getName();\n                    if (false) {                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "5": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nctorPropNames = new String[propertyCtor.getParameterCount()];\n                    if (false) {                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "6": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\npropertyCtor = (AnnotatedConstructor)owner;\n                    if (false) {                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "7": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nbreak;\n                    if (false) {                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "8": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif(propDef.getConstructorParameter()){\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "9": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif(\"null\"){                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "10": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif((propertyCtor != null)){\n                    if (false) {                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n}\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "11": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif(-true){                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "12": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif(e){\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "13": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif(( != null)){\n                    if (false) {                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n}\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "14": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif(){\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "15": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nreturn;\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "16": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\ncontinue;\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "17": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\ncontinue;\n                    if (false) {                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "18": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif(null){                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "19": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\n(BeanPropertyDefinition propDef = ;\n:beanDesc.findProperties())                    if (false) {                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "20": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif((owner instanceof AnnotatedConstructor)){\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "21": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif((propDef.getConstructorParameter() != null)){\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "22": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif(false){                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "23": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nctorPropNames = new String[propertyCtor.getParameterCount()];\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "24": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nctorPropNames[param.getIndex()] = propDef.getName();\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "25": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\npropertyCtor = (AnnotatedConstructor)owner;\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "26": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif(((propertyCtor != null) && (owner instanceof AnnotatedConstructor))){\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "27": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif((propertyCtor && (propertyCtor != null))){\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "28": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif((propertyCtor && (propertyCtor == null))){\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "29": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif(((propertyCtor != null) && (propertyCtor != null))){\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "30": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif(((propertyCtor != null) && (propertyCtor == null))){\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "31": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif(((propertyCtor != null) && (ctorPropNames != null))){\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }",
          "32": "    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators)\n        throws JsonMappingException\n    {\n        /* First things first: the \"default constructor\" (zero-arg\n         * constructor; whether implicit or explicit) is NOT included\n         * in list of constructors, so needs to be handled separately.\n         */\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        String[] ctorPropNames = null;\n        AnnotatedConstructor propertyCtor = null;\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            if (propDef.getConstructorParameter() != null) {\n                AnnotatedParameter param = propDef.getConstructorParameter();\n                AnnotatedWithParams owner = param.getOwner();\n                if (owner instanceof AnnotatedConstructor) {\nif(((propertyCtor != null) && (propertyCtor == 0))){\n                        propertyCtor = (AnnotatedConstructor) owner;\n                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n                    }\n                    ctorPropNames[param.getIndex()] = propDef.getName();\n                }\n            }\n        }\n\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            int argCount = ctor.getParameterCount();\n            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n            boolean isVisible =  vchecker.isCreatorVisible(ctor);\n            // some single-arg constructors (String, number) are auto-detected\n            if (argCount == 1) {\n                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n                _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                        ctor, isCreator, isVisible, name);\n                continue;\n            }\n            if (!isCreator && !isVisible) {\n                continue;\n            }\n            // [JACKSON-541] improved handling a bit so:\n            // 2 or more args; all params must have name annotations\n            // ... or @JacksonInject (or equivalent)\n            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n             * exactly one non-annotated parameter: if so, it's still delegating.\n             */\n            AnnotatedParameter nonAnnotatedParam = null;\n            int namedCount = 0;\n            int injectCount = 0;\n            CreatorProperty[] properties = new CreatorProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                AnnotatedParameter param = ctor.getParameter(i);\n                String name = null;\n                if (ctor == propertyCtor) {\n                    name = ctorPropNames[i];\n                }\n                if (name == null) {\n                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n                    name = (pn == null) ? null : pn.getSimpleName();\n                }\n                Object injectId = intr.findInjectableValueId(param);\n                if (name != null && name.length() > 0) {\n                    ++namedCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                } else if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || namedCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, properties);\n                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, properties);\n                } else { // otherwise, record the incomplete parameter for later error messaging.\n                    creators.addIncompeteParameter(nonAnnotatedParam);\n                }\n            }\n        }\n    }"
}