{
          "0": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(false){                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "1": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nreturn new StackTraceElement(className, methodName, fileName, lineNumber);                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "2": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nbreak;\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "3": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nhandleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "4": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nfileName = jp.getText();\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "5": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nmethodName = jp.getText();\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "6": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nclassName = jp.getText();\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "7": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nlineNumber = jp.getIntValue();\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "8": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(true){                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "9": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\n                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "10": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nreturn null;                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "11": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(className){\n                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "12": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nreturn;\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "13": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(\"null\"){\n                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "14": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nreturn false;                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "15": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(methodName){\n                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "16": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\ncontinue;\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "17": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(t){\n                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "18": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nreturn fileName;                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "19": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(\"null\"){\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n}\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "20": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(!className){\n                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "21": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nreturn true;                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "22": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nfileName = null;\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "23": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(-false){                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "24": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif((fileName != null)){\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n}\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "25": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(\"null\"){\nhandleUnknownProperty(jp, ctxt, _valueClass, propName);\n}                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "26": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(jp.getText()){\n                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "27": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nfileName = false;\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "28": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(!methodName){\n                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "29": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nreturn \"null\";                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "30": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(\"null\"){\nmethodName = jp.getText();\n}                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "31": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(_valueClass){\n                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "32": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nbreak;\n                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "33": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nfileName = fileName;\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "34": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(t.isNumeric()){\n                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "35": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif((methodName != null)){\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n}\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "36": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif((fileName == null)){\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n}\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "37": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "38": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nreturn this;                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "39": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(t.isNumeric()){\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n}\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "40": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif((className != null)){\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n}\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "41": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif((fileName == null)){\nreturn new StackTraceElement(className, methodName, fileName, lineNumber);}                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "42": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif((t != null)){\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n}\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "43": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif((fileName != null)){\nreturn new StackTraceElement(className, methodName, fileName, lineNumber);}                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "44": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nString propName = jp.getCurrentName();\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "45": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif((fileName == null)){\nreturn null;}                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "46": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif((methodName == null)){\nreturn new StackTraceElement(className, methodName, fileName, lineNumber);}                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "47": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif(\"null\"){                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "48": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nbreak;\nbreak;\n                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "49": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\ncontinue;\n                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "50": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nreturn;\n                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "51": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif((fileName != null)){\nfileName = null;\n}                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "52": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif((fileName != null)){\nfileName = fileName;\n}                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "53": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif((fileName != null)){\nfileName = methodName;\n}                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }",
          "54": "        public StackTraceElement deserialize(JsonParser jp, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            JsonToken t = jp.getCurrentToken();\n            // Must get an Object\n            if (t == JsonToken.START_OBJECT) {\n                String className = \"\", methodName = \"\", fileName = \"\";\n                int lineNumber = -1;\n    \n                while ((t = jp.nextValue()) != JsonToken.END_OBJECT) {\n                    String propName = jp.getCurrentName();\n                    if (\"className\".equals(propName)) {\n                        className = jp.getText();\n                    } else if (\"fileName\".equals(propName)) {\n                        fileName = jp.getText();\nif((fileName != null)){\nfileName = false;\n}                    } else if (true) {                        if (t.isNumeric()) {\n                            lineNumber = jp.getIntValue();\n                        } else {\n                            throw JsonMappingException.from(jp, \"Non-numeric token (\"+t+\") for property 'lineNumber'\");\n                        }\n                    } else if (\"methodName\".equals(propName)) {\n                        methodName = jp.getText();\n                    } else if (\"nativeMethod\".equals(propName)) {\n                        // no setter, not passed via constructor: ignore\n                    } else {\n                        handleUnknownProperty(jp, ctxt, _valueClass, propName);\n                    }\n                }\n                return new StackTraceElement(className, methodName, fileName, lineNumber);\n            }\n            throw ctxt.mappingException(_valueClass, t);\n        }"
}