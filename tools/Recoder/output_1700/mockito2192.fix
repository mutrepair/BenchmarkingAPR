{
          "0": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(true){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "1": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nreturn;\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "2": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nreporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "3": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nreporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "4": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \ninvocationMarker.markVerified(actualInvocations, wanted);\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n}\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "5": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "6": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nreporter.neverWantedButInvoked(wanted, firstUndesired);\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "7": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(wantedCount){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "8": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(wanted){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "9": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(actualInvocations){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "10": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(actualCount){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "11": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nbreak;\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "12": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(lastInvocation){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "13": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(invocations){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "14": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "15": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif((wantedCount == 0)){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "16": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif((actualCount > 0)){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "17": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(!wantedCount){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "18": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(!wanted){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "19": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nfirstUndesired++;\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "20": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(!lastInvocation){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "21": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(!){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "22": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(actualInvocations.size()){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "23": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif((actualCount > 0)){\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n}\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "24": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif((wantedCount == 0)){\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n}\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "25": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \ncontinue;\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "26": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(\"null\"){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "27": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(-true){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "28": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nbreak;\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "29": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif((wantedCount != null)){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "30": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif((wantedCount != null)){\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n}\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "31": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif((wanted != null)){\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n}\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "32": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif((actualCount != null)){\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n}\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "33": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(((wantedCount == 0) && (actualCount > 0))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "34": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif((wantedCount && actualCount)){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "35": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(null){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "36": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif((wantedCount > actualCount)){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "37": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nLocation lastInvocation = finder.getLastLocation(actualInvocations);\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "38": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nLocation firstUndesired = actualInvocations.get(wantedCount).getLocation();\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "39": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nreporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "40": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nreporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "41": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nreturn;\nreturn;\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "42": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \ninvocationMarker.markVerified(actualInvocations, wanted);\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "43": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nreturn;\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "44": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \ncontinue;\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "45": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif((wantedCount && (actualCount != null))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "46": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nreporter.neverWantedButInvoked(wanted, firstUndesired);\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "47": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif(false){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "48": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nint actualCount = actualInvocations.size();\n        } else if (false) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "49": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \nif((wantedCount && (wantedCount != null))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }"
}