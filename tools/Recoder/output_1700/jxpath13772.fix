{
          "0": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate + 0));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "1": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate + 2));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "2": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn null;            return doPredicatesStandard(\n                context,\n                newList,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + -1);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "3": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn null;        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "4": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate <= -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "5": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (steps + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "6": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (newList + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "7": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentStep + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "8": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nnewList.add(pointer);\n            return doPredicatesStandard(\n                context,\n                newList,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + -1);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "9": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "10": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, ( + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "11": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate - -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "12": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (parents + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "13": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate >= -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "14": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn isNameAttributeEqual(context, newList, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "15": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn indexFromPredicate(context, newList, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "16": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (predicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "17": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (context + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "18": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate > -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "19": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (i + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "20": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn keyFromPredicate(context, newList, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "21": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (key + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "22": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicate(context, ptr, steps, currentStep, predicates, (currentPredicate + 1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "23": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(steps, newList, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "24": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(currentStep, newList, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "25": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (predicates + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "26": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate == -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "27": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate + false));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "28": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(, newList, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "29": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicate(context, newList, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "30": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, currentStep, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "31": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, steps, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "32": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate < -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "33": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, steps, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "34": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, currentStep, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "35": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, currentStep, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "36": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, steps, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "37": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(newList, newList, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "38": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doStep(context, pointer, steps, (currentStep + 1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "39": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, , (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "40": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, , predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "41": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, , currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "42": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, predicate);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "43": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate + true));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "44": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, , steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "45": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, newList, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "46": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, newList, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "47": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, newList, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "48": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(parents, newList, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "49": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate + 1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "50": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doStep(context, newList, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "51": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nbreak;\n            return doPredicatesStandard(\n                context,\n                newList,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + -1);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "52": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate + null));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "53": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, parents, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "54": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(predicate, newList, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "55": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, parents, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "56": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, parents, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "57": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "58": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate / -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "59": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, context, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "60": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, context, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "61": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, context, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "62": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicate, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "63": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(predicates, newList, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "64": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate + \"null\"));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "65": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, context, steps, currentStep, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "66": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, predicate, predicates, (currentPredicate + -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "67": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, newList, steps, currentStep, predicates, (currentPredicate != -1));        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "68": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\ncontinue;\n            return doPredicatesStandard(\n                context,\n                newList,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + -1);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "69": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, steps, steps, predicates);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "70": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn;\n            return doPredicatesStandard(\n                context,\n                newList,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + -1);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "71": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, steps, currentStep, predicates);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "72": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, steps, steps, currentStep);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "73": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, steps, currentStep, currentPredicate);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "74": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, parents, steps, predicates);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "75": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, steps, currentStep, currentStep);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "76": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, steps, steps, currentPredicate);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "77": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, parents, steps, currentStep);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "78": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, parents, currentStep, predicates);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "79": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, steps, steps, predicates, currentPredicate);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "80": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, steps, currentStep, (currentPredicate + -1), predicates);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "81": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, steps, steps, (currentPredicate + -1), predicates);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "82": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, steps, steps, currentStep, predicates);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "83": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, steps, steps, currentStep, currentPredicate);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "84": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, steps, currentStep, predicates, currentPredicate);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "85": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, steps, steps, predicates, predicates);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }",
          "86": "    private static NodePointer doPredicatesStandard(\n                EvalContext context, List parents,\n                Step[] steps, int currentStep,\n                Expression predicates[], int currentPredicate)\n    {\n        if (parents.size() == 0) {\n            return null;\n        }\n\n        // If all predicates have been processed, take the first\n        // element from the list of results and proceed to the\n        // remaining steps with that element.\n        if (currentPredicate == predicates.length) {\n            NodePointer pointer = (NodePointer) parents.get(0);\n            return doStep(context, pointer, steps, currentStep + 1);\n        }\n\n        Expression predicate = predicates[currentPredicate];\n        if (predicate instanceof NameAttributeTest) {\n            String key = keyFromPredicate(context, predicate);\n            List newList = new ArrayList();\n            for (int i = 0; i < parents.size(); i++) {\n                NodePointer pointer = (NodePointer) parents.get(i);\n                if (isNameAttributeEqual(pointer, key)) {\n                    newList.add(pointer);\n                }\n            }\n            if (newList.size() == 0) {\n                return null;\n            }\nreturn doPredicatesStandard(context, parents, parents, steps, currentStep, predicates);        }\n        else {\n            // For a subscript, simply take the corresponding\n            // element from the list of results and\n            // proceed to the remaining predicates with that element\n            int index = indexFromPredicate(context, predicate);\n            if (index < 0 || index >= parents.size()) {\n                return null;\n            }\n            NodePointer ptr = (NodePointer) parents.get(index);\n            return doPredicate(\n                context,\n                ptr,\n                steps,\n                currentStep,\n                predicates,\n                currentPredicate + 1);\n        }\n    }"
}