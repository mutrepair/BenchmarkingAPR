{
          "0": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn false;    }",
          "1": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn true;    }",
          "2": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn true;        return true;    }",
          "3": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\n    }",
          "4": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\ncontinue;\n    }",
          "5": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn cls;    }",
          "6": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn supertype;    }",
          "7": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nbreak;\n        return true;    }",
          "8": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn cls.getSuperclass();    }",
          "9": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn;\n    }",
          "10": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn rawType;    }",
          "11": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn -1;    }",
          "12": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\ncls++;\n        return true;    }",
          "13": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn prefix;    }",
          "14": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn supertype.getSuperclass();    }",
          "15": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn;\n        return true;    }",
          "16": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\ncontinue;\n        return true;    }",
          "17": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn false;        return true;    }",
          "18": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn ;    }",
          "19": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nbreak;\n    }",
          "20": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn rawType.getSuperclass();    }",
          "21": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif((prefix == null)){\nreturn true;}        return true;    }",
          "22": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif((prefix != null)){\n}\n        return true;    }",
          "23": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\ncls = false;\n        return true;    }",
          "24": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif((cls == null)){\nreturn true;}        return true;    }",
          "25": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif((rawType == null)){\nreturn true;}        return true;    }",
          "26": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif((supertype == null)){\nreturn true;}        return true;    }",
          "27": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif((cls != null)){\n}\n        return true;    }",
          "28": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif((prefix != null)){\nreturn true;}        return true;    }",
          "29": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif((supertype != null)){\n}\n        return true;    }",
          "30": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif((rawType != null)){\n}\n        return true;    }",
          "31": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nfor(Class<?> cls = rawType;(cls != null);cls = cls.getSuperclass()) {        return true;    }",
          "32": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif((rawType != null)){\nreturn true;}        return true;    }",
          "33": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn this;    }",
          "34": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif((cls != null)){\nreturn true;}        return true;    }",
          "35": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif((supertype != null)){\nreturn true;}        return true;    }",
          "36": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif(supertype.getName().startsWith(prefix)){\n}\n        return true;    }",
          "37": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nfor(Class<?> supertype = rawType.getSuperclass();(supertype != null);supertype = supertype.getSuperclass()) {        return true;    }",
          "38": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif(hasInterfaceStartingWith(cls, prefix)){\n}\n        return true;    }",
          "39": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\n ;\n        return true;    }",
          "40": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn ((prefix != null) && (prefix == null));    }",
          "41": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn ((rawType != null) && (prefix == null));    }",
          "42": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nreturn ((prefix != null) && (cls == null));    }",
          "43": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif(((prefix != null) && (cls != null))){\nreturn true;}        return true;    }",
          "44": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif(((prefix == null) && (cls != null))){\nreturn true;}        return true;    }",
          "45": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif(((prefix != null) && (prefix != null))){\nreturn true;}        return true;    }",
          "46": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif(((prefix != null) && (cls == null))){\nreturn true;}        return true;    }",
          "47": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif(((prefix == null) && (cls == null))){\nreturn true;}        return true;    }",
          "48": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif(((prefix == null) && (prefix != null))){\nreturn true;}        return true;    }",
          "49": "    private boolean hasSupertypeStartingWith(Class<?> rawType, String prefix)\n    {\n        // first, superclasses\n        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {\n            if (supertype.getName().startsWith(prefix)) {\n                return true;\n            }\n        }\n        // then interfaces\n        for (Class<?> cls = rawType; cls != null; cls = cls.getSuperclass()) {\n            if (hasInterfaceStartingWith(cls, prefix)) {\n                return true;\n            }\n        }\nif(((prefix == null) || (cls == null))){\nreturn true;}        return true;    }"
}