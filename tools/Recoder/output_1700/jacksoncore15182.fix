{
          "0": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nwriteStartArray();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "1": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nwriteEndArray();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "2": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nwriteStartObject();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "3": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nwriteEndObject();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "4": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nwriteNull();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "5": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nflush();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "6": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nclose();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "7": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_releaseBuffers();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "8": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_writeNull();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "9": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_flushBuffer();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "10": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif(false){                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "11": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nreturn;\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "12": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif((_outputBuffer != null)){\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "13": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "14": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif((_outputBuffer != null)){\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n}\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "15": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif(_outputBuffer){\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "16": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif(_writer){\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "17": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_outputBuffer = false;\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "18": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nthis.writeStartArray();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "19": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nthis.writeEndArray();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "20": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nthis.writeStartObject();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "21": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nthis.writeEndObject();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "22": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nthis.writeNull();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "23": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nthis.flush();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "24": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nthis.close();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "25": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nthis._releaseBuffers();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "26": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nthis._writeNull();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "27": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nthis._flushBuffer();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "28": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif(-false){                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "29": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_outputBuffer = true;\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "30": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_writer.close();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "31": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_writer.flush();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "32": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nFeature.writeStartArray();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "33": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nFeature.writeEndArray();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "34": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nFeature.writeStartObject();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "35": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nFeature.writeEndObject();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "36": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nFeature.writeNull();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "37": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nFeature.flush();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "38": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nFeature.close();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "39": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nFeature._releaseBuffers();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "40": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nFeature._writeNull();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "41": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nFeature._flushBuffer();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "42": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif(!_outputBuffer){\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "43": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nsuper.close();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "44": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_ioContext.writeStartArray();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "45": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_ioContext.writeEndArray();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "46": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_ioContext.writeStartObject();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "47": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_ioContext.writeEndObject();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "48": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_ioContext.writeNull();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "49": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_ioContext.flush();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "50": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_ioContext.close();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "51": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_ioContext._releaseBuffers();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "52": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_ioContext._writeNull();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "53": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_ioContext._flushBuffer();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "54": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif((_outputBuffer != null)){\nreturn;\n}                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "55": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif(!_writer){\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "56": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nbreak;\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "57": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif(((_outputBuffer != null) && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT))){\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n}\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "58": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif(-true){                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "59": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_outputBuffer = null;\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "60": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_writer = false;\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "61": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif(_ioContext.isResourceManaged()){\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "62": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\ncontinue;\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "63": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\n_writer = true;\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "64": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nreturn this;                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "65": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nbreak;\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "66": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif(isEnabled(Feature.FLUSH_PASSED_TO_STREAM)){\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "67": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif(ctxt.inObject()){\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "68": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif((_writer != null)){\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "69": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif((_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET))){\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "70": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif(ctxt.inObject()){\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n}\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "71": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif((_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET))){\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n}\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "72": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif((_writer != null)){\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n}\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "73": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nJsonStreamContext ctxt = getOutputContext();\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "74": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif(isEnabled(Feature.FLUSH_PASSED_TO_STREAM)){\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n}\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "75": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nreturn;\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "76": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nreturn;\nreturn;\n                if (true) {                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "77": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\nif(true){                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }",
          "78": "    public void close()\n        throws IOException\n    {\n        super.close();\n\n        /* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open\n         *   scopes.\n         */\n        // First: let's see that we still have buffers...\n        if (_outputBuffer != null\n            && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                JsonStreamContext ctxt = getOutputContext();\ncontinue;\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            }\n        }\n        _flushBuffer();\n\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside: when using UTF8Writer, underlying buffer(s)\n         *   may not be properly recycled if we don't close the writer.\n         */\n        if (_writer != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {\n                _writer.close();\n            } else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n                // If we can't close it, we should at least flush\n                _writer.flush();\n            }\n        }\n        // Internal buffer(s) generator has can now be released as well\n        _releaseBuffers();\n    }"
}