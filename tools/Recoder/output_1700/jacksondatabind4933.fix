{
          "0": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(true){                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "1": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(getDeserializationConfig()){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "2": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(t){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "3": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(result){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "4": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t != null)){\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n}\n    }",
          "5": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(jp){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "6": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t == JsonToken.END_ARRAY)){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "7": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t == JsonToken.END_OBJECT)){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "8": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t == null)){\nreturn result;}            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "9": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(t.isEmpty()){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "10": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nresult = _findRootDeserializer(ctxt, valueType).getNullValue();\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "11": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nreturn result;            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "12": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(!t){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "13": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t == null)){\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n}\n    }",
          "14": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(\"null\"){                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "15": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(!jp){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "16": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "17": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t == null)){\nreturn null;}            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "18": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "19": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t != null)){\nreturn result;}            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "20": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nresult = null;\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "21": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(!result){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "22": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t == JsonToken.END_ARRAY)){\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n}\n    }",
          "23": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(valueType){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "24": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(END_ARRAY){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "25": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t != JsonToken.END_OBJECT)){\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n}\n    }",
          "26": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nreturn null;            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "27": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(!true){                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "28": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nresult = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "29": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(-true){                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "30": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(END_OBJECT){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "31": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(_findRootDeserializer()){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "32": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t && getDeserializationConfig())){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "33": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nreturn;\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "34": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t == JsonToken.END_OBJECT)){\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n}\n    }",
          "35": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t != JsonToken.END_ARRAY)){\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n}\n    }",
          "36": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(((t == JsonToken.END_ARRAY) || (t == JsonToken.END_OBJECT))){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "37": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\njp.clearCurrentToken();\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "38": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t != null)){\nreturn null;}            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "39": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t == JsonToken.END_OBJECT)){\nreturn result;}            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "40": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(cfg.useRootWrapping()){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "41": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\njp.close();\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "42": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nresult = deser.deserialize(jp, ctxt);\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "43": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t == null)){\nreturn;\n}            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "44": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nbreak;\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "45": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(false){                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "46": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t == t)){\nreturn result;}            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "47": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t == jp)){\nreturn result;}            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "48": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(((t == JsonToken.END_ARRAY) || (t == JsonToken.END_OBJECT))){\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n}\n    }",
          "49": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((jp == null)){\nreturn result;}            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "50": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t && (t != null))){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "51": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((t && (t == null))){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "52": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nbreak;\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "53": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif(cfg.useRootWrapping()){\n            if (false) {                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n}\n    }",
          "54": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((jp && (t == null))){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "55": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nif((jp && (t != null))){\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }",
          "56": "    protected Object _readMapAndClose(JsonParser jp, JavaType valueType)\n        throws IOException, JsonParseException, JsonMappingException\n    {\n        try {\n            Object result;\n            JsonToken t = _initForReading(jp);\nreturn;\n                // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n                DeserializationContext ctxt = createDeserializationContext(jp,\n                        getDeserializationConfig());\n                result = _findRootDeserializer(ctxt, valueType).getNullValue();\n            } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                result = null;\n            } else {\n                DeserializationConfig cfg = getDeserializationConfig();\n                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                if (cfg.useRootWrapping()) {\n                    result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n                } else {\n                    result = deser.deserialize(jp, ctxt);\n                }\n            }\n            // Need to consume the token too\n            jp.clearCurrentToken();\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (IOException ioe) { }\n        }\n    }"
}