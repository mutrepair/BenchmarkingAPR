{
          "0": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "1": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nsize = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "2": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nheight = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "3": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nnextIndex = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "4": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\ncurrentIndex = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "5": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nexpectedModCount = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "6": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = relativePosition;\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "7": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nclear();\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "8": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrecalcHeight();\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "9": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\ncheckModCount();\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "10": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nremove();\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "11": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nreturn;\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "12": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid - absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "13": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid * end);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "14": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid * mid);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "15": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (absolutePositionOfParent * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "16": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (end * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "17": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nleft = new AVLNode<E>(iterator, start, (mid - 1), mid, prev, this);\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "18": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nleftIsPrevious = true;\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "19": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nabsolutePositionOfParent = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "20": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nvalue = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "21": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nleft = prev;\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "22": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid * prev);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "23": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nend = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "24": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = end;\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "25": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "26": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid + absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "27": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = start;\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "28": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nright = new AVLNode<E>(iterator, (mid + 1), end, mid, this, next);\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "29": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = iterator.next();\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "30": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (prev * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "31": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nleft = new AVLNode<E>(iterator, start, (mid - 1), mid, prev, this);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "32": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid <= absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "33": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid * start);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "34": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = iterator;\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "35": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nright = next;\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "36": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\niterator = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "37": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nif(((end - start) / 2)){\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n}\n        }",
          "38": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nleftIsPrevious = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "39": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrightIsNext = true;\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "40": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid * iterator);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "41": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nstart = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "42": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition += (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "43": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nvalue = iterator.next();\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "44": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid - 1);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "45": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nleftIsPrevious = true;\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "46": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid * value);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "47": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nif((end - start)){\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n}\n        }",
          "48": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = mid;\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "49": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (start * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "50": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nleft = prev;\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "51": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nmid = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "52": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid + 1);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "53": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = absolutePositionOfParent;\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "54": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (iterator * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "55": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid >= absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "56": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nleft = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "57": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nsize.relativePosition = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "58": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nheight.relativePosition = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "59": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition.relativePosition = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "60": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nnextIndex.relativePosition = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "61": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\ncurrentIndex.relativePosition = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "62": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nexpectedModCount.relativePosition = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "63": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nsize().relativePosition = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "64": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nheightRightMinusLeft().relativePosition = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "65": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nnextIndex().relativePosition = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "66": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\npreviousIndex().relativePosition = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "67": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nright = new AVLNode<E>(iterator, (mid + 1), end, mid, this, next);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "68": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nif(relativePosition){\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n}\n        }",
          "69": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid * next);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "70": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (value * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "71": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nright = (mid * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "72": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid / absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "73": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid >> absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "74": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid * e);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "75": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nif((mid - 1)){\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n}\n        }",
          "76": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (next * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "77": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nif((mid + 1)){\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n}\n        }",
          "78": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nif((start < mid)){\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n}\n        }",
          "79": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid % absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "80": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid == absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "81": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nif((mid < end)){\n            relativePosition = mid * absolutePositionOfParent;            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n}\n        }",
          "82": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nright = next;\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "83": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (e * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "84": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = ((mid * absolutePositionOfParent) * absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "85": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrightIsNext = true;\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "86": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = ((mid * absolutePositionOfParent) * end);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "87": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid * relativePosition);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "88": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (mid < absolutePositionOfParent);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }",
          "89": "        private AVLNode(final Iterator<? extends E> iterator, final int start, final int end,\n                        final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next) {\n            final int mid = start + (end - start) / 2;\n            if (start < mid) {\n                left = new AVLNode<E>(iterator, start, mid - 1, mid, prev, this);\n            } else {\n                leftIsPrevious = true;\n                left = prev;\n            }\n            value = iterator.next();\nrelativePosition = (relativePosition * end);\n            if (mid < end) {\n                right = new AVLNode<E>(iterator, mid + 1, end, mid, this, next);\n            } else {\n                rightIsNext = true;\n                right = next;\n            }\n            recalcHeight();\n        }"
}