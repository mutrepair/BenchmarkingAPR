{
          "0": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile((4294981120L & (1L << curChar))){\n\n}         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "1": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1 << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "2": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile((curChar <= 32)){\n\n}         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "3": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (2 << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "4": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile((1L << curChar)){\n\n}         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "5": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((4294981120L & (1L << curChar)) != 0L)){\n\n}         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "6": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\ninput_stream.backup(0);\n      while (curChar <= 32 == ((4294981120L & (1L << curChar)) != 0L))         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "7": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L > curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "8": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 1) == ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "9": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L << curChar)) != 1))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "10": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 2) == ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "11": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L << curChar)) != 2))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "12": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L == curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "13": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L >= curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "14": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((1 & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "15": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L <= curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "16": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\ncurChar = input_stream.BeginToken();\n      while (curChar <= 32 == ((4294981120L & (1L << curChar)) != 0L))         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "17": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((2 & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "18": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((0 & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "19": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L != curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "20": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L < curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "21": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\ndo{\n}while((4294981120L & (1L << curChar)))\n         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "22": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nReInitRounds();\n      while (curChar <= 32 == ((4294981120L & (1L << curChar)) != 0L))         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "23": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) > ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "24": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\njjmatchedKind = 0;\n      while (curChar <= 32 == ((4294981120L & (1L << curChar)) != 0L))         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "25": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar > 32) == ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "26": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nmatchedToken = jjFillToken();\n      while (curChar <= 32 == ((4294981120L & (1L << curChar)) != 0L))         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "27": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nreturn matchedToken;      while (curChar <= 32 == ((4294981120L & (1L << curChar)) != 0L))         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "28": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar == 32) == ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "29": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar >= 32) == ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "30": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\ndo{\n}while((curChar <= 32))\n         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "31": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "32": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\ndo{\n}while(((4294981120L & (1L << curChar)) != 0L))\n         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "33": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\ndo{\n}while((1L << curChar))\n         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "34": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar != 32) == ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "35": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L && curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "36": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) && ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "37": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) < ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "38": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nbreak;\n      while (curChar <= 32 == ((4294981120L & (1L << curChar)) != 0L))         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "39": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile((((curChar <= 32) == ((4294981120L & (1L << curChar)) != 0L)) && ((4294981120L & (1L << curChar)) != 0L))){\n\n}         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "40": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L & curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "41": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar < 32) == ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "42": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) >= ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "43": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (\"null\" << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "44": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) != ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "45": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile((((curChar <= 32) == ((4294981120L & (1L << curChar)) != 0L)) && ((curChar <= 32) == ((4294981120L & (1L << curChar)) != 0L)))){\n\n}         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "46": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L << curChar)) != 0L))){\ncurChar = input_stream.BeginToken();\n\n}         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "47": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L || curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "48": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (0 << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "49": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L << curChar)) != 0L))){\n\n}         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "50": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 1L) == ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "51": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (4294981120L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "52": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) || ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "53": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile((((curChar <= 32) == ((4294981120L & (1L << curChar)) != 0L)) && (4294981120L & (1L << curChar)))){\n\n}         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "54": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile((((curChar <= 32) == ((4294981120L & (1L << curChar)) != 0L)) && (1L << curChar))){\n\n}         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "55": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L >>> curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "56": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) <= ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "57": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L << curChar)) != 1L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "58": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (32 << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "59": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 0) == ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "60": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((1L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "61": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 4294981120L) == ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "62": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) & ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "63": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar & 32) == ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "64": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar <= 32) == ((4294981120L & (1L << curChar)) != 0))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "65": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile(((curChar && 32) == ((4294981120L & (1L << curChar)) != 0L))){         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "66": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nreturn;\n      while (curChar <= 32 == ((4294981120L & (1L << curChar)) != 0L))         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "67": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\ncontinue;\n      while (curChar <= 32 == ((4294981120L & (1L << curChar)) != 0L))         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "68": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\n      while (curChar <= 32 == ((4294981120L & (1L << curChar)) != 0L))         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "69": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile((((curChar <= 32) == ((4294981120L & (1L << curChar)) != 0L)) && (matchedToken != matchedToken))){\n\n}         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}",
          "70": "public Token getNextToken() \n{\n  int kind;\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\nwhile((((curChar <= 32) == ((4294981120L & (1L << curChar)) != 0L)) && (matchedToken == matchedToken))){\n\n}         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         return matchedToken;\n      }\n      else\n      {\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}"
}