{
          "0": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((vertexI[j] == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "1": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] >= 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "2": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "3": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] == 2)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "4": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[i] == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "5": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] <= 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "6": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((j == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "7": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((j[j] == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "8": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] > 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "9": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((vertexI == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "10": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((j + 1)){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "11": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] != 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "12": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((startConfiguration[j] == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "13": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {                if (steps[j] == 1) {                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n\nreturn;\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "14": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((dimension[j] == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "15": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] == -1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "16": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(steps[j]){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "17": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((i + 1)){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "18": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {                if (steps[j] == 1) {                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n\nif((i + 1)){\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n}\n            }\n        }\n    }",
          "19": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] < 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "20": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "21": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] == 1)){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "22": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((i == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "23": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((vertexI[i] == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "24": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && (j + 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "25": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {                if (steps[j] == 1) {                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n\nif((j + 1)){\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n}\n            }\n        }\n    }",
          "26": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps == 1)){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "27": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {                if (steps[j] == 1) {                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n\nbreak;\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "28": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) || (j + 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "29": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && (steps[j] == 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "30": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] != 1)){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "31": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps != 1)){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "32": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] - 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "33": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(([i] == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "34": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] == steps[j])){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "35": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((i[i] == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "36": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((dimension == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "37": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) || (steps[j] == 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "38": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(vertexI[j]){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "39": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && (steps == 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "40": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((startConfiguration[i] == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "41": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(steps){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "42": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(( == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "43": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((startConfiguration == 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "44": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps != 1) && (steps[j] == 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "45": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && steps[j])){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "46": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {                if (steps[j] == 1) {                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n\nfor(int j = 0;(j < (i + 1));j++) {                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "47": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps == steps[j])){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "48": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && (steps != 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "49": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) || steps[j])){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "50": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && (j < (i + 1)))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "51": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) || (steps == 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "52": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && (i + 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "53": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {                if (steps[j] == 1) {                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n\nSystem.arraycopy(steps, 0, vertexI, 0, (j + 1));\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "54": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && vertexI[j])){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "55": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps == 1) && (steps[j] == 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "56": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] == steps)){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "57": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] == false)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "58": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] == 0)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "59": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {                if (steps[j] == 1) {                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n\nstartConfiguration = new double[dimension];\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "60": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && (steps[j] != 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "61": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && (vertexI == 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "62": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {                if (steps[j] == 1) {                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n\nfor(int i = 0;(i < dimension);i++) {                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "63": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps != 1) || (steps[j] == 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "64": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {                if (steps[j] == 1) {                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n\ndimension = steps.length;\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "65": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps == 1) || (steps[j] == 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "66": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {                if (steps[j] == 1) {                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n\nif((steps.length == 0)){\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n}\n            }\n        }\n    }",
          "67": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {                if (steps[j] == 1) {                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n\nif((j < (i + 1))){\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n}\n            }\n        }\n    }",
          "68": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) || (steps != 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "69": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {                if (steps[j] == 1) {                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n\ncontinue;\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "70": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && (j == 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "71": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && (vertexI != 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "72": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) || (vertexI == 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "73": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] >>> 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "74": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] + 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "75": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) || (steps[j] != 1))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "76": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif((steps[j] >> 1)){                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "77": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && (steps == steps))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "78": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && (steps == vertexI))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "79": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) && (steps == steps[j]))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "80": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) || (steps == steps))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }",
          "81": "    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\nif(((steps[j] == 1) || (steps == steps[j]))){\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }"
}