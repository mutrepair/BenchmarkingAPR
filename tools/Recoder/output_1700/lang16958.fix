{
          "0": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd >= 0)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "1": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd == 0)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "2": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd <= 0)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "3": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd != 0)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "4": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd > 0)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "5": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(gcd){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "6": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd < 0)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "7": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || (gcd == 0))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "8": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd == 1)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "9": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || (gcd == null))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "10": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(gcd.isEmpty()){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "11": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) && (gcd == 0))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "12": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(!gcd){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "13": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || (gcd != null))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "14": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || (gcd == gcd))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "15": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((denominator == 0)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "16": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || (gcd != 0))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "17": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || gcd)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "18": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) && (gcd == null))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "19": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) && (gcd != null))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "20": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd != 0)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "21": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == null) || (gcd == 0))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "22": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd == 2)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "23": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || (numerator / gcd))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "24": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((numerator == 0)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "25": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || (denominator / gcd))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "26": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) && (gcd != 0))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "27": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd - 0)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "28": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd == gcd)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "29": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) && (gcd == gcd))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "30": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd != null)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "31": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((numerator / gcd)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "32": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((denominator / gcd)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "33": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(Math.abs(numerator)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "34": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd == (gcd == 0))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "35": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || (gcd == numerator))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "36": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || 0)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "37": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((ZERO == 0)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "38": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd != null) || (gcd == 0))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "39": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || gcd.isEmpty())){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "40": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(gcd.equals(gcd)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "41": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd == null)){\nreturn null;}        if (gcd == 0) {            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "42": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) && gcd)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "43": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == null) && (gcd == 0))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "44": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || (gcd == denominator))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "45": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) && (numerator / gcd))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "46": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd == denominator)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "47": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(!gcd.isEmpty()){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "48": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) && (denominator / gcd))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "49": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd == null)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "50": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || (gcd < 0))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "51": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || (gcd != gcd))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "52": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd != null) && (gcd == 0))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "53": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || (gcd == ))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "54": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((numerator == 0)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "55": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\ngcd++;\n        if (gcd == 0) {            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "56": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || (gcd > 0))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "57": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) && (gcd == numerator))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "58": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(equals(ZERO)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "59": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd + 0)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "60": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(((gcd == 0) || (denominator == gcd))){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "61": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(gcd.equals(numerator)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "62": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(( == 0)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "63": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd == 0)){\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "64": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd >>> 0)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "65": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((gcd && 0)){            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
          "66": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif((numerator == 0)){\n        if (gcd == 0) {            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n}\n    }",
          "67": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        final int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif(equals(ZERO)){\n        if (gcd == 0) {            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n}\n    }"
}