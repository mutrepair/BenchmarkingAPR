{
          "0": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(false){            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "1": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nreturn rval;        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "2": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nclear();\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "3": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nmodify();\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n}\n        }\n        return rval;\n    }",
          "4": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\ngrow();\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "5": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nshrink();\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "6": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nremove();\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "7": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nrval = null;\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "8": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(dataElement){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "9": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nbreak;\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "10": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nparent = parent.getParent(dataElement);\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "11": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nrval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "12": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nchild = parent;\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "13": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nrval = parent;\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "14": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nreturn;\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "15": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(isEmpty()){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "16": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(hasNext()){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "17": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(hasPrevious()){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "18": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nreturn null;        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "19": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(node){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "20": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(!dataElement){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "21": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "22": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\ncontinue;\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "23": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(dataElement.isEmpty()){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "24": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(node.getLeft(dataElement)){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "25": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "26": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nreturn dataElement;        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "27": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement || dataElement)){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "28": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(-false){            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "29": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement != null)){\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n}\n        }\n        return rval;\n    }",
          "30": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement || node.getLeft(dataElement))){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "31": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((parent != null)){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "32": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(!isEmpty()){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "33": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(!hasNext()){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "34": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(!hasPrevious()){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "35": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(rval){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "36": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(node.isEmpty()){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "37": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nrval++;\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "38": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement && dataElement)){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "39": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nrval = rval;\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "40": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((child == parent.getLeft(dataElement))){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "41": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((rval != null)){\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n}\n        }\n        return rval;\n    }",
          "42": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement && node.getLeft(dataElement))){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "43": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(!node){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "44": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nrval = dataElement;\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "45": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((parent != null)){\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n}\n        }\n        return rval;\n    }",
          "46": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(parent){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "47": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nrval--;\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "48": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement || (child == parent.getLeft(dataElement)))){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "49": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nreturn this;        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "50": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((node == null)){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "51": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((child == parent.getLeft(dataElement))){\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n}\n        }\n        return rval;\n    }",
          "52": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement == null)){\nreturn rval;}        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "53": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((rval == null)){\nreturn rval;}        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "54": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement && (dataElement != null))){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "55": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement || false)){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "56": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement || (dataElement != null))){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "57": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement || node)){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "58": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement == null)){\nreturn null;}        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "59": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement || (dataElement == null))){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "60": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((rval == null)){\nreturn null;}        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "61": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement && (dataElement == null))){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "62": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((node == null)){\n        } else if (true) {            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n}\n        }\n        return rval;\n    }",
          "63": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nbreak;\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "64": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement && ( != null))){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "65": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement || ( != null))){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "66": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif((dataElement || ( == null))){\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "67": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nreturn;\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "68": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nif(true){            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "69": "    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\nchild = parent;\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }"
}