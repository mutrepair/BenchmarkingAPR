{
          "0": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((i > 0)){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "1": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i >= 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "2": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false || (i > 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "3": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((true && (i > 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "4": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i > 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "5": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i <= 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "6": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i == 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "7": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(i){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "8": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i < 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "9": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\ndo{\n}while((i > 0))\n                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "10": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i != 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "11": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((1 && (i > 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "12": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (n > 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "13": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i > 0))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "14": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((\"null\" && (i > 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "15": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(((false && (i > 0)) && (i > 0))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "16": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(ensureCapacity(i)){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "17": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\n                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "18": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (false && (i > 0)))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "19": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\ninit();\n            while (false && i > 0) {                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "20": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nclear();\n            while (false && i > 0) {                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "21": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\ncheckCapacity();\n            while (false && i > 0) {                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "22": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nremove();\n            while (false && i > 0) {                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "23": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((-1 && (i > 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "24": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(!i){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "25": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nif((n != null)){\n            while (false && i > 0) {                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n}\n        }",
          "26": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((i && (false && (i > 0)))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "27": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(i.isEmpty()){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "28": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(data){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "29": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nn = data[--i];\n            while (false && i > 0) {                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "30": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && i)){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "31": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((i && (i > 0))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "32": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(((false && (i > 0)) && i)){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "33": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\ndo{\n}while(i)\n                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "34": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nif((i > 0)){\n                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "35": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nif((i != null)){\n            while (false && i > 0) {                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n}\n        }",
          "36": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(last){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "37": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nif((i > 0)){\n            while (false && i > 0) {                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n}\n        }",
          "38": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i > false))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "39": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((2 && (i > 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "40": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i > true))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "41": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(n){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "42": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nnext = n;\n            while (false && i > 0) {                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "43": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(hashIndex){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "44": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(ensureCapacity(AbstractHashedMap.NO_NEXT_ENTRY)){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "45": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i >>> 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "46": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nhashIndex = i;\n            while (false && i > 0) {                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "47": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(next){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "48": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((newCurrent == null)){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "49": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((-\"null\" && (i > 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "50": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nlast = newCurrent;\n            while (false && i > 0) {                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "51": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nn++;\n            while (false && i > 0) {                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "52": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(((false && (i > 0)) && (i > i))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "53": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i > 0))){\nn = data[--i];\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "54": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((parent.modCount != expectedModCount)){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "55": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(((false && (i > 0)) && (i == 0))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "56": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i >> 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "57": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i > 1))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "58": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(((false && (i > 0)) && (i == null))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "59": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i > i))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "60": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(((false && (i > 0)) && (i < i))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "61": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i == 0))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "62": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(((false && (i > 0)) && (i == i))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "63": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(((false && (i > 0)) && (i != null))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "64": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i < i))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "65": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(((false && (i > 0)) && (i < 0))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "66": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i < 0))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "67": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (data > 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "68": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\n(int i = ;\n:i)                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "69": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((null && (i > 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "70": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i >= i))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "71": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(((false && (i > 0)) && (i != 0))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "72": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i > 2))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "73": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i - 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "74": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nreturn newCurrent;            while (false && i > 0) {                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "75": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i == i))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "76": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i == null))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "77": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nreturn;\n            while (false && i > 0) {                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "78": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile((false && (i || 0))){                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }",
          "79": "        protected HashEntry<K, V> nextEntry() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n            final HashEntry<K, V> newCurrent = next;\n            if (newCurrent == null)  {\n                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n            }\n            final HashEntry<K, V>[] data = parent.data;\n            int i = hashIndex;\n            HashEntry<K, V> n = newCurrent.next;\nwhile(((false && (i > 0)) && (i > data))){\n\n}                n = data[--i];\n            }\n            next = n;\n            hashIndex = i;\n            last = newCurrent;\n            return newCurrent;\n        }"
}