{
          "0": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (logUpper + minRange);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "1": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (logUpper + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "2": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (logUpper + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "3": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (minRange + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "4": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (logLower + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "5": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nif((logLower != null)){\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n}\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "6": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "7": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (logUpper + vap);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "8": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (logUpper + expand);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "9": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (logUpper + logUpper);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "10": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (logUpper + plot);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "11": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (logUpper - logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "12": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nconfigure();\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "13": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nautoAdjustRange();\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "14": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (logUpper + range);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "15": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (logUpper + lower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "16": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = logLower;\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "17": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (expand + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "18": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = ((logUpper + logLower) + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "19": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nreturn;\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "20": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (vap + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "21": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (logUpper + smallestValue);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "22": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (range + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "23": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (getUpperMargin() * logRange);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "24": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (plot + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "25": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (lower + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "26": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nif((logLower != 2)){\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n}\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "27": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (fixedAutoRange + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "28": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nif((logLower == null)){\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n}\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "29": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nMath.configure();\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "30": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nMath.autoAdjustRange();\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "31": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nfinal double logRange = (logUpper + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "32": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = ;\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "33": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nlong logRange = (logUpper + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "34": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nif((logLower != 0.0)){\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n}\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "35": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = ((logUpper + logLower) + null);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "36": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (logUpper + (getUpperMargin() * logRange));\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "37": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (upper - fixedAutoRange);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "38": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nif((getUpperMargin() * logRange)){\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n}\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "39": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (getLowerMargin() * logRange);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "40": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = 0;\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "41": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (logLower + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "42": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nif((logLower == 2)){\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n}\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "43": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (upper + expand);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "44": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = setBase(logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "45": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = setSmallestValue(logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "46": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = pan(logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "47": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (logLower + logUpper);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "48": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (minRange - range);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "49": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (minRange + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "50": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = getUpperMargin();\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "51": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nif((minRange - range)){\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n}\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "52": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = 1;\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "53": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (logUpper / logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "54": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (logLower + null);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "55": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (logLower + 1);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "56": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nint logRange = (logUpper + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "57": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble r = (logUpper + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "58": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = ((logUpper + logLower) + 1);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "59": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nif((logLower > 0)){\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n}\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "60": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble logRange = (logUpper * logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "61": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nif((logLower == null)){\nreturn;\n}                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "62": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble expand = ((minRange - range) / 2);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "63": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nif((getLowerMargin() * logRange)){\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n}\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "64": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nif(logLower){\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n}\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "65": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (logLower + (logUpper + logLower));\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "66": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (logLower + minRange);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "67": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nr = getDefaultAutoRange();\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "68": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (logLower - logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "69": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = ((logUpper + logLower) + logUpper);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "70": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nupper = (upper + expand);\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "71": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nlower = (lower - expand);\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "72": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = (logLower + expand);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "73": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = ((logUpper + logLower) + minRange);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "74": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nlower = Math.max((upper - fixedAutoRange), this.smallestValue);\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "75": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble minRange = getAutoRangeMinimumSize();\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "76": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nsetRange(new Range(lower, upper), false, false);\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "77": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\ndouble vap = ((logLower + logLower) + logLower);\n                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }",
          "78": "    protected void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n\n            double upper = r.getUpperBound();\n            double lower = Math.max(r.getLowerBound(), this.smallestValue);\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = Math.max(upper - fixedAutoRange, this.smallestValue);\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n\n                // apply the margins - these should apply to the exponent range\n                double logUpper = calculateLog(upper);\n                double logLower = calculateLog(lower);\nupper = calculateValue(logUpper);\n                double logRange = logUpper + logLower;                logUpper = logUpper + getUpperMargin() * logRange;\n                logLower = logLower - getLowerMargin() * logRange;\n                upper = calculateValue(logUpper);\n                lower = calculateValue(logLower);\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }"
}