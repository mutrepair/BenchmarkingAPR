{
          "0": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size >> str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "1": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal long pads = (size % str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "2": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % size.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "3": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size >>> str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "4": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size - str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "5": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "6": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size * str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "7": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (pads % str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "8": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size / str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "9": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % padChar.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "10": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (PAD_LIMIT % str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "11": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % String.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "12": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size & str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "13": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = str.length();\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "14": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size << str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "15": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (padChar % str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "16": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % pads.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "17": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % .length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "18": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size | str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "19": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (str % str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "20": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % str.rightPad());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "21": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size <= str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "22": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = ( % str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "23": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nreturn null;        final int pads = size % str.length();        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "24": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = ( % str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "25": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal char pads = (size % str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "26": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % str.valueOf());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "27": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = size;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "28": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nint pads = (size % str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "29": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nif((size == null)){\nreturn null;}        final int pads = size % str.length();        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "30": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % .length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "31": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % str.repeat());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "32": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (str.length() * str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "33": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (str.length() / str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "34": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % str.getName());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "35": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (str.length() - str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "36": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % str.lastIndexOf());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "37": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = ((size % str.length()) * str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "38": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nreturn str;        final int pads = size % str.length();        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "39": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size / size);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "40": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size * size);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "41": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = ((size % str.length()) * size);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "42": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = str;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "43": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % .length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "44": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (pads <= 0);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "45": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nif((size != null)){\nreturn null;}        final int pads = size % str.length();        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "46": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % .length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "47": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size - size);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "48": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = ((size % str.length()) / size);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "49": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = ( % str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "50": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size + str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "51": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (str.length() / size);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "52": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nreturn;\n        final int pads = size % str.length();        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "53": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (str.length() * size);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "54": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (str.length() - size);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "55": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (pads > PAD_LIMIT);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "56": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = ( % str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "57": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = ((size % str.length()) - size);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "58": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (str == null);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "59": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % size);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "60": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % str.get());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "61": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal boolean pads = (size % str.length());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "62": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nstr.length();\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "63": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size * padChar);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "64": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size / padChar);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "65": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size % str.toString());\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "66": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size * (size % str.length()));\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "67": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nreturn str.concat(repeat(padChar, pads));        final int pads = size % str.length();        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }",
          "68": "    public static String rightPad(final String str, final int size, final char padChar) {\n        if (str == null) {\n            return null;\n        }\nfinal int pads = (size - padChar);\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }"
}