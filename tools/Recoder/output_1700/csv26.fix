{
          "0": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) || (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "1": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) && (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "2": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((encapsulator > DISABLED)){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "3": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((encapsulator == commentStart)){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "4": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) && (encapsulator == commentStart))){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "5": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator >= DISABLED) && (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "6": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) && (encapsulator == delimiter))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "7": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) && (encapsulator == encapsulator))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "8": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) && (encapsulator == escape))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "9": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) && (encapsulator == DISABLED))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "10": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) && (encapsulator >= commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "11": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > delimiter) && (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "12": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > encapsulator) && (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "13": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > commentStart) && (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "14": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > escape) && (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "15": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) && (encapsulator <= commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "16": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator <= DISABLED) && (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "17": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) && (encapsulator > commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "18": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator == DISABLED) && (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "19": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((delimiter > DISABLED) && (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "20": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((commentStart > DISABLED) && (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "21": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((escape > DISABLED) && (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "22": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((DISABLED > DISABLED) && (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "23": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((((encapsulator > DISABLED) && (encapsulator == commentStart)) && (encapsulator == commentStart))){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "24": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) && (encapsulator != commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "25": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\nreturn;\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "26": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\nvalidate();\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "27": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) && (encapsulator < commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "28": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator < DISABLED) && (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "29": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator != DISABLED) && (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "30": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\nif((delimiter == commentStart)){\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n}\n    }",
          "31": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((escape != DISABLED)){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "32": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(isEncapsulating()){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "33": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(isCommentingEnabled()){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "34": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(isEscaping()){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "35": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(isSurroundingSpacesIgnored()){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "36": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(isEmptyLinesIgnored()){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "37": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(commentStart){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "38": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) && ((encapsulator > DISABLED) && (encapsulator == commentStart)))){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "39": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((escape == commentStart)){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "40": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\nif((delimiter == escape)){\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n}\n    }",
          "41": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((((encapsulator > DISABLED) && (encapsulator == commentStart)) && (encapsulator == commentStart)) && (encapsulator == commentStart))){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "42": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\nif((delimiter == encapsulator)){\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n}\n    }",
          "43": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(encapsulator){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "44": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((delimiter == escape)){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "45": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((((encapsulator > DISABLED) && (encapsulator == commentStart)) && (escape == commentStart))){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "46": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\nif(((escape != DISABLED) && (escape == commentStart))){\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n}\n    }",
          "47": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((isEncapsulating() && (encapsulator == commentStart))){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "48": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((isCommentingEnabled() && (encapsulator == commentStart))){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "49": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((isEscaping() && (encapsulator == commentStart))){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "50": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((isSurroundingSpacesIgnored() && (encapsulator == commentStart))){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "51": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((isEmptyLinesIgnored() && (encapsulator == commentStart))){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "52": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((((encapsulator > DISABLED) && (encapsulator == commentStart)) || (encapsulator == commentStart))){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "53": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\nif(isEncapsulating()){\nreturn;\n}        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "54": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\nif(isCommentingEnabled()){\nreturn;\n}        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "55": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\nif(isEscaping()){\nreturn;\n}        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "56": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\nif(isSurroundingSpacesIgnored()){\nreturn;\n}        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "57": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\nif(isEmptyLinesIgnored()){\nreturn;\n}        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "58": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\nif((encapsulator == commentStart)){\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n}\n    }",
          "59": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\nbreak;\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "60": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\nif((escape != DISABLED)){\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n}\n    }",
          "61": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((escape != DISABLED) && (escape == commentStart))){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "62": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((\"null\" + encapsulator)){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "63": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) != (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "64": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((\"null\" + commentStart)){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "65": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif((delimiter == encapsulator)){\n            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "66": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) == (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "67": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \nif(((encapsulator > DISABLED) | (encapsulator == commentStart))){            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }",
          "68": "    void validate() throws IllegalArgumentException {\n        if (delimiter == encapsulator) {\n            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n        }\n        \n        if (delimiter == escape) {\n            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n        }\n        \n        if (delimiter == commentStart) {\n            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n                if (encapsulator > DISABLED && encapsulator == commentStart) {            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n\n        \n        if (escape != DISABLED && escape == commentStart) {\n            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n        }\n    }"
}