{
          "0": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix | 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "1": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix & 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "2": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix > 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "3": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix && 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "4": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix < 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "5": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix + 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "6": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix || 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "7": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix == 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "8": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix - 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "9": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix != 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "10": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (quads & 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "11": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ch2 & 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "12": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = ( & 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "13": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = ( & 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "14": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nch2 = (ix & 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "15": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nquads = (ix & 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "16": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\n = (ix & 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "17": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nix = (ix & 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "18": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = ix;\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "19": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\n = (ix & 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "20": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "21": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nch2 = (ch2 >> ((3 - byteIx) << 3));\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "22": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix & 1);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "23": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix + ix);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "24": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix | ix);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "25": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix & 2);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "26": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = ((ix & 0) | ix);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "27": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = ((ix & 0) + ix);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "28": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (byteIx + ix);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "29": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix + byteIx);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "30": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix & ix);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "31": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (byteIx | ix);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "32": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nch2 = (ch2 >> ((3 - byteIx) << 3));\n                byteIx = (ix & 0);                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "33": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix - ix);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "34": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix | byteIx);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "35": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (byteIx + byteIx);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "36": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = ((ix + ix) + 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "37": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = ((ix | ix) + 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "38": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = ((ix | ix) | 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "39": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = ((ix * ix) | 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "40": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = ((ix * ix) + 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "41": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = ((ix + ix) | 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "42": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nreturn;\n                byteIx = (ix & 0);                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "43": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix | (ix | 0));\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "44": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = ((byteIx | ix) + 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "45": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = ((byteIx + ix) + 0);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "46": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = ((ix | 0) + ix);\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "47": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix + (ix | 0));\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "48": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\n                byteIx = (ix & 0);                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }",
          "49": "    private Name addName(int[] quads, int qlen, int lastQuadBytes)\n        throws JsonParseException\n    {\n        /* Ok: must decode UTF-8 chars. No other validation is\n         * needed, since unescaping has been done earlier as necessary\n         * (as well as error reporting for unescaped control chars)\n         */\n        // 4 bytes per quad, except last one maybe less\n        int byteLen = (qlen << 2) - 4 + lastQuadBytes;\n\n        /* And last one is not correctly aligned (leading zero bytes instead\n         * need to shift a bit, instead of trailing). Only need to shift it\n         * for UTF-8 decoding; need revert for storage (since key will not\n         * be aligned, to optimize lookup speed)\n         */\n        int lastQuad;\n\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen-1];\n            // 8/16/24 bit left shift\n            quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\n        } else {\n            lastQuad = 0;\n        }\n\n        // Need some working space, TextBuffer works well:\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n\n        for (int ix = 0; ix < byteLen; ) {\n            int ch = quads[ix >> 2]; // current quad, need to shift+mask\n            int byteIx = (ix & 3);\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n            ++ix;\n\n            if (ch > 127) { // multi-byte\n                int needed;\n                if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)\n                    ch &= 0x1F;\n                    needed = 1;\n                } else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)\n                    ch &= 0x0F;\n                    needed = 2;\n                } else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...\n                    ch &= 0x07;\n                    needed = 3;\n                } else { // 5- and 6-byte chars not valid xml chars\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1; // never really gets this far\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                \n                // Ok, always need at least one more:\n                int ch2 = quads[ix >> 2]; // current quad, need to shift+mask\nbyteIx = (ix | (ix | ix));\n                ch2 = (ch2 >> ((3 - byteIx) << 3));\n                ++ix;\n                \n                if ((ch2 & 0xC0) != 0x080) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3F);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = (ix & 3);\n                    ch2 = (ch2 >> ((3 - byteIx) << 3));\n                    ++ix;\n                    \n                    if ((ch2 & 0xC0) != 0x080) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3F);\n                    if (needed > 2) { // 4 bytes? (need surrogates on output)\n                        ch2 = quads[ix >> 2];\n                        byteIx = (ix & 3);\n                        ch2 = (ch2 >> ((3 - byteIx) << 3));\n                        ++ix;\n                        if ((ch2 & 0xC0) != 0x080) {\n                            _reportInvalidOther(ch2 & 0xFF);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3F);\n                    }\n                }\n                if (needed > 2) { // surrogate pair? once again, let's output one here, one later on\n                    ch -= 0x10000; // to normalize it starting with 0x0\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = (char) (0xD800 + (ch >> 10));\n                    ch = 0xDC00 | (ch & 0x03FF);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = (char) ch;\n        }\n\n        // Ok. Now we have the character array, and can construct the String\n        String baseName = new String(cbuf, 0, cix);\n        // And finally, un-align if necessary\n        if (lastQuadBytes < 4) {\n            quads[qlen-1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }"
}