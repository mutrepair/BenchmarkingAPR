{
          "0": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn (twoKvwM1 * ((v * v) - (w * w)));                };\n            }\n        });\n\n    }",
          "1": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn ((v * v) - (w * w));                };\n            }\n        });\n\n    }",
          "2": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn ((twoKvwM1 * twoKvw) * twoKvwM2);                };\n            }\n        });\n\n    }",
          "3": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn null;                };\n            }\n        });\n\n    }",
          "4": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((k - v) - 1)) * ((k + w) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "5": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn den;                };\n            }\n        });\n\n    }",
          "6": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]];                };\n            }\n        });\n\n    }",
          "7": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn 0;                };\n            }\n        });\n\n    }",
          "8": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((k - v) - 1)) * ((k + w) - 0)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "9": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn ((2 * ((k - v) - 1)) * ((k + w) - 1));                };\n            }\n        });\n\n    }",
          "10": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn (((2 * ((k - v) - 1)) * ((k + w) - 1)) * twoKvw);                };\n            }\n        });\n\n    }",
          "11": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn (2 * ((k - v) - 1));                };\n            }\n        });\n\n    }",
          "12": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((1 * ((k - v) - 1)) * ((k + w) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "13": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((0 * ((k - v) - 1)) * ((k + w) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "14": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((k - v) - 1)) * ((k + den) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "15": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((den - v) - 1)) * ((k + w) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "16": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * w) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((k - v) - 1)) * ((k + w) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "17": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((den * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((k - v) - 1)) * ((k + w) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "18": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((k - v) - 1)) * ((k + v) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "19": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((k - v) - 1)) * ((k + twoKvw) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "20": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * twoKvw) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((k - v) - 1)) * ((k + w) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "21": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn \"null\";                };\n            }\n        });\n\n    }",
          "22": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((twoKvw - v) - 1)) * ((k + w) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "23": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn ((k + w) - 1);                };\n            }\n        });\n\n    }",
          "24": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * kvw) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((k - v) - 1)) * ((k + w) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "25": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn (w * w);                };\n            }\n        });\n\n    }",
          "26": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((v - v) - 1)) * ((k + w) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "27": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn (v * v);                };\n            }\n        });\n\n    }",
          "28": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((k - v) - 1)) * ((k + kvw) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "29": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((w - v) - 1)) * ((k + w) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "30": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nk++;\n                return new BigFraction[] {\n                    new BigFraction(twoKvwM1 * (v * v - w * w), den),\n                    new BigFraction(twoKvwM1 * twoKvw * twoKvwM2, den),\n                    new BigFraction(2 * (k - v - 1) * (k + w - 1) * twoKvw, den)                };\n            }\n        });\n\n    }",
          "31": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * k) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((k - v) - 1)) * ((k + w) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "32": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((kvw - v) - 1)) * ((k + w) - 1)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "33": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn new BigFraction[[]]{new BigFraction((twoKvwM1 * ((v * v) - (w * w))), den),new BigFraction(((twoKvwM1 * twoKvw) * twoKvwM2), den),new BigFraction((((2 * ((k - v) - 1)) * ((k + w) - 2)) * twoKvw), den)};                };\n            }\n        });\n\n    }",
          "34": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nreturn;\n                return new BigFraction[] {\n                    new BigFraction(twoKvwM1 * (v * v - w * w), den),\n                    new BigFraction(twoKvwM1 * twoKvw * twoKvwM2, den),\n                    new BigFraction(2 * (k - v - 1) * (k + w - 1) * twoKvw, den)                };\n            }\n        });\n\n    }",
          "35": "    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n\n        // select the appropriate list\n        final JacobiKey key = new JacobiKey(v, w);\n\n        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n\n            // allocate a new list for v, w\n            final List<BigFraction> list = new ArrayList<BigFraction>();\n            JACOBI_COEFFICIENTS.put(key, list);\n\n            // Pv,w,0(x) = 1;\n            list.add(BigFraction.ONE);\n\n            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n            list.add(new BigFraction(v - w, 2));\n            list.add(new BigFraction(2 + v + w, 2));\n\n        }\n\n        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n                               new RecurrenceCoefficientsGenerator() {\n            /** {@inheritDoc} */\n            public BigFraction[] generate(int k) {\n                k++;\n                final int kvw      = k + v + w;\n                final int twoKvw   = kvw + k;\n                final int twoKvwM1 = twoKvw - 1;\n                final int twoKvwM2 = twoKvw - 2;\n                final int den      = 2 * k *  kvw * twoKvwM2;\n\nbreak;\n                return new BigFraction[] {\n                    new BigFraction(twoKvwM1 * (v * v - w * w), den),\n                    new BigFraction(twoKvwM1 * twoKvw * twoKvwM2, den),\n                    new BigFraction(2 * (k - v - 1) * (k + w - 1) * twoKvw, den)                };\n            }\n        });\n\n    }"
}