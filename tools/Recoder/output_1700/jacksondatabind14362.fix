{
          "0": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += 0, offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "1": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += 1, offset += 0);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "2": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += -1, offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "3": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += 1, offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "4": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += 1, offset += -1);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "5": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += 1, offset += 1);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "6": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += 2, offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "7": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += 1, offset += 2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "8": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += -2, offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "9": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "10": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nlong seconds = parseInt(date, offset += 1, offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "11": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = ;\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "12": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nfinal int seconds = parseInt(date, offset += 1, offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "13": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nparseInt(date, offset += 1, offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "14": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(1);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "15": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(-2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "16": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += false, offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "17": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint ;\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "18": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = date;\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "19": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(GMT_ID);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "20": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += -0, offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "21": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += null, offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "22": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = checkOffset(date, offset += 1, offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "23": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += 1, offset += false);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "24": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(offset, offset += 1, offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "25": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += 1, date += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "26": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += \"null\", offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "27": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += 1, offset += -0);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "28": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += 1, offset += null);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "29": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += true, offset += -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "30": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "31": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(offset);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "32": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset += 1, offset += \"null\");\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "33": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nreturn;\n            int seconds = parseInt(date, offset += 1, offset += -2);            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "34": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, 2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "35": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, 1);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "36": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(offset, 1);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "37": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "38": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(offset, -2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "39": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(offset, 2);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "40": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, date);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "41": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(date, offset);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "42": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\nint seconds = parseInt(offset, date);\n            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }",
          "43": "    public static Date parse(String date) {\n        try {\n            int offset = 0;\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            checkOffset(date, offset, '-');\n\n            // extract month\n            int month = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, '-');\n\n            // extract day\n            int day = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, 'T');\n\n            // extract hours, minutes, seconds and milliseconds\n            int hour = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int minutes = parseInt(date, offset += 1, offset += 2);\n            checkOffset(date, offset, ':');\n\n            int seconds = parseInt(date, offset += 1, offset += -2);            // milliseconds can be optional in the format\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n            if (date.charAt(offset) == '.') {\n                checkOffset(date, offset, '.');\n                milliseconds = parseInt(date, offset += 1, offset += 3);\n            }\n\n            // extract timezone\n            String timezoneId;\n            char timezoneIndicator = date.charAt(offset);\n            if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                timezoneId = GMT_ID + date.substring(offset);\n            } else if (timezoneIndicator == 'Z') {\n                timezoneId = GMT_ID;\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneIndicator);\n            }\n            TimeZone timezone = TimeZone.getTimeZone(timezoneId);\n            if (!timezone.getID().equals(timezoneId)) {\n                throw new IndexOutOfBoundsException();\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            return calendar.getTime();\n        } catch (IndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n        }\n    }"
}