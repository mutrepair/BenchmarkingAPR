{
          "0": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount > actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "1": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount >= actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "2": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount <= actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "3": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount < actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "4": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount == actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "5": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualCount >= actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "6": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount != actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "7": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount || actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "8": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount && actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "9": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualInvocations >= actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "10": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((lastLocation >= actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "11": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualCount != null)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "12": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nreporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "13": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\ninvocationMarker.markVerified(actualInvocations, wanted);\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "14": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount >= actualInvocations)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "15": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualCount == null)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "16": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount instanceof actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "17": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount >= lastLocation)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "18": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nreturn;\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "19": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount & actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "20": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((invocations >= actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "21": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualInvocations != null)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "22": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wanted >= actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "23": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wanted != null)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "24": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (wantedCount >= actualCount))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "25": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualInvocations == null)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "26": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && actualCount)){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "27": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(actualCount){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "28": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount >= invocations)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "29": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualCount == null)){\nreturn;\n}        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "30": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((lastLocation != null)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "31": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(( >= actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "32": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nactualCount++;\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "33": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualCount > 0)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "34": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount >= wanted)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "35": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wanted == null)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "36": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((invocations != null)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "37": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualCount == actualCount)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "38": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualCount != 0)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "39": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualCount == 0)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "40": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (wantedCount > wanted))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "41": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (wanted != null))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "42": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualCount != actualCount)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "43": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualCount < 0)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "44": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (wantedCount > 0))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "45": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((lastLocation == null)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "46": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualCount > actualCount)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "47": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualCount == wanted)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "48": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (wanted == wanted))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "49": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (actualCount != null))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "50": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (wantedCount != null))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "51": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(( >= actualCount)){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "52": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((actualCount >= 0)){\n        if (wantedCount >= actualCount) {            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n}\n    }",
          "53": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (wanted != wanted))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "54": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (wantedCount > actualCount))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "55": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) || (wantedCount > wanted))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "56": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (wanted > wanted))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "57": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (wanted == null))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "58": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (wantedCount < wanted))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "59": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (wantedCount > wantedCount))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "60": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif((wantedCount >= )){            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "61": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (actualCount == wanted))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "62": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (actualCount > wanted))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "63": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (wantedCount == wanted))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "64": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\nif(((wantedCount >= actualCount) && (actualCount != wanted))){\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }"
}