{
          "0": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif(false){            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "1": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif(true){            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "2": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nreturn PropertyName.USE_DEFAULT;        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "3": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nreturn PropertyName.construct(w.localName(), w.namespace());        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "4": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nreturn PropertyName.NO_NAME;        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "5": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nreturn null;        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "6": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "7": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif((localName == null)){\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "8": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif((localName.length() == 0)){\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "9": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif(localName.length()){\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "10": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nreturn;\n        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "11": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif(ann.isEmpty()){\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "12": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif(w.isEmpty()){\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "13": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif(localName){\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "14": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif(w){\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "15": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nbreak;\n        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "16": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nreturn w;        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "17": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif(USE_DEFAULT){\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "18": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif((localName == null)){\nreturn PropertyName.NO_NAME;}        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "19": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif((localName == null)){\nreturn PropertyName.USE_DEFAULT;}        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "20": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nPropertyName.construct(false);\n        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "21": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif((localName != null)){\nreturn PropertyName.NO_NAME;}        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "22": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif((localName == null)){\nreturn PropertyName.construct(w.localName(), w.namespace());}        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "23": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nPropertyName.construct(\"null\");\n        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "24": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif((localName != null)){\nreturn PropertyName.USE_DEFAULT;}        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "25": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif((localName == null)){\nreturn null;}        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "26": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif((localName != null)){\nreturn PropertyName.construct(w.localName(), w.namespace());}        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "27": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nbreak;\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "28": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif((w == null)){\nreturn PropertyName.NO_NAME;}        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "29": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif((localName != null)){\nreturn null;}        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "30": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif((w != null)){\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "31": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif(null){            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "32": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nString localName = w.localName();\n        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "33": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\ncontinue;\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "34": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nreturn;\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "35": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif(((localName == null) && (localName != null))){\nreturn PropertyName.NO_NAME;}        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "36": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif(((localName == null) && (localName != null))){\nreturn PropertyName.USE_DEFAULT;}        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "37": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif(((localName == null) && (localName == null))){\nreturn PropertyName.NO_NAME;}        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "38": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif(((localName == null) && (localName == null))){\nreturn PropertyName.USE_DEFAULT;}        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "39": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n            if (localName == null || localName.length() == 0) {\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\nif(((localName == null) && (localName != null))){\nreturn null;}        if (true) {            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }"
}