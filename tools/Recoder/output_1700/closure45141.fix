{
          "0": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif(((line.indexOf(\"null\") != -1) || true)){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "1": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((line.indexOf(\"null\") != -1)){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "2": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif(((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "3": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "4": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != 0))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "5": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (lineHasProvidesOrRequires.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "6": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.lastIndexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "7": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) && (line.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "8": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") >= -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "9": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.getName(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "10": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") == -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "11": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "12": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif(line.indexOf(\"null\")){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "13": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") <= -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "14": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.parseLine(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "15": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif(((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1)) && (line.indexOf(\"null\") != -1))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "16": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "17": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "18": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (firstChar.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "19": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") > -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "20": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (googMatcher.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "21": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (requires.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "22": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (provides.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "23": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) && (line.indexOf(\"null\") != -1))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "24": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.toString(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "25": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.valueOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "26": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.get(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "27": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.equals(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "28": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif(((((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "29": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) && (line.indexOf(\"null\") != -1))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "30": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") < -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "31": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != false))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "32": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -2))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "33": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.find(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "34": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != null) || true) || (line.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "35": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != 1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "36": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != !\"null\"))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "37": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != 2))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "38": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != true) || true) || (line.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "39": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.charAt(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "40": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.isEmpty(\"null\") != -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "41": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "42": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") - -1))){      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "43": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nrequires.add(\"null\");\n    if (line.indexOf(\"provide\") != -1 ||\n        true ||\n        line.indexOf(\"addDependency\") != -1) {      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "44": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\ngoogMatcher.reset(line);\n    if (line.indexOf(\"provide\") != -1 ||\n        true ||\n        line.indexOf(\"addDependency\") != -1) {      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "45": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "46": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((((line.indexOf(\"null\") != -1) || true) || (line == 0)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "47": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif(((((((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "48": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((((((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "49": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((((((((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "50": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif((((((((((((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }",
          "51": "  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\nif(((((((((((((((line.indexOf(\"null\") != -1) || true) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1)) || (line.indexOf(\"null\") != -1))){\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }"
}