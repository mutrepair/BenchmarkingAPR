{
          "0": "    public CSVFormat withEscape(char escape) {\nif(true){            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "1": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nvalidate();\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "2": "    public CSVFormat withEscape(char escape) {\nif(isEncapsulating()){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "3": "    public CSVFormat withEscape(char escape) {\nif(isCommentingEnabled()){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "4": "    public CSVFormat withEscape(char escape) {\nif(isEscaping()){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "5": "    public CSVFormat withEscape(char escape) {\nif(isSurroundingSpacesIgnored()){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "6": "    public CSVFormat withEscape(char escape) {\nif(isEmptyLinesIgnored()){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "7": "    public CSVFormat withEscape(char escape) {\nif(!isEncapsulating()){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "8": "    public CSVFormat withEscape(char escape) {\nif(!isCommentingEnabled()){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "9": "    public CSVFormat withEscape(char escape) {\nif(!isEscaping()){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "10": "    public CSVFormat withEscape(char escape) {\nif(!isSurroundingSpacesIgnored()){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "11": "    public CSVFormat withEscape(char escape) {\nif(!isEmptyLinesIgnored()){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "12": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nsuper.withEscape();\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "13": "    public CSVFormat withEscape(char escape) {\nif(delimiter){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "14": "    public CSVFormat withEscape(char escape) {\nif(commentStart){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "15": "    public CSVFormat withEscape(char escape) {\nif(emptyLinesIgnored){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "16": "    public CSVFormat withEscape(char escape) {\nif(header){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "17": "    public CSVFormat withEscape(char escape) {\nif(surroundingSpacesIgnored){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "18": "    public CSVFormat withEscape(char escape) {\nif(lineSeparator){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "19": "    public CSVFormat withEscape(char escape) {\nif(escape){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "20": "    public CSVFormat withEscape(char escape) {\nif(encapsulator){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "21": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nescape = false;\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "22": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nescape = true;\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "23": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((escape != null)){\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}\n    }",
          "24": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((escape == null)){\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}\n    }",
          "25": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nreturn;\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "26": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nthis.validate();\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "27": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((escape == null)){\nreturn null;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "28": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nsuper.withEscape(escape);\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "29": "    public CSVFormat withEscape(char escape) {\nif(!delimiter){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "30": "    public CSVFormat withEscape(char escape) {\nif(!commentStart){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "31": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nreturn escape;        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "32": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif(escape){\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}\n    }",
          "33": "    public CSVFormat withEscape(char escape) {\nif(!emptyLinesIgnored){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "34": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nreturn null;        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "35": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nescape = escape;\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "36": "    public CSVFormat withEscape(char escape) {\nif(!header){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "37": "    public CSVFormat withEscape(char escape) {\nif(escape.isEmpty()){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "38": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nescape = null;\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "39": "    public CSVFormat withEscape(char escape) {\nif(!lineSeparator){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "40": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nreturn true;        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "41": "    public CSVFormat withEscape(char escape) {\nif((commentStart != null)){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "42": "    public CSVFormat withEscape(char escape) {\nif((escape != null)){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "43": "    public CSVFormat withEscape(char escape) {\nif(!surroundingSpacesIgnored){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "44": "    public CSVFormat withEscape(char escape) {\nif(!encapsulator){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "45": "    public CSVFormat withEscape(char escape) {\nif(-true){            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "46": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((escape != null)){\nreturn null;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "47": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nbreak;\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "48": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((commentStart == null)){\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}\n    }",
          "49": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\ncommentStart = false;\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "50": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif(!isEncapsulating()){\nreturn null;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "51": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif(!isCommentingEnabled()){\nreturn null;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "52": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif(!isEscaping()){\nreturn null;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "53": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif(!isSurroundingSpacesIgnored()){\nreturn null;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "54": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif(!isEmptyLinesIgnored()){\nreturn null;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "55": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((escape == null)){\nreturn false;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "56": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((delimiter == null)){\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}\n    }",
          "57": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\ncommentStart = true;\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "58": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nemptyLinesIgnored = false;\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "59": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((escape == null)){\nreturn;\n}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "60": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((emptyLinesIgnored == null)){\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}\n    }",
          "61": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif(!isEncapsulating()){\nreturn false;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "62": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif(!isCommentingEnabled()){\nreturn false;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "63": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif(!isEscaping()){\nreturn false;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "64": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif(!isSurroundingSpacesIgnored()){\nreturn false;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "65": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif(!isEmptyLinesIgnored()){\nreturn false;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "66": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((escape == null)){\nreturn true;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "67": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nreturn this;        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "68": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((escape == null)){\nreturn escape;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "69": "    public CSVFormat withEscape(char escape) {\nif(null){            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "70": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((commentStart == null)){\nreturn null;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "71": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((delimiter == null)){\nreturn null;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "72": "    public CSVFormat withEscape(char escape) {\nif((commentStart && (escape == null))){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "73": "    public CSVFormat withEscape(char escape) {\nif(1){            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "74": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((emptyLinesIgnored == null)){\nreturn null;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "75": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((escape == null)){\nreturn new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "76": "    public CSVFormat withEscape(char escape) {\nif((delimiter && (escape == null))){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "77": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((encapsulator == null)){\nreturn null;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "78": "    public CSVFormat withEscape(char escape) {        if (false) {            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n\nif((escape != null)){\nreturn false;}        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "79": "    public CSVFormat withEscape(char escape) {\nif((commentStart && (escape != null))){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }",
          "80": "    public CSVFormat withEscape(char escape) {\nif((emptyLinesIgnored && (escape == null))){\n            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n        }\n        \n        return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n    }"
}