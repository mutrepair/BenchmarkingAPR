{
          "0": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif(true){            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "1": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nreturn Collections.emptyList();        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "2": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nbreak;\n        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "3": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nreturn false;        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "4": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nreturn partitions;        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "5": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nreturn Collections.singletonList(singlePartition);        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "6": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nreturn true;        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "7": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nreturn;\n        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "8": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif(inputCollection){\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "9": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif(singlePartition){\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "10": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nselect(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "11": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif(numberOfPredicates){\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "12": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\ncontinue;\n        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "13": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif(-false){            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "14": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory == null)){\nreturn Collections.emptyList();}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "15": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\npartitions.add(partitionFactory.create());\n        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "16": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory != null)){\nreturn Collections.emptyList();}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "17": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nreturn partitionFactory;        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "18": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nreturn predicates;        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "19": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif(partitionFactory){\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "20": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\npartitions.get(i).add(element);\n        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "21": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif(partitionFactory.isEmpty()){\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "22": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nsuper.partition();\n        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "23": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nelementAssigned = true;\n        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "24": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "25": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif(!inputCollection){\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "26": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\npartitions.get(numberOfPredicates).add(element);\n        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "27": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((predicates == null)){\nreturn Collections.emptyList();}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "28": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((predicates != null)){\nreturn Collections.emptyList();}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "29": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory == 1)){\nreturn Collections.emptyList();}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "30": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((inputCollection != null)){\nreturn Collections.emptyList();}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "31": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\n(final O element = ;\n:inputCollection)        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "32": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((inputCollection == null)){\nreturn Collections.emptyList();}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "33": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory == null)){\nreturn Collections.singletonList(singlePartition);}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "34": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory != null)){\nreturn Collections.singletonList(singlePartition);}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "35": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nbreak;\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "36": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory != 1)){\nreturn Collections.emptyList();}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "37": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif(predicates[i].evaluate(element)){\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "38": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((singlePartition != null)){\nreturn Collections.emptyList();}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "39": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nfor(int i = 0;(i < numberOfPredicates);++i) {        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "40": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nfor(int i = 0;(i < numberOfPartitions);++i) {        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "41": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory == null)){\nreturn false;}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "42": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory != null)){\nreturn null;}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "43": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory == null)){\nreturn partitions;}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "44": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif(false){            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "45": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory == null)){\nreturn true;}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "46": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory != null)){\nreturn false;}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "47": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((predicates == null)){\nreturn false;}        if (true) {            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "48": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory || (predicates == null))){\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "49": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory || (partitionFactory == null))){\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "50": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory || (predicates != null))){\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "51": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory || (partitionFactory != null))){\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "52": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nreturn;\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "53": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\nif((partitionFactory && (predicates != null))){\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }",
          "54": "    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n\n        if (inputCollection == null) {\n            return Collections.emptyList();\n        }\n\ncontinue;\n            // return the entire input collection as a single partition\n            final R singlePartition = partitionFactory.create();\n            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n            return Collections.singletonList(singlePartition);\n        }\n\n        // create the empty partitions\n        final int numberOfPredicates = predicates.length;\n        final int numberOfPartitions = numberOfPredicates + 1;\n        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n        for (int i = 0; i < numberOfPartitions; ++i) {\n            partitions.add(partitionFactory.create());\n        }\n\n        // for each element in inputCollection:\n        // find the first predicate that evaluates to true.\n        // if there is a predicate, add the element to the corresponding partition.\n        // if there is no predicate, add it to the last, catch-all partition.\n        for (final O element : inputCollection) {\n            boolean elementAssigned = false;\n            for (int i = 0; i < numberOfPredicates; ++i) {\n                if (predicates[i].evaluate(element)) {\n                    partitions.get(i).add(element);\n                    elementAssigned = true;\n                    break;\n                }\n            }\n\n            if (!elementAssigned) {\n                // no predicates evaluated to true\n                // add element to last partition\n                partitions.get(numberOfPredicates).add(element);\n            }\n        }\n\n        return partitions;\n    }"
}