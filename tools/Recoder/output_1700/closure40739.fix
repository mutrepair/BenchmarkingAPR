{
          "0": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!arg.isNumber() || (arg.getDouble() != 1))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "1": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif(!NodeUtil.mayHaveSideEffects(arg, compiler)){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "2": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif(((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getDouble() != 1))) && (!arg.isNumber() || (arg.getDouble() != 1)))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "3": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getDouble() != 1)))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "4": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "5": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getDouble() == 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "6": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, arg) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "7": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, site) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "8": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!arg.isNumber() && (!arg.isNumber() || (arg.getDouble() != 1)))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "9": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nreturn;\n              if (!NodeUtil.mayHaveSideEffects(arg, compiler)\n                  && (!arg.isNumber() || arg.getDouble() != 1)) {                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "10": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((arg.getDouble() != 1)){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "11": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getDouble() >= 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "12": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif(((!arg.isNumber() && (arg.getDouble() != 1)) && (!arg.isNumber() || (arg.getDouble() != 1)))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "13": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif(!arg.isNumber()){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "14": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, argIndex) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "15": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nbreak;\n              if (!NodeUtil.mayHaveSideEffects(arg, compiler)\n                  && (!arg.isNumber() || arg.getDouble() != 1)) {                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "16": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.getNext() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "17": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.getName() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "18": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getName() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "19": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getDouble() > 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "20": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getDouble() <= 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "21": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!argIndex.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "22": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, function) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "23": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getNext() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "24": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && NodeUtil.mayHaveSideEffects(arg, compiler))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "25": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.getParent() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "26": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif(((!arg.isNumber() && (!arg.isNumber() || (arg.getDouble() != 1))) && (!arg.isNumber() || (arg.getDouble() != 1)))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "27": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, definition) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "28": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.mayHaveSideEffects() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "29": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.getUseSites() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "30": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getDouble() != 1))) && (!arg.isNumber() || (arg.getDouble() != 1))) && (!arg.isNumber() || (arg.getDouble() != 1)))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "31": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!function.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "32": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\ntoRemove.add(arg);\n              if (!NodeUtil.mayHaveSideEffects(arg, compiler)\n                  && (!arg.isNumber() || arg.getDouble() != 1)) {                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "33": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getDouble() < 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "34": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!site.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "35": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler.compiler) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "36": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.getDouble() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "37": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getParent() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "38": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, argParent) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "39": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\ntoReplaceWithZero.add(arg);\n              if (!NodeUtil.mayHaveSideEffects(arg, compiler)\n                  && (!arg.isNumber() || arg.getDouble() != 1)) {                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "40": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.tryRemoveArgFromCallSites() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "41": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(site, compiler) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "42": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!definition.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "43": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && !NodeUtil.mayHaveSideEffects(arg, compiler))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "44": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(compiler, compiler) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "45": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!argParent.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "46": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\napplyChanges();\n              if (!NodeUtil.mayHaveSideEffects(arg, compiler)\n                  && (!arg.isNumber() || arg.getDouble() != 1)) {                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "47": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\ninterpretAssigns();\n              if (!NodeUtil.mayHaveSideEffects(arg, compiler)\n                  && (!arg.isNumber() || arg.getDouble() != 1)) {                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "48": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nremoveUnreferencedVars();\n              if (!NodeUtil.mayHaveSideEffects(arg, compiler)\n                  && (!arg.isNumber() || arg.getDouble() != 1)) {                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "49": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\napply();\n              if (!NodeUtil.mayHaveSideEffects(arg, compiler)\n                  && (!arg.isNumber() || arg.getDouble() != 1)) {                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "50": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nremove();\n              if (!NodeUtil.mayHaveSideEffects(arg, compiler)\n                  && (!arg.isNumber() || arg.getDouble() != 1)) {                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "51": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((((!arg.isNumber() && (arg.getDouble() != 1)) && (!arg.isNumber() || (arg.getDouble() != 1))) && (!arg.isNumber() || (arg.getDouble() != 1)))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "52": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(argIndex, compiler) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "53": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.toString() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "54": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!toRemove.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "55": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!toReplaceWithZero.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "56": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\ncontinue;\n              if (!NodeUtil.mayHaveSideEffects(arg, compiler)\n                  && (!arg.isNumber() || arg.getDouble() != 1)) {                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "57": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!NodeUtil.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "58": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((((!arg.isNumber() && (arg.getDouble() != 1)) && (arg.getDouble() != 1)) && (!arg.isNumber() || (arg.getDouble() != 1)))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "59": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.isModifiableCallSite(arg, compiler) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "60": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.tryRemoveArgFromCallSites(arg, compiler) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "61": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.tryRemoveArgFromCallSites() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "62": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!function.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "63": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, canModifyAllSites) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "64": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((arg.getDouble() != 1)){\n              if (!NodeUtil.mayHaveSideEffects(arg, compiler)\n                  && (!arg.isNumber() || arg.getDouble() != 1)) {                toReplaceWithZero.add(arg);\n              }\n}\n            }\n          }\n        }\n      }\n    }",
          "65": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.getArgumentForCallOrNewOrDotCall(arg, compiler) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "66": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.getFunctionDefinition(arg, compiler) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "67": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.getUseSites(arg, compiler) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "68": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.toString() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "69": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && !NodeUtil.mayHaveSideEffects(arg))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "70": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!defFinder.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getDouble() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "71": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && NodeUtil.mayHaveSideEffects(compiler, arg))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "72": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.get() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "73": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && !NodeUtil.mayHaveSideEffects(compiler, arg))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "74": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\n(UseSite site = ;\n:defFinder.getUseSites(definition))              if (!NodeUtil.mayHaveSideEffects(arg, compiler)\n                  && (!arg.isNumber() || arg.getDouble() != 1)) {                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "75": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getDouble() != 1)))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "76": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.mayHaveSideEffects() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "77": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.isNumber() != 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "78": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getDouble() && 1)))){                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "79": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && !NodeUtil.mayHaveSideEffects(arg, arg))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "80": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif(((!NodeUtil.mayHaveSideEffects(arg, compiler) && NodeUtil.mayHaveSideEffects(arg, compiler)) && (!arg.isNumber() || (arg.getDouble() != 1)))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "81": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif(((((!arg.isNumber() && (arg.getDouble() != 1)) && (arg.getDouble() != 1)) && (!arg.isNumber() || (arg.getDouble() != 1))) && (!arg.isNumber() || (arg.getDouble() != 1)))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "82": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif(((NodeUtil.mayHaveSideEffects(arg, compiler) && (!arg.isNumber() || (arg.getDouble() != 1))) && (!arg.isNumber() || (arg.getDouble() != 1)))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "83": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif((!NodeUtil.mayHaveSideEffects(arg, compiler) && (NodeUtil.mayHaveSideEffects(arg, compiler) || (!arg.isNumber() || (arg.getDouble() != 1))))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }",
          "84": "    private void tryRemoveArgFromCallSites(\n        Node function, int argIndex, boolean canModifyAllSites) {\n      Definition definition = getFunctionDefinition(function);\n\n      for (UseSite site : defFinder.getUseSites(definition)) {\n        if (isModifiableCallSite(site)) {\n          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n          if (arg != null) {\n            Node argParent = arg.getParent();\n            // Even if we can't change the signature in general we can always\n            // remove an unused value off the end of the parameter list.\n            if (canModifyAllSites\n                || (arg.getNext() == null\n                    && !NodeUtil.mayHaveSideEffects(arg, compiler))) {\n              toRemove.add(arg);\n            } else {\n              // replace the node in the arg with 0\nif(((NodeUtil.mayHaveSideEffects(compiler, arg) && (!arg.isNumber() || (arg.getDouble() != 1))) && (!arg.isNumber() || (arg.getDouble() != 1)))){\n                toReplaceWithZero.add(arg);\n              }\n            }\n          }\n        }\n      }\n    }"
}