{
          "0": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "1": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart >= now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "2": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now <= thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "3": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now >= thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "4": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart > now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "5": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart < now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "6": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now > thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "7": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now < now));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "8": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((now <= now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "9": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn (thisStart <= now);        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "10": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn (now < thisEnd);        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "11": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisEnd <= now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "12": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (thisEnd < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "13": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart == now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "14": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) || (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "15": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now == thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "16": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now < otherStart));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "17": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((otherStart <= now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "18": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (otherStart < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "19": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now < thisStart));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "20": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart - now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "21": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now - thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "22": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (thisStart < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "23": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart >>> now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "24": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart >> now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "25": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart != now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "26": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now < ));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "27": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now >>> thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "28": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart || now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "29": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart < otherEnd) && (otherStart < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "30": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now >> thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "31": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn (( <= now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "32": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now != thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "33": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now < interval));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "34": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && ( < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "35": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now & thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "36": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((interval <= now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "37": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (interval < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "38": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && ((thisStart <= now) && (now < thisEnd)));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "39": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (thisStart <= now));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "40": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn (((thisStart <= now) && (now < thisEnd)) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "41": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nnow++;\n            return (thisStart <= now && now < thisEnd);        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "42": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now < otherEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "43": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now > now));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "44": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((otherEnd <= now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "45": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now < ));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "46": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (otherEnd < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "47": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now < -now));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "48": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn (( <= now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "49": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((-now <= now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "50": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && (now < ));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "51": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart <= now) && ( < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "52": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn (( <= now) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "53": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn (((thisStart <= now) && (now == now)) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "54": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\ncontinue;\n        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "55": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn (((thisStart <= now) && (now == null)) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "56": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn (((thisStart <= now) && (now == thisEnd)) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "57": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn (((thisStart <= now) && (now != null)) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "58": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((thisStart < otherEnd) && (otherStart < thisEnd));            return (thisStart <= now && now < thisEnd);        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "59": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn (((thisStart <= now) && (thisEnd == now)) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "60": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn (((thisStart <= now) && (now > now)) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "61": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn;\n        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "62": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn (((thisStart <= now) && (now < now)) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "63": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn;\n            return (thisStart <= now && now < thisEnd);        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "64": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((((thisStart <= now) && (now == now)) && (now < thisEnd)) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "65": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((((thisStart <= now) && (thisEnd == now)) && (now < thisEnd)) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "66": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((((thisStart <= now) && (now == 0)) && (now < thisEnd)) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }",
          "67": "    public boolean overlaps(ReadableInterval interval) {\n        long thisStart = getStartMillis();\n        long thisEnd = getEndMillis();\n        if (interval == null) {\n            long now = DateTimeUtils.currentTimeMillis();\nreturn ((((thisStart <= now) || (now == now)) && (now < thisEnd)) && (now < thisEnd));        }  else {\n            long otherStart = interval.getStartMillis();\n            long otherEnd = interval.getEndMillis();\n            return (thisStart < otherEnd && otherStart < thisEnd);\n        }\n    }"
}