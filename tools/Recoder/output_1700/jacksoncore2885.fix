{
          "0": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, 2, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "1": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "2": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, 0, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "3": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, false, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "4": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, true, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "5": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\n_segments.arraycopy(curr, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "6": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "7": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\narraycopy(curr, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "8": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nreleaseBuffers();\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "9": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nresetWithEmpty();\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "10": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nclearSegments();\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "11": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nensureNotShared();\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "12": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -2, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "13": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem._charArray(curr, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "14": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(i, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "15": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(len, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "16": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, i, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "17": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, \"null\", result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "18": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, i, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "19": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(result, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "20": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, len, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "21": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, result, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "22": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, len, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "23": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, offset, i);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "24": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, offset, len);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "25": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "26": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, offset, result);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "27": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "28": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, offset, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "29": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\noffset += currLen;\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "30": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nArrays.arraycopy(curr, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "31": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nif((start + len)){\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n}\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "32": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "33": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, offset, offset);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "34": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(_currentSegment, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "35": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, _currentSegment, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "36": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.releaseBuffers();\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "37": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.resetWithEmpty();\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "38": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.clearSegments();\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "39": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.ensureNotShared();\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "40": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(_currentSize, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "41": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nif((result != null)){\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n}\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "42": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, _currentSegment, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "43": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, _currentSize, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "44": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, 1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "45": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, _currentSize, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "46": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nif((i != null)){\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n}\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "47": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, offset, _currentSegment);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "48": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(size);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "49": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nif((len != null)){\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n}\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "50": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, null, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "51": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nif((currLen != null)){\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n}\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "52": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, offset, _currentSize);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "53": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.copyOfRange(curr, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "54": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset, i);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "55": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nLOG.arraycopy(curr, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "56": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.debug(curr, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "57": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "58": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.copyOf(curr, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "59": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, , currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "60": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.buildResultArray(curr, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "61": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, , offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "62": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(_segments, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "63": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, _segments, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "64": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, _segments, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "65": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, offset, );\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "66": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, offset, _segments);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "67": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(NO_CHARS, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "68": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, result, NO_CHARS, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "69": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(curr, -1, NO_CHARS, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "70": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\n.arraycopy(curr, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "71": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nbreak;\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "72": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.add(curr, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "73": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.get(curr, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "74": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\n.arraycopy(curr, -1, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "75": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nreturn;\n                System.arraycopy(curr, -1, result, offset, currLen);                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "76": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset, result, i, i);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "77": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset, result, i, i, -1);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "78": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset, result, i, -1, i);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "79": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset, offset, i, i, -1);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "80": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset, i, i, i, -1);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "81": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset, offset, i, -1, i);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "82": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset, i, i, -1, i);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "83": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset, result, result, i, -1);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "84": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset, result, offset, i, -1);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "85": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset, i, result, i, -1);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "86": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset, offset, result, i, -1);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }",
          "87": "    private char[] buildResultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = _charArray(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = (char[]) _segments.get(i);\n                int currLen = curr.length;\nSystem.arraycopy(offset, result, i, len, -1);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }"
}