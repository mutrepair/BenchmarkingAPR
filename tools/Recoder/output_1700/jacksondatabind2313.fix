{
          "0": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((_typeParameters.length >= 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "1": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((_typeParameters.length <= 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "2": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((_typeParameters.length == 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "3": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((_typeParameters.length > 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "4": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((_typeParameters.length != 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "5": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((_typeParameters.length < 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "6": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nsb.append(_class.getName());\n        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "7": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nfirst = false;\n        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "8": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nsb.append(\"null\");\n        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "9": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nsb.append(t.toCanonical());\n        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "10": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif(length){\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "11": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((_class.length > 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "12": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nreturn sb.toString();        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "13": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nreturn null;        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "14": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nsb.append();\n        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "15": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((sb != null)){\n        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n}\n    }",
          "16": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif(isContainerType()){\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "17": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((_typeParameters > 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "18": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((length > 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "19": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif(!length){\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "20": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif(((_typeParameters.length > 0) && (_typeParameters.length > 0))){\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "21": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nbreak;\n        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "22": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((_typeParameters.length - 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "23": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif(first){\n        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n}\n    }",
          "24": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nsb.append(false);\n        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "25": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nreturn;\n        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "26": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nfirst = null;\n        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "27": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nreturn false;        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "28": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((_typeParameters.length > 0)){\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "29": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif(_typeParameters.length){\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "30": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((_typeParameters.length >> 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "31": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nsb.append(true);\n        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "32": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((sb == null)){\n        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n}\n    }",
          "33": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((sb.length > 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "34": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((sb == null)){\nreturn sb.toString();}        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "35": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((first.length > 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "36": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((_typeParameters.length >>> 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "37": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\n(JavaType t = ;\n:_typeParameters)        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "38": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((getName > 0)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "39": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif(((_typeParameters.length > 0) && (_typeParameters == 0))){\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "40": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((_typeParameters.length > 2)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "41": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif((_typeParameters.length > 1)){            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "42": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif(((_typeParameters.length > 0) && (_typeParameters == null))){\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "43": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nif(first){\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "44": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nfirst = false;\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "45": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nsb.append(\"null\");\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "46": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nbreak;\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "47": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nsb.append(t.toCanonical());\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "48": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nsb.append(_class.getName());\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "49": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nreturn;\n            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }",
          "50": "    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\nboolean first = true;\n        if (_typeParameters.length > 0) {            sb.append('<');\n            boolean first = true;\n            for (JavaType t : _typeParameters) {\n                if (first) {\n                    first = false;\n                } else {\n                    sb.append(',');\n                }\n                sb.append(t.toCanonical());\n            }\n            sb.append('>');\n        }\n        return sb.toString();\n    }"
}