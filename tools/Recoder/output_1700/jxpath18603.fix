{
          "0": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\n                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "1": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nreturn unmodifiableCollection(collection);                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n}\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "2": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif(true){                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "3": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif(false){                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "4": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nreturn convert(\"null\", toType);                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "5": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nreturn convert(value, toType);                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "6": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nreturn array;                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "7": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nArray.set(array, i, convert(value, cType));\n                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "8": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nbreak;\n                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "9": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\ncollection.add(Array.get(object, i));\n                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "10": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif(object){\n                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "11": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nbreak;\n                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "12": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nreturn false;                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "13": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nreturn true;                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "14": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nreturn null;                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "15": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nreturn;\n                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "16": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nreturn collection;                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "17": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif(!object){\n                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "18": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection == null)){\nreturn unmodifiableCollection(collection);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "19": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif(toType){\n                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "20": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nreturn 0;                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "21": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nreturn object;                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "22": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection != null)){\n                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n}\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "23": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif(toType.isArray()){\n                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "24": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection != null)){\nreturn unmodifiableCollection(collection);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "25": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif(CollectionisAssignableFrom(toType)){\n                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "26": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nArray.set(array, i, convert(value, cType));\nreturn unmodifiableCollection(collection);                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "27": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nreturn value;                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "28": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nreturn i;                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "29": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nfor(int i = 0;(i < length);i++) {                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "30": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection == null)){\n                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n}\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "31": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((i < length)){\n                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "32": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((object == null)){\nreturn unmodifiableCollection(collection);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "33": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif(\"null\"){                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "34": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((object != null)){\n                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n}\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "35": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif(toType.isArray()){\n                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n}\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "36": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\ncollection.add(Array.get(object, i));\n                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "37": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((object != null)){\nreturn unmodifiableCollection(collection);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "38": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection == null)){\nreturn array;}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "39": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nfor(int i = 0;(i < length);i++) {                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "40": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((i == null)){\nreturn unmodifiableCollection(collection);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "41": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection == null)){\nreturn convert(\"null\", toType);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "42": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nArray.set(array, i, convert(value, cType));\n                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "43": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif(( == null)){\nreturn unmodifiableCollection(collection);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "44": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\ncontinue;\n                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "45": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection == null)){\nreturn convert(value, toType);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "46": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((array == null)){\nreturn unmodifiableCollection(collection);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "47": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection != null)){\nreturn array;}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "48": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif(( == null)){\nreturn unmodifiableCollection(collection);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "49": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((array != null)){\nreturn unmodifiableCollection(collection);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "50": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((i != null)){\nreturn unmodifiableCollection(collection);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "51": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif(( != null)){\nreturn unmodifiableCollection(collection);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "52": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection != null)){\nreturn convert(\"null\", toType);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "53": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection == null)){\nreturn false;}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "54": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection != null)){\nreturn convert(value, toType);}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "55": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection == null)){\nreturn null;}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "56": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection != null)){\nreturn null;}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "57": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection != null)){\nreturn false;}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "58": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection == null)){\nreturn true;}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "59": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((object && (object != null))){\n                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "60": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((collection != null)){\nreturn true;}                if (false) {                     Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "61": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif((object && (object == null))){\n                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }",
          "62": "    public Object convert(Object object, Class toType) {\n        if (object == null) {\n            if (toType.isPrimitive()) {\n                return convertNullToPrimitive(toType);\n            }\n            return null;\n        }\n\n        if (toType == Object.class) {\n            if (object instanceof NodeSet) {\n                return convert(((NodeSet) object).getValues(), toType);\n            }\n            else if (object instanceof Pointer) {\n                return convert(((Pointer) object).getValue(), toType);\n            }\n            return object;\n        }\n\n        Class fromType = object.getClass();\n        if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) {\n            return object;\n        }\n\n        if (fromType.isArray()) {\n            int length = Array.getLength(object);\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n\n                Object array = Array.newInstance(cType, length);\n                for (int i = 0; i < length; i++) {\n                    Object value = Array.get(object, i);\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                for (int i = 0; i < length; i++) {\n                    collection.add(Array.get(object, i));\n                }\n                return unmodifiableCollection(collection);\n            }\n            else {\nif(((collection != null) && (i < length))){\n                    Object value = Array.get(object, 0);\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof Collection) {\n            int length = ((Collection) object).size();\n            if (toType.isArray()) {\n                Class cType = toType.getComponentType();\n                Object array = Array.newInstance(cType, length);\n                Iterator it = ((Collection) object).iterator();\n                for (int i = 0; i < length; i++) {\n                    Object value = it.next();\n                    Array.set(array, i, convert(value, cType));\n                }\n                return array;\n            }\n            else if (Collection.class.isAssignableFrom(toType)) {\n                Collection collection = allocateCollection(toType);\n                collection.addAll((Collection) object);\n                return unmodifiableCollection(collection);\n            }\n            else {\n                if (length > 0) {\n                    Object value;\n                    if (object instanceof List) {\n                        value = ((List) object).get(0);\n                    }\n                    else {\n                        Iterator it = ((Collection) object).iterator();\n                        value = it.next();\n                    }\n                    return convert(value, toType);\n                }\n                else {\n                    return convert(\"\", toType);\n                }\n            }\n        }\n        else if (object instanceof NodeSet) {\n            return convert(((NodeSet) object).getValues(), toType);\n        }\n        else if (object instanceof Pointer) {\n            return convert(((Pointer) object).getValue(), toType);\n        }\n        else if (toType == String.class) {\n            return object.toString();\n        }\n        else if (object instanceof Boolean) {\n            if (toType == boolean.class) {\n                return object;\n            }\n            boolean value = ((Boolean) object).booleanValue();\n            return allocateNumber(toType, value ? 1 : 0);\n        }\n        else if (object instanceof Number) {\n            double value = ((Number) object).doubleValue();\n            if (toType == boolean.class || toType == Boolean.class) {\n                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n            }\n            if (toType.isPrimitive()\n                || Number.class.isAssignableFrom(toType)) {\n                return allocateNumber(toType, value);\n            }\n        }\n        else if (object instanceof Character) {\n            if (toType == char.class) {\n                return object;\n            }\n        }\n        else if (object instanceof String) {\n            Object value = convertStringToPrimitive(object, toType);\n            if (value != null) {\n                return value;\n            }\n        }\n        \n        Converter converter = ConvertUtils.lookup(toType);\n        if (converter != null) {\n            return converter.convert(toType, object);\n        }\n\n        throw new JXPathTypeConversionException(\"Cannot convert \"\n                + object.getClass() + \" to \" + toType);\n    }"
}