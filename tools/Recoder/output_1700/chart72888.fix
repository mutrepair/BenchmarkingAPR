{
          "0": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = 1;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "1": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = 2;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "2": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\nlong sumY = -1;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "3": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\nint sumY = -1;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "4": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "5": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = -2;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "6": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = \"null\";\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "7": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble  = ;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "8": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = false;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "9": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble  = ;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "10": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = null;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "11": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = -1;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "12": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = true;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "13": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = -0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "14": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "15": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble  = ;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "16": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble  = ;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "17": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble  = ;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "18": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = 1;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "19": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\nboolean sumY = -1;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "20": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = !1;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "21": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = 2;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "22": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble  = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "23": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "24": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "25": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\ndouble  = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "26": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\nreturn;\n        double sumY = -1;        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "27": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\nObject sumY = -1;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "28": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = -1;        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }"
}