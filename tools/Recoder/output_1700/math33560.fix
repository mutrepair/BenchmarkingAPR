{
          "0": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.plus, leafMerger, merged, true);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "1": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.plus, leafMerger, merged, null);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "2": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nmerged.parent = parentTree;\n            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "3": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nmerged.cut = merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "4": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nparentTree.plus = merged;\n            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "5": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nparentTree.minus = merged;\n            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "6": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nreturn merged;            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "7": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nmerged.condense();\n            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "8": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "9": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nminus.merge(merged.minus, leafMerger, merged, false);\n            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "10": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nbreak;\n            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "11": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.plus, merged, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "12": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "13": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\ncondense();\n            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "14": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nminus.merge(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "15": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nparent.merge(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "16": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\ncopySelf().merge(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "17": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\ngetPlus().merge(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "18": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\ngetMinus().merge(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "19": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\ngetParent().merge(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "20": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "21": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.plus, leafMerger, merged, \"null\");\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "22": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(parentTree, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "23": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.plus, leafMerger, parentTree, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "24": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.plus, parentTree, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "25": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nreturn;\n            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "26": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nreturn null;            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "27": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(isPlusChild, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "28": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nif(isPlusChild){\n            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n}\n        }\n    }",
          "29": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.plus, leafMerger, isPlusChild, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "30": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.plus, isPlusChild, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "31": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nreturn leafMerger.merge(tree, this, parentTree, isPlusChild, false);            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "32": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(tree.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "33": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.plus, leafMerger, leafMerger, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "34": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nmerge(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "35": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.fitToCell(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "36": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(leafMerger, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "37": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.plus, tree, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "38": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.plus, leafMerger, tree, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "39": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nreturn leafMerger.merge(this, tree, parentTree, isPlusChild, true);            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "40": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge();\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "41": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.plus);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "42": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nparentTree.plus = merged;\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "43": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(tree, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "44": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "45": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(tree);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "46": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.plus, leafMerger, merged.plus, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "47": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(leafMerger);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "48": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(tree, leafMerger);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "49": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged.minus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "50": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.condense(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "51": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged, leafMerger);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "52": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged, merged.plus);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "53": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.debug(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "54": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nif((merged.cut != null)){\n            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n}\n        }\n    }",
          "55": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\ncontinue;\n            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "56": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.split(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "57": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "58": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(minus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "59": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(parent, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "60": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(leafMerger, merged.plus);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "61": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nmerged.cut = merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "62": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nmerged.parent = parentTree;\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "63": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(tree, leafMerger, merged.plus);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "64": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\ntree.merge(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "65": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged, merged.plus, merged.plus);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "66": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nparentTree.minus = merged;\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "67": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged, leafMerger, merged.plus);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "68": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(tree, merged.plus, merged.plus);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "69": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.add(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "70": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(leafMerger, merged.plus, merged.plus);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "71": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nif((parentTree != null)){\n            plus.merge(merged.plus, leafMerger, merged, false);            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n}\n        }\n    }",
          "72": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nmerged.merge(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "73": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nleafMerger.merge(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "74": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.e(merged.plus, leafMerger, merged, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "75": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nmerged.condense();\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "76": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(tree, leafMerger, merged.plus, merged.plus);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "77": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged, merged.plus, merged.plus, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "78": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(tree, leafMerger, merged.plus, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "79": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(tree, merged.plus, merged.plus, false);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }",
          "80": "    private BSPTree<S> merge(final BSPTree<S> tree, final LeafMerger<S> leafMerger,\n                             final BSPTree<S> parentTree, final boolean isPlusChild) {\n        if (cut == null) {\n            // cell/tree operation\n            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);\n        } else if (tree.cut == null) {\n            // tree/cell operation\n            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);\n        } else {\n            // tree/tree operation\n            final BSPTree<S> merged = tree.split(cut);\n            if (parentTree != null) {\n                merged.parent = parentTree;\n                if (isPlusChild) {\n                    parentTree.plus = merged;\n                } else {\n                    parentTree.minus = merged;\n                }\n            }\n\n            // merging phase\nplus.merge(merged, leafMerger, merged.plus, merged.plus);\n            minus.merge(merged.minus, leafMerger, merged, false);\n            merged.condense();\n            if (merged.cut != null) {\n                merged.cut =\n                    merged.fitToCell(merged.cut.getHyperplane().wholeHyperplane());\n            }\n\n            return merged;\n\n        }\n    }"
}