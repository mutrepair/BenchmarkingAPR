{
          "0": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b << 0);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "1": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b << 2);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "2": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b << 1);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "3": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b << 13);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "4": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "5": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc += (b << 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "6": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b - 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "7": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b >> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "8": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b << 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "9": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc = (b << 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "10": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "11": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b <= 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "12": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b << -1);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "13": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b % 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "14": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b >= 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "15": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b > 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "16": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc -= (b << 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "17": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b & 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "18": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b == 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "19": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc &= (b << 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "20": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b < 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "21": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc |= (b << 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "22": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc *= (b << 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "23": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b << false);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "24": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b << null);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "25": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b << \"null\");\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "26": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc = (b >>> 13);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "27": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b >>> 13);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "28": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (c << 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "29": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b << true);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "30": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc += (b >>> 13);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "31": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc -= b;\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "32": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b << -2);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "33": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nif((b << 15)){\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "34": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nb ^= (b << 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "35": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nreturn;\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "36": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc ^= (b >>> 13);\n        c ^= (b << 15);      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "37": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nc -= b;\n        c ^= (b << 15);      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "38": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\nreturn;\n        c ^= (b << 15);      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "39": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b << 15);      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] & 0xff) << 24;\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }"
}