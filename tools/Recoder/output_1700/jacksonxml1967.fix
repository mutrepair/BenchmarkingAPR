{
          "0": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(_config){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "1": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nreturn;\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "2": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(xgen){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "3": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((rootName != null)){\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n}\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "4": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "5": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(!_config){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "6": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((rootName != null)){\nreturn;\n}            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "7": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(cls){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "8": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((rootName == null)){\nreturn;\n}            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "9": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(rootName){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "10": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(rootName.isEmpty()){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "11": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(rootName){\nreturn;\n}            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "12": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(asArray){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "13": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(!xgen){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "14": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(-true){                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "15": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((\"null\" + e.getClass().getName())){\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n}\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "16": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(!asArray){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "17": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((\"null\" + e.getClass().getName())){\nreturn;\n}            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "18": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(!rootName){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "19": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((rootName == null)){\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n}\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "20": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(_config){\nreturn;\n}            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "21": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(rootName){\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n}\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "22": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((\"null\" + e.getClass().getName())){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "23": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(asArray){\nreturn;\n}            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "24": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((_config != null)){\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n}\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "25": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(xgen){\nreturn;\n}            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "26": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(ioe){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "27": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(gen){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "28": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nrootName = false;\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "29": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nrootName = true;\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "30": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((xgen != null)){\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n}\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "31": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(asArray){\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n}\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "32": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n_serializeXmlNull(gen);\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "33": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nbreak;\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "34": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((_config && _config)){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "35": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((_config != null)){\nreturn;\n}            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "36": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((xgen != null)){\nreturn;\n}            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "37": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nasArray = false;\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "38": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nasArray = TypeUtil.isIndexedType(cls);\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "39": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n_initWithRootName(xgen, rootName);\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "40": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n_startRootArray(xgen, rootName);\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "41": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((_config && rootName)){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "42": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nrootName = _rootNameLookup.findRootName(cls, _config);\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "43": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nser.serialize(value, gen, this);\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "44": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((xgen == null)){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "45": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nmsg = ((\"null\" + e.getClass().getName()) + \"null\");\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "46": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(true){                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "47": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\ngen.writeEndObject();\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "48": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((_config && (_config != null))){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "49": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nbreak;\n            if (false) {                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "50": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((_config && (rootName != null))){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "51": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nreturn;\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "52": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((_config && (_config == null))){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "53": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(null){                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "54": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((rootName && (_config != null))){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "55": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(false){                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "56": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((_config && (xgen != null))){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "57": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif(\"null\"){                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "58": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((_config && (rootName == null))){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "59": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((_config || (_config != null))){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }",
          "60": "    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\nif((xgen && (_config != null))){\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n            throw ioe;\n        } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }"
}