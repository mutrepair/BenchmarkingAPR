{
          "0": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, childType, false));\n    }\n  }",
          "1": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, childType, true));\n    }\n  }",
          "2": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(childType, childType, true));\n    }\n  }",
          "3": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, child, true));\n    }\n  }",
          "4": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child));\n    }\n  }",
          "5": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, childType, true), false);\n    }\n  }",
          "6": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, i, true));\n    }\n  }",
          "7": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(i, childType, true));\n    }\n  }",
          "8": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(child, new ObjectTypePair(child, childType, true));\n    }\n  }",
          "9": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, childType, true), true);\n    }\n  }",
          "10": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(addAsArrayElement(new ObjectTypePair(child, childType, true)));\n    }\n  }",
          "11": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\nif((childType != null)){\ncontinue;\n}\n      addAsArrayElement(new ObjectTypePair(child, childType, true));    }\n  }",
          "12": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, componentType, true));\n    }\n  }",
          "13": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(componentType, childType, true));\n    }\n  }",
          "14": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement();\n    }\n  }",
          "15": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, childType, true), child);\n    }\n  }",
          "16": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\nreturn;\n      addAsArrayElement(new ObjectTypePair(child, childType, true));    }\n  }",
          "17": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, childType, true), childType);\n    }\n  }",
          "18": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\n    }\n  }",
          "19": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, child));\n    }\n  }",
          "20": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, fieldTypeInfo, true));\n    }\n  }",
          "21": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\nassignToRoot(new ObjectTypePair(child, childType, true));\n    }\n  }",
          "22": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(childType));\n    }\n  }",
          "23": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(fieldTypeInfo, childType, true));\n    }\n  }",
          "24": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(get(child, childType, true));\n    }\n  }",
          "25": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\nif((childType == null)){\ncontinue;\n}\n      addAsArrayElement(new ObjectTypePair(child, childType, true));    }\n  }",
          "26": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, , true));\n    }\n  }",
          "27": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new JsonArray());\n    }\n  }",
          "28": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(, childType, true));\n    }\n  }",
          "29": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, childType));\n    }\n  }",
          "30": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, length, true));\n    }\n  }",
          "31": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\ndebug(new ObjectTypePair(child, childType, true));\n    }\n  }",
          "32": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(length, childType, true));\n    }\n  }",
          "33": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, false));\n    }\n  }",
          "34": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, child, false));\n    }\n  }",
          "35": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(i));\n    }\n  }",
          "36": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, childType, true), i);\n    }\n  }",
          "37": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(array);\n    }\n  }",
          "38": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(startVisitingObject(child));\n    }\n  }",
          "39": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(visitPrimitive(child));\n    }\n  }",
          "40": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(childType, new ObjectTypePair(child, childType, true));\n    }\n  }",
          "41": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(false));\n    }\n  }",
          "42": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, childType, true), null);\n    }\n  }",
          "43": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\nchild = addAsArrayElement(new ObjectTypePair(child, childType, true));\n    }\n  }",
          "44": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\nif(childType){\ncontinue;\n}\n      addAsArrayElement(new ObjectTypePair(child, childType, true));    }\n  }",
          "45": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\nArray.addAsArrayElement(new ObjectTypePair(child, childType, true));\n    }\n  }",
          "46": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(child, childType, true);\n    }\n  }",
          "47": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(childType, child));\n    }\n  }",
          "48": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, true));\n    }\n  }",
          "49": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(child);\n    }\n  }",
          "50": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(arrayType);\n    }\n  }",
          "51": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, arrayType, true));\n    }\n  }",
          "52": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\nbreak;\n      addAsArrayElement(new ObjectTypePair(child, childType, true));    }\n  }",
          "53": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, array, true));\n    }\n  }",
          "54": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, child, false, false));\n    }\n  }",
          "55": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, child, child));\n    }\n  }",
          "56": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(arrayType, childType, true));\n    }\n  }",
          "57": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(array, childType, true));\n    }\n  }",
          "58": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, false, false));\n    }\n  }",
          "59": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, childType, null));\n    }\n  }",
          "60": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, false, child));\n    }\n  }",
          "61": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\nif(addAsArrayElement(new ObjectTypePair(child, childType, true))){\n    }\n  }",
          "62": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\nif(child){\ncontinue;\n}\n      addAsArrayElement(new ObjectTypePair(child, childType, true));    }\n  }",
          "63": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, child, true, false));\n    }\n  }",
          "64": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, child, false, true));\n    }\n  }",
          "65": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, true, false));\n    }\n  }",
          "66": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, false, true));\n    }\n  }",
          "67": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, true, child));\n    }\n  }",
          "68": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\ne(new ObjectTypePair(child, childType, true));\n    }\n  }",
          "69": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, child, child, false));\n    }\n  }",
          "70": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(childType, child, false));\n    }\n  }",
          "71": "  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\naddAsArrayElement(new ObjectTypePair(child, child, childType));\n    }\n  }"
}