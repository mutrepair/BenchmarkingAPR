{
          "0": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nlast[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "1": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\norigPtr[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "2": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nblockSize100k[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "3": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbsBuff[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "4": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbsLive[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "5": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nnInUse[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "6": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncurrentChar[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "7": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nEOF[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "8": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nSTART_BLOCK_STATE[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "9": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nRAND_PART_A_STATE[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "10": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nRAND_PART_B_STATE[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "11": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nRAND_PART_C_STATE[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "12": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nNO_RAND_PART_A_STATE[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "13": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nNO_RAND_PART_B_STATE[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "14": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nNO_RAND_PART_C_STATE[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "15": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncurrentState[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "16": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nstoredBlockCRC[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "17": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncomputedBlockCRC[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "18": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_count[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "19": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_ch2[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "20": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_chPrev[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "21": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_i2[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "22": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_j2[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "23": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_rNToGo[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "24": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_rTPos[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "25": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_tPos[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "26": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nunzftab[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "27": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nlimit[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "28": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "29": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nperm[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "30": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nminLens[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "31": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncftab[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "32": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ntt[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "33": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[(length[i] + 1)]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "34": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "35": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nlast[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "36": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\norigPtr[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "37": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nblockSize100k[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "38": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbsBuff[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "39": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbsLive[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "40": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nnInUse[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "41": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncurrentChar[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "42": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nEOF[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "43": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nSTART_BLOCK_STATE[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "44": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nRAND_PART_A_STATE[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "45": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nRAND_PART_B_STATE[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "46": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nRAND_PART_C_STATE[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "47": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nNO_RAND_PART_A_STATE[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "48": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nNO_RAND_PART_B_STATE[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "49": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nNO_RAND_PART_C_STATE[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "50": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncurrentState[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "51": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nstoredBlockCRC[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "52": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncomputedBlockCRC[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "53": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_count[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "54": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_ch2[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "55": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_chPrev[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "56": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_i2[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "57": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_j2[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "58": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_rNToGo[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "59": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_rTPos[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "60": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_tPos[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "61": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nunzftab[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "62": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nlimit[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "63": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nperm[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "64": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nminLens[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "65": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncftab[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "66": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ntt[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "67": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[(length[i] + -1)]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "68": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[(length[i] + 0)]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "69": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ni;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "70": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "71": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nlimit[i] = 0;\n            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "72": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[(length[i] + 2)]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "73": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "74": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[i] = 0;\n            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "75": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nlength[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "76": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[(base[i] + -1)]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "77": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[i] = b;\n            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "78": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nif((length[i] + -1)){\ncontinue;\n}\n            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "79": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbreak;\n            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "80": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nalphaSize[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "81": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nb += base[i];\n            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "82": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nif((i < alphaSize)){\ncontinue;\n}\n            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "83": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[i] = 0;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "84": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nlimit[i] = (length[i] + -1);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "85": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nlimit[i] = 0;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "86": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[(base[(length[i] + -1)] + -1)]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "87": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nb += base[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "88": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[i] = (length[i] + -1);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "89": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[i] = b;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "90": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[(i + -1)]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "91": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nlimit[i] = base[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "92": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n-base;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "93": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "94": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[i] = base[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "95": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncreateHuffmanDecodingTables(base[(length[i] + -1)], base);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "96": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nlimit;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "97": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nfor(int i = 0;(i < alphaSize);i++) {            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "98": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nlast;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "99": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\norigPtr;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "100": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nblockSize100k;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "101": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbsBuff;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "102": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbsLive;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "103": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nnInUse;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "104": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncurrentChar;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "105": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nEOF;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "106": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nSTART_BLOCK_STATE;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "107": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nRAND_PART_A_STATE;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "108": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nRAND_PART_B_STATE;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "109": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nRAND_PART_C_STATE;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "110": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nNO_RAND_PART_A_STATE;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "111": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nNO_RAND_PART_B_STATE;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "112": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nNO_RAND_PART_C_STATE;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "113": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncurrentState;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "114": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nstoredBlockCRC;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "115": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncomputedBlockCRC;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "116": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_count;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "117": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_ch2;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "118": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_chPrev;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "119": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_i2;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "120": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_j2;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "121": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_rNToGo;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "122": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_rTPos;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "123": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nsu_tPos;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "124": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nunzftab;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "125": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nperm;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "126": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nminLens;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "127": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncftab;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "128": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ntt;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "129": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nreturn;\n            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "130": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncreateHuffmanDecodingTables(base[(length[i] + -1)], base[i]);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "131": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nalphaSize;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "132": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncreateHuffmanDecodingTables(base[(length[i] + -1)], -1);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "133": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[(length[i] - -1)]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "134": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nif((i != null)){\ncontinue;\n}\n            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "135": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[(length[i] + -1)]++;\n            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "136": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nlimit[i] = base[i];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "137": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[(length[i] + -1)] = (length[i] + -1);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "138": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncreateHuffmanDecodingTables(base[(length[i] + -1)], base[(length[i] + -1)]);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "139": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[(length[i] + -1)] = base;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "140": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncreateHuffmanDecodingTables(base[i], base[i]);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "141": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nif((base[(length[i] + -1)] != null)){\ncontinue;\n}\n            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "142": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nif((length != null)){\ncontinue;\n}\n            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "143": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nif((base != null)){\ncontinue;\n}\n            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "144": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncreateHuffmanDecodingTables(base[i], base);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "145": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase[(length[i] + -1)] = base[(length[i] + -1)];\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "146": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncreateHuffmanDecodingTables(base[i], -1);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "147": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncontinue;\n            base[length[i] + -1]++;        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "148": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncreateHuffmanDecodingTables(base, base);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "149": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncreateHuffmanDecodingTables(base, base[(length[i] + -1)]);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "150": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncreateHuffmanDecodingTables(base, base[i]);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "151": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncreateHuffmanDecodingTables(base[i], base[(length[i] + -1)]);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "152": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncreateHuffmanDecodingTables(base[(length[i] + -1)], length);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "153": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\ncreateHuffmanDecodingTables(base[(length[i] + -1)], length[i]);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "154": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase(base[(length[i] + -1)], base[i]);\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "155": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\nbase(base[(length[i] + -1)], ((base[i] + -1) + -1));\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }"
}