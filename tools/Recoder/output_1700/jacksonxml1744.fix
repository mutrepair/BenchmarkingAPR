{
          "0": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\n                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "1": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nreturn;\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "2": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nbreak;\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "3": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nif(true){                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "4": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\ncontinue;\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "5": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nxgen.setNextIsCData(true);\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "6": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nprop.serializeAsField(bean, xgen, provider);\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "7": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\n_anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "8": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nwrapAndThrow(provider, e, bean, name);\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "9": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nxgen.setNextIsAttribute(false);\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "10": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nxgen.setNextIsCData(false);\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "11": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nxgen.setNextIsUnwrapped(true);\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "12": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nxgen.setNextName(xmlNames[i]);\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "13": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nif((cdata != null)){\n                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "14": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nif((isAttribute && isUnwrappingSerializer())){\n                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "15": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nif((i == attrCount)){\n                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "16": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nbreak;\n                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "17": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nif((cdata != null)){\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n}\n        }\n    }",
          "18": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nif((isAttribute && isUnwrappingSerializer())){\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n}\n        }\n    }",
          "19": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nif((i == attrCount)){\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n}\n        }\n    }",
          "20": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nfor(final int len = props.length;(i < len);++i) {            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "21": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nif(-false){                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "22": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\ncontinue;\n                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "23": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nreturn;\n                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "24": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nreturn;\nreturn;\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "25": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nif(false){                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "26": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nreturn;\ncontinue;\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "27": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\n_anyGetterWriter.getAndSerialize(bean, xgen, provider);\n                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "28": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nBeanPropertyWriter prop = props[i];\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "29": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nreturn;\nbreak;\n            if (true) {                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }",
          "30": "    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n        throws IOException\n    {\n        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n        if (!(gen0 instanceof ToXmlGenerator)) {\n            super.serializeFields(bean, gen0, provider);\n            return;\n        }\n        \n        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n\n        final int attrCount = _attributeCount;\n        final boolean isAttribute = xgen._nextIsAttribute;\n        if (attrCount > 0) {\n            xgen.setNextIsAttribute(true);\n        }\n        final int textIndex = _textPropertyIndex;\n        final QName[] xmlNames = _xmlNames;\n        int i = 0;\n        final BitSet cdata = _cdata;\n\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                    xgen.setNextIsAttribute(false);\n                }\n                // also: if this is property to write as text (\"unwrap\"), need to:\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(true);\n                }\n                xgen.setNextName(xmlNames[i]);\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { // can have nulls in filtered list\n                    if ((cdata != null) && cdata.get(i)) {\n                        xgen.setNextIsCData(true);\n                        prop.serializeAsField(bean, xgen, provider);\n                        xgen.setNextIsCData(false);\n                    } else {\n                        prop.serializeAsField(bean, xgen, provider);\n                    }\n                }\n                // Reset to avoid next value being written as unwrapped, \n                // for example when property is suppressed\n                if (i == textIndex) {\n                    xgen.setNextIsUnwrapped(false);\n                }\n            }\nxgen.setNextIsCData(true);\n                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n                // with accidental attributes otherwise\n                xgen.setNextIsAttribute(false);\n                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) { // Bit tricky, can't do more calls as stack is full; so:\n            JsonMappingException mapE = JsonMappingException.from(gen0,\n                    \"Infinite recursion (StackOverflowError)\");\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }"
}