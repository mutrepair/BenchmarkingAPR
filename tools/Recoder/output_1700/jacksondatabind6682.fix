{
          "0": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(true){            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "1": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\n            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "2": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(isCachable()){\n            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "3": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(hasViews()){\n            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "4": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(\"null\"){            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "5": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(!isCachable()){\n            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "6": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(!hasViews()){\n            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "7": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(null){            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "8": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(prop.isCachable()){\n            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "9": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(prop.hasViews()){\n            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "10": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(this.isCachable()){\n            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "11": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(this.hasViews()){\n            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "12": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(prop){\n            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "13": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(valueDeser){\n            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "14": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(-true){            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "15": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nbreak;\n            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "16": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(!true){            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "17": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(1){            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "18": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(0){            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "19": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(2){            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "20": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nif(false){            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "21": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\n        if (false) {            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }",
          "22": "    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,\n            SettableBeanProperty prop)\n    {\n        String refName = prop.getManagedReferenceName();\nreturn;\n        if (false) {            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = null;\n        boolean isContainer = false;\n        if (valueDeser instanceof BeanDeserializerBase) {\n            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n            if (!(contentDeser instanceof BeanDeserializerBase)) {\n                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n                        +\" (instead it's of type \"+deserName+\")\");\n            }\n            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n            isContainer = true;\n        } else if (valueDeser instanceof AbstractDeserializer) {\n            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n        } else {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                    +valueDeser.getClass().getName());\n        }\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        // also: verify that type is compatible\n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }"
}