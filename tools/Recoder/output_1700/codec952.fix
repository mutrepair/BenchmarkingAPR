{
          "0": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj - bits)] < \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "1": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj - bits)] || \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "2": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj - bits)] > \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "3": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj - bits)] && \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "4": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj - bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "5": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ii[(jj - bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "6": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj - bits)] >= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "7": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((jj[(jj - bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "8": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[ii] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "9": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ii[bits] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "10": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[bits] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "11": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ii[ii] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "12": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((jj <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "13": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((l_raw[(jj - bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "14": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((BITS[(jj - bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "15": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((jj[bits] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "16": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((bits <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "17": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif(([(jj - bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "18": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj - bits)] == \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "19": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((jj - bits)){\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "20": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((jj[ii] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "21": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((l_raw[bits] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "22": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((l_raw[ii] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "23": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ii <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "24": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((BITS[ii] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "25": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((BITS[bits] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "26": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((bits[(jj - bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "27": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif(([ii] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "28": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif(([bits] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "29": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nl_raw[ii] |= BITS[bits];\n                if (ascii[jj - bits] <= '1') {                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "30": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj >= bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "31": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((-jj <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "32": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj - bits)] != \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "33": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj - bits)].[(jj - bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "34": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj - bits)] | \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "35": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif(((ascii[(jj - bits)] <= \"null\") && (ascii[(jj - bits)] <= \"null\"))){\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "36": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj <= bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "37": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((l_raw <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "38": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(ascii[(jj - bits)] <= \"null\")] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "39": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((-ascii <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "40": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((-ii <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "41": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((jj - bits)){\ncontinue;\n}\n                if (ascii[jj - bits] <= '1') {                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "42": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((BITS <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "43": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj - bits)] & \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "44": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif(((ascii[(jj - bits)] <= \"null\") || (ascii[(jj - bits)] <= \"null\"))){\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "45": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((EMPTY_BYTE_ARRAY[(jj - bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "46": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj > bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "47": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii == null)){\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "48": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj < bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "49": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "50": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif(( <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "51": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii.length == 0)){\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "52": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj == bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "53": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii == null)){\ncontinue;\n}\n                if (ascii[jj - bits] <= '1') {                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "54": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((-ascii <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "55": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((jj++ <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "56": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif(( <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "57": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nfor(int bits = 0;(bits < BITS.length);++bits) {                if (ascii[jj - bits] <= '1') {                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "58": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(bits - bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "59": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif(((ascii == null) || (ascii.length == 0))){\ncontinue;\n}\n                if (ascii[jj - bits] <= '1') {                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "60": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nreturn EMPTY_BYTE_ARRAY;                if (ascii[jj - bits] <= '1') {                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "61": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nreturn l_raw;                if (ascii[jj - bits] <= '1') {                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "62": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj != bits)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "63": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nbreak;\n                if (ascii[jj - bits] <= '1') {                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "64": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {                if (ascii[jj - bits] <= '1') {                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "65": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ii[(jj - jj)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "66": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ii[(jj + jj)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "67": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj - jj)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "68": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif((ascii[(jj + jj)] <= \"null\")){                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "69": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif(((ascii[(jj - bits)] <= \"null\") && (jj < jj))){\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "70": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif(((ascii[(jj - bits)] <= \"null\") || (jj < jj))){\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "71": "    public static byte[] fromAscii(byte[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\nif(((ascii[(jj - bits)] <= \"null\") && (jj > jj))){\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }"
}