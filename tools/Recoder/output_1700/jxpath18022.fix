{
          "0": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\n            }\n        }\n\n        return 0;\n    }",
          "1": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\ncontinue;\n            }\n        }\n\n        return 0;\n    }",
          "2": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn -1;            }\n        }\n\n        return 0;\n    }",
          "3": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn 2;            }\n        }\n\n        return 0;\n    }",
          "4": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn 0;            }\n        }\n\n        return 0;\n    }",
          "5": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nbreak;\n            }\n        }\n\n        return 0;\n    }",
          "6": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn 1;            }\n        }\n\n        return 0;\n    }",
          "7": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nbreak;\n                return -1;            }\n        }\n\n        return 0;\n    }",
          "8": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn -1;                return -1;            }\n        }\n\n        return 0;\n    }",
          "9": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn null;            }\n        }\n\n        return 0;\n    }",
          "10": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nremove();\n                return -1;            }\n        }\n\n        return 0;\n    }",
          "11": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn -2;            }\n        }\n\n        return 0;\n    }",
          "12": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn 0;                return -1;            }\n        }\n\n        return 0;\n    }",
          "13": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn;\n            }\n        }\n\n        return 0;\n    }",
          "14": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn children;            }\n        }\n\n        return 0;\n    }",
          "15": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn node1;            }\n        }\n\n        return 0;\n    }",
          "16": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn length;            }\n        }\n\n        return 0;\n    }",
          "17": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn false;            }\n        }\n\n        return 0;\n    }",
          "18": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn ;            }\n        }\n\n        return 0;\n    }",
          "19": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn 1;                return -1;            }\n        }\n\n        return 0;\n    }",
          "20": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn ;            }\n        }\n\n        return 0;\n    }",
          "21": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn ;            }\n        }\n\n        return 0;\n    }",
          "22": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nfor(int i = 0;(i < length);i++) {            }\n        }\n\n        return 0;\n    }",
          "23": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\ncontinue;\n                return -1;            }\n        }\n\n        return 0;\n    }",
          "24": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\npointer2.remove();\n                return -1;            }\n        }\n\n        return 0;\n    }",
          "25": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nif((node2 instanceof Attribute)){\n}\n                return -1;            }\n        }\n\n        return 0;\n    }",
          "26": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn \"null\";            }\n        }\n\n        return 0;\n    }",
          "27": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\npointer1.remove();\n                return -1;            }\n        }\n\n        return 0;\n    }",
          "28": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn node;            }\n        }\n\n        return 0;\n    }",
          "29": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nif((node1 instanceof Attribute)){\n}\n                return -1;            }\n        }\n\n        return 0;\n    }",
          "30": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\n.remove();\n                return -1;            }\n        }\n\n        return 0;\n    }",
          "31": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn;\n                return -1;            }\n        }\n\n        return 0;\n    }",
          "32": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nfor(int i = 0;(i < length);i++) {                return -1;            }\n        }\n\n        return 0;\n    }",
          "33": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn -;            }\n        }\n\n        return 0;\n    }",
          "34": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nreturn true;            }\n        }\n\n        return 0;\n    }",
          "35": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nif((n == node2)){\n}\n                return -1;            }\n        }\n\n        return 0;\n    }",
          "36": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\n                return -1;            }\n        }\n\n        return 0;\n    }",
          "37": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nif((node != null)){\n}\n                return -1;            }\n        }\n\n        return 0;\n    }",
          "38": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nif(( != null)){\n}\n                return -1;            }\n        }\n\n        return 0;\n    }",
          "39": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nif((node != null)){\nreturn -1;}                return -1;            }\n        }\n\n        return 0;\n    }",
          "40": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nif(( != null)){\nreturn -1;}                return -1;            }\n        }\n\n        return 0;\n    }",
          "41": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nif((node == null)){\nreturn -1;}                return -1;            }\n        }\n\n        return 0;\n    }",
          "42": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            else if (n == node2) {\nif(( == null)){\nreturn -1;}                return -1;            }\n        }\n\n        return 0;\n    }"
}