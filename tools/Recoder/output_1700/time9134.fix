{
          "0": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 1) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "1": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) + leapYears) * (long)MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "2": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nleapYears = ((relativeYear + 3) >> 2);\n        long millis = (relativeYear / 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "3": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nleapYears = (relativeYear >> 2);\n        long millis = (relativeYear / 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "4": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = ((relativeYear / 365L) + leapYears);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "5": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nleapYears++;\n        long millis = (relativeYear / 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "6": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "7": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nreturn;\n        long millis = (relativeYear / 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "8": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nbreak;\n        long millis = (relativeYear / 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "9": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((leapYears / 365L) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "10": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear - 365L) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "11": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) + leapYears) * (long)year);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "12": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 112) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "13": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) + leapYears) * (long)relativeYear);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "14": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (relativeYear / 365L);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "15": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nreturn (millis + ((365L - 112) * DateTimeConstants.MILLIS_PER_DAY));        long millis = (relativeYear / 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "16": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) + leapYears) * (long)leapYears);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "17": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) - leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "18": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / -1) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "19": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = ((((relativeYear / 365L) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "20": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) + leapYears) / (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "21": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nint millis = (((relativeYear / 365L) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "22": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) + leapYears) - (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "23": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 1687) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "24": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 3) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "25": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) + relativeYear) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "26": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 2) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "27": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nreturn 0;        long millis = (relativeYear / 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "28": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) + leapYears) * leapYears);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "29": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nfinal long millis = (((relativeYear / 365L) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "30": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \ncontinue;\n        long millis = (relativeYear / 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "31": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = ((relativeYear / 365L) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "32": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = leapYears;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "33": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nif((leapYears != null)){\n        long millis = (relativeYear / 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n}\n    }",
          "34": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nrelativeYear++;\n        long millis = (relativeYear / 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "35": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = ((((relativeYear / 365L) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY) * leapYears);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "36": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) / leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "37": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nif((relativeYear + 3)){\n        long millis = (relativeYear / 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n}\n    }",
          "38": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) * (long)DateTimeConstants.MILLIS_PER_DAY) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "39": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = ((365L - 112) * DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "40": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) * leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "41": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nif(((365L - 112) * DateTimeConstants.MILLIS_PER_DAY)){\n        long millis = (relativeYear / 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n}\n    }",
          "42": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear + 365L) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "43": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = ((leapYears * (long)DateTimeConstants.MILLIS_PER_DAY) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "44": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nif((relativeYear / 365L)){\n        long millis = (relativeYear / 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n}\n    }",
          "45": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear * 365L) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "46": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / true) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "47": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nif(!isLeapYear(year)){\n        long millis = (relativeYear / 365L + leapYears)\n            * (long)DateTimeConstants.MILLIS_PER_DAY;\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n}\n    }",
          "48": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) + year) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "49": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) + millis) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "50": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) + leapYears) + (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "51": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / false) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "52": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 365L) + leapYears) * (long));\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "53": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear % 365L) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "54": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nlong millis = (((relativeYear / 0) + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY);\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }",
          "55": "    long calculateFirstDayOfYearMillis(int year) {\n        // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.\n        // Calculate relative to the nearest leap year and account for the\n        // difference later.\n\n        int relativeYear = year - 1687;\n        int leapYears;\n        if (relativeYear <= 0) {\n            // Add 3 before shifting right since /4 and >>2 behave differently\n            // on negative numbers.\n            leapYears = (relativeYear + 3) >> 2;\n        } else {\n            leapYears = relativeYear >> 2;\n            // For post 1687 an adjustment is needed as jan1st is before leap day\n            if (!isLeapYear(year)) {\n                leapYears++;\n            }\n        }\n        \nint leapYears = ;\n\n        // Adjust to account for difference between 1687-01-01 and 1686-04-23.\n\n        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;\n    }"
}