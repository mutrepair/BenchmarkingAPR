{
          "0": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal long F = (msbg + mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "1": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal int F = (msbg + mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "2": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (dfwg + mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "3": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (sswg + mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "4": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (msbg + mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "5": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (msbg - mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "6": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = msbg;\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "7": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = msbg;\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "8": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (msbg / mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "9": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (msbg * mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "10": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal boolean F = (msbg + mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "11": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = 0;\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "12": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = ((msbg + mswg) + msbg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "13": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = (msbg + msbg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "14": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = msbg;\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "15": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = (msbg - msbg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "16": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = (msbg + mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "17": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal Object F = (msbg + mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "18": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = ((msbg + msbg) + mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "19": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = ((msbg + msbg) + msbg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "20": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (msbg + );\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "21": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (msbg + dfwg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "22": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = (msbg + 1);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "23": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (msbg + msbg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "24": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (msbg + sswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "25": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (msbg + dfbg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "26": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = (msbg + msbg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "27": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = (msbg + sswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "28": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = (msbg + dfwg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "29": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = ((msbg + mswg) + msbg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "30": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = (msbg + msbg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "31": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = (msbg - msbg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "32": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal String F = (msbg + mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "33": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = ((msbg + msbg) + mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "34": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal List F = (msbg + mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "35": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = ((msbg + mswg) + 1);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "36": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = ((msbg + msbg) + msbg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "37": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal  F = (msbg + mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "38": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (msbg % mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "39": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = ((msbg + msbg) - msbg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "40": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = ((msbg + msbg) + msbg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "41": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (msbg == mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "42": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (msbg << mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "43": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = ((msbg + msbg) + 1);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "44": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double F = (msbg | mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "45": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = (((msbg + msbg) + msbg) + mswg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "46": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\nfinal double  = (((msbg + msbg) + msbg) + msbg);\n\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }",
          "47": "    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n                                  final boolean allowOneElementData)\n        throws NullArgumentException, DimensionMismatchException {\n\n        MathUtils.checkNotNull(categoryData);\n\n        if (!allowOneElementData) {\n            // check if we have enough categories\n            if (categoryData.size() < 2) {\n                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n                                                     categoryData.size(), 2);\n            }\n\n            // check if each category has enough data\n            for (final SummaryStatistics array : categoryData) {\n                if (array.getN() <= 1) {\n                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n                                                         (int) array.getN(), 2);\n                }\n            }\n        }\n\n        int dfwg = 0;\n        double sswg = 0;\n        double totsum = 0;\n        double totsumsq = 0;\n        int totnum = 0;\n\n        for (final SummaryStatistics data : categoryData) {\n\n            final double sum = data.getSum();\n            final double sumsq = data.getSumsq();\n            final int num = (int) data.getN();\n            totnum += num;\n            totsum += sum;\n            totsumsq += sumsq;\n\n            dfwg += num - 1;\n            final double ss = sumsq - ((sum * sum) / num);\n            sswg += ss;\n        }\n\n        final double sst = totsumsq - ((totsum * totsum) / totnum);\n        final double ssbg = sst - sswg;\n        final int dfbg = categoryData.size() - 1;\n        final double msbg = ssbg / dfbg;\n        final double mswg = sswg / dfwg;\n        final double F = msbg + mswg;\n        return new AnovaStats(dfbg, dfwg, F);\n\n    }"
}