{
          "0": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "1": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) && (txt.length() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "2": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() == 0))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "3": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif((txt.length() == 1)){\n            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "4": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif((txt == null)){\n            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "5": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() == null))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "6": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() != 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "7": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() == true))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "8": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() == 2))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "9": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((hard == null) || (txt.length() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "10": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (hard.length() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "11": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(txt.length()){\n            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "12": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() >= 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "13": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() > 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "14": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() == false))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "15": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() == -1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "16": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() <= 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "17": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() < 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "18": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) != (txt.length() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "19": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (java.util.Locale.length() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "20": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (.length() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "21": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) == (txt.length() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "22": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.getName() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "23": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(txt){\n            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "24": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((ENGLISH == null) || (txt.length() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "25": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif((((txt == null) || (txt.length() == 1)) || (txt.length() == 1))){\n            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "26": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() == \"null\"))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "27": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() && 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "28": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.ENGLISH() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "29": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() || 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "30": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.metaphone() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "31": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.toString() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "32": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.get() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "33": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif((((txt == null) || (txt.length() == 1)) || (txt == 1))){\n            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "34": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() - 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "35": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) || (txt.length() + 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "36": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif((((txt == null) || (txt.length() == 1)) || (txt != 1))){\n            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "37": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif((((txt == null) || (txt.length() == 1)) || (txt.length() == txt))){\n            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "38": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif((((txt == null) || (txt.length() == 1)) || (txt == txt))){\n            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "39": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif((((txt == null) || (txt.length() == 1)) || (txt == null))){\n            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "40": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif(((txt == null) < (txt.length() == 1))){            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "41": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif((((txt == null) || (txt.length() == 1)) || (txt != txt))){\n            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "42": "    public String metaphone(String txt) {\n        boolean hard = false ;\nif((((txt == null) || (txt.length() == 1)) && (txt == txt))){\n            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }",
          "43": "    public String metaphone(String txt) {\n        boolean hard = false ;\n        if ((txt == null) || (txt.length() == 1)) {            return \"\" ;\n        }\n        // single character is itself\n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); // manipulate\n        StringBuffer code = new StringBuffer(10) ; //   output\n        // handle initial 2 characters exceptions\n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } // now local has working string with initials fixed\n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { // max code size of 4 works well\n            char symb = local.charAt(n) ;\n            // remove duplicate letters except C\n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { // not dup\n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } // end switch\n                n++ ;\n            } // end else from symb != 'C'\n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }"
}