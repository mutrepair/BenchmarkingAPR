{
          "0": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper.Gaussian((1 - (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);\n    }",
          "1": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.Gaussian((2 * Math.PI)))), mean, sigma);;\n    }",
          "2": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((2 * Math.PI));;\n    }",
          "3": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper((1 - (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);\n    }",
          "4": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper.Gaussian((2 * Math.PI));\n    }",
          "5": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, sigma, (1 - (sigma * FastMath.sqrt((2 * Math.PI)))));;\n    }",
          "6": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);;\n    }",
          "7": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, (1 - (sigma * FastMath.sqrt((2 * Math.PI)))), sigma);;\n    }",
          "8": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 + (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);;\n    }",
          "9": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 * mean)))), mean, sigma);;\n    }",
          "10": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 * sigma)))), mean, sigma);;\n    }",
          "11": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper.Gaussian();\n    }",
          "12": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper(mean, sigma, (1 - (sigma * FastMath.sqrt((2 * Math.PI)))));\n    }",
          "13": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper.Gaussian(mean, sigma);\n    }",
          "14": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper((2 * Math.PI));\n    }",
          "15": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((0 * Math.PI)))), mean, sigma);;\n    }",
          "16": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 - Math.PI)))), mean, sigma);;\n    }",
          "17": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 * Math.PI)))), mean, mean);;\n    }",
          "18": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, (1 - (sigma * FastMath.sqrt((2 * Math.PI)))));;\n    }",
          "19": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper.Gaussian();\n        this(1 - (sigma * FastMath.sqrt(2 * Math.PI)), mean, sigma);    }",
          "20": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper.Gaussian(mean, (1 - (sigma * FastMath.sqrt((2 * Math.PI)))), sigma);\n    }",
          "21": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper.Gaussian(mean, sigma, (1 - (sigma * FastMath.sqrt((2 * Math.PI)))));\n    }",
          "22": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 + Math.PI)))), mean, sigma);;\n    }",
          "23": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper(mean, (1 - (sigma * FastMath.sqrt((2 * Math.PI)))), sigma);\n    }",
          "24": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 * Math.PI)))), sigma, sigma);;\n    }",
          "25": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, sigma, (sigma * FastMath.sqrt((2 * Math.PI))));;\n    }",
          "26": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, sigma, (2 * Math.PI));;\n    }",
          "27": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, sigma);;\n    }",
          "28": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper.Gaussian(mean, sigma, sigma);\n    }",
          "29": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper(mean, sigma);\n    }",
          "30": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 * (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);;\n    }",
          "31": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, (1 - (sigma * FastMath.sqrt((2 * Math.PI)))), 0);;\n    }",
          "32": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 / (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);;\n    }",
          "33": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper(mean, sigma, sigma);\n    }",
          "34": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper.Gaussian(mean, sigma, );\n    }",
          "35": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((2 - (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);;\n    }",
          "36": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 * PI)))), mean, sigma);;\n    }",
          "37": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, sigma, sigma);;\n    }",
          "38": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper(mean, sigma, (2 * Math.PI));\n    }",
          "39": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper.Gaussian(mean, (1 - (sigma * FastMath.sqrt((2 * Math.PI)))));\n    }",
          "40": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, (1 - (sigma * FastMath.sqrt((2 * Math.PI)))), (1 - (sigma * FastMath.sqrt((2 * Math.PI)))));;\n    }",
          "41": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((0 - (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);;\n    }",
          "42": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper(mean, sigma, (sigma * FastMath.sqrt((2 * Math.PI))));\n    }",
          "43": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(FastMath.sqrt(mean, sigma, sigma));;\n    }",
          "44": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, sigma, );;\n    }",
          "45": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, (1 - (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);;\n    }",
          "46": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 <= (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);;\n    }",
          "47": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper.sqrt((1 - (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);\n    }",
          "48": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper.add((1 - (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);\n    }",
          "49": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, sigma, (1 - (sigma * FastMath.sqrt((2 * Math.PI)))), 0);;\n    }",
          "50": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nif((sigma * FastMath.sqrt((2 * Math.PI)))){\n}\n        this(1 - (sigma * FastMath.sqrt(2 * Math.PI)), mean, sigma);    }",
          "51": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nsuper.Gaussian((2 * Math.PI));\n        this(1 - (sigma * FastMath.sqrt(2 * Math.PI)), mean, sigma);    }",
          "52": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 / Math.PI)))), mean, sigma);;\n    }",
          "53": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 * Math.PI)))), is, sigma);;\n    }",
          "54": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 * Math.PI)))), i2s2, sigma);;\n    }",
          "55": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 * Math.PI)))), norm, sigma);;\n    }",
          "56": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 <= Math.PI)))), mean, sigma);;\n    }",
          "57": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nif((1 - (sigma * FastMath.sqrt((2 * Math.PI))))){\n}\n        this(1 - (sigma * FastMath.sqrt(2 * Math.PI)), mean, sigma);    }",
          "58": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.lastIndexOf((2 * Math.PI)))), mean, sigma);;\n    }",
          "59": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 * )))), mean, sigma);;\n    }",
          "60": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, FastMath.sqrt(sigma, sigma));;\n    }",
          "61": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 * )))), mean, sigma);;\n    }",
          "62": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.add((2 * Math.PI)))), mean, sigma);;\n    }",
          "63": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, sigma, FastMath.sqrt(sigma));;\n    }",
          "64": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 >= (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);;\n    }",
          "65": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.max((2 * Math.PI)))), mean, sigma);;\n    }",
          "66": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(FastMath.sqrt(mean, sigma, (1 - (sigma * FastMath.sqrt((2 * Math.PI))))));;\n    }",
          "67": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 == (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);;\n    }",
          "68": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((2 >= Math.PI)))), mean, sigma);;\n    }",
          "69": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 % (sigma * FastMath.sqrt((2 * Math.PI)))), mean, sigma);;\n    }",
          "70": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, sigma, ((1 - (sigma * FastMath.sqrt((2 * Math.PI)))) - sigma));;\n    }",
          "71": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.debug((2 * Math.PI)))), mean, sigma);;\n    }",
          "72": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis(mean, FastMath.sqrt(mean, sigma));;\n    }",
          "73": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * FastMath.sqrt((1 * Math.PI)))), mean, sigma);;\n    }",
          "74": "    public Gaussian(double mean,\n                    double sigma)\n        throws NotStrictlyPositiveException {\nthis((1 - (sigma * Math.sqrt((2 * Math.PI)))), mean, sigma);;\n    }"
}