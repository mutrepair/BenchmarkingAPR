{
          "0": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "1": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, n);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "2": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn anyResultsMatch(n, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "3": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn evaluatesToLocalValue(n, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "4": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, recurse);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "5": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, MAY_BE_STRING_PREDICATE.MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "6": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, );    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "7": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(MAY_BE_STRING_PREDICATE, n);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "8": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, e);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "9": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "10": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch();    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "11": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn mayBeString(n, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "12": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn MAY_BE_STRING_PREDICATE;    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "13": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, false);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "14": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(MAY_BE_STRING_PREDICATE, recurse);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "15": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, true);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "16": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, );    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "17": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, mayBeStringHelper);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "18": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "19": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, MAY_BE_STRING_PREDICATE, recurse);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "20": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(MAY_BE_STRING_PREDICATE, n, recurse);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "21": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn false;    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "22": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, MATCH_NOT_FUNCTION);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "23": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn mayBeStringHelper(n);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "24": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, mayBeString);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "25": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(MAY_BE_STRING_PREDICATE, n, false);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "26": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, debug);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "27": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(MAY_BE_STRING_PREDICATE, n, );    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "28": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn maybeAddFinally(n);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "29": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn redeclareVarsInsideBranch(n);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "30": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn visit(n);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "31": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(MAY_BE_STRING_PREDICATE, n, true);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "32": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(MAY_BE_STRING_PREDICATE, false);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "33": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn n;    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "34": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(MAY_BE_STRING_PREDICATE, true);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "35": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, MAY_BE_STRING_PREDICATE.n);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "36": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn mayBeStringHelper(n, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "37": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, null);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "38": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, MAY_BE_STRING_PREDICATE, false);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "39": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(recurse, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "40": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn n.allResultsMatch();    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "41": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nif(recurse){\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n}\n    }\n  }",
          "42": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn recurse;    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "43": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, MAY_BE_STRING_PREDICATE, true);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "44": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(MAY_BE_STRING_PREDICATE, n, null);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "45": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn true;    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "46": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "47": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(allResultsMatch(n, MAY_BE_STRING_PREDICATE));    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "48": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, MAY_BE_STRING_PREDICATE, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "49": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn this.MAY_BE_STRING_PREDICATE.allResultsMatch(n, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "50": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(MAY_BE_STRING_PREDICATE, MATCH_NOT_FUNCTION);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "51": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(false);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "52": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nif((recurse == null)){\nreturn false;}      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "53": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(MAY_BE_STRING_PREDICATE, n, 0);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "54": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(MAY_BE_STRING_PREDICATE, n, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "55": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(false, n);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "56": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn debug(n, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "57": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nif((n == null)){\nreturn false;}      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "58": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn add(n, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "59": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn mayBeStringHelper(n);      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
          "60": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\nreturn allResultsMatch(n, MAY_BE_STRING_PREDICATE);      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);    } else {\n      return mayBeStringHelper(n);\n    }\n  }"
}