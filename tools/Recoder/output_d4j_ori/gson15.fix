{
          "0": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(Double.isNaN(value)){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "1": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(Double.isInfinite(value)){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "2": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "3": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.m(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "4": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nwriteDeferredName();\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "5": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nflush();\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "6": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nclose();\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "7": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nnewline();\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "8": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nbeforeName();\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "9": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nbeforeValue();\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "10": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((\"null\" + value)){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "11": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.writeDeferredName(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "12": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) && Double.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "13": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.writeDeferredName(value) || Double.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "14": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(value){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "15": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.beforeValue(value) || Double.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "16": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.isNaN(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "17": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.m(value) || Double.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "18": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.toString(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "19": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "20": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || Double.isLenient(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "21": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || Double.isHtmlSafe(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "22": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || Double.getSerializeNulls(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "23": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.beforeValue(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "24": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.isLenient(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "25": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.isHtmlSafe(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "26": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.getSerializeNulls(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "27": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || value.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "28": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nDouble.isNaN(value);\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "29": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(!value){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "30": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(isLenient(value)){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "31": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(isHtmlSafe(value)){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "32": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(getSerializeNulls(value)){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "33": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(Double.isLenient(value)){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "34": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(Double.isHtmlSafe(value)){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "35": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(Double.getSerializeNulls(value)){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "36": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((value || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "37": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nif((value != null)){\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n}\n  }",
          "38": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isLenient(value) || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "39": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isHtmlSafe(value) || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "40": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.getSerializeNulls(value) || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "41": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nDouble.isInfinite(value);\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "42": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.getName(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "43": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isInfinite(value) || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "44": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) && Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "45": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || isLenient(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "46": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || isHtmlSafe(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "47": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || getSerializeNulls(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "48": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) && Double.isLenient(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "49": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) && Double.isHtmlSafe(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "50": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) && Double.getSerializeNulls(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "51": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || Double.isNaN(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "52": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nif(Double.isInfinite(value)){\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n}\n  }",
          "53": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nreturn null;    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "54": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.value(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "55": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.get(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "56": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.append(value) || Double.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "57": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nout.append(Double.toString(value));\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "58": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.isNaN(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "59": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nreturn;\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "60": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.toString(value) || Double.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "61": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nif(value){\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n}\n  }",
          "62": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nif((value == null)){\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n}\n  }",
          "63": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || !Double.isLenient(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "64": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || !Double.isHtmlSafe(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "65": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || !Double.getSerializeNulls(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "66": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nif((value == null)){\nreturn null;}    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "67": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isInfinite(value) || Double.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "68": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nif(Double.isNaN(value)){\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n}\n  }",
          "69": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || (value == null))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "70": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isLenient(value)) || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "71": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isHtmlSafe(value)) || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "72": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.getSerializeNulls(value)) || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "73": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || out.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "74": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "75": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.add(value) || Double.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "76": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.debug(value) || Double.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "77": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || .isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "78": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nreturn this;    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "79": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nif((Double.isNaN(value) || Double.isInfinite(value))){\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n}\n  }",
          "80": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nout.append(Double.toString(value));\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "81": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.isInfinite())){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "82": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || .isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "83": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((((Double.isNaN(value) || Double.isInfinite(value)) || Double.isLenient(value)) || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "84": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((((Double.isNaN(value) || Double.isInfinite(value)) || Double.isHtmlSafe(value)) || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "85": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((((Double.isNaN(value) || Double.isInfinite(value)) || Double.getSerializeNulls(value)) || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "86": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.isNaN(Double.isInfinite(value)))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "87": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isNaN(value)) || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "88": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.isInfinite())){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "89": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nwriteDeferredName();\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "90": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "91": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();    if (Double.isNaN(value) || Double.isInfinite(value)) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n\nbreak;\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "92": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nbeforeValue();\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "93": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || LOG.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "94": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Double.isNaN(Double.isNaN(value)))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "95": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((((value == null) || Double.isInfinite(value)) || Double.isInfinite(value))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "96": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) == Double.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "97": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || (Double.isLenient(value) == null))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "98": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || (Double.isHtmlSafe(value) == null))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "99": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif(((Double.isNaN(value) || Double.isInfinite(value)) || (Double.getSerializeNulls(value) == null))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
          "100": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\nif((Double.isNaN(value) || Math.isInfinite(value))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }"
}