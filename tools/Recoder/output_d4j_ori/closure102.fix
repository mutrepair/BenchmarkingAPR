{
          "0": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(assertOnChange){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "1": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(CONVERT_WHILE_TO_FOR){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "2": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(MAKE_LOCAL_NAMES_UNIQUE){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "3": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(checkUserDeclarations){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "4": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(assertOnChange.MAKE_LOCAL_NAMES_UNIQUE){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "5": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(CONVERT_WHILE_TO_FOR.MAKE_LOCAL_NAMES_UNIQUE){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "6": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(MAKE_LOCAL_NAMES_UNIQUE.MAKE_LOCAL_NAMES_UNIQUE){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "7": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(checkUserDeclarations.MAKE_LOCAL_NAMES_UNIQUE){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "8": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(MAKE_LOCAL_NAMES_UNIQUE()){\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "9": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(!MAKE_LOCAL_NAMES_UNIQUE){\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "10": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nreturn;\n    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "11": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(externs){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "12": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(!assertOnChange){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "13": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(!CONVERT_WHILE_TO_FOR){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "14": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(!MAKE_LOCAL_NAMES_UNIQUE){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "15": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(!checkUserDeclarations){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "16": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((MAKE_LOCAL_NAMES_UNIQUE != null)){\n    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n}\n  }",
          "17": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nsuper.process();\n    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "18": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(NodeTraversal.MAKE_LOCAL_NAMES_UNIQUE()){\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "19": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nNodeTraversal.debug(root);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "20": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((MAKE_LOCAL_NAMES_UNIQUE == null)){\nreturn;\n}    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "21": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nNodeTraversal.traverse(root);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "22": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(NodeTraversal.assertOnChange){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "23": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(NodeTraversal.CONVERT_WHILE_TO_FOR){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "24": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(NodeTraversal.MAKE_LOCAL_NAMES_UNIQUE){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "25": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(NodeTraversal.checkUserDeclarations){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "26": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((MAKE_LOCAL_NAMES_UNIQUE == null)){\n    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n}\n  }",
          "27": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((MAKE_LOCAL_NAMES_UNIQUE != null)){\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "28": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((MAKE_LOCAL_NAMES_UNIQUE == null)){\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "29": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((root != null)){\n    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n}\n  }",
          "30": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nt.traverseRoots(externs, root);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "31": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nNodeTraversal.traverse(compiler, root, this);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "32": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((MAKE_LOCAL_NAMES_UNIQUE || externs)){\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "33": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nremoveDuplicateDeclarations(root);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "34": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nnew PropogateConstantAnnotations(compiler, assertOnChange);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "35": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((MAKE_LOCAL_NAMES_UNIQUE && (root != null))){\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "36": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nbreak;\n    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "37": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif(compiler){      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "38": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((MAKE_LOCAL_NAMES_UNIQUE != null)){\nreturn;\n}    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "39": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((MAKE_LOCAL_NAMES_UNIQUE && (externs != null))){\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "40": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((MAKE_LOCAL_NAMES_UNIQUE || (root != null))){\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "41": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((root == null)){\nreturn;\n}    if (MAKE_LOCAL_NAMES_UNIQUE) {      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "42": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((MAKE_LOCAL_NAMES_UNIQUE || (externs != null))){\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "43": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((MAKE_LOCAL_NAMES_UNIQUE && (root == null))){\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "44": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((MAKE_LOCAL_NAMES_UNIQUE || (root == null))){\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
          "45": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\nif((MAKE_LOCAL_NAMES_UNIQUE && (compiler != null))){\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }"
}