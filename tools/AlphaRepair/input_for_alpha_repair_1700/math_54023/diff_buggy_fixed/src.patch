--- /home/jun/research/dlapr/all_mutants/math-1f/mutants/54023/org/apache/commons/math3/linear/BlockRealMatrix.java	2022-10-31 19:48:00.447728335 -0500
+++ /home/jun/fastd/dlapr-mirror/validation/validation_repo/math/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java	2022-12-26 15:13:55.665665998 -0600
@@ -1546,7 +1546,7 @@
             final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
             for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
                 final int jWidth = blockWidth(jBlock);
-                final int q0 = jBlock + BLOCK_SIZE;
+                final int q0 = jBlock * BLOCK_SIZE;
                 final int qStart = FastMath.max(startColumn, q0);
                 final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
                 final double[] block = blocks[iBlock * blockColumns + jBlock];
