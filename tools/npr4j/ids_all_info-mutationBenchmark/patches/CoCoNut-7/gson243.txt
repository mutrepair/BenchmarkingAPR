typeHierarchyList.add( -1, pair ) ;
typeHierarchyList.add(0, pair ) ;
typeHierarchyList.add(1, pair ) ;
typeHierarchyList.add( 'License', pair ) ;
typeHierarchyList.add( 'The specified type handler for type ', pair ) ;
typeHierarchyList.add( '. Gson does not allow this.', pair ) ;
typeHierarchyList.add( ':', pair ) ;
typeHierarchyList.add( '}', pair ) ;
typeHierarchyList.add( ' hides the previously registered type hierarchy handler for ', pair ) ;
typeHierarchyList.add( 'Overriding the existing type handler for {0}', pair ) ;
typeHierarchyList.add( 'AS IS', pair ) ;
typeHierarchyList.add( '{mapForTypeHierarchy:{', pair ) ;
typeHierarchyList.add( ',', pair ) ;
typeHierarchyList.add( '},map:{', pair ) ;
typeHierarchyList.add( 'Attempted to modify an unmodifiable map.', pair ) ;
typeHierarchyList.add( -1, pair.size( ) ) ;
typeHierarchyList.add( -2, pair ) ;
typeHierarchyList.add( -2008, pair ) ;
typeHierarchyList.add( -1, pair ) ;
typeHierarchyList.add( -0, pair ) ;
typeHierarchyList.add(2, pair ) ;
typeHierarchyList.add(2008, pair ) ;
typeHierarchyList.add(1, pair ) ;
typeHierarchyList.add(0, pair ) ;
typeHierarchyList.add( -1, pair , false ) ;
typeHierarchyList.add( -1, pair +1) ;
typeHierarchyList.add( -1, pair -1) ;
typeHierarchyList.add( Integer.toString( pair ) ) ;
typeHierarchyList.add( i , pair ) ;
typeHierarchyList.add( -1, pairList ) ;
typeHierarchyList.add( null , pair ) ;
typeHierarchyList.set( -1, pair ) ;
typeHierarchyList.put( -1, pair ) ;
typeHierarchyList.addAll( -1, pair ) ;
typeHierarchyList.add( -1, pair , true ) ;
typeHierarchyList.add( -1, pair , null ) ;
typeHierarchyList.add((1, pair ) ) ;
typeHierarchyList.add( -1, pair ,0) ;
typeHierarchyList.add((1, pair ) ;
typeHierarchyList.add( -1, pair *1) ;
typeHierarchyList.add( -1, pair.length ) ;
typeHierarchyList.add( Integer.MAX_VALUE , pair ) ;
typeHierarchyList.add( type , pair ) ;
typeHierarchyList.add( -1, pair *2) ;
typeHierarchyList.add( -1, pair *2008) ;
typeHierarchyList.add( -1, pair *1) ;
typeHierarchyList.add( -1, pair *0) ;
typeHierarchyList.add( index , pair ) ;
typeHierarchyList.push( -1, pair ) ;
typeHierarchyList.add( new String(1, pair ) ) ;
typeHierarchyList.add(0, pair.size( ) ) ;
typeHierarchyList.add( true , pair ) ;
typeHierarchyList.add( -1, pairId ) ;
typeHierarchyList.add( false , pair ) ;
typeHierarchyList.add(0, pairList ) ;
typeHierarchyList.add( -1, pair , this ) ;
typeHierarchyList.add( -1-1, pair ) ;
typeHierarchyList.add( -1, pair ,1) ;
typeHierarchyList.add( ) ;
typeHierarchyList.add( -1, pair [0] ) ;
typeHierarchyList.add( -0, pair ) ;
typeHierarchyList.add( -1, pair , index ) ;
typeHierarchyList.remove( -1, pair ) ;
typeHierarchyList.add( i -1, pair ) ;
typeHierarchyList.add( index +1, pair ) ;
typeHierarchyList.add( new String(0, pair ) ) ;
typeHierarchyList.add( -1.0, pair ) ;
typeHierarchyList.add( new Object(1, pair ) ) ;
typeHierarchyList.add( -1, pair , -1) ;
typeHierarchyList.add( -1+1, pair ) ;
typeHierarchyList.addAll(0, pair ) ;
typeHierarchyList.add((1, pair ) , pair ) ;
typeHierarchyList.add(0, pair +1) ;
typeHierarchyList.add( i +1, pair ) ;
typeHierarchyList.add(0+1, pair ) ;
typeHierarchyList.add( -1, pairID ) ;
typeHierarchyList.add( index -1, pair ) ;
typeHierarchyList.put(0, pair ) ;
typeHierarchyList.add( position , pair ) ;
typeHierarchyList.add(0, pair -1) ;
typeHierarchyList.add( -1, pair /2) ;
typeHierarchyList.add( -1, pair /2008) ;
typeHierarchyList.add( -1, pair /1) ;
typeHierarchyList.add( -1, pair /0) ;
typeHierarchyList.add( -1, pair2) ;
typeHierarchyList.add( -1, pair2008) ;
typeHierarchyList.add( -1, pair1) ;
typeHierarchyList.add( -1, pair0) ;
typeHierarchyList.add( index ) ;
typeHierarchyList.add(0-1, pair ) ;
typeHierarchyList.add( -1, pair , 'License') ;
typeHierarchyList.add( -1, pair , 'The specified type handler for type ') ;
typeHierarchyList.add( -1, pair , '. Gson does not allow this.') ;
typeHierarchyList.add( -1, pair , ':') ;
typeHierarchyList.add( -1, pair , '}') ;
typeHierarchyList.add( -1, pair , ' hides the previously registered type hierarchy handler for ') ;
typeHierarchyList.add( -1, pair , 'Overriding the existing type handler for {0}') ;
typeHierarchyList.add( -1, pair , 'AS IS') ;
typeHierarchyList.add( -1, pair , '{mapForTypeHierarchy:{') ;
typeHierarchyList.add( -1, pair , ',') ;
