return tag.hasWhitespace( ) || parent( ).getWhitespace( ) ;
return tag( ).executeWhitespace( ) ;
return tag.existsWhitespace( ) || parent( ).getWhitespace( ) ;
return tag.executeWhitespace( ) || parent( ).getWhitespace( ) ;
return tag.toString( ).equalsIgnoreCase( '') ;
return tag.toString( ).equalsIgnoreCase( 'a[href]') ;
return tag.toString( ).equalsIgnoreCase( 'value') ;
return tag.toString( ).equalsIgnoreCase( 'textarea') ;
return tag.toString( ).equalsIgnoreCase( '</') ;
return tag.toString( ).equalsIgnoreCase( 'id') ;
return tag.toString( ).equalsIgnoreCase( 'head') ;
return tag.toString( ).equalsIgnoreCase( 'header') ;
return tag.toString( ).equalsIgnoreCase( ').text(') ;
return tag.toString( ).equalsIgnoreCase( ').append(tagName()).append(') ;
return tag.toString( ).equalsIgnoreCase( 'h1') ;
return tag.toString( ).equalsIgnoreCase( '<') ;
return tag.toString( ).equalsIgnoreCase( ') : ') ;
return tag.toString( ).equalsIgnoreCase( ' />') ;
return tag.toString( ).equalsIgnoreCase( ').attr(') ;
return tag.toString( ).equalsIgnoreCase( ', ') ;
return tag.toString( ).equalsIgnoreCase( 'class') ;
return tag.toString( ).equalsIgnoreCase( 'header round first') ;
return tag.toString( ).equalsIgnoreCase( 'gray') ;
return tag.toString( ).equalsIgnoreCase( ', StringUtils.join(classNames, ') ;
return tag.toString( ).equalsIgnoreCase( '></code> returns, ') ;
return tag.toString( ).equalsIgnoreCase( ') ? attributes.get(') ;
return tag.toString( ).equalsIgnoreCase( ' ') ;
return tag.toString( ).equalsIgnoreCase( '<code>header gray</code>') ;
return tag.toString( ).equalsIgnoreCase( 'a[href*=example.com]') ;
return tag.toString( ).equalsIgnoreCase( '\\s+') ;
return tag.toString( ).equalsIgnoreCase( 'Welcome') ;
return tag.toString( ).equalsIgnoreCase( 'header gray') ;
return tag.toString( ).equalsIgnoreCase( '>') ;
return tag( ).toLowerCase( ).containsAll( ) ;
return tag.hasWhitespace( ) || parent( ).hasWhitespace( ) ;
return tag.acceptWhitespace( ) || parent( ).getWhitespace( ) ;
return tag.queryWhitespace( ) || parent( ).getWhitespace( ) ;
return tag.toString( ).containsIgnoreCase( '') ;
return tag.toString( ).containsIgnoreCase( 'a[href]') ;
return tag.toString( ).containsIgnoreCase( 'value') ;
return tag.toString( ).containsIgnoreCase( 'textarea') ;
return tag.toString( ).containsIgnoreCase( '</') ;
return tag.toString( ).containsIgnoreCase( 'id') ;
return tag.toString( ).containsIgnoreCase( 'head') ;
return tag.toString( ).containsIgnoreCase( 'header') ;
return tag.toString( ).containsIgnoreCase( ').text(') ;
return tag.toString( ).containsIgnoreCase( ').append(tagName()).append(') ;
return tag.toString( ).containsIgnoreCase( 'h1') ;
return tag.toString( ).containsIgnoreCase( '<') ;
return tag.toString( ).containsIgnoreCase( ') : ') ;
return tag.toString( ).containsIgnoreCase( ' />') ;
return tag.toString( ).containsIgnoreCase( ').attr(') ;
return tag.toString( ).containsIgnoreCase( ', ') ;
return tag.toString( ).containsIgnoreCase( 'class') ;
return tag.toString( ).containsIgnoreCase( 'header round first') ;
return tag.toString( ).containsIgnoreCase( 'gray') ;
return tag.toString( ).containsIgnoreCase( ', StringUtils.join(classNames, ') ;
return tag.toString( ).containsIgnoreCase( '></code> returns, ') ;
return tag.toString( ).containsIgnoreCase( ') ? attributes.get(') ;
return tag.toString( ).containsIgnoreCase( ' ') ;
return tag.toString( ).containsIgnoreCase( '<code>header gray</code>') ;
return tag.toString( ).containsIgnoreCase( 'a[href*=example.com]') ;
return tag.toString( ).containsIgnoreCase( '\\s+') ;
return tag.toString( ).containsIgnoreCase( 'Welcome') ;
return tag.toString( ).containsIgnoreCase( 'header gray') ;
return tag.toString( ).containsIgnoreCase( '>') ;
return tag.insertWhitespace( ) || parent( ).getWhitespace( ) ;
return tag.isEmpty( ) || parent( ).getWhitespace( ) ;
return tag( ).toUpperCase( ).containsAll( ) ;
return tag.cleanWhitespace( ) || parent( ).getWhitespace( ) ;
return tag.andWhitespace( ) || parent( ).getWhitespace( ) ;
return tag.intersectsWhitespace( ) || parent( ).getWhitespace( ) ;
return tag( ).getWhitespace( ) ;
return tag.toString( ).equals( '') ;
return tag.toString( ).equals( 'a[href]') ;
return tag.toString( ).equals( 'value') ;
return tag.toString( ).equals( 'textarea') ;
return tag.toString( ).equals( '</') ;
return tag.toString( ).equals( 'id') ;
return tag.toString( ).equals( 'head') ;
return tag.toString( ).equals( 'header') ;
return tag.toString( ).equals( ').text(') ;
return tag.toString( ).equals( ').append(tagName()).append(') ;
return tag.toString( ).equals( 'h1') ;
return tag.toString( ).equals( '<') ;
return tag.toString( ).equals( ') : ') ;
return tag.toString( ).equals( ' />') ;
return tag.toString( ).equals( ').attr(') ;
return tag.toString( ).equals( ', ') ;
return tag.toString( ).equals( 'class') ;
return tag.toString( ).equals( 'header round first') ;
return tag.toString( ).equals( 'gray') ;
return tag.toString( ).equals( ', StringUtils.join(classNames, ') ;
return tag.toString( ).equals( '></code> returns, ') ;
return tag.toString( ).equals( ') ? attributes.get(') ;
return tag.toString( ).equals( ' ') ;
return tag.toString( ).equals( '<code>header gray</code>') ;
return tag.toString( ).equals( 'a[href*=example.com]') ;
return tag.toString( ).equals( '\\s+') ;
return tag.toString( ).equals( 'Welcome') ;
