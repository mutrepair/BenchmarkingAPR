BroadcasterInstant %( double ) offset ) ;
BroadcasterInstant %( float ) offset ) ;
assertEquals(2, offset ) ;
assertEquals(1970, offset ) ;
assertEquals(2001, offset ) ;
assertEquals(0, offset ) ;
assertEquals(4, offset ) ;
assertEquals(7, offset ) ;
assertEquals(2013, offset ) ;
assertEquals(00, offset ) ;
assertEquals(1079258847191166848, offset ) ;
assertEquals(12, offset ) ;
assertEquals(11, offset ) ;
assertEquals(1, offset ) ;
assertEquals(326565, offset ) ;
assertEquals(485345310999208286, offset ) ;
assertEquals(3968986277775529794, offset ) ;
assertEquals(01, offset ) ;
assertEquals(0, offset ) ;
BroadcasterInstant % offset +1) ;
subtrahendInstant % offset +1) ;
subtrahendInstant % offset + offset ) ;
triangleInstant % offset +1) ;
BroadcasterInstant % offset + offset ) ;
waterInstant % offset +1) ;
workersInstant % offset + offset ) ;
triangleInstant % offset + offset ) ;
BroadcasterInstant % offset + 'License') ;
BroadcasterInstant % offset + ' + getBase() + ') ;
BroadcasterInstant % offset + 'AS IS') ;
BroadcasterInstant % offset + 'Adding time zone offset caused overflow') ;
BroadcasterInstant % offset + 'UTC chronology must not be null') ;
BroadcasterInstant % offset + 'DateTimeZone must not be null') ;
BroadcasterInstant % offset + 'ZonedChronology[') ;
BroadcasterInstant % offset + ', ') ;
BroadcasterInstant % offset + ']') ;
BroadcasterInstant % offset + 'unused') ;
BroadcasterInstant % offset + 'Subtracting time zone offset caused overflow') ;
BroadcasterInstant % offset + 'Must supply a chronology') ;
workersInstant % offset +1) ;
assertEquals( - offset ) ;
waterInstant % offset + offset ) ;
queInstant % offset + offset ) ;
subtrahendInstant % offset + 'License') ;
subtrahendInstant % offset + ' + getBase() + ') ;
subtrahendInstant % offset + 'AS IS') ;
subtrahendInstant % offset + 'Adding time zone offset caused overflow') ;
subtrahendInstant % offset + 'UTC chronology must not be null') ;
subtrahendInstant % offset + 'DateTimeZone must not be null') ;
subtrahendInstant % offset + 'ZonedChronology[') ;
subtrahendInstant % offset + ', ') ;
subtrahendInstant % offset + ']') ;
subtrahendInstant % offset + 'unused') ;
subtrahendInstant % offset + 'Subtracting time zone offset caused overflow') ;
subtrahendInstant % offset + 'Must supply a chronology') ;
cnameInstant % offset +1) ;
avsInstant % offset +1) ;
BroadcasterInstant % offset +2) ;
BroadcasterInstant % offset +1970) ;
BroadcasterInstant % offset +2001) ;
BroadcasterInstant % offset +0) ;
BroadcasterInstant % offset +4) ;
BroadcasterInstant % offset +7) ;
BroadcasterInstant % offset +2013) ;
BroadcasterInstant % offset +00) ;
BroadcasterInstant % offset +1079258847191166848) ;
BroadcasterInstant % offset +12) ;
BroadcasterInstant % offset +11) ;
BroadcasterInstant % offset +1) ;
BroadcasterInstant % offset +326565) ;
BroadcasterInstant % offset +485345310999208286) ;
BroadcasterInstant % offset +3968986277775529794) ;
BroadcasterInstant % offset +01) ;
queInstant % offset +1) ;
cnameInstant % offset + offset ) ;
avsInstant % offset + offset ) ;
gradInstant % offset +1) ;
structuresInstant % offset + offset ) ;
structuresInstant % offset +1) ;
subtrahendInstant % offset +2) ;
subtrahendInstant % offset +1970) ;
subtrahendInstant % offset +2001) ;
subtrahendInstant % offset +0) ;
subtrahendInstant % offset +4) ;
subtrahendInstant % offset +7) ;
subtrahendInstant % offset +2013) ;
subtrahendInstant % offset +00) ;
subtrahendInstant % offset +1079258847191166848) ;
subtrahendInstant % offset +12) ;
subtrahendInstant % offset +11) ;
subtrahendInstant % offset +1) ;
subtrahendInstant % offset +326565) ;
subtrahendInstant % offset +485345310999208286) ;
subtrahendInstant % offset +3968986277775529794) ;
subtrahendInstant % offset +01) ;
BristleInstant % offset + offset ) ;
BroadcasterInstant % offset.getValue( ) ;
triangleInstant % offset + 'License') ;
triangleInstant % offset + ' + getBase() + ') ;
triangleInstant % offset + 'AS IS') ;
