sb.append(( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'optPrefix'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '   '+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '\n'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( ','+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'usage: '+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( ' <'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'License'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'descPadding'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( ') && (c != '+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '>'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'leftPadding'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'newLine'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '['+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( ').append(option.getArgName()).append('+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( ' '+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'AS IS'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( ']'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '-'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'argName'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'line.separator'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'syntaxPrefix'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'arg'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'cmdLineSyntax not provided'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( ' | '+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '--'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '\r'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '\t'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'longOptPrefix'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'width'+( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( !( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append(2, pos.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append(2001, pos.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append(0, pos.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append(2004, pos.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append(3, pos.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append(74, pos.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append(1, pos.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append(8, pos.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append(1999, pos.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( 'optPrefix',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '   ',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '\n',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( ',',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'usage: ',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( ' <',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'License',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'descPadding',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( ') && (c != ',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '>',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'leftPadding',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'newLine',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '[',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( ').append(option.getArgName()).append(',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( ' ',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'AS IS',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( ']',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '-',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'argName',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'line.separator',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'syntaxPrefix',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'arg',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'cmdLineSyntax not provided',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( ' | ',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '--',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '\r',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( '\t',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'longOptPrefix',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( 'width',( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( component( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( escape( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append( valid( text.substring(1, pos ) ) ).append( defaultNewLine ) ;
sb.append(( text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( final text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( 'optPrefix'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( '   '+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( '\n'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( ','+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( 'usage: '+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( ' <'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( 'License'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( 'descPadding'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( ') && (c != '+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( '>'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( 'leftPadding'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( 'newLine'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( '['+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( ').append(option.getArgName()).append('+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( ' '+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( 'AS IS'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( ']'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( '-'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( 'argName'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( 'line.separator'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( 'syntaxPrefix'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( 'arg'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( 'cmdLineSyntax not provided'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( ' | '+ text.substring(1, pos ) ).append( defaultNewLine ) ;
sb.append( '--'+ text.substring(1, pos ) ).append( defaultNewLine ) ;
