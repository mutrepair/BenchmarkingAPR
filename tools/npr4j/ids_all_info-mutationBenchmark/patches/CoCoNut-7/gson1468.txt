builder.append( buffer , start , start ) ;
builder.append( buffer , start , pos ) ;
builder.append( buffer , start , start , start ) ;
builder.append( buffer , start , end ) ;
builder.append( buffer , start , start , end ) ;
builder.append( buffer , end , start ) ;
builder.append( buffer , start , pos / start ) ;
builder.append( buffer , start ) ;
builder.append( buffer , start , start / start ) ;
builder.append( buffer , start , start , pos ) ;
builder.append( buffer , start , start + start ) ;
builder.append( buffer , start , pos , start ) ;
builder.append( buffer , start , start , start , start ) ;
builder.append( buffer , start , end , start ) ;
builder.append( buffer , end ) ;
builder.append( buffer , start , pos + start ) ;
builder.append( buffer +1, start , pos / start ) ;
builder.append( buffer , start , end / start ) ;
builder.append( buffer , end , start , start ) ;
builder.append( buffer , start , pos , end ) ;
builder.append( buffer , start + start , start ) ;
builder.append( buffer + '', start , pos / start ) ;
builder.append( buffer + '/', start , pos / start ) ;
builder.append( buffer + 'jesse', start , pos / start ) ;
builder.append( buffer + 'Expected a name but was ', start , pos / start ) ;
builder.append( buffer + '=', start , pos / start ) ;
builder.append( buffer + 'Use JsonReader.setLenient(true) to accept malformed JSON', start , pos / start ) ;
builder.append( buffer + '\f', start , pos / start ) ;
builder.append( buffer + 'user', start , pos / start ) ;
builder.append( buffer + 'json_newb', start , pos / start ) ;
builder.append( buffer + 'Expected null but was ', start , pos / start ) ;
builder.append( buffer + 'License', start , pos / start ) ;
builder.append( buffer + 'Expected an int but was ', start , pos / start ) ;
builder.append( buffer + '*', start , pos / start ) ;
builder.append( buffer + 'How do I read a JSON stream in Java?', start , pos / start ) ;
builder.append( buffer + 'Expected name', start , pos / start ) ;
builder.append( buffer + 'Expected EOF', start , pos / start ) ;
builder.append( buffer + 'Unterminated array', start , pos / start ) ;
builder.append( buffer + 'single quoted', start , pos / start ) ;
builder.append( buffer + ') || value.equalsIgnoreCase(', start , pos / start ) ;
builder.append( buffer + ' ', start , pos / start ) ;
builder.append( buffer + 'null', start , pos / start ) ;
builder.append( buffer + 'u', start , pos / start ) ;
builder.append( buffer + 'End of input', start , pos / start ) ;
builder.append( buffer + '\r', start , pos / start ) ;
builder.append( buffer + '\t', start , pos / start ) ;
builder.append( buffer + 'Not a boolean: ', start , pos / start ) ;
builder.append( buffer + 'Unterminated comment', start , pos / start ) ;
builder.append( buffer + 'n', start , pos / start ) ;
builder.append( buffer + ' || c == ', start , pos / start ) ;
builder.append( buffer + 'name', start , pos / start ) ;
builder.append( buffer + 'text', start , pos / start ) ;
builder.append( buffer + 'Expected ', start , pos / start ) ;
builder.append( buffer + ':', start , pos / start ) ;
builder.append( buffer + 'UTF-8', start , pos / start ) ;
builder.append( buffer + '[', start , pos / start ) ;
builder.append( buffer + '#', start , pos / start ) ;
builder.append( buffer + 'JsonReader is closed', start , pos / start ) ;
builder.append( buffer + '\r\n', start , pos / start ) ;
builder.append( buffer + ',]', start , pos / start ) ;
builder.append( buffer + '{', start , pos / start ) ;
builder.append( buffer + 'followers_count', start , pos / start ) ;
builder.append( buffer + 'f', start , pos / start ) ;
builder.append( buffer + ' but was ', start , pos / start ) ;
builder.append( buffer + ';', start , pos / start ) ;
builder.append( buffer + ' or ', start , pos / start ) ;
builder.append( buffer + 'nonexecuteprefix', start , pos / start ) ;
builder.append( buffer + '\n', start , pos / start ) ;
builder.append( buffer + ',', start , pos / start ) ;
builder.append( buffer + ")]}'\n", start , pos / start ) ;
builder.append( buffer + "Expected JSON document to start with '[' or '{'", start , pos / start ) ;
builder.append( buffer + '=>', start , pos / start ) ;
builder.append( buffer + 'Expected a boolean but was ', start , pos / start ) ;
builder.append( buffer + 'Expected a long but was ', start , pos / start ) ;
builder.append( buffer + '@json_newb just use JsonReader!', start , pos / start ) ;
builder.append( buffer + 'u000A', start , pos / start ) ;
builder.append( buffer + 'Expected literal value', start , pos / start ) ;
builder.append( buffer + 'AS IS', start , pos / start ) ;
builder.append( buffer + 'http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery', start , pos / start ) ;
builder.append( buffer + 'http://www.ietf.org/rfc/rfc4627.txt', start , pos / start ) ;
builder.append( buffer + '#nonexecuteprefix', start , pos / start ) ;
builder.append( buffer + 'b', start , pos / start ) ;
builder.append( buffer + ' + expected + ', start , pos / start ) ;
builder.append( buffer + '\', start , pos / start ) ;
builder.append( buffer + 'r', start , pos / start ) ;
builder.append( buffer + 'JSON forbids octal prefixes: ', start , pos / start ) ;
builder.append( buffer + 'false', start , pos / start ) ;
builder.append( buffer + '\\', start , pos / start ) ;
builder.append( buffer + 'id', start , pos / start ) ;
builder.append( buffer + ': ', start , pos / start ) ;
builder.append( buffer + 'Expected a double but was ', start , pos / start ) ;
builder.append( buffer + 'Expected a string but was ', start , pos / start ) ;
builder.append( buffer + 'true', start , pos / start ) ;
builder.append( buffer + 'Unterminated escape sequence', start , pos / start ) ;
builder.append( buffer + 'geo', start , pos / start ) ;
builder.append( buffer + '}', start , pos / start ) ;
builder.append( buffer + ' near ', start , pos / start ) ;
builder.append( buffer + "Expected ':'", start , pos / start ) ;
builder.append( buffer + '\b', start , pos / start ) ;
builder.append( buffer + '"', start , pos / start ) ;
