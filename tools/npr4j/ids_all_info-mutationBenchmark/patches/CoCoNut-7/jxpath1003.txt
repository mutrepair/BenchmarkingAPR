compareNodePointers( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeAccordingly( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeAccordingly( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeAccordingly( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSlb( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSlb( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSlb( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeKnow( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeKnow( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeKnow( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeAlpha( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeAlpha( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeAlpha( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth1--1) ;
compareNodeSpans( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSpans( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSpans( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeEnding( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeEnding( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeEnding( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth2-1, p2.parent , depth2--1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth0-1, p0.parent , depth0--1) ;
compareNodeDarts( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeDarts( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeDarts( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeThrough( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeThrough( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeThrough( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodeConcat( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeConcat( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeConcat( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeHoldings( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeHoldings( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeHoldings( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeFulkerson( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeFulkerson( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeFulkerson( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeDiscard( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeDiscard( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeDiscard( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeDiscriminator( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeDiscriminator( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeDiscriminator( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeDriving( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeDriving( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeDriving( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth2--1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth0--1) ;
compareNodeconfigurable( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeconfigurable( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeconfigurable( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeAccordingly( p1.parent , depth1-1, p2.parent , depth1--1) ;
compareNodeAccordingly( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeAccordingly( p1.parent , depth1-1, p0.parent , depth1--1) ;
compareNodepunkte( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodepunkte( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodepunkte( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSubdivision( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSubdivision( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSubdivision( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , p2.parent ) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , p1.parent ) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , p0.parent ) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth2--0) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--0) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodeAccordingly( p1.parent , depth2-1, p2.parent , depth2--1) ;
compareNodeAccordingly( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeAccordingly( p1.parent , depth0-1, p0.parent , depth0--1) ;
compareNodeRnd( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeRnd( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeRnd( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeComp( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeComp( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeComp( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeMovement( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeMovement( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeMovement( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodetombstone( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodetombstone( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodetombstone( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeDestroyed( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeDestroyed( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeDestroyed( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSheild( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSheild( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSheild( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePerceptions( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePerceptions( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePerceptions( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeAccordingly( p1.parent , depth1-1, p2.parent , depth2--2) ;
