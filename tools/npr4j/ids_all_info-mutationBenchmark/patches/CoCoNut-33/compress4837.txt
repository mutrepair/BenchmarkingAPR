long value =( bytes [ offset + BYTE_2] << BYTE_2_SHIFT ) ^ BYTE_2_MASK ;
long value =( bytes [ offset + BYTE_0] << BYTE_0_SHIFT ) ^ BYTE_0_MASK ;
long value =( bytes [ offset + BYTE_4] << BYTE_4_SHIFT ) ^ BYTE_4_MASK ;
long value =( bytes [ offset + BYTE_24] << BYTE_24_SHIFT ) ^ BYTE_24_MASK ;
long value =( bytes [ offset + BYTE_00] << BYTE_00_SHIFT ) ^ BYTE_00_MASK ;
long value =( bytes [ offset + BYTE_16] << BYTE_16_SHIFT ) ^ BYTE_16_MASK ;
long value =( bytes [ offset + BYTE_3] << BYTE_3_SHIFT ) ^ BYTE_3_MASK ;
long value =( bytes [ offset + BYTE_0000] << BYTE_0000_SHIFT ) ^ BYTE_0000_MASK ;
long value =( bytes [ offset + BYTE_1] << BYTE_1_SHIFT ) ^ BYTE_1_MASK ;
long value =( bytes [ offset + BYTE_8] << BYTE_8_SHIFT ) ^ BYTE_8_MASK ;
long value =( bytes [ offset + BYTE_000000] << BYTE_000000_SHIFT ) ^ BYTE_000000_MASK ;
long value =( bytes [ offset + BYTE_2] << BYTE_2_SHIFT ) ^ BYTE_2_POS ;
long value =( bytes [ offset + BYTE_0] << BYTE_0_SHIFT ) ^ BYTE_0_POS ;
long value =( bytes [ offset + BYTE_4] << BYTE_4_SHIFT ) ^ BYTE_4_POS ;
long value =( bytes [ offset + BYTE_24] << BYTE_24_SHIFT ) ^ BYTE_24_POS ;
long value =( bytes [ offset + BYTE_00] << BYTE_00_SHIFT ) ^ BYTE_00_POS ;
long value =( bytes [ offset + BYTE_16] << BYTE_16_SHIFT ) ^ BYTE_16_POS ;
long value =( bytes [ offset + BYTE_3] << BYTE_3_SHIFT ) ^ BYTE_3_POS ;
long value =( bytes [ offset + BYTE_0000] << BYTE_0000_SHIFT ) ^ BYTE_0000_POS ;
long value =( bytes [ offset + BYTE_1] << BYTE_1_SHIFT ) ^ BYTE_1_POS ;
long value =( bytes [ offset + BYTE_8] << BYTE_8_SHIFT ) ^ BYTE_8_POS ;
long value =( bytes [ offset + BYTE_000000] << BYTE_000000_SHIFT ) ^ BYTE_000000_POS ;
long value =( bytes [ offset ] [ offset + BYTE_2_SHIFT_SHIFT ) ^ BYTE_2_MASK ;
long value =( bytes [ offset ] [ offset + BYTE_0_SHIFT_SHIFT ) ^ BYTE_0_MASK ;
long value =( bytes [ offset ] [ offset + BYTE_4_SHIFT_SHIFT ) ^ BYTE_4_MASK ;
long value =( bytes [ offset ] [ offset + BYTE_24_SHIFT_SHIFT ) ^ BYTE_24_MASK ;
long value =( bytes [ offset ] [ offset + BYTE_00_SHIFT_SHIFT ) ^ BYTE_00_MASK ;
long value =( bytes [ offset ] [ offset + BYTE_16_SHIFT_SHIFT ) ^ BYTE_16_MASK ;
long value =( bytes [ offset ] [ offset + BYTE_3_SHIFT_SHIFT ) ^ BYTE_3_MASK ;
long value =( bytes [ offset ] [ offset + BYTE_0000_SHIFT_SHIFT ) ^ BYTE_0000_MASK ;
long value =( bytes [ offset ] [ offset + BYTE_1_SHIFT_SHIFT ) ^ BYTE_1_MASK ;
long value =( bytes [ offset ] [ offset + BYTE_8_SHIFT_SHIFT ) ^ BYTE_8_MASK ;
long value =( bytes [ offset ] [ offset + BYTE_000000_SHIFT_SHIFT ) ^ BYTE_000000_MASK ;
long value =( bytes [ offset + BYTE_2) << BYTE_2_SHIFT ) ^ BYTE_2_MASK ;
long value =( bytes [ offset + BYTE_0) << BYTE_0_SHIFT ) ^ BYTE_0_MASK ;
long value =( bytes [ offset + BYTE_4) << BYTE_4_SHIFT ) ^ BYTE_4_MASK ;
long value =( bytes [ offset + BYTE_24) << BYTE_24_SHIFT ) ^ BYTE_24_MASK ;
long value =( bytes [ offset + BYTE_00) << BYTE_00_SHIFT ) ^ BYTE_00_MASK ;
long value =( bytes [ offset + BYTE_16) << BYTE_16_SHIFT ) ^ BYTE_16_MASK ;
long value =( bytes [ offset + BYTE_3) << BYTE_3_SHIFT ) ^ BYTE_3_MASK ;
long value =( bytes [ offset + BYTE_0000) << BYTE_0000_SHIFT ) ^ BYTE_0000_MASK ;
long value =( bytes [ offset + BYTE_1) << BYTE_1_SHIFT ) ^ BYTE_1_MASK ;
long value =( bytes [ offset + BYTE_8) << BYTE_8_SHIFT ) ^ BYTE_8_MASK ;
long value =( bytes [ offset + BYTE_000000) << BYTE_000000_SHIFT ) ^ BYTE_000000_MASK ;
long value =( bytes [ offset + BYTE_2] << BYTE_2_SHIFT ) ^ BYTE_2_MASK ) ;
long value =( bytes [ offset + BYTE_0] << BYTE_0_SHIFT ) ^ BYTE_0_MASK ) ;
long value =( bytes [ offset + BYTE_4] << BYTE_4_SHIFT ) ^ BYTE_4_MASK ) ;
long value =( bytes [ offset + BYTE_24] << BYTE_24_SHIFT ) ^ BYTE_24_MASK ) ;
long value =( bytes [ offset + BYTE_00] << BYTE_00_SHIFT ) ^ BYTE_00_MASK ) ;
long value =( bytes [ offset + BYTE_16] << BYTE_16_SHIFT ) ^ BYTE_16_MASK ) ;
long value =( bytes [ offset + BYTE_3] << BYTE_3_SHIFT ) ^ BYTE_3_MASK ) ;
long value =( bytes [ offset + BYTE_0000] << BYTE_0000_SHIFT ) ^ BYTE_0000_MASK ) ;
long value =( bytes [ offset + BYTE_1] << BYTE_1_SHIFT ) ^ BYTE_1_MASK ) ;
long value =( bytes [ offset + BYTE_8] << BYTE_8_SHIFT ) ^ BYTE_8_MASK ) ;
long value =( bytes [ offset + BYTE_000000] << BYTE_000000_SHIFT ) ^ BYTE_000000_MASK ) ;
long value =( bytes [ offset + BYTE_2_MASK - BYTE_2_SHIFT ) ^ BYTE_2_MASK ;
long value =( bytes [ offset + BYTE_0_MASK - BYTE_0_SHIFT ) ^ BYTE_0_MASK ;
long value =( bytes [ offset + BYTE_4_MASK - BYTE_4_SHIFT ) ^ BYTE_4_MASK ;
long value =( bytes [ offset + BYTE_24_MASK - BYTE_24_SHIFT ) ^ BYTE_24_MASK ;
long value =( bytes [ offset + BYTE_00_MASK - BYTE_00_SHIFT ) ^ BYTE_00_MASK ;
long value =( bytes [ offset + BYTE_16_MASK - BYTE_16_SHIFT ) ^ BYTE_16_MASK ;
long value =( bytes [ offset + BYTE_3_MASK - BYTE_3_SHIFT ) ^ BYTE_3_MASK ;
long value =( bytes [ offset + BYTE_0000_MASK - BYTE_0000_SHIFT ) ^ BYTE_0000_MASK ;
long value =( bytes [ offset + BYTE_1_MASK - BYTE_1_SHIFT ) ^ BYTE_1_MASK ;
long value =( bytes [ offset + BYTE_8_MASK - BYTE_8_SHIFT ) ^ BYTE_8_MASK ;
long value =( bytes [ offset + BYTE_000000_MASK - BYTE_000000_SHIFT ) ^ BYTE_000000_MASK ;
long value =( bytes [ offset + BYTE_2] & BYTE_2_SHIFT ) ^ BYTE_2_MASK ;
long value =( bytes [ offset + BYTE_0] & BYTE_0_SHIFT ) ^ BYTE_0_MASK ;
long value =( bytes [ offset + BYTE_4] & BYTE_4_SHIFT ) ^ BYTE_4_MASK ;
long value =( bytes [ offset + BYTE_24] & BYTE_24_SHIFT ) ^ BYTE_24_MASK ;
long value =( bytes [ offset + BYTE_00] & BYTE_00_SHIFT ) ^ BYTE_00_MASK ;
long value =( bytes [ offset + BYTE_16] & BYTE_16_SHIFT ) ^ BYTE_16_MASK ;
long value =( bytes [ offset + BYTE_3] & BYTE_3_SHIFT ) ^ BYTE_3_MASK ;
long value =( bytes [ offset + BYTE_0000] & BYTE_0000_SHIFT ) ^ BYTE_0000_MASK ;
long value =( bytes [ offset + BYTE_1] & BYTE_1_SHIFT ) ^ BYTE_1_MASK ;
long value =( bytes [ offset + BYTE_8] & BYTE_8_SHIFT ) ^ BYTE_8_MASK ;
long value =( bytes [ offset + BYTE_000000] & BYTE_000000_SHIFT ) ^ BYTE_000000_MASK ;
long value =( bytes [ offset + BYTE_SIZE ] << BYTE_2_SHIFT ) ^ BYTE_2_MASK ;
long value =( bytes [ offset + BYTE_SIZE ] << BYTE_0_SHIFT ) ^ BYTE_0_MASK ;
long value =( bytes [ offset + BYTE_SIZE ] << BYTE_4_SHIFT ) ^ BYTE_4_MASK ;
long value =( bytes [ offset + BYTE_SIZE ] << BYTE_24_SHIFT ) ^ BYTE_24_MASK ;
long value =( bytes [ offset + BYTE_SIZE ] << BYTE_00_SHIFT ) ^ BYTE_00_MASK ;
long value =( bytes [ offset + BYTE_SIZE ] << BYTE_16_SHIFT ) ^ BYTE_16_MASK ;
long value =( bytes [ offset + BYTE_SIZE ] << BYTE_3_SHIFT ) ^ BYTE_3_MASK ;
long value =( bytes [ offset + BYTE_SIZE ] << BYTE_0000_SHIFT ) ^ BYTE_0000_MASK ;
long value =( bytes [ offset + BYTE_SIZE ] << BYTE_1_SHIFT ) ^ BYTE_1_MASK ;
long value =( bytes [ offset + BYTE_SIZE ] << BYTE_8_SHIFT ) ^ BYTE_8_MASK ;
long value =( bytes [ offset + BYTE_SIZE ] << BYTE_000000_SHIFT ) ^ BYTE_000000_MASK ;
long value = bytes [ offset + BYTE_2] << BYTE_2_SHIFT ) ^ BYTE_2_MASK ;
long value = bytes [ offset + BYTE_0] << BYTE_0_SHIFT ) ^ BYTE_0_MASK ;
long value = bytes [ offset + BYTE_4] << BYTE_4_SHIFT ) ^ BYTE_4_MASK ;
long value = bytes [ offset + BYTE_24] << BYTE_24_SHIFT ) ^ BYTE_24_MASK ;
long value = bytes [ offset + BYTE_00] << BYTE_00_SHIFT ) ^ BYTE_00_MASK ;
long value = bytes [ offset + BYTE_16] << BYTE_16_SHIFT ) ^ BYTE_16_MASK ;
long value = bytes [ offset + BYTE_3] << BYTE_3_SHIFT ) ^ BYTE_3_MASK ;
long value = bytes [ offset + BYTE_0000] << BYTE_0000_SHIFT ) ^ BYTE_0000_MASK ;
long value = bytes [ offset + BYTE_1] << BYTE_1_SHIFT ) ^ BYTE_1_MASK ;
long value = bytes [ offset + BYTE_8] << BYTE_8_SHIFT ) ^ BYTE_8_MASK ;
long value = bytes [ offset + BYTE_000000] << BYTE_000000_SHIFT ) ^ BYTE_000000_MASK ;
long value =( Buffer [ offset + BYTE_2] << BYTE_2_SHIFT ) ^ BYTE_2_MASK ;
