return this.isEmpty( ) ;
return true ;
return this.isEmpty( true ) ;
return isEmpty( ) ;
return new ArrayList < >( ) ;
return this.isConnected( ) ;
return this.hashCode( ) ;
return this.isEmpty( ) ) ;
return this.isPresent( ) ;
return this.getValue( ) ;
return this.isEmpty( false ) ;
return this.isEnabled( ) ;
return super.isEmpty( ) ;
return isEmpty( true ) ;
return this.isEnabled( true ) ;
return Objects.equals( 'index (') ;
return Objects.equals( '" + size + "') ;
return Objects.equals( ') is the size of the list.') ;
return Objects.equals( ') less than zero.') ;
return Objects.equals( "'") ;
return Objects.equals( ')') ;
return Objects.equals( ') > toIndex(') ;
return Objects.equals( 'License') ;
return Objects.equals( '[]') ;
return Objects.equals( 'fromIndex = ') ;
return Objects.equals( 's contained in <code>coll</code>. If it') ;
return Objects.equals( 'list (') ;
return Objects.equals( "Index '") ;
return Objects.equals( ', ') ;
return Objects.equals( 'Already at start of list.') ;
return Objects.equals( "' out of bounds for size '") ;
return Objects.equals( '[') ;
return Objects.equals( 's not contained, it') ;
return Objects.equals( ' + size + ') ;
return Objects.equals( 'AS IS') ;
return Objects.equals( 's contained, it') ;
return Objects.equals( "Couldn't get the node: ") ;
return Objects.equals( '(this Collection)') ;
return Objects.equals( ') greater than the size of the ') ;
return Objects.equals( ' + fromIndex + ') ;
return Objects.equals( ' + nextIndex + ') ;
return Objects.equals( 'toIndex = ') ;
return Objects.equals( '.') ;
return Objects.equals( ' + index + ') ;
return Objects.equals( 'unchecked') ;
return Objects.equals( ' out of bounds for size ') ;
return Objects.equals( 'No element at index ') ;
return Objects.equals( '" + index + "') ;
return Objects.equals( 'fromIndex(') ;
return Objects.equals( ').') ;
return Objects.equals( ']') ;
return Objects.equals( ' + toIndex + ') ;
return this.isVisible( true ) ;
return this.isEnabled( false ) ;
return this.isActive( ) ;
return false ;
return Utils.isEmpty( ) ;
return this.isVisible( false ) ;
return this.isClosed( ) ;
return this.toString( ) ;
return isConnected( ) ;
return this.getString( ) ;
return this.isPlaying( ) ;
return this.isFirst( ) ;
return this.isVisible( ) ;
return this.getId( ) ;
return this.getDefault( ) ;
return this.getName( ) ;
return this.isFinished( ) ;
 return( int )( true ) ;
return this.isNull( ) ;
return ! isNotEmpty( ) ;
 return(( isEmpty( ) ;
return Boolean.parseInt( true ) ;
return this.isNull( true ) ;
return isVisible( true ) ;
return ! Objects.equals( 'index (') ;
return ! Objects.equals( '" + size + "') ;
return ! Objects.equals( ') is the size of the list.') ;
return ! Objects.equals( ') less than zero.') ;
return ! Objects.equals( "'") ;
return ! Objects.equals( ')') ;
return ! Objects.equals( ') > toIndex(') ;
return ! Objects.equals( 'License') ;
return ! Objects.equals( '[]') ;
return ! Objects.equals( 'fromIndex = ') ;
return ! Objects.equals( 's contained in <code>coll</code>. If it') ;
return ! Objects.equals( 'list (') ;
return ! Objects.equals( "Index '") ;
return ! Objects.equals( ', ') ;
return ! Objects.equals( 'Already at start of list.') ;
return ! Objects.equals( "' out of bounds for size '") ;
return ! Objects.equals( '[') ;
return ! Objects.equals( 's not contained, it') ;
return ! Objects.equals( ' + size + ') ;
return ! Objects.equals( 'AS IS') ;
return ! Objects.equals( 's contained, it') ;
return ! Objects.equals( "Couldn't get the node: ") ;
return ! Objects.equals( '(this Collection)') ;
return ! Objects.equals( ') greater than the size of the ') ;
