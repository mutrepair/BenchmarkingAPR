return false ;
return new ArrayList < String >( ) ;
return true ;
return new ArrayList < >( false ) ;
return new ArrayList < >( ) ;
return new ArrayList < >( true ) ;
return Boolean.parseInt( '') ;
return Boolean.parseInt( '/') ;
return Boolean.parseInt( ' in a comment') ;
return Boolean.parseInt( '\f') ;
return Boolean.parseInt( 'StreamBasedParserBase') ;
return Boolean.parseInt( 'ALLOW_COMMENTS') ;
return Boolean.parseInt( '+b64variant+') ;
return Boolean.parseInt( '+b64variant.getPaddingChar()+') ;
return Boolean.parseInt( '): ') ;
return Boolean.parseInt( ' in character escape sequence') ;
return Boolean.parseInt( '*') ;
return Boolean.parseInt( 'Exponent indicator not followed by a digit') ;
return Boolean.parseInt( 'Failed to decode VALUE_STRING as base64 (') ;
return Boolean.parseInt( 'null') ;
return Boolean.parseInt( '\r') ;
return Boolean.parseInt( '\t') ;
return Boolean.parseInt( '"+b64variant.getPaddingChar()+"') ;
return Boolean.parseInt( 'n') ;
return Boolean.parseInt( 'Unexpected end-of-input within/between ') ;
return Boolean.parseInt( "expected padding character '") ;
return Boolean.parseInt( "'") ;
return Boolean.parseInt( ' || c == ') ;
return Boolean.parseInt( 'NaN') ;
return Boolean.parseInt( 'Utf8NumericParser') ;
return Boolean.parseInt( 'name') ;
return Boolean.parseInt( 'Infinity') ;
return Boolean.parseInt( '+Infinity') ;
return Boolean.parseInt( "Unrecognized token '") ;
return Boolean.parseInt( ' in field name') ;
return Boolean.parseInt( 'I') ;
return Boolean.parseInt( '-') ;
return Boolean.parseInt( '+_parsingContext.getTypeDesc()+') ;
return Boolean.parseInt( 'N') ;
return Boolean.parseInt( '.') ;
return Boolean.parseInt( 'E') ;
return Boolean.parseInt( '-Infinity') ;
return Boolean.parseInt( 'expected digit (0-9) to follow minus sign, for valid numeric value') ;
return Boolean.parseInt( '_nextAfterName') ;
return Boolean.parseInt( 'Leading zeroes not allowed') ;
return Boolean.parseInt( "Non-standard token '") ;
return Boolean.parseInt( '+') ;
return Boolean.parseInt( ' or ') ;
return Boolean.parseInt( ') not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary') ;
return Boolean.parseInt( 'other') ;
return Boolean.parseInt( '\n') ;
return Boolean.parseInt( 'slow') ;
return Boolean.parseInt( '+sb.toString()+') ;
return Boolean.parseInt( 'string value') ;
return Boolean.parseInt( '"+sb.toString()+"') ;
return Boolean.parseInt( '+_inputBuffer.length+') ;
return Boolean.parseInt( '\"') ;
return Boolean.parseInt( "Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
return Boolean.parseInt( "was expecting either '*' or '/' for a comment") ;
return Boolean.parseInt( "'null', 'true', 'false' or NaN") ;
return Boolean.parseInt( ' bytes') ;
return Boolean.parseInt( 'own') ;
return Boolean.parseInt( "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
return Boolean.parseInt( 'expected a value') ;
return Boolean.parseInt( ": was expecting closing '\") ;
return Boolean.parseInt( 'was expecting double-quote to start field name') ;
return Boolean.parseInt( ' entries') ;
return Boolean.parseInt( "' for name") ;
return Boolean.parseInt( '\') ;
return Boolean.parseInt( '+match+') ;
return Boolean.parseInt( ' || ch == ') ;
return Boolean.parseInt( 'Invalid UTF-8 middle byte 0x') ;
return Boolean.parseInt( '"+((char) c), ') ;
return Boolean.parseInt( 'resource') ;
return Boolean.parseInt( "': was expecting ") ;
return Boolean.parseInt( ": was expecting closing '\'' for name") ;
return Boolean.parseInt( 'expected a hex-digit for character escape sequence') ;
return Boolean.parseInt( 'false') ;
return Boolean.parseInt( '+INF') ;
return Boolean.parseInt( 'InputStream.read() returned 0 characters when trying to read ') ;
return Boolean.parseInt( 'missing') ;
return Boolean.parseInt( 'was expecting comma to separate ') ;
return Boolean.parseInt( "Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
return Boolean.parseInt( 'Invalid UTF-8 start byte 0x') ;
return Boolean.parseInt( 'expect-value') ;
return Boolean.parseInt( '+amount+') ;
return Boolean.parseInt( 'true') ;
return Boolean.parseInt( 'e') ;
return Boolean.parseInt( 'was expecting a colon to separate field name and value') ;
return Boolean.parseInt( 'Decimal point not followed by a digit') ;
return Boolean.parseInt( 'real') ;
return Boolean.parseInt( ', ') ;
return Boolean.parseInt( '-INF') ;
return Boolean.parseInt( "('true', 'false' or 'null')") ;
return Boolean.parseInt( '+_currToken+') ;
return Boolean.parseInt( '}') ;
return Boolean.parseInt( ' :') ;
return Boolean.parseInt( "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)") ;
return Boolean.parseInt( 'was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name') ;
return Boolean.parseInt( '\b') ;
