final List < E > list = toList( iterator ,0) ;
final List < E > list = toList( iterator ,1) ;
final List < E > list = toList( iterator ,2) ;
final List < E > list = toList( iterator ,0) ;
final List < E > list = toList( iterator ,4) ;
final List < E > list = toList( iterator ,100) ;
final List < E > list = toList( iterator ,6) ;
final List < E > list = toList( iterator ,3) ;
final List < E > list = toList( iterator ,1) ;
final List < E > list = toList( iterator ,10) ;
final List < E > list = toList( iterator ,5) ;
List < E > list = toList( iterator ,0) ;
final List < E > list = toList( iterator , list ) ;
final List < E > list = toList( iterator ) ;
final List < List < E > list = toList( iterator ,0) ;
final List < S > list = toList( iterator ,0) ;
final List < E > list = toList( list ) ;
final List < E > list = list.toList( iterator ,0) ;
final List < E > list = toList( iterator ,0,0) ;
final List < E > list = toList( list , iterator ,0) ;
final List < E > list = toList( iterator ,0,2) ;
final List < E > list = toList( iterator ,0,0) ;
final List < E > list = toList( iterator ,0,4) ;
final List < E > list = toList( iterator ,0,100) ;
final List < E > list = toList( iterator ,0,6) ;
final List < E > list = toList( iterator ,0,3) ;
final List < E > list = toList( iterator ,0,1) ;
final List < E > list = toList( iterator ,0,10) ;
final List < E > list = toList( iterator ,0,5) ;
final List < E > list = toList( iterator ,0, list ) ;
final List < E > list = toList( list , list ) ;
final List < E > list = toList( iterator ,0, false ) ;
final List < E > list = toList( iterator , -1) ;
List < E > list = toList( iterator ,1) ;
final List < E > list = toList( list ,0) ;
final List < E > list = toList( iterator ,0,1) ;
final List < E extends E > list = toList( iterator ,0) ;
final List < E > list = toList( iterator ,0, null ) ;
final List < E > list = listToList( iterator ,0) ;
List < E > list = toList( iterator ,2) ;
List < E > list = toList( iterator ,0) ;
List < E > list = toList( iterator ,4) ;
List < E > list = toList( iterator ,100) ;
List < E > list = toList( iterator ,6) ;
List < E > list = toList( iterator ,3) ;
List < E > list = toList( iterator ,1) ;
List < E > list = toList( iterator ,10) ;
List < E > list = toList( iterator ,5) ;
final List < E > list = toList( iterator ,0, true ) ;
final List < E > list = toList( iterator , null ) ;
final List < E > list = toList( iterator ,0, 'ListIterator must not be null') ;
final List < E > list = toList( iterator ,0, 'Entry does not exist: ') ;
final List < E > list = toList( iterator ,0, 'delimiter may not be null') ;
final List < E > list = toList( iterator ,0, 'Enumeration must not be null') ;
final List < E > list = toList( iterator ,0, 'License') ;
final List < E > list = toList( iterator ,0, 'iterator') ;
final List < E > list = toList( iterator ,0, '[]') ;
final List < E > list = toList( iterator ,0, 'Collection must not be null') ;
final List < E > list = toList( iterator ,0, 'transformer may not be null') ;
final List < E > list = toList( iterator ,0, ', ') ;
final List < E > list = toList( iterator ,0, 'Estimated size must be greater than 0') ;
final List < E > list = toList( iterator ,0, '[') ;
final List < E > list = toList( iterator ,0, 'suffix may not be null') ;
final List < E > list = toList( iterator ,0, 'rawtypes') ;
final List < E > list = toList( iterator ,0, 'A generic array of E is created for a varargs parameter') ;
final List < E > list = toList( iterator ,0, 'AS IS') ;
final List < E > list = toList( iterator ,0, 'NodeList must not be null') ;
final List < E > list = toList( iterator ,0, 'Closure must not be null') ;
final List < E > list = toList( iterator ,0, 'Node must not be null') ;
final List < E > list = toList( iterator ,0, 'unchecked') ;
final List < E > list = toList( iterator ,0, 'List must not be null') ;
final List < E > list = toList( iterator ,0, 'Transformer must not be null') ;
final List < E > list = toList( iterator ,0, 'Iterator must not be null') ;
final List < E > list = toList( iterator ,0, 'Predicate must not be null') ;
final List < E > list = toList( iterator ,0, ']') ;
final List < E > list = toList( iterator ,0, 'Array class must not be null') ;
final List < E > list = toList( iterator ,0, 'prefix may not be null') ;
final List < List < E > list = toList( iterator ,1) ;
final List < E > list = toList( list , iterator ) ;
final List < E > list = getList( iterator ,0) ;
List < E > list = toList( iterator , list ) ;
final List < List < E > list = toList( iterator ,2) ;
final List < List < E > list = toList( iterator ,0) ;
final List < List < E > list = toList( iterator ,4) ;
final List < List < E > list = toList( iterator ,100) ;
final List < List < E > list = toList( iterator ,6) ;
final List < List < E > list = toList( iterator ,3) ;
final List < List < E > list = toList( iterator ,1) ;
final List < List < E > list = toList( iterator ,10) ;
final List < List < E > list = toList( iterator ,5) ;
final List < S > list = toList( iterator ,1) ;
final List < E > list = toList( iterator , 'ListIterator must not be null') ;
final List < E > list = toList( iterator , 'Entry does not exist: ') ;
final List < E > list = toList( iterator , 'delimiter may not be null') ;
final List < E > list = toList( iterator , 'Enumeration must not be null') ;
final List < E > list = toList( iterator , 'License') ;
final List < E > list = toList( iterator , 'iterator') ;
final List < E > list = toList( iterator , '[]') ;
final List < E > list = toList( iterator , 'Collection must not be null') ;
final List < E > list = toList( iterator , 'transformer may not be null') ;
