_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( offset +_inputPtr ) ) ;
_textBuffer.resetWithDefault(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( buffer +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputClock ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr ) ) ;
_textBuffer.resetWithShared(_inputBuffer )_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuilder ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr -_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ) ;
_textBuffer.setWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuilder.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr +( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputClock ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr *_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + ''inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '/'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + ' in a comment'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '\f'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'ALLOW_COMMENTS'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '+b64variant+'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '+b64variant.getPaddingChar()+'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '): 'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + ' in character escape sequence'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '*'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'Exponent indicator not followed by a digit'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'Failed to decode VALUE_STRING as base64 ('inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'null'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '\r'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '\t'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '"+b64variant.getPaddingChar()+"'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'Reader returned 0 characters when trying to read 'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'n'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'Unexpected end-of-input within/between 'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + "expected padding character '"inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + "'"inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + ' || c == 'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'NaN'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'name'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'Infinity'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '+Infinity'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + ' || ch > 'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + "Unrecognized token '"inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'expected a digit for number exponent'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'ReaderBasedNumericParser'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'I'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '-'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '"+((char) i), 'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '+_parsingContext.getTypeDesc()+'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'N'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '.'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'E'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '-Infinity'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + ": was expecting closing '"inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'expected digit (0-9) to follow minus sign, for valid numeric value'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '_nextAfterName'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'Leading zeroes not allowed'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + ': was expecting closing quote for a string value'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + "Non-standard token '"inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '+'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'Missing integer part (next char 'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + ' or 'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'll eagerly parse contents; this so that there'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + ') not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '\n'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + ')'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '"+((char) endChar)+"'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '+sb.toString()+'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'string value'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '"+sb.toString()+"'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + "Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + "was expecting either '*' or '/' for a comment"inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + "'null', 'true', 'false' or NaN"inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'own'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'expected a value'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'was expecting double-quote to start field name'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + ' entries'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + "' for name"inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '\'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '+match+'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'resource'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + "': was expecting "inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'expected a hex-digit for character escape sequence'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'false'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '+INF'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + ' && c <= 'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '+((char) endChar)+'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'missing'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'was expecting comma to separate 'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + "Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'expect-value'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'true'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'e'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'was expecting a colon to separate field name and value'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'Decimal point not followed by a digit'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + '+_getCharDesc(c)+'inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + 'real'inputPtr ) ) ;
