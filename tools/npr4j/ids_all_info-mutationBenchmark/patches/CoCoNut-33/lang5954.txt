shift = i %16+ dstPos ;
shift = i %16+ dstPos -1;
shift = i %16+ dstPos +1;
shift = i %16+ dstPos ) ;
shift = i %16+ dstPos + '(nBytes-1)*8+dstPos is greather or equal to than 64'+ dstPos ;
shift = i %16+ dstPos + 'D'+ dstPos ;
shift = i %16+ dstPos + '(nHexs-1)*4+dstPos is greather or equal to than 8'+ dstPos ;
shift = i %16+ dstPos + 'nBools-1+dstPos is greather or equal to than 8'+ dstPos ;
shift = i %16+ dstPos + '(nShorts-1)*16+srcPos is greather or equal to than 32'+ dstPos ;
shift = i %16+ dstPos + '(nHexs-1)*4+srcPos is greather or equal to than 64'+ dstPos ;
shift = i %16+ dstPos + 'B'+ dstPos ;
shift = i %16+ dstPos + 'src.length>8: src.length='+ dstPos ;
shift = i %16+ dstPos + '3'+ dstPos ;
shift = i %16+ dstPos + 'A'+ dstPos ;
shift = i %16+ dstPos + '(nHexs-1)*4+dstPos is greather or equal to than 64'+ dstPos ;
shift = i %16+ dstPos + "' as a hexadecimal digit"+ dstPos ;
shift = i %16+ dstPos + '8'+ dstPos ;
shift = i %16+ dstPos + '(nHexs-1)*4+srcPos is greather or equal to than 32'+ dstPos ;
shift = i %16+ dstPos + '2'+ dstPos ;
shift = i %16+ dstPos + 'License'+ dstPos ;
shift = i %16+ dstPos + 'F'+ dstPos ;
shift = i %16+ dstPos + '(nShorts-1)*16+dstPos is greather or equal to than 32'+ dstPos ;
shift = i %16+ dstPos + 'nBools-1+srcPos is greather or equal to than 8'+ dstPos ;
shift = i %16+ dstPos + '4'+ dstPos ;
shift = i %16+ dstPos + 'e'+ dstPos ;
shift = i %16+ dstPos + 'nBools-1+dstPos is greather or equal to than 16'+ dstPos ;
shift = i %16+ dstPos + '(nBytes-1)*8+srcPos is greather or equal to than 32'+ dstPos ;
shift = i %16+ dstPos + ' and '+ dstPos ;
shift = i %16+ dstPos + 'd'+ dstPos ;
shift = i %16+ dstPos + 'nBools-1+srcPos is greather or equal to than 64'+ dstPos ;
shift = i %16+ dstPos + 'nBools-1+dstPos is greather or equal to than 64'+ dstPos ;
shift = i %16+ dstPos + 'Cannot convert an empty array.'+ dstPos ;
shift = i %16+ dstPos + '(nShorts-1)*16+srcPos is greather or equal to than 64'+ dstPos ;
shift = i %16+ dstPos + 'nBytes is greather than 16'+ dstPos ;
shift = i %16+ dstPos + 'C'+ dstPos ;
shift = i %16+ dstPos + '(nBytes-1)*8+dstPos is greather or equal to than 16'+ dstPos ;
shift = i %16+ dstPos + 'Be'+ dstPos ;
shift = i %16+ dstPos + '(nHexs-1)*4+dstPos is greather or equal to than 32'+ dstPos ;
shift = i %16+ dstPos + '(nHexs-1)*4+dstPos is greather or equal to than 16'+ dstPos ;
shift = i %16+ dstPos + 'a'+ dstPos ;
shift = i %16+ dstPos + '(nHexs-1)*4+srcPos is greather or equal to than 8'+ dstPos ;
shift = i %16+ dstPos + '7'+ dstPos ;
shift = i %16+ dstPos + 'c'+ dstPos ;
shift = i %16+ dstPos + 'nBools-1+srcPos is greather or equal to than 16'+ dstPos ;
shift = i %16+ dstPos + 'nBools-1+dstPos is greather or equal to than 32'+ dstPos ;
shift = i %16+ dstPos + 'AS IS'+ dstPos ;
shift = i %16+ dstPos + '(nBytes-1)*8+srcPos is greather or equal to than 64'+ dstPos ;
shift = i %16+ dstPos + '6'+ dstPos ;
shift = i %16+ dstPos + 'src.length-srcPos<4: src.length='+ dstPos ;
shift = i %16+ dstPos + 'Msb0'+ dstPos ;
shift = i %16+ dstPos + 'nibble value not between 0 and 15: '+ dstPos ;
shift = i %16+ dstPos + 'b'+ dstPos ;
shift = i %16+ dstPos + 'E'+ dstPos ;
shift = i %16+ dstPos + '9'+ dstPos ;
shift = i %16+ dstPos + '(nBytes-1)*8+dstPos is greather or equal to than 32'+ dstPos ;
shift = i %16+ dstPos + '5'+ dstPos ;
shift = i %16+ dstPos + '0'+ dstPos ;
shift = i %16+ dstPos + '(nInts-1)*32+dstPos is greather or equal to than 64'+ dstPos ;
shift = i %16+ dstPos + '(nHexs-1)*4+srcPos is greather or equal to than 16'+ dstPos ;
shift = i %16+ dstPos + ', srcPos='+ dstPos ;
shift = i %16+ dstPos + 'nBools-1+srcPos is greather or equal to than 32'+ dstPos ;
shift = i %16+ dstPos + 'f'+ dstPos ;
shift = i %16+ dstPos + '(nBytes-1)*8+srcPos is greather or equal to than 16'+ dstPos ;
shift = i %16+ dstPos + '(nShorts-1)*16+dstPos is greather or equal to than 64'+ dstPos ;
shift = i %16+ dstPos + '1'+ dstPos ;
shift = i %16+ dstPos + 'Need at least 16 bytes for UUID'+ dstPos ;
shift = i %16+ dstPos + '(nInts-1)*32+srcPos is greather or equal to than 64'+ dstPos ;
shift = i %16+ dstPos + "Cannot interpret '"+ dstPos ;
shift = i %16+ dstPos -1) ;
shift = i %16+ dstPos -1+ dstPos ;
shift = i %16+ dstPos +1+ dstPos ;
shift = i %16+ dstPos +1) ;
shift = i %16+ dstPos +2+ dstPos ;
shift = i %16+ dstPos +0+ dstPos ;
shift = i %16+ dstPos +4+ dstPos ;
shift = i %16+ dstPos +7+ dstPos ;
shift = i %16+ dstPos +16+ dstPos ;
shift = i %16+ dstPos +6+ dstPos ;
shift = i %16+ dstPos +3+ dstPos ;
shift = i %16+ dstPos +32+ dstPos ;
shift = i %16+ dstPos +64+ dstPos ;
shift = i %16+ dstPos +1+ dstPos ;
shift = i %16+ dstPos +10+ dstPos ;
shift = i %16+ dstPos +9+ dstPos ;
shift = i %16+ dstPos +8+ dstPos ;
shift = i %16+ dstPos +15+ dstPos ;
shift = i %16+ dstPos +5+ dstPos ;
shift = i %16+( dstPos ;
shift = i %16+ dstPos + '(nBytes-1)*8+dstPos is greather or equal to than 64';
shift = i %16+ dstPos + 'D';
shift = i %16+ dstPos + '(nHexs-1)*4+dstPos is greather or equal to than 8';
shift = i %16+ dstPos + 'nBools-1+dstPos is greather or equal to than 8';
shift = i %16+ dstPos + '(nShorts-1)*16+srcPos is greather or equal to than 32';
shift = i %16+ dstPos + '(nHexs-1)*4+srcPos is greather or equal to than 64';
shift = i %16+ dstPos + 'B';
shift = i %16+ dstPos + 'src.length>8: src.length=';
shift = i %16+ dstPos + '3';
shift = i %16+ dstPos + 'A';
shift = i %16+ dstPos + '(nHexs-1)*4+dstPos is greather or equal to than 64';
shift = i %16+ dstPos + "' as a hexadecimal digit";
