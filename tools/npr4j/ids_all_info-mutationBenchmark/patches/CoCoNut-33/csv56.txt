return this.isEmpty( ) ;
return true ;
return this.isEmpty( true ) ;
return isEmpty( ) ;
return new ArrayList < >( ) ;
return this.isConnected( ) ;
return this.isEmpty( ) ) ;
return this.hashCode( ) ;
return this.isPresent( ) ;
return this.isEmpty( false ) ;
return this.getValue( ) ;
return this.isEnabled( ) ;
return isEmpty( true ) ;
return super.isEmpty( ) ;
return this.isEnabled( true ) ;
return Objects.equals( '') ;
return Objects.equals( 'The comment start character and the encapsulator cannot be the same (\') ;
return Objects.equals( 'The delimiter cannot be a line break') ;
return Objects.equals( ' EmptyLines:ignored') ;
return Objects.equals( 'http://dev.mysql.com/doc/refman/5.1/en/load-data.html') ;
return Objects.equals( 'The encapsulator cannot be a line break') ;
return Objects.equals( '\n') ;
return Objects.equals( ',') ;
return Objects.equals( ' || c == ') ;
return Objects.equals( ' SurroundingSpaces:ignored') ;
return Objects.equals( ')') ;
return Objects.equals( 'name') ;
return Objects.equals( 'License') ;
return Objects.equals( 'The escape character cannot be a line break') ;
return Objects.equals( ' or ') ;
return Objects.equals( 'The comment start character and the delimiter cannot be the same (\') ;
return Objects.equals( ', ') ;
return Objects.equals( 'Escape=<') ;
return Objects.equals( 'The comment start and the escape character cannot be the same (\') ;
return Objects.equals( 'CommentStart=<') ;
return Objects.equals( 'Encapsulator=<') ;
return Objects.equals( 'The escape character and the delimiter cannot be the same (\') ;
return Objects.equals( ' ') ;
return Objects.equals( '\r\n') ;
return Objects.equals( 'AS IS') ;
return Objects.equals( '\ufffe') ;
return Objects.equals( 'phone') ;
return Objects.equals( 'The comment start character cannot be a line break') ;
return Objects.equals( 'The encapsulator character and the delimiter cannot be the same (\') ;
return Objects.equals( '\') ;
return Objects.equals( '"') ;
return Objects.equals( 'http://tools.ietf.org/html/rfc4180') ;
return Objects.equals( '" + encapsulator + ') ;
return Objects.equals( '\r') ;
return Objects.equals( 'email') ;
return Objects.equals( '\t') ;
return Objects.equals( '" + commentStart + ') ;
return Objects.equals( '" + escape + ') ;
return Objects.equals( 'Delimiter=<') ;
return Objects.equals( ';') ;
return Objects.equals( '\\') ;
return Objects.equals( '>') ;
return this.isVisible( true ) ;
return this.isEnabled( false ) ;
return false ;
return this.isActive( ) ;
return this.isVisible( false ) ;
return Utils.isEmpty( ) ;
return this.toString( ) ;
return this.isClosed( ) ;
return isConnected( ) ;
return this.getString( ) ;
return this.isPlaying( ) ;
return this.getId( ) ;
return this.isVisible( ) ;
 return( int )( true ) ;
return this.getName( ) ;
return this.isFinished( ) ;
return Boolean.parseInt( true ) ;
return this.isNull( true ) ;
return isVisible( true ) ;
return this.isFirst( ) ;
return ! isNotEmpty( ) ;
return this.isNull( ) ;
return ! Objects.equals( '') ;
return ! Objects.equals( 'The comment start character and the encapsulator cannot be the same (\') ;
return ! Objects.equals( 'The delimiter cannot be a line break') ;
return ! Objects.equals( ' EmptyLines:ignored') ;
return ! Objects.equals( 'http://dev.mysql.com/doc/refman/5.1/en/load-data.html') ;
return ! Objects.equals( 'The encapsulator cannot be a line break') ;
return ! Objects.equals( '\n') ;
return ! Objects.equals( ',') ;
return ! Objects.equals( ' || c == ') ;
return ! Objects.equals( ' SurroundingSpaces:ignored') ;
return ! Objects.equals( ')') ;
return ! Objects.equals( 'name') ;
return ! Objects.equals( 'License') ;
return ! Objects.equals( 'The escape character cannot be a line break') ;
return ! Objects.equals( ' or ') ;
return ! Objects.equals( 'The comment start character and the delimiter cannot be the same (\') ;
return ! Objects.equals( ', ') ;
return ! Objects.equals( 'Escape=<') ;
return ! Objects.equals( 'The comment start and the escape character cannot be the same (\') ;
return ! Objects.equals( 'CommentStart=<') ;
return ! Objects.equals( 'Encapsulator=<') ;
