compareNodebkgnd( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodebkgnd( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodebkgnd( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeguilds( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeguilds( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeguilds( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeRecivied( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeRecivied( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeRecivied( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeWedge( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeWedge( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeWedge( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodegci( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodegci( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodegci( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePostage( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePostage( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePostage( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeNaptan( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeNaptan( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeNaptan( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeKv( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeKv( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeKv( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeMut( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeMut( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeMut( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeKudos( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeKudos( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeKudos( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeIMEI( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeIMEI( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeIMEI( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodebkgnd( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodebkgnd( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodebkgnd( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodeguilds( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodeguilds( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeguilds( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodelister( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodelister( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodelister( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodesetmessage( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodesetmessage( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodesetmessage( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeFitnesse( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeFitnesse( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeFitnesse( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeBatches( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeBatches( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeBatches( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodemdata( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodemdata( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodemdata( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeDiploid( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeDiploid( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeDiploid( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeShirt( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeShirt( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeShirt( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeCCAL( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeCCAL( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeCCAL( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeNetflix( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeNetflix( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeNetflix( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeDGTZ( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeDGTZ( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeDGTZ( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeApks( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeApks( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeApks( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeTriggers( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeTriggers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeTriggers( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeUnite( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeUnite( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeUnite( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeAsynctask( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeAsynctask( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeAsynctask( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeEffects( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeEffects( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeEffects( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeRecivied( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodeRecivied( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeRecivied( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodetfbs( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodetfbs( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodetfbs( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSheild( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSheild( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSheild( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeINSTAMSG( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeINSTAMSG( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeINSTAMSG( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSubtle( p1.parent , depth1-1, p2.parent , depth2--1) ;
