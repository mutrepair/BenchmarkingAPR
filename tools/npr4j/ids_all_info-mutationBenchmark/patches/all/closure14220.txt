if( !( s.equals( '') || s.equals( '') || |
if( !( s.equals( 'JSC_IN_USED_WITH_STRUCT') || s.equals( 'JSC_IN_USED_WITH_STRUCT') || |
if( !( s.equals( 'interface members can only be empty property declarations,') || s.equals( 'interface members can only be empty property declarations,') || |
if( !( s.equals( 'condition always evaluates to the same value\n') || s.equals( 'condition always evaluates to the same value\n') || |
if( !( s.equals( 'JSC_DETERMINISTIC_TEST') || s.equals( 'JSC_DETERMINISTIC_TEST') || |
if( !( s.equals( 'JSC_INEXISTENT_PROPERTY') || s.equals( 'JSC_INEXISTENT_PROPERTY') || |
if( !( s.equals( 'Interface {0} has a property {1} with incompatible types in ') || s.equals( 'Interface {0} has a property {1} with incompatible types in ') || |
if( !( s.equals( 'an interface can only extend, but not implement interfaces') || s.equals( 'an interface can only extend, but not implement interfaces') || |
if( !( s.equals( 'with requires an object') || s.equals( 'with requires an object') || |
if( !( s.equals( 's body. The function') || s.equals( 's body. The function') || |
if( !( s.equals( 'JSC_DETERMINISTIC_TEST_NO_RESULT') || s.equals( 'JSC_DETERMINISTIC_TEST_NO_RESULT') || |
if( !( s.equals( 'left side of numeric comparison') || s.equals( 'left side of numeric comparison') || |
if( !( s.equals( 'of the property it overrides from superclass {1}\n') || s.equals( 'of the property it overrides from superclass {1}\n') || |
if( !( s.equals( ' when ') || s.equals( ' when ') || |
if( !( s.equals( 'after it is constructed.') || s.equals( 'after it is constructed.') || |
if( !( s.equals( 'function {0} masks variable (IE bug)') || s.equals( 'function {0} masks variable (IE bug)') || |
if( !( s.equals( 'right side of numeric comparison') || s.equals( 'right side of numeric comparison') || |
if( !( s.equals( 'JSC_NOT_FUNCTION_TYPE') || s.equals( 'JSC_NOT_FUNCTION_TYPE') || |
if( !( s.equals( 'JSC_BAD_DELETE_OPERAND') || s.equals( 'JSC_BAD_DELETE_OPERAND') || |
if( !( s.equals( 'mismatch of the {0} property type and the type ') || s.equals( 'mismatch of the {0} property type and the type ') || |
if( !( s.equals( "'in' requires an object") || s.equals( "'in' requires an object") || |
if( !( s.equals( 'declaration of multiple variables with shared type information') || s.equals( 'declaration of multiple variables with shared type information') || |
if( !( s.equals( 'JSC_INVALID_INTERFACE_MEMBER_DECLARATION') || s.equals( 'JSC_INVALID_INTERFACE_MEMBER_DECLARATION') || |
if( !( s.equals( 'JSC_CONFLICTING_EXTENDED_TYPE') || s.equals( 'JSC_CONFLICTING_EXTENDED_TYPE') || |
if( !( s.equals( 'left : {0}\n') || s.equals( 'left : {0}\n') || |
if( !( s.equals( 'property') || s.equals( 'property') || |
if( !( s.equals( 'in') || s.equals( 'in') || |
if( !( s.equals( 'JSC_ILLEGAL_PROPERTY_CREATION') || s.equals( 'JSC_ILLEGAL_PROPERTY_CREATION') || |
if( !( s.equals( 'JSC_INEXISTENT_ENUM_ELEMENT') || s.equals( 'JSC_INEXISTENT_ENUM_ELEMENT') || |
if( !( s.equals( 'Function requires at least {2} argument(s){3}.') || s.equals( 'Function requires at least {2} argument(s){3}.') || |
if( !( s.equals( 'condition always evaluates to {2}\n') || s.equals( 'condition always evaluates to {2}\n') || |
if( !( s.equals( 'original: {2}\n') || s.equals( 'original: {2}\n') || |
if( !( s.equals( 'incompatible enum element types') || s.equals( 'incompatible enum element types') || |
if( !( s.equals( 'initializing variable') || s.equals( 'initializing variable') || |
if( !( s.equals( 'JSC_ILLEGAL_IMPLICIT_CAST') || s.equals( 'JSC_ILLEGAL_IMPLICIT_CAST') || |
if( !( s.equals( 'JSC_UNRESOLVED_TYPE') || s.equals( 'JSC_UNRESOLVED_TYPE') || |
if( !( s.equals( 'prototype') || s.equals( 'prototype') || |
if( !( s.equals( 'property {0} already defined on interface {1}; ') || s.equals( 'property {0} already defined on interface {1}; ') || |
if( !( s.equals( 'JSC_HIDDEN_INTERFACE_PROPERTY') || s.equals( 'JSC_HIDDEN_INTERFACE_PROPERTY') || |
if( !( s.equals( 'extraneous') || s.equals( 'extraneous') || |
if( !( s.equals( 'enum element {0} already defined') || s.equals( 'enum element {0} already defined') || |
if( !( s.equals( '{0}\') || s.equals( '{0}\') || |
if( !( s.equals( 'JSC_ENUM_DUP') || s.equals( 'JSC_ENUM_DUP') || |
if( !( s.equals( 'assignment') || s.equals( 'assignment') || |
if( !( s.equals( 'can only implement interfaces') || s.equals( 'can only implement interfaces') || |
if( !( s.equals( 'increment/decrement') || s.equals( 'increment/decrement') || |
if( !( s.equals( 'sign operator') || s.equals( 'sign operator') || |
if( !( s.equals( 'JSC_WRONG_ARGUMENT_COUNT') || s.equals( 'JSC_WRONG_ARGUMENT_COUNT') || |
if( !( s.equals( 'JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH') || s.equals( 'JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH') || |
if( !( s.equals( 'unknown') || s.equals( 'unknown') || |
if( !( s.equals( 'Function {0}: called with {1} argument(s). ') || s.equals( 'Function {0}: called with {1} argument(s). ') || |
if( !( s.equals( 'string') || s.equals( 'string') || |
if( !( s.equals( 'AS IS') || s.equals( 'AS IS') || |
if( !( s.equals( 'cast') || s.equals( 'cast') || |
if( !( s.equals( '(missing)') || s.equals( '(missing)') || |
if( !( s.equals( 'interface member functions must have an empty body') || s.equals( 'interface member functions must have an empty body') || |
if( !( s.equals( 'dict') || s.equals( 'dict') || |
if( !( s.equals( 'overriding prototype with non-object') || s.equals( 'overriding prototype with non-object') || |
if( !( s.equals( 'instanceof requires an object') || s.equals( 'instanceof requires an object') || |
if( !( s.equals( 'object') || s.equals( 'object') || |
if( !( s.equals( ' : ') || s.equals( ' : ') || |
if( !( s.equals( ', ') || s.equals( ', ') || |
if( !( s.equals( 'Cannot add a property to a struct instance ') || s.equals( 'Cannot add a property to a struct instance ') || |
if( !( s.equals( 'Property {0} never defined on {1}') || s.equals( 'Property {0} never defined on {1}') || |
if( !( s.equals( 'right operand') || s.equals( 'right operand') || |
if( !( s.equals( 'right side of comparison') || s.equals( 'right side of comparison') || |
if( !( s.equals( ' type') || s.equals( ' type') || |
if( !( s.equals( 'Constructor {0} should be called with the \') || s.equals( 'Constructor {0} should be called with the \') || |
if( !( s.equals( 'new\') || s.equals( 'new\') || |
if( !( s.equals( 'Illegal annotation on {0}. @implicitCast may only be used in ') || s.equals( 'Illegal annotation on {0}. @implicitCast may only be used in ') || |
if( !( s.equals( 'JSC_EXPECTED_THIS_TYPE') || s.equals( 'JSC_EXPECTED_THIS_TYPE') || |
if( !( s.equals( 'constructor') || s.equals( 'constructor') || |
if( !( s.equals( 't resolve correctly, we') || s.equals( 't resolve correctly, we') || |
if( !( s.equals( 'JSC_FUNCTION_MASKS_VARIABLE') || s.equals( 'JSC_FUNCTION_MASKS_VARIABLE') || |
if( !( s.equals( 'left side of comparison') || s.equals( 'left side of comparison') || |
if( !( s.equals( 'property {0} is already defined by the {1} extended interface') || s.equals( 'property {0} is already defined by the {1} extended interface') || |
if( !( s.equals( 'JSC_UNKNOWN_EXPR_TYPE') || s.equals( 'JSC_UNKNOWN_EXPR_TYPE') || |
if( !( s.equals( 'right: {1}') || s.equals( 'right: {1}') || |
if( !( s.equals( 'JSC_CONSTRUCTOR_NOT_CALLABLE') || s.equals( 'JSC_CONSTRUCTOR_NOT_CALLABLE') || |
if( !( s.equals( 'property {0} already defined on superclass {1}; ') || s.equals( 'property {0} already defined on superclass {1}; ') || |
if( !( s.equals( ' and ') || s.equals( ' and ') || |
if( !( s.equals( 'left operand') || s.equals( 'left operand') || |
if( !( s.equals( 'JSC_NOT_A_CONSTRUCTOR') || s.equals( 'JSC_NOT_A_CONSTRUCTOR') || |
if( !( s.equals( '\') || s.equals( '\') || |
if( !( s.equals( 'boolean') || s.equals( 'boolean') || |
if( !( s.equals( "left side of 'in'") || s.equals( "left side of 'in'") || |
if( !( s.equals( 'struct') || s.equals( 'struct') || |
if( !( s.equals( 'cannot instantiate non-constructor') || s.equals( 'cannot instantiate non-constructor') || |
if( !( s.equals( 'could not determine the type of this expression') || s.equals( 'could not determine the type of this expression') || |
if( !( s.equals( 'JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN') || s.equals( 'JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN') || |
if( !( s.equals( ' and no more than ') || s.equals( ' and no more than ') || |
if( !( s.equals( ' empty functions{0}') || s.equals( ' empty functions{0}') || |
if( !( s.equals( 'bad left operand to bitwise operator') || s.equals( 'bad left operand to bitwise operator') || |
if( !( s.equals( 'dumb') || s.equals( 'dumb') || |
if( !( s.equals( 'License') || s.equals( 'License') || |
if( !( s.equals( 'ILLEGAL_OBJLIT_KEY') || s.equals( 'ILLEGAL_OBJLIT_KEY') || |
if( !( s.equals( 'JSC_INTERFACE_METHOD_OVERRIDE') || s.equals( 'JSC_INTERFACE_METHOD_OVERRIDE') || |
if( !( s.equals( 'JSC_CONFLICTING_IMPLEMENTED_TYPE') || s.equals( 'JSC_CONFLICTING_IMPLEMENTED_TYPE') || |
if( !( s.equals( 'object.property') || s.equals( 'object.property') || |
if( !( s.equals( 'Illegal key, the object literal is a {0}') || s.equals( 'Illegal key, the object literal is a {0}') || |
