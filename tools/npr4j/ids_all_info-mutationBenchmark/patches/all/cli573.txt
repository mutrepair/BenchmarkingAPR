int x = -1;
int x = -1; / / -1;
int x = Integer.MAX_VALUE ;
int x =( int ) Math.ceil( -1) ;
int x =( int ) Math.ceil( -1;
int x = Integer.MIN_VALUE ;
int x = -1) ;
int x =( int )( -1;
int x =( int ) Math.floor( -1;
int x = Math.min( -1) ;
int x =( int ) Math.floor( -1) ;
int x = -1-1;
int x = Math.min( -1*-1) ;
int x =0;
int x = -1) -1;
int x =0; / / -1;
int x = Math.min( -1;
int x = -1+1;
int x =( int ) -1;
int x = Math.min(1, -1) ;
int x =( int )(( -1) +1) ;
int x =( int ) Math.ceil( x ) ;
int x =( int ) Math.ceil( -0) ;
int x =( int ) Math.ceil( -8) ;
int x =( int ) Math.ceil( -3) ;
int x =( int ) Math.ceil( -2004) ;
int x =( int ) Math.ceil( -1) ;
int x =( int ) Math.ceil( -74) ;
int x =( int ) Math.ceil( -2) ;
int x =( int ) Math.ceil( -1999) ;
int x =( int ) Math.ceil( -2001) ;
int x = -0;
int x = -8;
int x = -3;
int x = -2004;
int x = -1;
int x = -74;
int x = -2;
int x = -1999;
int x = -2001;
int x =( int ) Math.ceil( index ) ;
int x = Math.max( -1*-1) ;
int x =( int ) Math.ceil( offset ) ;
int x = System.currentTimeMillis( ) -1;
int x = -1-1) ;
int x =( int ) Math.sqrt( -1;
int x =( int )(1*-1) ;
int x = Math.abs( -1) ;
int x =( int )( -1) ;
int x =1; / / -1;
int x =( int ) Math.ceil(1) ;
int x = Double.MAX_VALUE ;
int x = - -1;
int x =1;
int x =( int ) Math.sqrt( -1) ;
int x =( int )( -1*-1) ;
int x = Integer.parseInt( -1;
int x =( int ) Math.min( -1;
int x =( long ) Math.ceil( -1) ;
int x =( int ) Math.round( -1) ;
int x =( int ) Math.min( -1) ;
int x =( int ) Math.ceil( size( ) ;
int x = Math.min(0,0) ;
int x = new int [ ] { ',', -1;
int x = new int [ ] { 'longOptPrefix', -1;
int x = new int [ ] { 'cmdLineSyntax not provided', -1;
int x = new int [ ] { '\r', -1;
int x = new int [ ] { ' | ', -1;
int x = new int [ ] { '--', -1;
int x = new int [ ] { '\t', -1;
int x = new int [ ] { 'syntaxPrefix', -1;
int x = new int [ ] { 'descPadding', -1;
int x = new int [ ] { 'newLine', -1;
int x = new int [ ] { 'argName', -1;
int x = new int [ ] { ' ', -1;
int x = new int [ ] { 'line.separator', -1;
int x = new int [ ] { ').append(option.getArgName()).append(', -1;
int x = new int [ ] { 'optPrefix', -1;
int x = new int [ ] { 'usage: ', -1;
int x = new int [ ] { 'License', -1;
int x = new int [ ] { '-', -1;
int x = new int [ ] { ']', -1;
int x = new int [ ] { 'AS IS', -1;
int x = new int [ ] { 'leftPadding', -1;
int x = new int [ ] { 'width', -1;
int x = new int [ ] { 'arg', -1;
int x = new int [ ] { ' <', -1;
int x = new int [ ] { '\n', -1;
int x = new int [ ] { '[', -1;
int x = new int [ ] { '>', -1;
int x = new int [ ] { '   ', -1;
int x = new int [ ] { ') && (c != ', -1;
int x =( int )( -1-1) ;
int x = Math.min(0, -1) ;
int x = Math.min(8, -1) ;
int x = Math.min(3, -1) ;
int x = Math.min(2004, -1) ;
int x = Math.min(1, -1) ;
int x = Math.min(74, -1) ;
int x = Math.min(2, -1) ;
