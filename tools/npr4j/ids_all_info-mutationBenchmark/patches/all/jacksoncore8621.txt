_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,_inputPtr ,_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,_inputPtr ) ) ;
_textBuffer.setWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr , inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr -_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( offset +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +3) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +9) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +12) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +2) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +5) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +2008) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +173) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +6) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +7) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +77) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +0) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +64) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +32) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +2009) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +631) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +1) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +16) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +8) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +18) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +19) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +25) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +4) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +69) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr + inputPtr ) ) ;
_textBuffer.startWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +( inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr )_inputPtr ) ) ;
_textBuffer.resetWithDefault(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr , inputPtr , inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,_inputPtr ,( ptr ) ) ;
_textBuilder.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( buffer +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr ,_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +1) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr , inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,_inputPtr ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputClock ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '/') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "'null', 'true', 'false' or NaN") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Missing integer part (next char ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '*') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Reader returned 0 characters when trying to read ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Decimal point not followed by a digit') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '\t') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+((char) endChar)+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' || ch > ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'expected a hex-digit for character escape sequence') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'expected a value') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+_getCharDesc(c)+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'false') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+match+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Infinity') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' or ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '): ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+Infinity') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' && c <= ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '}') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ': was expecting closing quote for a string value') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'null') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "'") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '\n') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "': was expecting ") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "Non-standard token '") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' entries') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "was expecting either '*' or '/' for a comment") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Leading zeroes not allowed') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '-Infinity') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+b64variant+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '9') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'missing') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '\b') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ': // note: ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'ALLOW_COMMENTS') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '"+b64variant.getPaddingChar()+"') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'true') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ": was expecting closing '") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'was expecting double-quote to start field name') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '0') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ') not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' in character escape sequence') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '-') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Current token (') ) ;
