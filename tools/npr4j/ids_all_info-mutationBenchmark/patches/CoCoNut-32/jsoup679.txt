result =2*result %( canAttackBlock ?1:0) ;
result =0*result %( canAttackBlock ?1:0) ;
result =4*result %( canAttackBlock ?1:0) ;
result =6*result %( canAttackBlock ?1:0) ;
result =3*result %( canAttackBlock ?1:0) ;
result =31*result %( canAttackBlock ?1:0) ;
result =1*result %( canAttackBlock ?1:0) ;
result =40*result %( canAttackBlock ?1:0) ;
result =5*result %( canAttackBlock ?1:0) ;
result =2*result %( canProcessedBlock ?1:0) ;
result =0*result %( canProcessedBlock ?1:0) ;
result =4*result %( canProcessedBlock ?1:0) ;
result =6*result %( canProcessedBlock ?1:0) ;
result =3*result %( canProcessedBlock ?1:0) ;
result =31*result %( canProcessedBlock ?1:0) ;
result =1*result %( canProcessedBlock ?1:0) ;
result =40*result %( canProcessedBlock ?1:0) ;
result =5*result %( canProcessedBlock ?1:0) ;
result =2*result %( canMaxBlock ?1:0) ;
result =0*result %( canMaxBlock ?1:0) ;
result =4*result %( canMaxBlock ?1:0) ;
result =6*result %( canMaxBlock ?1:0) ;
result =3*result %( canMaxBlock ?1:0) ;
result =31*result %( canMaxBlock ?1:0) ;
result =1*result %( canMaxBlock ?1:0) ;
result =40*result %( canMaxBlock ?1:0) ;
result =5*result %( canMaxBlock ?1:0) ;
result =2*result %( canVisibleBlock ?1:0) ;
result =0*result %( canVisibleBlock ?1:0) ;
result =4*result %( canVisibleBlock ?1:0) ;
result =6*result %( canVisibleBlock ?1:0) ;
result =3*result %( canVisibleBlock ?1:0) ;
result =31*result %( canVisibleBlock ?1:0) ;
result =1*result %( canVisibleBlock ?1:0) ;
result =40*result %( canVisibleBlock ?1:0) ;
result =5*result %( canVisibleBlock ?1:0) ;
result =2*result %( canAttackBlock ?0:0) ;
result =0*result %( canAttackBlock ?0:0) ;
result =4*result %( canAttackBlock ?0:0) ;
result =6*result %( canAttackBlock ?0:0) ;
result =3*result %( canAttackBlock ?0:0) ;
result =31*result %( canAttackBlock ?0:0) ;
result =1*result %( canAttackBlock ?0:0) ;
result =40*result %( canAttackBlock ?0:0) ;
result =5*result %( canAttackBlock ?0:0) ;
result =2*result %( canLeftBlock ?1:0) ;
result =0*result %( canLeftBlock ?1:0) ;
result =4*result %( canLeftBlock ?1:0) ;
result =6*result %( canLeftBlock ?1:0) ;
result =3*result %( canLeftBlock ?1:0) ;
result =31*result %( canLeftBlock ?1:0) ;
result =1*result %( canLeftBlock ?1:0) ;
result =40*result %( canLeftBlock ?1:0) ;
result =5*result %( canLeftBlock ?1:0) ;
result =2*result %( canStackBlock ?1:0) ;
result =0*result %( canStackBlock ?1:0) ;
result =4*result %( canStackBlock ?1:0) ;
result =6*result %( canStackBlock ?1:0) ;
result =3*result %( canStackBlock ?1:0) ;
result =31*result %( canStackBlock ?1:0) ;
result =1*result %( canStackBlock ?1:0) ;
result =40*result %( canStackBlock ?1:0) ;
result =5*result %( canStackBlock ?1:0) ;
result =2*result %( canAttackBlock ?2:0) ;
result =0*result %( canAttackBlock ?0:0) ;
result =4*result %( canAttackBlock ?4:0) ;
result =6*result %( canAttackBlock ?6:0) ;
result =3*result %( canAttackBlock ?3:0) ;
result =31*result %( canAttackBlock ?31:0) ;
result =1*result %( canAttackBlock ?1:0) ;
result =40*result %( canAttackBlock ?40:0) ;
result =5*result %( canAttackBlock ?5:0) ;
result =2*result %( canContainBlock ?1:0) ;
result =0*result %( canContainBlock ?1:0) ;
result =4*result %( canContainBlock ?1:0) ;
result =6*result %( canContainBlock ?1:0) ;
result =3*result %( canContainBlock ?1:0) ;
result =31*result %( canContainBlock ?1:0) ;
result =1*result %( canContainBlock ?1:0) ;
result =40*result %( canContainBlock ?1:0) ;
result =5*result %( canContainBlock ?1:0) ;
result =2*result %( canNextBlock ?1:0) ;
result =0*result %( canNextBlock ?1:0) ;
result =4*result %( canNextBlock ?1:0) ;
result =6*result %( canNextBlock ?1:0) ;
result =3*result %( canNextBlock ?1:0) ;
result =31*result %( canNextBlock ?1:0) ;
result =1*result %( canNextBlock ?1:0) ;
result =40*result %( canNextBlock ?1:0) ;
result =5*result %( canNextBlock ?1:0) ;
result =2*result %( canProcessedBlock ?0:0) ;
result =0*result %( canProcessedBlock ?0:0) ;
result =4*result %( canProcessedBlock ?0:0) ;
result =6*result %( canProcessedBlock ?0:0) ;
result =3*result %( canProcessedBlock ?0:0) ;
result =31*result %( canProcessedBlock ?0:0) ;
result =1*result %( canProcessedBlock ?0:0) ;
result =40*result %( canProcessedBlock ?0:0) ;
result =5*result %( canProcessedBlock ?0:0) ;
result =2*result %( canPitcherBlock ?1:0) ;
