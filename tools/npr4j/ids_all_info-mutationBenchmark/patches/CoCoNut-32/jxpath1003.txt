compareNodepad( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodepad( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodepad( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodedrnk( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodedrnk( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodedrnk( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodecases( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodecases( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodecases( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodegenres( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodegenres( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodegenres( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeProgess( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeProgess( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeProgess( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSERVED( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSERVED( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSERVED( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodechoice( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodechoice( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodechoice( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeorders( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeorders( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeorders( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeskey( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeskey( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeskey( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeBooks( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeBooks( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeBooks( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeRSS( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeRSS( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeRSS( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeDmass( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeDmass( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeDmass( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeACM( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeACM( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeACM( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodebeat( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodebeat( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodebeat( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodepreference( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodepreference( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodepreference( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeStroke( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeStroke( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeStroke( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodereleased( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodereleased( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodereleased( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePresent( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePresent( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePresent( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSector( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSector( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSector( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeRules( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeRules( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeRules( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeCallable( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeCallable( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeCallable( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeNascimento( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeNascimento( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeNascimento( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeenlist( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeenlist( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeenlist( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeStop( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeStop( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeStop( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeEnvelope( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeEnvelope( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeEnvelope( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSPARK( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSPARK( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSPARK( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeAnnotated( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeAnnotated( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeAnnotated( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeRXCHAR( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeRXCHAR( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeRXCHAR( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodepad( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodepad( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodepad( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodedrnk( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodedrnk( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodedrnk( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodePossessive( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePossessive( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePossessive( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeeasy( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeeasy( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeeasy( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeCrucible( p1.parent , depth1-1, p2.parent , depth2--1) ;
