return false ;
return new ArrayList < String >( ) ;
return new ArrayList < >( ) ;
return new ArrayList < String >( false ) ;
return true ;
return new ArrayList < String >( true ) ;
return new ArrayList < Integer >( false ) ;
return new HashSet < >( ) ;
return this.equalsIgnoreCase( false ) ;
return new HashSet < String >( false ) ;
return new ArrayList < >( false ) ;
return getName( ).equals( 'License') ;
return getName( ).equals( '@return') ;
return getName( ).equals( 'meaning') ;
return getName( ).equals( 'String has leading or trailing whitespace') ;
return getName( ).equals( 'param') ;
return getName( ).equals( ' ') ;
return getName( ).equals( 'AS IS') ;
return getName( ).equals( ' and ') ;
return getName( ).equals( 'GPL') ;
return getName( ).equals( 'API tried to add two incompatible type tags. ') ;
return getName( ).equals( '@param') ;
return getName( ).equals( 'meanings') ;
return getName( ).equals( 'This should have been blocked and emitted a warning.') ;
return getName( ).equals( 'see') ;
return getName( ).equals( 'boolean') ;
return getName( ).equals( 'JSDocInfo') ;
return getName( ).equals( 'owner') ;
return new HashSet < String >( ) ;
return this.equalsIgnoreCase( 'License') ;
return this.equalsIgnoreCase( '@return') ;
return this.equalsIgnoreCase( 'meaning') ;
return this.equalsIgnoreCase( 'String has leading or trailing whitespace') ;
return this.equalsIgnoreCase( 'param') ;
return this.equalsIgnoreCase( ' ') ;
return this.equalsIgnoreCase( 'AS IS') ;
return this.equalsIgnoreCase( ' and ') ;
return this.equalsIgnoreCase( 'GPL') ;
return this.equalsIgnoreCase( 'API tried to add two incompatible type tags. ') ;
return this.equalsIgnoreCase( '@param') ;
return this.equalsIgnoreCase( 'meanings') ;
return this.equalsIgnoreCase( 'This should have been blocked and emitted a warning.') ;
return this.equalsIgnoreCase( 'see') ;
return this.equalsIgnoreCase( 'boolean') ;
return this.equalsIgnoreCase( 'JSDocInfo') ;
return this.equalsIgnoreCase( 'owner') ;
return 'License'.equalsIgnoreCase( false ) ;
return '@return'.equalsIgnoreCase( false ) ;
return 'meaning'.equalsIgnoreCase( false ) ;
return 'String has leading or trailing whitespace'.equalsIgnoreCase( false ) ;
return 'param'.equalsIgnoreCase( false ) ;
return ' '.equalsIgnoreCase( false ) ;
return 'AS IS'.equalsIgnoreCase( false ) ;
return ' and '.equalsIgnoreCase( false ) ;
return 'GPL'.equalsIgnoreCase( false ) ;
return 'API tried to add two incompatible type tags. '.equalsIgnoreCase( false ) ;
return '@param'.equalsIgnoreCase( false ) ;
return 'meanings'.equalsIgnoreCase( false ) ;
return 'This should have been blocked and emitted a warning.'.equalsIgnoreCase( false ) ;
return 'see'.equalsIgnoreCase( false ) ;
return 'boolean'.equalsIgnoreCase( false ) ;
return 'JSDocInfo'.equalsIgnoreCase( false ) ;
return 'owner'.equalsIgnoreCase( false ) ;
return false.equalsIgnoreCase( false ) ;
return new ArrayList < Integer >( ) ;
return false.toLowerCase( ) ;
return this.equalsIgnoreCase( true ) ;
return false.equalsIgnoreCase( 'License') ;
return false.equalsIgnoreCase( '@return') ;
return false.equalsIgnoreCase( 'meaning') ;
return false.equalsIgnoreCase( 'String has leading or trailing whitespace') ;
return false.equalsIgnoreCase( 'param') ;
return false.equalsIgnoreCase( ' ') ;
return false.equalsIgnoreCase( 'AS IS') ;
return false.equalsIgnoreCase( ' and ') ;
return false.equalsIgnoreCase( 'GPL') ;
return false.equalsIgnoreCase( 'API tried to add two incompatible type tags. ') ;
return false.equalsIgnoreCase( '@param') ;
return false.equalsIgnoreCase( 'meanings') ;
return false.equalsIgnoreCase( 'This should have been blocked and emitted a warning.') ;
return false.equalsIgnoreCase( 'see') ;
return false.equalsIgnoreCase( 'boolean') ;
return false.equalsIgnoreCase( 'JSDocInfo') ;
return false.equalsIgnoreCase( 'owner') ;
return true.equalsIgnoreCase( false ) ;
return new HashSet < >( false ) ;
return new HashMap < >( ) ;
return this.isEmpty( ) ;
return new ArrayList < Integer >( true ) ;
return 'License'.equalsIgnoreCase( 'License') ;
return '@return'.equalsIgnoreCase( '@return') ;
return 'meaning'.equalsIgnoreCase( 'meaning') ;
return 'String has leading or trailing whitespace'.equalsIgnoreCase( 'String has leading or trailing whitespace') ;
return 'param'.equalsIgnoreCase( 'param') ;
return ' '.equalsIgnoreCase( ' ') ;
return 'AS IS'.equalsIgnoreCase( 'AS IS') ;
return ' and '.equalsIgnoreCase( ' and ') ;
return 'GPL'.equalsIgnoreCase( 'GPL') ;
return 'API tried to add two incompatible type tags. '.equalsIgnoreCase( 'API tried to add two incompatible type tags. ') ;
return '@param'.equalsIgnoreCase( '@param') ;
