messageHasDesc = false ;
messageHasDesc = true ;
messageHasDesc = new ArrayList < >( ) ;
messageHasDesc = messageHasDesc ;
messageHasDesc = new HashSet < >( ) ;
messageHasDesc = messageHasDesc = false ;
messageHasDesc = messageHasDesc = true ;
messageHasDesc = new ArraySet < >( ) ;
messageHasDesc = null ;
messageHasDesc = ! messageHasDesc = false ;
messageHasDesc = new TextHasDesc( ) ;
messageHasDesc =( messageHasDesc ) ;
messageHasDesc = '} or {@code ';
messageHasDesc = ' + ';
messageHasDesc = 'License';
messageHasDesc = 'MSG_UNNAMED_\\d+';
messageHasDesc = 'goog';
messageHasDesc = 'someUserName';
messageHasDesc = 'Message';
messageHasDesc = ' ';
messageHasDesc = '() function could be used only with MSG_* property or variable';
messageHasDesc = 'JSC_MSG_HAS_NO_DESCRIPTION';
messageHasDesc = 'Unrecognized message placeholder referenced: ';
messageHasDesc = 'JSC_MSG_ORPHANED_NODE';
messageHasDesc = 'JSC_MSG_HAS_NO_VALUE';
messageHasDesc = 'Message value of {0} is just an empty string. ';
messageHasDesc = 'Please use ';
messageHasDesc = 'JSC_MSG_HAS_NO_TEXT';
messageHasDesc = 'Expected node type ';
messageHasDesc = 'JSC_MSG_KEY_DUPLICATED';
messageHasDesc = 'Message {0} has no description. Add @desc JsDoc tag.';
messageHasDesc = 'name';
messageHasDesc = 's';
messageHasDesc = 'Cannot parse value of message ';
messageHasDesc = 'standard';
messageHasDesc = '\0';
messageHasDesc = 'duplicate message variable name found for {0}, ';
messageHasDesc = 'Message parse tree malformed. {0}';
messageHasDesc = 'STRING or ADD node expected; found: ';
messageHasDesc = 'JSC_MSG_FALLBACK_ARG_ERROR';
messageHasDesc = 'A4_LETTER';
messageHasDesc = 'JSC_MSG_TREE_MALFORMED';
messageHasDesc = ' + type + ';
messageHasDesc = 'Message string literal expected';
messageHasDesc = 'STRING, NAME, or ADD node expected; found: ';
messageHasDesc = 'getMsg';
messageHasDesc = 'Some untrackable message';
messageHasDesc = 'getProductName';
messageHasDesc = 'str';
messageHasDesc = 'Placeholder incorrectly formatted in: ';
messageHasDesc = '_';
messageHasDesc = 'START_SPAN_1_23';
messageHasDesc = 'message node {0} has no value';
messageHasDesc = 'goog.getMsg';
messageHasDesc = 'product';
messageHasDesc = 'NAME, LP, or BLOCK node expected; found: ';
messageHasDesc = 'MSG_';
messageHasDesc = '@hidden';
messageHasDesc = 'OBJLIT node expected';
messageHasDesc = 'Placeholder name not in lowerCamelCase: ';
messageHasDesc = 'JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX';
messageHasDesc = 'Hi {$userName}! Welcome to {$product}.';
messageHasDesc = 'Message initialized using unrecognized function. ';
messageHasDesc = 'AS IS';
messageHasDesc = 'message not initialized using ';
messageHasDesc = 'Could not find message entry for fallback argument {0}';
messageHasDesc = '; found: ';
messageHasDesc = 'r';
messageHasDesc = 'http://code.google.com/p/closure-templates/';
messageHasDesc = '[a-z][a-zA-Z\\d]*[_\\d]*';
messageHasDesc = 'JSC_MSG_BAD_FALLBACK_SYNTAX';
messageHasDesc = 'Bad syntax. ';
messageHasDesc = 'startSpan_1_23';
messageHasDesc = 'Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)';
messageHasDesc = '_HELP';
messageHasDesc = 'NAME';
messageHasDesc = '() instead.';
messageHasDesc = 'initial definition {1}:{2}';
messageHasDesc = 'a4Letter';
messageHasDesc = '; found: null';
messageHasDesc = 'Unused message placeholder: ';
messageHasDesc = 'Message must be initialized using ';
messageHasDesc = 'RETURN node expected; found: ';
messageHasDesc = '}';
messageHasDesc = 'STRING_KEY node expected as OBJLIT key';
messageHasDesc = ' function.';
messageHasDesc = '{$';
messageHasDesc = ' + MSG_FUNCTION_NAME + ';
messageHasDesc = 'Empty messages are forbidden.';
messageHasDesc = ' -> ';
messageHasDesc = 'goog.getMsgWithFallback';
messageHasDesc = 'userName';
messageHasDesc = 'a.b.MSG_X';
messageHasDesc = 't';
messageHasDesc = 'Duplicate placeholder name: ';
messageHasDesc = new HashMap < >( ) ;
messageHasDesc = ! messageHasDesc ;
messageHasDesc = messageHasDesc( ) ;
messageHasDesc = ! messageHasDesc = true ;
messageHasDesc = e.getMessage( ) ;
