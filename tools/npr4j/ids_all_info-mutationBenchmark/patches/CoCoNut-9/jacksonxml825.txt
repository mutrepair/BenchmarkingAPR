} else if( ! ''.equals( '') ) {
} else if( ! 'Current context not an object but '.equals( 'Current context not an object but ') ) {
} else if( ! 'unknown'.equals( 'unknown') ) {
} else if( ! 'writeRaw'.equals( 'writeRaw') ) {
} else if( ! 'write number'.equals( 'write number') ) {
} else if( ! 'Current context not an ARRAY but '.equals( 'Current context not an ARRAY but ') ) {
} else if( ! 'Can not write a field name, expecting a value'.equals( 'Can not write a field name, expecting a value') ) {
} else if( ! 'false'.equals( 'false') ) {
} else if( ! "': this breaks functionality such as indentation that relies on it. ".equals( "': this breaks functionality such as indentation that relies on it. ") ) {
} else if( ! ") does not implement Stax2 API natively and is missing method '".equals( ") does not implement Stax2 API natively and is missing method '") ) {
} else if( ! 'Can not write END_ELEMENT without open START_ELEMENT'.equals( 'Can not write END_ELEMENT without open START_ELEMENT') ) {
} else if( ! 'xsi:nil'.equals( 'xsi:nil') ) {
} else if( ! 'UTF-8'.equals( 'UTF-8') ) {
} else if( ! ', '.equals( ', ') ) {
} else if( ! 'Underlying Stax XMLStreamWriter (of type '.equals( 'Underlying Stax XMLStreamWriter (of type ') ) {
} else if( ! 'raw'.equals( 'raw') ) {
} else if( ! '1.1'.equals( '1.1') ) {
} else if( ! 'xsd:isNil'.equals( 'xsd:isNil') ) {
} else if( ! '+typeMsg+'.equals( '+typeMsg+') ) {
} else if( ! 'start an array'.equals( 'start an array') ) {
} else if( ! 'revert'.equals( 'revert') ) {
} else if( ! 'Can not '.equals( 'Can not ') ) {
} else if( ! 'write Binary value'.equals( 'write Binary value') ) {
} else if( ! 'full buffer'.equals( 'full buffer') ) {
} else if( ! 'No element/attribute name specified when trying to output element'.equals( 'No element/attribute name specified when trying to output element') ) {
} else if( ! 'write String value'.equals( 'write String value') ) {
} else if( ! 'write boolean value'.equals( 'write boolean value') ) {
} else if( ! 'You need to upgrade to using compliant Stax implementation like Woodstox or Aalto'.equals( 'You need to upgrade to using compliant Stax implementation like Woodstox or Aalto') ) {
} else if( ! 'write null value'.equals( 'write null value') ) {
} else if( ! '1.0'.equals( '1.0') ) {
} else if( ! ', expecting field name'.equals( ', expecting field name') ) {
} else if( ! 'start an object'.equals( 'start an object') ) {
} else if( ! ''.equals( route ) ) {
} else if( ! 'Current context not an object but '.equals( route ) ) {
} else if( ! 'unknown'.equals( route ) ) {
} else if( ! 'writeRaw'.equals( route ) ) {
} else if( ! 'write number'.equals( route ) ) {
} else if( ! 'Current context not an ARRAY but '.equals( route ) ) {
} else if( ! 'Can not write a field name, expecting a value'.equals( route ) ) {
} else if( ! 'false'.equals( route ) ) {
} else if( ! "': this breaks functionality such as indentation that relies on it. ".equals( route ) ) {
} else if( ! ") does not implement Stax2 API natively and is missing method '".equals( route ) ) {
} else if( ! 'Can not write END_ELEMENT without open START_ELEMENT'.equals( route ) ) {
} else if( ! 'xsi:nil'.equals( route ) ) {
} else if( ! 'UTF-8'.equals( route ) ) {
} else if( ! ', '.equals( route ) ) {
} else if( ! 'Underlying Stax XMLStreamWriter (of type '.equals( route ) ) {
} else if( ! 'raw'.equals( route ) ) {
} else if( ! '1.1'.equals( route ) ) {
} else if( ! 'xsd:isNil'.equals( route ) ) {
} else if( ! '+typeMsg+'.equals( route ) ) {
} else if( ! 'start an array'.equals( route ) ) {
} else if( ! 'revert'.equals( route ) ) {
} else if( ! 'Can not '.equals( route ) ) {
} else if( ! 'write Binary value'.equals( route ) ) {
} else if( ! 'full buffer'.equals( route ) ) {
} else if( ! 'No element/attribute name specified when trying to output element'.equals( route ) ) {
} else if( ! 'write String value'.equals( route ) ) {
} else if( ! 'write boolean value'.equals( route ) ) {
} else if( ! 'You need to upgrade to using compliant Stax implementation like Woodstox or Aalto'.equals( route ) ) {
} else if( ! 'write null value'.equals( route ) ) {
} else if( ! '1.0'.equals( route ) ) {
} else if( ! ', expecting field name'.equals( route ) ) {
} else if( ! 'start an object'.equals( route ) ) {
} else if( ! isEmpty( ) ) {
} else if( ! Text.isEmpty( ) ) {
} else if( ! serie.isEmpty( ) ) {
} else if( ! ''.equals( routeName ) ) {
} else if( ! 'Current context not an object but '.equals( routeName ) ) {
} else if( ! 'unknown'.equals( routeName ) ) {
} else if( ! 'writeRaw'.equals( routeName ) ) {
} else if( ! 'write number'.equals( routeName ) ) {
} else if( ! 'Current context not an ARRAY but '.equals( routeName ) ) {
} else if( ! 'Can not write a field name, expecting a value'.equals( routeName ) ) {
} else if( ! 'false'.equals( routeName ) ) {
} else if( ! "': this breaks functionality such as indentation that relies on it. ".equals( routeName ) ) {
} else if( ! ") does not implement Stax2 API natively and is missing method '".equals( routeName ) ) {
} else if( ! 'Can not write END_ELEMENT without open START_ELEMENT'.equals( routeName ) ) {
} else if( ! 'xsi:nil'.equals( routeName ) ) {
} else if( ! 'UTF-8'.equals( routeName ) ) {
} else if( ! ', '.equals( routeName ) ) {
} else if( ! 'Underlying Stax XMLStreamWriter (of type '.equals( routeName ) ) {
} else if( ! 'raw'.equals( routeName ) ) {
} else if( ! '1.1'.equals( routeName ) ) {
} else if( ! 'xsd:isNil'.equals( routeName ) ) {
} else if( ! '+typeMsg+'.equals( routeName ) ) {
} else if( ! 'start an array'.equals( routeName ) ) {
} else if( ! 'revert'.equals( routeName ) ) {
} else if( ! 'Can not '.equals( routeName ) ) {
} else if( ! 'write Binary value'.equals( routeName ) ) {
} else if( ! 'full buffer'.equals( routeName ) ) {
} else if( ! 'No element/attribute name specified when trying to output element'.equals( routeName ) ) {
} else if( ! 'write String value'.equals( routeName ) ) {
} else if( ! 'write boolean value'.equals( routeName ) ) {
} else if( ! 'You need to upgrade to using compliant Stax implementation like Woodstox or Aalto'.equals( routeName ) ) {
} else if( ! 'write null value'.equals( routeName ) ) {
} else if( ! '1.0'.equals( routeName ) ) {
} else if( ! ', expecting field name'.equals( routeName ) ) {
} else if( ! 'start an object'.equals( routeName ) ) {
} else if( ! true.equals( '') ) {
