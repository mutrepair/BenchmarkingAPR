long value =( bytes [ offset + BYTE_2] << BYTE_2_SHIFT ) ^ BYTE_2_MASK ;
long value =( bytes [ offset + BYTE_0] << BYTE_0_SHIFT ) ^ BYTE_0_MASK ;
long value =( bytes [ offset + BYTE_4] << BYTE_4_SHIFT ) ^ BYTE_4_MASK ;
long value =( bytes [ offset + BYTE_24] << BYTE_24_SHIFT ) ^ BYTE_24_MASK ;
long value =( bytes [ offset + BYTE_00] << BYTE_00_SHIFT ) ^ BYTE_00_MASK ;
long value =( bytes [ offset + BYTE_16] << BYTE_16_SHIFT ) ^ BYTE_16_MASK ;
long value =( bytes [ offset + BYTE_3] << BYTE_3_SHIFT ) ^ BYTE_3_MASK ;
long value =( bytes [ offset + BYTE_0000] << BYTE_0000_SHIFT ) ^ BYTE_0000_MASK ;
long value =( bytes [ offset + BYTE_1] << BYTE_1_SHIFT ) ^ BYTE_1_MASK ;
long value =( bytes [ offset + BYTE_8] << BYTE_8_SHIFT ) ^ BYTE_8_MASK ;
long value =( bytes [ offset + BYTE_000000] << BYTE_000000_SHIFT ) ^ BYTE_000000_MASK ;
long value =( bytes [ offset + BYTE_2] >> BYTE_2_SHIFT ) ^ BYTE_2_MASK ;
long value =( bytes [ offset + BYTE_0] >> BYTE_0_SHIFT ) ^ BYTE_0_MASK ;
long value =( bytes [ offset + BYTE_4] >> BYTE_4_SHIFT ) ^ BYTE_4_MASK ;
long value =( bytes [ offset + BYTE_24] >> BYTE_24_SHIFT ) ^ BYTE_24_MASK ;
long value =( bytes [ offset + BYTE_00] >> BYTE_00_SHIFT ) ^ BYTE_00_MASK ;
long value =( bytes [ offset + BYTE_16] >> BYTE_16_SHIFT ) ^ BYTE_16_MASK ;
long value =( bytes [ offset + BYTE_3] >> BYTE_3_SHIFT ) ^ BYTE_3_MASK ;
long value =( bytes [ offset + BYTE_0000] >> BYTE_0000_SHIFT ) ^ BYTE_0000_MASK ;
long value =( bytes [ offset + BYTE_1] >> BYTE_1_SHIFT ) ^ BYTE_1_MASK ;
long value =( bytes [ offset + BYTE_8] >> BYTE_8_SHIFT ) ^ BYTE_8_MASK ;
long value =( bytes [ offset + BYTE_000000] >> BYTE_000000_SHIFT ) ^ BYTE_000000_MASK ;
long value =( bytes [ offset + BYTE_2] << BYTE_2_SHIFT +1) ^ BYTE_2_MASK ;
long value =( bytes [ offset + BYTE_0] << BYTE_0_SHIFT +1) ^ BYTE_0_MASK ;
long value =( bytes [ offset + BYTE_4] << BYTE_4_SHIFT +1) ^ BYTE_4_MASK ;
long value =( bytes [ offset + BYTE_24] << BYTE_24_SHIFT +1) ^ BYTE_24_MASK ;
long value =( bytes [ offset + BYTE_00] << BYTE_00_SHIFT +1) ^ BYTE_00_MASK ;
long value =( bytes [ offset + BYTE_16] << BYTE_16_SHIFT +1) ^ BYTE_16_MASK ;
long value =( bytes [ offset + BYTE_3] << BYTE_3_SHIFT +1) ^ BYTE_3_MASK ;
long value =( bytes [ offset + BYTE_0000] << BYTE_0000_SHIFT +1) ^ BYTE_0000_MASK ;
long value =( bytes [ offset + BYTE_1] << BYTE_1_SHIFT +1) ^ BYTE_1_MASK ;
long value =( bytes [ offset + BYTE_8] << BYTE_8_SHIFT +1) ^ BYTE_8_MASK ;
long value =( bytes [ offset + BYTE_000000] << BYTE_000000_SHIFT +1) ^ BYTE_000000_MASK ;
int value =( bytes [ offset + BYTE_2] << BYTE_2_SHIFT ) ^ BYTE_2_MASK ;
int value =( bytes [ offset + BYTE_0] << BYTE_0_SHIFT ) ^ BYTE_0_MASK ;
int value =( bytes [ offset + BYTE_4] << BYTE_4_SHIFT ) ^ BYTE_4_MASK ;
int value =( bytes [ offset + BYTE_24] << BYTE_24_SHIFT ) ^ BYTE_24_MASK ;
int value =( bytes [ offset + BYTE_00] << BYTE_00_SHIFT ) ^ BYTE_00_MASK ;
int value =( bytes [ offset + BYTE_16] << BYTE_16_SHIFT ) ^ BYTE_16_MASK ;
int value =( bytes [ offset + BYTE_3] << BYTE_3_SHIFT ) ^ BYTE_3_MASK ;
int value =( bytes [ offset + BYTE_0000] << BYTE_0000_SHIFT ) ^ BYTE_0000_MASK ;
int value =( bytes [ offset + BYTE_1] << BYTE_1_SHIFT ) ^ BYTE_1_MASK ;
int value =( bytes [ offset + BYTE_8] << BYTE_8_SHIFT ) ^ BYTE_8_MASK ;
int value =( bytes [ offset + BYTE_000000] << BYTE_000000_SHIFT ) ^ BYTE_000000_MASK ;
long value =(( bytes [ offset + BYTE_2] << BYTE_2_SHIFT ) ^ BYTE_2_MASK ;
long value =(( bytes [ offset + BYTE_0] << BYTE_0_SHIFT ) ^ BYTE_0_MASK ;
long value =(( bytes [ offset + BYTE_4] << BYTE_4_SHIFT ) ^ BYTE_4_MASK ;
long value =(( bytes [ offset + BYTE_24] << BYTE_24_SHIFT ) ^ BYTE_24_MASK ;
long value =(( bytes [ offset + BYTE_00] << BYTE_00_SHIFT ) ^ BYTE_00_MASK ;
long value =(( bytes [ offset + BYTE_16] << BYTE_16_SHIFT ) ^ BYTE_16_MASK ;
long value =(( bytes [ offset + BYTE_3] << BYTE_3_SHIFT ) ^ BYTE_3_MASK ;
long value =(( bytes [ offset + BYTE_0000] << BYTE_0000_SHIFT ) ^ BYTE_0000_MASK ;
long value =(( bytes [ offset + BYTE_1] << BYTE_1_SHIFT ) ^ BYTE_1_MASK ;
long value =(( bytes [ offset + BYTE_8] << BYTE_8_SHIFT ) ^ BYTE_8_MASK ;
long value =(( bytes [ offset + BYTE_000000] << BYTE_000000_SHIFT ) ^ BYTE_000000_MASK ;
long value =( bytes [ offset + BYTE_2] & BYTE_2_SHIFT ) ^ BYTE_2_MASK ;
long value =( bytes [ offset + BYTE_0] & BYTE_0_SHIFT ) ^ BYTE_0_MASK ;
long value =( bytes [ offset + BYTE_4] & BYTE_4_SHIFT ) ^ BYTE_4_MASK ;
long value =( bytes [ offset + BYTE_24] & BYTE_24_SHIFT ) ^ BYTE_24_MASK ;
long value =( bytes [ offset + BYTE_00] & BYTE_00_SHIFT ) ^ BYTE_00_MASK ;
long value =( bytes [ offset + BYTE_16] & BYTE_16_SHIFT ) ^ BYTE_16_MASK ;
long value =( bytes [ offset + BYTE_3] & BYTE_3_SHIFT ) ^ BYTE_3_MASK ;
long value =( bytes [ offset + BYTE_0000] & BYTE_0000_SHIFT ) ^ BYTE_0000_MASK ;
long value =( bytes [ offset + BYTE_1] & BYTE_1_SHIFT ) ^ BYTE_1_MASK ;
long value =( bytes [ offset + BYTE_8] & BYTE_8_SHIFT ) ^ BYTE_8_MASK ;
long value =( bytes [ offset + BYTE_000000] & BYTE_000000_SHIFT ) ^ BYTE_000000_MASK ;
long value =( bytes [ offset + BYTE_2] << BYTE_2_SHIFT ) ^ BYTE_2_MASK ) ;
long value =( bytes [ offset + BYTE_0] << BYTE_0_SHIFT ) ^ BYTE_0_MASK ) ;
long value =( bytes [ offset + BYTE_4] << BYTE_4_SHIFT ) ^ BYTE_4_MASK ) ;
long value =( bytes [ offset + BYTE_24] << BYTE_24_SHIFT ) ^ BYTE_24_MASK ) ;
long value =( bytes [ offset + BYTE_00] << BYTE_00_SHIFT ) ^ BYTE_00_MASK ) ;
long value =( bytes [ offset + BYTE_16] << BYTE_16_SHIFT ) ^ BYTE_16_MASK ) ;
long value =( bytes [ offset + BYTE_3] << BYTE_3_SHIFT ) ^ BYTE_3_MASK ) ;
long value =( bytes [ offset + BYTE_0000] << BYTE_0000_SHIFT ) ^ BYTE_0000_MASK ) ;
long value =( bytes [ offset + BYTE_1] << BYTE_1_SHIFT ) ^ BYTE_1_MASK ) ;
long value =( bytes [ offset + BYTE_8] << BYTE_8_SHIFT ) ^ BYTE_8_MASK ) ;
long value =( bytes [ offset + BYTE_000000] << BYTE_000000_SHIFT ) ^ BYTE_000000_MASK ) ;
long value =( bytes [ offset + BYTE_2] << BYTE_2_SHIFT +2) ^ BYTE_2_MASK ;
long value =( bytes [ offset + BYTE_0] << BYTE_0_SHIFT +0) ^ BYTE_0_MASK ;
long value =( bytes [ offset + BYTE_4] << BYTE_4_SHIFT +4) ^ BYTE_4_MASK ;
long value =( bytes [ offset + BYTE_24] << BYTE_24_SHIFT +24) ^ BYTE_24_MASK ;
long value =( bytes [ offset + BYTE_00] << BYTE_00_SHIFT +00) ^ BYTE_00_MASK ;
long value =( bytes [ offset + BYTE_16] << BYTE_16_SHIFT +16) ^ BYTE_16_MASK ;
long value =( bytes [ offset + BYTE_3] << BYTE_3_SHIFT +3) ^ BYTE_3_MASK ;
long value =( bytes [ offset + BYTE_0000] << BYTE_0000_SHIFT +0000) ^ BYTE_0000_MASK ;
long value =( bytes [ offset + BYTE_1] << BYTE_1_SHIFT +1) ^ BYTE_1_MASK ;
long value =( bytes [ offset + BYTE_8] << BYTE_8_SHIFT +8) ^ BYTE_8_MASK ;
long value =( bytes [ offset + BYTE_000000] << BYTE_000000_SHIFT +000000) ^ BYTE_000000_MASK ;
long value =( bytes [ offset + BYTE_2] << BYTE_2_SHIFT ) ^ BYTE_2_MASK +1;
long value =( bytes [ offset + BYTE_0] << BYTE_0_SHIFT ) ^ BYTE_0_MASK +1;
long value =( bytes [ offset + BYTE_4] << BYTE_4_SHIFT ) ^ BYTE_4_MASK +1;
long value =( bytes [ offset + BYTE_24] << BYTE_24_SHIFT ) ^ BYTE_24_MASK +1;
long value =( bytes [ offset + BYTE_00] << BYTE_00_SHIFT ) ^ BYTE_00_MASK +1;
long value =( bytes [ offset + BYTE_16] << BYTE_16_SHIFT ) ^ BYTE_16_MASK +1;
long value =( bytes [ offset + BYTE_3] << BYTE_3_SHIFT ) ^ BYTE_3_MASK +1;
long value =( bytes [ offset + BYTE_0000] << BYTE_0000_SHIFT ) ^ BYTE_0000_MASK +1;
long value =( bytes [ offset + BYTE_1] << BYTE_1_SHIFT ) ^ BYTE_1_MASK +1;
long value =( bytes [ offset + BYTE_8] << BYTE_8_SHIFT ) ^ BYTE_8_MASK +1;
long value =( bytes [ offset + BYTE_000000] << BYTE_000000_SHIFT ) ^ BYTE_000000_MASK +1;
long value =( bytes [ offset - BYTE_2] << BYTE_2_SHIFT ) ^ BYTE_2_MASK ;
