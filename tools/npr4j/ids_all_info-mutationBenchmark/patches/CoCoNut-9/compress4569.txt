( generalPurposeFlag | ZipArchiveOutputStream.FLAT_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.OUT_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.concatenate_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.toString( ) ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.EQUALS_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getDefault( ) ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getTime( ) ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.delivered_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.00001_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.Trained_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getName( ) ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.AUCTION_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getInstance( ) ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.THIS_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getContext( ) ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.F_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.close_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getPath( ) ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.fast_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.cross_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.Output_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getCount( ) ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getText( ) ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.package_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.redstone_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getCode( ) ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.FIVE_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.concatenate_FLAG_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.FLAT_FLAG_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.toString( ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.END_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.GOING_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getLoaded( ) ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.l_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.side_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getTime( ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.schema_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.OUT_FLAG_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.edge_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.Typed_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.equals( 'License') ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.equals( 'UTF8') ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.equals( 'Found unsupported compression method ') ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.equals( ' corrupt archive.') ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.equals( 'r') ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.equals( 'AS IS') ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.equals( 'http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html') ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.equals( 'failed to skip file name in') ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.equals( ' local file header') ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.equals( 'archive is not a ZIP archive') ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.equals( "central directory is empty, can't expand") ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.class ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.JAXRS_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.ONE_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getParent( ) ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.add_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.Stack_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.chunk_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.SUB_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.L ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.debug_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.translate_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.scl_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.flat_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.length ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.BEDROCK_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.doubles_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.ORB_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.continuous_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.radians_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.Colorizer_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.correct_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.triangle_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.Stdout_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.tp_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.vanity_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.working_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.NONE_FLAG ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.get(0) !=0;
( generalPurposeFlag | ZipArchiveOutputStream != null ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.toString( ) ;
( generalPurposeFlag | ZipArchiveOutputStream.getTime( ) ==0;
( generalPurposeFlag | ZipArchiveOutputStream == null ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getInstance( ) != null ;
( generalPurposeFlag | ZipArchiveOutputStream.( ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getInstance( ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getDefault( ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getFile( ) !=0;
( generalPurposeFlag | ZipArchiveOutputStream.getDefault( ) != null ;
( generalPurposeFlag | ZipArchiveOutputStream == null ;
( generalPurposeFlag | ZipArchiveOutputStream != null ;
( generalPurposeFlag | File.separator ) !=0;
( generalPurposeFlag ) !=0;
( generalPurposeFlag |( 'License') !=0;
( generalPurposeFlag |( 'UTF8') !=0;
( generalPurposeFlag |( 'Found unsupported compression method ') !=0;
( generalPurposeFlag |( ' corrupt archive.') !=0;
( generalPurposeFlag |( 'r') !=0;
( generalPurposeFlag |( 'AS IS') !=0;
