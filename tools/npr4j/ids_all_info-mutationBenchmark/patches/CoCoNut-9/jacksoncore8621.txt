_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr -_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr *_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr ,_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,_inputPtr ) ) ;
_textBuffer.reset(_inputBuffer ,_inputPtr ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithDefault(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr == -_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr ) +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,_inputPtr ,( ptr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,0) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,77) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,3) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,25) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,8) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,32) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,2) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,2008) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,4) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,16) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,173) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,7) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,69) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,64) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,6) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,2009) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,18) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,9) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,5) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,19) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,0) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,631) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,12) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ,1) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr &_inputPtr ) ) ;
_textBuffer.resetOfShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetBeingShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '/') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' in a comment') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '\f') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'ALLOW_COMMENTS') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+b64variant+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+b64variant.getPaddingChar()+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '): ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' in character escape sequence') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '*') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Exponent indicator not followed by a digit') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Failed to decode VALUE_STRING as base64 (') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'null') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '\r') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '\t') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '"+b64variant.getPaddingChar()+"') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Reader returned 0 characters when trying to read ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'n') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Unexpected end-of-input within/between ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "expected padding character '") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "'") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' || c == ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'NaN') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'name') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Infinity') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+Infinity') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' || ch > ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "Unrecognized token '") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'expected a digit for number exponent') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'ReaderBasedNumericParser') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'I') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '-') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '"+((char) i), ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+_parsingContext.getTypeDesc()+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'N') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '.') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'E') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '-Infinity') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ": was expecting closing '") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'expected digit (0-9) to follow minus sign, for valid numeric value') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '_nextAfterName') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Leading zeroes not allowed') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ': was expecting closing quote for a string value') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "Non-standard token '") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Missing integer part (next char ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' or ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'll eagerly parse contents; this so that there') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ') not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '\n') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ')') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '"+((char) endChar)+"') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+sb.toString()+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'string value') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '"+sb.toString()+"') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "was expecting either '*' or '/' for a comment") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "'null', 'true', 'false' or NaN") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'own') ) ;
