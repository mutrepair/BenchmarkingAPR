throw new IllegalArgumentException( 'License') ;
throw new IllegalArgumentException( '@return') ;
throw new IllegalArgumentException( 'meaning') ;
throw new IllegalArgumentException( 'String has leading or trailing whitespace') ;
throw new IllegalArgumentException( 'param') ;
throw new IllegalArgumentException( ' ') ;
throw new IllegalArgumentException( 'AS IS') ;
throw new IllegalArgumentException( ' and ') ;
throw new IllegalArgumentException( 'GPL') ;
throw new IllegalArgumentException( 'API tried to add two incompatible type tags. ') ;
throw new IllegalArgumentException( '@param') ;
throw new IllegalArgumentException( 'meanings') ;
throw new IllegalArgumentException( 'This should have been blocked and emitted a warning.') ;
throw new IllegalArgumentException( 'see') ;
throw new IllegalArgumentException( 'boolean') ;
throw new IllegalArgumentException( 'JSDocInfo') ;
throw new IllegalArgumentException( 'owner') ;
throw new IllegalStateException( 'License') ;
throw new IllegalStateException( '@return') ;
throw new IllegalStateException( 'meaning') ;
throw new IllegalStateException( 'String has leading or trailing whitespace') ;
throw new IllegalStateException( 'param') ;
throw new IllegalStateException( ' ') ;
throw new IllegalStateException( 'AS IS') ;
throw new IllegalStateException( ' and ') ;
throw new IllegalStateException( 'GPL') ;
throw new IllegalStateException( 'API tried to add two incompatible type tags. ') ;
throw new IllegalStateException( '@param') ;
throw new IllegalStateException( 'meanings') ;
throw new IllegalStateException( 'This should have been blocked and emitted a warning.') ;
throw new IllegalStateException( 'see') ;
throw new IllegalStateException( 'boolean') ;
throw new IllegalStateException( 'JSDocInfo') ;
throw new IllegalStateException( 'owner') ;
throw new RuntimeException( e.getMessage( ) ) ;
return this.getName( ).equals( 'License') ;
return this.getName( ).equals( '@return') ;
return this.getName( ).equals( 'meaning') ;
return this.getName( ).equals( 'String has leading or trailing whitespace') ;
return this.getName( ).equals( 'param') ;
return this.getName( ).equals( ' ') ;
return this.getName( ).equals( 'AS IS') ;
return this.getName( ).equals( ' and ') ;
return this.getName( ).equals( 'GPL') ;
return this.getName( ).equals( 'API tried to add two incompatible type tags. ') ;
return this.getName( ).equals( '@param') ;
return this.getName( ).equals( 'meanings') ;
return this.getName( ).equals( 'This should have been blocked and emitted a warning.') ;
return this.getName( ).equals( 'see') ;
return this.getName( ).equals( 'boolean') ;
return this.getName( ).equals( 'JSDocInfo') ;
return this.getName( ).equals( 'owner') ;
throw new RuntimeException( 'License') ;
throw new RuntimeException( '@return') ;
throw new RuntimeException( 'meaning') ;
throw new RuntimeException( 'String has leading or trailing whitespace') ;
throw new RuntimeException( 'param') ;
throw new RuntimeException( ' ') ;
throw new RuntimeException( 'AS IS') ;
throw new RuntimeException( ' and ') ;
throw new RuntimeException( 'GPL') ;
throw new RuntimeException( 'API tried to add two incompatible type tags. ') ;
throw new RuntimeException( '@param') ;
throw new RuntimeException( 'meanings') ;
throw new RuntimeException( 'This should have been blocked and emitted a warning.') ;
throw new RuntimeException( 'see') ;
throw new RuntimeException( 'boolean') ;
throw new RuntimeException( 'JSDocInfo') ;
throw new RuntimeException( 'owner') ;
return true.replaceAll( 'License', 'License') ;
return true.replaceAll( '@return', '@return') ;
return true.replaceAll( 'meaning', 'meaning') ;
return true.replaceAll( 'String has leading or trailing whitespace', 'String has leading or trailing whitespace') ;
return true.replaceAll( 'param', 'param') ;
return true.replaceAll( ' ', ' ') ;
return true.replaceAll( 'AS IS', 'AS IS') ;
return true.replaceAll( ' and ', ' and ') ;
return true.replaceAll( 'GPL', 'GPL') ;
return true.replaceAll( 'API tried to add two incompatible type tags. ', 'API tried to add two incompatible type tags. ') ;
return true.replaceAll( '@param', '@param') ;
return true.replaceAll( 'meanings', 'meanings') ;
return true.replaceAll( 'This should have been blocked and emitted a warning.', 'This should have been blocked and emitted a warning.') ;
return true.replaceAll( 'see', 'see') ;
return true.replaceAll( 'boolean', 'boolean') ;
return true.replaceAll( 'JSDocInfo', 'JSDocInfo') ;
return true.replaceAll( 'owner', 'owner') ;
return this.getName( ).isEmpty( ) ;
return concept.getName( ).equals( 'License') ;
return concept.getName( ).equals( '@return') ;
return concept.getName( ).equals( 'meaning') ;
return concept.getName( ).equals( 'String has leading or trailing whitespace') ;
return concept.getName( ).equals( 'param') ;
return concept.getName( ).equals( ' ') ;
return concept.getName( ).equals( 'AS IS') ;
return concept.getName( ).equals( ' and ') ;
return concept.getName( ).equals( 'GPL') ;
return concept.getName( ).equals( 'API tried to add two incompatible type tags. ') ;
return concept.getName( ).equals( '@param') ;
return concept.getName( ).equals( 'meanings') ;
return concept.getName( ).equals( 'This should have been blocked and emitted a warning.') ;
