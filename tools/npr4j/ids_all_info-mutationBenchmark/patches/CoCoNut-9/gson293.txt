System.out.println( 'License') ;
System.out.println( 'The specified type handler for type ') ;
System.out.println( '. Gson does not allow this.') ;
System.out.println( ':') ;
System.out.println( '}') ;
System.out.println( ' hides the previously registered type hierarchy handler for ') ;
System.out.println( 'Overriding the existing type handler for {0}') ;
System.out.println( 'AS IS') ;
System.out.println( '{mapForTypeHierarchy:{') ;
System.out.println( ',') ;
System.out.println( '},map:{') ;
System.out.println( 'Attempted to modify an unmodifiable map.') ;
System.err.println( 'License') ;
System.err.println( 'The specified type handler for type ') ;
System.err.println( '. Gson does not allow this.') ;
System.err.println( ':') ;
System.err.println( '}') ;
System.err.println( ' hides the previously registered type hierarchy handler for ') ;
System.err.println( 'Overriding the existing type handler for {0}') ;
System.err.println( 'AS IS') ;
System.err.println( '{mapForTypeHierarchy:{') ;
System.err.println( ',') ;
System.err.println( '},map:{') ;
System.err.println( 'Attempted to modify an unmodifiable map.') ;
System.out.println( 'License'+ name ) ;
System.out.println( 'The specified type handler for type '+ name ) ;
System.out.println( '. Gson does not allow this.'+ name ) ;
System.out.println( ':'+ name ) ;
System.out.println( '}'+ name ) ;
System.out.println( ' hides the previously registered type hierarchy handler for '+ name ) ;
System.out.println( 'Overriding the existing type handler for {0}'+ name ) ;
System.out.println( 'AS IS'+ name ) ;
System.out.println( '{mapForTypeHierarchy:{'+ name ) ;
System.out.println( ','+ name ) ;
System.out.println( '},map:{'+ name ) ;
System.out.println( 'Attempted to modify an unmodifiable map.'+ name ) ;
Log.d( 'License', 'License') ;
Log.d( 'The specified type handler for type ', 'The specified type handler for type ') ;
Log.d( '. Gson does not allow this.', '. Gson does not allow this.') ;
Log.d( ':', ':') ;
Log.d( '}', '}') ;
Log.d( ' hides the previously registered type hierarchy handler for ', ' hides the previously registered type hierarchy handler for ') ;
Log.d( 'Overriding the existing type handler for {0}', 'Overriding the existing type handler for {0}') ;
Log.d( 'AS IS', 'AS IS') ;
Log.d( '{mapForTypeHierarchy:{', '{mapForTypeHierarchy:{') ;
Log.d( ',', ',') ;
Log.d( '},map:{', '},map:{') ;
Log.d( 'Attempted to modify an unmodifiable map.', 'Attempted to modify an unmodifiable map.') ;
System.currentTimeMillis( ) ;
System.out.print( 'License') ;
System.out.print( 'The specified type handler for type ') ;
System.out.print( '. Gson does not allow this.') ;
System.out.print( ':') ;
System.out.print( '}') ;
System.out.print( ' hides the previously registered type hierarchy handler for ') ;
System.out.print( 'Overriding the existing type handler for {0}') ;
System.out.print( 'AS IS') ;
System.out.print( '{mapForTypeHierarchy:{') ;
System.out.print( ',') ;
System.out.print( '},map:{') ;
System.out.print( 'Attempted to modify an unmodifiable map.') ;
Log.e( 'License', 'License') ;
Log.e( 'The specified type handler for type ', 'The specified type handler for type ') ;
Log.e( '. Gson does not allow this.', '. Gson does not allow this.') ;
Log.e( ':', ':') ;
Log.e( '}', '}') ;
Log.e( ' hides the previously registered type hierarchy handler for ', ' hides the previously registered type hierarchy handler for ') ;
Log.e( 'Overriding the existing type handler for {0}', 'Overriding the existing type handler for {0}') ;
Log.e( 'AS IS', 'AS IS') ;
Log.e( '{mapForTypeHierarchy:{', '{mapForTypeHierarchy:{') ;
Log.e( ',', ',') ;
Log.e( '},map:{', '},map:{') ;
Log.e( 'Attempted to modify an unmodifiable map.', 'Attempted to modify an unmodifiable map.') ;
throw new IllegalArgumentException( 'License') ;
throw new IllegalArgumentException( 'The specified type handler for type ') ;
throw new IllegalArgumentException( '. Gson does not allow this.') ;
throw new IllegalArgumentException( ':') ;
throw new IllegalArgumentException( '}') ;
throw new IllegalArgumentException( ' hides the previously registered type hierarchy handler for ') ;
throw new IllegalArgumentException( 'Overriding the existing type handler for {0}') ;
throw new IllegalArgumentException( 'AS IS') ;
throw new IllegalArgumentException( '{mapForTypeHierarchy:{') ;
throw new IllegalArgumentException( ',') ;
throw new IllegalArgumentException( '},map:{') ;
throw new IllegalArgumentException( 'Attempted to modify an unmodifiable map.') ;
System.out.println( 'License', 'License') ;
System.out.println( 'The specified type handler for type ', 'The specified type handler for type ') ;
System.out.println( '. Gson does not allow this.', '. Gson does not allow this.') ;
System.out.println( ':', ':') ;
System.out.println( '}', '}') ;
System.out.println( ' hides the previously registered type hierarchy handler for ', ' hides the previously registered type hierarchy handler for ') ;
System.out.println( 'Overriding the existing type handler for {0}', 'Overriding the existing type handler for {0}') ;
System.out.println( 'AS IS', 'AS IS') ;
System.out.println( '{mapForTypeHierarchy:{', '{mapForTypeHierarchy:{') ;
System.out.println( ',', ',') ;
System.out.println( '},map:{', '},map:{') ;
System.out.println( 'Attempted to modify an unmodifiable map.', 'Attempted to modify an unmodifiable map.') ;
System.out.println( 'License'+ id ) ;
System.out.println( 'The specified type handler for type '+ id ) ;
System.out.println( '. Gson does not allow this.'+ id ) ;
