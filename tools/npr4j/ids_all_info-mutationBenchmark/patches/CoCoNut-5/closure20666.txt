Name owner = true ? name : parent ;
Name owner = false ? name : parent ;
Name owner = ! name : parent ;
Name owner = null ? name : parent ;
Name owner = parent.getName( ) ;
Name owner =( name : parent ;
Name owner = name : parent ;
Name owner = 'License'? name : parent ;
Name owner = 'Object'? name : parent ;
Name owner = '.prototype'? name : parent ;
Name owner = 'JSC_UNDEFINED_NAME'? name : parent ;
Name owner = 'Function'? name : parent ;
Name owner = 'AS IS'? name : parent ;
Name owner = '{0} defined before its owner. {1} is defined at {2}:{3}'? name : parent ;
Name owner = 'JSC_NAME_DEFINED_LATE'? name : parent ;
Name owner = 'module {1}'? name : parent ;
Name owner = 'JSC_STRICT_MODULE_DEP_QNAME'? name : parent ;
Name owner = '{0} is never defined'? name : parent ;
Name owner = 'module {0} cannot reference {2}, defined in '? name : parent ;
Name owner = name : false ? name : parent ;
Name owner = name : null ? name : parent ;
Name owner = this.getName( ) ;
Name owner = context.getName( ) ;
Name owner = user.getName( ) ;
name : parent.getName( ) ;
Name owner = false ? name : null ;
Name owner = true ? name : null ;
Name owner = owner.getName( ) ;
Name owner = getName( ) ;
Name owner = child.getName( ) ;
Name owner = owner == null ? name : parent ;
Name owner = new Name( name : parent ;
Name owner = other.getName( ) ;
Name owner = new Name( name ) ;
Name owner = owner != null ? name : parent ;
String owner = false ? name : parent ;
Name owner = type.getName( ) ;
Name owner = getName( ) : parent ;
Name owner = true ? name : child ;
String owner = true ? name : parent ;
Name owner = name : true ? name : parent ;
Name owner =( Name ) name : parent ;
Name owner = false ? name : child ;
Name owner = item.getName( ) ;
Name owner = super.getName( ) ;
Name owner = true ? name : parent + 'License';
Name owner = true ? name : parent + 'Object';
Name owner = true ? name : parent + '.prototype';
Name owner = true ? name : parent + 'JSC_UNDEFINED_NAME';
Name owner = true ? name : parent + 'Function';
Name owner = true ? name : parent + 'AS IS';
Name owner = true ? name : parent + '{0} defined before its owner. {1} is defined at {2}:{3}';
Name owner = true ? name : parent + 'JSC_NAME_DEFINED_LATE';
Name owner = true ? name : parent + 'module {1}';
Name owner = true ? name : parent + 'JSC_STRICT_MODULE_DEP_QNAME';
Name owner = true ? name : parent + '{0} is never defined';
Name owner = true ? name : parent + 'module {0} cannot reference {2}, defined in ';
Name owner = false ? name : name ;
Name owner = true ? name : name ;
Name owner = configuration.getName( ) ;
Name owner = ! name.equals( name ) ;
Name owner = group.getName( ) ;
Name owner = 'License'+ name : parent ;
Name owner = 'Object'+ name : parent ;
Name owner = '.prototype'+ name : parent ;
Name owner = 'JSC_UNDEFINED_NAME'+ name : parent ;
Name owner = 'Function'+ name : parent ;
Name owner = 'AS IS'+ name : parent ;
Name owner = '{0} defined before its owner. {1} is defined at {2}:{3}'+ name : parent ;
Name owner = 'JSC_NAME_DEFINED_LATE'+ name : parent ;
Name owner = 'module {1}'+ name : parent ;
Name owner = 'JSC_STRICT_MODULE_DEP_QNAME'+ name : parent ;
Name owner = '{0} is never defined'+ name : parent ;
Name owner = 'module {0} cannot reference {2}, defined in '+ name : parent ;
Name owner = false ? name : parent + 'License';
Name owner = false ? name : parent + 'Object';
Name owner = false ? name : parent + '.prototype';
Name owner = false ? name : parent + 'JSC_UNDEFINED_NAME';
Name owner = false ? name : parent + 'Function';
Name owner = false ? name : parent + 'AS IS';
Name owner = false ? name : parent + '{0} defined before its owner. {1} is defined at {2}:{3}';
Name owner = false ? name : parent + 'JSC_NAME_DEFINED_LATE';
Name owner = false ? name : parent + 'module {1}';
Name owner = false ? name : parent + 'JSC_STRICT_MODULE_DEP_QNAME';
Name owner = false ? name : parent + '{0} is never defined';
Name owner = false ? name : parent + 'module {0} cannot reference {2}, defined in ';
Name owner = ) ? name : parent ;
Name owner =0? name : parent ;
Name owner = String.valueOf( parent ;
Name owner = node.getName( ) ;
Name owner = true ? ! name : parent ;
Name owner = job.getName( ) ;
Name owner = state.getName( ) ;
Name owner = activity.getName( ) ;
Name owner = owner ? name : parent ;
Name owner = tag.getName( ) ;
name = parent.getName( ) ;
Name owner = target.getName( ) ;
Name owner = sender.getName( ) ;
Name owner = scope.getName( ) ;
