compareNodePointers( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth2) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0) ;
compareNodehum( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodehum( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodehum( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNoderaft( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNoderaft( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNoderaft( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth2-1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1-1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0-1) ;
compareNodePointers( p1.parent , depth2-1, p2.parent , depth2--1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth0-1, p0.parent , depth0--1) ;
compareNodeMasar( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeMasar( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeMasar( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodefragtotal( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodefragtotal( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodefragtotal( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodehum( p1.parent , depth1-1, p2.parent , depth2) ;
compareNodehum( p1.parent , depth1-1, p1.parent , depth1) ;
compareNodehum( p1.parent , depth1-1, p0.parent , depth0) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth1) ;
compareNoderaft( p1.parent , depth1-1, p2.parent , depth2) ;
compareNoderaft( p1.parent , depth1-1, p1.parent , depth1) ;
compareNoderaft( p1.parent , depth1-1, p0.parent , depth0) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth2++1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1++1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0++1) ;
compareNodebinwidth( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodebinwidth( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodebinwidth( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeDifficult( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeDifficult( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeDifficult( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSpelling( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSpelling( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSpelling( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodehum( p1.parent , depth2-1, p2.parent , depth2--1) ;
compareNodehum( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodehum( p1.parent , depth0-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth21) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth11) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth01) ;
compareNodeYB( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeYB( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeYB( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth2-1, p2.parent , depth2) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1) ;
compareNodePointers( p1.parent , depth0-1, p0.parent , depth0) ;
compareNodehum( p1.parent , depth1-1, p2.parent , depth2-1) ;
compareNodehum( p1.parent , depth1-1, p1.parent , depth1-1) ;
compareNodehum( p1.parent , depth1-1, p0.parent , depth0-1) ;
compareNodeMasar( p1.parent , depth1-1, p2.parent , depth2) ;
compareNodeMasar( p1.parent , depth1-1, p1.parent , depth1) ;
compareNodeMasar( p1.parent , depth1-1, p0.parent , depth0) ;
compareNodeContributed( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeContributed( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeContributed( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth2--0) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--0) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodehum( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodehum( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodehum( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNoderaft( p1.parent , depth1-1, p2.parent , depth2-1) ;
compareNoderaft( p1.parent , depth1-1, p1.parent , depth1-1) ;
compareNoderaft( p1.parent , depth1-1, p0.parent , depth0-1) ;
compareNodefragtotal( p1.parent , depth1-1, p2.parent , depth2) ;
compareNodefragtotal( p1.parent , depth1-1, p1.parent , depth1) ;
compareNodefragtotal( p1.parent , depth1-1, p0.parent , depth0) ;
compareNoderaft( p1.parent , depth2-1, p2.parent , depth2--1) ;
compareNoderaft( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNoderaft( p1.parent , depth0-1, p0.parent , depth0--1) ;
compareNodeTweeted( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeTweeted( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeTweeted( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNoderaft( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNoderaft( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNoderaft( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodeAdp( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeAdp( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeAdp( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeStraight( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeStraight( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeStraight( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth2d1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1d1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0d1) ;
compareNodeSchools( p1.parent , depth1-1, p2.parent , depth2--1) ;
