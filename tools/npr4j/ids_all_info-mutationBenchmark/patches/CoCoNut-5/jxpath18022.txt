return -1;
return Math.abs( -1) ;
return Integer.parseInt( -1;
return Math.min( -1) ;
return Math.round( -1) ;
return Math.abs( -1;
return Math.max( -1) ;
return -1; return -1;
return Arrays.abs( -1) ;
return Math.sqrt( -1) ;
return Integer.valueOf( -1;
return Double.parseInt( -1;
return -1; / / -1;
return -1-1;
return -1.longValue( ) ;
return -1.0;
return Integer.parse( -1) ;
return -1+1;
return Math.floor( -1) ;
return -1.2;
return -1.0;
return -1.2000;
return -1.3;
return -1.1998;
return -1.1;
return -1.6346532297491082651;
 return( int )( -1) ;
return -1.size( ) ;
return -1) ;
return Math.abs( -2) ;
return Math.abs( -0) ;
return Math.abs( -2000) ;
return Math.abs( -3) ;
return Math.abs( -1998) ;
return Math.abs( -1) ;
return Math.abs( -6346532297491082651) ;
return Integer.compare( -1) ;
return Math.min( -1;
return Math.ceil( -1) ;
return Integer.abs( -1) ;
return -1) return -1;
return Math.round( -1;
return Arrays.abs( -1;
return -1.equals( '') ;
return -1.equals( '/') ;
return -1.equals( 'http://www.w3.org/2000/xmlns/') ;
return -1.equals( '" + escape(id) + "') ;
return -1.equals( "id('") ;
return -1.equals( "/processing-instruction(\'") ;
return -1.equals( 'node()') ;
return -1.equals( 'License') ;
return -1.equals( ':') ;
return -1.equals( 'JXPath internal error: ') ;
return -1.equals( 'Factory is not set on the JXPathContext - cannot create path: ') ;
return -1.equals( '/text()') ;
return -1.equals( '\"') ;
return -1.equals( 'Factory could not create ') ;
return -1.equals( 'a child node for path: ') ;
return -1.equals( '[') ;
return -1.equals( "')") ;
return -1.equals( 'Cannot remove root JDOM node') ;
return -1.equals( 'AS IS') ;
return -1.equals( ' + escape(id) + ') ;
return -1.equals( 'Unknown namespace prefix: ') ;
return -1.equals( ' + asPath() + ') ;
return -1.equals( '\') ;
return -1.equals( 'lang') ;
return -1.equals( '&quot;') ;
return -1.equals( 'http://www.w3.org/XML/1998/namespace') ;
return -1.equals( 'compareChildNodes called for ') ;
return -1.equals( ']') ;
return -1.equals( ' + name + ') ;
return -1.equals( '&apos;') ;
return 0; / / -1;
 return( int )( -1;
return Math.abs( x1) ;
return Integer.MAX_VALUE ;
return size( ) -1;
return -2;
return -0;
return -2000;
return -3;
return -1998;
return -1;
return -6346532297491082651;
return Integer.min( -1) ;
return 1; / / -1;
 return( i -1) ;
return Math.max( -1;
return Math.abs(0) ;
return -1; / /2;
return -1; / /0;
return -1; / /2000;
return -1; / /3;
return -1; / /1998;
return -1; / /1;
return -1; / /6346532297491082651;
return Math.abs(1) ;
return Arrays.copy( ) ;
return -1.length -1;
