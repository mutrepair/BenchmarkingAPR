return 1;
return 1.toString( ) ;
return 1.replace( '', '') ;
return 1.replace( '+Long.MIN_VALUE+', '+Long.MIN_VALUE+') ;
return 1.replace( 'getBinaryValue', 'getBinaryValue') ;
return 1.replace( '+Integer.MIN_VALUE+', '+Integer.MIN_VALUE+') ;
return 1.replace( ') as character #', ') as character #') ;
return 1.replace( "Unexpected padding character ('", "Unexpected padding character ('") ;
return 1.replace( '+b64variant.getPaddingChar()+', '+b64variant.getPaddingChar()+') ;
return 1.replace( '2', '2') ;
return 1.replace( "' (code 0x", "' (code 0x") ;
return 1.replace( "': expected '", "': expected '") ;
return 1.replace( 'JsonNumericParserBase', 'JsonNumericParserBase') ;
return 1.replace( '+numStr+', '+numStr+') ;
return 1.replace( "Unexpected close marker '", "Unexpected close marker '") ;
return 1.replace( ') out of range of int (', ') out of range of int (') ;
return 1.replace( '+startDesc+', '+startDesc+') ;
return 1.replace( '5', '5') ;
return 1.replace( "Malformed numeric value '", "Malformed numeric value '") ;
return 1.replace( '"+((char)ch)+"', '"+((char)ch)+"') ;
return 1.replace( '"+b64variant.getPaddingChar()+"', '"+b64variant.getPaddingChar()+"') ;
return 1.replace( 'Invalid numeric value: ', 'Invalid numeric value: ') ;
return 1.replace( ') in base64 content', ') in base64 content') ;
return 1.replace( '+Integer.toHexString(ch)+', '+Integer.toHexString(ch)+') ;
return 1.replace( "'", "'") ;
return 1.replace( ') out of range of int', ') out of range of int') ;
return 1.replace( '+expCh+', '+expCh+') ;
return 1.replace( 's verify it', 's verify it') ;
return 1.replace( ' (from ', ' (from ') ;
return 1.replace( ' - ', ' - ') ;
return 1.replace( '\0', '\0') ;
return 1.replace( '7', '7') ;
return 1.replace( '+_textBuffer.contentsAsString()+', '+_textBuffer.contentsAsString()+') ;
return 1.replace( '-', '-') ;
return 1.replace( '6', '6') ;
return 1.replace( '+_parsingContext.getTypeDesc()+', '+_parsingContext.getTypeDesc()+') ;
return 1.replace( ': expected ', ': expected ') ;
return 1.replace( '"+((char) actCh)+"', '"+((char) actCh)+"') ;
return 1.replace( '.', '.') ;
return 1.replace( 'E', 'E') ;
return 1.replace( ' starting at ', ' starting at ') ;
return 1.replace( '+(bindex+1)+', '+(bindex+1)+') ;
return 1.replace( '+Integer.MAX_VALUE+', '+Integer.MAX_VALUE+') ;
return 1.replace( ') not numeric, can not use numeric value accessors', ') not numeric, can not use numeric value accessors') ;
return 1.replace( '+', '+') ;
return 1.replace( ' of 4-char base64 unit: padding only legal as 3rd or 4th character', ' of 4-char base64 unit: padding only legal as 3rd or 4th character') ;
return 1.replace( '3', '3') ;
return 1.replace( ')', ')') ;
return 1.replace( '8', '8') ;
return 1.replace( "Illegal character '", "Illegal character '") ;
return 1.replace( 'Illegal white space character (code 0x', 'Illegal white space character (code 0x') ;
return 1.replace( '"+_textBuffer.contentsAsString()+"', '"+_textBuffer.contentsAsString()+"') ;
return 1.replace( "') as character #", "') as character #") ;
return 1.replace( '+((char) actCh)+', '+((char) actCh)+') ;
return 1.replace( '+_getCharDesc(ch)+', '+_getCharDesc(ch)+') ;
return 1.replace( '\\', '\\') ;
return 1.replace( '+_parsingContext.getStartLocation(_ioContext.getSourceReference())+', '+_parsingContext.getStartLocation(_ioContext.getSourceReference())+') ;
return 1.replace( '"+expCh+"', '"+expCh+"') ;
return 1.replace( 'Illegal character (code 0x', 'Illegal character (code 0x') ;
return 1.replace( ': ', ': ') ;
return 1.replace( '"+numStr+"', '"+numStr+"') ;
return 1.replace( ') out of range of long (', ') out of range of long (') ;
return 1.replace( '4', '4') ;
return 1.replace( 'e', 'e') ;
return 1.replace( 'Numeric value (', 'Numeric value (') ;
return 1.replace( 'not available', 'not available') ;
return 1.replace( "' (for ", "' (for ") ;
return 1.replace( '+Long.MAX_VALUE+', '+Long.MAX_VALUE+') ;
return 1.replace( ' of 4-char base64 unit: can only used between units', ' of 4-char base64 unit: can only used between units') ;
return 1.replace( '+_currToken+', '+_currToken+') ;
return 1.replace( '+((char)ch)+', '+((char)ch)+') ;
return 1.replace( ') in numeric value', ') in numeric value') ;
return 1.replace( ': expected close marker for ', ': expected close marker for ') ;
return 1.replace( 'off-by-one', 'off-by-one') ;
return 1.replace( 'Unexpected character (', 'Unexpected character (') ;
return 1.replace( '9', '9') ;
return 1.replace( '0', '0') ;
return 1.replace( 'Current token (', 'Current token (') ;
return 1.replace( ') out of range of Java float', ') out of range of Java float') ;
return 1.replace( '1', '1') ;
return 1.replace( '+getText()+', '+getText()+') ;
return 230;
return 3;
return 0004;
return 22;
return 8;
return 10;
return 2;
return 395;
return 2008;
return 17;
return 4;
return 2011;
return 05;
return 0010;
return 7;
return 0001;
return 6;
return 2009;
return 64;
