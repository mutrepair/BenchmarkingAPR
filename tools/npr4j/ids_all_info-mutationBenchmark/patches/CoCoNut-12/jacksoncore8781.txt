return new ArrayList < String >( ) ;
return new ArrayList < >( ) ;
return new HashSet < >( ) ;
return new ArrayList < Integer >( ) ;
return new HashSet < String >( ) ;
return Integer.valueOf( i ) ;
return new HashSet < Integer >( ) ;
return new HashMap < >( ) ;
return new ArraySet < String >( ) ;
return String.valueOf( i ) ;
return 0;
return getActivity( ).equals( '') ;
return getActivity( ).equals( '/') ;
return getActivity( ).equals( ' in a comment') ;
return getActivity( ).equals( '\f') ;
return getActivity( ).equals( 'ALLOW_COMMENTS') ;
return getActivity( ).equals( '+b64variant+') ;
return getActivity( ).equals( '+b64variant.getPaddingChar()+') ;
return getActivity( ).equals( '): ') ;
return getActivity( ).equals( ' in character escape sequence') ;
return getActivity( ).equals( '*') ;
return getActivity( ).equals( 'Exponent indicator not followed by a digit') ;
return getActivity( ).equals( 'Failed to decode VALUE_STRING as base64 (') ;
return getActivity( ).equals( 'null') ;
return getActivity( ).equals( '\r') ;
return getActivity( ).equals( '\t') ;
return getActivity( ).equals( '"+b64variant.getPaddingChar()+"') ;
return getActivity( ).equals( 'Reader returned 0 characters when trying to read ') ;
return getActivity( ).equals( 'n') ;
return getActivity( ).equals( 'Unexpected end-of-input within/between ') ;
return getActivity( ).equals( "expected padding character '") ;
return getActivity( ).equals( "'") ;
return getActivity( ).equals( ' || c == ') ;
return getActivity( ).equals( 'NaN') ;
return getActivity( ).equals( 'name') ;
return getActivity( ).equals( 'Infinity') ;
return getActivity( ).equals( '+Infinity') ;
return getActivity( ).equals( ' || ch > ') ;
return getActivity( ).equals( "Unrecognized token '") ;
return getActivity( ).equals( 'expected a digit for number exponent') ;
return getActivity( ).equals( 'ReaderBasedNumericParser') ;
return getActivity( ).equals( 'I') ;
return getActivity( ).equals( '-') ;
return getActivity( ).equals( '"+((char) i), ') ;
return getActivity( ).equals( '+_parsingContext.getTypeDesc()+') ;
return getActivity( ).equals( 'N') ;
return getActivity( ).equals( '.') ;
return getActivity( ).equals( 'E') ;
return getActivity( ).equals( '-Infinity') ;
return getActivity( ).equals( ": was expecting closing '") ;
return getActivity( ).equals( 'expected digit (0-9) to follow minus sign, for valid numeric value') ;
return getActivity( ).equals( '_nextAfterName') ;
return getActivity( ).equals( 'Leading zeroes not allowed') ;
return getActivity( ).equals( ': was expecting closing quote for a string value') ;
return getActivity( ).equals( "Non-standard token '") ;
return getActivity( ).equals( '+') ;
return getActivity( ).equals( 'Missing integer part (next char ') ;
return getActivity( ).equals( ' or ') ;
return getActivity( ).equals( 'll eagerly parse contents; this so that there') ;
return getActivity( ).equals( ') not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary') ;
return getActivity( ).equals( '\n') ;
return getActivity( ).equals( ')') ;
return getActivity( ).equals( '"+((char) endChar)+"') ;
return getActivity( ).equals( '+sb.toString()+') ;
return getActivity( ).equals( 'string value') ;
return getActivity( ).equals( '"+sb.toString()+"') ;
return getActivity( ).equals( "Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
return getActivity( ).equals( "was expecting either '*' or '/' for a comment") ;
return getActivity( ).equals( "'null', 'true', 'false' or NaN") ;
return getActivity( ).equals( 'own') ;
return getActivity( ).equals( "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
return getActivity( ).equals( 'expected a value') ;
return getActivity( ).equals( 'was expecting double-quote to start field name') ;
return getActivity( ).equals( ' entries') ;
return getActivity( ).equals( "' for name") ;
return getActivity( ).equals( '\') ;
return getActivity( ).equals( '+match+') ;
return getActivity( ).equals( 'resource') ;
return getActivity( ).equals( "': was expecting ") ;
return getActivity( ).equals( 'expected a hex-digit for character escape sequence') ;
return getActivity( ).equals( 'false') ;
return getActivity( ).equals( '+INF') ;
return getActivity( ).equals( ' && c <= ') ;
return getActivity( ).equals( '+((char) endChar)+') ;
return getActivity( ).equals( 'missing') ;
return getActivity( ).equals( 'was expecting comma to separate ') ;
return getActivity( ).equals( "Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
return getActivity( ).equals( 'expect-value') ;
return getActivity( ).equals( 'true') ;
return getActivity( ).equals( 'e') ;
return getActivity( ).equals( 'was expecting a colon to separate field name and value') ;
return getActivity( ).equals( 'Decimal point not followed by a digit') ;
return getActivity( ).equals( '+_getCharDesc(c)+') ;
return getActivity( ).equals( 'real') ;
return getActivity( ).equals( ', ') ;
return getActivity( ).equals( '-INF') ;
return getActivity( ).equals( "('true', 'false' or 'null')") ;
return getActivity( ).equals( '+_currToken+') ;
return getActivity( ).equals( '}') ;
return getActivity( ).equals( ' :') ;
