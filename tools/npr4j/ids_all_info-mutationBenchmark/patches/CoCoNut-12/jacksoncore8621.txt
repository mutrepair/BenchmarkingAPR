_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,_inputPtr ,_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '/') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' in a comment') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '\f') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'ALLOW_COMMENTS') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+b64variant+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+b64variant.getPaddingChar()+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '): ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' in character escape sequence') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '*') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Exponent indicator not followed by a digit') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Failed to decode VALUE_STRING as base64 (') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'null') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '\r') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '\t') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '"+b64variant.getPaddingChar()+"') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Reader returned 0 characters when trying to read ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'n') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Unexpected end-of-input within/between ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "expected padding character '") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "'") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' || c == ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'NaN') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'name') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Infinity') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+Infinity') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' || ch > ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "Unrecognized token '") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'expected a digit for number exponent') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'ReaderBasedNumericParser') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'I') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '-') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '"+((char) i), ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+_parsingContext.getTypeDesc()+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'N') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '.') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'E') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '-Infinity') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ": was expecting closing '") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'expected digit (0-9) to follow minus sign, for valid numeric value') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '_nextAfterName') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Leading zeroes not allowed') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ': was expecting closing quote for a string value') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "Non-standard token '") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Missing integer part (next char ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' or ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'll eagerly parse contents; this so that there') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ') not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '\n') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ')') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '"+((char) endChar)+"') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+sb.toString()+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'string value') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '"+sb.toString()+"') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "was expecting either '*' or '/' for a comment") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "'null', 'true', 'false' or NaN") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'own') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'expected a value') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'was expecting double-quote to start field name') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' entries') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "' for name") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '\') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+match+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'resource') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "': was expecting ") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'expected a hex-digit for character escape sequence') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'false') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+INF') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' && c <= ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+((char) endChar)+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'missing') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'was expecting comma to separate ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'expect-value') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'true') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'e') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'was expecting a colon to separate field name and value') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Decimal point not followed by a digit') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+_getCharDesc(c)+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'real') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ', ') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '-INF') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "('true', 'false' or 'null')") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '+_currToken+') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '}') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , ' :') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)") ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '9') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '\b') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '"') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , 'Current token (') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '0') ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr , '"+match+"') ) ;
