value +=( bytes [ offset *BYTE_2] << BYTE_2_SHIFT ) & BYTE_2_MASK ) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_SHIFT ) & BYTE_0_MASK ) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_SHIFT ) & BYTE_4_MASK ) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_SHIFT ) & BYTE_24_MASK ) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_SHIFT ) & BYTE_00_MASK ) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_SHIFT ) & BYTE_16_MASK ) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_SHIFT ) & BYTE_3_MASK ) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_SHIFT ) & BYTE_0000_MASK ) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_SHIFT ) & BYTE_1_MASK ) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_SHIFT ) & BYTE_8_MASK ) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_SHIFT ) & BYTE_000000_MASK ) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_SHIFT ) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_SHIFT ) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_SHIFT ) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_SHIFT ) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_SHIFT ) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_SHIFT ) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_SHIFT ) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_SHIFT ) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_SHIFT ) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_SHIFT ) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_SHIFT ) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_SHIFT ) & BYTE_2_SHIFT ) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_SHIFT ) & BYTE_0_SHIFT ) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_SHIFT ) & BYTE_4_SHIFT ) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_SHIFT ) & BYTE_24_SHIFT ) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_SHIFT ) & BYTE_00_SHIFT ) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_SHIFT ) & BYTE_16_SHIFT ) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_SHIFT ) & BYTE_3_SHIFT ) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_SHIFT ) & BYTE_0000_SHIFT ) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_SHIFT ) & BYTE_1_SHIFT ) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_SHIFT ) & BYTE_8_SHIFT ) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_SHIFT ) & BYTE_000000_SHIFT ) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_SHIFT ) | BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_SHIFT ) | BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_SHIFT ) | BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_SHIFT ) | BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_SHIFT ) | BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_SHIFT ) | BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_SHIFT ) | BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_SHIFT ) | BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_SHIFT ) | BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_SHIFT ) | BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_SHIFT ) | BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_SHIFT ) | BYTE_2_MASK ) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_SHIFT ) | BYTE_0_MASK ) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_SHIFT ) | BYTE_4_MASK ) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_SHIFT ) | BYTE_24_MASK ) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_SHIFT ) | BYTE_00_MASK ) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_SHIFT ) | BYTE_16_MASK ) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_SHIFT ) | BYTE_3_MASK ) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_SHIFT ) | BYTE_0000_MASK ) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_SHIFT ) | BYTE_1_MASK ) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_SHIFT ) | BYTE_8_MASK ) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_SHIFT ) | BYTE_000000_MASK ) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_SHIFT ) & BYTE_2_MASK ) | BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_SHIFT ) & BYTE_0_MASK ) | BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_SHIFT ) & BYTE_4_MASK ) | BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_SHIFT ) & BYTE_24_MASK ) | BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_SHIFT ) & BYTE_00_MASK ) | BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_SHIFT ) & BYTE_16_MASK ) | BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_SHIFT ) & BYTE_3_MASK ) | BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_SHIFT ) & BYTE_0000_MASK ) | BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_SHIFT ) & BYTE_1_MASK ) | BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_SHIFT ) & BYTE_8_MASK ) | BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_SHIFT ) & BYTE_000000_MASK ) | BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_SHIFT ) & BYTE_2_CUSTOM ) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_SHIFT ) & BYTE_0_CUSTOM ) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_SHIFT ) & BYTE_4_CUSTOM ) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_SHIFT ) & BYTE_24_CUSTOM ) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_SHIFT ) & BYTE_00_CUSTOM ) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_SHIFT ) & BYTE_16_CUSTOM ) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_SHIFT ) & BYTE_3_CUSTOM ) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_SHIFT ) & BYTE_0000_CUSTOM ) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_SHIFT ) & BYTE_1_CUSTOM ) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_SHIFT ) & BYTE_8_CUSTOM ) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_SHIFT ) & BYTE_000000_CUSTOM ) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] & BYTE_2_SHIFT ) & BYTE_2_MASK ) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] & BYTE_0_SHIFT ) & BYTE_0_MASK ) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] & BYTE_4_SHIFT ) & BYTE_4_MASK ) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] & BYTE_24_SHIFT ) & BYTE_24_MASK ) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] & BYTE_00_SHIFT ) & BYTE_00_MASK ) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] & BYTE_16_SHIFT ) & BYTE_16_MASK ) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] & BYTE_3_SHIFT ) & BYTE_3_MASK ) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] & BYTE_0000_SHIFT ) & BYTE_0000_MASK ) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] & BYTE_1_SHIFT ) & BYTE_1_MASK ) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] & BYTE_8_SHIFT ) & BYTE_8_MASK ) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] & BYTE_000000_SHIFT ) & BYTE_000000_MASK ) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_SHIFT ) & BYTE_2_Ethernet ) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_SHIFT ) & BYTE_0_Ethernet ) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_SHIFT ) & BYTE_4_Ethernet ) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_SHIFT ) & BYTE_24_Ethernet ) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_SHIFT ) & BYTE_00_Ethernet ) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_SHIFT ) & BYTE_16_Ethernet ) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_SHIFT ) & BYTE_3_Ethernet ) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_SHIFT ) & BYTE_0000_Ethernet ) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_SHIFT ) & BYTE_1_Ethernet ) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_SHIFT ) & BYTE_8_Ethernet ) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_SHIFT ) & BYTE_000000_Ethernet ) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_SHIFT ) & BYTE_2_grades ) & BYTE_2_MASK ;
