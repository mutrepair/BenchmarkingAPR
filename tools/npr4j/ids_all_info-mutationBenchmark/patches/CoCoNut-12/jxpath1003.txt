compareNodeObjective( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeObjective( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeObjective( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeKNN( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeKNN( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeKNN( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeRetained( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeRetained( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeRetained( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePurchases( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePurchases( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePurchases( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeViolation( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeViolation( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeViolation( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeMerger( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeMerger( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeMerger( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeUploaded( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeUploaded( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeUploaded( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodewand( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodewand( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodewand( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeNormalized( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeNormalized( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeNormalized( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeObjective( p1.parent , depth2-1, p2.parent , depth2--1) ;
compareNodeObjective( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeObjective( p1.parent , depth0-1, p0.parent , depth0--1) ;
compareNodeCrown( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeCrown( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeCrown( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeProtein( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeProtein( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeProtein( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeIsolation( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeIsolation( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeIsolation( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeBorrado( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeBorrado( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeBorrado( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeCollider( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeCollider( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeCollider( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeaddunit( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeaddunit( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeaddunit( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeKNN( p1.parent , depth2-1, p2.parent , depth2--1) ;
compareNodeKNN( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeKNN( p1.parent , depth0-1, p0.parent , depth0--1) ;
compareNodeRetained( p1.parent , depth2-1, p2.parent , depth2--1) ;
compareNodeRetained( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeRetained( p1.parent , depth0-1, p0.parent , depth0--1) ;
compareNodeLocker( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeLocker( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeLocker( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePurchases( p1.parent , depth2-1, p2.parent , depth2--1) ;
compareNodePurchases( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePurchases( p1.parent , depth0-1, p0.parent , depth0--1) ;
compareNodeViolation( p1.parent , depth2-1, p2.parent , depth2--1) ;
compareNodeViolation( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeViolation( p1.parent , depth0-1, p0.parent , depth0--1) ;
compareNodeLatein( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeLatein( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeLatein( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeAttd( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeAttd( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeAttd( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSquared( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSquared( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSquared( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeunblocked( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeunblocked( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeunblocked( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodemelon( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodemelon( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodemelon( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeMerger( p1.parent , depth2-1, p2.parent , depth2--1) ;
compareNodeMerger( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeMerger( p1.parent , depth0-1, p0.parent , depth0--1) ;
compareNodeMetric( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeMetric( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeMetric( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeProjectile( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeProjectile( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeProjectile( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePatern( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePatern( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePatern( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeUploaded( p1.parent , depth2-1, p2.parent , depth2--1) ;
compareNodeUploaded( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeUploaded( p1.parent , depth0-1, p0.parent , depth0--1) ;
compareNodeDlg( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeDlg( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeDlg( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodereveal( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodereveal( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodereveal( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodemechanic( p1.parent , depth1-1, p2.parent , depth2--1) ;
