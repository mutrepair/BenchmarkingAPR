return new ArrayList < String >( ) ;
return new ArrayList < >( ) ;
return new ArrayList < Integer >( ) ;
return new ArrayList < Object >( ) ;
return new ArrayList < T >( ) ;
return getActivity( ).toString( ) ;
return new ArraySet < >( ) ;
return false ;
return new ArrayList < >( '') ;
return new ArrayList < >( '/') ;
return new ArrayList < >( ' in a comment') ;
return new ArrayList < >( '\f') ;
return new ArrayList < >( 'StreamBasedParserBase') ;
return new ArrayList < >( 'ALLOW_COMMENTS') ;
return new ArrayList < >( '+b64variant+') ;
return new ArrayList < >( '+b64variant.getPaddingChar()+') ;
return new ArrayList < >( '): ') ;
return new ArrayList < >( ' in character escape sequence') ;
return new ArrayList < >( '*') ;
return new ArrayList < >( 'Exponent indicator not followed by a digit') ;
return new ArrayList < >( 'Failed to decode VALUE_STRING as base64 (') ;
return new ArrayList < >( 'null') ;
return new ArrayList < >( '\r') ;
return new ArrayList < >( '\t') ;
return new ArrayList < >( '"+b64variant.getPaddingChar()+"') ;
return new ArrayList < >( 'n') ;
return new ArrayList < >( 'Unexpected end-of-input within/between ') ;
return new ArrayList < >( "expected padding character '") ;
return new ArrayList < >( "'") ;
return new ArrayList < >( ' || c == ') ;
return new ArrayList < >( 'NaN') ;
return new ArrayList < >( 'Utf8NumericParser') ;
return new ArrayList < >( 'name') ;
return new ArrayList < >( 'Infinity') ;
return new ArrayList < >( '+Infinity') ;
return new ArrayList < >( "Unrecognized token '") ;
return new ArrayList < >( ' in field name') ;
return new ArrayList < >( 'I') ;
return new ArrayList < >( '-') ;
return new ArrayList < >( '+_parsingContext.getTypeDesc()+') ;
return new ArrayList < >( 'N') ;
return new ArrayList < >( '.') ;
return new ArrayList < >( 'E') ;
return new ArrayList < >( '-Infinity') ;
return new ArrayList < >( 'expected digit (0-9) to follow minus sign, for valid numeric value') ;
return new ArrayList < >( '_nextAfterName') ;
return new ArrayList < >( 'Leading zeroes not allowed') ;
return new ArrayList < >( "Non-standard token '") ;
return new ArrayList < >( '+') ;
return new ArrayList < >( ' or ') ;
return new ArrayList < >( ') not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary') ;
return new ArrayList < >( 'other') ;
return new ArrayList < >( '\n') ;
return new ArrayList < >( 'slow') ;
return new ArrayList < >( '+sb.toString()+') ;
return new ArrayList < >( 'string value') ;
return new ArrayList < >( '"+sb.toString()+"') ;
return new ArrayList < >( '+_inputBuffer.length+') ;
return new ArrayList < >( '\"') ;
return new ArrayList < >( "Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
return new ArrayList < >( "was expecting either '*' or '/' for a comment") ;
return new ArrayList < >( "'null', 'true', 'false' or NaN") ;
return new ArrayList < >( ' bytes') ;
return new ArrayList < >( 'own') ;
return new ArrayList < >( "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
return new ArrayList < >( 'expected a value') ;
return new ArrayList < >( ": was expecting closing '\") ;
return new ArrayList < >( 'was expecting double-quote to start field name') ;
return new ArrayList < >( ' entries') ;
return new ArrayList < >( "' for name") ;
return new ArrayList < >( '\') ;
return new ArrayList < >( '+match+') ;
return new ArrayList < >( ' || ch == ') ;
return new ArrayList < >( 'Invalid UTF-8 middle byte 0x') ;
return new ArrayList < >( '"+((char) c), ') ;
return new ArrayList < >( 'resource') ;
return new ArrayList < >( "': was expecting ") ;
return new ArrayList < >( ": was expecting closing '\'' for name") ;
return new ArrayList < >( 'expected a hex-digit for character escape sequence') ;
return new ArrayList < >( 'false') ;
return new ArrayList < >( '+INF') ;
return new ArrayList < >( 'InputStream.read() returned 0 characters when trying to read ') ;
return new ArrayList < >( 'missing') ;
return new ArrayList < >( 'was expecting comma to separate ') ;
return new ArrayList < >( "Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
return new ArrayList < >( 'Invalid UTF-8 start byte 0x') ;
return new ArrayList < >( 'expect-value') ;
return new ArrayList < >( '+amount+') ;
return new ArrayList < >( 'true') ;
return new ArrayList < >( 'e') ;
return new ArrayList < >( 'was expecting a colon to separate field name and value') ;
return new ArrayList < >( 'Decimal point not followed by a digit') ;
return new ArrayList < >( 'real') ;
return new ArrayList < >( ', ') ;
return new ArrayList < >( '-INF') ;
return new ArrayList < >( "('true', 'false' or 'null')") ;
return new ArrayList < >( '+_currToken+') ;
return new ArrayList < >( '}') ;
return new ArrayList < >( ' :') ;
return new ArrayList < >( "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)") ;
