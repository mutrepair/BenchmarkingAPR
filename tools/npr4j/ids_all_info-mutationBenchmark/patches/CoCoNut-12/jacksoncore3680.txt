return new ArrayList < String >( ) ;
return new ArrayList < >( ) ;
return new HashSet < >( ) ;
return new ArraySet < >( ) ;
return new HashSet < String >( ) ;
return new ArraySet < String >( ) ;
return new ArrayList < Integer >( ) ;
return new ArrayList < T >( ) ;
return new HashSet < T >( ) ;
return new ArrayList < Object >( ) ;
return 1;
return new HashSet < Integer >( ) ;
return new ArraySet < Integer >( ) ;
return new ArraySet < T >( ) ;
return new HashSet < Object >( ) ;
return new HashMap < >( ) ;
return getResources( ).equals( '') ;
return getResources( ).equals( '+Long.MIN_VALUE+') ;
return getResources( ).equals( 'getBinaryValue') ;
return getResources( ).equals( '+Integer.MIN_VALUE+') ;
return getResources( ).equals( ') as character #') ;
return getResources( ).equals( "Unexpected padding character ('") ;
return getResources( ).equals( '+b64variant.getPaddingChar()+') ;
return getResources( ).equals( '2') ;
return getResources( ).equals( "' (code 0x") ;
return getResources( ).equals( "': expected '") ;
return getResources( ).equals( 'JsonNumericParserBase') ;
return getResources( ).equals( '+numStr+') ;
return getResources( ).equals( "Unexpected close marker '") ;
return getResources( ).equals( ') out of range of int (') ;
return getResources( ).equals( '+startDesc+') ;
return getResources( ).equals( '5') ;
return getResources( ).equals( "Malformed numeric value '") ;
return getResources( ).equals( '"+((char)ch)+"') ;
return getResources( ).equals( '"+b64variant.getPaddingChar()+"') ;
return getResources( ).equals( 'Invalid numeric value: ') ;
return getResources( ).equals( ') in base64 content') ;
return getResources( ).equals( '+Integer.toHexString(ch)+') ;
return getResources( ).equals( "'") ;
return getResources( ).equals( ') out of range of int') ;
return getResources( ).equals( '+expCh+') ;
return getResources( ).equals( 's verify it') ;
return getResources( ).equals( ' (from ') ;
return getResources( ).equals( ' - ') ;
return getResources( ).equals( '\0') ;
return getResources( ).equals( '7') ;
return getResources( ).equals( '+_textBuffer.contentsAsString()+') ;
return getResources( ).equals( '-') ;
return getResources( ).equals( '6') ;
return getResources( ).equals( '+_parsingContext.getTypeDesc()+') ;
return getResources( ).equals( ': expected ') ;
return getResources( ).equals( '"+((char) actCh)+"') ;
return getResources( ).equals( '.') ;
return getResources( ).equals( 'E') ;
return getResources( ).equals( ' starting at ') ;
return getResources( ).equals( '+(bindex+1)+') ;
return getResources( ).equals( '+Integer.MAX_VALUE+') ;
return getResources( ).equals( ') not numeric, can not use numeric value accessors') ;
return getResources( ).equals( '+') ;
return getResources( ).equals( ' of 4-char base64 unit: padding only legal as 3rd or 4th character') ;
return getResources( ).equals( '3') ;
return getResources( ).equals( ')') ;
return getResources( ).equals( '8') ;
return getResources( ).equals( "Illegal character '") ;
return getResources( ).equals( 'Illegal white space character (code 0x') ;
return getResources( ).equals( '"+_textBuffer.contentsAsString()+"') ;
return getResources( ).equals( "') as character #") ;
return getResources( ).equals( '+((char) actCh)+') ;
return getResources( ).equals( '+_getCharDesc(ch)+') ;
return getResources( ).equals( '\\') ;
return getResources( ).equals( '+_parsingContext.getStartLocation(_ioContext.getSourceReference())+') ;
return getResources( ).equals( '"+expCh+"') ;
return getResources( ).equals( 'Illegal character (code 0x') ;
return getResources( ).equals( ': ') ;
return getResources( ).equals( '"+numStr+"') ;
return getResources( ).equals( ') out of range of long (') ;
return getResources( ).equals( '4') ;
return getResources( ).equals( 'e') ;
return getResources( ).equals( 'Numeric value (') ;
return getResources( ).equals( 'not available') ;
return getResources( ).equals( "' (for ") ;
return getResources( ).equals( '+Long.MAX_VALUE+') ;
return getResources( ).equals( ' of 4-char base64 unit: can only used between units') ;
return getResources( ).equals( '+_currToken+') ;
return getResources( ).equals( '+((char)ch)+') ;
return getResources( ).equals( ') in numeric value') ;
return getResources( ).equals( ': expected close marker for ') ;
return getResources( ).equals( 'off-by-one') ;
return getResources( ).equals( 'Unexpected character (') ;
return getResources( ).equals( '9') ;
return getResources( ).equals( '0') ;
return getResources( ).equals( 'Current token (') ;
return getResources( ).equals( ') out of range of Java float') ;
return getResources( ).equals( '1') ;
return getResources( ).equals( '+getText()+') ;
return getResources( ).size( ) ;
return new ArrayList < >(1) ;
return getName( ).equals( '') ;
return getName( ).equals( '+Long.MIN_VALUE+') ;
return getName( ).equals( 'getBinaryValue') ;
