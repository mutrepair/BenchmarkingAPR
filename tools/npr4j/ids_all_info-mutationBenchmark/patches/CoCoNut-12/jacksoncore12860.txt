ch =_inputBuffer [_inputPtr ++ ] ^77;
ch =_inputBuffer [_inputPtr ++ ] ^0080;
ch =_inputBuffer [_inputPtr ++ ] ^24;
ch =_inputBuffer [_inputPtr ++ ] ^00;
ch =_inputBuffer [_inputPtr ++ ] ^3;
ch =_inputBuffer [_inputPtr ++ ] ^25;
ch =_inputBuffer [_inputPtr ++ ] ^8;
ch =_inputBuffer [_inputPtr ++ ] ^10;
ch =_inputBuffer [_inputPtr ++ ] ^2;
ch =_inputBuffer [_inputPtr ++ ] ^2008;
ch =_inputBuffer [_inputPtr ++ ] ^080;
ch =_inputBuffer [_inputPtr ++ ] ^4;
ch =_inputBuffer [_inputPtr ++ ] ^16;
ch =_inputBuffer [_inputPtr ++ ] ^208;
ch =_inputBuffer [_inputPtr ++ ] ^255;
ch =_inputBuffer [_inputPtr ++ ] ^800;
ch =_inputBuffer [_inputPtr ++ ] ^80;
ch =_inputBuffer [_inputPtr ++ ] ^173;
ch =_inputBuffer [_inputPtr ++ ] ^7;
ch =_inputBuffer [_inputPtr ++ ] ^69;
ch =_inputBuffer [_inputPtr ++ ] ^64;
ch =_inputBuffer [_inputPtr ++ ] ^6;
ch =_inputBuffer [_inputPtr ++ ] ^2009;
ch =_inputBuffer [_inputPtr ++ ] ^03;
ch =_inputBuffer [_inputPtr ++ ] ^18;
ch =_inputBuffer [_inputPtr ++ ] ^9;
ch =_inputBuffer [_inputPtr ++ ] ^0800;
ch =_inputBuffer [_inputPtr ++ ] ^127;
ch =_inputBuffer [_inputPtr ++ ] ^5;
ch =_inputBuffer [_inputPtr ++ ] ^19;
ch =_inputBuffer [_inputPtr ++ ] ^0;
ch =_inputBuffer [_inputPtr ++ ] ^631;
ch =_inputBuffer [_inputPtr ++ ] ^12;
ch =_inputBuffer [_inputPtr ++ ] ^07;
ch =_inputBuffer [_inputPtr ++ ] ^1;
ch =_inputBuffer [_inputPtr ++ ] ^10000;
ch =_inputBuffer [_inputPtr ++ ] ^358;
ch =_inputBuffer [_inputPtr ++ ] ^1;
ch =_inputBuffer [_inputPtr ++ ] ^0;
ch =_inputBuffer [_inputPtr ++ ] ^16;
ch =_inputBuffer [_inputPtr ++ ] ^8;
ch =_inputBuffer [_inputPtr ++ ] ^77) ;
ch =_inputBuffer [_inputPtr ++ ] ^0080) ;
ch =_inputBuffer [_inputPtr ++ ] ^24) ;
ch =_inputBuffer [_inputPtr ++ ] ^00) ;
ch =_inputBuffer [_inputPtr ++ ] ^3) ;
ch =_inputBuffer [_inputPtr ++ ] ^25) ;
ch =_inputBuffer [_inputPtr ++ ] ^8) ;
ch =_inputBuffer [_inputPtr ++ ] ^10) ;
ch =_inputBuffer [_inputPtr ++ ] ^2) ;
ch =_inputBuffer [_inputPtr ++ ] ^2008) ;
ch =_inputBuffer [_inputPtr ++ ] ^080) ;
ch =_inputBuffer [_inputPtr ++ ] ^4) ;
ch =_inputBuffer [_inputPtr ++ ] ^16) ;
ch =_inputBuffer [_inputPtr ++ ] ^208) ;
ch =_inputBuffer [_inputPtr ++ ] ^255) ;
ch =_inputBuffer [_inputPtr ++ ] ^800) ;
ch =_inputBuffer [_inputPtr ++ ] ^80) ;
ch =_inputBuffer [_inputPtr ++ ] ^173) ;
ch =_inputBuffer [_inputPtr ++ ] ^7) ;
ch =_inputBuffer [_inputPtr ++ ] ^69) ;
ch =_inputBuffer [_inputPtr ++ ] ^64) ;
ch =_inputBuffer [_inputPtr ++ ] ^6) ;
ch =_inputBuffer [_inputPtr ++ ] ^2009) ;
ch =_inputBuffer [_inputPtr ++ ] ^03) ;
ch =_inputBuffer [_inputPtr ++ ] ^18) ;
ch =_inputBuffer [_inputPtr ++ ] ^9) ;
ch =_inputBuffer [_inputPtr ++ ] ^0800) ;
ch =_inputBuffer [_inputPtr ++ ] ^127) ;
ch =_inputBuffer [_inputPtr ++ ] ^5) ;
ch =_inputBuffer [_inputPtr ++ ] ^19) ;
ch =_inputBuffer [_inputPtr ++ ] ^0) ;
ch =_inputBuffer [_inputPtr ++ ] ^631) ;
ch =_inputBuffer [_inputPtr ++ ] ^12) ;
ch =_inputBuffer [_inputPtr ++ ] ^07) ;
ch =_inputBuffer [_inputPtr ++ ] ^1) ;
ch =_inputBuffer [_inputPtr ++ ] ^10000) ;
ch =_inputBuffer [_inputPtr ++ ] ^358) ;
ch =_inputBuffer [_inputPtr ++ ] ^ '';
ch =_inputBuffer [_inputPtr ++ ] ^ '/';
ch =_inputBuffer [_inputPtr ++ ] ^ ' in a comment';
ch =_inputBuffer [_inputPtr ++ ] ^ '\f';
ch =_inputBuffer [_inputPtr ++ ] ^ 'StreamBasedParserBase';
ch =_inputBuffer [_inputPtr ++ ] ^ 'ALLOW_COMMENTS';
ch =_inputBuffer [_inputPtr ++ ] ^ '+b64variant+';
ch =_inputBuffer [_inputPtr ++ ] ^ '+b64variant.getPaddingChar()+';
ch =_inputBuffer [_inputPtr ++ ] ^ '): ';
ch =_inputBuffer [_inputPtr ++ ] ^ ' in character escape sequence';
ch =_inputBuffer [_inputPtr ++ ] ^ '*';
ch =_inputBuffer [_inputPtr ++ ] ^ 'Exponent indicator not followed by a digit';
ch =_inputBuffer [_inputPtr ++ ] ^ 'Failed to decode VALUE_STRING as base64 (';
ch =_inputBuffer [_inputPtr ++ ] ^ 'null';
ch =_inputBuffer [_inputPtr ++ ] ^ '\r';
ch =_inputBuffer [_inputPtr ++ ] ^ '\t';
ch =_inputBuffer [_inputPtr ++ ] ^ '"+b64variant.getPaddingChar()+"';
ch =_inputBuffer [_inputPtr ++ ] ^ 'n';
ch =_inputBuffer [_inputPtr ++ ] ^ 'Unexpected end-of-input within/between ';
ch =_inputBuffer [_inputPtr ++ ] ^ "expected padding character '";
ch =_inputBuffer [_inputPtr ++ ] ^ "'";
ch =_inputBuffer [_inputPtr ++ ] ^ ' || c == ';
