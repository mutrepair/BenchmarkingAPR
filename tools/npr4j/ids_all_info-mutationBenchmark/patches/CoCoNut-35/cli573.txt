int x = -1;
int x =( int )( -1;
int x = Math.min( -1) ;
int x = Math.min( -1;
int x = -1+1;
int x =( int ) -1;
int x = Integer.MAX_VALUE ;
int x = Math.abs( -1) ;
int x =( int )( -1) ;
int x = -2;
int x = -2001;
int x = -0;
int x = -2004;
int x = -3;
int x = -74;
int x = -1;
int x = -8;
int x = -1999;
int x =0;
int x = Math.max( -1) ;
int x = Math.abs( -1;
int x = Integer.MAX_VALUE +1;
int x = Math.max( -1;
int x = Long.MAX_VALUE ;
int x =0; / / -1;
int x =( int )(1;
long x = -1;
int x =( long )( -1;
int x =( Integer ) -1;
final int x = -1;
int x = -1-1;
int x = Double.MAX_VALUE ;
int x = -1+ 'optPrefix';
int x = -1+ '   ';
int x = -1+ '\n';
int x = -1+ ',';
int x = -1+ 'usage: ';
int x = -1+ ' <';
int x = -1+ 'License';
int x = -1+ 'descPadding';
int x = -1+ ') && (c != ';
int x = -1+ '>';
int x = -1+ 'leftPadding';
int x = -1+ 'newLine';
int x = -1+ '[';
int x = -1+ ').append(option.getArgName()).append(';
int x = -1+ ' ';
int x = -1+ 'AS IS';
int x = -1+ ']';
int x = -1+ '-';
int x = -1+ 'argName';
int x = -1+ 'line.separator';
int x = -1+ 'syntaxPrefix';
int x = -1+ 'arg';
int x = -1+ 'cmdLineSyntax not provided';
int x = -1+ ' | ';
int x = -1+ '--';
int x = -1+ '\r';
int x = -1+ '\t';
int x = -1+ 'longOptPrefix';
int x = -1+ 'width';
int x = new int(2) ;
int x = new int(2001) ;
int x = new int(0) ;
int x = new int(2004) ;
int x = new int(3) ;
int x = new int(74) ;
int x = new int(1) ;
int x = new int(8) ;
int x = new int(1999) ;
int x =( int )(1) ;
int x =( double )( -1;
int x = new int(1) ;
int x =( -1;
long x =( int )( -1;
int x =( int )(0;
int x =( int )(0) ;
int x = i +1;
int x =( int )( -2;
int x =( int )( -2001;
int x =( int )( -0;
int x =( int )( -2004;
int x =( int )( -3;
int x =( int )( -74;
int x =( int )( -1;
int x =( int )( -8;
int x =( int )( -1999;
int x =0.0;
double x = -1;
int x = Integer.MIN_VALUE ;
int x = -1+2;
int x = -1+2001;
int x = -1+0;
int x = -1+2004;
int x = -1+3;
int x = -1+74;
int x = -1+1;
int x = -1+8;
int x = -1+1999;
int x =1;
