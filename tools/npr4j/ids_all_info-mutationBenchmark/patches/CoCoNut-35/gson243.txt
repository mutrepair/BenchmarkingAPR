typeHierarchyList.add(0, pair ) ;
typeHierarchyList.add( -1, pair ) ;
typeHierarchyList.add(1, pair ) ;
typeHierarchyList.add(2, pair ) ;
typeHierarchyList.add(2008, pair ) ;
typeHierarchyList.add(1, pair ) ;
typeHierarchyList.add(0, pair ) ;
typeHierarchyList.add( 'License', pair ) ;
typeHierarchyList.add( 'The specified type handler for type ', pair ) ;
typeHierarchyList.add( '. Gson does not allow this.', pair ) ;
typeHierarchyList.add( ':', pair ) ;
typeHierarchyList.add( '}', pair ) ;
typeHierarchyList.add( ' hides the previously registered type hierarchy handler for ', pair ) ;
typeHierarchyList.add( 'Overriding the existing type handler for {0}', pair ) ;
typeHierarchyList.add( 'AS IS', pair ) ;
typeHierarchyList.add( '{mapForTypeHierarchy:{', pair ) ;
typeHierarchyList.add( ',', pair ) ;
typeHierarchyList.add( '},map:{', pair ) ;
typeHierarchyList.add( 'Attempted to modify an unmodifiable map.', pair ) ;
typeHierarchyList.add( 'License'+1, pair ) ;
typeHierarchyList.add( 'The specified type handler for type '+1, pair ) ;
typeHierarchyList.add( '. Gson does not allow this.'+1, pair ) ;
typeHierarchyList.add( ':'+1, pair ) ;
typeHierarchyList.add( '}'+1, pair ) ;
typeHierarchyList.add( ' hides the previously registered type hierarchy handler for '+1, pair ) ;
typeHierarchyList.add( 'Overriding the existing type handler for {0}'+1, pair ) ;
typeHierarchyList.add( 'AS IS'+1, pair ) ;
typeHierarchyList.add( '{mapForTypeHierarchy:{'+1, pair ) ;
typeHierarchyList.add( ','+1, pair ) ;
typeHierarchyList.add( '},map:{'+1, pair ) ;
typeHierarchyList.add( 'Attempted to modify an unmodifiable map.'+1, pair ) ;
typeHierarchyList.add( null , pair ) ;
typeHierarchyList.add( pair ) ;
typeHierarchyList.add( 'License') ;
typeHierarchyList.add( 'The specified type handler for type ') ;
typeHierarchyList.add( '. Gson does not allow this.') ;
typeHierarchyList.add( ':') ;
typeHierarchyList.add( '}') ;
typeHierarchyList.add( ' hides the previously registered type hierarchy handler for ') ;
typeHierarchyList.add( 'Overriding the existing type handler for {0}') ;
typeHierarchyList.add( 'AS IS') ;
typeHierarchyList.add( '{mapForTypeHierarchy:{') ;
typeHierarchyList.add( ',') ;
typeHierarchyList.add( '},map:{') ;
typeHierarchyList.add( 'Attempted to modify an unmodifiable map.') ;
typeHierarchyList.add( -2, pair ) ;
typeHierarchyList.add( -2008, pair ) ;
typeHierarchyList.add( -1, pair ) ;
typeHierarchyList.add( -0, pair ) ;
typeHierarchyList.add( -1, pair , false ) ;
typeHierarchyList.add( -1, pair , null ) ;
typeHierarchyList.add(( -1, pair ) ;
typeHierarchyList.add( 'License',0, pair ) ;
typeHierarchyList.add( 'The specified type handler for type ',0, pair ) ;
typeHierarchyList.add( '. Gson does not allow this.',0, pair ) ;
typeHierarchyList.add( ':',0, pair ) ;
typeHierarchyList.add( '}',0, pair ) ;
typeHierarchyList.add( ' hides the previously registered type hierarchy handler for ',0, pair ) ;
typeHierarchyList.add( 'Overriding the existing type handler for {0}',0, pair ) ;
typeHierarchyList.add( 'AS IS',0, pair ) ;
typeHierarchyList.add( '{mapForTypeHierarchy:{',0, pair ) ;
typeHierarchyList.add( ',',0, pair ) ;
typeHierarchyList.add( '},map:{',0, pair ) ;
typeHierarchyList.add( 'Attempted to modify an unmodifiable map.',0, pair ) ;
typeHierarchyList.add( i , pair ) ;
typeHierarchyList.add( -1, pair ,0) ;
typeHierarchyList.add( -1, pair , true ) ;
typeHierarchyList.add( new String [ ] { pair ) ;
typeHierarchyList.add( this , pair ) ;
typeHierarchyList.add( 'License',1, pair ) ;
typeHierarchyList.add( 'The specified type handler for type ',1, pair ) ;
typeHierarchyList.add( '. Gson does not allow this.',1, pair ) ;
typeHierarchyList.add( ':',1, pair ) ;
typeHierarchyList.add( '}',1, pair ) ;
typeHierarchyList.add( ' hides the previously registered type hierarchy handler for ',1, pair ) ;
typeHierarchyList.add( 'Overriding the existing type handler for {0}',1, pair ) ;
typeHierarchyList.add( 'AS IS',1, pair ) ;
typeHierarchyList.add( '{mapForTypeHierarchy:{',1, pair ) ;
typeHierarchyList.add( ',',1, pair ) ;
typeHierarchyList.add( '},map:{',1, pair ) ;
typeHierarchyList.add( 'Attempted to modify an unmodifiable map.',1, pair ) ;
typeHierarchyList.add( -1, pair -1) ;
typeHierarchyList.add(0) ;
typeHierarchyList.addAll( -1, pair ) ;
typeHierarchyList.add(( Integer ) pair ) ;
typeHierarchyList.add( size -1, pair ) ;
typeHierarchyList.add( null ) ;
typeHierarchyList.add( this ) ;
typeHierarchyList.add( -1, pair ,1) ;
typeHierarchyList.add( index , pair ) ;
typeHierarchyList.add( 'License'+2, pair ) ;
typeHierarchyList.add( 'The specified type handler for type '+2, pair ) ;
typeHierarchyList.add( '. Gson does not allow this.'+2, pair ) ;
typeHierarchyList.add( ':'+2, pair ) ;
typeHierarchyList.add( '}'+2, pair ) ;
typeHierarchyList.add( ' hides the previously registered type hierarchy handler for '+2, pair ) ;
typeHierarchyList.add( 'Overriding the existing type handler for {0}'+2, pair ) ;
typeHierarchyList.add( 'AS IS'+2, pair ) ;
typeHierarchyList.add( '{mapForTypeHierarchy:{'+2, pair ) ;
typeHierarchyList.add( ','+2, pair ) ;
