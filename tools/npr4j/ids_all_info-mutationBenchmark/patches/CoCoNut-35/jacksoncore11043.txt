return new ArrayList < String >( false ) ;
return new ArrayList < Integer >( false ) ;
return new ArrayList < >( ) ;
return false.replaceAll( '', '') ;
return false.replaceAll( '/', '/') ;
return false.replaceAll( ' in a comment', ' in a comment') ;
return false.replaceAll( '\f', '\f') ;
return false.replaceAll( 'StreamBasedParserBase', 'StreamBasedParserBase') ;
return false.replaceAll( 'ALLOW_COMMENTS', 'ALLOW_COMMENTS') ;
return false.replaceAll( '+b64variant+', '+b64variant+') ;
return false.replaceAll( '+b64variant.getPaddingChar()+', '+b64variant.getPaddingChar()+') ;
return false.replaceAll( '): ', '): ') ;
return false.replaceAll( ' in character escape sequence', ' in character escape sequence') ;
return false.replaceAll( '*', '*') ;
return false.replaceAll( 'Exponent indicator not followed by a digit', 'Exponent indicator not followed by a digit') ;
return false.replaceAll( 'Failed to decode VALUE_STRING as base64 (', 'Failed to decode VALUE_STRING as base64 (') ;
return false.replaceAll( 'null', 'null') ;
return false.replaceAll( '\r', '\r') ;
return false.replaceAll( '\t', '\t') ;
return false.replaceAll( '"+b64variant.getPaddingChar()+"', '"+b64variant.getPaddingChar()+"') ;
return false.replaceAll( 'n', 'n') ;
return false.replaceAll( 'Unexpected end-of-input within/between ', 'Unexpected end-of-input within/between ') ;
return false.replaceAll( "expected padding character '", "expected padding character '") ;
return false.replaceAll( "'", "'") ;
return false.replaceAll( ' || c == ', ' || c == ') ;
return false.replaceAll( 'NaN', 'NaN') ;
return false.replaceAll( 'Utf8NumericParser', 'Utf8NumericParser') ;
return false.replaceAll( 'name', 'name') ;
return false.replaceAll( 'Infinity', 'Infinity') ;
return false.replaceAll( '+Infinity', '+Infinity') ;
return false.replaceAll( "Unrecognized token '", "Unrecognized token '") ;
return false.replaceAll( ' in field name', ' in field name') ;
return false.replaceAll( 'I', 'I') ;
return false.replaceAll( '-', '-') ;
return false.replaceAll( '+_parsingContext.getTypeDesc()+', '+_parsingContext.getTypeDesc()+') ;
return false.replaceAll( 'N', 'N') ;
return false.replaceAll( '.', '.') ;
return false.replaceAll( 'E', 'E') ;
return false.replaceAll( '-Infinity', '-Infinity') ;
return false.replaceAll( 'expected digit (0-9) to follow minus sign, for valid numeric value', 'expected digit (0-9) to follow minus sign, for valid numeric value') ;
return false.replaceAll( '_nextAfterName', '_nextAfterName') ;
return false.replaceAll( 'Leading zeroes not allowed', 'Leading zeroes not allowed') ;
return false.replaceAll( "Non-standard token '", "Non-standard token '") ;
return false.replaceAll( '+', '+') ;
return false.replaceAll( ' or ', ' or ') ;
return false.replaceAll( ') not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary', ') not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary') ;
return false.replaceAll( 'other', 'other') ;
return false.replaceAll( '\n', '\n') ;
return false.replaceAll( 'slow', 'slow') ;
return false.replaceAll( '+sb.toString()+', '+sb.toString()+') ;
return false.replaceAll( 'string value', 'string value') ;
return false.replaceAll( '"+sb.toString()+"', '"+sb.toString()+"') ;
return false.replaceAll( '+_inputBuffer.length+', '+_inputBuffer.length+') ;
return false.replaceAll( '\"', '\"') ;
return false.replaceAll( "Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow", "Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
return false.replaceAll( "was expecting either '*' or '/' for a comment", "was expecting either '*' or '/' for a comment") ;
return false.replaceAll( "'null', 'true', 'false' or NaN", "'null', 'true', 'false' or NaN") ;
return false.replaceAll( ' bytes', ' bytes') ;
return false.replaceAll( 'own', 'own') ;
return false.replaceAll( "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow", "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
return false.replaceAll( 'expected a value', 'expected a value') ;
return false.replaceAll( ": was expecting closing '\", ": was expecting closing '\") ;
return false.replaceAll( 'was expecting double-quote to start field name', 'was expecting double-quote to start field name') ;
return false.replaceAll( ' entries', ' entries') ;
return false.replaceAll( "' for name", "' for name") ;
return false.replaceAll( '\', '\') ;
return false.replaceAll( '+match+', '+match+') ;
return false.replaceAll( ' || ch == ', ' || ch == ') ;
return false.replaceAll( 'Invalid UTF-8 middle byte 0x', 'Invalid UTF-8 middle byte 0x') ;
return false.replaceAll( '"+((char) c), ', '"+((char) c), ') ;
return false.replaceAll( 'resource', 'resource') ;
return false.replaceAll( "': was expecting ", "': was expecting ") ;
return false.replaceAll( ": was expecting closing '\'' for name", ": was expecting closing '\'' for name") ;
return false.replaceAll( 'expected a hex-digit for character escape sequence', 'expected a hex-digit for character escape sequence') ;
return false.replaceAll( 'false', 'false') ;
return false.replaceAll( '+INF', '+INF') ;
return false.replaceAll( 'InputStream.read() returned 0 characters when trying to read ', 'InputStream.read() returned 0 characters when trying to read ') ;
return false.replaceAll( 'missing', 'missing') ;
return false.replaceAll( 'was expecting comma to separate ', 'was expecting comma to separate ') ;
return false.replaceAll( "Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow", "Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
return false.replaceAll( 'Invalid UTF-8 start byte 0x', 'Invalid UTF-8 start byte 0x') ;
return false.replaceAll( 'expect-value', 'expect-value') ;
return false.replaceAll( '+amount+', '+amount+') ;
return false.replaceAll( 'true', 'true') ;
return false.replaceAll( 'e', 'e') ;
return false.replaceAll( 'was expecting a colon to separate field name and value', 'was expecting a colon to separate field name and value') ;
return false.replaceAll( 'Decimal point not followed by a digit', 'Decimal point not followed by a digit') ;
return false.replaceAll( 'real', 'real') ;
return false.replaceAll( ', ', ', ') ;
return false.replaceAll( '-INF', '-INF') ;
return false.replaceAll( "('true', 'false' or 'null')", "('true', 'false' or 'null')") ;
return false.replaceAll( '+_currToken+', '+_currToken+') ;
return false.replaceAll( '}', '}') ;
return false.replaceAll( ' :', ' :') ;
return false.replaceAll( "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)") ;
return false.replaceAll( 'was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name', 'was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name') ;
return false.replaceAll( '\b', '\b') ;
return false.replaceAll( '"', '"') ;
return false.replaceAll( 'Current token (', 'Current token (') ;
return false.replaceAll( '0', '0') ;
