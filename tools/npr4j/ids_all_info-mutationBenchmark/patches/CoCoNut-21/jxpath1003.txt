compareNodePointers( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodeFixing( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeFixing( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeFixing( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeaugenzahl( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeaugenzahl( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeaugenzahl( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodecountevent( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodecountevent( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodecountevent( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeaugenzahl( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodeaugenzahl( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeaugenzahl( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodeFixing( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodeFixing( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeFixing( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodeSaturation( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSaturation( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSaturation( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeWARLOCK( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeWARLOCK( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeWARLOCK( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth1--1) ;
compareNodeShould( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeShould( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeShould( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeElem( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeElem( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeElem( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeLEAP( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeLEAP( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeLEAP( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePr( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePr( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePr( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeTIP( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeTIP( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeTIP( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth2-1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1-1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0-1) ;
compareNodecountevent( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodecountevent( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodecountevent( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodeKEEPALIVE( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeKEEPALIVE( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeKEEPALIVE( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeintropic( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeintropic( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeintropic( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSaturation( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodeSaturation( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSaturation( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodePointers( p1.parent , depth1,1, p2.parent , depth2--1) ;
compareNodePointers( p1.parent , depth1,1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1,1, p0.parent , depth0--1) ;
compareNodeslices( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeslices( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeslices( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeFixing( p1.parent , depth1-1, p2.parent , depth1--1) ;
compareNodeFixing( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeFixing( p1.parent , depth1-1, p0.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth2--0) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--0) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodeaugenzahl( p1.parent , depth1-1, p2.parent , depth1--1) ;
compareNodeaugenzahl( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeaugenzahl( p1.parent , depth1-1, p0.parent , depth1--1) ;
compareNodeWARLOCK( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodeWARLOCK( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeWARLOCK( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth1--2) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth1--0) ;
compareNodeShould( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodeShould( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeShould( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodeKCJS( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeKCJS( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeKCJS( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeexerter( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeexerter( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeexerter( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodewhathit( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodewhathit( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodewhathit( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeKunden( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeKunden( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeKunden( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeFlying( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeFlying( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeFlying( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeProcesamiento( p1.parent , depth1-1, p2.parent , depth2--1) ;
