typeHierarchyList.add( -1, pair ) ;
typeHierarchyList.add(1, pair ) ;
typeHierarchyList.add( -2, pair ) ;
typeHierarchyList.add( -2008, pair ) ;
typeHierarchyList.add( -1, pair ) ;
typeHierarchyList.add( -0, pair ) ;
typeHierarchyList.add(0, pair ) ;
typeHierarchyList.add( -1, pair , 'License') ;
typeHierarchyList.add( -1, pair , 'The specified type handler for type ') ;
typeHierarchyList.add( -1, pair , '. Gson does not allow this.') ;
typeHierarchyList.add( -1, pair , ':') ;
typeHierarchyList.add( -1, pair , '}') ;
typeHierarchyList.add( -1, pair , ' hides the previously registered type hierarchy handler for ') ;
typeHierarchyList.add( -1, pair , 'Overriding the existing type handler for {0}') ;
typeHierarchyList.add( -1, pair , 'AS IS') ;
typeHierarchyList.add( -1, pair , '{mapForTypeHierarchy:{') ;
typeHierarchyList.add( -1, pair , ',') ;
typeHierarchyList.add( -1, pair , '},map:{') ;
typeHierarchyList.add( -1, pair , 'Attempted to modify an unmodifiable map.') ;
typeHierarchyList.add( -1, pair -1) ;
typeHierarchyList.add( -1, pair , true ) ;
typeHierarchyList.add( type , pair ) ;
typeHierarchyList.add( -1, pair , false ) ;
typeHierarchyList.put( -1, pair ) ;
typeHierarchyList.add(2, pair ) ;
typeHierarchyList.add(2008, pair ) ;
typeHierarchyList.add(1, pair ) ;
typeHierarchyList.add(0, pair ) ;
typeHierarchyList.add( -1, pair +1) ;
typeHierarchyList.add( -1, pair , null ) ;
typeHierarchyList.add( -1, pair ,1) ;
typeHierarchyList.add( -1, pair ,0) ;
typeHierarchyList.add( -1, pair , type ) ;
typeHierarchyList.remove( -1, pair ) ;
typeHierarchyList.add( -0, pair ) ;
typeHierarchyList.add( -1, pair *1) ;
typeHierarchyList.add( type ) ;
typeHierarchyList.set( -1, pair ) ;
typeHierarchyList.push( -1, pair ) ;
typeHierarchyList.add( -1, pair ,2) ;
typeHierarchyList.add( -1, pair ,2008) ;
typeHierarchyList.add( -1, pair ,1) ;
typeHierarchyList.add( -1, pair ,0) ;
typeHierarchyList.add( -1, pair ) ) ;
typeHierarchyList.add( -1, 'License'+ pair ) ;
typeHierarchyList.add( -1, 'The specified type handler for type '+ pair ) ;
typeHierarchyList.add( -1, '. Gson does not allow this.'+ pair ) ;
typeHierarchyList.add( -1, ':'+ pair ) ;
typeHierarchyList.add( -1, '}'+ pair ) ;
typeHierarchyList.add( -1, ' hides the previously registered type hierarchy handler for '+ pair ) ;
typeHierarchyList.add( -1, 'Overriding the existing type handler for {0}'+ pair ) ;
typeHierarchyList.add( -1, 'AS IS'+ pair ) ;
typeHierarchyList.add( -1, '{mapForTypeHierarchy:{'+ pair ) ;
typeHierarchyList.add( -1, ','+ pair ) ;
typeHierarchyList.add( -1, '},map:{'+ pair ) ;
typeHierarchyList.add( -1, 'Attempted to modify an unmodifiable map.'+ pair ) ;
typeHierarchyList.add( -1, pair ) +1;
typeHierarchyList.add( -1, type ) ;
typeHierarchyList.add( -1, 'License', pair ) ;
typeHierarchyList.add( -1, 'The specified type handler for type ', pair ) ;
typeHierarchyList.add( -1, '. Gson does not allow this.', pair ) ;
typeHierarchyList.add( -1, ':', pair ) ;
typeHierarchyList.add( -1, '}', pair ) ;
typeHierarchyList.add( -1, ' hides the previously registered type hierarchy handler for ', pair ) ;
typeHierarchyList.add( -1, 'Overriding the existing type handler for {0}', pair ) ;
typeHierarchyList.add( -1, 'AS IS', pair ) ;
typeHierarchyList.add( -1, '{mapForTypeHierarchy:{', pair ) ;
typeHierarchyList.add( -1, ',', pair ) ;
typeHierarchyList.add( -1, '},map:{', pair ) ;
typeHierarchyList.add( -1, 'Attempted to modify an unmodifiable map.', pair ) ;
typeHierarchyList.add( -1, type , pair ) ;
typeHierarchyList.add( -1, null , pair ) ;
typeHierarchyList.add( 'License', pair ) ;
typeHierarchyList.add( 'The specified type handler for type ', pair ) ;
typeHierarchyList.add( '. Gson does not allow this.', pair ) ;
typeHierarchyList.add( ':', pair ) ;
typeHierarchyList.add( '}', pair ) ;
typeHierarchyList.add( ' hides the previously registered type hierarchy handler for ', pair ) ;
typeHierarchyList.add( 'Overriding the existing type handler for {0}', pair ) ;
typeHierarchyList.add( 'AS IS', pair ) ;
typeHierarchyList.add( '{mapForTypeHierarchy:{', pair ) ;
typeHierarchyList.add( ',', pair ) ;
typeHierarchyList.add( '},map:{', pair ) ;
typeHierarchyList.add( 'Attempted to modify an unmodifiable map.', pair ) ;
typeHierarchyList.addAll( -1, pair ) ;
typeHierarchyList.add( -1, pair , i ) ;
typeHierarchyList.add( -1, pair + 'License') ;
typeHierarchyList.add( -1, pair + 'The specified type handler for type ') ;
typeHierarchyList.add( -1, pair + '. Gson does not allow this.') ;
typeHierarchyList.add( -1, pair + ':') ;
typeHierarchyList.add( -1, pair + '}') ;
typeHierarchyList.add( -1, pair + ' hides the previously registered type hierarchy handler for ') ;
typeHierarchyList.add( -1, pair + 'Overriding the existing type handler for {0}') ;
typeHierarchyList.add( -1, pair + 'AS IS') ;
typeHierarchyList.add( -1, pair + '{mapForTypeHierarchy:{') ;
typeHierarchyList.add( -1, pair + ',') ;
typeHierarchyList.add( -1, pair + '},map:{') ;
typeHierarchyList.add( -1, pair + 'Attempted to modify an unmodifiable map.') ;
typeHierarchyList.add( typeHierarchy , pair ) ;
typeHierarchyList.add( -1, true , pair ) ;
