messageHasDesc = true ;
messageHasDesc = false ;
messageHasDesc = new HashSet < >( ) ;
messageHasDesc = new ArrayList < >( false ) ;
messageHasDesc = new HashSet < String >( ) ;
messageHasDesc = new ArrayList < >( ) ;
messageHasDesc = System.currentTimeMillis( ) ;
messageHasDesc = message.getName( ) ;
messageHasDesc = new HashSet < >( false ) ;
messageHasDesc = new ArrayList < String >( ) ;
messageHasDesc = new HashMap < >( ) ;
messageHasDesc = message.getName( ) + '} or {@code ';
messageHasDesc = message.getName( ) + ' + ';
messageHasDesc = message.getName( ) + 'License';
messageHasDesc = message.getName( ) + 'MSG_UNNAMED_\\d+';
messageHasDesc = message.getName( ) + 'goog';
messageHasDesc = message.getName( ) + 'someUserName';
messageHasDesc = message.getName( ) + 'Message';
messageHasDesc = message.getName( ) + ' ';
messageHasDesc = message.getName( ) + '() function could be used only with MSG_* property or variable';
messageHasDesc = message.getName( ) + 'JSC_MSG_HAS_NO_DESCRIPTION';
messageHasDesc = message.getName( ) + 'Unrecognized message placeholder referenced: ';
messageHasDesc = message.getName( ) + 'JSC_MSG_ORPHANED_NODE';
messageHasDesc = message.getName( ) + 'JSC_MSG_HAS_NO_VALUE';
messageHasDesc = message.getName( ) + 'Message value of {0} is just an empty string. ';
messageHasDesc = message.getName( ) + 'Please use ';
messageHasDesc = message.getName( ) + 'JSC_MSG_HAS_NO_TEXT';
messageHasDesc = message.getName( ) + 'Expected node type ';
messageHasDesc = message.getName( ) + 'JSC_MSG_KEY_DUPLICATED';
messageHasDesc = message.getName( ) + 'Message {0} has no description. Add @desc JsDoc tag.';
messageHasDesc = message.getName( ) + 'name';
messageHasDesc = message.getName( ) + 's';
messageHasDesc = message.getName( ) + 'Cannot parse value of message ';
messageHasDesc = message.getName( ) + 'standard';
messageHasDesc = message.getName( ) + '\0';
messageHasDesc = message.getName( ) + 'duplicate message variable name found for {0}, ';
messageHasDesc = message.getName( ) + 'Message parse tree malformed. {0}';
messageHasDesc = message.getName( ) + 'STRING or ADD node expected; found: ';
messageHasDesc = message.getName( ) + 'JSC_MSG_FALLBACK_ARG_ERROR';
messageHasDesc = message.getName( ) + 'A4_LETTER';
messageHasDesc = message.getName( ) + 'JSC_MSG_TREE_MALFORMED';
messageHasDesc = message.getName( ) + ' + type + ';
messageHasDesc = message.getName( ) + 'Message string literal expected';
messageHasDesc = message.getName( ) + 'STRING, NAME, or ADD node expected; found: ';
messageHasDesc = message.getName( ) + 'getMsg';
messageHasDesc = message.getName( ) + 'Some untrackable message';
messageHasDesc = message.getName( ) + 'getProductName';
messageHasDesc = message.getName( ) + 'str';
messageHasDesc = message.getName( ) + 'Placeholder incorrectly formatted in: ';
messageHasDesc = message.getName( ) + '_';
messageHasDesc = message.getName( ) + 'START_SPAN_1_23';
messageHasDesc = message.getName( ) + 'message node {0} has no value';
messageHasDesc = message.getName( ) + 'goog.getMsg';
messageHasDesc = message.getName( ) + 'product';
messageHasDesc = message.getName( ) + 'NAME, LP, or BLOCK node expected; found: ';
messageHasDesc = message.getName( ) + 'MSG_';
messageHasDesc = message.getName( ) + '@hidden';
messageHasDesc = message.getName( ) + 'OBJLIT node expected';
messageHasDesc = message.getName( ) + 'Placeholder name not in lowerCamelCase: ';
messageHasDesc = message.getName( ) + 'JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX';
messageHasDesc = message.getName( ) + 'Hi {$userName}! Welcome to {$product}.';
messageHasDesc = message.getName( ) + 'Message initialized using unrecognized function. ';
messageHasDesc = message.getName( ) + 'AS IS';
messageHasDesc = message.getName( ) + 'message not initialized using ';
messageHasDesc = message.getName( ) + 'Could not find message entry for fallback argument {0}';
messageHasDesc = message.getName( ) + '; found: ';
messageHasDesc = message.getName( ) + 'r';
messageHasDesc = message.getName( ) + 'http://code.google.com/p/closure-templates/';
messageHasDesc = message.getName( ) + '[a-z][a-zA-Z\\d]*[_\\d]*';
messageHasDesc = message.getName( ) + 'JSC_MSG_BAD_FALLBACK_SYNTAX';
messageHasDesc = message.getName( ) + 'Bad syntax. ';
messageHasDesc = message.getName( ) + 'startSpan_1_23';
messageHasDesc = message.getName( ) + 'Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)';
messageHasDesc = message.getName( ) + '_HELP';
messageHasDesc = message.getName( ) + 'NAME';
messageHasDesc = message.getName( ) + '() instead.';
messageHasDesc = message.getName( ) + 'initial definition {1}:{2}';
messageHasDesc = message.getName( ) + 'a4Letter';
messageHasDesc = message.getName( ) + '; found: null';
messageHasDesc = message.getName( ) + 'Unused message placeholder: ';
messageHasDesc = message.getName( ) + 'Message must be initialized using ';
messageHasDesc = message.getName( ) + 'RETURN node expected; found: ';
messageHasDesc = message.getName( ) + '}';
messageHasDesc = message.getName( ) + 'STRING_KEY node expected as OBJLIT key';
messageHasDesc = message.getName( ) + ' function.';
messageHasDesc = message.getName( ) + '{$';
messageHasDesc = message.getName( ) + ' + MSG_FUNCTION_NAME + ';
messageHasDesc = message.getName( ) + 'Empty messages are forbidden.';
messageHasDesc = message.getName( ) + ' -> ';
messageHasDesc = message.getName( ) + 'goog.getMsgWithFallback';
messageHasDesc = message.getName( ) + 'userName';
messageHasDesc = message.getName( ) + 'a.b.MSG_X';
messageHasDesc = message.getName( ) + 't';
messageHasDesc = message.getName( ) + 'Duplicate placeholder name: ';
messageHasDesc.setText( false ) ;
messageHasDesc = new HashSet < Integer >( ) ;
messageHasDesc = new ArrayList( ) ;
messageHasDesc = new HashSet < Boolean >( ) ;
messageHasDesc = System.getProperty( '} or {@code ') ;
messageHasDesc = System.getProperty( ' + ') ;
