_mainHashMask =( newLen +75) ;
_mainHashMask =( newLen +24) ;
_mainHashMask =( newLen +33) ;
_mainHashMask =( newLen +3) ;
_mainHashMask =( newLen +60) ;
_mainHashMask =( newLen +25) ;
_mainHashMask =( newLen +8) ;
_mainHashMask =( newLen +32) ;
_mainHashMask =( newLen +2) ;
_mainHashMask =( newLen +63) ;
_mainHashMask =( newLen +17) ;
_mainHashMask =( newLen +4) ;
_mainHashMask =( newLen +16) ;
_mainHashMask =( newLen +2010) ;
_mainHashMask =( newLen +255) ;
_mainHashMask =( newLen +6000) ;
_mainHashMask =( newLen +65599) ;
_mainHashMask =( newLen +7) ;
_mainHashMask =( newLen +64) ;
_mainHashMask =( newLen +9) ;
_mainHashMask =( newLen +15) ;
_mainHashMask =( newLen +01) ;
_mainHashMask =( newLen +5) ;
_mainHashMask =( newLen +50) ;
_mainHashMask =( newLen +0) ;
_mainHashMask =( newLen +21) ;
_mainHashMask =( newLen +256) ;
_mainHashMask =( newLen +31) ;
_mainHashMask =( newLen +13) ;
_mainHashMask =( newLen +1) ;
_mainHashMask =( newLen +10000) ;
_mainHashMask =( newLen +1) ;
_mainHashMask =( newLen +75+1) ;
_mainHashMask =( newLen +24+1) ;
_mainHashMask =( newLen +33+1) ;
_mainHashMask =( newLen +3+1) ;
_mainHashMask =( newLen +60+1) ;
_mainHashMask =( newLen +25+1) ;
_mainHashMask =( newLen +8+1) ;
_mainHashMask =( newLen +32+1) ;
_mainHashMask =( newLen +2+1) ;
_mainHashMask =( newLen +63+1) ;
_mainHashMask =( newLen +17+1) ;
_mainHashMask =( newLen +4+1) ;
_mainHashMask =( newLen +16+1) ;
_mainHashMask =( newLen +2010+1) ;
_mainHashMask =( newLen +255+1) ;
_mainHashMask =( newLen +6000+1) ;
_mainHashMask =( newLen +65599+1) ;
_mainHashMask =( newLen +7+1) ;
_mainHashMask =( newLen +64+1) ;
_mainHashMask =( newLen +9+1) ;
_mainHashMask =( newLen +15+1) ;
_mainHashMask =( newLen +01+1) ;
_mainHashMask =( newLen +5+1) ;
_mainHashMask =( newLen +50+1) ;
_mainHashMask =( newLen +0+1) ;
_mainHashMask =( newLen +21+1) ;
_mainHashMask =( newLen +256+1) ;
_mainHashMask =( newLen +31+1) ;
_mainHashMask =( newLen +13+1) ;
_mainHashMask =( newLen +1+1) ;
_mainHashMask =( newLen +10000+1) ;
_mainHashMask =( newLen +75) + '/';
_mainHashMask =( newLen +75) + 'empty';
_mainHashMask =( newLen +75) + '+symbolsSeen+';
_mainHashMask =( newLen +75) + 'Longest collision chain in symbol table (of size ';
_mainHashMask =( newLen +75) + ' -- suspect a DoS attack based on hash collisions';
_mainHashMask =( newLen +75) + 'com.fasterxml.jackson.core.main.TestWithTonsaSymbols';
_mainHashMask =( newLen +75) + ', ';
_mainHashMask =( newLen +75) + ' coll; avg length: ';
_mainHashMask =( newLen +75) + '; should be ';
_mainHashMask =( newLen +75) + '+maxLen+';
_mainHashMask =( newLen +75) + 'random';
_mainHashMask =( newLen +75) + 'root';
_mainHashMask =( newLen +75) + 'multi-quad';
_mainHashMask =( newLen +75) + 'Internal error: count after rehash ';
_mainHashMask =( newLen +75) + 'multiply-add';
_mainHashMask =( newLen +75) + 'too long';
_mainHashMask =( newLen +75) + 's what we';
_mainHashMask =( newLen +75) + ') now exceeds maximum, ';
_mainHashMask =( newLen +75) + '[BytesToNameCanonicalizer, size: ';
_mainHashMask =( newLen +75) + ']';
_mainHashMask =( newLen +24) + '/';
_mainHashMask =( newLen +24) + 'empty';
_mainHashMask =( newLen +24) + '+symbolsSeen+';
_mainHashMask =( newLen +24) + 'Longest collision chain in symbol table (of size ';
_mainHashMask =( newLen +24) + ' -- suspect a DoS attack based on hash collisions';
_mainHashMask =( newLen +24) + 'com.fasterxml.jackson.core.main.TestWithTonsaSymbols';
_mainHashMask =( newLen +24) + ', ';
_mainHashMask =( newLen +24) + ' coll; avg length: ';
_mainHashMask =( newLen +24) + '; should be ';
_mainHashMask =( newLen +24) + '+maxLen+';
_mainHashMask =( newLen +24) + 'random';
_mainHashMask =( newLen +24) + 'root';
_mainHashMask =( newLen +24) + 'multi-quad';
_mainHashMask =( newLen +24) + 'Internal error: count after rehash ';
_mainHashMask =( newLen +24) + 'multiply-add';
_mainHashMask =( newLen +24) + 'too long';
_mainHashMask =( newLen +24) + 's what we';
