return new ArrayList < String >(0,0) ;
return new ArrayList < String >(0) ;
return new ArrayList < String >(0, value ) ;
return new ArrayList < Object >(0,0) ;
return new HashSet < String >(0,0) ;
return new ArrayList < Integer >(0,0) ;
throw new IllegalArgumentException( '') ;
throw new IllegalArgumentException( '/') ;
throw new IllegalArgumentException( ' in a comment') ;
throw new IllegalArgumentException( '\f') ;
throw new IllegalArgumentException( 'ALLOW_COMMENTS') ;
throw new IllegalArgumentException( '+b64variant+') ;
throw new IllegalArgumentException( '+b64variant.getPaddingChar()+') ;
throw new IllegalArgumentException( '): ') ;
throw new IllegalArgumentException( ' in character escape sequence') ;
throw new IllegalArgumentException( '*') ;
throw new IllegalArgumentException( 'Exponent indicator not followed by a digit') ;
throw new IllegalArgumentException( 'Failed to decode VALUE_STRING as base64 (') ;
throw new IllegalArgumentException( 'null') ;
throw new IllegalArgumentException( '\r') ;
throw new IllegalArgumentException( '\t') ;
throw new IllegalArgumentException( '"+b64variant.getPaddingChar()+"') ;
throw new IllegalArgumentException( 'Reader returned 0 characters when trying to read ') ;
throw new IllegalArgumentException( 'n') ;
throw new IllegalArgumentException( 'Unexpected end-of-input within/between ') ;
throw new IllegalArgumentException( "expected padding character '") ;
throw new IllegalArgumentException( "'") ;
throw new IllegalArgumentException( ' || c == ') ;
throw new IllegalArgumentException( 'NaN') ;
throw new IllegalArgumentException( 'name') ;
throw new IllegalArgumentException( 'Infinity') ;
throw new IllegalArgumentException( '+Infinity') ;
throw new IllegalArgumentException( ' || ch > ') ;
throw new IllegalArgumentException( "Unrecognized token '") ;
throw new IllegalArgumentException( 'expected a digit for number exponent') ;
throw new IllegalArgumentException( 'ReaderBasedNumericParser') ;
throw new IllegalArgumentException( 'I') ;
throw new IllegalArgumentException( '-') ;
throw new IllegalArgumentException( '"+((char) i), ') ;
throw new IllegalArgumentException( '+_parsingContext.getTypeDesc()+') ;
throw new IllegalArgumentException( 'N') ;
throw new IllegalArgumentException( '.') ;
throw new IllegalArgumentException( 'E') ;
throw new IllegalArgumentException( '-Infinity') ;
throw new IllegalArgumentException( ": was expecting closing '") ;
throw new IllegalArgumentException( 'expected digit (0-9) to follow minus sign, for valid numeric value') ;
throw new IllegalArgumentException( '_nextAfterName') ;
throw new IllegalArgumentException( 'Leading zeroes not allowed') ;
throw new IllegalArgumentException( ': was expecting closing quote for a string value') ;
throw new IllegalArgumentException( "Non-standard token '") ;
throw new IllegalArgumentException( '+') ;
throw new IllegalArgumentException( 'Missing integer part (next char ') ;
throw new IllegalArgumentException( ' or ') ;
throw new IllegalArgumentException( 'll eagerly parse contents; this so that there') ;
throw new IllegalArgumentException( ') not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary') ;
throw new IllegalArgumentException( '\n') ;
throw new IllegalArgumentException( ')') ;
throw new IllegalArgumentException( '"+((char) endChar)+"') ;
throw new IllegalArgumentException( '+sb.toString()+') ;
throw new IllegalArgumentException( 'string value') ;
throw new IllegalArgumentException( '"+sb.toString()+"') ;
throw new IllegalArgumentException( "Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
throw new IllegalArgumentException( "was expecting either '*' or '/' for a comment") ;
throw new IllegalArgumentException( "'null', 'true', 'false' or NaN") ;
throw new IllegalArgumentException( 'own') ;
throw new IllegalArgumentException( "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
throw new IllegalArgumentException( 'expected a value') ;
throw new IllegalArgumentException( 'was expecting double-quote to start field name') ;
throw new IllegalArgumentException( ' entries') ;
throw new IllegalArgumentException( "' for name") ;
throw new IllegalArgumentException( '\') ;
throw new IllegalArgumentException( '+match+') ;
throw new IllegalArgumentException( 'resource') ;
throw new IllegalArgumentException( "': was expecting ") ;
throw new IllegalArgumentException( 'expected a hex-digit for character escape sequence') ;
throw new IllegalArgumentException( 'false') ;
throw new IllegalArgumentException( '+INF') ;
throw new IllegalArgumentException( ' && c <= ') ;
throw new IllegalArgumentException( '+((char) endChar)+') ;
throw new IllegalArgumentException( 'missing') ;
throw new IllegalArgumentException( 'was expecting comma to separate ') ;
throw new IllegalArgumentException( "Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow") ;
throw new IllegalArgumentException( 'expect-value') ;
throw new IllegalArgumentException( 'true') ;
throw new IllegalArgumentException( 'e') ;
throw new IllegalArgumentException( 'was expecting a colon to separate field name and value') ;
throw new IllegalArgumentException( 'Decimal point not followed by a digit') ;
throw new IllegalArgumentException( '+_getCharDesc(c)+') ;
throw new IllegalArgumentException( 'real') ;
throw new IllegalArgumentException( ', ') ;
throw new IllegalArgumentException( '-INF') ;
throw new IllegalArgumentException( "('true', 'false' or 'null')") ;
throw new IllegalArgumentException( '+_currToken+') ;
throw new IllegalArgumentException( '}') ;
throw new IllegalArgumentException( ' :') ;
throw new IllegalArgumentException( "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)") ;
throw new IllegalArgumentException( 'was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name') ;
throw new IllegalArgumentException( '9') ;
throw new IllegalArgumentException( '\b') ;
throw new IllegalArgumentException( '"') ;
