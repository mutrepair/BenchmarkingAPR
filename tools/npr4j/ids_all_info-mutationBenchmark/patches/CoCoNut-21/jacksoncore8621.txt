_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ptr +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( short +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( a +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( instance +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( buffer +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( e +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ctx +_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,_inputPtr ,_inputPtr ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ''+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '/'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ' in a comment'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '\f'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'ALLOW_COMMENTS'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '+b64variant+'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '+b64variant.getPaddingChar()+'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '): '+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ' in character escape sequence'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '*'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'Exponent indicator not followed by a digit'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'Failed to decode VALUE_STRING as base64 ('+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'null'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '\r'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '\t'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '"+b64variant.getPaddingChar()+"'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'Reader returned 0 characters when trying to read '+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'n'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'Unexpected end-of-input within/between '+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( "expected padding character '"+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( "'"+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ' || c == '+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'NaN'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'name'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'Infinity'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '+Infinity'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ' || ch > '+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( "Unrecognized token '"+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'expected a digit for number exponent'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'ReaderBasedNumericParser'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'I'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '-'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '"+((char) i), '+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '+_parsingContext.getTypeDesc()+'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'N'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '.'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'E'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '-Infinity'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ": was expecting closing '"+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'expected digit (0-9) to follow minus sign, for valid numeric value'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '_nextAfterName'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'Leading zeroes not allowed'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ': was expecting closing quote for a string value'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( "Non-standard token '"+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '+'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'Missing integer part (next char '+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ' or '+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'll eagerly parse contents; this so that there'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ') not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '\n'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ')'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '"+((char) endChar)+"'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '+sb.toString()+'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'string value'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '"+sb.toString()+"'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( "Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( "was expecting either '*' or '/' for a comment"+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( "'null', 'true', 'false' or NaN"+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'own'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'expected a value'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'was expecting double-quote to start field name'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ' entries'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( "' for name"+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '\'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '+match+'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'resource'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( "': was expecting "+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'expected a hex-digit for character escape sequence'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'false'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '+INF'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ' && c <= '+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '+((char) endChar)+'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'missing'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'was expecting comma to separate '+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( "Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'expect-value'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'true'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'e'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'was expecting a colon to separate field name and value'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'Decimal point not followed by a digit'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '+_getCharDesc(c)+'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'real'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ', '+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '-INF'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( "('true', 'false' or 'null')"+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '+_currToken+'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '}'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( ' :'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( 'was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name'+_inputPtr ) ) ;
_textBuffer.resetWithShared(_inputBuffer ,_inputPtr ,( '9'+_inputPtr ) ) ;
