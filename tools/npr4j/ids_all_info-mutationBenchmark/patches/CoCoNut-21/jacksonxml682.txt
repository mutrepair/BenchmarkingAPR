public Override public boolean enabledIn( int flags ) {  return( flags & getMask( ) ) ;
public Override public boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=0; }
public Override public boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=0;
public Override public boolean enabledIn( int flags ) {  return( flags & getMask( ) ) ==1; }
public Override public boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=1; }
public Override public boolean enabledIn( int flags ) {  return( flags & getMask( ) ) ==0; }
public Override enabledIn( int flags ) {  return( flags & getMask( ) ) ;
int enabledIn( int flags ) {  return( flags & getMask( ) ) ;
@ Override public boolean enabledIn( int flags ) {  return( flags & getMask( ) ) ;
private boolean enabledIn( int flags ) {  return( flags & getMask( ) ) ;
public Override enabledIn( int flags ) {  return( flags & getMask( ) ) !=0; }
boolean enabledIn( int flags ) {  return( flags & getMask( ) ) ;
public Override public boolean enabledIn( int flags ) {  return( flags & getMask( ) ) ==0;
@ Override public boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=0; }
protected boolean enabledIn( int flags ) {  return( flags & getMask( ) ) ;
public Override public boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=0) {
private boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=0; }
public Override enabledIn( int flags ) {  return( flags & getMask( ) ) !=0;
public Override public boolean enabledIn( int flags ) {  return( flags & getMask( ) ) != -1;
public Override public boolean enabledIn( int flags ) {  return( i & getMask( ) ) !=0; }
public Override public boolean enabledIn( int flags ) {  return( flags & getMask( ) ) ==1;
public Override public boolean enabledIn( int flags ) {  return( i & getMask( ) ) ;
protected boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=0; }
public static boolean enabledIn( int flags ) {  return( flags & getMask( ) ) ;
private boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=0;
public static boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=0; }
boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=0; }
int enabledIn( int flags ) {  return( flags & getMask( ) ) !=0; }
int enabledIn( int flags ) {  return( flags & getMask( ) ) !=0;
@ Override public boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=0;
public Override public boolean enabledIn( int flags ) {  return( flags & getMask( ) ) +1;
protected static boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=0; }
public synchronized boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=0; }
boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=0;
protected boolean enabledIn( int flags ) {  return( flags & getMask( ) ) !=0;
public synchronized boolean enabledIn( int flags ) {  return( flags & getMask( ) ) ;
protected static boolean enabledIn( int flags ) {  return( flags & getMask( ) ) ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( '') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'Current context not an object but ') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'unknown') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'writeRaw') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'write number') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'Current context not an ARRAY but ') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'Can not write a field name, expecting a value') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'false') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( "': this breaks functionality such as indentation that relies on it. ") ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( ") does not implement Stax2 API natively and is missing method '") ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'Can not write END_ELEMENT without open START_ELEMENT') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'xsi:nil') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'UTF-8') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( ', ') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'Underlying Stax XMLStreamWriter (of type ') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'raw') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( '1.1') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'xsd:isNil') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( '+typeMsg+') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'start an array') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'revert') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'Can not ') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'write Binary value') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'full buffer') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'No element/attribute name specified when trying to output element') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'write String value') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'write boolean value') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'You need to upgrade to using compliant Stax implementation like Woodstox or Aalto') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'write null value') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( '1.0') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( ', expecting field name') ;
int enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'start an object') ;
public Override public boolean enabledIn( int flags ) {  return( i & getMask( ) ) !=0;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( '') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'Current context not an object but ') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'unknown') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'writeRaw') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'write number') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'Current context not an ARRAY but ') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'Can not write a field name, expecting a value') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'false') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( "': this breaks functionality such as indentation that relies on it. ") ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( ") does not implement Stax2 API natively and is missing method '") ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'Can not write END_ELEMENT without open START_ELEMENT') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'xsi:nil') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'UTF-8') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( ', ') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'Underlying Stax XMLStreamWriter (of type ') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'raw') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( '1.1') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'xsd:isNil') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( '+typeMsg+') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'start an array') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'revert') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'Can not ') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'write Binary value') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'full buffer') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'No element/attribute name specified when trying to output element') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'write String value') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'write boolean value') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'You need to upgrade to using compliant Stax implementation like Woodstox or Aalto') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( 'write null value') ;
boolean enabledIn( int flags ) {  return( flags & getMask( ) ).equals( '1.0') ;
