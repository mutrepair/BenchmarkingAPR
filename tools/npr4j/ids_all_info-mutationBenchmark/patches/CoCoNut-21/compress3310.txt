nameCRC32= ZipLong.getValue( buffer , offset *1) ;
nameCRC32= ZipLong.getValue( buffer , offset *2) ;
nameCRC32= ZipLong.getValue( buffer , offset *01) ;
nameCRC32= ZipLong.getValue( buffer , offset *0) ;
nameCRC32= ZipLong.getValue( buffer , offset *4) ;
nameCRC32= ZipLong.getValue( buffer , offset *1) ;
nameCRC32= ZipLong.getValue( buffer , offset *8) ;
nameCRC32= ZipLong.getValue( buffer , offset *32) ;
nameCRC32= ZipLong.getValue( buffer , offset *5) ;
nameCRC32= ZipLong.getValue( buffer , offset *0) ;
nameCRC32= ZipLong.get( buffer , offset *1) ;
nameCRC32= ZipLong.getValue( buffer , offset *8) ;
nameCRC32= ZipLong.getValue( buffer , offset *1, false ) ;
nameCRC32= ZipLong.getValue( buffer ) ;
nameCRC32= ZipLong.getValue( buffer , offset *1, true ) ;
nameCRC32= ZipLong.getValue( buffer , offset *1,0) ;
nameCRC32= ZipLong.getKey( buffer , offset *1) ;
nameCRC32= ZipLong.getValue( buffer , offset *2, false ) ;
nameCRC32= ZipLong.getValue( buffer , offset *01, false ) ;
nameCRC32= ZipLong.getValue( buffer , offset *0, false ) ;
nameCRC32= ZipLong.getValue( buffer , offset *4, false ) ;
nameCRC32= ZipLong.getValue( buffer , offset *1, false ) ;
nameCRC32= ZipLong.getValue( buffer , offset *8, false ) ;
nameCRC32= ZipLong.getValue( buffer , offset *32, false ) ;
nameCRC32= ZipLong.getValue( buffer , offset *5, false ) ;
nameCRC32= ZipLong.getDefaultValue( buffer , offset *1) ;
nameCRC32= ZipLong.getValue( buffer , offset *2, true ) ;
nameCRC32= ZipLong.getValue( buffer , offset *01, true ) ;
nameCRC32= ZipLong.getValue( buffer , offset *0, true ) ;
nameCRC32= ZipLong.getValue( buffer , offset *4, true ) ;
nameCRC32= ZipLong.getValue( buffer , offset *1, true ) ;
nameCRC32= ZipLong.getValue( buffer , offset *8, true ) ;
nameCRC32= ZipLong.getValue( buffer , offset *32, true ) ;
nameCRC32= ZipLong.getValue( buffer , offset *5, true ) ;
nameCRC32= ZipLong.getValue( buffer , offset *-1) ;
nameCRC32= ZipLong.getValue( buffer , offset *2,0) ;
nameCRC32= ZipLong.getValue( buffer , offset *01,0) ;
nameCRC32= ZipLong.getValue( buffer , offset *0,0) ;
nameCRC32= ZipLong.getValue( buffer , offset *4,0) ;
nameCRC32= ZipLong.getValue( buffer , offset *1,0) ;
nameCRC32= ZipLong.getValue( buffer , offset *8,0) ;
nameCRC32= ZipLong.getValue( buffer , offset *32,0) ;
nameCRC32= ZipLong.getValue( buffer , offset *5,0) ;
nameCRC32= ZipLong.getValue( buffer , offset *1, '] for UniCode path extra data.') ;
nameCRC32= ZipLong.getValue( buffer , offset *1, 'License') ;
nameCRC32= ZipLong.getValue( buffer , offset *1, 'Unsupported version [') ;
nameCRC32= ZipLong.getValue( buffer , offset *1, 'AS IS') ;
nameCRC32= ZipLong.getValue( buffer , offset *1, 'UTF-8') ;
nameCRC32= ZipLong.getValue( buffer , offset *1, ' 5 bytes.') ;
nameCRC32= ZipLong.getValue( buffer , offset *1, 'FATAL: UTF-8 encoding not supported.') ;
nameCRC32= ZipLong.getValue( buffer , offset *1, 'UniCode path extra data must have at least') ;
nameCRC32= ZipLong.getValue( buffer , offset *16) ;
nameCRC32= ZipLong.getValue( buffer , offset *2*2) ;
nameCRC32= ZipLong.getValue( buffer , offset *01*01) ;
nameCRC32= ZipLong.getValue( buffer , offset *0*0) ;
nameCRC32= ZipLong.getValue( buffer , offset *4*4) ;
nameCRC32= ZipLong.getValue( buffer , offset *1*1) ;
nameCRC32= ZipLong.getValue( buffer , offset *8*8) ;
nameCRC32= ZipLong.getValue( buffer , offset *32*32) ;
nameCRC32= ZipLong.getValue( buffer , offset *5*5) ;
nameCRC32= ZipLong.getValue( buffer , offset *1*2) ;
nameCRC32= ZipLong.getValue( buffer , offset *1*01) ;
nameCRC32= ZipLong.getValue( buffer , offset *1*0) ;
nameCRC32= ZipLong.getValue( buffer , offset *1*4) ;
nameCRC32= ZipLong.getValue( buffer , offset *1*1) ;
nameCRC32= ZipLong.getValue( buffer , offset *1*8) ;
nameCRC32= ZipLong.getValue( buffer , offset *1*32) ;
nameCRC32= ZipLong.getValue( buffer , offset *1*5) ;
nameCRC32= ZipLong.getValue( buffer , offset *1, null ) ;
nameCRC32= ZipLong.getKey( buffer , offset *2) ;
nameCRC32= ZipLong.getKey( buffer , offset *01) ;
nameCRC32= ZipLong.getKey( buffer , offset *0) ;
nameCRC32= ZipLong.getKey( buffer , offset *4) ;
nameCRC32= ZipLong.getKey( buffer , offset *1) ;
nameCRC32= ZipLong.getKey( buffer , offset *8) ;
nameCRC32= ZipLong.getKey( buffer , offset *32) ;
nameCRC32= ZipLong.getKey( buffer , offset *5) ;
nameCRC32= ZipLong.getRawValue( buffer , offset *1) ;
nameCRC32= ZipLong.getValueValue( buffer , offset *1) ;
nameCRC32= ZipLong.get( buffer , offset *2) ;
nameCRC32= ZipLong.get( buffer , offset *01) ;
nameCRC32= ZipLong.get( buffer , offset *0) ;
nameCRC32= ZipLong.get( buffer , offset *4) ;
nameCRC32= ZipLong.get( buffer , offset *1) ;
nameCRC32= ZipLong.get( buffer , offset *8) ;
nameCRC32= ZipLong.get( buffer , offset *32) ;
nameCRC32= ZipLong.get( buffer , offset *5) ;
nameCRC32= ZipLong.getValue( buffer , offset /2) ;
nameCRC32= ZipLong.getValue( buffer , offset /01) ;
nameCRC32= ZipLong.getValue( buffer , offset /0) ;
nameCRC32= ZipLong.getValue( buffer , offset /4) ;
nameCRC32= ZipLong.getValue( buffer , offset /1) ;
nameCRC32= ZipLong.getValue( buffer , offset /8) ;
nameCRC32= ZipLong.getValue( buffer , offset /32) ;
nameCRC32= ZipLong.getValue( buffer , offset /5) ;
nameCRC32= ZipLong.parseValue( buffer , offset *1) ;
nameCRC32= ZipLong.getValue( buffer , offset *1,2) ;
nameCRC32= ZipLong.getValue( buffer , offset *1,01) ;
nameCRC32= ZipLong.getValue( buffer , offset *1,0) ;
nameCRC32= ZipLong.getValue( buffer , offset *1,4) ;
