char < Integer > copy = pattern.charAt( i ) ;
String.valueOf( pattern.charAt( i ) ) ;
char < String > copy = pattern.charAt( i ) ;
Integer.valueOf( pattern.charAt( i ) ) ;
char < ? > copy = pattern.charAt( i ) ;
char < Integer > pop = pattern.charAt( i ) ;
String.valueOf( s.charAt( i ) ) ;
char < T > copy = pattern.charAt( i ) ;
char < Integer > peek = pattern.charAt( i ) ;
assertEquals( pattern.charAt( i ) ) ;
int peek = pattern.charAt( i ) ;
char < String > value = pattern.charAt( i ) ;
char < Integer > value = pattern.charAt( i ) ;
char [ ] copy = pattern.charAt( i /2001) ;
char [ ] copy = pattern.charAt( i /24) ;
char [ ] copy = pattern.charAt( i /27) ;
char [ ] copy = pattern.charAt( i /2013) ;
char [ ] copy = pattern.charAt( i /00) ;
char [ ] copy = pattern.charAt( i /3) ;
char [ ] copy = pattern.charAt( i /25) ;
char [ ] copy = pattern.charAt( i /10) ;
char [ ] copy = pattern.charAt( i /8) ;
char [ ] copy = pattern.charAt( i /30) ;
char [ ] copy = pattern.charAt( i /2) ;
char [ ] copy = pattern.charAt( i /4) ;
char [ ] copy = pattern.charAt( i /1996) ;
char [ ] copy = pattern.charAt( i /08) ;
char [ ] copy = pattern.charAt( i /11) ;
char [ ] copy = pattern.charAt( i /189) ;
char [ ] copy = pattern.charAt( i /500) ;
char [ ] copy = pattern.charAt( i /20) ;
char [ ] copy = pattern.charAt( i /7) ;
char [ ] copy = pattern.charAt( i /55) ;
char [ ] copy = pattern.charAt( i /9) ;
char [ ] copy = pattern.charAt( i /0800) ;
char [ ] copy = pattern.charAt( i /978) ;
char [ ] copy = pattern.charAt( i /0) ;
char [ ] copy = pattern.charAt( i /07) ;
char [ ] copy = pattern.charAt( i /12) ;
char [ ] copy = pattern.charAt( i /1) ;
char [ ] copy = pattern.charAt( i /23) ;
char [ ] copy = pattern.charAt( i /40) ;
assertEquals( pattern.charAt( i ) + '') ;
assertEquals( pattern.charAt( i ) + ' && c <= ') ;
assertEquals( pattern.charAt( i ) + 'D') ;
assertEquals( pattern.charAt( i ) + 'G') ;
assertEquals( pattern.charAt( i ) + 'S') ;
assertEquals( pattern.charAt( i ) + 'x') ;
assertEquals( pattern.charAt( i ) + 'A') ;
assertEquals( pattern.charAt( i ) + 'No datetime pattern for locale: ') ;
assertEquals( pattern.charAt( i ) + 'L') ;
assertEquals( pattern.charAt( i ) + 's') ;
assertEquals( pattern.charAt( i ) + 'License') ;
assertEquals( pattern.charAt( i ) + ':') ;
assertEquals( pattern.charAt( i ) + 'F') ;
assertEquals( pattern.charAt( i ) + 'W') ;
assertEquals( pattern.charAt( i ) + 'e') ;
assertEquals( pattern.charAt( i ) + 'ZZ') ;
assertEquals( pattern.charAt( i ) + ' and ') ;
assertEquals( pattern.charAt( i ) + 'd') ;
assertEquals( pattern.charAt( i ) + 'z') ;
assertEquals( pattern.charAt( i ) + ', ') ;
assertEquals( pattern.charAt( i ) + '..') ;
assertEquals( pattern.charAt( i ) + 'w') ;
assertEquals( pattern.charAt( i ) + 'C') ;
assertEquals( pattern.charAt( i ) + ' for short style, ') ;
assertEquals( pattern.charAt( i ) + 'k') ;
assertEquals( pattern.charAt( i ) + 'a') ;
assertEquals( pattern.charAt( i ) + '#') ;
assertEquals( pattern.charAt( i ) + 'c') ;
assertEquals( pattern.charAt( i ) + ' ') ;
assertEquals( pattern.charAt( i ) + 'AS IS') ;
assertEquals( pattern.charAt( i ) + 'Invalid style character: ') ;
assertEquals( pattern.charAt( i ) + '-') ;
assertEquals( pattern.charAt( i ) + ' for long, and ') ;
assertEquals( pattern.charAt( i ) + 'Invalid style specification: ') ;
assertEquals( pattern.charAt( i ) + 'h') ;
assertEquals( pattern.charAt( i ) + 'MMMM, yyyy') ;
assertEquals( pattern.charAt( i ) + 'K') ;
assertEquals( pattern.charAt( i ) + 'H') ;
assertEquals( pattern.charAt( i ) + "' is treated as escaped ") ;
assertEquals( pattern.charAt( i ) + '.') ;
assertEquals( pattern.charAt( i ) + 'E') ;
assertEquals( pattern.charAt( i ) + '\') ;
assertEquals( pattern.charAt( i ) + ' || c >= ') ;
assertEquals( pattern.charAt( i ) + '--') ;
assertEquals( pattern.charAt( i ) + 'ZZZ') ;
assertEquals( pattern.charAt( i ) + 'Z') ;
assertEquals( pattern.charAt( i ) + 'm') ;
assertEquals( pattern.charAt( i ) + "Style '--' is invalid") ;
assertEquals( pattern.charAt( i ) + ' for medium, ') ;
assertEquals( pattern.charAt( i ) + 'y') ;
assertEquals( pattern.charAt( i ) + 'Illegal pattern component: ') ;
assertEquals( pattern.charAt( i ) + 'Y') ;
assertEquals( pattern.charAt( i ) + 'M') ;
assertEquals( pattern.charAt( i ) + 'Invalid pattern specification') ;
assertEquals( pattern.charAt( i ) + "'      single quote                 literal       ") ;
assertEquals( pattern.charAt( i ) + ' outputs offset without a colon, ') ;
assertEquals( pattern.charAt( i ) + '?') ;
char < Integer > remove = pattern.charAt( i ) ;
