compareNodeMods( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeMods( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeMods( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeops( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeops( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeops( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeInstruments( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeInstruments( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeInstruments( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeTriangle( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeTriangle( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeTriangle( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeMove( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeMove( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeMove( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeVerify( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeVerify( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeVerify( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeRelations( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeRelations( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeRelations( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeserialize( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeserialize( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeserialize( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeRemoved( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeRemoved( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeRemoved( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeDHMS( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeDHMS( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeDHMS( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeBelow( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeBelow( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeBelow( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeTelegram( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeTelegram( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeTelegram( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeLaw( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeLaw( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeLaw( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodefromjava( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodefromjava( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodefromjava( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeTips( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeTips( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeTips( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNoderadians( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNoderadians( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNoderadians( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeNanos( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeNanos( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeNanos( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeMods( p1.parent , depth1-1, p2.parent , depth1--1) ;
compareNodeMods( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeMods( p1.parent , depth1-1, p0.parent , depth1--1) ;
compareNodeAnimated( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeAnimated( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeAnimated( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeMods( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodeMods( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeMods( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodeExtraction( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeExtraction( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeExtraction( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeCondition( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeCondition( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeCondition( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeRT( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeRT( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeRT( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNode( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNode( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNode( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeFlip( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeFlip( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeFlip( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeMods( p1.parent , depth1-1, p1.parent , depth2--1) ;
compareNodeMods( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeMods( p1.parent , depth1-1, p1.parent , depth0--1) ;
compareNodePointers( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePointers( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePointers( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeFast( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeFast( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeFast( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeDOM( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeDOM( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeDOM( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSpread( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSpread( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSpread( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeKeras( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeKeras( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeKeras( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSleeping( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSleeping( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSleeping( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeTide( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeTide( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeTide( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeTheta( p1.parent , depth1-1, p2.parent , depth2--1) ;
