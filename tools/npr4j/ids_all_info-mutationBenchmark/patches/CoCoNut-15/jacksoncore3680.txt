return 1;
return new ArrayList < String >(1) ;
return Integer.MAX_VALUE ;
return 1.toLowerCase( ) ;
return new ArrayList < String >( ) ;
return new ArrayList < >(1) ;
return new ArrayList < Integer >(1) ;
return 1.toUpperCase( ) ;
return new ArrayList < >( ) ;
 return( int ) Math.ceil(1) ;
return new ArrayList < Integer >( ) ;
return 1.size( ) -1;
return Double.MAX_VALUE ;
return 1.size( ) ;
return Integer.MAX_VALUE +1;
return Integer.MIN_VALUE ;
 return( int ) Math.ceil( '') ;
 return( int ) Math.ceil( '+Long.MIN_VALUE+') ;
 return( int ) Math.ceil( 'getBinaryValue') ;
 return( int ) Math.ceil( '+Integer.MIN_VALUE+') ;
 return( int ) Math.ceil( ') as character #') ;
 return( int ) Math.ceil( "Unexpected padding character ('") ;
 return( int ) Math.ceil( '+b64variant.getPaddingChar()+') ;
 return( int ) Math.ceil( '2') ;
 return( int ) Math.ceil( "' (code 0x") ;
 return( int ) Math.ceil( "': expected '") ;
 return( int ) Math.ceil( 'JsonNumericParserBase') ;
 return( int ) Math.ceil( '+numStr+') ;
 return( int ) Math.ceil( "Unexpected close marker '") ;
 return( int ) Math.ceil( ') out of range of int (') ;
 return( int ) Math.ceil( '+startDesc+') ;
 return( int ) Math.ceil( '5') ;
 return( int ) Math.ceil( "Malformed numeric value '") ;
 return( int ) Math.ceil( '"+((char)ch)+"') ;
 return( int ) Math.ceil( '"+b64variant.getPaddingChar()+"') ;
 return( int ) Math.ceil( 'Invalid numeric value: ') ;
 return( int ) Math.ceil( ') in base64 content') ;
 return( int ) Math.ceil( '+Integer.toHexString(ch)+') ;
 return( int ) Math.ceil( "'") ;
 return( int ) Math.ceil( ') out of range of int') ;
 return( int ) Math.ceil( '+expCh+') ;
 return( int ) Math.ceil( 's verify it') ;
 return( int ) Math.ceil( ' (from ') ;
 return( int ) Math.ceil( ' - ') ;
 return( int ) Math.ceil( '\0') ;
 return( int ) Math.ceil( '7') ;
 return( int ) Math.ceil( '+_textBuffer.contentsAsString()+') ;
 return( int ) Math.ceil( '-') ;
 return( int ) Math.ceil( '6') ;
 return( int ) Math.ceil( '+_parsingContext.getTypeDesc()+') ;
 return( int ) Math.ceil( ': expected ') ;
 return( int ) Math.ceil( '"+((char) actCh)+"') ;
 return( int ) Math.ceil( '.') ;
 return( int ) Math.ceil( 'E') ;
 return( int ) Math.ceil( ' starting at ') ;
 return( int ) Math.ceil( '+(bindex+1)+') ;
 return( int ) Math.ceil( '+Integer.MAX_VALUE+') ;
 return( int ) Math.ceil( ') not numeric, can not use numeric value accessors') ;
 return( int ) Math.ceil( '+') ;
 return( int ) Math.ceil( ' of 4-char base64 unit: padding only legal as 3rd or 4th character') ;
 return( int ) Math.ceil( '3') ;
 return( int ) Math.ceil( ')') ;
 return( int ) Math.ceil( '8') ;
 return( int ) Math.ceil( "Illegal character '") ;
 return( int ) Math.ceil( 'Illegal white space character (code 0x') ;
 return( int ) Math.ceil( '"+_textBuffer.contentsAsString()+"') ;
 return( int ) Math.ceil( "') as character #") ;
 return( int ) Math.ceil( '+((char) actCh)+') ;
 return( int ) Math.ceil( '+_getCharDesc(ch)+') ;
 return( int ) Math.ceil( '\\') ;
 return( int ) Math.ceil( '+_parsingContext.getStartLocation(_ioContext.getSourceReference())+') ;
 return( int ) Math.ceil( '"+expCh+"') ;
 return( int ) Math.ceil( 'Illegal character (code 0x') ;
 return( int ) Math.ceil( ': ') ;
 return( int ) Math.ceil( '"+numStr+"') ;
 return( int ) Math.ceil( ') out of range of long (') ;
 return( int ) Math.ceil( '4') ;
 return( int ) Math.ceil( 'e') ;
 return( int ) Math.ceil( 'Numeric value (') ;
 return( int ) Math.ceil( 'not available') ;
 return( int ) Math.ceil( "' (for ") ;
 return( int ) Math.ceil( '+Long.MAX_VALUE+') ;
 return( int ) Math.ceil( ' of 4-char base64 unit: can only used between units') ;
 return( int ) Math.ceil( '+_currToken+') ;
 return( int ) Math.ceil( '+((char)ch)+') ;
 return( int ) Math.ceil( ') in numeric value') ;
 return( int ) Math.ceil( ': expected close marker for ') ;
 return( int ) Math.ceil( 'off-by-one') ;
 return( int ) Math.ceil( 'Unexpected character (') ;
 return( int ) Math.ceil( '9') ;
 return( int ) Math.ceil( '0') ;
 return( int ) Math.ceil( 'Current token (') ;
 return( int ) Math.ceil( ') out of range of Java float') ;
 return( int ) Math.ceil( '1') ;
 return( int ) Math.ceil( '+getText()+') ;
return 1.size( ) +1;
return 1.getValue( ) ;
return new ArrayList < String >(0) ;
return Double.MAX_VALUE +1;
 return( double ) Math.ceil(1) ;
