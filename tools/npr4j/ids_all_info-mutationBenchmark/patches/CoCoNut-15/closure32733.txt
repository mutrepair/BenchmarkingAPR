messageHasDesc = false ;
messageHasDesc = true ;
messageHasDesc = new messageHasDesc( false ) ;
messageHasDesc = new messageHasDesc( true ) ;
messageHasDesc = new messageHasDesc( ) ;
messageHasDesc = new ArrayList < >( false ) ;
messageHasDesc =( messageHasDesc ) ;
messageHasDesc = false.toString( ) ;
messageHasDesc = new messageHasDesc( '} or {@code ') ;
messageHasDesc = new messageHasDesc( ' + ') ;
messageHasDesc = new messageHasDesc( 'License') ;
messageHasDesc = new messageHasDesc( 'MSG_UNNAMED_\\d+') ;
messageHasDesc = new messageHasDesc( 'goog') ;
messageHasDesc = new messageHasDesc( 'someUserName') ;
messageHasDesc = new messageHasDesc( 'Message') ;
messageHasDesc = new messageHasDesc( ' ') ;
messageHasDesc = new messageHasDesc( '() function could be used only with MSG_* property or variable') ;
messageHasDesc = new messageHasDesc( 'JSC_MSG_HAS_NO_DESCRIPTION') ;
messageHasDesc = new messageHasDesc( 'Unrecognized message placeholder referenced: ') ;
messageHasDesc = new messageHasDesc( 'JSC_MSG_ORPHANED_NODE') ;
messageHasDesc = new messageHasDesc( 'JSC_MSG_HAS_NO_VALUE') ;
messageHasDesc = new messageHasDesc( 'Message value of {0} is just an empty string. ') ;
messageHasDesc = new messageHasDesc( 'Please use ') ;
messageHasDesc = new messageHasDesc( 'JSC_MSG_HAS_NO_TEXT') ;
messageHasDesc = new messageHasDesc( 'Expected node type ') ;
messageHasDesc = new messageHasDesc( 'JSC_MSG_KEY_DUPLICATED') ;
messageHasDesc = new messageHasDesc( 'Message {0} has no description. Add @desc JsDoc tag.') ;
messageHasDesc = new messageHasDesc( 'name') ;
messageHasDesc = new messageHasDesc( 's') ;
messageHasDesc = new messageHasDesc( 'Cannot parse value of message ') ;
messageHasDesc = new messageHasDesc( 'standard') ;
messageHasDesc = new messageHasDesc( '\0') ;
messageHasDesc = new messageHasDesc( 'duplicate message variable name found for {0}, ') ;
messageHasDesc = new messageHasDesc( 'Message parse tree malformed. {0}') ;
messageHasDesc = new messageHasDesc( 'STRING or ADD node expected; found: ') ;
messageHasDesc = new messageHasDesc( 'JSC_MSG_FALLBACK_ARG_ERROR') ;
messageHasDesc = new messageHasDesc( 'A4_LETTER') ;
messageHasDesc = new messageHasDesc( 'JSC_MSG_TREE_MALFORMED') ;
messageHasDesc = new messageHasDesc( ' + type + ') ;
messageHasDesc = new messageHasDesc( 'Message string literal expected') ;
messageHasDesc = new messageHasDesc( 'STRING, NAME, or ADD node expected; found: ') ;
messageHasDesc = new messageHasDesc( 'getMsg') ;
messageHasDesc = new messageHasDesc( 'Some untrackable message') ;
messageHasDesc = new messageHasDesc( 'getProductName') ;
messageHasDesc = new messageHasDesc( 'str') ;
messageHasDesc = new messageHasDesc( 'Placeholder incorrectly formatted in: ') ;
messageHasDesc = new messageHasDesc( '_') ;
messageHasDesc = new messageHasDesc( 'START_SPAN_1_23') ;
messageHasDesc = new messageHasDesc( 'message node {0} has no value') ;
messageHasDesc = new messageHasDesc( 'goog.getMsg') ;
messageHasDesc = new messageHasDesc( 'product') ;
messageHasDesc = new messageHasDesc( 'NAME, LP, or BLOCK node expected; found: ') ;
messageHasDesc = new messageHasDesc( 'MSG_') ;
messageHasDesc = new messageHasDesc( '@hidden') ;
messageHasDesc = new messageHasDesc( 'OBJLIT node expected') ;
messageHasDesc = new messageHasDesc( 'Placeholder name not in lowerCamelCase: ') ;
messageHasDesc = new messageHasDesc( 'JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX') ;
messageHasDesc = new messageHasDesc( 'Hi {$userName}! Welcome to {$product}.') ;
messageHasDesc = new messageHasDesc( 'Message initialized using unrecognized function. ') ;
messageHasDesc = new messageHasDesc( 'AS IS') ;
messageHasDesc = new messageHasDesc( 'message not initialized using ') ;
messageHasDesc = new messageHasDesc( 'Could not find message entry for fallback argument {0}') ;
messageHasDesc = new messageHasDesc( '; found: ') ;
messageHasDesc = new messageHasDesc( 'r') ;
messageHasDesc = new messageHasDesc( 'http://code.google.com/p/closure-templates/') ;
messageHasDesc = new messageHasDesc( '[a-z][a-zA-Z\\d]*[_\\d]*') ;
messageHasDesc = new messageHasDesc( 'JSC_MSG_BAD_FALLBACK_SYNTAX') ;
messageHasDesc = new messageHasDesc( 'Bad syntax. ') ;
messageHasDesc = new messageHasDesc( 'startSpan_1_23') ;
messageHasDesc = new messageHasDesc( 'Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)') ;
messageHasDesc = new messageHasDesc( '_HELP') ;
messageHasDesc = new messageHasDesc( 'NAME') ;
messageHasDesc = new messageHasDesc( '() instead.') ;
messageHasDesc = new messageHasDesc( 'initial definition {1}:{2}') ;
messageHasDesc = new messageHasDesc( 'a4Letter') ;
messageHasDesc = new messageHasDesc( '; found: null') ;
messageHasDesc = new messageHasDesc( 'Unused message placeholder: ') ;
messageHasDesc = new messageHasDesc( 'Message must be initialized using ') ;
messageHasDesc = new messageHasDesc( 'RETURN node expected; found: ') ;
messageHasDesc = new messageHasDesc( '}') ;
messageHasDesc = new messageHasDesc( 'STRING_KEY node expected as OBJLIT key') ;
messageHasDesc = new messageHasDesc( ' function.') ;
messageHasDesc = new messageHasDesc( '{$') ;
messageHasDesc = new messageHasDesc( ' + MSG_FUNCTION_NAME + ') ;
messageHasDesc = new messageHasDesc( 'Empty messages are forbidden.') ;
messageHasDesc = new messageHasDesc( ' -> ') ;
messageHasDesc = new messageHasDesc( 'goog.getMsgWithFallback') ;
messageHasDesc = new messageHasDesc( 'userName') ;
messageHasDesc = new messageHasDesc( 'a.b.MSG_X') ;
messageHasDesc = new messageHasDesc( 't') ;
messageHasDesc = new messageHasDesc( 'Duplicate placeholder name: ') ;
messageHasDesc = true.toString( ) ;
messageHasDesc = false.getMessage( ) ;
messageHasDesc = false.toLowerCase( ) ;
messageHasDesc = true.getMessage( ) ;
messageHasDesc = new MessageHasDesc( false ) ;
messageHasDesc = true.toLowerCase( ) ;
messageHasDesc = '} or {@code ';
messageHasDesc = ' + ';
messageHasDesc = 'License';
