value +=( bytes [ offset *BYTE_2] << BYTE_2_SHIFT ) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_SHIFT ) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_SHIFT ) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_SHIFT ) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_SHIFT ) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_SHIFT ) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_SHIFT ) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_SHIFT ) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_SHIFT ) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_SHIFT ) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_SHIFT ) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_2) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_0) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_4) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_24) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_00) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_16) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_3) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_0000) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_1) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_8) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_000000) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_LEFT ) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_LEFT ) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_LEFT ) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_LEFT ) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_LEFT ) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_LEFT ) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_LEFT ) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_LEFT ) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_LEFT ) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_LEFT ) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_LEFT ) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_STRING ) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_STRING ) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_STRING ) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_STRING ) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_STRING ) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_STRING ) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_STRING ) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_STRING ) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_STRING ) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_STRING ) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_STRING ) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_MASK ) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_MASK ) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_MASK ) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_MASK ) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_MASK ) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_MASK ) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_MASK ) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_MASK ) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_MASK ) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_MASK ) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_MASK ) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_oos ) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_oos ) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_oos ) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_oos ) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_oos ) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_oos ) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_oos ) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_oos ) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_oos ) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_oos ) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_oos ) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_START ) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_START ) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_START ) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_START ) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_START ) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_START ) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_START ) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_START ) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_START ) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_START ) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_START ) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_NULL ) & BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_NULL ) & BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_NULL ) & BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_NULL ) & BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_NULL ) & BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_NULL ) & BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_NULL ) & BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_NULL ) & BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_NULL ) & BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_NULL ) & BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_NULL ) & BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_SHIFT ) | BYTE_2_MASK ;
value +=( bytes [ offset *BYTE_0] << BYTE_0_SHIFT ) | BYTE_0_MASK ;
value +=( bytes [ offset *BYTE_4] << BYTE_4_SHIFT ) | BYTE_4_MASK ;
value +=( bytes [ offset *BYTE_24] << BYTE_24_SHIFT ) | BYTE_24_MASK ;
value +=( bytes [ offset *BYTE_00] << BYTE_00_SHIFT ) | BYTE_00_MASK ;
value +=( bytes [ offset *BYTE_16] << BYTE_16_SHIFT ) | BYTE_16_MASK ;
value +=( bytes [ offset *BYTE_3] << BYTE_3_SHIFT ) | BYTE_3_MASK ;
value +=( bytes [ offset *BYTE_0000] << BYTE_0000_SHIFT ) | BYTE_0000_MASK ;
value +=( bytes [ offset *BYTE_1] << BYTE_1_SHIFT ) | BYTE_1_MASK ;
value +=( bytes [ offset *BYTE_8] << BYTE_8_SHIFT ) | BYTE_8_MASK ;
value +=( bytes [ offset *BYTE_000000] << BYTE_000000_SHIFT ) | BYTE_000000_MASK ;
value +=( bytes [ offset *BYTE_2] << BYTE_2_COUNT ) & BYTE_2_MASK ;
