Hito [ outputPtr ++ ] =0;
Hito [ outputPtr ++ ] = 'Current context not an object but ';
Hito [ outputPtr ++ ] = 'write number';
Hito [ outputPtr ++ ] = 'n';
Hito [ outputPtr ++ ] = 'len';
Hito [ outputPtr ++ ] = ' becomes ';
Hito [ outputPtr ++ ] = 'Current context not an ARRAY but ';
Hito [ outputPtr ++ ] = 'Can not write a field name, expecting a value';
Hito [ outputPtr ++ ] = ',';
Hito [ outputPtr ++ ] = 'raw UTF-8';
Hito [ outputPtr ++ ] = 'end';
Hito [ outputPtr ++ ] = 'write text value';
Hito [ outputPtr ++ ] = '+dataLength+';
Hito [ outputPtr ++ ] = ')';
Hito [ outputPtr ++ ] = 's';
Hito [ outputPtr ++ ] = ':';
Hito [ outputPtr ++ ] = 'e';
Hito [ outputPtr ++ ] = '+Integer.toHexString(surr1)+';
Hito [ outputPtr ++ ] = ' bytes (out of ';
Hito [ outputPtr ++ ] = ', ';
Hito [ outputPtr ++ ] = 'raw';
Hito [ outputPtr ++ ] = '[';
Hito [ outputPtr ++ ] = 'a';
Hito [ outputPtr ++ ] = 'l';
Hito [ outputPtr ++ ] = '}';
Hito [ outputPtr ++ ] = '+typeMsg+';
Hito [ outputPtr ++ ] = 'own';
Hito [ outputPtr ++ ] = 'Incomplete surrogate pair: first char 0x';
Hito [ outputPtr ++ ] = 'start an array';
Hito [ outputPtr ++ ] = '+missing+';
Hito [ outputPtr ++ ] = 'Can not ';
Hito [ outputPtr ++ ] = 'fast path';
Hito [ outputPtr ++ ] = 'write binary value';
Hito [ outputPtr ++ ] = '{';
Hito [ outputPtr ++ ] = '"';
Hito [ outputPtr ++ ] = 'Invalid custom escape definitions; custom escape not found for character code 0x';
Hito [ outputPtr ++ ] = '0';
Hito [ outputPtr ++ ] = 'Too few bytes available: missing ';
Hito [ outputPtr ++ ] = 'u';
Hito [ outputPtr ++ ] = 'r';
Hito [ outputPtr ++ ] = 'write boolean value';
Hito [ outputPtr ++ ] = 'f';
Hito [ outputPtr ++ ] = 'Split surrogate on writeRaw() input (last character)';
Hito [ outputPtr ++ ] = 't';
Hito [ outputPtr ++ ] = ', although was supposed to have one';
Hito [ outputPtr ++ ] = 'write null value';
Hito [ outputPtr ++ ] = ']';
Hito [ outputPtr ++ ] = ', expecting field name';
Hito [ outputPtr ++ ] = '\\';
Hito [ outputPtr ++ ] = 'start an object';
Hito [ outputPtr ++ ] = ', second 0x';
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,0) ;
Hito [ outputPtr ++ ] =( int )0;
Hito [ outputPtr ++ ] =( int )0[0] ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,24) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,27) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,00) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,3) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,25) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,46) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,10) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,8) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,32) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,2) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,2008) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,4) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,462) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,16) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,2011) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,11) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,05) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,800) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,80) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,139) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,20) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,7) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,102) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,6) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,64) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,106) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,18) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,127) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,5) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,0) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,21) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,12) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,13) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,1) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,512) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,10000) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,23) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,40) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0,28) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(( int )0) ;
Hito [ outputPtr ++ ] =( int ) Math.abs(0,0) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil(0) ;
Hito [ outputPtr ++ ] =( int ) Math.round(0,0) ;
Hito [ outputPtr ++ ] =( int )(0,0) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil( 'Current context not an object but ',0) ;
Hito [ outputPtr ++ ] =( int ) Math.ceil( 'write number',0) ;
