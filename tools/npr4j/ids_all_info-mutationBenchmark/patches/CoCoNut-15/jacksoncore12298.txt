i =_inputBuffer [_inputPtr ++ ] ^77;
i =_inputBuffer [_inputPtr ++ ] ^0080;
i =_inputBuffer [_inputPtr ++ ] ^24;
i =_inputBuffer [_inputPtr ++ ] ^00;
i =_inputBuffer [_inputPtr ++ ] ^3;
i =_inputBuffer [_inputPtr ++ ] ^25;
i =_inputBuffer [_inputPtr ++ ] ^8;
i =_inputBuffer [_inputPtr ++ ] ^10;
i =_inputBuffer [_inputPtr ++ ] ^2;
i =_inputBuffer [_inputPtr ++ ] ^2008;
i =_inputBuffer [_inputPtr ++ ] ^080;
i =_inputBuffer [_inputPtr ++ ] ^4;
i =_inputBuffer [_inputPtr ++ ] ^16;
i =_inputBuffer [_inputPtr ++ ] ^255;
i =_inputBuffer [_inputPtr ++ ] ^208;
i =_inputBuffer [_inputPtr ++ ] ^800;
i =_inputBuffer [_inputPtr ++ ] ^80;
i =_inputBuffer [_inputPtr ++ ] ^173;
i =_inputBuffer [_inputPtr ++ ] ^7;
i =_inputBuffer [_inputPtr ++ ] ^69;
i =_inputBuffer [_inputPtr ++ ] ^64;
i =_inputBuffer [_inputPtr ++ ] ^6;
i =_inputBuffer [_inputPtr ++ ] ^2009;
i =_inputBuffer [_inputPtr ++ ] ^03;
i =_inputBuffer [_inputPtr ++ ] ^18;
i =_inputBuffer [_inputPtr ++ ] ^9;
i =_inputBuffer [_inputPtr ++ ] ^0800;
i =_inputBuffer [_inputPtr ++ ] ^127;
i =_inputBuffer [_inputPtr ++ ] ^5;
i =_inputBuffer [_inputPtr ++ ] ^19;
i =_inputBuffer [_inputPtr ++ ] ^0;
i =_inputBuffer [_inputPtr ++ ] ^631;
i =_inputBuffer [_inputPtr ++ ] ^12;
i =_inputBuffer [_inputPtr ++ ] ^07;
i =_inputBuffer [_inputPtr ++ ] ^1;
i =_inputBuffer [_inputPtr ++ ] ^10000;
i =_inputBuffer [_inputPtr ++ ] ^358;
i =_inputBuffer [_inputPtr ++ ] ^1;
i =_inputBuffer [_inputPtr ++ ] ^0;
i =_inputBuffer [_inputPtr ++ ] ^8;
i =_inputBuffer [_inputPtr -- ] ^77;
i =_inputBuffer [_inputPtr -- ] ^0080;
i =_inputBuffer [_inputPtr -- ] ^24;
i =_inputBuffer [_inputPtr -- ] ^00;
i =_inputBuffer [_inputPtr -- ] ^3;
i =_inputBuffer [_inputPtr -- ] ^25;
i =_inputBuffer [_inputPtr -- ] ^8;
i =_inputBuffer [_inputPtr -- ] ^10;
i =_inputBuffer [_inputPtr -- ] ^2;
i =_inputBuffer [_inputPtr -- ] ^2008;
i =_inputBuffer [_inputPtr -- ] ^080;
i =_inputBuffer [_inputPtr -- ] ^4;
i =_inputBuffer [_inputPtr -- ] ^16;
i =_inputBuffer [_inputPtr -- ] ^255;
i =_inputBuffer [_inputPtr -- ] ^208;
i =_inputBuffer [_inputPtr -- ] ^800;
i =_inputBuffer [_inputPtr -- ] ^80;
i =_inputBuffer [_inputPtr -- ] ^173;
i =_inputBuffer [_inputPtr -- ] ^7;
i =_inputBuffer [_inputPtr -- ] ^69;
i =_inputBuffer [_inputPtr -- ] ^64;
i =_inputBuffer [_inputPtr -- ] ^6;
i =_inputBuffer [_inputPtr -- ] ^2009;
i =_inputBuffer [_inputPtr -- ] ^03;
i =_inputBuffer [_inputPtr -- ] ^18;
i =_inputBuffer [_inputPtr -- ] ^9;
i =_inputBuffer [_inputPtr -- ] ^0800;
i =_inputBuffer [_inputPtr -- ] ^127;
i =_inputBuffer [_inputPtr -- ] ^5;
i =_inputBuffer [_inputPtr -- ] ^19;
i =_inputBuffer [_inputPtr -- ] ^0;
i =_inputBuffer [_inputPtr -- ] ^631;
i =_inputBuffer [_inputPtr -- ] ^12;
i =_inputBuffer [_inputPtr -- ] ^07;
i =_inputBuffer [_inputPtr -- ] ^1;
i =_inputBuffer [_inputPtr -- ] ^10000;
i =_inputBuffer [_inputPtr -- ] ^358;
i =_inputBuffer [_inputPtr ++ ] ^ '';
i =_inputBuffer [_inputPtr ++ ] ^ '/';
i =_inputBuffer [_inputPtr ++ ] ^ ' in a comment';
i =_inputBuffer [_inputPtr ++ ] ^ '\f';
i =_inputBuffer [_inputPtr ++ ] ^ 'StreamBasedParserBase';
i =_inputBuffer [_inputPtr ++ ] ^ 'ALLOW_COMMENTS';
i =_inputBuffer [_inputPtr ++ ] ^ '+b64variant+';
i =_inputBuffer [_inputPtr ++ ] ^ '+b64variant.getPaddingChar()+';
i =_inputBuffer [_inputPtr ++ ] ^ '): ';
i =_inputBuffer [_inputPtr ++ ] ^ ' in character escape sequence';
i =_inputBuffer [_inputPtr ++ ] ^ '*';
i =_inputBuffer [_inputPtr ++ ] ^ 'Exponent indicator not followed by a digit';
i =_inputBuffer [_inputPtr ++ ] ^ 'Failed to decode VALUE_STRING as base64 (';
i =_inputBuffer [_inputPtr ++ ] ^ 'null';
i =_inputBuffer [_inputPtr ++ ] ^ '\r';
i =_inputBuffer [_inputPtr ++ ] ^ '\t';
i =_inputBuffer [_inputPtr ++ ] ^ '"+b64variant.getPaddingChar()+"';
i =_inputBuffer [_inputPtr ++ ] ^ 'n';
i =_inputBuffer [_inputPtr ++ ] ^ 'Unexpected end-of-input within/between ';
i =_inputBuffer [_inputPtr ++ ] ^ "expected padding character '";
i =_inputBuffer [_inputPtr ++ ] ^ "'";
i =_inputBuffer [_inputPtr ++ ] ^ ' || c == ';
i =_inputBuffer [_inputPtr ++ ] ^ 'NaN';
