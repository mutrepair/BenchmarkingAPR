typeHierarchyList.add( -1, pair ) ;
typeHierarchyList.add(1, pair ) ;
typeHierarchyList.add(0, pair ) ;
typeHierarchyList.add(2, pair ) ;
typeHierarchyList.add(2008, pair ) ;
typeHierarchyList.add(1, pair ) ;
typeHierarchyList.add(0, pair ) ;
typeHierarchyList.add( -1, pair +1) ;
typeHierarchyList.add( -1, pair -1) ;
typeHierarchyList.add( -2, pair ) ;
typeHierarchyList.add( -2008, pair ) ;
typeHierarchyList.add( -1, pair ) ;
typeHierarchyList.add( -0, pair ) ;
typeHierarchyList.add( -1, pair , false ) ;
typeHierarchyList.add( -1, pair ,2) ;
typeHierarchyList.add( -1, pair ,2008) ;
typeHierarchyList.add( -1, pair ,1) ;
typeHierarchyList.add( -1, pair ,0) ;
typeHierarchyList.add( -1) ;
typeHierarchyList.add( 'License', pair ) ;
typeHierarchyList.add( 'The specified type handler for type ', pair ) ;
typeHierarchyList.add( '. Gson does not allow this.', pair ) ;
typeHierarchyList.add( ':', pair ) ;
typeHierarchyList.add( '}', pair ) ;
typeHierarchyList.add( ' hides the previously registered type hierarchy handler for ', pair ) ;
typeHierarchyList.add( 'Overriding the existing type handler for {0}', pair ) ;
typeHierarchyList.add( 'AS IS', pair ) ;
typeHierarchyList.add( '{mapForTypeHierarchy:{', pair ) ;
typeHierarchyList.add( ',', pair ) ;
typeHierarchyList.add( '},map:{', pair ) ;
typeHierarchyList.add( 'Attempted to modify an unmodifiable map.', pair ) ;
typeHierarchyList.add( -1, pair , true ) ;
typeHierarchyList.add( -1, pair ,0) ;
typeHierarchyList.add( -1, pair , null ) ;
typeHierarchyList.add( -1, pair ,1) ;
typeHierarchyList.add(( -1, pair ) ;
typeHierarchyList.add( -1, pair + 'License') ;
typeHierarchyList.add( -1, pair + 'The specified type handler for type ') ;
typeHierarchyList.add( -1, pair + '. Gson does not allow this.') ;
typeHierarchyList.add( -1, pair + ':') ;
typeHierarchyList.add( -1, pair + '}') ;
typeHierarchyList.add( -1, pair + ' hides the previously registered type hierarchy handler for ') ;
typeHierarchyList.add( -1, pair + 'Overriding the existing type handler for {0}') ;
typeHierarchyList.add( -1, pair + 'AS IS') ;
typeHierarchyList.add( -1, pair + '{mapForTypeHierarchy:{') ;
typeHierarchyList.add( -1, pair + ',') ;
typeHierarchyList.add( -1, pair + '},map:{') ;
typeHierarchyList.add( -1, pair + 'Attempted to modify an unmodifiable map.') ;
typeHierarchyList.add( -1, pair , 'License') ;
typeHierarchyList.add( -1, pair , 'The specified type handler for type ') ;
typeHierarchyList.add( -1, pair , '. Gson does not allow this.') ;
typeHierarchyList.add( -1, pair , ':') ;
typeHierarchyList.add( -1, pair , '}') ;
typeHierarchyList.add( -1, pair , ' hides the previously registered type hierarchy handler for ') ;
typeHierarchyList.add( -1, pair , 'Overriding the existing type handler for {0}') ;
typeHierarchyList.add( -1, pair , 'AS IS') ;
typeHierarchyList.add( -1, pair , '{mapForTypeHierarchy:{') ;
typeHierarchyList.add( -1, pair , ',') ;
typeHierarchyList.add( -1, pair , '},map:{') ;
typeHierarchyList.add( -1, pair , 'Attempted to modify an unmodifiable map.') ;
typeHierarchyList.add( index , pair ) ;
typeHierarchyList.add( i , pair ) ;
type = typeHierarchyList.add( -1, pair ) ;
typeHierarchyList.add( -1+1, pair ) ;
typeHierarchyList.add( -0, pair ) ;
typeHierarchy.add( -1, pair ) ;
typeHierarchyList.add( -1, pair +2) ;
typeHierarchyList.add( -1, pair +2008) ;
typeHierarchyList.add( -1, pair +1) ;
typeHierarchyList.add( -1, pair +0) ;
typeHierarchyList.add( -1-1, pair ) ;
typeHierarchyList.set( -1, pair ) ;
typeHierarchyList.add( null , pair ) ;
typeHierarchyList.add( -1, pair *2) ;
typeHierarchyList.add( -1, pair *2008) ;
typeHierarchyList.add( -1, pair *1) ;
typeHierarchyList.add( -1, pair *0) ;
typeHierarchyList.add( -1, pair , pair ) ;
typeHierarchyList.add( -1, pair.length ) ;
typeHierarchyList.add( - -1, pair ) ;
typeHierarchyList.add( -1.0, pair ) ;
typeHierarchyList.add( -1, pair -2) ;
typeHierarchyList.add( -1, pair -2008) ;
typeHierarchyList.add( -1, pair -1) ;
typeHierarchyList.add( -1, pair -0) ;
typeHierarchyList.add( -1.2, pair ) ;
typeHierarchyList.add( -1.2008, pair ) ;
typeHierarchyList.add( -1.1, pair ) ;
typeHierarchyList.add( -1.0, pair ) ;
typeHierarchyList.addAll( -1, pair ) ;
this.typeHierarchyList.add( -1, pair ) ;
typeHierarchyList.add( 'License'+1, pair ) ;
typeHierarchyList.add( 'The specified type handler for type '+1, pair ) ;
typeHierarchyList.add( '. Gson does not allow this.'+1, pair ) ;
typeHierarchyList.add( ':'+1, pair ) ;
typeHierarchyList.add( '}'+1, pair ) ;
typeHierarchyList.add( ' hides the previously registered type hierarchy handler for '+1, pair ) ;
typeHierarchyList.add( 'Overriding the existing type handler for {0}'+1, pair ) ;
typeHierarchyList.add( 'AS IS'+1, pair ) ;
typeHierarchyList.add( '{mapForTypeHierarchy:{'+1, pair ) ;
