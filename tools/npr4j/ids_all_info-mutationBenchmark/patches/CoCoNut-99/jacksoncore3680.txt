return new ArrayList < String >(1,1) ;
return new ArrayList < String >(1) ;
return new ArrayList < Integer >(1,1) ;
return new ArrayList < Integer >(1) ;
return System.out.println( '') ;
return System.out.println( '+Long.MIN_VALUE+') ;
return System.out.println( 'getBinaryValue') ;
return System.out.println( '+Integer.MIN_VALUE+') ;
return System.out.println( ') as character #') ;
return System.out.println( "Unexpected padding character ('") ;
return System.out.println( '+b64variant.getPaddingChar()+') ;
return System.out.println( '2') ;
return System.out.println( "' (code 0x") ;
return System.out.println( "': expected '") ;
return System.out.println( 'JsonNumericParserBase') ;
return System.out.println( '+numStr+') ;
return System.out.println( "Unexpected close marker '") ;
return System.out.println( ') out of range of int (') ;
return System.out.println( '+startDesc+') ;
return System.out.println( '5') ;
return System.out.println( "Malformed numeric value '") ;
return System.out.println( '"+((char)ch)+"') ;
return System.out.println( '"+b64variant.getPaddingChar()+"') ;
return System.out.println( 'Invalid numeric value: ') ;
return System.out.println( ') in base64 content') ;
return System.out.println( '+Integer.toHexString(ch)+') ;
return System.out.println( "'") ;
return System.out.println( ') out of range of int') ;
return System.out.println( '+expCh+') ;
return System.out.println( 's verify it') ;
return System.out.println( ' (from ') ;
return System.out.println( ' - ') ;
return System.out.println( '\0') ;
return System.out.println( '7') ;
return System.out.println( '+_textBuffer.contentsAsString()+') ;
return System.out.println( '-') ;
return System.out.println( '6') ;
return System.out.println( '+_parsingContext.getTypeDesc()+') ;
return System.out.println( ': expected ') ;
return System.out.println( '"+((char) actCh)+"') ;
return System.out.println( '.') ;
return System.out.println( 'E') ;
return System.out.println( ' starting at ') ;
return System.out.println( '+(bindex+1)+') ;
return System.out.println( '+Integer.MAX_VALUE+') ;
return System.out.println( ') not numeric, can not use numeric value accessors') ;
return System.out.println( '+') ;
return System.out.println( ' of 4-char base64 unit: padding only legal as 3rd or 4th character') ;
return System.out.println( '3') ;
return System.out.println( ')') ;
return System.out.println( '8') ;
return System.out.println( "Illegal character '") ;
return System.out.println( 'Illegal white space character (code 0x') ;
return System.out.println( '"+_textBuffer.contentsAsString()+"') ;
return System.out.println( "') as character #") ;
return System.out.println( '+((char) actCh)+') ;
return System.out.println( '+_getCharDesc(ch)+') ;
return System.out.println( '\\') ;
return System.out.println( '+_parsingContext.getStartLocation(_ioContext.getSourceReference())+') ;
return System.out.println( '"+expCh+"') ;
return System.out.println( 'Illegal character (code 0x') ;
return System.out.println( ': ') ;
return System.out.println( '"+numStr+"') ;
return System.out.println( ') out of range of long (') ;
return System.out.println( '4') ;
return System.out.println( 'e') ;
return System.out.println( 'Numeric value (') ;
return System.out.println( 'not available') ;
return System.out.println( "' (for ") ;
return System.out.println( '+Long.MAX_VALUE+') ;
return System.out.println( ' of 4-char base64 unit: can only used between units') ;
return System.out.println( '+_currToken+') ;
return System.out.println( '+((char)ch)+') ;
return System.out.println( ') in numeric value') ;
return System.out.println( ': expected close marker for ') ;
return System.out.println( 'off-by-one') ;
return System.out.println( 'Unexpected character (') ;
return System.out.println( '9') ;
return System.out.println( '0') ;
return System.out.println( 'Current token (') ;
return System.out.println( ') out of range of Java float') ;
return System.out.println( '1') ;
return System.out.println( '+getText()+') ;
return new ArrayList < String >(1,0) ;
return new ArrayList < String >(1,230) ;
return new ArrayList < String >(1,3) ;
return new ArrayList < String >(1,0004) ;
return new ArrayList < String >(1,22) ;
return new ArrayList < String >(1,8) ;
return new ArrayList < String >(1,10) ;
return new ArrayList < String >(1,2) ;
return new ArrayList < String >(1,395) ;
return new ArrayList < String >(1,2008) ;
return new ArrayList < String >(1,17) ;
return new ArrayList < String >(1,4) ;
return new ArrayList < String >(1,2011) ;
return new ArrayList < String >(1,05) ;
return new ArrayList < String >(1,0010) ;
return new ArrayList < String >(1,7) ;
return new ArrayList < String >(1,0001) ;
