compareNodeTP( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeTP( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeTP( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeConfigurer( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeConfigurer( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeConfigurer( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeComplements( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeComplements( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeComplements( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeintersects( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeintersects( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeintersects( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSensors( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSensors( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSensors( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeRig( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeRig( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeRig( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeRock( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeRock( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeRock( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeSampler( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeSampler( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeSampler( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodePreloaded( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePreloaded( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePreloaded( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeAmplitude( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeAmplitude( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeAmplitude( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeYears( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeYears( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeYears( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeTP( p1.parent , depth1-1, p2.parent , depth1--1) ;
compareNodeTP( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeTP( p1.parent , depth1-1, p0.parent , depth1--1) ;
compareNodeRle( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeRle( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeRle( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodemonthofyear( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodemonthofyear( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodemonthofyear( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeDiscount( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeDiscount( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeDiscount( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeVisitors( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeVisitors( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeVisitors( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodecases( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodecases( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodecases( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeTextures( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeTextures( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeTextures( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeBetween( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeBetween( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeBetween( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeTP( p1.parent , depth1-1, p2.parent , depth2--2) ;
compareNodeTP( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeTP( p1.parent , depth1-1, p0.parent , depth0--0) ;
compareNodePhong( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodePhong( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodePhong( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeACC( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeACC( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeACC( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeerstellen( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeerstellen( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeerstellen( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeValidated( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeValidated( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeValidated( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeIndicator( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeIndicator( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeIndicator( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeInputs( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeInputs( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeInputs( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeEncodings( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeEncodings( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeEncodings( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeBased( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeBased( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeBased( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeAdjacent( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeAdjacent( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeAdjacent( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeAcid( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeAcid( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeAcid( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeCooldown( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeCooldown( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeCooldown( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodeNotify( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodeNotify( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodeNotify( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodebroadcast( p1.parent , depth1-1, p2.parent , depth2--1) ;
compareNodebroadcast( p1.parent , depth1-1, p1.parent , depth1--1) ;
compareNodebroadcast( p1.parent , depth1-1, p0.parent , depth0--1) ;
compareNodecontexts( p1.parent , depth1-1, p2.parent , depth2--1) ;
