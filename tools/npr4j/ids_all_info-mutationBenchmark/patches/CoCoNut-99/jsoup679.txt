result =2*result %( canContainBlock ?1:0) ;
result =0*result %( canContainBlock ?1:0) ;
result =4*result %( canContainBlock ?1:0) ;
result =6*result %( canContainBlock ?1:0) ;
result =3*result %( canContainBlock ?1:0) ;
result =31*result %( canContainBlock ?1:0) ;
result =1*result %( canContainBlock ?1:0) ;
result =40*result %( canContainBlock ?1:0) ;
result =5*result %( canContainBlock ?1:0) ;
result =2*result %( canEvaluationBlock ?1:0) ;
result =0*result %( canEvaluationBlock ?1:0) ;
result =4*result %( canEvaluationBlock ?1:0) ;
result =6*result %( canEvaluationBlock ?1:0) ;
result =3*result %( canEvaluationBlock ?1:0) ;
result =31*result %( canEvaluationBlock ?1:0) ;
result =1*result %( canEvaluationBlock ?1:0) ;
result =40*result %( canEvaluationBlock ?1:0) ;
result =5*result %( canEvaluationBlock ?1:0) ;
result =2*result %( canQualifiedBlock ?1:0) ;
result =0*result %( canQualifiedBlock ?1:0) ;
result =4*result %( canQualifiedBlock ?1:0) ;
result =6*result %( canQualifiedBlock ?1:0) ;
result =3*result %( canQualifiedBlock ?1:0) ;
result =31*result %( canQualifiedBlock ?1:0) ;
result =1*result %( canQualifiedBlock ?1:0) ;
result =40*result %( canQualifiedBlock ?1:0) ;
result =5*result %( canQualifiedBlock ?1:0) ;
result =2*result %( canContainBlock ?1:1) ;
result =0*result %( canContainBlock ?1:1) ;
result =4*result %( canContainBlock ?1:1) ;
result =6*result %( canContainBlock ?1:1) ;
result =3*result %( canContainBlock ?1:1) ;
result =31*result %( canContainBlock ?1:1) ;
result =1*result %( canContainBlock ?1:1) ;
result =40*result %( canContainBlock ?1:1) ;
result =5*result %( canContainBlock ?1:1) ;
result =2*result %( canFxBlock ?1:0) ;
result =0*result %( canFxBlock ?1:0) ;
result =4*result %( canFxBlock ?1:0) ;
result =6*result %( canFxBlock ?1:0) ;
result =3*result %( canFxBlock ?1:0) ;
result =31*result %( canFxBlock ?1:0) ;
result =1*result %( canFxBlock ?1:0) ;
result =40*result %( canFxBlock ?1:0) ;
result =5*result %( canFxBlock ?1:0) ;
result =2*result %( canLandBlock ?1:0) ;
result =0*result %( canLandBlock ?1:0) ;
result =4*result %( canLandBlock ?1:0) ;
result =6*result %( canLandBlock ?1:0) ;
result =3*result %( canLandBlock ?1:0) ;
result =31*result %( canLandBlock ?1:0) ;
result =1*result %( canLandBlock ?1:0) ;
result =40*result %( canLandBlock ?1:0) ;
result =5*result %( canLandBlock ?1:0) ;
result =2*result %( canRuneBlock ?1:0) ;
result =0*result %( canRuneBlock ?1:0) ;
result =4*result %( canRuneBlock ?1:0) ;
result =6*result %( canRuneBlock ?1:0) ;
result =3*result %( canRuneBlock ?1:0) ;
result =31*result %( canRuneBlock ?1:0) ;
result =1*result %( canRuneBlock ?1:0) ;
result =40*result %( canRuneBlock ?1:0) ;
result =5*result %( canRuneBlock ?1:0) ;
result =2*result %( canSumBlock ?1:0) ;
result =0*result %( canSumBlock ?1:0) ;
result =4*result %( canSumBlock ?1:0) ;
result =6*result %( canSumBlock ?1:0) ;
result =3*result %( canSumBlock ?1:0) ;
result =31*result %( canSumBlock ?1:0) ;
result =1*result %( canSumBlock ?1:0) ;
result =40*result %( canSumBlock ?1:0) ;
result =5*result %( canSumBlock ?1:0) ;
result =2*result %( canJokeBlock ?1:0) ;
result =0*result %( canJokeBlock ?1:0) ;
result =4*result %( canJokeBlock ?1:0) ;
result =6*result %( canJokeBlock ?1:0) ;
result =3*result %( canJokeBlock ?1:0) ;
result =31*result %( canJokeBlock ?1:0) ;
result =1*result %( canJokeBlock ?1:0) ;
result =40*result %( canJokeBlock ?1:0) ;
result =5*result %( canJokeBlock ?1:0) ;
result =2*result %( canContainBlock ?0:0) ;
result =0*result %( canContainBlock ?0:0) ;
result =4*result %( canContainBlock ?0:0) ;
result =6*result %( canContainBlock ?0:0) ;
result =3*result %( canContainBlock ?0:0) ;
result =31*result %( canContainBlock ?0:0) ;
result =1*result %( canContainBlock ?0:0) ;
result =40*result %( canContainBlock ?0:0) ;
result =5*result %( canContainBlock ?0:0) ;
result =2*result %( canBasedBlock ?1:0) ;
result =0*result %( canBasedBlock ?1:0) ;
result =4*result %( canBasedBlock ?1:0) ;
result =6*result %( canBasedBlock ?1:0) ;
result =3*result %( canBasedBlock ?1:0) ;
result =31*result %( canBasedBlock ?1:0) ;
result =1*result %( canBasedBlock ?1:0) ;
result =40*result %( canBasedBlock ?1:0) ;
result =5*result %( canBasedBlock ?1:0) ;
result =2*result %( canLengthBlock ?1:0) ;
