t , call.getChildAtIndex(0).getString( ) ) ;
t , call.getChildAtIndex(0).getString( ) + '} or {@code ') ;
t , call.getChildAtIndex(0).getString( ) + ' + ') ;
t , call.getChildAtIndex(0).getString( ) + 'License') ;
t , call.getChildAtIndex(0).getString( ) + 'MSG_UNNAMED_\\d+') ;
t , call.getChildAtIndex(0).getString( ) + 'goog') ;
t , call.getChildAtIndex(0).getString( ) + 'someUserName') ;
t , call.getChildAtIndex(0).getString( ) + 'Message') ;
t , call.getChildAtIndex(0).getString( ) + ' ') ;
t , call.getChildAtIndex(0).getString( ) + '() function could be used only with MSG_* property or variable') ;
t , call.getChildAtIndex(0).getString( ) + 'JSC_MSG_HAS_NO_DESCRIPTION') ;
t , call.getChildAtIndex(0).getString( ) + 'Unrecognized message placeholder referenced: ') ;
t , call.getChildAtIndex(0).getString( ) + 'JSC_MSG_ORPHANED_NODE') ;
t , call.getChildAtIndex(0).getString( ) + 'JSC_MSG_HAS_NO_VALUE') ;
t , call.getChildAtIndex(0).getString( ) + 'Message value of {0} is just an empty string. ') ;
t , call.getChildAtIndex(0).getString( ) + 'Please use ') ;
t , call.getChildAtIndex(0).getString( ) + 'JSC_MSG_HAS_NO_TEXT') ;
t , call.getChildAtIndex(0).getString( ) + 'Expected node type ') ;
t , call.getChildAtIndex(0).getString( ) + 'JSC_MSG_KEY_DUPLICATED') ;
t , call.getChildAtIndex(0).getString( ) + 'Message {0} has no description. Add @desc JsDoc tag.') ;
t , call.getChildAtIndex(0).getString( ) + 'name') ;
t , call.getChildAtIndex(0).getString( ) + 's') ;
t , call.getChildAtIndex(0).getString( ) + 'Cannot parse value of message ') ;
t , call.getChildAtIndex(0).getString( ) + 'standard') ;
t , call.getChildAtIndex(0).getString( ) + '\0') ;
t , call.getChildAtIndex(0).getString( ) + 'duplicate message variable name found for {0}, ') ;
t , call.getChildAtIndex(0).getString( ) + 'Message parse tree malformed. {0}') ;
t , call.getChildAtIndex(0).getString( ) + 'STRING or ADD node expected; found: ') ;
t , call.getChildAtIndex(0).getString( ) + 'JSC_MSG_FALLBACK_ARG_ERROR') ;
t , call.getChildAtIndex(0).getString( ) + 'A4_LETTER') ;
t , call.getChildAtIndex(0).getString( ) + 'JSC_MSG_TREE_MALFORMED') ;
t , call.getChildAtIndex(0).getString( ) + ' + type + ') ;
t , call.getChildAtIndex(0).getString( ) + 'Message string literal expected') ;
t , call.getChildAtIndex(0).getString( ) + 'STRING, NAME, or ADD node expected; found: ') ;
t , call.getChildAtIndex(0).getString( ) + 'getMsg') ;
t , call.getChildAtIndex(0).getString( ) + 'Some untrackable message') ;
t , call.getChildAtIndex(0).getString( ) + 'getProductName') ;
t , call.getChildAtIndex(0).getString( ) + 'str') ;
t , call.getChildAtIndex(0).getString( ) + 'Placeholder incorrectly formatted in: ') ;
t , call.getChildAtIndex(0).getString( ) + '_') ;
t , call.getChildAtIndex(0).getString( ) + 'START_SPAN_1_23') ;
t , call.getChildAtIndex(0).getString( ) + 'message node {0} has no value') ;
t , call.getChildAtIndex(0).getString( ) + 'goog.getMsg') ;
t , call.getChildAtIndex(0).getString( ) + 'product') ;
t , call.getChildAtIndex(0).getString( ) + 'NAME, LP, or BLOCK node expected; found: ') ;
t , call.getChildAtIndex(0).getString( ) + 'MSG_') ;
t , call.getChildAtIndex(0).getString( ) + '@hidden') ;
t , call.getChildAtIndex(0).getString( ) + 'OBJLIT node expected') ;
t , call.getChildAtIndex(0).getString( ) + 'Placeholder name not in lowerCamelCase: ') ;
t , call.getChildAtIndex(0).getString( ) + 'JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX') ;
t , call.getChildAtIndex(0).getString( ) + 'Hi {$userName}! Welcome to {$product}.') ;
t , call.getChildAtIndex(0).getString( ) + 'Message initialized using unrecognized function. ') ;
t , call.getChildAtIndex(0).getString( ) + 'AS IS') ;
t , call.getChildAtIndex(0).getString( ) + 'message not initialized using ') ;
t , call.getChildAtIndex(0).getString( ) + 'Could not find message entry for fallback argument {0}') ;
t , call.getChildAtIndex(0).getString( ) + '; found: ') ;
t , call.getChildAtIndex(0).getString( ) + 'r') ;
t , call.getChildAtIndex(0).getString( ) + 'http://code.google.com/p/closure-templates/') ;
t , call.getChildAtIndex(0).getString( ) + '[a-z][a-zA-Z\\d]*[_\\d]*') ;
t , call.getChildAtIndex(0).getString( ) + 'JSC_MSG_BAD_FALLBACK_SYNTAX') ;
t , call.getChildAtIndex(0).getString( ) + 'Bad syntax. ') ;
t , call.getChildAtIndex(0).getString( ) + 'startSpan_1_23') ;
t , call.getChildAtIndex(0).getString( ) + 'Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)') ;
t , call.getChildAtIndex(0).getString( ) + '_HELP') ;
t , call.getChildAtIndex(0).getString( ) + 'NAME') ;
t , call.getChildAtIndex(0).getString( ) + '() instead.') ;
t , call.getChildAtIndex(0).getString( ) + 'initial definition {1}:{2}') ;
t , call.getChildAtIndex(0).getString( ) + 'a4Letter') ;
t , call.getChildAtIndex(0).getString( ) + '; found: null') ;
t , call.getChildAtIndex(0).getString( ) + 'Unused message placeholder: ') ;
t , call.getChildAtIndex(0).getString( ) + 'Message must be initialized using ') ;
t , call.getChildAtIndex(0).getString( ) + 'RETURN node expected; found: ') ;
t , call.getChildAtIndex(0).getString( ) + '}') ;
t , call.getChildAtIndex(0).getString( ) + 'STRING_KEY node expected as OBJLIT key') ;
t , call.getChildAtIndex(0).getString( ) + ' function.') ;
t , call.getChildAtIndex(0).getString( ) + '{$') ;
t , call.getChildAtIndex(0).getString( ) + ' + MSG_FUNCTION_NAME + ') ;
t , call.getChildAtIndex(0).getString( ) + 'Empty messages are forbidden.') ;
t , call.getChildAtIndex(0).getString( ) + ' -> ') ;
t , call.getChildAtIndex(0).getString( ) + 'goog.getMsgWithFallback') ;
t , call.getChildAtIndex(0).getString( ) + 'userName') ;
t , call.getChildAtIndex(0).getString( ) + 'a.b.MSG_X') ;
t , call.getChildAtIndex(0).getString( ) + 't') ;
t , call.getChildAtIndex(0).getString( ) + 'Duplicate placeholder name: ') ;
t , call.getChildAtIndex(0).getInt( ) ) ;
t , call.getChildAtIndex(1).getString( ) ) ;
t , call.getChildAtIndex(2).getString( ) ) ;
t , call.getChildAtIndex(2008).getString( ) ) ;
t , call.getChildAtIndex(0).getString( ) ) ;
t , call.getChildAtIndex(4).getString( ) ) ;
t , call.getChildAtIndex(3).getString( ) ) ;
t , call.getChildAtIndex(1).getString( ) ) ;
t , call.getChildAtIndex(23).getString( ) ) ;
t , call.getChildAtIndex(18).getString( ) ) ;
t , call.getChildAtIndex(0).getString( ) +1) ;
t , call.getChildAtIndex( -1).getString( ) ) ;
t , call.getChildAtIndex(0).getIndex( ) ) ;
t , call.getChildAtIndex(0).getString( ) , call ) ;
t , call.getChildAtIndex(0).getString( ) -1) ;
t , call.getChildAtIndex(0).getString( ) ;
