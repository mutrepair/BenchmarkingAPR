result [ -1] =( byte )(( value & BYTE_MASK ) ) ;
result [ -2] =( byte )(( value & BYTE_MASK ) ) ;
result [ -0] =( byte )(( value & BYTE_MASK ) ) ;
result [ -4] =( byte )(( value & BYTE_MASK ) ) ;
result [ -24] =( byte )(( value & BYTE_MASK ) ) ;
result [ -00] =( byte )(( value & BYTE_MASK ) ) ;
result [ -16] =( byte )(( value & BYTE_MASK ) ) ;
result [ -3] =( byte )(( value & BYTE_MASK ) ) ;
result [ -0000] =( byte )(( value & BYTE_MASK ) ) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ) ;
result [ -8] =( byte )(( value & BYTE_MASK ) ) ;
result [ -000000] =( byte )(( value & BYTE_MASK ) ) ;
result [0] =( byte )(( value & BYTE_MASK ) ) ;
result [1] =( byte )(( value & BYTE_MASK ) ) ;
result [ -1] =( byte )(( value & BYTE_MASK ) -1) ;
result [ -1] =( int )(( value & BYTE_MASK ) ) ;
result [ -1] =(( value & BYTE_MASK ) ) ;
result [ -0] =( byte )(( value & BYTE_MASK ) ) ;
result [ -1] =( byte )(( value & BYTE_MASK_MASK ) ) ;
result [2] =( byte )(( value & BYTE_MASK ) ) ;
result [0] =( byte )(( value & BYTE_MASK ) ) ;
result [4] =( byte )(( value & BYTE_MASK ) ) ;
result [24] =( byte )(( value & BYTE_MASK ) ) ;
result [00] =( byte )(( value & BYTE_MASK ) ) ;
result [16] =( byte )(( value & BYTE_MASK ) ) ;
result [3] =( byte )(( value & BYTE_MASK ) ) ;
result [0000] =( byte )(( value & BYTE_MASK ) ) ;
result [1] =( byte )(( value & BYTE_MASK ) ) ;
result [8] =( byte )(( value & BYTE_MASK ) ) ;
result [000000] =( byte )(( value & BYTE_MASK ) ) ;
result [ -1] =( byte )(( value & BYTE_MASK ) +1) ;
result [ -1] =( short )(( value & BYTE_MASK ) ) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ) ) ;
result [ -1] =( byte )((( value & BYTE_MASK ) ) ) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ) -1;
result [ -1] =( byte )(( value & BYTE_MASK -1) ) ;
result [ -1] =( byte )((( value & BYTE_MASK ) ) ;
result [ -1] =( String )(( value & BYTE_MASK ) ) ;
result [ -1] =( double )(( value & BYTE_MASK ) ) ;
result [ -1] =( byte )(( value & BYTE_MASK ) +2) ;
result [ -1] =( byte )(( value & BYTE_MASK ) +0) ;
result [ -1] =( byte )(( value & BYTE_MASK ) +4) ;
result [ -1] =( byte )(( value & BYTE_MASK ) +24) ;
result [ -1] =( byte )(( value & BYTE_MASK ) +00) ;
result [ -1] =( byte )(( value & BYTE_MASK ) +16) ;
result [ -1] =( byte )(( value & BYTE_MASK ) +3) ;
result [ -1] =( byte )(( value & BYTE_MASK ) +0000) ;
result [ -1] =( byte )(( value & BYTE_MASK ) +1) ;
result [ -1] =( byte )(( value & BYTE_MASK ) +8) ;
result [ -1] =( byte )(( value & BYTE_MASK ) +000000) ;
result [ -1] =( byte )(( value & BYTE_MASK ) /2) ;
result [ -1] =( byte )(( value & BYTE_MASK ) /0) ;
result [ -1] =( byte )(( value & BYTE_MASK ) /4) ;
result [ -1] =( byte )(( value & BYTE_MASK ) /24) ;
result [ -1] =( byte )(( value & BYTE_MASK ) /00) ;
result [ -1] =( byte )(( value & BYTE_MASK ) /16) ;
result [ -1] =( byte )(( value & BYTE_MASK ) /3) ;
result [ -1] =( byte )(( value & BYTE_MASK ) /0000) ;
result [ -1] =( byte )(( value & BYTE_MASK ) /1) ;
result [ -1] =( byte )(( value & BYTE_MASK ) /8) ;
result [ -1] =( byte )(( value & BYTE_MASK ) /000000) ;
result [ -1] =( byte )(( value & BYTE_MASK ) -2) ;
result [ -1] =( byte )(( value & BYTE_MASK ) -0) ;
result [ -1] =( byte )(( value & BYTE_MASK ) -4) ;
result [ -1] =( byte )(( value & BYTE_MASK ) -24) ;
result [ -1] =( byte )(( value & BYTE_MASK ) -00) ;
result [ -1] =( byte )(( value & BYTE_MASK ) -16) ;
result [ -1] =( byte )(( value & BYTE_MASK ) -3) ;
result [ -1] =( byte )(( value & BYTE_MASK ) -0000) ;
result [ -1] =( byte )(( value & BYTE_MASK ) -1) ;
result [ -1] =( byte )(( value & BYTE_MASK ) -8) ;
result [ -1] =( byte )(( value & BYTE_MASK ) -000000) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ,0) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ,2) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ,0) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ,4) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ,24) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ,00) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ,16) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ,3) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ,0000) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ,1) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ,8) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ,000000) ;
result [ -1] =( byte )(( value & BYTE_MASK +1) ) ;
result [ -1] =( byte )(( value & BYTE_MASK ) ) +1;
result [ -1] =( byte )(( value & BYTE_MASK ) + 'License') ;
result [ -1] =( byte )(( value & BYTE_MASK ) + 'AS IS') ;
result [ -1] =( byte )(( value & BYTE_MASK ) *2) ;
result [ -1] =( byte )(( value & BYTE_MASK ) *0) ;
result [ -1] =( byte )(( value & BYTE_MASK ) *4) ;
result [ -1] =( byte )(( value & BYTE_MASK ) *24) ;
result [ -1] =( byte )(( value & BYTE_MASK ) *00) ;
result [ -1] =( byte )(( value & BYTE_MASK ) *16) ;
result [ -1] =( byte )(( value & BYTE_MASK ) *3) ;
result [ -1] =( byte )(( value & BYTE_MASK ) *0000) ;
result [ -1] =( byte )(( value & BYTE_MASK ) *1) ;
result [ -1] =( byte )(( value & BYTE_MASK ) *8) ;
result [ -1] =( byte )(( value & BYTE_MASK ) *000000) ;
