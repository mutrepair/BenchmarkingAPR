if( gcd ==0) {
if( gcd.equals( "overflow: can't negate") ) {
if( gcd.equals( '<i>wholeNumber</i> <i>numerator</i>/<i>denominator</i>') ) {
if( gcd.equals( '/') ) {
if( gcd.equals( 'The fraction could not be parsed as the format X Y/Z') ) {
if( gcd.equals( 'X') ) {
if( gcd.equals( ' +/- u') ) {
if( gcd.equals( 'overflow: numerator too large after multiply') ) {
if( gcd.equals( 'one and three sevenths') ) {
if( gcd.equals( '/d1) +/- v(u') ) {
if( gcd.equals( '-1') ) {
if( gcd.equals( '>>') ) {
if( gcd.equals( 'overflow: gcd is 2^31') ) {
if( gcd.equals( ' + fraction + ') ) {
if( gcd.equals( 'Unable to invert zero.') ) {
if( gcd.equals( 'License') ) {
if( gcd.equals( '<i>numerator</i>/<i>denominator</i>') ) {
if( gcd.equals( '+i+') ) {
if( gcd.equals( 'overflow: mul') ) {
if( gcd.equals( ' + denom2 + ') ) {
if( gcd.equals( 'The fraction must not be null') ) {
if( gcd.equals( '---') ) {
if( gcd.equals( 'The denominator must not be zero') ) {
if( gcd.equals( 'The numerator must not be negative') ) {
if( gcd.equals( 'overflow: too large to negate') ) {
if( gcd.equals( 'binary gcd') ) {
if( gcd.equals( ' + delta1 +') ) {
if( gcd.equals( 'The string must not be null') ) {
if( gcd.equals( 'overflow: add') ) {
if( gcd.equals( '+(delta1 > delta2)+') ) {
if( gcd.equals( 'Numerator too large to represent as an Integer.') ) {
if( gcd.equals( 'three sevenths') ) {
if( gcd.equals( ' ') ) {
if( gcd.equals( 'AS IS') ) {
if( gcd.equals( ' + delta2 + ') ) {
if( gcd.equals( "overflow: can't negate numerator") ) {
if( gcd.equals( 'The fraction to divide by must not be zero') ) {
if( gcd.equals( 'The value must not be greater than Integer.MAX_VALUE or NaN') ) {
if( gcd.equals( 'Y/Z') ) {
if( gcd.equals( '.') ) {
if( gcd.equals( 'Unable to convert double to fraction') ) {
if( gcd.equals( '+ delta2+') ) {
if( gcd.equals( '0') ) {
if( gcd.equals( '/d1)(v') ) {
if( gcd.equals( 'overflow: mulPos') ) {
if( gcd.equals( 'The denominator must not be negative') ) {
if( gcd.equals( '1') ) {
if( gcd.equals( 'v) / u') ) {
if( gcd.equals( 'v') ) {
if( gcd.equals( 'http://archives.math.utk.edu/articles/atuyl/confrac/') ) {
if( gcd.equals( 'X Y/Z') ) {
if( gcd.equals( 't') ) {
if( gcd.isEmpty( ) ) {
if( gcd == -1) {
if( gcd ==1) {
if( gcd.equalsIgnoreCase( "overflow: can't negate") ) {
if( gcd.equalsIgnoreCase( '<i>wholeNumber</i> <i>numerator</i>/<i>denominator</i>') ) {
if( gcd.equalsIgnoreCase( '/') ) {
if( gcd.equalsIgnoreCase( 'The fraction could not be parsed as the format X Y/Z') ) {
if( gcd.equalsIgnoreCase( 'X') ) {
if( gcd.equalsIgnoreCase( ' +/- u') ) {
if( gcd.equalsIgnoreCase( 'overflow: numerator too large after multiply') ) {
if( gcd.equalsIgnoreCase( 'one and three sevenths') ) {
if( gcd.equalsIgnoreCase( '/d1) +/- v(u') ) {
if( gcd.equalsIgnoreCase( '-1') ) {
if( gcd.equalsIgnoreCase( '>>') ) {
if( gcd.equalsIgnoreCase( 'overflow: gcd is 2^31') ) {
if( gcd.equalsIgnoreCase( ' + fraction + ') ) {
if( gcd.equalsIgnoreCase( 'Unable to invert zero.') ) {
if( gcd.equalsIgnoreCase( 'License') ) {
if( gcd.equalsIgnoreCase( '<i>numerator</i>/<i>denominator</i>') ) {
if( gcd.equalsIgnoreCase( '+i+') ) {
if( gcd.equalsIgnoreCase( 'overflow: mul') ) {
if( gcd.equalsIgnoreCase( ' + denom2 + ') ) {
if( gcd.equalsIgnoreCase( 'The fraction must not be null') ) {
if( gcd.equalsIgnoreCase( '---') ) {
if( gcd.equalsIgnoreCase( 'The denominator must not be zero') ) {
if( gcd.equalsIgnoreCase( 'The numerator must not be negative') ) {
if( gcd.equalsIgnoreCase( 'overflow: too large to negate') ) {
if( gcd.equalsIgnoreCase( 'binary gcd') ) {
if( gcd.equalsIgnoreCase( ' + delta1 +') ) {
if( gcd.equalsIgnoreCase( 'The string must not be null') ) {
if( gcd.equalsIgnoreCase( 'overflow: add') ) {
if( gcd.equalsIgnoreCase( '+(delta1 > delta2)+') ) {
if( gcd.equalsIgnoreCase( 'Numerator too large to represent as an Integer.') ) {
if( gcd.equalsIgnoreCase( 'three sevenths') ) {
if( gcd.equalsIgnoreCase( ' ') ) {
if( gcd.equalsIgnoreCase( 'AS IS') ) {
if( gcd.equalsIgnoreCase( ' + delta2 + ') ) {
if( gcd.equalsIgnoreCase( "overflow: can't negate numerator") ) {
if( gcd.equalsIgnoreCase( 'The fraction to divide by must not be zero') ) {
if( gcd.equalsIgnoreCase( 'The value must not be greater than Integer.MAX_VALUE or NaN') ) {
if( gcd.equalsIgnoreCase( 'Y/Z') ) {
if( gcd.equalsIgnoreCase( '.') ) {
if( gcd.equalsIgnoreCase( 'Unable to convert double to fraction') ) {
if( gcd.equalsIgnoreCase( '+ delta2+') ) {
if( gcd.equalsIgnoreCase( '0') ) {
if( gcd.equalsIgnoreCase( '/d1)(v') ) {
if( gcd.equalsIgnoreCase( 'overflow: mulPos') ) {
if( gcd.equalsIgnoreCase( 'The denominator must not be negative') ) {
