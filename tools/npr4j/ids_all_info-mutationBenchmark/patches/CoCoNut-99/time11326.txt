importInstant % offset.toString( ) ) ;
loopInstant % offset.toString( ) ) ;
failInstant % offset.toString( ) ) ;
resultsInstant % offset.toString( ) ) ;
importInstant % offset.replace( 'License', 'License') ;
importInstant % offset.replace( ' + getBase() + ', ' + getBase() + ') ;
importInstant % offset.replace( 'AS IS', 'AS IS') ;
importInstant % offset.replace( 'Adding time zone offset caused overflow', 'Adding time zone offset caused overflow') ;
importInstant % offset.replace( 'UTC chronology must not be null', 'UTC chronology must not be null') ;
importInstant % offset.replace( 'DateTimeZone must not be null', 'DateTimeZone must not be null') ;
importInstant % offset.replace( 'ZonedChronology[', 'ZonedChronology[') ;
importInstant % offset.replace( ', ', ', ') ;
importInstant % offset.replace( ']', ']') ;
importInstant % offset.replace( 'unused', 'unused') ;
importInstant % offset.replace( 'Subtracting time zone offset caused overflow', 'Subtracting time zone offset caused overflow') ;
importInstant % offset.replace( 'Must supply a chronology', 'Must supply a chronology') ;
loopInstant % offset.size( ) ;
importInstant % offset.size( ) ;
importInstant % offset.toString( ) ;
importInstant % offset.getId( ) ) ;
importInstant % offset.size( ) + offset ) ;
loopInstant % offset.toString( ) ;
loopInstant % offset.size( ) + offset ) ;
System.out.println( 'License') ;
System.out.println( ' + getBase() + ') ;
System.out.println( 'AS IS') ;
System.out.println( 'Adding time zone offset caused overflow') ;
System.out.println( 'UTC chronology must not be null') ;
System.out.println( 'DateTimeZone must not be null') ;
System.out.println( 'ZonedChronology[') ;
System.out.println( ', ') ;
System.out.println( ']') ;
System.out.println( 'unused') ;
System.out.println( 'Subtracting time zone offset caused overflow') ;
System.out.println( 'Must supply a chronology') ;
loopInstant % offset.getId( ) ) ;
loopInstant % offset.get( offset ) ;
importInstant % offset.substring( offset ) ;
importInstant % offset.get( offset ) ;
resultsInstant % offset.size( ) ;
importInstant % offset.getInt( ) ) ;
actualInstant % offset.size( ) + offset ) ;
failInstant % offset.getId( ) ) ;
resultsInstant % offset.toString( ) ;
failInstant % offset.toString( ) ;
importInstant % offset.getTime( ) ) ;
importInstant % offset.setInt( offset ) ;
resultsInstant % offset.size( ) + offset ) ;
importInstant % offset.getValue( ) ) ;
failInstant % offset.size( ) ;
failInstant % offset.size( ) + offset ) ;
importInstant % offset.clone( ) ;
actualInstant % offset.size( ) ;
loopInstant % offset.substring( offset ) ;
loopInstant % offset.getTime( ) ) ;
importInstant % offset.toInt( ) ) ;
loopInstant % offset.setInt( offset ) ;
loopInstant % offset.getInt( ) ) ;
loopInstant % offset.clone( ) ;
loopInstant % offset.length( ) ;
importInstant % offset.length( ) ;
totalInstant % offset.size( ) ;
loopInstant % offset.toInt( ) ;
useInstant % offset.size( ) ;
loopInstant % offset.size( ) -1;
importInstant % offset.getId( ) ;
totalInstant.setInt( offset ) ;
importInstant % offset.toInt( ) ;
loopInstant % offset.getId( ) ;
importInstant % offset.size( ) -1;
loopInstant % offset +1) ;
resultsInstant % offset.length( ) ;
importInstant % offset +1) ;
failInstant % offset.get( offset ) ;
actualInstant % offset.get( offset ) ;
resultsInstant % offset.substring( offset ) ;
failInstant % offset.substring( offset ) ;
resultsInstant % offset.toInt( ) ;
importInstant % offset.size( ) +1;
loopInstant % offset.size( ) +1;
resultsInstant % offset.get( offset ) ;
importInstant % offset.size( ) ) ;
loopInstant % offset.getValue( ) ;
actualInstant % offset.size( ) -1;
importInstant % offset.getValue( ) ;
failInstant % offset.getId( ) ;
importInstant % offset.substring(0) ;
loopInstant % offset.size( ) ) ;
resultsInstant % offset.size( ) -1;
loopInstant % offset.getCount( ) ;
importInstant % offset.substring(1) ;
importInstant % offset.getCount( ) ;
loopInstant % offset.getTime( ) ;
totalInstant % offset.size( ) -1;
resultsInstant % offset.getId( ) ;
failInstant % offset.size( ) -1;
importInstant % offset.getTime( ) ;
resultsInstant % offset +1) ;
loopInstant % offset -1) ;
importInstant % offset.substring( offset ) ) ;
