if( options.dependencyOptions.needsManagement( ) && options.closurePass ) {
if( options.dependencyOptions != null && options.dependencyOptions.needsManagement( ) ) {
if( options.dependencyOptions.needsManagement( ) && options.closurePass != null ) {
if( options.dependencyOptions.needsManagement( ) || options.closurePass ) {
if( options.dependencyOptions == null || options.dependencyOptions.needsManagement( ) ) {
if( options.dependencyOptions.needsManagement( ) && options.closurePass == null ) {
if( options.dependencyOptions.needsManagement( ) ) {
if( options.dependencyOptions.needsManagement( ) && options.closurePass( ) ) {
if( options.dependencyOptions.needsManagement( ) || options.closurePass != null ) {
if( options.dependencyOptions != null || options.dependencyOptions.needsManagement( ) ) {
if( options.dependencyOptions == null && options.dependencyOptions.needsManagement( ) ) {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + '') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + ' && secondLastChar == ') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + '] ') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'the error manager cannot be null') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Duplicate input: {0}') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + ' [synthetic:') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'INTERNAL COMPILER ERROR.\n') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'JSC_EMPTY_MODULE_LIST_ERROR') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + '%name%') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + '[') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'base') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Bad module: ') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Recording function information') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Duplicate input %s') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'js/%s.js') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'externExports') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + '{0}\') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'compiler.date') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Creating extern file for exports') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'unchecked') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + "Root module '{0}' must contain at least one source code input") {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Modules must be listed in dependency order.') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + '\n') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'JSC_DUPLICATE_INPUT') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + '[testcode]') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + '\0') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'externs') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'fill') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'License') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'recordFunctionInformation') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + '[singleton]') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + ' + moduleName + ') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Please report this problem.\n') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Computing Control Flow Graph') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'parseInputs') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + '{SyntheticVarsDeclar}') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Exceeded max number of optimization iterations: {0}') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Exceeded max number of code motion iterations: {0}') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Strip code') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'com.google.javascript.jscomp.parsing.ParserConfig') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'com.google.javascript.jscomp') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'generateReport') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'No inputs') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'stripCode') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Tracer should not be null at the end of a pass.') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'JSC_DUPLICATE_EXTERN_INPUT') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'PassConfigs must eventually delegate to the DefaultPassConfig') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Duplicate extern input: {0}') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + ' on recently changed AST') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Compiler') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'use strict') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'this.passes has already been assigned') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + ';') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Root module has no inputs') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Normalizing') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'JSC_MODULE_DEPENDENCY_ERROR') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'JSC_MISSING_ENTRY_ERROR') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Remove try/catch/finally') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'toSource') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'JSC_OPTIMIZE_LOOP_ERROR') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'sanityCheck') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'jscomp_%s_') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Parsing: ') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'runCustomPasses') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'No input to replace: %s') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + ' : ') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'At least one module must be provided') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'jscompiler') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + '{0}') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'AS IS') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'removeTryCatchFinally') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'required entry point \') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'compiler.version') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + ' never provided') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + '%num%') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'computeCFG') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + ']') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'normalize') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Not an extern input: %s') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + '/*\n') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + '*/\n') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Conflicting externs name: ') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Performing HotSwap for pass ') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'unexpected language mode') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Bad dependency: {0} -> {1}. ') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'JSC_EMPTY_ROOT_MODULE_ERROR') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + ' + (++syntheticCodeId) + ') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + 'Input already exists: ') {
if( options.dependencyOptions.needsManagement( ) && options.closurePass + ', ') {
