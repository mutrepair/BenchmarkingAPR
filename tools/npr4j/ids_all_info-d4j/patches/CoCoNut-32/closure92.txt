int indexOfDot = namespace.indexOf( 'JSC_FUNCTION_NAMESPACE_ERROR') ;
int indexOfDot = namespace.indexOf( '\\.') ;
int indexOfDot = namespace.indexOf( 'goog.now') ;
int indexOfDot = namespace.indexOf( 'require') ;
int indexOfDot = namespace.indexOf( 'but required in module {2}') ;
int indexOfDot = namespace.indexOf( ' called with more than one argument') ;
int indexOfDot = namespace.indexOf( 'AS IS') ;
int indexOfDot = namespace.indexOf( 'JSC_LATE_PROVIDE_ERROR') ;
int indexOfDot = namespace.indexOf( '%s.call') ;
int indexOfDot = namespace.indexOf( 'addDependency') ;
int indexOfDot = namespace.indexOf( 'Missing module graph') ;
int indexOfDot = namespace.indexOf( 'JSC_TOO_MANY_ARGUMENTS_ERROR') ;
int indexOfDot = namespace.indexOf( 'new Date()') ;
int indexOfDot = namespace.indexOf( ' cannot be both provided and declared as a function') ;
int indexOfDot = namespace.indexOf( 'namespace \') ;
int indexOfDot = namespace.indexOf( 't touch the base case (') ;
int indexOfDot = namespace.indexOf( ' cannot be provided twice') ;
int indexOfDot = namespace.indexOf( 'License') ;
int indexOfDot = namespace.indexOf( 'base') ;
int indexOfDot = namespace.indexOf( 'goog.base') ;
int indexOfDot = namespace.indexOf( 'JSC_NULL_ARGUMENT_ERROR') ;
int indexOfDot = namespace.indexOf( 'JSC_INVALID_PROVIDE_ERROR') ;
int indexOfDot = namespace.indexOf( 'Enclosing method does not match ') ;
int indexOfDot = namespace.indexOf( 'bar') ;
int indexOfDot = namespace.indexOf( 'Could not find goog.inherits for base class') ;
int indexOfDot = namespace.indexOf( 'incorrect use of goog.base: {0}') ;
int indexOfDot = namespace.indexOf( 'exportSymbol') ;
int indexOfDot = namespace.indexOf( 'May only be called directly.') ;
int indexOfDot = namespace.indexOf( ' to ') ;
int indexOfDot = namespace.indexOf( 'this') ;
int indexOfDot = namespace.indexOf( 'setCssNameMapping') ;
int indexOfDot = namespace.indexOf( 'Date') ;
int indexOfDot = namespace.indexOf( 'method \') ;
int indexOfDot = namespace.indexOf( 'provide') ;
int indexOfDot = namespace.indexOf( '%s.superClass_.%s.call') ;
int indexOfDot = namespace.indexOf( ' provided in module {1} ') ;
int indexOfDot = namespace.indexOf( 'Second argument must name a method.') ;
int indexOfDot = namespace.indexOf( '{0}\') ;
int indexOfDot = namespace.indexOf( '.prototype.') ;
int indexOfDot = namespace.indexOf( 'JSC_DUPLICATE_NAMESPACE_ERROR') ;
int indexOfDot = namespace.indexOf( ' namespace never provided') ;
int indexOfDot = namespace.indexOf( 'Could not find enclosing method.') ;
int indexOfDot = namespace.indexOf( 'goog') ;
int indexOfDot = namespace.indexOf( 'JSC_INVALID_ARGUMENT_ERROR') ;
int indexOfDot = namespace.indexOf( ' called with a non-string argument') ;
int indexOfDot = namespace.indexOf( 'JSC_MISSING_PROVIDE_ERROR') ;
int indexOfDot = namespace.indexOf( "First argument must be 'this'.") ;
int indexOfDot = namespace.indexOf( 'JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR') ;
int indexOfDot = namespace.indexOf( 'goog.setCssNameMapping only takes an object literal with string values') ;
int indexOfDot = namespace.indexOf( ' is not a valid JS property name') ;
int indexOfDot = namespace.indexOf( ' namespace not provided yet') ;
int indexOfDot = namespace.indexOf( 'required \') ;
int indexOfDot = namespace.indexOf( '.') ;
int indexOfDot = namespace.indexOf( 'new Date(goog.now())') ;
int indexOfDot = namespace.indexOf( ' called without an argument') ;
int indexOfDot = namespace.indexOf( 'goog.inherits') ;
int indexOfDot = namespace.indexOf( 'JSC_BASE_CLASS_ERROR') ;
int indexOfDot = namespace.indexOf( '\') ;
int indexOfDot = namespace.indexOf( 'JSC_XMODULE_REQUIRE_ERROR') ;
int indexOfDot = namespace.indexOf( 'JSC_FUNCTION_NAMESPACE_ERROR') +1;
int indexOfDot = namespace.indexOf( '\\.') +1;
int indexOfDot = namespace.indexOf( 'goog.now') +1;
int indexOfDot = namespace.indexOf( 'require') +1;
int indexOfDot = namespace.indexOf( 'but required in module {2}') +1;
int indexOfDot = namespace.indexOf( ' called with more than one argument') +1;
int indexOfDot = namespace.indexOf( 'AS IS') +1;
int indexOfDot = namespace.indexOf( 'JSC_LATE_PROVIDE_ERROR') +1;
int indexOfDot = namespace.indexOf( '%s.call') +1;
int indexOfDot = namespace.indexOf( 'addDependency') +1;
int indexOfDot = namespace.indexOf( 'Missing module graph') +1;
int indexOfDot = namespace.indexOf( 'JSC_TOO_MANY_ARGUMENTS_ERROR') +1;
int indexOfDot = namespace.indexOf( 'new Date()') +1;
int indexOfDot = namespace.indexOf( ' cannot be both provided and declared as a function') +1;
int indexOfDot = namespace.indexOf( 'namespace \') +1;
int indexOfDot = namespace.indexOf( 't touch the base case (') +1;
int indexOfDot = namespace.indexOf( ' cannot be provided twice') +1;
int indexOfDot = namespace.indexOf( 'License') +1;
int indexOfDot = namespace.indexOf( 'base') +1;
int indexOfDot = namespace.indexOf( 'goog.base') +1;
int indexOfDot = namespace.indexOf( 'JSC_NULL_ARGUMENT_ERROR') +1;
int indexOfDot = namespace.indexOf( 'JSC_INVALID_PROVIDE_ERROR') +1;
int indexOfDot = namespace.indexOf( 'Enclosing method does not match ') +1;
int indexOfDot = namespace.indexOf( 'bar') +1;
int indexOfDot = namespace.indexOf( 'Could not find goog.inherits for base class') +1;
int indexOfDot = namespace.indexOf( 'incorrect use of goog.base: {0}') +1;
int indexOfDot = namespace.indexOf( 'exportSymbol') +1;
int indexOfDot = namespace.indexOf( 'May only be called directly.') +1;
int indexOfDot = namespace.indexOf( ' to ') +1;
int indexOfDot = namespace.indexOf( 'this') +1;
int indexOfDot = namespace.indexOf( 'setCssNameMapping') +1;
int indexOfDot = namespace.indexOf( 'Date') +1;
int indexOfDot = namespace.indexOf( 'method \') +1;
int indexOfDot = namespace.indexOf( 'provide') +1;
int indexOfDot = namespace.indexOf( '%s.superClass_.%s.call') +1;
int indexOfDot = namespace.indexOf( ' provided in module {1} ') +1;
int indexOfDot = namespace.indexOf( 'Second argument must name a method.') +1;
int indexOfDot = namespace.indexOf( '{0}\') +1;
int indexOfDot = namespace.indexOf( '.prototype.') +1;
int indexOfDot = namespace.indexOf( 'JSC_DUPLICATE_NAMESPACE_ERROR') +1;
int indexOfDot = namespace.indexOf( ' namespace never provided') +1;
