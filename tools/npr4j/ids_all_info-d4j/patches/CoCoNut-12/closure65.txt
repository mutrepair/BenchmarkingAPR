case '': sb.append( '') ; break ;
case 'else': sb.append( 'else') ; break ;
case '8': sb.append( '8') ; break ;
case '\\\': sb.append( '\\\') ; break ;
case '\\>': sb.append( '\\>') ; break ;
case 'Bad binary operator \': sb.append( 'Bad binary operator \') ; break ;
case '[': sb.append( '[') ; break ;
case 'for(': sb.append( 'for(') ; break ;
case '{': sb.append( '{') ; break ;
case 're in a IN_FOR_INIT_CLAUSE, we can': sb.append( 're in a IN_FOR_INIT_CLAUSE, we can') ; break ;
case 'do': sb.append( 'do') ; break ;
case '0': sb.append( '0') ; break ;
case 'delete ': sb.append( 'delete ') ; break ;
case 't include ': sb.append( 't include ') ; break ;
case '\\t': sb.append( '\\t') ; break ;
case 'Unexpected token type. Should be LABEL_NAME.': sb.append( 'Unexpected token type. Should be LABEL_NAME.') ; break ;
case '2': sb.append( '2') ; break ;
case 'y': sb.append( 'y') ; break ;
case ': ': sb.append( ': ') ; break ;
case 'in': sb.append( 'in') ; break ;
case ' && s.charAt(i - 2) == ': sb.append( ' && s.charAt(i - 2) == ') ; break ;
case '\\n': sb.append( '\\n') ; break ;
case '\\r': sb.append( '\\r') ; break ;
case 'catch(': sb.append( 'catch(') ; break ;
case '\n': sb.append( '\n') ; break ;
case "'use strict';": sb.append( "'use strict';") ; break ;
case 'Bad GETPROP: RHS should be STRING': sb.append( 'Bad GETPROP: RHS should be STRING') ; break ;
case '<': sb.append( '<') ; break ;
case 'Bad GETELEM: expected 2 children but got %s': sb.append( 'Bad GETELEM: expected 2 children but got %s') ; break ;
case '\0': sb.append( '\0') ; break ;
case ': expected 2 arguments but got %s': sb.append( ': expected 2 arguments but got %s') ; break ;
case 'License': sb.append( 'License') ; break ;
case '(0,': sb.append( '(0,') ; break ;
case '()': sb.append( '()') ; break ;
case 'switch(': sb.append( 'switch(') ; break ;
case '1': sb.append( '1') ; break ;
case 'Unknown type ': sb.append( 'Unknown type ') ; break ;
case 'Unexpected Node subclass.': sb.append( 'Unexpected Node subclass.') ; break ;
case 'throw': sb.append( 'throw') ; break ;
case '--': sb.append( '--') ; break ;
case 'a': sb.append( 'a') ; break ;
case '- -2': sb.append( '- -2') ; break ;
case '{}': sb.append( '{}') ; break ;
case '!--': sb.append( '!--') ; break ;
case '>': sb.append( '>') ; break ;
case '\\u': sb.append( '\\u') ; break ;
case ', "\"", "': sb.append( ', "\"", "') ; break ;
case ',  "\\\"", "\': sb.append( ',  "\\\"", "\') ; break ;
case "\\\'": sb.append( "\\\'") ; break ;
case '\\0': sb.append( '\\0') ; break ;
case '4': sb.append( '4') ; break ;
case '<\\': sb.append( '<\\') ; break ;
case 'f': sb.append( 'f') ; break ;
case 'finally': sb.append( 'finally') ; break ;
case 'case ': sb.append( 'case ') ; break ;
case '6': sb.append( '6') ; break ;
case '.': sb.append( '.') ; break ;
case 'use strict': sb.append( 'use strict') ; break ;
case ';': sb.append( ';') ; break ;
case 're in a IN_FOR_INIT_CLAUSE, (and thus can': sb.append( 're in a IN_FOR_INIT_CLAUSE, (and thus can') ; break ;
case '++': sb.append( '++') ; break ;
case 'b': sb.append( 'b') ; break ;
case '?': sb.append( '?') ; break ;
case 'with(': sb.append( 'with(') ; break ;
case 'eval': sb.append( 'eval') ; break ;
case '7': sb.append( '7') ; break ;
case '3': sb.append( '3') ; break ;
case 'Unexpected EXPR_VOID. Should be EXPR_RESULT.': sb.append( 'Unexpected EXPR_VOID. Should be EXPR_RESULT.') ; break ;
case 'for (...);': sb.append( 'for (...);') ; break ;
case 'function': sb.append( 'function') ; break ;
case '(': sb.append( '(') ; break ;
case ' ': sb.append( ' ') ; break ;
case ' || c > ': sb.append( ' || c > ') ; break ;
case "',  ": sb.append( "',  ") ; break ;
case '-': sb.append( '-') ; break ;
case '}': sb.append( '}') ; break ;
case ' + type + ': sb.append( ' + type + ') ; break ;
case '/script': sb.append( '/script') ; break ;
case 'Expected children to be strings': sb.append( 'Expected children to be strings') ; break ;
case 'new ': sb.append( 'new ') ; break ;
case 'try': sb.append( 'try') ; break ;
case 'if (...);': sb.append( 'if (...);') ; break ;
case ' : ': sb.append( ' : ') ; break ;
case 'e': sb.append( 'e') ; break ;
case 'while(': sb.append( 'while(') ; break ;
case 'if(': sb.append( 'if(') ; break ;
case '\t': sb.append( '\t') ; break ;
case ')': sb.append( ')') ; break ;
case 'c': sb.append( 'c') ; break ;
case 'break': sb.append( 'break') ; break ;
case 'set ': sb.append( 'set ') ; break ;
case ':': sb.append( ':') ; break ;
case '\': sb.append( '\') ; break ;
case 'var ': sb.append( 'var ') ; break ;
case "{'x': 'y'}": sb.append( "{'x': 'y'}") ; break ;
case 'AS IS': sb.append( 'AS IS') ; break ;
case ' as ': sb.append( ' as ') ; break ;
case '9': sb.append( '9') ; break ;
case 'd': sb.append( 'd') ; break ;
case 'default': sb.append( 'default') ; break ;
