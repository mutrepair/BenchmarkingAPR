return new ArrayList < String >( ) ;
return new ArrayList < >( ) ;
return new HashSet < >( ) ;
return getName( ).toLowerCase( ) ;
return new HashSet < String >( ) ;
return new ArrayList < Integer >( ) ;
return getResources( ).toLowerCase( ) ;
return getClass( ).toLowerCase( ) ;
return name.toLowerCase( ).trim( ) ;
return e.getName( ).toString( ) ;
return new ArrayList < T >( ) ;
return getResources( ).toString( ) ;
return name.toLowerCase( ) ;
return getResources( ).isEmpty( ) ;
return new ArrayList < >( ).size( ) ;
return getInstance( ).isEmpty( ) ;
return new ArraySet < >( ) ;
return getName( ).toString( ) ;
return new ArrayList < Object >( ) ;
return new HashMap < >( ) ;
return e.getName( ).equals( 'Mock for ') ;
return e.getName( ).equals( ' + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ') ;
return e.getName( ).equals( ', hashCode: ') ;
return new ArraySet < String >( ) ;
return getInstance( ).toString( ) ;
return getResources( ).toString( ) ) ;
return getClass( ).toString( ) ;
return name.toString( ).trim( ) ;
return this.isEmpty( ) ;
return name.toString( ).equals( 'Mock for ') ;
return name.toString( ).equals( ' + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ') ;
return name.toString( ).equals( ', hashCode: ') ;
return new HashSet < Integer >( ) ;
return this.getName( ).equals( 'Mock for ') ;
return this.getName( ).equals( ' + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ') ;
return this.getName( ).equals( ', hashCode: ') ;
return new ArrayList < Long >( ) ;
return getResources( ).getName( ) ;
return new HashSet < T >( ) ;
return getResources( ).getName( ) ) ;
return getResources( ).isEmpty( ) ) ;
return getName( ).toString( ) ) ;
return new ArrayList < >( 'Mock for ') ;
return new ArrayList < >( ' + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ') ;
return new ArrayList < >( ', hashCode: ') ;
return getResources( ).getString( 'Mock for ') ;
return getResources( ).getString( ' + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ') ;
return getResources( ).getString( ', hashCode: ') ;
return getInstance( ).isEmpty( ) ) ;
return getInstance( ).getName( ) ;
return super.isEmpty( ) ;
return getName( ).equals( 'Mock for ') ;
return getName( ).equals( ' + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ') ;
return getName( ).equals( ', hashCode: ') ;
return name.toString( ) ;
return new HashMap < String >( ) ;
return StringUtils.isEmpty( ) ;
return getResources( ).getValue( ) ;
return new ArrayList < String >( ) ) ;
return new ArrayList < >(1) ;
return getClass( ).getName( ) ;
return new ArrayList < String >>( ) ;
return getResources( ).equals( 'Mock for ') ;
return getResources( ).equals( ' + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ') ;
return getResources( ).equals( ', hashCode: ') ;
return toString( ).equals( 'Mock for ') ;
return toString( ).equals( ' + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ') ;
return toString( ).equals( ', hashCode: ') ;
return new ArrayList < >( ) ) ;
return new ArrayList < >(0) ;
return new ArrayList < >(175) ;
return new ArrayList < >(184) ;
return new ArrayList < >(2007) ;
return new ArrayList < >(1) ;
return new ArrayList < >(1998191268711234347) ;
return new ArrayList < String >(1) ;
return name.toLowerCase( ) ) ;
return new ArrayList < >(( ) ;
 return( e.getName( ) ;
return e.getName( ) ;
return Integer.parseInt( 'Mock for ') ;
return Integer.parseInt( ' + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ') ;
return Integer.parseInt( ', hashCode: ') ;
return new ArrayList < ? >( ) ;
return 0.toString( ) ;
return 175.toString( ) ;
return 184.toString( ) ;
return 2007.toString( ) ;
return 1.toString( ) ;
return 1998191268711234347.toString( ) ;
return new ArrayList < String >(0) ;
return new ArrayList < String >(175) ;
return new ArrayList < String >(184) ;
return new ArrayList < String >(2007) ;
return new ArrayList < String >(1) ;
return new ArrayList < String >(1998191268711234347) ;
return TextUtils.isEmpty( ) ;
 return( e.getName( ) ) ;
return this.getName( ) ;
 return( e.getMessage( ) ;
