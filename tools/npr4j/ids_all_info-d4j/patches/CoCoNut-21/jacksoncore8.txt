if( !_hasSegments ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment != null ;
if( !_hasSegments ) return_currentSegment.clone( ) ;
if( !_hasSegments ) return_currentSegment == null ;
if( !_hasSegments ) return_currentSegment != null ; return_currentSegment ;
if( !_hasSegments -1) return_currentSegment ;
if( !_hasSegments && !_currentSegment == null ) return_currentSegment ;
if( !_hasSegments && !_currentSegment != null ) return_currentSegment ;
if( !_hasSegments && ! mSegments ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.replaceAll( '', '') ;
if( !_hasSegments ) return_currentSegment.replaceAll( 'resetWithEmpty()', 'resetWithEmpty()') ;
if( !_hasSegments ) return_currentSegment.replaceAll( 'shared mode', 'shared mode') ;
if( !_hasSegments ) return_currentSegment.replaceAll( 's start using _last_ segment from list; for one, it', 's start using _last_ segment from list; for one, it') ;
if( !_hasSegments && !_currentSegments ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment == null ?0:_currentSegment ;
if( !_hasSegments ) return_currentSegment.replace( '', '') ;
if( !_hasSegments ) return_currentSegment.replace( 'resetWithEmpty()', 'resetWithEmpty()') ;
if( !_hasSegments ) return_currentSegment.replace( 'shared mode', 'shared mode') ;
if( !_hasSegments ) return_currentSegment.replace( 's start using _last_ segment from list; for one, it', 's start using _last_ segment from list; for one, it') ;
if( !_hasSegments ) return_currentSegment.trim( ) ;
if( !_hasSegments ) return_currentSegment != null ) return_currentSegment ;
if( !_hasSegments && ! this.isEmpty( ) ) return_currentSegment ;
if( !_hasSegments && !_currentSegments != null ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment != null ?_currentSegment ;
if( !_hasSegments && !_currentSegment ) return_currentSegment ;
if( !_hasSegments && !_currentSegments == null ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.equals( '') ;
if( !_hasSegments ) return_currentSegment.equals( 'resetWithEmpty()') ;
if( !_hasSegments ) return_currentSegment.equals( 'shared mode') ;
if( !_hasSegments ) return_currentSegment.equals( 's start using _last_ segment from list; for one, it') ;
if( !_hasSegments ) return_currentSegment == null ?_currentSegment ;
if( !_hasSegments &&_currentSegments ) return_currentSegment ;
if( !_hasSegments || !_currentSegment == null ) return_currentSegment ;
if( !_isSegments ) return_currentSegment ;
if( !_hasSegments == null || !_currentSegments ) return_currentSegment ;
if( !_hasSegments || !_currentSegment != null ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment + '';
if( !_hasSegments ) return_currentSegment + 'resetWithEmpty()';
if( !_hasSegments ) return_currentSegment + 'shared mode';
if( !_hasSegments ) return_currentSegment + 's start using _last_ segment from list; for one, it';
if(_hasSegments ) return_currentSegment ;
if( !_hasSegments || ! mSegments ) return_currentSegment ;
if( !_hasSegments && ! checkSegments ) return_currentSegment ;
if( !_hasSegments == null ) return_currentSegment ;
if( !_hasSegments || !_currentSegments ) return_currentSegment ;
if( !_hasSegments != null ) return_currentSegment ;
else if( !_hasSegments ) return_currentSegment ;
if( !_hasSegments && ! isSegments ) return_currentSegment ;
if( !_hasSegments && ! !_currentSegments ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.getName( ) ;
if( !_hasSegments ) return_currentSegment -1;
if( !_hasSegments ) return_currentSegment == null ) return_currentSegment ;
if( !_hasSegments && ! hasSegments ) return_currentSegment ;
if( !_hasSegments ||_currentSegments ) return_currentSegment ;
if( !_hasSegments.isEmpty( ) ) return_currentSegment ;
if( !_hasSegmentsSegments ) return_currentSegment ;
if( !_hasSegments.isClosed( ) ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment ) return_currentSegment ;
if( !_hasSegments( ) ) return_currentSegment ;
if( !_hasSegments || !_currentSegment ) return_currentSegment ;
if( !_hasSegments ) continue_currentSegment ;
if( !_hasSegments && ! resultSegments ) return_currentSegment ;
if( !_hasSegments &&_hasSegments ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.size( ) ;
if( !_hasSegments +1) return_currentSegment ;
if( !_hasSegments && ! return_currentSegments ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.getId( ) ;
if( !_hasSegments + '') return_currentSegment ;
if( !_hasSegments + 'resetWithEmpty()') return_currentSegment ;
if( !_hasSegments + 'shared mode') return_currentSegment ;
if( !_hasSegments + 's start using _last_ segment from list; for one, it') return_currentSegment ;
if( !_hasSegments ) return_currentSegment.isEmpty( ) ;
if( !_hasSegments ) return_currentSegment - '';
if( !_hasSegments ) return_currentSegment - 'resetWithEmpty()';
if( !_hasSegments ) return_currentSegment - 'shared mode';
if( !_hasSegments ) return_currentSegment - 's start using _last_ segment from list; for one, it';
if( !_hasSegments && ! return_hasSegments ) return_currentSegment ;
if( !_hasSegments && !_currentSegments ) return_currentSegment != null ;
if( !_hasSegments && ! currentSegments ) return_currentSegment ;
if( !_hasSegments && ! nextSegments ) return_currentSegment ;
if( !_hasSegments *1) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.getValue( ) ;
if( !_hasSegments ) return_currentSegment.cloneTo( ) ;
if( !_hasSegments && !_currentSegment ) return_currentSegment != null ;
if( !(_hasSegments ) return_currentSegment ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.toLowerCase( ) ;
if( !_hasSegments *0) return_currentSegment ;
if( !_hasSegments && ! isSegment ) return_currentSegment ;
if( !_hasSegments && !_currentSegments ) return_currentSegment == null ;
if(( !_hasSegments ) return_currentSegment ) return_currentSegment ;
if( !_hasSegments && null ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.getCode( ) ;
if( !_hasSegments , false ) return_currentSegment ;
if( !_hasSegments -1000) return_currentSegment ;
if( !_hasSegments -28) return_currentSegment ;
if( !_hasSegments -16) return_currentSegment ;
if( !_hasSegments -2) return_currentSegment ;
if( !_hasSegments -50) return_currentSegment ;
if( !_hasSegments -0) return_currentSegment ;
if( !_hasSegments -4) return_currentSegment ;
