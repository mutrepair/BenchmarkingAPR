if( !_hasSegments ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment != null ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment == null ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment ) return_currentSegment ;
if( !_hasSegments && !_currentSegment != null ) return_currentSegment ;
if( !( !_hasSegments ) return_currentSegment ) return_currentSegment ;
if( !_hasSegments && !_currentSegment == null ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.size( ) ;
if( !_hasSegments && !_currentSegment ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment ==0) return_currentSegment ;
if( !_hasSegments != null && !_hasSegments ) return_currentSegment ;
if( !_hasSegments || !_currentSegment != null ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.length( ) ;
if( !_hasSegments || !_currentSegment ) return_currentSegment ;
if( !_hasSegments.isEmpty( ) ) return_currentSegment ;
if( !_hasSegments.size( ) >0) return_currentSegment ;
if( !_hasSegments -1) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.equals( '') ;
if( !_hasSegments ) return_currentSegment.equals( 'resetWithEmpty()') ;
if( !_hasSegments ) return_currentSegment.equals( 'shared mode') ;
if( !_hasSegments ) return_currentSegment.equals( 's start using _last_ segment from list; for one, it') ;
if( !_hasSegments ) return_currentSegment -1;
if( !( !_hasSegments ) ) return_currentSegment ;
if( !_hasSegments == null ) return_currentSegment ;
if( !_hasSegments != null ) return_currentSegment ;
if( !_hasSegments ) return_isSegment ) return_currentSegment ;
if( !_hasSegments.length( ) >0) return_currentSegment ;
if( ''.equals( !_hasSegments ) ) return_currentSegment ;
if( 'resetWithEmpty()'.equals( !_hasSegments ) ) return_currentSegment ;
if( 'shared mode'.equals( !_hasSegments ) ) return_currentSegment ;
if( 's start using _last_ segment from list; for one, it'.equals( !_hasSegments ) ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.trim( ) ;
if( !_hasSegments ) return_currentSegment.isEmpty( ) ;
if( !_hasSegments ) return_currentSegment.replace( '', '') ;
if( !_hasSegments ) return_currentSegment.replace( 'resetWithEmpty()', 'resetWithEmpty()') ;
if( !_hasSegments ) return_currentSegment.replace( 'shared mode', 'shared mode') ;
if( !_hasSegments ) return_currentSegment.replace( 's start using _last_ segment from list; for one, it', 's start using _last_ segment from list; for one, it') ;
if( !_hasSegments ) return_currentSegment.size( ) -1;
if( !_hasSegments &&_currentSegment ) return_currentSegment ;
if(( !_hasSegments ) return_currentSegment ) return_currentSegment ;
if( !_hasSegments.equals( '') ) return_currentSegment ;
if( !_hasSegments.equals( 'resetWithEmpty()') ) return_currentSegment ;
if( !_hasSegments.equals( 'shared mode') ) return_currentSegment ;
if( !_hasSegments.equals( 's start using _last_ segment from list; for one, it') ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.clone( ) ;
if( !_hasSegments ) return_currentSegment != null ;
if( !_hasSegments ) return_currentSegment == null ;
if( !_hasSegments ) return_currentSegment + '';
if( !_hasSegments ) return_currentSegment + 'resetWithEmpty()';
if( !_hasSegments ) return_currentSegment + 'shared mode';
if( !_hasSegments ) return_currentSegment + 's start using _last_ segment from list; for one, it';
if( !_hasSegments ||_currentSegment ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.toString( ) ;
if( !_hasSegments ) return_currentSegment.get( ) ;
if( !_hasSegments ) return_currentSegment.contains( '') ;
if( !_hasSegments ) return_currentSegment.contains( 'resetWithEmpty()') ;
if( !_hasSegments ) return_currentSegment.contains( 'shared mode') ;
if( !_hasSegments ) return_currentSegment.contains( 's start using _last_ segment from list; for one, it') ;
if( ! !_hasSegments ) return_currentSegment ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment )
if( !_hasSegments && !_currentSource ) return_currentSegment ;
if( !_hasSegments ) return_hasSegment ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment +1;
if( !_hasSegments ) return_currentSegment.length( ) -1;
if( !_hasSegments && return_currentSegment ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.size( ) >0;
if( !_hasSegments ) return_currentSegment.length( ) >0;
if( !_hasSegments +1) return_currentSegment ;
if( !_hasSegments.get( ) ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.length ;
if( !_hasSegments ) return_isSegment ;
if( !_hasSegments && ) return_currentSegment ;
if( ! !_hasSegments ) return_currentSegment ;
if( !_isSegments ) return_currentSegment ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.exists( ) ;
if( !_hasSegments + '') return_currentSegment ;
if( !_hasSegments + 'resetWithEmpty()') return_currentSegment ;
if( !_hasSegments + 'shared mode') return_currentSegment ;
if( !_hasSegments + 's start using _last_ segment from list; for one, it') return_currentSegment ;
if( !_hasSegments ) return_currentSegment -1000;
if( !_hasSegments ) return_currentSegment -28;
if( !_hasSegments ) return_currentSegment -16;
if( !_hasSegments ) return_currentSegment -2;
if( !_hasSegments ) return_currentSegment -50;
if( !_hasSegments ) return_currentSegment -0;
if( !_hasSegments ) return_currentSegment -4;
if( !_hasSegments ) return_currentSegment -1;
if( !_hasSegments ) return_currentSegment -24;
if( !_hasSegments ) return_currentSegment -40000;
if( !_hasSegments ) return_currentSegment -25;
if( !_hasSegments ) return_currentSegment -256;
if( !_hasSegments ) return_currentSegment -6;
if( !_hasSegments ) return_currentSegment -2009;
if( !_hasSegments ) return_currentSegment( ) ;
if( !( !_hasSegments ) return_currentSegment ) ;
if( !_hasSegments( ) ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment [0] ;
if( !_hasSegments ) return_currentSegment ) return_lastSegment ;
if( !_hasSegments ) return_currentSegment - '';
if( !_hasSegments ) return_currentSegment - 'resetWithEmpty()';
