return new ArrayList < >( ) ;
return new ArrayList < >( true ) ;
return new ArrayList < String >( ) ;
return new ArrayList < String >( true ) ;
return String.valueOf( value ) ;
return new HashMap < >( true ) ;
return new HashSet < >( true ) ;
return Boolean.valueOf( value ) ;
throw new IllegalArgumentException( '') ;
throw new IllegalArgumentException( 'Boolean') ;
throw new IllegalArgumentException( 'valueOf') ;
throw new IllegalArgumentException( '^') ;
throw new IllegalArgumentException( 'foo.bar.baz') ;
throw new IllegalArgumentException( '>>>') ;
throw new IllegalArgumentException( ' does not have a condition.') ;
throw new IllegalArgumentException( 'split') ;
throw new IllegalArgumentException( '||') ;
throw new IllegalArgumentException( '&=') ;
throw new IllegalArgumentException( 'typeof') ;
throw new IllegalArgumentException( 'Unknown precedence for ') ;
throw new IllegalArgumentException( 'XMLHttpRequest') ;
throw new IllegalArgumentException( 'call') ;
throw new IllegalArgumentException( '.prototype.') ;
throw new IllegalArgumentException( '.prototype') ;
throw new IllegalArgumentException( '>>') ;
throw new IllegalArgumentException( 'simple') ;
throw new IllegalArgumentException( ': ') ;
throw new IllegalArgumentException( 'in') ;
throw new IllegalArgumentException( 'undefined') ;
throw new IllegalArgumentException( '%=') ;
throw new IllegalArgumentException( 'void') ;
throw new IllegalArgumentException( '*') ;
throw new IllegalArgumentException( '/=') ;
throw new IllegalArgumentException( 'test') ;
throw new IllegalArgumentException( '<') ;
throw new IllegalArgumentException( 'isLiteralValue') ;
throw new IllegalArgumentException( 'http://www.xkcd.org/326/') ;
throw new IllegalArgumentException( 'License') ;
throw new IllegalArgumentException( '==') ;
throw new IllegalArgumentException( 'Unknown op ') ;
throw new IllegalArgumentException( 'RegExp') ;
throw new IllegalArgumentException( '|=') ;
throw new IllegalArgumentException( '1') ;
throw new IllegalArgumentException( '+=') ;
throw new IllegalArgumentException( '1.0') ;
throw new IllegalArgumentException( 'a') ;
throw new IllegalArgumentException( 'instanceof') ;
throw new IllegalArgumentException( '>') ;
throw new IllegalArgumentException( '&&') ;
throw new IllegalArgumentException( ' of ') ;
throw new IllegalArgumentException( 'prototype') ;
throw new IllegalArgumentException( 'match') ;
throw new IllegalArgumentException( '\n parent:') ;
throw new IllegalArgumentException( 'void 0') ;
throw new IllegalArgumentException( 'f') ;
throw new IllegalArgumentException( 'n') ;
throw new IllegalArgumentException( '.') ;
throw new IllegalArgumentException( 'exec') ;
throw new IllegalArgumentException( ' (type ') ;
throw new IllegalArgumentException( ' + (1 + 2) is not ') ;
throw new IllegalArgumentException( '&') ;
throw new IllegalArgumentException( "malformed 'for' statement ") ;
throw new IllegalArgumentException( 'toString') ;
throw new IllegalArgumentException( 'String') ;
throw new IllegalArgumentException( 'Math') ;
throw new IllegalArgumentException( 'Infinity') ;
throw new IllegalArgumentException( '!==') ;
throw new IllegalArgumentException( '>>=') ;
throw new IllegalArgumentException( 'replace') ;
throw new IllegalArgumentException( '!=') ;
throw new IllegalArgumentException( '===') ;
throw new IllegalArgumentException( '*=') ;
throw new IllegalArgumentException( 'Error') ;
throw new IllegalArgumentException( 'for') ;
throw new IllegalArgumentException( 'this') ;
throw new IllegalArgumentException( '-') ;
throw new IllegalArgumentException( 'Date') ;
throw new IllegalArgumentException( ' + type + ') ;
throw new IllegalArgumentException( 'Number') ;
throw new IllegalArgumentException( ' + operator + ') ;
throw new IllegalArgumentException( 'Array') ;
throw new IllegalArgumentException( ')') ;
throw new IllegalArgumentException( ' or ') ;
throw new IllegalArgumentException( 'foo') ;
throw new IllegalArgumentException( 'Expected CALL node, got ') ;
throw new IllegalArgumentException( '-=') ;
throw new IllegalArgumentException( '!') ;
throw new IllegalArgumentException( 'getChildAtIndex') ;
throw new IllegalArgumentException( 'AS IS') ;
throw new IllegalArgumentException( 'Expected NEW node, got ') ;
throw new IllegalArgumentException( '>>>=') ;
throw new IllegalArgumentException( 'Invalid attempt to remove node: ') ;
throw new IllegalArgumentException( '/') ;
throw new IllegalArgumentException( '+') ;
throw new IllegalArgumentException( '=') ;
throw new IllegalArgumentException( 'Unexpected expression node') ;
throw new IllegalArgumentException( 'arguments') ;
throw new IllegalArgumentException( 'FREE_CALL') ;
throw new IllegalArgumentException( '<<=') ;
throw new IllegalArgumentException( 'Not an assiment op') ;
