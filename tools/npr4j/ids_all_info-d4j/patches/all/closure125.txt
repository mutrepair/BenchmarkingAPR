if( fnType != null && fnType.equals( '') ) {
if( fnType != null && fnType.equals( 'JSC_EXPECTED_THIS_TYPE') ) {
if( fnType != null && fnType.equals( 'an interface can only extend, but not implement interfaces') ) {
if( fnType != null && fnType.equals( 'undefined') ) {
if( fnType != null && fnType.equals( ' empty functions{0}') ) {
if( fnType != null && fnType.equals( 'JSC_NOT_FUNCTION_TYPE') ) {
if( fnType != null && fnType.equals( 'unknown') ) {
if( fnType != null && fnType.equals( 'function {0} masks variable (IE bug)') ) {
if( fnType != null && fnType.equals( 'Property {0} never defined on {1}. Did you mean {2}?') ) {
if( fnType != null && fnType.equals( 'function') ) {
if( fnType != null && fnType.equals( 'number') ) {
if( fnType != null && fnType.equals( 't count externs since the user') ) {
if( fnType != null && fnType.equals( 'JSC_FUNCTION_MASKS_VARIABLE') ) {
if( fnType != null && fnType.equals( 'Property {0} never defined on {1}') ) {
if( fnType != null && fnType.equals( 'left side of numeric comparison') ) {
if( fnType != null && fnType.equals( 'static') ) {
if( fnType != null && fnType.equals( 'getEditDistance') ) {
if( fnType != null && fnType.equals( 'Illegal key, the object literal is a {0}') ) {
if( fnType != null && fnType.equals( '{0} cannot implement this type; ') ) {
if( fnType != null && fnType.equals( 'JSC_INEXISTENT_PROPERTY') ) {
if( fnType != null && fnType.equals( 'JSC_UNKNOWN_EXPR_TYPE') ) {
if( fnType != null && fnType.equals( '(missing)') ) {
if( fnType != null && fnType.equals( '\') ) {
if( fnType != null && fnType.equals( 'enum key {0} must be a syntactic constant') ) {
if( fnType != null && fnType.equals( 'JSC_CONFLICTING_SHAPE_TYPE') ) {
if( fnType != null && fnType.equals( 'JSC_BAD_TYPE_FOR_BIT_OPERATION') ) {
if( fnType != null && fnType.equals( 'object.property') ) {
if( fnType != null && fnType.equals( 'ILLEGAL_OBJLIT_KEY') ) {
if( fnType != null && fnType.equals( 'JSC_WRONG_ARGUMENT_COUNT') ) {
if( fnType != null && fnType.equals( 'prototype') ) {
if( fnType != null && fnType.equals( 'JSC_NOT_A_CONSTRUCTOR') ) {
if( fnType != null && fnType.equals( 'incompatible enum element types') ) {
if( fnType != null && fnType.equals( ', or ') ) {
if( fnType != null && fnType.equals( 'property {0} already defined on superclass {1}; ') ) {
if( fnType != null && fnType.equals( 'right side of comparison') ) {
if( fnType != null && fnType.equals( 'initializing variable') ) {
if( fnType != null && fnType.equals( 'left side of comparison') ) {
if( fnType != null && fnType.equals( 'JSC_CONFLICTING_EXTENDED_TYPE') ) {
if( fnType != null && fnType.equals( 'JSC_CONFLICTING_IMPLEMENTED_TYPE') ) {
if( fnType != null && fnType.equals( 't emit these warnings if they') ) {
if( fnType != null && fnType.equals( 'this') ) {
if( fnType != null && fnType.equals( 'cannot instantiate non-constructor') ) {
if( fnType != null && fnType.equals( 'property {0} already defined on interface {1}; ') ) {
if( fnType != null && fnType.equals( 'Cannot add a property to a struct instance ') ) {
if( fnType != null && fnType.equals( 'JSC_UNKNOWN_OVERRIDE') ) {
if( fnType != null && fnType.equals( 'this.foo') ) {
if( fnType != null && fnType.equals( ' + maxArgs + ') ) {
if( fnType != null && fnType.equals( 'JSC_IN_USED_WITH_STRUCT') ) {
if( fnType != null && fnType.equals( 'cast') ) {
if( fnType != null && fnType.equals( 'in') ) {
if( fnType != null && fnType.equals( 'assignment') ) {
if( fnType != null && fnType.equals( 'this\') ) {
if( fnType != null && fnType.equals( 'declaration of multiple variables with shared type information') ) {
if( fnType != null && fnType.equals( 'element {0} does not exist on this enum') ) {
if( fnType != null && fnType.equals( 'JSC_UNRESOLVED_TYPE') ) {
if( fnType != null && fnType.equals( 'Function requires at least {2} argument(s){3}.') ) {
if( fnType != null && fnType.equals( ' type') ) {
if( fnType != null && fnType.equals( '{0}\') ) {
if( fnType != null && fnType.equals( 't resolve correctly, we') ) {
if( fnType != null && fnType.equals( 'after it is constructed.') ) {
if( fnType != null && fnType.equals( 'operator {0} cannot be applied to {1}') ) {
if( fnType != null && fnType.equals( 'dumb') ) {
if( fnType != null && fnType.equals( ' argument(s)') ) {
if( fnType != null && fnType.equals( 'JSC_ENUM_NOT_CONSTANT') ) {
if( fnType != null && fnType.equals( 'left : {0}\n') ) {
if( fnType != null && fnType.equals( 'interface members can only be empty property declarations,') ) {
if( fnType != null && fnType.equals( 'mismatch of the {0} property type and the type ') ) {
if( fnType != null && fnType.equals( 'JSC_INTERFACE_METHOD_OVERRIDE') ) {
if( fnType != null && fnType.equals( 'constructor') ) {
if( fnType != null && fnType.equals( 'enum element {0} already defined') ) {
if( fnType != null && fnType.equals( 'JSC_MULTIPLE_VAR_DEF') ) {
if( fnType != null && fnType.equals( 'condition always evaluates to {2}\n') ) {
if( fnType != null && fnType.equals( 'JSC_INTERFACE_FUNCTION_NOT_EMPTY') ) {
if( fnType != null && fnType.equals( 'License') ) {
if( fnType != null && fnType.equals( 'Illegal annotation on {0}. @implicitCast may only be used in ') ) {
if( fnType != null && fnType.equals( 'Interface {0} has a property {1} with incompatible types in ') ) {
if( fnType != null && fnType.equals( 'sign operator') ) {
if( fnType != null && fnType.equals( ' and ') ) {
if( fnType != null && fnType.equals( "left side of 'in'") ) {
if( fnType != null && fnType.equals( 'struct') ) {
if( fnType != null && fnType.equals( ' and no more than ') ) {
if( fnType != null && fnType.equals( 'new\') ) {
if( fnType != null && fnType.equals( 'override: {3}') ) {
if( fnType != null && fnType.equals( 'inconsistent return type') ) {
if( fnType != null && fnType.equals( 'JSC_CONSTRUCTOR_NOT_CALLABLE') ) {
if( fnType != null && fnType.equals( 'Constructor {0} should be called with the \') ) {
if( fnType != null && fnType.equals( 'JSC_INVALID_INTERFACE_MEMBER_DECLARATION') ) {
if( fnType != null && fnType.equals( 'of the property it overrides from superclass {1}\n') ) {
if( fnType != null && fnType.equals( 'JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE') ) {
if( fnType != null && fnType.equals( ' : ') ) {
if( fnType != null && fnType.equals( 'instanceof requires an object') ) {
if( fnType != null && fnType.equals( 'original: {2}\n') ) {
if( fnType != null && fnType.equals( 'property {0} not defined on any superclass of {1}') ) {
if( fnType != null && fnType.equals( 'JSC_INEXISTENT_ENUM_ELEMENT') ) {
if( fnType != null && fnType.equals( 'dict') ) {
if( fnType != null && fnType.equals( 'increment/decrement') ) {
if( fnType != null && fnType.equals( 'Function {0}: called with {1} argument(s). ') ) {
if( fnType != null && fnType.equals( 'interface member functions must have an empty body') ) {
if( fnType != null && fnType.equals( 'externs.') ) {
if( fnType != null && fnType.equals( 'right: {1}') ) {
