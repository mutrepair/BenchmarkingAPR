ignored = getIgnored( ).getIgnored( ) ;
ignored = getChildren( ).getIgnored( ) ;
ignored = getIgnored( ) ;
ignored = new HashSet < >( ) ;
ignored = getChildren( ) ;
ignored = getIgnored( ).getChildren( ) ;
ignored = getChildren( ).getChildren( ) ;
ignored = 'Subtype of BeanDeserializerFactory ('+ dtuple.getIgnored( ) ) ;
ignored = ' (of type '+ dtuple.getIgnored( ) ) ;
ignored = 'org.codehaus.groovy.runtime.MethodClosure'+ dtuple.getIgnored( ) ) ;
ignored = 'org.codehaus.groovy.runtime.ConvertedClosure'+ dtuple.getIgnored( ) ) ;
ignored = 'suppressed'+ dtuple.getIgnored( ) ) ;
ignored = 'initCause'+ dtuple.getIgnored( ) ) ;
ignored = 'org.apache.commons.collections4.functors.InvokerTransformer'+ dtuple.getIgnored( ) ) ;
ignored = 'build'+ dtuple.getIgnored( ) ) ;
ignored = 'org.apache.commons.collections4.functors.InstantiateTransformer'+ dtuple.getIgnored( ) ) ;
ignored = 'nasty classes'+ dtuple.getIgnored( ) ) ;
ignored = '+propName+'+ dtuple.getIgnored( ) ) ;
ignored = 'org.apache.xalan.xsltc.trax.TemplatesImpl'+ dtuple.getIgnored( ) ) ;
ignored = '+typeStr+'+ dtuple.getIgnored( ) ) ;
ignored = 'org.springframework.beans.factory.ObjectFactory'+ dtuple.getIgnored( ) ) ;
ignored = 'setMessage()'+ dtuple.getIgnored( ) ) ;
ignored = ") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with "+ dtuple.getIgnored( ) ) ;
ignored = "Could not find creator property with name '%s' (known Creator properties: %s)"+ dtuple.getIgnored( ) ) ;
ignored = '%s'+ dtuple.getIgnored( ) ) ;
ignored = 's no '+ dtuple.getIgnored( ) ) ;
ignored = 'false'+ dtuple.getIgnored( ) ) ;
ignored = 'ignored'+ dtuple.getIgnored( ) ) ;
ignored = ' as a Bean'+ dtuple.getIgnored( ) ) ;
ignored = 'message'+ dtuple.getIgnored( ) ) ;
ignored = 'com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl'+ dtuple.getIgnored( ) ) ;
ignored = "'"+ dtuple.getIgnored( ) ) ;
ignored = 'Illegal type (%s) to deserialize: prevented for security reasons'+ dtuple.getIgnored( ) ) ;
ignored = "Can not bind back references as Creator parameters: type %s (reference '%s', parameter index #%d)"+ dtuple.getIgnored( ) ) ;
ignored = 'org.apache.commons.collections.functors.InstantiateTransformer'+ dtuple.getIgnored( ) ) ;
ignored = '"+propName+"'+ dtuple.getIgnored( ) ) ;
ignored = '+type.getName()+'+ dtuple.getIgnored( ) ) ;
ignored = 'any values'+ dtuple.getIgnored( ) ) ;
ignored = 'd properties into blocked ones if there'+ dtuple.getIgnored( ) ) ;
ignored = 'No non-constructor mutator available'+ dtuple.getIgnored( ) ) ;
ignored = ": can not find property with name '"+ dtuple.getIgnored( ) ) ;
ignored = 'Can not deserialize Class '+ dtuple.getIgnored( ) ) ;
ignored = 'any'+ dtuple.getIgnored( ) ) ;
ignored = 'ignorable types'+ dtuple.getIgnored( ) ) ;
ignored = 'org.apache.commons.collections.functors.InvokerTransformer'+ dtuple.getIgnored( ) ) ;
ignored = 'fluent factories'+ dtuple.getIgnored( ) ) ;
ignored = 'additional deserializer definitions'+ dtuple.getIgnored( ) ) ;
ignored = 'unchecked'+ dtuple.getIgnored( ) ) ;
ignored = 'getSuppressed'+ dtuple.getIgnored( ) ) ;
ignored = ') as a Bean'+ dtuple.getIgnored( ) ) ;
ignored = 'withAdditionalDeserializers'+ dtuple.getIgnored( ) ) ;
ignored = 'Invalid Object Id definition for '+ dtuple.getIgnored( ) ) ;
ignored = 'localizedMessage'+ dtuple.getIgnored( ) ) ;
ignored = 'Can not deserialize Proxy class '+ dtuple.getIgnored( ) ) ;
ignored = 'cause'+ dtuple.getIgnored( ) ) ;
ignored = 'with methods'+ dtuple.getIgnored( ) ) ;
ignored = authenticate.getIgnoreCase( ) ;
ignored = marker.getIgnored( ).replace( 'Subtype of BeanDeserializerFactory (', 'Subtype of BeanDeserializerFactory (') ;
ignored = marker.getIgnored( ).replace( ' (of type ', ' (of type ') ;
ignored = marker.getIgnored( ).replace( 'org.codehaus.groovy.runtime.MethodClosure', 'org.codehaus.groovy.runtime.MethodClosure') ;
ignored = marker.getIgnored( ).replace( 'org.codehaus.groovy.runtime.ConvertedClosure', 'org.codehaus.groovy.runtime.ConvertedClosure') ;
ignored = marker.getIgnored( ).replace( 'suppressed', 'suppressed') ;
ignored = marker.getIgnored( ).replace( 'initCause', 'initCause') ;
ignored = marker.getIgnored( ).replace( 'org.apache.commons.collections4.functors.InvokerTransformer', 'org.apache.commons.collections4.functors.InvokerTransformer') ;
ignored = marker.getIgnored( ).replace( 'build', 'build') ;
ignored = marker.getIgnored( ).replace( 'org.apache.commons.collections4.functors.InstantiateTransformer', 'org.apache.commons.collections4.functors.InstantiateTransformer') ;
ignored = marker.getIgnored( ).replace( 'nasty classes', 'nasty classes') ;
ignored = marker.getIgnored( ).replace( '+propName+', '+propName+') ;
ignored = marker.getIgnored( ).replace( 'org.apache.xalan.xsltc.trax.TemplatesImpl', 'org.apache.xalan.xsltc.trax.TemplatesImpl') ;
ignored = marker.getIgnored( ).replace( '+typeStr+', '+typeStr+') ;
ignored = marker.getIgnored( ).replace( 'org.springframework.beans.factory.ObjectFactory', 'org.springframework.beans.factory.ObjectFactory') ;
ignored = marker.getIgnored( ).replace( 'setMessage()', 'setMessage()') ;
ignored = marker.getIgnored( ).replace( ") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with ", ") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with ") ;
ignored = marker.getIgnored( ).replace( "Could not find creator property with name '%s' (known Creator properties: %s)", "Could not find creator property with name '%s' (known Creator properties: %s)") ;
ignored = marker.getIgnored( ).replace( '%s', '%s') ;
ignored = marker.getIgnored( ).replace( 's no ', 's no ') ;
ignored = marker.getIgnored( ).replace( 'false', 'false') ;
ignored = marker.getIgnored( ).replace( 'ignored', 'ignored') ;
ignored = marker.getIgnored( ).replace( ' as a Bean', ' as a Bean') ;
ignored = marker.getIgnored( ).replace( 'message', 'message') ;
ignored = marker.getIgnored( ).replace( 'com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl', 'com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl') ;
ignored = marker.getIgnored( ).replace( "'", "'") ;
ignored = marker.getIgnored( ).replace( 'Illegal type (%s) to deserialize: prevented for security reasons', 'Illegal type (%s) to deserialize: prevented for security reasons') ;
ignored = marker.getIgnored( ).replace( "Can not bind back references as Creator parameters: type %s (reference '%s', parameter index #%d)", "Can not bind back references as Creator parameters: type %s (reference '%s', parameter index #%d)") ;
ignored = marker.getIgnored( ).replace( 'org.apache.commons.collections.functors.InstantiateTransformer', 'org.apache.commons.collections.functors.InstantiateTransformer') ;
ignored = marker.getIgnored( ).replace( '"+propName+"', '"+propName+"') ;
ignored = marker.getIgnored( ).replace( '+type.getName()+', '+type.getName()+') ;
ignored = marker.getIgnored( ).replace( 'any values', 'any values') ;
ignored = marker.getIgnored( ).replace( 'd properties into blocked ones if there', 'd properties into blocked ones if there') ;
ignored = marker.getIgnored( ).replace( 'No non-constructor mutator available', 'No non-constructor mutator available') ;
ignored = marker.getIgnored( ).replace( ": can not find property with name '", ": can not find property with name '") ;
ignored = marker.getIgnored( ).replace( 'Can not deserialize Class ', 'Can not deserialize Class ') ;
ignored = marker.getIgnored( ).replace( 'any', 'any') ;
ignored = marker.getIgnored( ).replace( 'ignorable types', 'ignorable types') ;
ignored = marker.getIgnored( ).replace( 'org.apache.commons.collections.functors.InvokerTransformer', 'org.apache.commons.collections.functors.InvokerTransformer') ;
ignored = marker.getIgnored( ).replace( 'fluent factories', 'fluent factories') ;
ignored = marker.getIgnored( ).replace( 'additional deserializer definitions', 'additional deserializer definitions') ;
ignored = marker.getIgnored( ).replace( 'unchecked', 'unchecked') ;
ignored = marker.getIgnored( ).replace( 'getSuppressed', 'getSuppressed') ;
ignored = marker.getIgnored( ).replace( ') as a Bean', ') as a Bean') ;
