jsDocParameter.getJSType( ) , true ) ;
jsDocParameter.getJSType( ) , false ) ;
jsDocParameter.getJSType( ) ) ;
jsDocParameter.getJSType( ) , true , true ) ;
jsDocParameter.getJSType( ).getJSType( ) ) ;
jsDocParameter.getJSType( ) , true , false ) ;
jsDocParameter.getJSType( ) , jsType ) ;
jsDocParameter.getJSType( ).isEmpty( ) ) ;
jsDocParameter.getJSType( ) , false , true ) ;
jsDocParameter.getJSType( ) , false , false ) ;
jsDocParameter.getJSType( ) , js ) ;
jsDocParameter.getJSType( ) , true , null ) ;
jsDocParameter.getJSType( ).toString( ) , true ) ;
jsDocParameter.getJSJSType( ) , true ) ;
jsDocParameter.getJSType( ) , getJSType( ) ) ;
jsDocParameter.getJSType( ) , jsType , true ) ;
jsDocParameter.getJSType( ).trim( ) , true ) ;
jsDocParameter.getJSType( ).getJS( ) , true ) ;
jsDocParameter.getJSTypeJS( ) , true ) ;
jsDocParameter.getJSType( ) , jsTypeType ) ;
jsDocParameter.getJSType( ) + 'JSC_REFLECT_CONSTRUCTOR_EXPECTED', true ) ;
jsDocParameter.getJSType( ) + 'native', true ) ;
jsDocParameter.getJSType( ) + 'AS IS', true ) ;
jsDocParameter.getJSType( ) + 'Variable {0} not declared before @lends annotation.', true ) ;
jsDocParameter.getJSType( ) + 'Interface {0} must be initialized at declaration', true ) ;
jsDocParameter.getJSType( ) + 'License', true ) ;
jsDocParameter.getJSType( ) + 'JSC_LENDS_ON_NON_OBJECT', true ) ;
jsDocParameter.getJSType( ) + 'Proxy', true ) ;
jsDocParameter.getJSType( ) + 'goog.typedef', true ) ;
jsDocParameter.getJSType( ) + 'May only lend properties to object types. {0} has type {1}.', true ) ;
jsDocParameter.getJSType( ) + 'JSC_MALFORMED_TYPEDEF', true ) ;
jsDocParameter.getJSType( ) + 'ActiveXObject', true ) ;
jsDocParameter.getJSType( ) + 'JSC_UNKNOWN_LENDS', true ) ;
jsDocParameter.getJSType( ) + 'Window', true ) ;
jsDocParameter.getJSType( ) + 't try to declare in the global scope if there', true ) ;
jsDocParameter.getJSType( ) + 're sure that', true ) ;
jsDocParameter.getJSType( ) + 'JSC_ENUM_INITIALIZER_NOT_ENUM', true ) ;
jsDocParameter.getJSType( ) + 'prototype', true ) ;
jsDocParameter.getJSType( ) + '.prototype', true ) ;
jsDocParameter.getJSType( ) + 'Constructor expected as first argument', true ) ;
jsDocParameter.getJSType( ) + 's ok to define this node', true ) ;
jsDocParameter.getJSType( ) + 'Typedef for {0} does not have any type information', true ) ;
jsDocParameter.getJSType( ) + 'JSC_IFACE_INITIALIZER_NOT_IFACE', true ) ;
jsDocParameter.getJSType( ) + 'undefined', true ) ;
jsDocParameter.getJSType( ) + 's not, then check to see if it', true ) ;
jsDocParameter.getJSType( ) + '.', true ) ;
jsDocParameter.getJSType( ) + 'global', true ) ;
jsDocParameter.getJSType( ) + 'JSC_CTOR_INITIALIZER_NOT_CTOR', true ) ;
jsDocParameter.getJSType( ) + 'enum initializer must be an object literal or an enum', true ) ;
jsDocParameter.getJSType( ) + 'Constructor {0} must be initialized at declaration', true ) ;
jsDocParameter.getJSType( ).equals( jsType ) ) ;
jsDocParameter.getJSType( ).toString( ) ) ;
jsDocParameter.getJSType( ) , jsDoc ) ;
jsDocParameter.getJSType( ) , jsName ) ;
jsDocParameter.getJSType( ) , jsDocParameter ) ;
jsDocParameter.getJSType( ) , jsType( ) ) ;
jsDocParameter.getJSType( ).size( ) , true ) ;
jsDocParameter.getJSType( ).setJSType( true ) ;
jsDocParameter.getJSType( ) ;
jsDocParameter.getJSType( ) , jsType == null ) ;
jsDocParameter.getJSType( ) , js.getType( ) ) ;
jsDocParameter.getJSType( ) +1, true ) ;
jsDocParameter.getJSType( ).getJS( ) ) ;
jsDocParameter.getJSType( ) , jsNode ) ;
jsDocParameter.getJSType( ) , jsId ) ;
jsDocParameter.getJSType( ).getJSName( ) ) ;
jsDocParameter.getJSType( ) , false , null ) ;
jsDocParameter.getJSType( ).toString( ) , false ) ;
jsDocParameter.getJSJS( ) , true ) ;
jsDocParameter.getJSJSType( ) , false ) ;
jsDocParameter.getJSType( ).trim( ) , false ) ;
jsDocParameter.getJSTypeJS( ) ) ;
jsDocParameter.getJSType( ) , jsDocParameters ) ;
jsDocParameter.getJSType( ).toLowerCase( ) ) ;
jsDocParameter.getJSType( ).length( ) , true ) ;
jsDocParameter.getJSType( ) , jsType != null ) ;
jsDocParameter.getJSType( ) , jsTypeParameter ) ;
jsDocParameter.getJSType( ) , jsRef ) ;
jsDocParameter.getJSType( ).replace( 'JSC_REFLECT_CONSTRUCTOR_EXPECTED', 'JSC_REFLECT_CONSTRUCTOR_EXPECTED') ) ;
jsDocParameter.getJSType( ).replace( 'native', 'native') ) ;
jsDocParameter.getJSType( ).replace( 'AS IS', 'AS IS') ) ;
jsDocParameter.getJSType( ).replace( 'Variable {0} not declared before @lends annotation.', 'Variable {0} not declared before @lends annotation.') ) ;
jsDocParameter.getJSType( ).replace( 'Interface {0} must be initialized at declaration', 'Interface {0} must be initialized at declaration') ) ;
jsDocParameter.getJSType( ).replace( 'License', 'License') ) ;
jsDocParameter.getJSType( ).replace( 'JSC_LENDS_ON_NON_OBJECT', 'JSC_LENDS_ON_NON_OBJECT') ) ;
jsDocParameter.getJSType( ).replace( 'Proxy', 'Proxy') ) ;
jsDocParameter.getJSType( ).replace( 'goog.typedef', 'goog.typedef') ) ;
jsDocParameter.getJSType( ).replace( 'May only lend properties to object types. {0} has type {1}.', 'May only lend properties to object types. {0} has type {1}.') ) ;
jsDocParameter.getJSType( ).replace( 'JSC_MALFORMED_TYPEDEF', 'JSC_MALFORMED_TYPEDEF') ) ;
jsDocParameter.getJSType( ).replace( 'ActiveXObject', 'ActiveXObject') ) ;
jsDocParameter.getJSType( ).replace( 'JSC_UNKNOWN_LENDS', 'JSC_UNKNOWN_LENDS') ) ;
jsDocParameter.getJSType( ).replace( 'Window', 'Window') ) ;
jsDocParameter.getJSType( ).replace( 't try to declare in the global scope if there', 't try to declare in the global scope if there') ) ;
jsDocParameter.getJSType( ).replace( 're sure that', 're sure that') ) ;
jsDocParameter.getJSType( ).replace( 'JSC_ENUM_INITIALIZER_NOT_ENUM', 'JSC_ENUM_INITIALIZER_NOT_ENUM') ) ;
jsDocParameter.getJSType( ).replace( 'prototype', 'prototype') ) ;
jsDocParameter.getJSType( ).replace( '.prototype', '.prototype') ) ;
jsDocParameter.getJSType( ).replace( 'Constructor expected as first argument', 'Constructor expected as first argument') ) ;
jsDocParameter.getJSType( ).replace( 's ok to define this node', 's ok to define this node') ) ;
jsDocParameter.getJSType( ).replace( 'Typedef for {0} does not have any type information', 'Typedef for {0} does not have any type information') ) ;
