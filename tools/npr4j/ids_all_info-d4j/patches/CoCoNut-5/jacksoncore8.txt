if( !_hasSegments ) return_currentSegment ;
if( !_hasSegments && !_currentSegment ) return_currentSegment ;
if( !_hasSegments && !_currentSegment != null ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment != null ) return_currentSegment ;
if( !_hasSegments && !_currentSegment == null ) return_currentSegment ;
if( !_hasSegments || !_currentSegment ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment != null ?_currentSegment ;
if( !_hasSegments ) return_currentSegment && !_currentSegment ;
if( !_hasSegments ) return_currentSegment.isEmpty( ) ;
if( !_hasSegments ) return_currentSegment == null ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment == null ?_currentSegment ;
if(_hasSegments && !_currentSegment ) return_currentSegment ;
if(_hasSegments ) return_currentSegment ;
if( !_hasSegments || !_currentSegment != null ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment ) ;
if( !_hasSegments ) return_currentSegment == null ||_currentSegment ;
if( !_hasSegments ) return_currentSegment.toLowerCase( ) ;
if( !_hasSegments || !_currentSegment == null ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.toString( ) ;
if( !_hasSegments &&( !_hasSegments ) return_currentSegment ;
if( !_hasSegments &&_currentSegment ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.get( ) ;
if(_hasSegments && !_currentSegment != null ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.length( ) ;
if( !_hasSegments && !_currentSegment && !_currentSegment ;
if( !_hasSegments != null && !_hasSegments ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment -1) return_currentSegment ;
if( !_hasSegments ) return_currentSegment &&_currentSegment ;
if( !_hasSegments ) return_currentSegment.size( ) ;
if( !_hasSegments && !_currentSegment ==0) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.trim( ) ;
if( !_hasSegments ) return_currentSegment != null &&_currentSegment ;
if( !_hasSegments && !_currentSegment ) ;
if( !_hasSegments ) return_currentSegment.equals( '') ;
if( !_hasSegments ) return_currentSegment.equals( 'resetWithEmpty()') ;
if( !_hasSegments ) return_currentSegment.equals( 'shared mode') ;
if( !_hasSegments ) return_currentSegment.equals( 's start using _last_ segment from list; for one, it') ;
if(_hasSegments && !_currentSegment == null ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment +1) return_currentSegment ;
if( !_hasSegments ) return_currentSegment + '') return_currentSegment ;
if( !_hasSegments ) return_currentSegment + 'resetWithEmpty()') return_currentSegment ;
if( !_hasSegments ) return_currentSegment + 'shared mode') return_currentSegment ;
if( !_hasSegments ) return_currentSegment + 's start using _last_ segment from list; for one, it') return_currentSegment ;
if( !_hasSegments && !_hasSegments ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.clone( ) ;
if( !_hasSegments && !_currentSegment == null ||_currentSegment ;
if( !_hasSegments ) return_currentSegment.toUpperCase( ) ;
if( !_hasSegments && !_currentSegment == false ) return_currentSegment ;
if( !_hasSegments ||_currentSegment ) return_currentSegment ;
if( !_hasSegments && !_currentSegment.isEmpty( ) ;
if( !_hasSegments && !_currentSegment !=0) return_currentSegment ;
if(_hasSegments ) return_currentSegment ) return_currentSegment ;
if( !_hasSegments &&_currentSegment != null ) return_currentSegment ;
if( !_hasSegments && !_currentSegment ;
if( !_hasSegments && !_currentSource ) return_currentSegment ;
if( !_hasSegments.isEmpty( ) ) return_currentSegment ;
if(_hasSegments && !_hasSegments ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.replace( '', '') ;
if( !_hasSegments ) return_currentSegment.replace( 'resetWithEmpty()', 'resetWithEmpty()') ;
if( !_hasSegments ) return_currentSegment.replace( 'shared mode', 'shared mode') ;
if( !_hasSegments ) return_currentSegment.replace( 's start using _last_ segment from list; for one, it', 's start using _last_ segment from list; for one, it') ;
if( !_hasSegments &&( !_hasSegments ) return_currentSegment ) ;
if( !_hasSegments ) return_currentSegment != null ||_currentSegment ;
if( !_hasSegments && !_currentSegment != null &&_currentSegment ;
if(_hasSegments || !_currentSegment ) return_currentSegment ;
if( !_hasSegments && !_currentSegment &&_currentSegment ;
if( !_hasSegments ) return_currentSegment || !_currentSegment ;
if( !_hasSegments ) return_currentSegment ||_currentSegment ;
if( !_hasSegments && !_currentSegment ) return_currentSegment ) ;
if( !_hasSegments && !_currentSegment && !_currentSegment ) ;
if( !_hasSegments ) return_currentSegment )
if( !_hasSegments &&_hasSegments ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment.getName( ) ;
if( !_hasSegments ) return_currentSegment =_currentSegment ;
if( !_hasSegments &&_currentSegment && !_currentSegment ;
if( !_hasSegments ) return_currentSegment.equals( ) ;
if(_hasSegments ) return_currentSegment.isEmpty( ) ;
if( !_hasSegments ) return_currentSegment && !_currentSegment ) ;
if(_hasSegments ) return_currentSegment == null ?_currentSegment ;
if( !_hasSegments && !_currentSegment.toString( ) ;
if( !_hasSegments ) return_currentSegment.contains( '') ;
if( !_hasSegments ) return_currentSegment.contains( 'resetWithEmpty()') ;
if( !_hasSegments ) return_currentSegment.contains( 'shared mode') ;
if( !_hasSegments ) return_currentSegment.contains( 's start using _last_ segment from list; for one, it') ;
if( !_currentSegments ) return_currentSegment ;
if( !_hasSegments || !_currentSegment && !_currentSegment ;
if( !_hasSegments && !_currentSegment || !_currentSegment ;
if(_hasSegments ) return_currentSegment && !_currentSegment ;
if( !_hasSegments || !_currentSegment ) ;
if(_hasSegments && !_currentSegment.isEmpty( ) ;
else if( !_hasSegments ) return_currentSegment ;
if(( !_hasSegments ) return_currentSegment ) ;
if( !_hasSegments ) return_currentSegment != null ;
if( !_isSegments ) return_currentSegment ;
if( !_hasSegments ) return_currentSegment( ) ;
if( ! !_hasSegments ) return_currentSegment ;
if(_hasSegments && !_currentSegment ;
if( !_hasSegments ) return_currentSegment +1;
if( !_hasSegments ) return_currentSegment + '';
