public class NativeHelpers { public static final void getAttributes(StringBuffer sb, Map<String, Object> props, Collection<Namespace> namespaces) { if (namespaces != null && !namespaces.isEmpty()) { for (Namespace ns: namespaces) { sb.append(" xmlns"); if (ns.getPrefix().length() > 0) sb.append(':').append(ns.getPrefix()); sb.append("=\"").append(ns.getURI()).append('"'); } }  if (props != null && !props.isEmpty()) { for (Map.Entry<String, Object> me: props.entrySet()) { HTMLs.appendAttribute(sb, <START_BUG> me.getKey(), Objects.toString(me.getValue())); <END_BUG> } } } }
assertEquals("LONG", ref.getField("Id").schema().getTypes().get(0).getType().toString());
public class ImageEditor { public void saveImageFile(File imageFile, String path) { Pattern pattern = Pattern.compile("/*.jpg|/*.png|/*.jpeg"); Matcher matcher = pattern.matcher(path); String newPath = null; if (!matcher.matches()) { newPath = path + ".png"; } try { FileUtils.copyFile(imageFile, new File(newPath)); } catch (IOException e) { <START_BUG> throw new RuntimeException(e); <END_BUG> } }  public File cropImage(Point start, Dimension size, BufferedImage image) { }  public File cropImage(Point start, Dimension size, File image) { }  public BufferedImage fileToImage(File file) { } }