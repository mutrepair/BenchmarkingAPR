=================================================
Project : time_1	start : 22/10/31 16:27
Current failed test : org.joda.time.TestPartial_Basics::testGetFormatter3 | 22/10/31 16:27
Mon Oct 31 16:28:00 CDT 2022 org.joda.time.format.ISODateTimeFormat,248
Failed time : 22/10/31 17:00
=================================================
Project : time_1	start : 22/10/31 17:00
Current failed test : org.joda.time.TestPartial_Basics::testGetFormatter3 | 22/10/31 17:00
Mon Oct 31 17:00:22 CDT 2022 org.joda.time.format.ISODateTimeFormat,248
Failed time : 22/10/31 17:18
=================================================
Project : time_1	start : 22/10/31 19:20
Current failed test : org.joda.time.TestInterval_Basics::testWithPeriodAfterStart1 | 22/10/31 19:20
Mon Oct 31 19:20:43 CDT 2022 org.joda.time.chrono.CopticChronology,223
Failed time : 22/10/31 19:37
=================================================
Project : time_1	start : 22/10/31 19:37
Current failed test : org.joda.time.TestInterval_Basics::testWithPeriodAfterStart1 | 22/10/31 19:37
Mon Oct 31 19:37:32 CDT 2022 org.joda.time.chrono.CopticChronology,223
Failed time : 22/10/31 19:55
=================================================
Project : time_1	start : 22/10/31 19:55
Current failed test : org.joda.time.TestInterval_Constructors::testConstructor_Object_Chronology1 | 22/10/31 19:55
Mon Oct 31 19:55:25 CDT 2022 org.joda.time.convert.ConverterSet,152
Timeout time : 22/11/01 09:29
=================================================
Project : time_1	start : 22/11/01 09:29
Current failed test : org.joda.time.TestInterval_Constructors::testConstructor_Object_Chronology1 | 22/11/01 09:29
Tue Nov 01 09:29:40 CDT 2022 org.joda.time.convert.ConverterSet,152
Failed time : 22/11/01 13:03
=================================================
Project : time_1	start : 22/11/01 13:03
Current failed test : org.joda.time.TestDays::testFactory_parseDays_String | 22/11/01 13:03
Tue Nov 01 13:03:30 CDT 2022 org.joda.time.format.PeriodFormatterBuilder,1275
Failed time : 22/11/01 13:28
=================================================
Project : time_1	start : 22/11/01 13:28
Current failed test : org.joda.time.TestDays::testFactory_parseDays_String | 22/11/01 13:28
Tue Nov 01 13:28:49 CDT 2022 org.joda.time.format.PeriodFormatterBuilder,1275
Failed time : 22/11/01 13:53
=================================================
Project : time_1	start : 22/11/01 13:53
Current failed test : org.joda.time.TestPartial_Basics::testPlus_RP | 22/11/01 13:53
Tue Nov 01 13:53:52 CDT 2022 org.joda.time.Partial,607

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/11/01 13:54
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 3.0 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>0,0]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/11/01 13:55
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<=period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/11/01 13:55
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/11/01 13:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
if(period.getFieldType(i).getField(iChronology).isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+period.getFieldType(i).getField(iChronology).getName());
}
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/11/01 13:55
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.072393989591796 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>0,0]
for(int i=0;i<period.size();i++){
int value=period.getValue(i);
if(value!=0){
DurationField field=period.getFieldType(i).getField(iso);
if(field.isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+field.getName());
}
duration=FieldUtils.safeAdd(duration,FieldUtils.safeMultiply(field.getUnitMillis(),value));
}
}

Time : 22/11/01 13:55
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<=period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/11/01 13:55
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
if(period.getFieldType(i).getField(iChronology).isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+period.getFieldType(i).getField(iChronology).getName());
}
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/11/01 13:55
----------------------------------------
Success time : 22/11/01 13:58
=================================================
Project : time_1	start : 22/11/01 13:58
Current failed test : org.joda.time.TestPartial_Basics::testPlus_RP | 22/11/01 13:58
Tue Nov 01 13:58:59 CDT 2022 org.joda.time.Partial,607

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/11/01 13:59
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 3.0 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>0,0]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/11/01 14:00
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<=period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/11/01 14:00
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/11/01 14:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
if(period.getFieldType(i).getField(iChronology).isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+period.getFieldType(i).getField(iChronology).getName());
}
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/11/01 14:00
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.072393989591796 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>0,0]
for(int i=0;i<period.size();i++){
int value=period.getValue(i);
if(value!=0){
DurationField field=period.getFieldType(i).getField(iso);
if(field.isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+field.getName());
}
duration=FieldUtils.safeAdd(duration,FieldUtils.safeMultiply(field.getUnitMillis(),value));
}
}

Time : 22/11/01 14:00
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<=period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/11/01 14:00
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
if(period.getFieldType(i).getField(iChronology).isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+period.getFieldType(i).getField(iChronology).getName());
}
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/11/01 14:00
----------------------------------------
Success time : 22/11/01 14:03
=================================================
Project : time_1	start : 22/11/01 14:03
Current failed test : org.joda.time.TestDateMidnight_Basics::testPlusMonths_int | 22/11/01 14:03
Tue Nov 01 14:03:50 CDT 2022 org.joda.time.chrono.ZonedChronology,316
Failed time : 22/11/01 14:07
=================================================
Project : time_1	start : 22/11/01 14:07
Current failed test : org.joda.time.TestDateMidnight_Basics::testPlusMonths_int | 22/11/01 14:07
Tue Nov 01 14:07:32 CDT 2022 org.joda.time.chrono.ZonedChronology,316
Failed time : 22/11/01 14:11
=================================================
Project : time_1	start : 22/11/01 14:11
Current failed test : org.joda.time.convert.TestStringConverter::testGetDurationMillis_Object1 | 22/11/01 14:11
Tue Nov 01 14:11:16 CDT 2022 org.joda.time.convert.StringConverter,117
Failed time : 22/11/01 14:22
=================================================
Project : time_1	start : 22/11/01 14:22
Current failed test : org.joda.time.convert.TestStringConverter::testGetDurationMillis_Object1 | 22/11/01 14:22
Tue Nov 01 14:22:25 CDT 2022 org.joda.time.convert.StringConverter,117
Failed time : 22/11/01 14:33
=================================================
Project : time_1	start : 22/11/01 14:33
Current failed test : org.joda.time.TestDateMidnight_Basics::testToString_String | 22/11/01 14:33
Tue Nov 01 14:33:56 CDT 2022 org.joda.time.format.DateTimeFormat,602
Failed time : 22/11/01 14:39
=================================================
Project : time_1	start : 22/11/01 14:39
Current failed test : org.joda.time.TestDateMidnight_Basics::testToString_String | 22/11/01 14:39
Tue Nov 01 14:39:25 CDT 2022 org.joda.time.format.DateTimeFormat,602
Failed time : 22/11/01 14:44
=================================================
Project : time_1	start : 22/11/01 14:44
Current failed test : org.joda.time.TestDateMidnight_Basics::testToString_String | 22/11/01 14:44
Tue Nov 01 14:44:48 CDT 2022 org.joda.time.format.DateTimeFormat,603
Failed time : 22/11/01 14:52
=================================================
Project : time_1	start : 22/11/01 14:52
Current failed test : org.joda.time.TestDateMidnight_Basics::testToString_String | 22/11/01 14:52
Tue Nov 01 14:52:57 CDT 2022 org.joda.time.format.DateTimeFormat,603
Failed time : 22/11/01 15:01
=================================================
Project : time_1	start : 22/11/01 15:01
Current failed test : org.joda.time.TestBasePartial::testSetMethods | 22/11/01 15:01
Tue Nov 01 15:01:32 CDT 2022 org.joda.time.field.BaseDateTimeField,589
Failed time : 22/11/01 15:07
=================================================
Project : time_1	start : 22/11/01 15:07
Current failed test : org.joda.time.TestBasePartial::testSetMethods | 22/11/01 15:07
Tue Nov 01 15:07:16 CDT 2022 org.joda.time.field.BaseDateTimeField,589
Failed time : 22/11/01 15:12
=================================================
Project : time_1	start : 22/11/01 15:12
Current failed test : org.joda.time.format.TestISODateTimeFormat_Fields::testForFields_ordinalBased_D | 22/11/01 15:12
Tue Nov 01 15:13:00 CDT 2022 org.joda.time.format.ISODateTimeFormat,166
Failed time : 22/11/01 15:30
=================================================
Project : time_1	start : 22/11/01 15:30
Current failed test : org.joda.time.format.TestISODateTimeFormat_Fields::testForFields_ordinalBased_D | 22/11/01 15:30
Tue Nov 01 15:30:15 CDT 2022 org.joda.time.format.ISODateTimeFormat,166
Failed time : 22/11/01 15:47
=================================================
Project : time_1	start : 22/11/01 15:47
Current failed test : org.joda.time.TestDays::testFactory_parseDays_String | 22/11/01 15:47
Tue Nov 01 15:48:06 CDT 2022 org.joda.time.format.PeriodFormatterBuilder,1254
Failed time : 22/11/01 16:15
=================================================
Project : time_1	start : 22/11/01 16:15
Current failed test : org.joda.time.TestDays::testFactory_parseDays_String | 22/11/01 16:15
Tue Nov 01 16:15:18 CDT 2022 org.joda.time.format.PeriodFormatterBuilder,1254
Failed time : 22/11/01 16:42
=================================================
Project : time_1	start : 22/11/01 16:42
Current failed test : org.joda.time.TestDateMidnight_Basics::testWithDurationAdded_RP_int | 22/11/01 16:42
Tue Nov 01 16:42:57 CDT 2022 org.joda.time.chrono.BaseChronology,302

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=period.size();i<isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/11/01 16:47
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.4931000656296214 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>0,0]
for(int i=0,isize=size();i<isize;i++){
if(getValue(i)!=other.getValue(i)||getFieldType(i)!=other.getFieldType(i)){
return false;
}
}

Time : 22/11/01 16:48
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<=isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/11/01 16:48
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/11/01 16:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=period.size();i<isize;i++){
int value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/11/01 16:52
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.0263005524428803 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>0,0]
for(int i=0;i<period.size();i++){
int value=period.getValue(i);
if(value!=0){
DurationField field=period.getFieldType(i).getField(iso);
if(field.isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+field.getName());
}
duration=FieldUtils.safeAdd(duration,FieldUtils.safeMultiply(field.getUnitMillis(),value));
}
}

Time : 22/11/01 16:52
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<=isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/11/01 16:52
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<isize;i++){
int value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/11/01 16:52
----------------------------------------
Success time : 22/11/01 16:54
=================================================
Project : time_1	start : 22/11/01 16:54
Current failed test : org.joda.time.TestDateMidnight_Basics::testWithDurationAdded_RP_int | 22/11/01 16:54
Tue Nov 01 16:55:04 CDT 2022 org.joda.time.chrono.BaseChronology,302

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=period.size();i<isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/11/01 17:00
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.4931000656296214 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>0,0]
for(int i=0,isize=size();i<isize;i++){
if(getValue(i)!=other.getValue(i)||getFieldType(i)!=other.getFieldType(i)){
return false;
}
}

Time : 22/11/01 17:00
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<=isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/11/01 17:00
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/11/01 17:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=period.size();i<isize;i++){
int value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/11/01 17:04
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.0263005524428803 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>0,0]
for(int i=0;i<period.size();i++){
int value=period.getValue(i);
if(value!=0){
DurationField field=period.getFieldType(i).getField(iso);
if(field.isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+field.getName());
}
duration=FieldUtils.safeAdd(duration,FieldUtils.safeMultiply(field.getUnitMillis(),value));
}
}

Time : 22/11/01 17:04
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<=isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/11/01 17:04
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<isize;i++){
int value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/11/01 17:04
----------------------------------------
Success time : 22/11/01 17:07
=================================================
Project : time_1	start : 22/11/01 17:07
Current failed test : org.joda.time.format.TestDateTimeFormat::testFormat_year_twoDigit | 22/11/01 17:07
Tue Nov 01 17:07:30 CDT 2022 org.joda.time.format.DateTimeFormatterBuilder,1585

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'||c=='+'){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/11/01 17:15
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.4218801182216316 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>0,0]
if(c=='-'||c=='+'){
expectedPos++;
}

Time : 22/11/01 17:15
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(length==-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/11/01 17:15
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(c=='-'||c=='+'){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/11/01 17:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length!=-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/11/01 17:20
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.036706691099445 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>0,0]
for(int j=length;--j>=0;){
if(j!=i&&converters[j].getSupportedType().isAssignableFrom(supportedType)){
set=set.remove(j,null);
converters=set.iConverters;
length=converters.length;
i=length-1;
}
}

Time : 22/11/01 17:20
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(length==-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/11/01 17:20
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(length!=-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/11/01 17:20
----------------------------------------
Success time : 22/11/01 17:21
=================================================
Project : time_1	start : 22/11/01 17:21
Current failed test : org.joda.time.format.TestDateTimeFormat::testFormat_year_twoDigit | 22/11/01 17:21
Tue Nov 01 17:21:48 CDT 2022 org.joda.time.format.DateTimeFormatterBuilder,1585

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'||c=='+'){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/11/01 17:30
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.4218801182216316 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>0,0]
if(c=='-'||c=='+'){
expectedPos++;
}

Time : 22/11/01 17:30
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(length==-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/11/01 17:30
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(c=='-'||c=='+'){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/11/01 17:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length!=-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/11/01 17:35
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.036706691099445 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>0,0]
for(int j=length;--j>=0;){
if(j!=i&&converters[j].getSupportedType().isAssignableFrom(supportedType)){
set=set.remove(j,null);
converters=set.iConverters;
length=converters.length;
i=length-1;
}
}

Time : 22/11/01 17:35
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(length==-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/11/01 17:35
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(length!=-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/11/01 17:35
----------------------------------------
Success time : 22/11/01 17:36
=================================================
Project : time_1	start : 22/11/01 17:36
Current failed test : org.joda.time.TestDateTimeZone::testForOffsetHours_int | 22/11/01 17:36
Tue Nov 01 17:36:53 CDT 2022 org.joda.time.format.DateTimeFormatterBuilder,2379
Failed time : 22/11/01 17:48
=================================================
Project : time_1	start : 22/11/01 17:48
Current failed test : org.joda.time.TestDateTimeZone::testForOffsetHours_int | 22/11/01 17:48
Tue Nov 01 17:48:38 CDT 2022 org.joda.time.format.DateTimeFormatterBuilder,2379
Failed time : 22/11/01 18:00
=================================================
Project : time_1	start : 22/11/01 18:00
Current failed test : org.joda.time.TestBaseSingleFieldPeriod::testToMutablePeriod | 22/11/01 18:00
Tue Nov 01 18:00:18 CDT 2022 org.joda.time.base.BasePeriod,583
Failed time : 22/11/01 18:05
=================================================
Project : time_1	start : 22/11/01 18:05
Current failed test : org.joda.time.TestBaseSingleFieldPeriod::testToMutablePeriod | 22/11/01 18:05
Tue Nov 01 18:05:31 CDT 2022 org.joda.time.base.BasePeriod,583
Failed time : 22/11/01 18:10
=================================================
Project : time_1	start : 22/11/01 18:10
Current failed test : org.joda.time.TestMutableInterval_Updates::testSePeriodAfterStart_RI2 | 22/11/01 18:10
Tue Nov 01 18:10:32 CDT 2022 org.joda.time.chrono.BaseChronology,278
Failed time : 22/11/01 18:16
=================================================
Project : time_1	start : 22/11/01 18:16
Current failed test : org.joda.time.TestMutableInterval_Updates::testSePeriodAfterStart_RI2 | 22/11/01 18:16
Tue Nov 01 18:17:08 CDT 2022 org.joda.time.chrono.BaseChronology,278
Failed time : 22/11/01 18:23
=================================================
Project : time_1	start : 22/11/01 18:23
Current failed test : org.joda.time.TestYearMonthDay_Properties::testPropertyAddMonth | 22/11/01 18:23
Tue Nov 01 18:23:29 CDT 2022 org.joda.time.chrono.BasicMonthOfYearDateTimeField,218

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=partial.size();i<isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/11/01 18:23
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.9596530023081282 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>0,0]
for(int i=0,isize=partial.size();i<isize;i++){
instant=partial.getFieldType(i).getField(this).set(instant,values[i]);
}

Time : 22/11/01 18:24
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<=isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/11/01 18:24
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/11/01 18:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=partial.size();i<values.length;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/11/01 18:25
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.4193667619628192 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>0,0]
long end=interval.getEndMillis();
int[] values=chrono.get(writablePeriod,start,end);
for(int i=0;i<values.length;i++){
writablePeriod.setValue(i,values[i]);
}

Time : 22/11/01 18:26
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<=isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/11/01 18:26
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<values.length;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/11/01 18:26
----------------------------------------
Success time : 22/11/01 18:28
=================================================
Project : time_1	start : 22/11/01 18:28
Current failed test : org.joda.time.TestYearMonthDay_Properties::testPropertyAddMonth | 22/11/01 18:28
Tue Nov 01 18:28:17 CDT 2022 org.joda.time.chrono.BasicMonthOfYearDateTimeField,218

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=partial.size();i<isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/11/01 18:28
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.9596530023081282 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>0,0]
for(int i=0,isize=partial.size();i<isize;i++){
instant=partial.getFieldType(i).getField(this).set(instant,values[i]);
}

Time : 22/11/01 18:28
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<=isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/11/01 18:28
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/11/01 18:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=partial.size();i<values.length;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/11/01 18:30
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.4193667619628192 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>0,0]
long end=interval.getEndMillis();
int[] values=chrono.get(writablePeriod,start,end);
for(int i=0;i<values.length;i++){
writablePeriod.setValue(i,values[i]);
}

Time : 22/11/01 18:30
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<=isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/11/01 18:30
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<values.length;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/11/01 18:30
----------------------------------------
Success time : 22/11/01 18:32
=================================================
Project : time_1	start : 22/11/01 18:32
Current failed test : org.joda.time.TestSeconds::testFactory_parseSeconds_String | 22/11/01 18:32
Tue Nov 01 18:33:00 CDT 2022 org.joda.time.format.PeriodFormatterBuilder,1278

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c<'0'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c<'0'&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 18:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 18:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 18:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 18:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 18:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 18:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 18:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 18:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 18:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 18:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 18:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 18:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 18:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 18:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'||c=='+'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&c=='+'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'&&c=='+'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(c=='-'||c=='+')){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position);
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if((c>='.'||c==',')&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if(c<'0'||c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if(c<'0'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if((c>='.'||c==',')&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if(c<'0'&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==position&&iRejectSignedValues)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==position&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType>position&&(iFieldType==SECONDS_MILLIS&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType>position&&(iFieldType==position&&iRejectSignedValues)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType>position&&(iFieldType==position&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 18:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iRejectSignedValues&&position==iFieldType&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(position<0){
return position;
}
if(iRejectSignedValues&&position==iFieldType&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType=='s')){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType=='S'||iFieldType=='s')){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='P'||c=='p'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='P'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&c=='p'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='P'&&c=='p'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:04
----------------------------------------
Failed time : 22/11/01 19:05
=================================================
Project : time_1	start : 22/11/01 19:05
Current failed test : org.joda.time.TestSeconds::testFactory_parseSeconds_String | 22/11/01 19:05
Tue Nov 01 19:05:50 CDT 2022 org.joda.time.format.PeriodFormatterBuilder,1278

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c<'0'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c<'0'&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 19:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 19:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 19:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 19:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 19:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 19:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 19:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 19:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 19:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 19:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 19:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 19:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 19:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/11/01 19:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'||c=='+'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&c=='+'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'&&c=='+'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(c=='-'||c=='+')){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position);
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if((c>='.'||c==',')&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if(c<'0'||c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if(c<'0'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if((c>='.'||c==',')&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if(c<'0'&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==position&&iRejectSignedValues)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==position&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType>position&&(iFieldType==SECONDS_MILLIS&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType>position&&(iFieldType==position&&iRejectSignedValues)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType>position&&(iFieldType==position&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iRejectSignedValues&&position==iFieldType&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(position<0){
return position;
}
if(iRejectSignedValues&&position==iFieldType&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType=='s')){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType=='S'||iFieldType=='s')){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='P'||c=='p'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='P'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&c=='p'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='P'&&c=='p'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/11/01 19:37
----------------------------------------
Failed time : 22/11/01 19:38
=================================================
Project : time_1	start : 22/11/01 19:38
Current failed test : org.joda.time.TestInterval_Basics::testWithPeriodAfterStart1 | 22/11/01 19:38
Tue Nov 01 19:38:25 CDT 2022 org.joda.time.chrono.CopticChronology,223
Failed time : 22/11/01 19:45
=================================================
Project : time_1	start : 22/11/01 19:45
Current failed test : org.joda.time.TestInterval_Basics::testWithPeriodAfterStart1 | 22/11/01 19:45
Tue Nov 01 19:45:18 CDT 2022 org.joda.time.chrono.CopticChronology,223
Failed time : 22/11/01 19:51
=================================================
Project : time_1	start : 22/11/18 04:30
Current failed test : org.joda.time.TestDateMidnight_Basics::testToString_String | 22/11/18 04:30
Fri Nov 18 04:30:44 CST 2022 org.joda.time.tz.DateTimeZoneBuilder,187
Failed time : 22/11/18 04:30
=================================================
Project : time_1	start : 22/11/18 04:30
Current failed test : org.joda.time.TestDateMidnight_Basics::testToString_String | 22/11/18 04:30
Fri Nov 18 04:30:55 CST 2022 org.joda.time.tz.DateTimeZoneBuilder,187
Failed time : 22/11/18 04:30
=================================================
Project : time_1	start : 22/11/18 04:31
Current failed test : org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldYear | 22/11/18 04:31
Fri Nov 18 04:31:06 CST 2022 org.joda.time.chrono.GregorianChronology,209
Failed time : 22/11/18 04:31
=================================================
Project : time_1	start : 22/11/18 04:31
Current failed test : org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldYear | 22/11/18 04:31
Fri Nov 18 04:31:37 CST 2022 org.joda.time.chrono.GregorianChronology,209
Failed time : 22/11/18 04:32
=================================================
Project : time_1	start : 22/11/18 04:32
Current failed test : org.joda.time.TestChronology::testTest | 22/11/18 04:32
Fri Nov 18 04:32:08 CST 2022 org.joda.time.format.FormatUtils,77
Failed time : 22/11/18 04:33
=================================================
Project : time_1	start : 22/11/18 04:33
Current failed test : org.joda.time.TestChronology::testTest | 22/11/18 04:33
Fri Nov 18 04:33:26 CST 2022 org.joda.time.format.FormatUtils,77
Failed time : 22/11/18 04:34
=================================================
Project : time_1	start : 22/11/18 04:34
Current failed test : org.joda.time.TestDuration_Constructors::testConstructor_Object4 | 22/11/18 04:34
Fri Nov 18 04:34:44 CST 2022 org.joda.time.base.BaseDuration,91
Failed time : 22/11/18 04:35
=================================================
Project : time_1	start : 22/11/18 04:35
Current failed test : org.joda.time.TestDuration_Constructors::testConstructor_Object4 | 22/11/18 04:35
Fri Nov 18 04:35:15 CST 2022 org.joda.time.base.BaseDuration,91
Failed time : 22/11/18 04:35
=================================================
Project : time_1	start : 22/11/18 04:35
Current failed test : org.joda.time.TestDateMidnight_Basics::testMinusWeeks_int | 22/11/18 04:35
Fri Nov 18 04:35:45 CST 2022 org.joda.time.DurationField,212

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
return add(instant,-value);

Time : 22/11/18 04:37
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.9396184772996343 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/DurationField.java=>0,0]
if(value==Long.MIN_VALUE){
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return add(instant,-value);

Time : 22/11/18 04:37
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/DurationField.java=>209,212]
if(value==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
return add(instant,+value);

Time : 22/11/18 04:37
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/DurationField.java=>209,212]
if(value==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
return add(instant,-value);

Time : 22/11/18 04:37
----------------------------------------
Success time : 22/11/18 04:38
=================================================
Project : time_1	start : 22/11/18 04:38
Current failed test : org.joda.time.TestDateMidnight_Basics::testMinusWeeks_int | 22/11/18 04:38
Fri Nov 18 04:39:05 CST 2022 org.joda.time.DurationField,212

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
return add(instant,-value);

Time : 22/11/18 04:40
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.9396184772996343 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/DurationField.java=>0,0]
if(value==Long.MIN_VALUE){
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return add(instant,-value);

Time : 22/11/18 04:40
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/DurationField.java=>209,212]
if(value==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
return add(instant,+value);

Time : 22/11/18 04:40
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/DurationField.java=>209,212]
if(value==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
return add(instant,-value);

Time : 22/11/18 04:40
----------------------------------------
Success time : 22/11/18 04:42
=================================================
Project : time_1	start : 22/11/18 04:42
Current failed test : org.joda.time.TestDateMidnight_Basics::testMinus_RD | 22/11/18 04:42
Fri Nov 18 04:42:24 CST 2022 org.joda.time.field.FieldUtils,141
Failed time : 22/11/18 04:43
=================================================
Project : time_1	start : 22/11/18 04:43
Current failed test : org.joda.time.TestDateMidnight_Basics::testMinus_RD | 22/11/18 04:43
Fri Nov 18 04:43:20 CST 2022 org.joda.time.field.FieldUtils,141
Failed time : 22/11/18 04:44
=================================================
Project : time_1	start : 22/11/18 04:44
Current failed test : org.joda.time.TestPeriod_Basics::testMinusFields | 22/11/18 04:44
Fri Nov 18 04:44:16 CST 2022 org.joda.time.Period,1320
Failed time : 22/11/18 04:44
=================================================
Project : time_1	start : 22/11/18 04:44
Current failed test : org.joda.time.TestPeriod_Basics::testMinusFields | 22/11/18 04:44
Fri Nov 18 04:44:23 CST 2022 org.joda.time.Period,1320
Failed time : 22/11/18 04:44
=================================================
Project : time_1	start : 22/11/18 04:44
Current failed test : org.joda.time.tz.TestBuilder::testSerialization | 22/11/18 04:44
Fri Nov 18 04:44:31 CST 2022 org.joda.time.tz.DateTimeZoneBuilder,1555
Failed time : 22/11/18 04:46
=================================================
Project : time_1	start : 22/11/18 04:46
Current failed test : org.joda.time.tz.TestBuilder::testSerialization | 22/11/18 04:46
Fri Nov 18 04:46:15 CST 2022 org.joda.time.tz.DateTimeZoneBuilder,1555
Failed time : 22/11/18 04:47
=================================================
Project : time_1	start : 22/11/18 04:47
Current failed test : org.joda.time.TestDateMidnight_Basics::testWithers | 22/11/18 04:47
Fri Nov 18 04:47:59 CST 2022 org.joda.time.chrono.GJEraDateTimeField,86
Failed time : 22/11/18 04:49
=================================================
Project : time_1	start : 22/11/18 04:49
Current failed test : org.joda.time.TestDateMidnight_Basics::testWithers | 22/11/18 04:49
Fri Nov 18 04:49:50 CST 2022 org.joda.time.chrono.GJEraDateTimeField,86
Failed time : 22/11/18 04:51
=================================================
Project : time_1	start : 22/11/18 04:51
Current failed test : org.joda.time.TestPeriod_Basics::testMinusFields | 22/11/18 04:51
Fri Nov 18 04:51:41 CST 2022 org.joda.time.Period,1281
Failed time : 22/11/18 04:51
=================================================
Project : time_1	start : 22/11/18 04:51
Current failed test : org.joda.time.TestPeriod_Basics::testMinusFields | 22/11/18 04:51
Fri Nov 18 04:51:48 CST 2022 org.joda.time.Period,1281
Failed time : 22/11/18 04:51
=================================================
Project : time_1	start : 22/11/18 04:51
Current failed test : org.joda.time.TestDuration_Constructors::testConstructor_long_long1 | 22/11/18 04:51
Fri Nov 18 04:51:56 CST 2022 org.joda.time.base.BaseDuration,74
Failed time : 22/11/18 04:52
=================================================
Project : time_1	start : 22/11/18 04:52
Current failed test : org.joda.time.TestDuration_Constructors::testConstructor_long_long1 | 22/11/18 04:52
Fri Nov 18 04:52:16 CST 2022 org.joda.time.base.BaseDuration,74
Failed time : 22/11/18 04:52
=================================================
Project : time_1	start : 22/11/18 04:52
Current failed test : org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI4 | 22/11/18 04:52
Fri Nov 18 04:52:36 CST 2022 org.joda.time.chrono.BasicYearDateTimeField,90
Failed time : 22/11/18 04:52
=================================================
Project : time_1	start : 22/11/18 04:52
Current failed test : org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI4 | 22/11/18 04:52
Fri Nov 18 04:52:50 CST 2022 org.joda.time.chrono.BasicYearDateTimeField,90
Failed time : 22/11/18 04:52
=================================================
Project : time_1	start : 22/11/18 04:52
Current failed test : org.joda.time.convert.TestConverterSet::testBigHashtable | 22/11/18 04:52
Fri Nov 18 04:53:05 CST 2022 org.joda.time.convert.ConverterSet,100

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=length;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/11/18 04:54
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.353152939456997 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>0,0]
for(int i=length;--i>=0;){
converter=converters[i];
Class<?> supportedType=converter.getSupportedType();
if(supportedType==type){
return converter;
}
if(supportedType==null||(type!=null&&!supportedType.isAssignableFrom(type))){
set=set.remove(i,null);
converters=set.iConverters;
length=converters.length;
}
}

Time : 22/11/18 04:54
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=0;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/11/18 04:54
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=length;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/11/18 04:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=newLength;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/11/18 04:55
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.1336721717828449 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>0,0]
for(int i=limit;i>position;i--){
String match=text.substring(position,i);
if(validValues.contains(match)){
bucket.saveField(iFieldType,match,locale);
return i;
}
}

Time : 22/11/18 04:55
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=0;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/11/18 04:55
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=newLength;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/11/18 04:55
----------------------------------------
Success time : 22/11/18 04:55
=================================================
Project : time_1	start : 22/11/18 04:55
Current failed test : org.joda.time.convert.TestConverterSet::testBigHashtable | 22/11/18 04:55
Fri Nov 18 04:55:48 CST 2022 org.joda.time.convert.ConverterSet,100

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=length;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/11/18 04:57
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.353152939456997 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>0,0]
for(int i=length;--i>=0;){
converter=converters[i];
Class<?> supportedType=converter.getSupportedType();
if(supportedType==type){
return converter;
}
if(supportedType==null||(type!=null&&!supportedType.isAssignableFrom(type))){
set=set.remove(i,null);
converters=set.iConverters;
length=converters.length;
}
}

Time : 22/11/18 04:57
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=0;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/11/18 04:57
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=length;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/11/18 04:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=newLength;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/11/18 04:58
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.1336721717828449 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>0,0]
for(int i=limit;i>position;i--){
String match=text.substring(position,i);
if(validValues.contains(match)){
bucket.saveField(iFieldType,match,locale);
return i;
}
}

Time : 22/11/18 04:58
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=0;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/11/18 04:58
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=newLength;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/11/18 04:58
----------------------------------------
Success time : 22/11/18 04:58
=================================================
Project : time_1	start : 22/12/04 19:45
Current failed test : org.joda.time.TestDuration_Basics::testToPeriod | 22/12/04 19:45
Sun Dec 04 19:45:43 CST 2022 Sun Dec 04 19:45:43 CST 2022 : org.joda.time.PeriodType,112=>Find no block
Failed time : 22/12/04 19:45
=================================================
Project : time_1	start : 22/12/04 19:45
Current failed test : org.joda.time.TestDuration_Basics::testToPeriod | 22/12/04 19:45
Sun Dec 04 19:46:05 CST 2022 Sun Dec 04 19:46:05 CST 2022 : org.joda.time.PeriodType,112=>Find no block
Failed time : 22/12/04 19:46
=================================================
Project : time_1	start : 22/12/04 19:46
Current failed test : org.joda.time.chrono.TestIslamicChronology::testSampleDateWithZone | 22/12/04 19:46
Sun Dec 04 19:46:30 CST 2022 org.joda.time.chrono.IslamicChronology,318
Failed time : 22/12/04 19:46
=================================================
Project : time_1	start : 22/12/04 19:46
Current failed test : org.joda.time.chrono.TestIslamicChronology::testSampleDateWithZone | 22/12/04 19:46
Sun Dec 04 19:46:53 CST 2022 org.joda.time.chrono.IslamicChronology,318
Failed time : 22/12/04 19:46
=================================================
Project : time_1	start : 22/12/04 19:46
Current failed test : org.joda.time.TestPartial_Basics::testGetFormatter3 | 22/12/04 19:47
Sun Dec 04 19:47:19 CST 2022 org.joda.time.format.ISODateTimeFormat,248
Failed time : 22/12/04 20:20
=================================================
Project : time_1	start : 22/12/04 20:20
Current failed test : org.joda.time.TestPartial_Basics::testGetFormatter3 | 22/12/04 20:20
Sun Dec 04 20:20:33 CST 2022 org.joda.time.format.ISODateTimeFormat,248
Failed time : 22/12/04 21:00
=================================================
Project : time_1	start : 22/12/04 21:00
Current failed test : org.joda.time.TestPeriod_Constructors::testFactoryFieldDifference1 | 22/12/04 21:00
Sun Dec 04 21:00:41 CST 2022 org.joda.time.Period,270

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i>=0&&types.length==0){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:01
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.4868358797335683 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>0,0]
if(types==null||types.length==0){
throw new IllegalArgumentException("Types array must not be null or empty");
}

Time : 22/12/04 21:02
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>270,272]
if(i>=0&&types[i-1]==types[i]){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:02
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>270,272]
if(i>=0&&types.length==0){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i>=0&&isize==-1){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:02
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.07623084055893 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>0,0]
if(i>(negative?1:0)&&str.charAt(i)=='.'&&dot==-1){
dot=i;
}else {
throw new IllegalArgumentException("Invalid format: \""+original);
}

Time : 22/12/04 21:02
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>270,272]
if(i>=0&&types[i-1]==types[i]){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:02
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>270,272]
if(i>=0&&isize==-1){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i>=isize&&types[i-1]==types[i]){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:03
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.4682545289074551 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>0,0]
if(parsePos>=text.length()||(i+1)>=length||parsers[i+1]==null){
return parsePos;
}

Time : 22/12/04 21:04
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>270,272]
if(i>=0&&types[i-1]==types[i]){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:04
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>270,272]
if(i>=isize&&types[i-1]==types[i]){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:04
----------------------------------------
Success time : 22/12/04 21:05
=================================================
Project : time_1	start : 22/12/04 21:05
Current failed test : org.joda.time.TestPeriod_Constructors::testFactoryFieldDifference1 | 22/12/04 21:05
Sun Dec 04 21:05:30 CST 2022 org.joda.time.Period,270

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i>=0&&types.length==0){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:06
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.4868358797335683 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>0,0]
if(types==null||types.length==0){
throw new IllegalArgumentException("Types array must not be null or empty");
}

Time : 22/12/04 21:06
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>270,272]
if(i>=0&&types[i-1]==types[i]){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:06
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>270,272]
if(i>=0&&types.length==0){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i>=0&&isize==-1){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:07
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.07623084055893 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>0,0]
if(i>(negative?1:0)&&str.charAt(i)=='.'&&dot==-1){
dot=i;
}else {
throw new IllegalArgumentException("Invalid format: \""+original);
}

Time : 22/12/04 21:07
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>270,272]
if(i>=0&&types[i-1]==types[i]){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:07
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>270,272]
if(i>=0&&isize==-1){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i>=isize&&types[i-1]==types[i]){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:08
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.4682545289074551 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>0,0]
if(parsePos>=text.length()||(i+1)>=length||parsers[i+1]==null){
return parsePos;
}

Time : 22/12/04 21:09
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>270,272]
if(i>=0&&types[i-1]==types[i]){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:09
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Period.java=>270,272]
if(i>=isize&&types[i-1]==types[i]){
throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
}

Time : 22/12/04 21:09
----------------------------------------
Success time : 22/12/04 21:09
=================================================
Project : time_1	start : 22/12/04 21:10
Current failed test : org.joda.time.TestDateMidnight_Constructors::testParse_noFormatter | 22/12/04 21:10
Sun Dec 04 21:10:25 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,1303
Failed time : 22/12/04 21:11
=================================================
Project : time_1	start : 22/12/04 21:11
Current failed test : org.joda.time.TestDateMidnight_Constructors::testParse_noFormatter | 22/12/04 21:11
Sun Dec 04 21:11:27 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,1303
Failed time : 22/12/04 21:12
=================================================
Project : time_1	start : 22/12/04 21:12
Current failed test : org.joda.time.TestInterval_Basics::testWithPeriodAfterStart1 | 22/12/04 21:12
Sun Dec 04 21:12:31 CST 2022 org.joda.time.chrono.CopticChronology,223
Failed time : 22/12/04 21:29
=================================================
Project : time_1	start : 22/12/04 21:29
Current failed test : org.joda.time.TestInterval_Basics::testWithPeriodAfterStart1 | 22/12/04 21:29
Sun Dec 04 21:29:55 CST 2022 org.joda.time.chrono.CopticChronology,223
Failed time : 22/12/04 21:48
=================================================
Project : time_1	start : 22/12/04 21:48
Current failed test : org.joda.time.TestInterval_Constructors::testConstructor_Object_Chronology1 | 22/12/04 21:48
Sun Dec 04 21:49:09 CST 2022 org.joda.time.convert.ConverterSet,152
Timeout time : 22/12/05 02:49
=================================================
Project : time_1	start : 22/12/05 02:49
Current failed test : org.joda.time.TestInterval_Constructors::testConstructor_Object_Chronology1 | 22/12/05 02:49
Mon Dec 05 02:49:29 CST 2022 org.joda.time.convert.ConverterSet,152
Failed time : 22/12/05 06:21
=================================================
Project : time_1	start : 22/12/05 06:21
Current failed test : org.joda.time.format.TestDateTimeFormat::testFormatParse_zoneId_noColon_parseZ | 22/12/05 06:21
Mon Dec 05 06:21:14 CST 2022 org.joda.time.format.DateTimeFormat,558
Failed time : 22/12/05 06:21
=================================================
Project : time_1	start : 22/12/05 06:21
Current failed test : org.joda.time.format.TestDateTimeFormat::testFormatParse_zoneId_noColon_parseZ | 22/12/05 06:21
Mon Dec 05 06:21:41 CST 2022 org.joda.time.format.DateTimeFormat,558
Failed time : 22/12/05 06:22
=================================================
Project : time_1	start : 22/12/05 06:22
Current failed test : org.joda.time.TestDateMidnight_Properties::testPropertyGetDifferenceMonthOfYear | 22/12/05 06:22
Mon Dec 05 06:22:09 CST 2022 Mon Dec 05 06:22:09 CST 2022 : org.joda.time.chrono.ZonedChronology,510=>Find no block
Failed time : 22/12/05 06:22
=================================================
Project : time_1	start : 22/12/05 06:22
Current failed test : org.joda.time.TestDateMidnight_Properties::testPropertyGetDifferenceMonthOfYear | 22/12/05 06:22
Mon Dec 05 06:22:17 CST 2022 Mon Dec 05 06:22:17 CST 2022 : org.joda.time.chrono.ZonedChronology,510=>Find no block
Failed time : 22/12/05 06:22
=================================================
Project : time_1	start : 22/12/05 06:22
Current failed test : org.joda.time.TestInstant_Basics::testWithDurationAdded_RD_int | 22/12/05 06:22
Mon Dec 05 06:22:25 CST 2022 org.joda.time.Instant,171
Failed time : 22/12/05 06:22
=================================================
Project : time_1	start : 22/12/05 06:22
Current failed test : org.joda.time.TestInstant_Basics::testWithDurationAdded_RD_int | 22/12/05 06:22
Mon Dec 05 06:22:33 CST 2022 org.joda.time.Instant,171
Failed time : 22/12/05 06:22
=================================================
Project : time_1	start : 22/12/05 06:22
Current failed test : org.joda.time.TestMonthDay_Basics::testPlusMonths_int_negativeFromLeap | 22/12/05 06:22
Mon Dec 05 06:22:41 CST 2022 org.joda.time.chrono.BasicMonthOfYearDateTimeField,210

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldIndex==0){
int curMonth0=partial.getValue(0)-1;
int newMonth=((curMonth0+(valueToAdd%12))%12)+1;
return set(partial,0,values,newMonth);
}

Time : 22/12/05 06:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(partial.size()>0&&partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())&&fieldIndex==0){
int curMonth0=partial.getValue(0)-1;
int newMonth=((curMonth0+(valueToAdd%12))%12)+1;
return set(partial,0,values,newMonth);
}

Time : 22/12/05 06:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(partial.size()>0&&partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())&&fieldIndex!=-1){
int curMonth0=partial.getValue(0)-1;
int newMonth=((curMonth0+(valueToAdd%12))%12)+1;
return set(partial,0,values,newMonth);
}

Time : 22/12/05 06:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(partial.size()>0&&partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())&&fieldIndex!=29){
int curMonth0=partial.getValue(0)-1;
int newMonth=((curMonth0+(valueToAdd%12))%12)+1;
return set(partial,0,values,newMonth);
}

Time : 22/12/05 06:25
----------------------------------------
Failed time : 22/12/05 06:25
=================================================
Project : time_1	start : 22/12/05 06:25
Current failed test : org.joda.time.TestMonthDay_Basics::testPlusMonths_int_negativeFromLeap | 22/12/05 06:25
Mon Dec 05 06:25:16 CST 2022 org.joda.time.chrono.BasicMonthOfYearDateTimeField,210

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldIndex==0){
int curMonth0=partial.getValue(0)-1;
int newMonth=((curMonth0+(valueToAdd%12))%12)+1;
return set(partial,0,values,newMonth);
}

Time : 22/12/05 06:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(partial.size()>0&&partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())&&fieldIndex==0){
int curMonth0=partial.getValue(0)-1;
int newMonth=((curMonth0+(valueToAdd%12))%12)+1;
return set(partial,0,values,newMonth);
}

Time : 22/12/05 06:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(partial.size()>0&&partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())&&fieldIndex!=-1){
int curMonth0=partial.getValue(0)-1;
int newMonth=((curMonth0+(valueToAdd%12))%12)+1;
return set(partial,0,values,newMonth);
}

Time : 22/12/05 06:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(partial.size()>0&&partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())&&fieldIndex!=29){
int curMonth0=partial.getValue(0)-1;
int newMonth=((curMonth0+(valueToAdd%12))%12)+1;
return set(partial,0,values,newMonth);
}

Time : 22/12/05 06:27
----------------------------------------
Failed time : 22/12/05 06:27
=================================================
Project : time_1	start : 22/12/05 06:27
Current failed test : org.joda.time.TestDateMidnight_Basics::testWithers | 22/12/05 06:27
Mon Dec 05 06:27:53 CST 2022 Mon Dec 05 06:27:53 CST 2022 : org.joda.time.chrono.BasicGJChronology,104=>Find no block
Failed time : 22/12/05 06:27
=================================================
Project : time_1	start : 22/12/05 06:27
Current failed test : org.joda.time.TestDateMidnight_Basics::testWithers | 22/12/05 06:27
Mon Dec 05 06:28:01 CST 2022 Mon Dec 05 06:28:01 CST 2022 : org.joda.time.chrono.BasicGJChronology,104=>Find no block
Failed time : 22/12/05 06:28
=================================================
Project : time_1	start : 22/12/05 06:28
Current failed test : org.joda.time.TestDays::testToStandardDuration | 22/12/05 06:28
Mon Dec 05 06:28:10 CST 2022 org.joda.time.Days,333
Failed time : 22/12/05 06:28
=================================================
Project : time_1	start : 22/12/05 06:28
Current failed test : org.joda.time.TestDays::testToStandardDuration | 22/12/05 06:28
Mon Dec 05 06:28:24 CST 2022 org.joda.time.Days,333
Failed time : 22/12/05 06:28
=================================================
Project : time_1	start : 22/12/05 06:28
Current failed test : org.joda.time.TestMonths::testIsLessThan | 22/12/05 06:28
Mon Dec 05 06:28:38 CST 2022 org.joda.time.Months,379
Failed time : 22/12/05 06:28
=================================================
Project : time_1	start : 22/12/05 06:28
Current failed test : org.joda.time.TestMonths::testIsLessThan | 22/12/05 06:28
Mon Dec 05 06:28:48 CST 2022 org.joda.time.Months,379
Failed time : 22/12/05 06:28
=================================================
Project : time_1	start : 22/12/05 06:28
Current failed test : org.joda.time.format.TestDateTimeFormat::testParse_pivotYear | 22/12/05 06:28
Mon Dec 05 06:28:58 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,1647
Failed time : 22/12/05 06:30
=================================================
Project : time_1	start : 22/12/05 06:30
Current failed test : org.joda.time.format.TestDateTimeFormat::testParse_pivotYear | 22/12/05 06:30
Mon Dec 05 06:30:59 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,1647
Failed time : 22/12/05 06:32
=================================================
Project : time_1	start : 22/12/05 06:32
Current failed test : org.joda.time.TestDays::testFactory_parseDays_String | 22/12/05 06:32
Mon Dec 05 06:32:56 CST 2022 org.joda.time.base.BasePeriod,421
Failed time : 22/12/05 06:34
=================================================
Project : time_1	start : 22/12/05 06:34
Current failed test : org.joda.time.TestDays::testFactory_parseDays_String | 22/12/05 06:34
Mon Dec 05 06:34:20 CST 2022 org.joda.time.base.BasePeriod,421
Failed time : 22/12/05 06:35
=================================================
Project : time_1	start : 22/12/05 06:35
Current failed test : org.joda.time.TestMonths::testPlus_Months | 22/12/05 06:35
Mon Dec 05 06:35:55 CST 2022 org.joda.time.Months,279
Failed time : 22/12/05 06:35
=================================================
Project : time_1	start : 22/12/05 06:35
Current failed test : org.joda.time.TestMonths::testPlus_Months | 22/12/05 06:35
Mon Dec 05 06:36:04 CST 2022 org.joda.time.Months,279
Failed time : 22/12/05 06:36
=================================================
Project : time_1	start : 22/12/05 06:36
Current failed test : org.joda.time.TestChronology | 22/12/05 06:36
Mon Dec 05 06:36:13 CST 2022 org.joda.time.format.DateTimeParserBucket,365
=================================================
Project : time_1	start : 22/12/05 06:36
Current failed test : org.joda.time.TestChronology | 22/12/05 06:36
Mon Dec 05 06:36:37 CST 2022 org.joda.time.format.DateTimeParserBucket,365
=================================================
Project : time_1	start : 22/12/05 06:36
Current failed test : org.joda.time.TestDateTimeUtils::testGetIntervalChronology_RInterval | 22/12/05 06:36
Mon Dec 05 06:37:01 CST 2022 org.joda.time.chrono.BuddhistChronology,181

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this==obj){
return true;
}

Time : 22/12/05 06:38
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.9999999999999998 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>0,0]
if(this==obj){
return true;
}

Time : 22/12/05 06:38
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>180,182]
if(this==obj){
return false;
}

Time : 22/12/05 06:38
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>180,182]
if(this==obj){
return true;
}

Time : 22/12/05 06:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(obj==null){
return false;
}

Time : 22/12/05 06:39
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.9486832980505138 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>0,0]
if(obj==null){
return null;
}

Time : 22/12/05 06:39
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>180,182]
if(this==obj){
return false;
}

Time : 22/12/05 06:39
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>180,182]
if(obj==null){
return false;
}

Time : 22/12/05 06:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this==null){
return false;
}

Time : 22/12/05 06:40
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.9486832980505138 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>0,0]
if(obj==null){
return null;
}

Time : 22/12/05 06:40
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>180,182]
if(this==obj){
return false;
}

Time : 22/12/05 06:40
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>180,182]
if(this==null){
return false;
}

Time : 22/12/05 06:40
----------------------------------------
Success time : 22/12/05 06:40
=================================================
Project : time_1	start : 22/12/05 06:40
Current failed test : org.joda.time.TestDateTimeUtils::testGetIntervalChronology_RInterval | 22/12/05 06:40
Mon Dec 05 06:40:57 CST 2022 org.joda.time.chrono.BuddhistChronology,181

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this==obj){
return true;
}

Time : 22/12/05 06:42
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.9999999999999998 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>0,0]
if(this==obj){
return true;
}

Time : 22/12/05 06:42
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>180,182]
if(this==obj){
return false;
}

Time : 22/12/05 06:42
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>180,182]
if(this==obj){
return true;
}

Time : 22/12/05 06:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(obj==null){
return false;
}

Time : 22/12/05 06:43
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.9486832980505138 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>0,0]
if(obj==null){
return null;
}

Time : 22/12/05 06:43
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>180,182]
if(this==obj){
return false;
}

Time : 22/12/05 06:43
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>180,182]
if(obj==null){
return false;
}

Time : 22/12/05 06:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this==null){
return false;
}

Time : 22/12/05 06:44
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.9486832980505138 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>0,0]
if(obj==null){
return null;
}

Time : 22/12/05 06:44
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>180,182]
if(this==obj){
return false;
}

Time : 22/12/05 06:44
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BuddhistChronology.java=>180,182]
if(this==null){
return false;
}

Time : 22/12/05 06:44
----------------------------------------
Success time : 22/12/05 06:44
=================================================
Project : time_1	start : 22/12/05 06:44
Current failed test : org.joda.time.TestAbstractPartial | 22/12/05 06:44
Mon Dec 05 06:44:55 CST 2022 org.joda.time.tz.ZoneInfoCompiler,469
=================================================
Project : time_1	start : 22/12/05 06:45
Current failed test : org.joda.time.TestAbstractPartial | 22/12/05 06:45
Mon Dec 05 06:45:19 CST 2022 org.joda.time.tz.ZoneInfoCompiler,469
=================================================
Project : time_1	start : 22/12/05 06:45
Current failed test : org.joda.time.TestLocalTime_Properties::testPropertyPlusNoWrapMilli | 22/12/05 06:45
Mon Dec 05 06:45:56 CST 2022 org.joda.time.LocalTime,1475
Failed time : 22/12/05 06:46
=================================================
Project : time_1	start : 22/12/05 06:46
Current failed test : org.joda.time.TestLocalTime_Properties::testPropertyPlusNoWrapMilli | 22/12/05 06:46
Mon Dec 05 06:46:42 CST 2022 org.joda.time.LocalTime,1475
Failed time : 22/12/05 06:47
=================================================
Project : time_1	start : 22/12/05 06:47
Current failed test : org.joda.time.convert.TestConverterManager::testGetPartialConverterRemovedNull | 22/12/05 06:47
Mon Dec 05 06:47:30 CST 2022 Mon Dec 05 06:47:30 CST 2022 : org.joda.time.convert.ConverterManager,253=>Find no block
Failed time : 22/12/05 06:47
=================================================
Project : time_1	start : 22/12/05 06:47
Current failed test : org.joda.time.convert.TestConverterManager::testGetPartialConverterRemovedNull | 22/12/05 06:47
Mon Dec 05 06:47:40 CST 2022 Mon Dec 05 06:47:40 CST 2022 : org.joda.time.convert.ConverterManager,253=>Find no block
Failed time : 22/12/05 06:47
=================================================
Project : time_1	start : 22/12/05 06:47
Current failed test : org.joda.time.TestDays::testFactory_parseDays_String | 22/12/05 06:47
Mon Dec 05 06:47:49 CST 2022 org.joda.time.format.PeriodFormatterBuilder,1275
Failed time : 22/12/05 07:08
=================================================
Project : time_1	start : 22/12/05 07:08
Current failed test : org.joda.time.TestDays::testFactory_parseDays_String | 22/12/05 07:08
Mon Dec 05 07:08:22 CST 2022 org.joda.time.format.PeriodFormatterBuilder,1275
Failed time : 22/12/05 07:26
=================================================
Project : time_1	start : 22/12/05 07:26
Current failed test : org.joda.time.TestChronology::testTest | 22/12/05 07:26
Mon Dec 05 07:26:44 CST 2022 org.joda.time.format.FormatUtils,77
Failed time : 22/12/05 07:27
=================================================
Project : time_1	start : 22/12/05 07:27
Current failed test : org.joda.time.TestChronology::testTest | 22/12/05 07:27
Mon Dec 05 07:28:04 CST 2022 org.joda.time.format.FormatUtils,77
Failed time : 22/12/05 07:29
=================================================
Project : time_1	start : 22/12/05 07:29
Current failed test : org.joda.time.chrono.TestGJChronology::testCutoverAddDays | 22/12/05 07:29
Mon Dec 05 07:29:24 CST 2022 org.joda.time.DateTime,831
Failed time : 22/12/05 07:29
=================================================
Project : time_1	start : 22/12/05 07:29
Current failed test : org.joda.time.chrono.TestGJChronology::testCutoverAddDays | 22/12/05 07:29
Mon Dec 05 07:29:33 CST 2022 org.joda.time.DateTime,831
Failed time : 22/12/05 07:29
=================================================
Project : time_1	start : 22/12/05 07:29
Current failed test : org.joda.time.TestLocalDateTime_Basics::testCompareTo | 22/12/05 07:29
Mon Dec 05 07:29:42 CST 2022 org.joda.time.Partial,474
Failed time : 22/12/05 07:31
=================================================
Project : time_1	start : 22/12/05 07:31
Current failed test : org.joda.time.TestLocalDateTime_Basics::testCompareTo | 22/12/05 07:31
Mon Dec 05 07:31:12 CST 2022 org.joda.time.Partial,474
Failed time : 22/12/05 07:32
=================================================
Project : time_1	start : 22/12/05 07:32
Current failed test : org.joda.time.TestPartial_Basics::testPlus_RP | 22/12/05 07:32
Mon Dec 05 07:32:44 CST 2022 org.joda.time.Partial,607

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/12/05 07:33
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 3.0 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>0,0]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/12/05 07:33
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<=period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/12/05 07:33
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/12/05 07:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
if(period.getFieldType(i).getField(iChronology).isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+period.getFieldType(i).getField(iChronology).getName());
}
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/12/05 07:33
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.072393989591796 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>0,0]
for(int i=0;i<period.size();i++){
int value=period.getValue(i);
if(value!=0){
DurationField field=period.getFieldType(i).getField(iso);
if(field.isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+field.getName());
}
duration=FieldUtils.safeAdd(duration,FieldUtils.safeMultiply(field.getUnitMillis(),value));
}
}

Time : 22/12/05 07:33
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<=period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/12/05 07:33
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
if(period.getFieldType(i).getField(iChronology).isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+period.getFieldType(i).getField(iChronology).getName());
}
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/12/05 07:33
----------------------------------------
Success time : 22/12/05 07:35
=================================================
Project : time_1	start : 22/12/05 07:35
Current failed test : org.joda.time.TestPartial_Basics::testPlus_RP | 22/12/05 07:35
Mon Dec 05 07:35:23 CST 2022 org.joda.time.Partial,607

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/12/05 07:35
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 3.0 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>0,0]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/12/05 07:36
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<=period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/12/05 07:36
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/12/05 07:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
if(period.getFieldType(i).getField(iChronology).isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+period.getFieldType(i).getField(iChronology).getName());
}
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/12/05 07:36
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.072393989591796 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>0,0]
for(int i=0;i<period.size();i++){
int value=period.getValue(i);
if(value!=0){
DurationField field=period.getFieldType(i).getField(iso);
if(field.isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+field.getName());
}
duration=FieldUtils.safeAdd(duration,FieldUtils.safeMultiply(field.getUnitMillis(),value));
}
}

Time : 22/12/05 07:36
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<=period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/12/05 07:36
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/Partial.java=>607,614]
for(int i=0;i<period.size();i++){
DurationFieldType fieldType=period.getFieldType(i);
int index=indexOf(fieldType);
if(index>=0){
if(period.getFieldType(i).getField(iChronology).isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+period.getFieldType(i).getField(iChronology).getName());
}
newValues=getField(index).add(this,index,newValues,FieldUtils.safeMultiply(period.getValue(i),scalar));
}
}

Time : 22/12/05 07:36
----------------------------------------
Success time : 22/12/05 07:37
=================================================
Project : time_1	start : 22/12/05 07:37
Current failed test : org.joda.time.TestSeconds::testToStandardDuration | 22/12/05 07:38
Mon Dec 05 07:38:06 CST 2022 org.joda.time.Seconds,313
Failed time : 22/12/05 07:38
=================================================
Project : time_1	start : 22/12/05 07:38
Current failed test : org.joda.time.TestSeconds::testToStandardDuration | 22/12/05 07:38
Mon Dec 05 07:38:20 CST 2022 org.joda.time.Seconds,313
Failed time : 22/12/05 07:38
=================================================
Project : time_1	start : 22/12/05 07:38
Current failed test : org.joda.time.TestInterval_Basics::testToPeriod | 22/12/05 07:38
Mon Dec 05 07:38:35 CST 2022 org.joda.time.chrono.BasicFixedMonthChronology,137
Failed time : 22/12/05 07:40
=================================================
Project : time_1	start : 22/12/05 07:40
Current failed test : org.joda.time.TestInterval_Basics::testToPeriod | 22/12/05 07:40
Mon Dec 05 07:40:33 CST 2022 org.joda.time.chrono.BasicFixedMonthChronology,137
Failed time : 22/12/05 07:42
=================================================
Project : time_1	start : 22/12/05 07:42
Current failed test : org.joda.time.TestInterval_Basics::testGetDuration2 | 22/12/05 07:42
Mon Dec 05 07:42:46 CST 2022 org.joda.time.base.AbstractInterval,415
Failed time : 22/12/05 07:42
=================================================
Project : time_1	start : 22/12/05 07:42
Current failed test : org.joda.time.TestInterval_Basics::testGetDuration2 | 22/12/05 07:42
Mon Dec 05 07:42:54 CST 2022 org.joda.time.base.AbstractInterval,415
Failed time : 22/12/05 07:42
=================================================
Project : time_1	start : 22/12/05 07:42
Current failed test : org.joda.time.format.TestDateTimeFormatStyle::testForStyle_mediumTime | 22/12/05 07:42
Mon Dec 05 07:43:03 CST 2022 org.joda.time.format.DateTimeFormat,737

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=((dateStyle<<0)+dateStyle)+timeStyle;
if(dateStyle>=STYLE_CACHE.length){
return createDateTimeFormatter(dateStyle,timeStyle);
}

Time : 22/12/05 07:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=((dateStyle<<0)+dateStyle)+timeStyle;
if(NONE>=STYLE_CACHE.length){
return createDateTimeFormatter(dateStyle,timeStyle);
}

Time : 22/12/05 07:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=((dateStyle<<0)+dateStyle)+timeStyle;
if(++index>=STYLE_CACHE.length){
return createDateTimeFormatter(dateStyle,timeStyle);
}

Time : 22/12/05 07:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=((dateStyle<<0)+dateStyle)+timeStyle;
if(index>STYLE_CACHE.length){
return createDateTimeFormatter(dateStyle,timeStyle);
}

Time : 22/12/05 07:44
----------------------------------------
Failed time : 22/12/05 07:45
=================================================
Project : time_1	start : 22/12/05 07:45
Current failed test : org.joda.time.format.TestDateTimeFormatStyle::testForStyle_mediumTime | 22/12/05 07:45
Mon Dec 05 07:45:23 CST 2022 org.joda.time.format.DateTimeFormat,737

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=((dateStyle<<0)+dateStyle)+timeStyle;
if(dateStyle>=STYLE_CACHE.length){
return createDateTimeFormatter(dateStyle,timeStyle);
}

Time : 22/12/05 07:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=((dateStyle<<0)+dateStyle)+timeStyle;
if(NONE>=STYLE_CACHE.length){
return createDateTimeFormatter(dateStyle,timeStyle);
}

Time : 22/12/05 07:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=((dateStyle<<0)+dateStyle)+timeStyle;
if(++index>=STYLE_CACHE.length){
return createDateTimeFormatter(dateStyle,timeStyle);
}

Time : 22/12/05 07:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=((dateStyle<<0)+dateStyle)+timeStyle;
if(index>STYLE_CACHE.length){
return createDateTimeFormatter(dateStyle,timeStyle);
}

Time : 22/12/05 07:47
----------------------------------------
Failed time : 22/12/05 07:47
=================================================
Project : time_1	start : 22/12/05 07:47
Current failed test : org.joda.time.format.TestISODateTimeFormat_Fields::testForFields_time_M | 22/12/05 07:47
Mon Dec 05 07:47:41 CST 2022 org.joda.time.format.ISODateTimeFormat,417

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hour||minute){
}else {
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields: "+fields);
}
}

Time : 22/12/05 07:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!hour&&minute){
}else {
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields: "+fields);
}
}

Time : 22/12/05 07:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hour||minute){
}else {
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields because Date was reduced precision: "+fields);
}
}

Time : 22/12/05 07:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hour||minute){
}else {
if(strictISO){
bld.appendLiteral('T');
}
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields: "+fields);
}
}

Time : 22/12/05 07:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!hour&&minute){
}else {
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields because Date was reduced precision: "+fields);
}
}

Time : 22/12/05 07:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!hour&&minute){
}else {
if(strictISO){
bld.appendLiteral('T');
}
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields: "+fields);
}
}

Time : 22/12/05 07:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hour||minute){
}else {
if(strictISO){
bld.appendLiteral('T');
}
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields because Date was reduced precision: "+fields);
}
}

Time : 22/12/05 07:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!hour&&minute){
}else {
if(strictISO){
bld.appendLiteral('T');
}
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields because Date was reduced precision: "+fields);
}
}

Time : 22/12/05 07:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(minute||second){
}else {
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields: "+fields);
}
}

Time : 22/12/05 07:50
----------------------------------------
Failed time : 22/12/05 07:51
=================================================
Project : time_1	start : 22/12/05 07:51
Current failed test : org.joda.time.format.TestISODateTimeFormat_Fields::testForFields_time_M | 22/12/05 07:51
Mon Dec 05 07:51:16 CST 2022 org.joda.time.format.ISODateTimeFormat,417

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hour||minute){
}else {
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields: "+fields);
}
}

Time : 22/12/05 07:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!hour&&minute){
}else {
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields: "+fields);
}
}

Time : 22/12/05 07:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hour||minute){
}else {
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields because Date was reduced precision: "+fields);
}
}

Time : 22/12/05 07:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hour||minute){
}else {
if(strictISO){
bld.appendLiteral('T');
}
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields: "+fields);
}
}

Time : 22/12/05 07:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!hour&&minute){
}else {
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields because Date was reduced precision: "+fields);
}
}

Time : 22/12/05 07:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!hour&&minute){
}else {
if(strictISO){
bld.appendLiteral('T');
}
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields: "+fields);
}
}

Time : 22/12/05 07:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hour||minute){
}else {
if(strictISO){
bld.appendLiteral('T');
}
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields because Date was reduced precision: "+fields);
}
}

Time : 22/12/05 07:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!hour&&minute){
}else {
if(strictISO){
bld.appendLiteral('T');
}
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields because Date was reduced precision: "+fields);
}
}

Time : 22/12/05 07:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(minute||second){
}else {
if(strictISO){
throw new IllegalArgumentException("No valid ISO8601 format for fields: "+fields);
}
}

Time : 22/12/05 07:54
----------------------------------------
Failed time : 22/12/05 07:54
=================================================
Project : time_1	start : 22/12/05 07:54
Current failed test : org.joda.time.TestLocalDate_Basics::testCompareTo | 22/12/05 07:54
Mon Dec 05 07:54:53 CST 2022 Mon Dec 05 07:54:53 CST 2022 : org.joda.time.LocalDate,683=>Find no block
Failed time : 22/12/05 07:54
=================================================
Project : time_1	start : 22/12/05 07:54
Current failed test : org.joda.time.TestLocalDate_Basics::testCompareTo | 22/12/05 07:54
Mon Dec 05 07:55:01 CST 2022 Mon Dec 05 07:55:01 CST 2022 : org.joda.time.LocalDate,683=>Find no block
Failed time : 22/12/05 07:55
=================================================
Project : time_1	start : 22/12/05 07:55
Current failed test : org.joda.time.TestYearMonth_Basics::testMinusMonths_int | 22/12/05 07:55
Mon Dec 05 07:55:10 CST 2022 org.joda.time.YearMonth,507
Failed time : 22/12/05 07:55
=================================================
Project : time_1	start : 22/12/05 07:55
Current failed test : org.joda.time.TestYearMonth_Basics::testMinusMonths_int | 22/12/05 07:55
Mon Dec 05 07:55:18 CST 2022 org.joda.time.YearMonth,507
Failed time : 22/12/05 07:55
=================================================
Project : time_1	start : 22/12/05 07:55
Current failed test : org.joda.time.TestDateMidnight_Basics::testPlusMonths_int | 22/12/05 07:55
Mon Dec 05 07:55:27 CST 2022 org.joda.time.chrono.ZonedChronology,316
Failed time : 22/12/05 07:57
=================================================
Project : time_1	start : 22/12/05 07:57
Current failed test : org.joda.time.TestDateMidnight_Basics::testPlusMonths_int | 22/12/05 07:57
Mon Dec 05 07:57:14 CST 2022 org.joda.time.chrono.ZonedChronology,316
Failed time : 22/12/05 07:58
=================================================
Project : time_1	start : 22/12/05 07:58
Current failed test : org.joda.time.TestBasePartial::testSetMethods | 22/12/05 07:58
Mon Dec 05 07:58:57 CST 2022 org.joda.time.field.FieldUtils,233
Failed time : 22/12/05 07:59
=================================================
Project : time_1	start : 22/12/05 07:59
Current failed test : org.joda.time.TestBasePartial::testSetMethods | 22/12/05 07:59
Mon Dec 05 07:59:08 CST 2022 org.joda.time.field.FieldUtils,233
Failed time : 22/12/05 07:59
=================================================
Project : time_1	start : 22/12/05 07:59
Current failed test : org.joda.time.format.TestDateTimeFormat::testParse_textMonthJanLong_UK | 22/12/05 07:59
Mon Dec 05 07:59:19 CST 2022 org.joda.time.format.DateTimeFormat,473

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i*1<i){
indexRef[0]++;
if(isNumericToken(parseToken(pattern,indexRef))){
maxDigits=tokenLen;
}
indexRef[0]--;
}

Time : 22/12/05 08:00
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.0960011279293669 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormat.java=>0,0]
Converter[] copy=new Converter[length];
for(int j=0;j<length;j++){
if(j!=i){
copy[j]=converters[j];
}else {
copy[j]=converter;
}
}

Time : 22/12/05 08:00
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormat.java=>473,480]
if(i*1<length){
indexRef[0]++;
if(isNumericToken(parseToken(pattern,indexRef))){
maxDigits=tokenLen;
}
indexRef[0]--;
}

Time : 22/12/05 08:00
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormat.java=>473,480]
if(i*1<i){
indexRef[0]++;
if(isNumericToken(parseToken(pattern,indexRef))){
maxDigits=tokenLen;
}
indexRef[0]--;
}

Time : 22/12/05 08:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
length--;
if(i*1<length){
indexRef[0]++;
if(isNumericToken(parseToken(pattern,indexRef))){
maxDigits=tokenLen;
}
indexRef[0]--;
}

Time : 22/12/05 08:01
----------------------------------------
Success time : 22/12/05 08:02
=================================================
Project : time_1	start : 22/12/05 08:02
Current failed test : org.joda.time.format.TestDateTimeFormat::testParse_textMonthJanLong_UK | 22/12/05 08:02
Mon Dec 05 08:02:35 CST 2022 org.joda.time.format.DateTimeFormat,473

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i*1<i){
indexRef[0]++;
if(isNumericToken(parseToken(pattern,indexRef))){
maxDigits=tokenLen;
}
indexRef[0]--;
}

Time : 22/12/05 08:03
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.0960011279293669 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormat.java=>0,0]
Converter[] copy=new Converter[length];
for(int j=0;j<length;j++){
if(j!=i){
copy[j]=converters[j];
}else {
copy[j]=converter;
}
}

Time : 22/12/05 08:03
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormat.java=>473,480]
if(i*1<length){
indexRef[0]++;
if(isNumericToken(parseToken(pattern,indexRef))){
maxDigits=tokenLen;
}
indexRef[0]--;
}

Time : 22/12/05 08:03
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormat.java=>473,480]
if(i*1<i){
indexRef[0]++;
if(isNumericToken(parseToken(pattern,indexRef))){
maxDigits=tokenLen;
}
indexRef[0]--;
}

Time : 22/12/05 08:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
length--;
if(i*1<length){
indexRef[0]++;
if(isNumericToken(parseToken(pattern,indexRef))){
maxDigits=tokenLen;
}
indexRef[0]--;
}

Time : 22/12/05 08:04
----------------------------------------
Success time : 22/12/05 08:05
=================================================
Project : time_1	start : 22/12/05 08:05
Current failed test : org.joda.time.TestLocalDateTime_Basics::testGetFieldTypes | 22/12/05 08:05
Mon Dec 05 08:05:52 CST 2022 org.joda.time.LocalDateTime,539
Failed time : 22/12/05 08:05
=================================================
Project : time_1	start : 22/12/05 08:05
Current failed test : org.joda.time.TestLocalDateTime_Basics::testGetFieldTypes | 22/12/05 08:05
Mon Dec 05 08:06:01 CST 2022 org.joda.time.LocalDateTime,539
Failed time : 22/12/05 08:06
=================================================
Project : time_1	start : 22/12/05 08:06
Current failed test : org.joda.time.TestSeconds::testToStandardHours | 22/12/05 08:06
Mon Dec 05 08:06:10 CST 2022 org.joda.time.Seconds,278
Failed time : 22/12/05 08:07
=================================================
Project : time_1	start : 22/12/05 08:07
Current failed test : org.joda.time.TestSeconds::testToStandardHours | 22/12/05 08:07
Mon Dec 05 08:07:10 CST 2022 org.joda.time.Seconds,278
Failed time : 22/12/05 08:08
=================================================
Project : time_1	start : 22/12/05 08:08
Current failed test : org.joda.time.TestPartial_Basics::testWith2 | 22/12/05 08:08
Mon Dec 05 08:08:11 CST 2022 org.joda.time.Partial,438
Failed time : 22/12/05 08:08
=================================================
Project : time_1	start : 22/12/05 08:08
Current failed test : org.joda.time.TestPartial_Basics::testWith2 | 22/12/05 08:08
Mon Dec 05 08:08:19 CST 2022 org.joda.time.Partial,438
Failed time : 22/12/05 08:08
=================================================
Project : time_1	start : 22/12/05 08:08
Current failed test : org.joda.time.format.TestDateTimeFormat::testFormat_shortBasicParse | 22/12/05 08:08
Mon Dec 05 08:08:27 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,1625
Failed time : 22/12/05 08:09
=================================================
Project : time_1	start : 22/12/05 08:09
Current failed test : org.joda.time.format.TestDateTimeFormat::testFormat_shortBasicParse | 22/12/05 08:09
Mon Dec 05 08:10:05 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,1625
Failed time : 22/12/05 08:11
=================================================
Project : time_1	start : 22/12/05 08:11
Current failed test : org.joda.time.TestDuration_Basics::testToStandardHours | 22/12/05 08:11
Mon Dec 05 08:11:38 CST 2022 org.joda.time.Duration,248
Failed time : 22/12/05 08:11
=================================================
Project : time_1	start : 22/12/05 08:11
Current failed test : org.joda.time.TestDuration_Basics::testToStandardHours | 22/12/05 08:11
Mon Dec 05 08:11:46 CST 2022 org.joda.time.Duration,248
Failed time : 22/12/05 08:11
=================================================
Project : time_1	start : 22/12/05 08:11
Current failed test : org.joda.time.TestYears::testIsGreaterThan | 22/12/05 08:11
Mon Dec 05 08:11:55 CST 2022 org.joda.time.Years,330
Failed time : 22/12/05 08:11
=================================================
Project : time_1	start : 22/12/05 08:11
Current failed test : org.joda.time.TestYears::testIsGreaterThan | 22/12/05 08:11
Mon Dec 05 08:12:02 CST 2022 org.joda.time.Years,330
Failed time : 22/12/05 08:12
=================================================
Project : time_1	start : 22/12/05 08:12
Current failed test : org.joda.time.TestDateTime_Properties::testPropertyAddMonthOfYear | 22/12/05 08:12
Mon Dec 05 08:12:10 CST 2022 org.joda.time.chrono.BasicMonthOfYearDateTimeField,125
Failed time : 22/12/05 08:12
=================================================
Project : time_1	start : 22/12/05 08:12
Current failed test : org.joda.time.TestDateTime_Properties::testPropertyAddMonthOfYear | 22/12/05 08:12
Mon Dec 05 08:12:53 CST 2022 org.joda.time.chrono.BasicMonthOfYearDateTimeField,125
Failed time : 22/12/05 08:13
=================================================
Project : time_1	start : 22/12/05 08:13
Current failed test : org.joda.time.TestMutableDateTime_Sets::testSetTime_int_int_int_int1 | 22/12/05 08:13
Mon Dec 05 08:13:35 CST 2022 Mon Dec 05 08:13:35 CST 2022 : org.joda.time.chrono.ZonedChronology,129=>Find no block
Failed time : 22/12/05 08:13
=================================================
Project : time_1	start : 22/12/05 08:13
Current failed test : org.joda.time.TestMutableDateTime_Sets::testSetTime_int_int_int_int1 | 22/12/05 08:13
Mon Dec 05 08:13:42 CST 2022 Mon Dec 05 08:13:42 CST 2022 : org.joda.time.chrono.ZonedChronology,129=>Find no block
Failed time : 22/12/05 08:13
=================================================
Project : time_1	start : 22/12/05 08:13
Current failed test : org.joda.time.TestDateMidnight_Basics | 22/12/05 08:13
Mon Dec 05 08:13:50 CST 2022 org.joda.time.tz.DateTimeZoneBuilder,550
=================================================
Project : time_1	start : 22/12/05 08:13
Current failed test : org.joda.time.TestDateMidnight_Basics | 22/12/05 08:14
Mon Dec 05 08:14:06 CST 2022 org.joda.time.tz.DateTimeZoneBuilder,550
=================================================
Project : time_1	start : 22/12/05 08:14
Current failed test : org.joda.time.TestInterval_Basics::testOverlaps_RInterval_null | 22/12/05 08:14
Mon Dec 05 08:14:21 CST 2022 org.joda.time.base.AbstractInterval,235

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
interval=DateTimeUtils.getReadableInterval(interval);
if(interval==null){
long now=DateTimeUtils.currentTimeMillis();
return (thisStart<=now&&now<thisEnd);
}else {
long otherStart=interval.getStartMillis();
long otherEnd=interval.getEndMillis();
return (thisStart<otherEnd&&otherStart<thisEnd);
}

Time : 22/12/05 08:14
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.8174656303000762 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/base/AbstractInterval.java=>0,0]
interval=DateTimeUtils.getReadableInterval(interval);
if(overlaps(interval)==false){
return null;
}
long start=Math.max(getStartMillis(),interval.getStartMillis());
long end=Math.min(getEndMillis(),interval.getEndMillis());
return new Interval(start,end,getChronology());

Time : 22/12/05 08:14
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/base/AbstractInterval.java=>233,240]
if(interval==null){
long now=DateTimeUtils.currentTimeMillis();
return (thisStart<=now&&now<thisEnd);
}else {
long otherStart=interval.getStartMillis();
long otherEnd=interval.getEndMillis();
return (thisStart<otherEnd&&otherStart<thisEnd);
}

Time : 22/12/05 08:14
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/base/AbstractInterval.java=>233,240]
interval=DateTimeUtils.getReadableInterval(interval);
if(interval==null){
long now=DateTimeUtils.currentTimeMillis();
return (thisStart<=now&&now<thisEnd);
}else {
long otherStart=interval.getStartMillis();
long otherEnd=interval.getEndMillis();
return (thisStart<otherEnd&&otherStart<thisEnd);
}

Time : 22/12/05 08:14
----------------------------------------
Success time : 22/12/05 08:14
=================================================
Project : time_1	start : 22/12/05 08:14
Current failed test : org.joda.time.TestInterval_Basics::testOverlaps_RInterval_null | 22/12/05 08:14
Mon Dec 05 08:14:52 CST 2022 org.joda.time.base.AbstractInterval,235

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
interval=DateTimeUtils.getReadableInterval(interval);
if(interval==null){
long now=DateTimeUtils.currentTimeMillis();
return (thisStart<=now&&now<thisEnd);
}else {
long otherStart=interval.getStartMillis();
long otherEnd=interval.getEndMillis();
return (thisStart<otherEnd&&otherStart<thisEnd);
}

Time : 22/12/05 08:15
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.8174656303000762 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/base/AbstractInterval.java=>0,0]
interval=DateTimeUtils.getReadableInterval(interval);
if(overlaps(interval)==false){
return null;
}
long start=Math.max(getStartMillis(),interval.getStartMillis());
long end=Math.min(getEndMillis(),interval.getEndMillis());
return new Interval(start,end,getChronology());

Time : 22/12/05 08:15
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/base/AbstractInterval.java=>233,240]
if(interval==null){
long now=DateTimeUtils.currentTimeMillis();
return (thisStart<=now&&now<thisEnd);
}else {
long otherStart=interval.getStartMillis();
long otherEnd=interval.getEndMillis();
return (thisStart<otherEnd&&otherStart<thisEnd);
}

Time : 22/12/05 08:15
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/base/AbstractInterval.java=>233,240]
interval=DateTimeUtils.getReadableInterval(interval);
if(interval==null){
long now=DateTimeUtils.currentTimeMillis();
return (thisStart<=now&&now<thisEnd);
}else {
long otherStart=interval.getStartMillis();
long otherEnd=interval.getEndMillis();
return (thisStart<otherEnd&&otherStart<thisEnd);
}

Time : 22/12/05 08:15
----------------------------------------
Success time : 22/12/05 08:15
=================================================
Project : time_1	start : 22/12/05 08:15
Current failed test : org.joda.time.format.TestDateTimeFormat::testFormat_shortBasicParse | 22/12/05 08:15
Mon Dec 05 08:15:20 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,1625
Failed time : 22/12/05 08:16
=================================================
Project : time_1	start : 22/12/05 08:16
Current failed test : org.joda.time.format.TestDateTimeFormat::testFormat_shortBasicParse | 22/12/05 08:16
Mon Dec 05 08:16:51 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,1625
Failed time : 22/12/05 08:18
=================================================
Project : time_1	start : 22/12/05 08:18
Current failed test : org.joda.time.TestAbstractPartial | 22/12/05 08:18
Mon Dec 05 08:18:29 CST 2022 org.joda.time.tz.DateTimeZoneBuilder,617
=================================================
Project : time_1	start : 22/12/05 08:18
Current failed test : org.joda.time.TestAbstractPartial | 22/12/05 08:18
Mon Dec 05 08:18:44 CST 2022 org.joda.time.tz.DateTimeZoneBuilder,617
=================================================
Project : time_1	start : 22/12/05 08:18
Current failed test : org.joda.time.convert.TestStringConverter::testGetDurationMillis_Object1 | 22/12/05 08:18
Mon Dec 05 08:18:59 CST 2022 org.joda.time.convert.StringConverter,117
Failed time : 22/12/05 08:25
=================================================
Project : time_1	start : 22/12/05 08:25
Current failed test : org.joda.time.convert.TestStringConverter::testGetDurationMillis_Object1 | 22/12/05 08:25
Mon Dec 05 08:25:29 CST 2022 org.joda.time.convert.StringConverter,117
Failed time : 22/12/05 08:32
=================================================
Project : time_1	start : 22/12/05 08:32
Current failed test : org.joda.time.TestHours::testAddToLocalDate | 22/12/05 08:32
Mon Dec 05 08:32:08 CST 2022 org.joda.time.LocalDateTime,1086

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
return withLocalMillis(getChronology().add(period,getLocalMillis(),MONTH_OF_YEAR));

Time : 22/12/05 08:32
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 0.7706746355884523 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/LocalDateTime.java=>0,0]
if(period==null||scalar==0){
return this;
}
long instant=getChronology().add(period,getLocalMillis(),scalar);
return withLocalMillis(instant);

Time : 22/12/05 08:32
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/LocalDateTime.java=>1086,1086]
return withPeriodAdded(period,-1);

Time : 22/12/05 08:32
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/LocalDateTime.java=>1086,1086]
return withLocalMillis(getChronology().add(period,getLocalMillis(),MONTH_OF_YEAR));

Time : 22/12/05 08:32
----------------------------------------
Success time : 22/12/05 08:32
=================================================
Project : time_1	start : 22/12/05 08:32
Current failed test : org.joda.time.TestHours::testAddToLocalDate | 22/12/05 08:32
Mon Dec 05 08:32:49 CST 2022 org.joda.time.LocalDateTime,1086

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
return withLocalMillis(getChronology().add(period,getLocalMillis(),MONTH_OF_YEAR));

Time : 22/12/05 08:33
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 0.7706746355884523 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/LocalDateTime.java=>0,0]
if(period==null||scalar==0){
return this;
}
long instant=getChronology().add(period,getLocalMillis(),scalar);
return withLocalMillis(instant);

Time : 22/12/05 08:33
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/LocalDateTime.java=>1086,1086]
return withPeriodAdded(period,-1);

Time : 22/12/05 08:33
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/LocalDateTime.java=>1086,1086]
return withLocalMillis(getChronology().add(period,getLocalMillis(),MONTH_OF_YEAR));

Time : 22/12/05 08:33
----------------------------------------
Success time : 22/12/05 08:33
=================================================
Project : time_1	start : 22/12/05 08:33
Current failed test : org.joda.time.convert.TestConverterManager::testGetInstantConverterRemovedNull | 22/12/05 08:33
Mon Dec 05 08:33:33 CST 2022 org.joda.time.convert.ConverterSet,266
Failed time : 22/12/05 08:33
=================================================
Project : time_1	start : 22/12/05 08:33
Current failed test : org.joda.time.convert.TestConverterManager::testGetInstantConverterRemovedNull | 22/12/05 08:33
Mon Dec 05 08:33:55 CST 2022 org.joda.time.convert.ConverterSet,266
Failed time : 22/12/05 08:34
=================================================
Project : time_1	start : 22/12/05 08:34
Current failed test : org.joda.time.TestDateTimeZoneCutover::test_getOffsetFromLocal_Moscow_Autumn_overlap_mins | 22/12/05 08:34
Mon Dec 05 08:34:11 CST 2022 org.joda.time.tz.DateTimeZoneBuilder,1594

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(instant>Long.MIN_VALUE){
return instant-1;
}

Time : 22/12/05 08:34
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.2273033978114247 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java=>0,0]
if(i<transitions.length){
if(i>0){
long prev=transitions[i-1];
if(prev>Long.MIN_VALUE){
return prev-1;
}
}
return instant;
}

Time : 22/12/05 08:34
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java=>1593,1595]
if(instant>Long.MIN_VALUE){
return instant--1;
}

Time : 22/12/05 08:34
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java=>1593,1595]
if(instant>Long.MIN_VALUE){
return instant-1;
}

Time : 22/12/05 08:34
----------------------------------------
Success time : 22/12/05 08:34
=================================================
Project : time_1	start : 22/12/05 08:34
Current failed test : org.joda.time.TestDateTimeZoneCutover::test_getOffsetFromLocal_Moscow_Autumn_overlap_mins | 22/12/05 08:35
Mon Dec 05 08:35:11 CST 2022 org.joda.time.tz.DateTimeZoneBuilder,1594

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(instant>Long.MIN_VALUE){
return instant-1;
}

Time : 22/12/05 08:35
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.2273033978114247 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java=>0,0]
if(i<transitions.length){
if(i>0){
long prev=transitions[i-1];
if(prev>Long.MIN_VALUE){
return prev-1;
}
}
return instant;
}

Time : 22/12/05 08:35
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java=>1593,1595]
if(instant>Long.MIN_VALUE){
return instant--1;
}

Time : 22/12/05 08:35
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java=>1593,1595]
if(instant>Long.MIN_VALUE){
return instant-1;
}

Time : 22/12/05 08:35
----------------------------------------
Success time : 22/12/05 08:36
=================================================
Project : time_1	start : 22/12/05 08:36
Current failed test : org.joda.time.TestDateMidnight_Basics::testToString_String | 22/12/05 08:36
Mon Dec 05 08:36:17 CST 2022 org.joda.time.format.DateTimeFormat,602
Failed time : 22/12/05 08:41
=================================================
Project : time_1	start : 22/12/05 08:41
Current failed test : org.joda.time.TestDateMidnight_Basics::testToString_String | 22/12/05 08:41
Mon Dec 05 08:41:08 CST 2022 org.joda.time.format.DateTimeFormat,602
Failed time : 22/12/05 08:45
=================================================
Project : time_1	start : 22/12/05 08:45
Current failed test : org.joda.time.TestPeriod_Basics::testMinusFields | 22/12/05 08:45
Mon Dec 05 08:45:48 CST 2022 org.joda.time.Period,1068
Failed time : 22/12/05 08:45
=================================================
Project : time_1	start : 22/12/05 08:45
Current failed test : org.joda.time.TestPeriod_Basics::testMinusFields | 22/12/05 08:45
Mon Dec 05 08:45:58 CST 2022 org.joda.time.Period,1068
Failed time : 22/12/05 08:45
=================================================
Project : time_1	start : 22/12/05 08:46
Current failed test : org.joda.time.TestDateTimeZone::testForOffsetHours_int | 22/12/05 08:46
Mon Dec 05 08:46:13 CST 2022 org.joda.time.DateTimeZone,276
=================================================
Project : time_1	start : 22/12/05 08:47
Current failed test : org.joda.time.TestDateTimeZone::testForOffsetHours_int | 22/12/05 08:47
Mon Dec 05 08:47:33 CST 2022 org.joda.time.DateTimeZone,276
=================================================
Project : time_1	start : 22/12/05 08:48
Current failed test : org.joda.time.TestMutablePeriod_Basics::testToString | 22/12/05 08:48
Mon Dec 05 08:48:57 CST 2022 org.joda.time.format.PeriodFormatterBuilder,1127
Failed time : 22/12/05 08:49
=================================================
Project : time_1	start : 22/12/05 08:49
Current failed test : org.joda.time.TestMutablePeriod_Basics::testToString | 22/12/05 08:49
Mon Dec 05 08:49:48 CST 2022 org.joda.time.format.PeriodFormatterBuilder,1127
Failed time : 22/12/05 08:50
=================================================
Project : time_1	start : 22/12/05 08:50
Current failed test : org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt | 22/12/05 08:50
Mon Dec 05 08:50:41 CST 2022 org.joda.time.field.FieldUtils,148
Failed time : 22/12/05 08:52
=================================================
Project : time_1	start : 22/12/05 08:52
Current failed test : org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt | 22/12/05 08:52
Mon Dec 05 08:52:15 CST 2022 org.joda.time.field.FieldUtils,148
Failed time : 22/12/05 08:53
=================================================
Project : time_1	start : 22/12/05 08:53
Current failed test : org.joda.time.TestDateMidnight_Basics::testToString_String | 22/12/05 08:53
Mon Dec 05 08:54:02 CST 2022 org.joda.time.format.DateTimeFormat,603
Failed time : 22/12/05 09:00
=================================================
Project : time_1	start : 22/12/05 09:00
Current failed test : org.joda.time.TestDateMidnight_Basics::testToString_String | 22/12/05 09:00
Mon Dec 05 09:00:42 CST 2022 org.joda.time.format.DateTimeFormat,603
Failed time : 22/12/05 09:07
=================================================
Project : time_1	start : 22/12/05 09:07
Current failed test : org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_nullDateTimeZone | 22/12/05 09:07
Mon Dec 05 09:07:32 CST 2022 Mon Dec 05 09:07:32 CST 2022 : org.joda.time.DateTime,408=>Find no block
Failed time : 22/12/05 09:07
=================================================
Project : time_1	start : 22/12/05 09:07
Current failed test : org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_nullDateTimeZone | 22/12/05 09:07
Mon Dec 05 09:07:39 CST 2022 Mon Dec 05 09:07:39 CST 2022 : org.joda.time.DateTime,408=>Find no block
Failed time : 22/12/05 09:07
=================================================
Project : time_1	start : 22/12/05 09:07
Current failed test : org.joda.time.TestBasePartial::testSetMethods | 22/12/05 09:07
Mon Dec 05 09:07:45 CST 2022 org.joda.time.field.BaseDateTimeField,589
Failed time : 22/12/05 09:11
=================================================
Project : time_1	start : 22/12/05 09:11
Current failed test : org.joda.time.TestBasePartial::testSetMethods | 22/12/05 09:11
Mon Dec 05 09:11:40 CST 2022 org.joda.time.field.BaseDateTimeField,589
Failed time : 22/12/05 09:15
=================================================
Project : time_1	start : 22/12/05 09:15
Current failed test : org.joda.time.TestAbstractPartial::testGetFieldTypes | 22/12/05 09:15
Mon Dec 05 09:15:33 CST 2022 org.joda.time.chrono.BuddhistChronology,116
Failed time : 22/12/05 09:15
=================================================
Project : time_1	start : 22/12/05 09:15
Current failed test : org.joda.time.TestAbstractPartial::testGetFieldTypes | 22/12/05 09:15
Mon Dec 05 09:15:47 CST 2022 org.joda.time.chrono.BuddhistChronology,116
Failed time : 22/12/05 09:15
=================================================
Project : time_1	start : 22/12/05 09:15
Current failed test : org.joda.time.TestDays::testFactory_parseDays_String | 22/12/05 09:15
Mon Dec 05 09:16:01 CST 2022 org.joda.time.format.PeriodFormatterBuilder,1365
Failed time : 22/12/05 09:18
=================================================
Project : time_1	start : 22/12/05 09:18
Current failed test : org.joda.time.TestDays::testFactory_parseDays_String | 22/12/05 09:18
Mon Dec 05 09:18:09 CST 2022 org.joda.time.format.PeriodFormatterBuilder,1365
Failed time : 22/12/05 09:20
=================================================
Project : time_1	start : 22/12/05 09:20
Current failed test : org.joda.time.TestDateTimeZone::testForID_String | 22/12/05 09:20
Mon Dec 05 09:20:32 CST 2022 org.joda.time.format.FormatUtils,353
Failed time : 22/12/05 09:20
=================================================
Project : time_1	start : 22/12/05 09:20
Current failed test : org.joda.time.TestDateTimeZone::testForID_String | 22/12/05 09:20
Mon Dec 05 09:20:46 CST 2022 org.joda.time.format.FormatUtils,353
Failed time : 22/12/05 09:20
=================================================
Project : time_1	start : 22/12/05 09:20
Current failed test : org.joda.time.TestChronology::testToString | 22/12/05 09:21
Mon Dec 05 09:21:06 CST 2022 org.joda.time.chrono.IslamicChronology,208
Failed time : 22/12/05 09:21
=================================================
Project : time_1	start : 22/12/05 09:21
Current failed test : org.joda.time.TestChronology::testToString | 22/12/05 09:21
Mon Dec 05 09:21:35 CST 2022 org.joda.time.chrono.IslamicChronology,208
Failed time : 22/12/05 09:21
=================================================
Project : time_1	start : 22/12/05 09:21
Current failed test : org.joda.time.chrono.TestCopticChronology::testEpoch | 22/12/05 09:21
Mon Dec 05 09:22:04 CST 2022 org.joda.time.chrono.CopticChronology,214

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<=0){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<=0){
leapYears=(year/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<0){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:23
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.3629441293806335 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>0,0]
if(year<0){
leapYears=((year+3)>>2)-leapYears+((leapYears+3)>>2)-1;
}else {
leapYears=(year>>2)-leapYears+(leapYears>>2);
if(isLeapYear(year)){
leapYears--;
}
}

Time : 22/12/05 09:23
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(relativeYear<=0){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:23
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(year<0){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<=0){
leapYears=(relativeYear/3)>>1;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:23
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.3629441293806335 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>0,0]
if(year<0){
leapYears=((year+3)>>2)-leapYears+((leapYears+3)>>2)-1;
}else {
leapYears=(year>>2)-leapYears+(leapYears>>2);
if(isLeapYear(year)){
leapYears--;
}
}

Time : 22/12/05 09:23
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(relativeYear<=0){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:23
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(year<=0){
leapYears=(relativeYear/3)>>1;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<0){
leapYears=(year/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<=0){
leapYears=(year/3)>>1;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<0){
leapYears=(relativeYear/3)>>1;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:24
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.3629441293806335 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>0,0]
if(year<0){
leapYears=((year+3)>>2)-leapYears+((leapYears+3)>>2)-1;
}else {
leapYears=(year>>2)-leapYears+(leapYears>>2);
if(isLeapYear(year)){
leapYears--;
}
}

Time : 22/12/05 09:24
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(relativeYear<=0){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:24
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(year<0){
leapYears=(relativeYear/3)>>1;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<0){
leapYears=(year/3)>>1;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(relativeYear<=MIN_YEAR){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:26
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 0.9380961102354578 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>0,0]
long jan1millis=getYearMillis(year);
int jan1dayOfWeek=getDayOfWeek(jan1millis);
if(jan1dayOfWeek>(8-iMinDaysInFirstWeek)){
return jan1millis+(8-jan1dayOfWeek)*(long)DateTimeConstants.MILLIS_PER_DAY;
}else {
return jan1millis-(jan1dayOfWeek-1)*(long)DateTimeConstants.MILLIS_PER_DAY;
}

Time : 22/12/05 09:26
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(relativeYear<=0){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:26
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(relativeYear<=MIN_YEAR){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:26
----------------------------------------
Success time : 22/12/05 09:26
=================================================
Project : time_1	start : 22/12/05 09:26
Current failed test : org.joda.time.chrono.TestCopticChronology::testEpoch | 22/12/05 09:26
Mon Dec 05 09:26:27 CST 2022 org.joda.time.chrono.CopticChronology,214

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<=0){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<=0){
leapYears=(year/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<0){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:27
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.3629441293806335 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>0,0]
if(year<0){
leapYears=((year+3)>>2)-leapYears+((leapYears+3)>>2)-1;
}else {
leapYears=(year>>2)-leapYears+(leapYears>>2);
if(isLeapYear(year)){
leapYears--;
}
}

Time : 22/12/05 09:27
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(relativeYear<=0){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:27
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(year<0){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<=0){
leapYears=(relativeYear/3)>>1;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:27
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.3629441293806335 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>0,0]
if(year<0){
leapYears=((year+3)>>2)-leapYears+((leapYears+3)>>2)-1;
}else {
leapYears=(year>>2)-leapYears+(leapYears>>2);
if(isLeapYear(year)){
leapYears--;
}
}

Time : 22/12/05 09:28
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(relativeYear<=0){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:28
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(year<=0){
leapYears=(relativeYear/3)>>1;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<0){
leapYears=(year/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<=0){
leapYears=(year/3)>>1;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<0){
leapYears=(relativeYear/3)>>1;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:29
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.3629441293806335 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>0,0]
if(year<0){
leapYears=((year+3)>>2)-leapYears+((leapYears+3)>>2)-1;
}else {
leapYears=(year>>2)-leapYears+(leapYears>>2);
if(isLeapYear(year)){
leapYears--;
}
}

Time : 22/12/05 09:29
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(relativeYear<=0){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:29
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(year<0){
leapYears=(relativeYear/3)>>1;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(year<0){
leapYears=(year/3)>>1;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(relativeYear<=MIN_YEAR){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:30
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 0.9380961102354578 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>0,0]
long jan1millis=getYearMillis(year);
int jan1dayOfWeek=getDayOfWeek(jan1millis);
if(jan1dayOfWeek>(8-iMinDaysInFirstWeek)){
return jan1millis+(8-jan1dayOfWeek)*(long)DateTimeConstants.MILLIS_PER_DAY;
}else {
return jan1millis-(jan1dayOfWeek-1)*(long)DateTimeConstants.MILLIS_PER_DAY;
}

Time : 22/12/05 09:31
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(relativeYear<=0){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:31
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/CopticChronology.java=>211,221]
if(relativeYear<=MIN_YEAR){
leapYears=(relativeYear/3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(year)){
leapYears++;
}
}

Time : 22/12/05 09:31
----------------------------------------
Success time : 22/12/05 09:31
=================================================
Project : time_1	start : 22/12/05 09:31
Current failed test : org.joda.time.format.TestISODateTimeFormat_Fields::testForFields_ordinalBased_D | 22/12/05 09:31
Mon Dec 05 09:31:17 CST 2022 org.joda.time.format.ISODateTimeFormat,166
Failed time : 22/12/05 09:42
=================================================
Project : time_1	start : 22/12/05 09:42
Current failed test : org.joda.time.format.TestISODateTimeFormat_Fields::testForFields_ordinalBased_D | 22/12/05 09:42
Mon Dec 05 09:42:40 CST 2022 org.joda.time.format.ISODateTimeFormat,166
Failed time : 22/12/05 09:52
=================================================
Project : time_1	start : 22/12/05 09:52
Current failed test : org.joda.time.TestDays::testFactory_parseDays_String | 22/12/05 09:52
Mon Dec 05 09:52:51 CST 2022 org.joda.time.format.PeriodFormatterBuilder,1254
Failed time : 22/12/05 10:08
=================================================
Project : time_1	start : 22/12/05 10:08
Current failed test : org.joda.time.TestDays::testFactory_parseDays_String | 22/12/05 10:08
Mon Dec 05 10:08:19 CST 2022 org.joda.time.format.PeriodFormatterBuilder,1254
Failed time : 22/12/05 10:28
=================================================
Project : time_1	start : 22/12/05 10:28
Current failed test : org.joda.time.TestDuration_Constructors::testConstructor_Object4 | 22/12/05 10:28
Mon Dec 05 10:29:01 CST 2022 org.joda.time.base.BaseDuration,91
Failed time : 22/12/05 10:29
=================================================
Project : time_1	start : 22/12/05 10:29
Current failed test : org.joda.time.TestDuration_Constructors::testConstructor_Object4 | 22/12/05 10:29
Mon Dec 05 10:30:04 CST 2022 org.joda.time.base.BaseDuration,91
Failed time : 22/12/05 10:30
=================================================
Project : time_1	start : 22/12/05 10:30
Current failed test : org.joda.time.TestChronology::testToString | 22/12/05 10:30
Mon Dec 05 10:31:06 CST 2022 org.joda.time.chrono.EthiopicChronology,108
Failed time : 22/12/05 10:31
=================================================
Project : time_1	start : 22/12/05 10:31
Current failed test : org.joda.time.TestChronology::testToString | 22/12/05 10:31
Mon Dec 05 10:32:01 CST 2022 org.joda.time.chrono.EthiopicChronology,108
Failed time : 22/12/05 10:32
=================================================
Project : time_1	start : 22/12/05 10:32
Current failed test : org.joda.time.TestDays::testPlus_int | 22/12/05 10:32
Mon Dec 05 10:32:49 CST 2022 org.joda.time.Days,357
Failed time : 22/12/05 10:32
=================================================
Project : time_1	start : 22/12/05 10:32
Current failed test : org.joda.time.TestDays::testPlus_int | 22/12/05 10:32
Mon Dec 05 10:33:05 CST 2022 org.joda.time.Days,357
Failed time : 22/12/05 10:33
=================================================
Project : time_1	start : 22/12/05 10:33
Current failed test : org.joda.time.chrono.TestCopticChronology::testCalendar | 22/12/05 10:33
Mon Dec 05 10:33:19 CST 2022 org.joda.time.chrono.BasicChronology,542
Failed time : 22/12/05 10:33
=================================================
Project : time_1	start : 22/12/05 10:33
Current failed test : org.joda.time.chrono.TestCopticChronology::testCalendar | 22/12/05 10:33
Mon Dec 05 10:33:47 CST 2022 org.joda.time.chrono.BasicChronology,542
Failed time : 22/12/05 10:34
=================================================
Project : time_1	start : 22/12/05 10:34
Current failed test : org.joda.time.TestMutablePeriod_Updates::testSetPeriod_long_long_NoMonths | 22/12/05 10:34
Mon Dec 05 10:34:13 CST 2022 org.joda.time.PeriodType,800
Failed time : 22/12/05 10:34
=================================================
Project : time_1	start : 22/12/05 10:34
Current failed test : org.joda.time.TestMutablePeriod_Updates::testSetPeriod_long_long_NoMonths | 22/12/05 10:34
Mon Dec 05 10:34:22 CST 2022 org.joda.time.PeriodType,800
Failed time : 22/12/05 10:34
=================================================
Project : time_1	start : 22/12/05 10:34
Current failed test : org.joda.time.TestLocalDate_Basics::testToDateTime_LocalTime_Zone | 22/12/05 10:34
Mon Dec 05 10:34:33 CST 2022 org.joda.time.LocalDate,939
Failed time : 22/12/05 10:34
=================================================
Project : time_1	start : 22/12/05 10:34
Current failed test : org.joda.time.TestLocalDate_Basics::testToDateTime_LocalTime_Zone | 22/12/05 10:34
Mon Dec 05 10:35:01 CST 2022 org.joda.time.LocalDate,939
Failed time : 22/12/05 10:35
=================================================
Project : time_1	start : 22/12/05 10:35
Current failed test : org.joda.time.TestDateTimeZone::testForID_String | 22/12/05 10:35
Mon Dec 05 10:35:27 CST 2022 org.joda.time.format.FormatUtils,353
Failed time : 22/12/05 10:35
=================================================
Project : time_1	start : 22/12/05 10:35
Current failed test : org.joda.time.TestDateTimeZone::testForID_String | 22/12/05 10:35
Mon Dec 05 10:35:56 CST 2022 org.joda.time.format.FormatUtils,353
Failed time : 22/12/05 10:36
=================================================
Project : time_1	start : 22/12/05 10:36
Current failed test : org.joda.time.convert.TestStringConverter::testSetIntoPeriod_Object4 | 22/12/05 10:36
Mon Dec 05 10:36:25 CST 2022 org.joda.time.format.PeriodFormatterBuilder,1331

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fractLen<=0){
fractValue=-fractValue;
}

Time : 22/12/05 10:36
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.3263710192499127 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java=>0,0]
fractValue=parseInt(text,fractPos,fractLen);
if(fractLen==1){
fractValue*=100;
}else {
fractValue*=10;
}

Time : 22/12/05 10:36
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java=>1331,1333]
if(wholeValue<=0){
fractValue=-fractValue;
}

Time : 22/12/05 10:36
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java=>1331,1333]
if(fractLen<=0){
fractValue=-fractValue;
}

Time : 22/12/05 10:36
----------------------------------------
Success time : 22/12/05 10:36
=================================================
Project : time_1	start : 22/12/05 10:36
Current failed test : org.joda.time.convert.TestStringConverter::testSetIntoPeriod_Object4 | 22/12/05 10:37
Mon Dec 05 10:37:08 CST 2022 org.joda.time.format.PeriodFormatterBuilder,1331

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fractLen<=0){
fractValue=-fractValue;
}

Time : 22/12/05 10:37
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.3263710192499127 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java=>0,0]
fractValue=parseInt(text,fractPos,fractLen);
if(fractLen==1){
fractValue*=100;
}else {
fractValue*=10;
}

Time : 22/12/05 10:37
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java=>1331,1333]
if(wholeValue<=0){
fractValue=-fractValue;
}

Time : 22/12/05 10:37
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java=>1331,1333]
if(fractLen<=0){
fractValue=-fractValue;
}

Time : 22/12/05 10:37
----------------------------------------
Success time : 22/12/05 10:37
=================================================
Project : time_1	start : 22/12/05 10:37
Current failed test : org.joda.time.TestDateMidnight_Basics::testWithDurationAdded_RP_int | 22/12/05 10:37
Mon Dec 05 10:37:53 CST 2022 org.joda.time.chrono.BaseChronology,302

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=period.size();i<isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/12/05 10:43
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.4931000656296214 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>0,0]
for(int i=0,isize=size();i<isize;i++){
if(getValue(i)!=other.getValue(i)||getFieldType(i)!=other.getFieldType(i)){
return false;
}
}

Time : 22/12/05 10:43
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<=isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/12/05 10:43
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/12/05 10:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=period.size();i<isize;i++){
int value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/12/05 10:47
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.0263005524428803 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>0,0]
for(int i=0;i<period.size();i++){
int value=period.getValue(i);
if(value!=0){
DurationField field=period.getFieldType(i).getField(iso);
if(field.isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+field.getName());
}
duration=FieldUtils.safeAdd(duration,FieldUtils.safeMultiply(field.getUnitMillis(),value));
}
}

Time : 22/12/05 10:48
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<=isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/12/05 10:48
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<isize;i++){
int value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/12/05 10:48
----------------------------------------
Success time : 22/12/05 10:50
=================================================
Project : time_1	start : 22/12/05 10:50
Current failed test : org.joda.time.TestDateMidnight_Basics::testWithDurationAdded_RP_int | 22/12/05 10:50
Mon Dec 05 10:50:23 CST 2022 org.joda.time.chrono.BaseChronology,302

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=period.size();i<isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/12/05 10:55
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.4931000656296214 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>0,0]
for(int i=0,isize=size();i<isize;i++){
if(getValue(i)!=other.getValue(i)||getFieldType(i)!=other.getFieldType(i)){
return false;
}
}

Time : 22/12/05 10:55
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<=isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/12/05 10:55
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/12/05 10:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=period.size();i<isize;i++){
int value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/12/05 11:00
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.0263005524428803 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>0,0]
for(int i=0;i<period.size();i++){
int value=period.getValue(i);
if(value!=0){
DurationField field=period.getFieldType(i).getField(iso);
if(field.isPrecise()==false){
throw new IllegalArgumentException("Cannot convert period to duration as "+field.getName());
}
duration=FieldUtils.safeAdd(duration,FieldUtils.safeMultiply(field.getUnitMillis(),value));
}
}

Time : 22/12/05 11:00
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<=isize;i++){
long value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/12/05 11:00
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BaseChronology.java=>302,307]
for(int i=0,isize=period.size();i<isize;i++){
int value=period.getValue(i);
if(value!=0){
instant=period.getFieldType(i).getField(this).add(instant,value*scalar);
}
}

Time : 22/12/05 11:00
----------------------------------------
Success time : 22/12/05 11:02
=================================================
Project : time_1	start : 22/12/05 11:02
Current failed test : org.joda.time.TestAbstractPartial::testGetFieldTypes | 22/12/05 11:02
Mon Dec 05 11:02:47 CST 2022 org.joda.time.chrono.JulianChronology,261
Failed time : 22/12/05 11:02
=================================================
Project : time_1	start : 22/12/05 11:02
Current failed test : org.joda.time.TestAbstractPartial::testGetFieldTypes | 22/12/05 11:02
Mon Dec 05 11:03:02 CST 2022 org.joda.time.chrono.JulianChronology,261
Failed time : 22/12/05 11:03
=================================================
Project : time_1	start : 22/12/05 11:03
Current failed test : org.joda.time.format.TestDateTimeFormat::testFormat_year_twoDigit | 22/12/05 11:03
Mon Dec 05 11:03:18 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,1585

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'||c=='+'){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/12/05 11:10
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.4218801182216316 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>0,0]
if(c=='-'||c=='+'){
expectedPos++;
}

Time : 22/12/05 11:10
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(length==-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/12/05 11:10
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(c=='-'||c=='+'){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/12/05 11:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length!=-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/12/05 11:13
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.036706691099445 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>0,0]
for(int j=length;--j>=0;){
if(j!=i&&converters[j].getSupportedType().isAssignableFrom(supportedType)){
set=set.remove(j,null);
converters=set.iConverters;
length=converters.length;
i=length-1;
}
}

Time : 22/12/05 11:13
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(length==-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/12/05 11:13
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(length!=-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/12/05 11:13
----------------------------------------
Success time : 22/12/05 11:14
=================================================
Project : time_1	start : 22/12/05 11:14
Current failed test : org.joda.time.format.TestDateTimeFormat::testFormat_year_twoDigit | 22/12/05 11:14
Mon Dec 05 11:14:07 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,1585

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'||c=='+'){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/12/05 11:20
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.4218801182216316 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>0,0]
if(c=='-'||c=='+'){
expectedPos++;
}

Time : 22/12/05 11:20
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(length==-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/12/05 11:20
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(c=='-'||c=='+'){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/12/05 11:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length!=-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/12/05 11:23
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.036706691099445 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>0,0]
for(int j=length;--j>=0;){
if(j!=i&&converters[j].getSupportedType().isAssignableFrom(supportedType)){
set=set.remove(j,null);
converters=set.iConverters;
length=converters.length;
i=length-1;
}
}

Time : 22/12/05 11:23
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(length==-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/12/05 11:23
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java=>1585,1596]
if(length!=-1&&(c=='-'||c=='+')){
hasSignChar=true;
negative=c=='-';
if(negative){
length++;
}else {
position++;
limit--;
}
continue;
}

Time : 22/12/05 11:23
----------------------------------------
Success time : 22/12/05 11:24
=================================================
Project : time_1	start : 22/12/05 11:24
Current failed test : org.joda.time.chrono.TestISOChronology::testMaxYear | 22/12/05 11:24
Mon Dec 05 11:24:51 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,2294
Failed time : 22/12/05 11:25
=================================================
Project : time_1	start : 22/12/05 11:25
Current failed test : org.joda.time.chrono.TestISOChronology::testMaxYear | 22/12/05 11:25
Mon Dec 05 11:25:35 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,2294
Failed time : 22/12/05 11:26
=================================================
Project : time_1	start : 22/12/05 11:26
Current failed test : org.joda.time.TestBaseSingleFieldPeriod::testFactory_standardPeriodIn_RPeriod | 22/12/05 11:26
Mon Dec 05 11:26:19 CST 2022 org.joda.time.chrono.ZonedChronology,197
Failed time : 22/12/05 11:26
=================================================
Project : time_1	start : 22/12/05 11:26
Current failed test : org.joda.time.TestBaseSingleFieldPeriod::testFactory_standardPeriodIn_RPeriod | 22/12/05 11:26
Mon Dec 05 11:27:04 CST 2022 org.joda.time.chrono.ZonedChronology,197
Failed time : 22/12/05 11:27
=================================================
Project : time_1	start : 22/12/05 11:27
Current failed test : org.joda.time.TestPartial_Basics::testToString5 | 22/12/05 11:27
Mon Dec 05 11:27:52 CST 2022 org.joda.time.format.ISODateTimeFormat,187
Failed time : 22/12/05 11:28
=================================================
Project : time_1	start : 22/12/05 11:28
Current failed test : org.joda.time.TestPartial_Basics::testToString5 | 22/12/05 11:28
Mon Dec 05 11:28:54 CST 2022 org.joda.time.format.ISODateTimeFormat,187
Failed time : 22/12/05 11:29
=================================================
Project : time_1	start : 22/12/05 11:29
Current failed test : org.joda.time.TestMutablePeriod_Constructors::testConstructor_long_Chronology1 | 22/12/05 11:29
Mon Dec 05 11:29:51 CST 2022 org.joda.time.chrono.ZonedChronology,291
Failed time : 22/12/05 11:29
=================================================
Project : time_1	start : 22/12/05 11:29
Current failed test : org.joda.time.TestMutablePeriod_Constructors::testConstructor_long_Chronology1 | 22/12/05 11:29
Mon Dec 05 11:30:06 CST 2022 org.joda.time.chrono.ZonedChronology,291
Failed time : 22/12/05 11:30
=================================================
Project : time_1	start : 22/12/05 11:30
Current failed test : org.joda.time.TestDays::testAddToLocalDate | 22/12/05 11:30
Mon Dec 05 11:30:20 CST 2022 org.joda.time.LocalDate,1042
Failed time : 22/12/05 11:30
=================================================
Project : time_1	start : 22/12/05 11:30
Current failed test : org.joda.time.TestDays::testAddToLocalDate | 22/12/05 11:30
Mon Dec 05 11:30:45 CST 2022 org.joda.time.LocalDate,1042
Failed time : 22/12/05 11:31
=================================================
Project : time_1	start : 22/12/05 11:31
Current failed test : org.joda.time.TestAbstractPartial | 22/12/05 11:31
Mon Dec 05 11:31:09 CST 2022 org.joda.time.tz.ZoneInfoCompiler,303
=================================================
Project : time_1	start : 22/12/05 11:31
Current failed test : org.joda.time.TestAbstractPartial | 22/12/05 11:31
Mon Dec 05 11:31:23 CST 2022 org.joda.time.tz.ZoneInfoCompiler,303
=================================================
Project : time_1	start : 22/12/05 11:31
Current failed test : org.joda.time.TestDateMidnight_Properties::testPropertyAddWrapFieldMonthOfYear | 22/12/05 11:31
Mon Dec 05 11:31:40 CST 2022 org.joda.time.field.FieldUtils,316
Failed time : 22/12/05 11:32
=================================================
Project : time_1	start : 22/12/05 11:32
Current failed test : org.joda.time.TestDateMidnight_Properties::testPropertyAddWrapFieldMonthOfYear | 22/12/05 11:32
Mon Dec 05 11:32:30 CST 2022 org.joda.time.field.FieldUtils,316
Failed time : 22/12/05 11:33
=================================================
Project : time_1	start : 22/12/05 11:33
Current failed test : org.joda.time.TestIllegalFieldValueException::testReadablePartialValidate | 22/12/05 11:33
Mon Dec 05 11:33:21 CST 2022 org.joda.time.chrono.BasicDayOfMonthDateTimeField,84
Failed time : 22/12/05 11:36
=================================================
Project : time_1	start : 22/12/05 11:36
Current failed test : org.joda.time.TestIllegalFieldValueException::testReadablePartialValidate | 22/12/05 11:36
Mon Dec 05 11:36:08 CST 2022 org.joda.time.chrono.BasicDayOfMonthDateTimeField,84
Failed time : 22/12/05 11:38
=================================================
Project : time_1	start : 22/12/05 11:38
Current failed test : org.joda.time.TestDateTimeZone::testForOffsetHours_int | 22/12/05 11:38
Mon Dec 05 11:38:59 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,2379
Failed time : 22/12/05 11:47
=================================================
Project : time_1	start : 22/12/05 11:47
Current failed test : org.joda.time.TestDateTimeZone::testForOffsetHours_int | 22/12/05 11:47
Mon Dec 05 11:47:49 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,2379
Failed time : 22/12/05 11:54
=================================================
Project : time_1	start : 22/12/05 11:54
Current failed test : org.joda.time.TestBaseSingleFieldPeriod::testFactory_standardPeriodIn_RPeriod | 22/12/05 11:54
Mon Dec 05 11:54:48 CST 2022 org.joda.time.chrono.ISOChronology,106
Failed time : 22/12/05 11:54
=================================================
Project : time_1	start : 22/12/05 11:54
Current failed test : org.joda.time.TestBaseSingleFieldPeriod::testFactory_standardPeriodIn_RPeriod | 22/12/05 11:54
Mon Dec 05 11:54:56 CST 2022 org.joda.time.chrono.ISOChronology,106
Failed time : 22/12/05 11:54
=================================================
Project : time_1	start : 22/12/05 11:54
Current failed test : org.joda.time.format.TestDateTimeFormat::testFormatParse_textHalfdayAM_UK | 22/12/05 11:54
Mon Dec 05 11:55:05 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,1845

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(max%position>32){
return ~position;
}

Time : 22/12/05 11:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(max%position>max){
return ~position;
}

Time : 22/12/05 12:07
----------------------------------------
Failed time : 22/12/05 12:19
=================================================
Project : time_1	start : 22/12/05 12:19
Current failed test : org.joda.time.format.TestDateTimeFormat::testFormatParse_textHalfdayAM_UK | 22/12/05 12:19
Mon Dec 05 12:19:21 CST 2022 org.joda.time.format.DateTimeFormatterBuilder,1845

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(max%position>32){
return ~position;
}

Time : 22/12/05 12:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(max%position>max){
return ~position;
}

Time : 22/12/05 12:31
----------------------------------------
Failed time : 22/12/05 12:44
=================================================
Project : time_1	start : 22/12/05 12:44
Current failed test : org.joda.time.TestMutablePeriod_Constructors::testConstructor_long_PeriodType_Chronology1 | 22/12/05 12:44
Mon Dec 05 12:44:23 CST 2022 Mon Dec 05 12:44:23 CST 2022 : org.joda.time.PeriodType,341=>Find no block
Failed time : 22/12/05 12:44
=================================================
Project : time_1	start : 22/12/05 12:44
Current failed test : org.joda.time.TestMutablePeriod_Constructors::testConstructor_long_PeriodType_Chronology1 | 22/12/05 12:44
Mon Dec 05 12:44:35 CST 2022 Mon Dec 05 12:44:35 CST 2022 : org.joda.time.PeriodType,341=>Find no block
Failed time : 22/12/05 12:44
=================================================
Project : time_1	start : 22/12/05 12:44
Current failed test : org.joda.time.TestBaseSingleFieldPeriod::testToMutablePeriod | 22/12/05 12:44
Mon Dec 05 12:44:47 CST 2022 org.joda.time.base.BasePeriod,583
Failed time : 22/12/05 12:47
=================================================
Project : time_1	start : 22/12/05 12:47
Current failed test : org.joda.time.TestBaseSingleFieldPeriod::testToMutablePeriod | 22/12/05 12:47
Mon Dec 05 12:48:02 CST 2022 org.joda.time.base.BasePeriod,583
Failed time : 22/12/05 12:51
=================================================
Project : time_1	start : 22/12/05 12:51
Current failed test : org.joda.time.TestLocalDateTime_Basics::testToDate_autumnDST | 22/12/05 12:51
Mon Dec 05 12:51:24 CST 2022 org.joda.time.LocalDateTime,857
Failed time : 22/12/05 12:51
=================================================
Project : time_1	start : 22/12/05 12:51
Current failed test : org.joda.time.TestLocalDateTime_Basics::testToDate_autumnDST | 22/12/05 12:51
Mon Dec 05 12:51:37 CST 2022 org.joda.time.LocalDateTime,857
Failed time : 22/12/05 12:51
=================================================
Project : time_1	start : 22/12/05 12:51
Current failed test : org.joda.time.TestDateMidnight_Basics::testWithers | 22/12/05 12:51
Mon Dec 05 12:51:50 CST 2022 org.joda.time.field.DividedDateTimeField,251

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value!=0){
return value%iDivisor;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}

Time : 22/12/05 12:52
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.5551338658818383 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/field/DividedDateTimeField.java=>0,0]
if(value!=Integer.MIN_VALUE){
value=-value;
}else {
buf.append(""+-(long)Integer.MIN_VALUE);
return ;
}

Time : 22/12/05 12:52
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/field/DividedDateTimeField.java=>251,255]
if(value==0){
return value%iDivisor;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}

Time : 22/12/05 12:52
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/field/DividedDateTimeField.java=>251,255]
if(value!=0){
return value%iDivisor;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}

Time : 22/12/05 12:52
----------------------------------------
Success time : 22/12/05 12:53
=================================================
Project : time_1	start : 22/12/05 12:53
Current failed test : org.joda.time.TestDateMidnight_Basics::testWithers | 22/12/05 12:53
Mon Dec 05 12:53:44 CST 2022 org.joda.time.field.DividedDateTimeField,251

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value!=0){
return value%iDivisor;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}

Time : 22/12/05 12:54
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.5551338658818383 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/field/DividedDateTimeField.java=>0,0]
if(value!=Integer.MIN_VALUE){
value=-value;
}else {
buf.append(""+-(long)Integer.MIN_VALUE);
return ;
}

Time : 22/12/05 12:54
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/field/DividedDateTimeField.java=>251,255]
if(value==0){
return value%iDivisor;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}

Time : 22/12/05 12:54
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/field/DividedDateTimeField.java=>251,255]
if(value!=0){
return value%iDivisor;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}

Time : 22/12/05 12:54
----------------------------------------
Success time : 22/12/05 12:55
=================================================
Project : time_1	start : 22/12/05 12:55
Current failed test : org.joda.time.TestMutableInterval_Updates::testSePeriodAfterStart_RI2 | 22/12/05 12:55
Mon Dec 05 12:55:45 CST 2022 org.joda.time.chrono.BaseChronology,278
Failed time : 22/12/05 12:59
=================================================
Project : time_1	start : 22/12/05 12:59
Current failed test : org.joda.time.TestMutableInterval_Updates::testSePeriodAfterStart_RI2 | 22/12/05 12:59
Mon Dec 05 12:59:51 CST 2022 org.joda.time.chrono.BaseChronology,278
Failed time : 22/12/05 13:03
=================================================
Project : time_1	start : 22/12/05 13:03
Current failed test : org.joda.time.TestYearMonthDay_Properties::testPropertyAddMonth | 22/12/05 13:03
Mon Dec 05 13:04:05 CST 2022 org.joda.time.chrono.BasicMonthOfYearDateTimeField,218

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=partial.size();i<isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/12/05 13:04
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.9596530023081282 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>0,0]
for(int i=0,isize=partial.size();i<isize;i++){
instant=partial.getFieldType(i).getField(this).set(instant,values[i]);
}

Time : 22/12/05 13:04
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<=isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/12/05 13:04
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/12/05 13:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=partial.size();i<values.length;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/12/05 13:05
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.4193667619628192 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>0,0]
long end=interval.getEndMillis();
int[] values=chrono.get(writablePeriod,start,end);
for(int i=0;i<values.length;i++){
writablePeriod.setValue(i,values[i]);
}

Time : 22/12/05 13:05
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<=isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/12/05 13:05
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<values.length;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/12/05 13:05
----------------------------------------
Success time : 22/12/05 13:07
=================================================
Project : time_1	start : 22/12/05 13:07
Current failed test : org.joda.time.TestYearMonthDay_Properties::testPropertyAddMonth | 22/12/05 13:07
Mon Dec 05 13:07:29 CST 2022 org.joda.time.chrono.BasicMonthOfYearDateTimeField,218

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=partial.size();i<isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/12/05 13:07
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 2.9596530023081282 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>0,0]
for(int i=0,isize=partial.size();i<isize;i++){
instant=partial.getFieldType(i).getField(this).set(instant,values[i]);
}

Time : 22/12/05 13:07
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<=isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/12/05 13:07
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/12/05 13:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=partial.size();i<values.length;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/12/05 13:09
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.4193667619628192 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>0,0]
long end=interval.getEndMillis();
int[] values=chrono.get(writablePeriod,start,end);
for(int i=0;i<values.length;i++){
writablePeriod.setValue(i,values[i]);
}

Time : 22/12/05 13:09
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<=isize;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/12/05 13:09
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java=>218,220]
for(int i=0,isize=partial.size();i<values.length;i++){
instant=partial.getFieldType(i).getField(iChronology).set(instant,values[i]);
}

Time : 22/12/05 13:09
----------------------------------------
Success time : 22/12/05 13:10
=================================================
Project : time_1	start : 22/12/05 13:10
Current failed test : org.joda.time.TestDateMidnight_Constructors::testConstructor_nullObject_Chronology | 22/12/05 13:10
Mon Dec 05 13:10:51 CST 2022 org.joda.time.convert.ConverterSet,226
Failed time : 22/12/05 13:11
=================================================
Project : time_1	start : 22/12/05 13:11
Current failed test : org.joda.time.TestDateMidnight_Constructors::testConstructor_nullObject_Chronology | 22/12/05 13:12
Mon Dec 05 13:12:10 CST 2022 org.joda.time.convert.ConverterSet,226
Failed time : 22/12/05 13:13
=================================================
Project : time_1	start : 22/12/05 13:13
Current failed test : org.joda.time.TestSeconds::testFactory_parseSeconds_String | 22/12/05 13:13
Mon Dec 05 13:13:23 CST 2022 org.joda.time.format.PeriodFormatterBuilder,1278

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c<'0'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c<'0'&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'||c=='+'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&c=='+'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'&&c=='+'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(c=='-'||c=='+')){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position);
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if((c>='.'||c==',')&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if(c<'0'||c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if(c<'0'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if((c>='.'||c==',')&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if(c<'0'&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==position&&iRejectSignedValues)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==position&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType>position&&(iFieldType==SECONDS_MILLIS&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType>position&&(iFieldType==position&&iRejectSignedValues)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType>position&&(iFieldType==position&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iRejectSignedValues&&position==iFieldType&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(position<0){
return position;
}
if(iRejectSignedValues&&position==iFieldType&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType=='s')){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType=='S'||iFieldType=='s')){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='P'||c=='p'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='P'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&c=='p'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='P'&&c=='p'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:30
----------------------------------------
Failed time : 22/12/05 13:31
=================================================
Project : time_1	start : 22/12/05 13:31
Current failed test : org.joda.time.TestSeconds::testFactory_parseSeconds_String | 22/12/05 13:31
Mon Dec 05 13:31:34 CST 2022 org.joda.time.format.PeriodFormatterBuilder,1278

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c<'0'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c<'0'&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType==0&&(c=='-'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c=='+')&&!iRejectSignedValues){
if(iFieldType+1>=limit||(c=text.charAt(position+iFieldType))<'0'||c>'9'){
break;
}
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
limit=Math.min(limit+1,text.length()-position);
break;
}

Time : 22/12/05 13:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'||c=='+'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&c=='+'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='-'&&c=='+'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(c=='-'||c=='+')){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position);
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if((c>='.'||c==',')&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if(c<'0'||c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if(c<'0'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if((c>='.'||c==',')&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
c=text.charAt(position+1);
if(c<'0'||c>'9'){
return ~position;
}
if(c<'0'&&c>'9'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==position&&iRejectSignedValues)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==position&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType>position&&(iFieldType==SECONDS_MILLIS&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType>position&&(iFieldType==position&&iRejectSignedValues)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iFieldType>position&&(iFieldType==position&&iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iRejectSignedValues&&position==iFieldType&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(position<0){
return position;
}
if(iRejectSignedValues&&position==iFieldType&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType==SECONDS_MILLIS||iFieldType=='s')){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&(iFieldType=='S'||iFieldType=='s')){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='P'||c=='p'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='P'&&(iFieldType==SECONDS_MILLIS||iFieldType==SECONDS_OPTIONAL_MILLIS)){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='.'||c==',')&&c=='p'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c=='P'&&c=='p'){
if(fractPos>=0){
break;
}
fractPos=position+length;
limit=Math.min(limit+1,text.length()-position);
}else {
break;
}

Time : 22/12/05 13:47
----------------------------------------
Failed time : 22/12/05 13:48
=================================================
Project : time_1	start : 22/12/05 13:48
Current failed test : org.joda.time.TestInterval_Basics::testWithPeriodAfterStart1 | 22/12/05 13:48
Mon Dec 05 13:48:26 CST 2022 org.joda.time.chrono.CopticChronology,223
Failed time : 22/12/05 13:52
=================================================
Project : time_1	start : 22/12/05 13:52
Current failed test : org.joda.time.TestInterval_Basics::testWithPeriodAfterStart1 | 22/12/05 13:52
Mon Dec 05 13:52:33 CST 2022 org.joda.time.chrono.CopticChronology,223
Failed time : 22/12/05 13:56
=================================================
Project : time_1	start : 22/12/05 13:56
Current failed test : org.joda.time.TestAbstractPartial | 22/12/05 13:56
Mon Dec 05 13:56:32 CST 2022 org.joda.time.tz.ZoneInfoProvider,275
=================================================
Project : time_1	start : 22/12/05 13:56
Current failed test : org.joda.time.TestAbstractPartial | 22/12/05 13:56
Mon Dec 05 13:56:41 CST 2022 org.joda.time.tz.ZoneInfoProvider,275
=================================================
Project : time_1	start : 22/12/06 12:08
Current failed test : org.joda.time.TestDuration_Basics::testToPeriod | 22/12/06 12:08
Tue Dec 06 12:09:02 CST 2022 Tue Dec 06 12:09:02 CST 2022 : org.joda.time.PeriodType,112=>Find no block
Failed time : 22/12/06 12:09
=================================================
Project : time_1	start : 22/12/06 12:09
Current failed test : org.joda.time.TestDuration_Basics::testToPeriod | 22/12/06 12:09
Tue Dec 06 12:09:07 CST 2022 Tue Dec 06 12:09:07 CST 2022 : org.joda.time.PeriodType,112=>Find no block
Failed time : 22/12/06 12:09
=================================================
Project : time_1	start : 22/12/06 12:09
Current failed test : org.joda.time.chrono.TestIslamicChronology::testSampleDateWithZone | 22/12/06 12:09
Tue Dec 06 12:09:13 CST 2022 org.joda.time.chrono.IslamicChronology,318
Failed time : 22/12/06 12:09
=================================================
Project : time_1	start : 22/12/06 12:09
Current failed test : org.joda.time.chrono.TestIslamicChronology::testSampleDateWithZone | 22/12/06 12:09
Tue Dec 06 12:09:19 CST 2022 org.joda.time.chrono.IslamicChronology,318
Failed time : 22/12/06 12:09
=================================================
Project : time_1	start : 22/12/06 12:09
Current failed test : org.joda.time.TestDateMidnight_Properties::testPropertyGetDifferenceMonthOfYear | 22/12/06 12:09
Tue Dec 06 12:09:25 CST 2022 Tue Dec 06 12:09:25 CST 2022 : org.joda.time.chrono.ZonedChronology,510=>Find no block
Failed time : 22/12/06 12:09
=================================================
Project : time_1	start : 22/12/06 12:09
Current failed test : org.joda.time.TestDateMidnight_Properties::testPropertyGetDifferenceMonthOfYear | 22/12/06 12:09
Tue Dec 06 12:09:30 CST 2022 Tue Dec 06 12:09:30 CST 2022 : org.joda.time.chrono.ZonedChronology,510=>Find no block
Failed time : 22/12/06 12:09
=================================================
Project : time_1	start : 22/12/06 12:09
Current failed test : org.joda.time.TestInstant_Basics::testWithDurationAdded_RD_int | 22/12/06 12:09
Tue Dec 06 12:09:36 CST 2022 org.joda.time.Instant,171
Failed time : 22/12/06 12:09
=================================================
Project : time_1	start : 22/12/06 12:09
Current failed test : org.joda.time.TestInstant_Basics::testWithDurationAdded_RD_int | 22/12/06 12:09
Tue Dec 06 12:09:41 CST 2022 org.joda.time.Instant,171
Failed time : 22/12/06 12:09
=================================================
Project : time_1	start : 22/12/06 12:09
Current failed test : org.joda.time.TestDateMidnight_Basics::testWithers | 22/12/06 12:09
Tue Dec 06 12:09:47 CST 2022 Tue Dec 06 12:09:47 CST 2022 : org.joda.time.chrono.BasicGJChronology,104=>Find no block
Failed time : 22/12/06 12:09
=================================================
Project : time_1	start : 22/12/06 12:09
Current failed test : org.joda.time.TestDateMidnight_Basics::testWithers | 22/12/06 12:09
Tue Dec 06 12:09:53 CST 2022 Tue Dec 06 12:09:53 CST 2022 : org.joda.time.chrono.BasicGJChronology,104=>Find no block
Failed time : 22/12/06 12:09
=================================================
Project : time_1	start : 22/12/06 12:09
Current failed test : org.joda.time.TestMonths::testPlus_Months | 22/12/06 12:09
Tue Dec 06 12:09:58 CST 2022 org.joda.time.Months,279
Failed time : 22/12/06 12:09
=================================================
Project : time_1	start : 22/12/06 12:09
Current failed test : org.joda.time.TestMonths::testPlus_Months | 22/12/06 12:10
Tue Dec 06 12:10:04 CST 2022 org.joda.time.Months,279
Failed time : 22/12/06 12:10
=================================================
Project : time_1	start : 22/12/06 21:42
Current failed test : org.joda.time.convert.TestConverterManager::testGetPartialConverterRemovedNull | 22/12/06 21:42
Tue Dec 06 21:42:58 CST 2022 Tue Dec 06 21:42:58 CST 2022 : org.joda.time.convert.ConverterManager,253=>Find no block
Failed time : 22/12/06 21:42
=================================================
Project : time_1	start : 22/12/06 21:42
Current failed test : org.joda.time.convert.TestConverterManager::testGetPartialConverterRemovedNull | 22/12/06 21:42
Tue Dec 06 21:43:03 CST 2022 Tue Dec 06 21:43:03 CST 2022 : org.joda.time.convert.ConverterManager,253=>Find no block
Failed time : 22/12/06 21:43
=================================================
Project : time_1	start : 22/12/06 21:43
Current failed test : org.joda.time.chrono.TestGJChronology::testCutoverAddDays | 22/12/06 21:43
Tue Dec 06 21:43:09 CST 2022 org.joda.time.DateTime,831
Failed time : 22/12/06 21:43
=================================================
Project : time_1	start : 22/12/06 21:43
Current failed test : org.joda.time.chrono.TestGJChronology::testCutoverAddDays | 22/12/06 21:43
Tue Dec 06 21:43:15 CST 2022 org.joda.time.DateTime,831
Failed time : 22/12/06 21:43
=================================================
Project : time_1	start : 22/12/06 21:43
Current failed test : org.joda.time.TestInterval_Basics::testGetDuration2 | 22/12/06 21:43
Tue Dec 06 21:43:21 CST 2022 org.joda.time.base.AbstractInterval,415
Failed time : 22/12/06 21:43
=================================================
Project : time_1	start : 22/12/06 21:43
Current failed test : org.joda.time.TestInterval_Basics::testGetDuration2 | 22/12/06 21:43
Tue Dec 06 21:43:27 CST 2022 org.joda.time.base.AbstractInterval,415
Failed time : 22/12/06 21:43
=================================================
Project : time_1	start : 22/12/06 21:43
Current failed test : org.joda.time.TestLocalDate_Basics::testCompareTo | 22/12/06 21:43
Tue Dec 06 21:43:33 CST 2022 Tue Dec 06 21:43:33 CST 2022 : org.joda.time.LocalDate,683=>Find no block
Failed time : 22/12/06 21:43
=================================================
Project : time_1	start : 22/12/06 21:43
Current failed test : org.joda.time.TestLocalDate_Basics::testCompareTo | 22/12/06 21:43
Tue Dec 06 21:43:38 CST 2022 Tue Dec 06 21:43:38 CST 2022 : org.joda.time.LocalDate,683=>Find no block
Failed time : 22/12/06 21:43
=================================================
Project : time_1	start : 22/12/06 21:43
Current failed test : org.joda.time.TestYearMonth_Basics::testMinusMonths_int | 22/12/06 21:43
Tue Dec 06 21:43:44 CST 2022 org.joda.time.YearMonth,507
Failed time : 22/12/06 21:43
=================================================
Project : time_1	start : 22/12/06 21:43
Current failed test : org.joda.time.TestYearMonth_Basics::testMinusMonths_int | 22/12/06 21:43
Tue Dec 06 21:43:50 CST 2022 org.joda.time.YearMonth,507
Failed time : 22/12/06 21:43
=================================================
Project : time_1	start : 22/12/06 21:43
Current failed test : org.joda.time.TestLocalDateTime_Basics::testGetFieldTypes | 22/12/06 21:43
Tue Dec 06 21:43:57 CST 2022 org.joda.time.LocalDateTime,539
Failed time : 22/12/06 21:43
=================================================
Project : time_1	start : 22/12/06 21:43
Current failed test : org.joda.time.TestLocalDateTime_Basics::testGetFieldTypes | 22/12/06 21:43
Tue Dec 06 21:44:02 CST 2022 org.joda.time.LocalDateTime,539
Failed time : 22/12/06 21:44
=================================================
Project : time_1	start : 22/12/06 21:44
Current failed test : org.joda.time.TestPartial_Basics::testWith2 | 22/12/06 21:44
Tue Dec 06 21:44:09 CST 2022 org.joda.time.Partial,438
Failed time : 22/12/06 21:44
=================================================
Project : time_1	start : 22/12/06 21:44
Current failed test : org.joda.time.TestPartial_Basics::testWith2 | 22/12/06 21:44
Tue Dec 06 21:44:14 CST 2022 org.joda.time.Partial,438
Failed time : 22/12/06 21:44
=================================================
Project : time_1	start : 22/12/06 21:44
Current failed test : org.joda.time.TestDuration_Basics::testToStandardHours | 22/12/06 21:44
Tue Dec 06 21:44:21 CST 2022 org.joda.time.Duration,248
Failed time : 22/12/06 21:44
=================================================
Project : time_1	start : 22/12/06 21:44
Current failed test : org.joda.time.TestDuration_Basics::testToStandardHours | 22/12/06 21:44
Tue Dec 06 21:44:27 CST 2022 org.joda.time.Duration,248
Failed time : 22/12/06 21:44
=================================================
Project : time_1	start : 22/12/06 21:44
Current failed test : org.joda.time.TestYears::testIsGreaterThan | 22/12/06 21:44
Tue Dec 06 21:44:33 CST 2022 org.joda.time.Years,330
Failed time : 22/12/06 21:44
=================================================
Project : time_1	start : 22/12/06 21:44
Current failed test : org.joda.time.TestYears::testIsGreaterThan | 22/12/06 21:44
Tue Dec 06 21:44:39 CST 2022 org.joda.time.Years,330
Failed time : 22/12/06 21:44
=================================================
Project : time_1	start : 22/12/06 21:44
Current failed test : org.joda.time.TestMutableDateTime_Sets::testSetTime_int_int_int_int1 | 22/12/06 21:44
Tue Dec 06 21:44:45 CST 2022 Tue Dec 06 21:44:45 CST 2022 : org.joda.time.chrono.ZonedChronology,129=>Find no block
Failed time : 22/12/06 21:44
=================================================
Project : time_1	start : 22/12/06 21:44
Current failed test : org.joda.time.TestMutableDateTime_Sets::testSetTime_int_int_int_int1 | 22/12/06 21:44
Tue Dec 06 21:44:50 CST 2022 Tue Dec 06 21:44:50 CST 2022 : org.joda.time.chrono.ZonedChronology,129=>Find no block
Failed time : 22/12/06 21:44
=================================================
Project : time_1	start : 22/12/06 21:44
Current failed test : org.joda.time.TestPeriod_Basics::testMinusFields | 22/12/06 21:44
Tue Dec 06 21:44:56 CST 2022 org.joda.time.Period,1068
Failed time : 22/12/06 21:44
=================================================
Project : time_1	start : 22/12/06 21:44
Current failed test : org.joda.time.TestPeriod_Basics::testMinusFields | 22/12/06 21:44
Tue Dec 06 21:45:02 CST 2022 org.joda.time.Period,1068
Failed time : 22/12/06 21:45
=================================================
Project : time_1	start : 22/12/06 21:45
Current failed test : org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_nullDateTimeZone | 22/12/06 21:45
Tue Dec 06 21:45:08 CST 2022 Tue Dec 06 21:45:08 CST 2022 : org.joda.time.DateTime,408=>Find no block
Failed time : 22/12/06 21:45
=================================================
Project : time_1	start : 22/12/06 21:45
Current failed test : org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_nullDateTimeZone | 22/12/06 21:45
Tue Dec 06 21:45:13 CST 2022 Tue Dec 06 21:45:13 CST 2022 : org.joda.time.DateTime,408=>Find no block
Failed time : 22/12/06 21:45
=================================================
Project : time_1	start : 22/12/06 21:45
Current failed test : org.joda.time.TestDays::testPlus_int | 22/12/06 21:45
Tue Dec 06 21:45:19 CST 2022 org.joda.time.Days,357
Failed time : 22/12/06 21:45
=================================================
Project : time_1	start : 22/12/06 21:45
Current failed test : org.joda.time.TestDays::testPlus_int | 22/12/06 21:45
Tue Dec 06 21:45:25 CST 2022 org.joda.time.Days,357
Failed time : 22/12/06 21:45
=================================================
Project : time_1	start : 22/12/06 21:45
Current failed test : org.joda.time.TestAbstractPartial::testGetFieldTypes | 22/12/06 21:45
Tue Dec 06 21:45:31 CST 2022 org.joda.time.chrono.JulianChronology,261
Failed time : 22/12/06 21:45
=================================================
Project : time_1	start : 22/12/06 21:45
Current failed test : org.joda.time.TestAbstractPartial::testGetFieldTypes | 22/12/06 21:45
Tue Dec 06 21:45:37 CST 2022 org.joda.time.chrono.JulianChronology,261
Failed time : 22/12/06 21:45
=================================================
Project : time_1	start : 22/12/06 21:45
Current failed test : org.joda.time.TestAbstractPartial | 22/12/06 21:45
Tue Dec 06 21:45:43 CST 2022 org.joda.time.tz.ZoneInfoCompiler,303
=================================================
Project : time_1	start : 22/12/06 21:45
Current failed test : org.joda.time.TestAbstractPartial | 22/12/06 21:45
Tue Dec 06 21:45:50 CST 2022 org.joda.time.tz.ZoneInfoCompiler,303
=================================================
Project : time_1	start : 22/12/06 21:45
Current failed test : org.joda.time.TestBaseSingleFieldPeriod::testFactory_standardPeriodIn_RPeriod | 22/12/06 21:45
Tue Dec 06 21:45:58 CST 2022 org.joda.time.chrono.ISOChronology,106
Failed time : 22/12/06 21:45
=================================================
Project : time_1	start : 22/12/06 21:45
Current failed test : org.joda.time.TestBaseSingleFieldPeriod::testFactory_standardPeriodIn_RPeriod | 22/12/06 21:45
Tue Dec 06 21:46:03 CST 2022 org.joda.time.chrono.ISOChronology,106
Failed time : 22/12/06 21:46
=================================================
Project : time_1	start : 22/12/06 21:46
Current failed test : org.joda.time.TestMutablePeriod_Constructors::testConstructor_long_PeriodType_Chronology1 | 22/12/06 21:46
Tue Dec 06 21:46:10 CST 2022 Tue Dec 06 21:46:10 CST 2022 : org.joda.time.PeriodType,341=>Find no block
Failed time : 22/12/06 21:46
=================================================
Project : time_1	start : 22/12/06 21:46
Current failed test : org.joda.time.TestMutablePeriod_Constructors::testConstructor_long_PeriodType_Chronology1 | 22/12/06 21:46
Tue Dec 06 21:46:15 CST 2022 Tue Dec 06 21:46:15 CST 2022 : org.joda.time.PeriodType,341=>Find no block
Failed time : 22/12/06 21:46
=================================================
Project : time_1	start : 22/12/06 21:46
Current failed test : org.joda.time.TestLocalDateTime_Basics::testToDate_autumnDST | 22/12/06 21:46
Tue Dec 06 21:46:21 CST 2022 org.joda.time.LocalDateTime,857
Failed time : 22/12/06 21:46
=================================================
Project : time_1	start : 22/12/06 21:46
Current failed test : org.joda.time.TestLocalDateTime_Basics::testToDate_autumnDST | 22/12/06 21:46
Tue Dec 06 21:46:27 CST 2022 org.joda.time.LocalDateTime,857
Failed time : 22/12/06 21:46
=================================================
Project : time_1	start : 22/12/09 09:44
=================================================
Project : time_1	start : 22/12/09 09:44
=================================================
Project : time_1	start : 22/12/09 09:44
=================================================
Project : time_1	start : 22/12/09 09:44
=================================================
Project : time_1	start : 22/12/09 09:46
Current failed test : org.joda.time.TestDateMidnight_Basics::testToString_String | 22/12/09 09:46
Fri Dec 09 09:47:02 CST 2022 org.joda.time.tz.DateTimeZoneBuilder,187
Failed time : 22/12/09 09:47
=================================================
Project : time_1	start : 22/12/09 09:47
Current failed test : org.joda.time.TestDateMidnight_Basics::testToString_String | 22/12/09 09:47
Fri Dec 09 09:47:10 CST 2022 org.joda.time.tz.DateTimeZoneBuilder,187
Failed time : 22/12/09 09:47
=================================================
Project : time_1	start : 22/12/09 09:47
Current failed test : org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldYear | 22/12/09 09:47
Fri Dec 09 09:47:19 CST 2022 org.joda.time.chrono.GregorianChronology,209
Failed time : 22/12/09 09:47
=================================================
Project : time_1	start : 22/12/09 09:47
Current failed test : org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldYear | 22/12/09 09:47
Fri Dec 09 09:47:42 CST 2022 org.joda.time.chrono.GregorianChronology,209
Failed time : 22/12/09 09:48
=================================================
Project : time_1	start : 22/12/09 09:48
Current failed test : org.joda.time.TestChronology::testTest | 22/12/09 09:48
Fri Dec 09 09:48:07 CST 2022 org.joda.time.format.FormatUtils,77
Failed time : 22/12/09 09:49
=================================================
Project : time_1	start : 22/12/09 09:49
Current failed test : org.joda.time.TestChronology::testTest | 22/12/09 09:49
Fri Dec 09 09:49:06 CST 2022 org.joda.time.format.FormatUtils,77
Failed time : 22/12/09 09:50
=================================================
Project : time_1	start : 22/12/09 09:50
Current failed test : org.joda.time.TestDuration_Constructors::testConstructor_Object4 | 22/12/09 09:50
Fri Dec 09 09:50:06 CST 2022 org.joda.time.base.BaseDuration,91
Failed time : 22/12/09 09:50
=================================================
Project : time_1	start : 22/12/09 09:50
Current failed test : org.joda.time.TestDuration_Constructors::testConstructor_Object4 | 22/12/09 09:50
Fri Dec 09 09:50:30 CST 2022 org.joda.time.base.BaseDuration,91
Failed time : 22/12/09 09:50
=================================================
Project : time_1	start : 22/12/09 09:50
Current failed test : org.joda.time.TestDateMidnight_Basics::testMinusWeeks_int | 22/12/09 09:50
Fri Dec 09 09:50:54 CST 2022 org.joda.time.DurationField,212

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
return add(instant,-value);

Time : 22/12/09 09:52
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.9396184772996343 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/DurationField.java=>0,0]
if(value==Long.MIN_VALUE){
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return add(instant,-value);

Time : 22/12/09 09:52
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/DurationField.java=>209,212]
if(value==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
return add(instant,+value);

Time : 22/12/09 09:52
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/DurationField.java=>209,212]
if(value==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
return add(instant,-value);

Time : 22/12/09 09:52
----------------------------------------
Success time : 22/12/09 09:53
=================================================
Project : time_1	start : 22/12/09 09:53
Current failed test : org.joda.time.TestDateMidnight_Basics::testMinusWeeks_int | 22/12/09 09:53
Fri Dec 09 09:53:27 CST 2022 org.joda.time.DurationField,212

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
return add(instant,-value);

Time : 22/12/09 09:54
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.9396184772996343 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/DurationField.java=>0,0]
if(value==Long.MIN_VALUE){
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return add(instant,-value);

Time : 22/12/09 09:54
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/DurationField.java=>209,212]
if(value==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
return add(instant,+value);

Time : 22/12/09 09:54
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/DurationField.java=>209,212]
if(value==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
return add(instant,-value);

Time : 22/12/09 09:54
----------------------------------------
Success time : 22/12/09 09:55
=================================================
Project : time_1	start : 22/12/09 09:55
Current failed test : org.joda.time.TestDateMidnight_Basics::testMinus_RD | 22/12/09 09:55
Fri Dec 09 09:56:03 CST 2022 org.joda.time.field.FieldUtils,141
Failed time : 22/12/09 09:56
=================================================
Project : time_1	start : 22/12/09 09:56
Current failed test : org.joda.time.TestDateMidnight_Basics::testMinus_RD | 22/12/09 09:56
Fri Dec 09 09:56:48 CST 2022 org.joda.time.field.FieldUtils,141
Failed time : 22/12/09 09:57
=================================================
Project : time_1	start : 22/12/09 09:57
Current failed test : org.joda.time.TestPeriod_Basics::testMinusFields | 22/12/09 09:57
Fri Dec 09 09:57:34 CST 2022 org.joda.time.Period,1320
Failed time : 22/12/09 09:57
=================================================
Project : time_1	start : 22/12/09 09:57
Current failed test : org.joda.time.TestPeriod_Basics::testMinusFields | 22/12/09 09:57
Fri Dec 09 09:57:40 CST 2022 org.joda.time.Period,1320
Failed time : 22/12/09 09:57
=================================================
Project : time_1	start : 22/12/09 09:57
Current failed test : org.joda.time.tz.TestBuilder::testSerialization | 22/12/09 09:57
Fri Dec 09 09:57:47 CST 2022 org.joda.time.tz.DateTimeZoneBuilder,1555
Failed time : 22/12/09 09:58
=================================================
Project : time_1	start : 22/12/09 09:58
Current failed test : org.joda.time.tz.TestBuilder::testSerialization | 22/12/09 09:59
Fri Dec 09 09:59:04 CST 2022 org.joda.time.tz.DateTimeZoneBuilder,1555
Failed time : 22/12/09 10:00
=================================================
Project : time_1	start : 22/12/09 10:00
Current failed test : org.joda.time.TestDateMidnight_Basics::testWithers | 22/12/09 10:00
Fri Dec 09 10:00:22 CST 2022 org.joda.time.chrono.GJEraDateTimeField,86
Failed time : 22/12/09 10:01
=================================================
Project : time_1	start : 22/12/09 10:01
Current failed test : org.joda.time.TestDateMidnight_Basics::testWithers | 22/12/09 10:01
Fri Dec 09 10:01:43 CST 2022 org.joda.time.chrono.GJEraDateTimeField,86
Failed time : 22/12/09 10:02
=================================================
Project : time_1	start : 22/12/09 10:02
Current failed test : org.joda.time.TestPeriod_Basics::testMinusFields | 22/12/09 10:02
Fri Dec 09 10:03:04 CST 2022 org.joda.time.Period,1281
Failed time : 22/12/09 10:03
=================================================
Project : time_1	start : 22/12/09 10:03
Current failed test : org.joda.time.TestPeriod_Basics::testMinusFields | 22/12/09 10:03
Fri Dec 09 10:03:10 CST 2022 org.joda.time.Period,1281
Failed time : 22/12/09 10:03
=================================================
Project : time_1	start : 22/12/09 10:03
Current failed test : org.joda.time.TestDuration_Constructors::testConstructor_long_long1 | 22/12/09 10:03
Fri Dec 09 10:03:16 CST 2022 org.joda.time.base.BaseDuration,74
Failed time : 22/12/09 10:03
=================================================
Project : time_1	start : 22/12/09 10:03
Current failed test : org.joda.time.TestDuration_Constructors::testConstructor_long_long1 | 22/12/09 10:03
Fri Dec 09 10:03:33 CST 2022 org.joda.time.base.BaseDuration,74
Failed time : 22/12/09 10:03
=================================================
Project : time_1	start : 22/12/09 10:03
Current failed test : org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI4 | 22/12/09 10:03
Fri Dec 09 10:03:49 CST 2022 org.joda.time.chrono.BasicYearDateTimeField,90
Failed time : 22/12/09 10:03
=================================================
Project : time_1	start : 22/12/09 10:03
Current failed test : org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI4 | 22/12/09 10:03
Fri Dec 09 10:04:00 CST 2022 org.joda.time.chrono.BasicYearDateTimeField,90
Failed time : 22/12/09 10:04
=================================================
Project : time_1	start : 22/12/09 10:04
Current failed test : org.joda.time.convert.TestConverterSet::testBigHashtable | 22/12/09 10:04
Fri Dec 09 10:04:12 CST 2022 org.joda.time.convert.ConverterSet,100

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=length;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/12/09 10:05
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.353152939456997 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>0,0]
for(int i=length;--i>=0;){
converter=converters[i];
Class<?> supportedType=converter.getSupportedType();
if(supportedType==type){
return converter;
}
if(supportedType==null||(type!=null&&!supportedType.isAssignableFrom(type))){
set=set.remove(i,null);
converters=set.iConverters;
length=converters.length;
}
}

Time : 22/12/09 10:05
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=0;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/12/09 10:05
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=length;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/12/09 10:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=newLength;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/12/09 10:05
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.1336721717828449 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>0,0]
for(int i=limit;i>position;i--){
String match=text.substring(position,i);
if(validValues.contains(match)){
bucket.saveField(iFieldType,match,locale);
return i;
}
}

Time : 22/12/09 10:06
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=0;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/12/09 10:06
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=newLength;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/12/09 10:06
----------------------------------------
Success time : 22/12/09 10:06
=================================================
Project : time_1	start : 22/12/09 10:06
Current failed test : org.joda.time.convert.TestConverterSet::testBigHashtable | 22/12/09 10:06
Fri Dec 09 10:06:22 CST 2022 org.joda.time.convert.ConverterSet,100

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=length;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/12/09 10:07
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.353152939456997 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>0,0]
for(int i=length;--i>=0;){
converter=converters[i];
Class<?> supportedType=converter.getSupportedType();
if(supportedType==type){
return converter;
}
if(supportedType==null||(type!=null&&!supportedType.isAssignableFrom(type))){
set=set.remove(i,null);
converters=set.iConverters;
length=converters.length;
}
}

Time : 22/12/09 10:07
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=0;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/12/09 10:07
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=length;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/12/09 10:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=newLength;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/12/09 10:08
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.1336721717828449 : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>0,0]
for(int i=limit;i>position;i--){
String match=text.substring(position,i);
if(validValues.contains(match)){
bucket.saveField(iFieldType,match,locale);
return i;
}
}

Time : 22/12/09 10:08
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=0;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/12/09 10:08
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/jun/research/dlapr/repo_simfix/time/time_1_buggy/src/main/java/org/joda/time/convert/ConverterSet.java=>97,107]
for(int i=newLength;i<length;i++){
e=entries[i];
type=e.iType;
index=type==null?0:type.hashCode()^(newLength-1);
while(newEntries[index]!=null){
if(++index>=newLength){
index=0;
}
}
newEntries[index]=e;
}

Time : 22/12/09 10:08
----------------------------------------
Success time : 22/12/09 10:08
