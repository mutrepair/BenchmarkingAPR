{
  "BITCOUNT-15-16": {
    "src": "n = ( n ^ ( n - 1 ) ) ;",
    "patches": [
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ;",
        "score": 99.8418438251202
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ; count ++ ;",
        "score": 99.78645324707031
      },
      {
        "patch": "n = ( n ^ ( n ^ ( n - 1 ) ) ) ;",
        "score": 99.74033490349265
      },
      {
        "patch": "n = n ^ ( n - 1 ) ;",
        "score": 99.7048672762784
      },
      {
        "patch": "n = ( n - 1 ) ^ ( n - 1 ) ;",
        "score": 99.68409830729166
      },
      {
        "patch": "n = n ^ ( n - 1 ) ; count ++ ;",
        "score": 99.66486467633929
      },
      {
        "patch": "n = ( n ^ ( n - $NUMBER$ ) ) ;",
        "score": 99.65439077524039
      },
      {
        "patch": "n = n ^ ( n ^ ( n - 1 ) ) ;",
        "score": 99.64346516927084
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) - 1 ;",
        "score": 99.629833984375
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ; count -- ;",
        "score": 99.63101959228516
      },
      {
        "patch": "n = ( int ) ( n ^ ( n - 1 ) ) ;",
        "score": 99.61572265625
      },
      {
        "patch": "n = ( n & ( n - 1 ) ) ; count ++ ;",
        "score": 99.62151336669922
      },
      {
        "patch": "n = ( n ^ ( n + 1 ) ) ;",
        "score": 99.6010272686298
      },
      {
        "patch": "n = n ^ ( n - 1 ) ; } return count ;",
        "score": 99.60896809895833
      },
      {
        "patch": "n = ( n ^ ( ( n - 1 ) - 1 ) ) ;",
        "score": 99.59983915441177
      },
      {
        "patch": "n = ( n & ( n - 1 ) ) ;",
        "score": 99.60256723257211
      },
      {
        "patch": "n = ( n + 1 ) ^ ( n - 1 ) ;",
        "score": 99.58191731770833
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) + 1 ;",
        "score": 99.58361002604167
      },
      {
        "patch": "n = ( n - 1 ) ? ( n - 1 ) : 0 ;",
        "score": 99.56675091911765
      },
      {
        "patch": "n = ( n ^ ( n ^ 1 ) ) ; count ++ ;",
        "score": 99.57430267333984
      },
      {
        "patch": "n = ( n ^ ( n ^ ( n - $NUMBER$ ) ) ) ;",
        "score": 99.55901022518383
      },
      {
        "patch": "n = ( n - 1 ) ; count ++ ; } return count ;",
        "score": 99.56072235107422
      },
      {
        "patch": "n = ( n ^ ( n ^ 1 ) ) ;",
        "score": 99.55965482271634
      },
      {
        "patch": "n = ( int ) ( n - 1 ) ;",
        "score": 99.55759684244792
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ; }",
        "score": 99.55907331194196
      },
      {
        "patch": "n = ( int ) ( ( n - 1 ) - 1 ) ;",
        "score": 99.55715942382812
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ; n ++ ;",
        "score": 99.55206298828125
      },
      {
        "patch": "int n = ( n ^ ( n - 1 ) ) ;",
        "score": 99.55185372488839
      },
      {
        "patch": "n = ( n ^ ( n ^ ( n + 1 ) ) ) ;",
        "score": 99.54766486672794
      },
      {
        "patch": "n = ( n - ( n - 1 ) ) ; count ++ ;",
        "score": 99.54508972167969
      },
      {
        "patch": "n = n ^ ( n - 1 ) ; count ++ ; }",
        "score": 99.5317138671875
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ? 0 : 0 ;",
        "score": 99.54684627757354
      },
      {
        "patch": "n = ( ( n ^ ( n - 1 ) ) ) ;",
        "score": 99.52198893229166
      },
      {
        "patch": "n = ( n ^ ( n & ( n - 1 ) ) ) ;",
        "score": 99.54360782398896
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ? 0 : 1 ;",
        "score": 99.53848087086396
      },
      {
        "patch": "i = ( n ^ ( n - 1 ) ) ; count ++ ;",
        "score": 99.5154037475586
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ? 1 : 0 ;",
        "score": 99.53820082720588
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ; break ;",
        "score": 99.51136881510416
      },
      {
        "patch": "n = ( n - 1 ) - 1 ;",
        "score": 99.5333251953125
      },
      {
        "patch": "return n ^ ( n ^ ( n - 1 ) ) ;",
        "score": 99.50808279854911
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) - 1 ) ;",
        "score": 99.53321126302083
      },
      {
        "patch": "n += ( n ^ ( n - 1 ) ) ; count ++ ;",
        "score": 99.50511169433594
      },
      {
        "patch": "n = ( n ^ ( int ) ( n - 1 ) ) ;",
        "score": 99.5313720703125
      },
      {
        "patch": "b = ( n ^ ( n - 1 ) ) ; count ++ ;",
        "score": 99.49807739257812
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) / 0 ;",
        "score": 99.5301025390625
      },
      {
        "patch": "n = ( n - 1 ) ; count ++ ;",
        "score": 99.4956766764323
      },
      {
        "patch": "n += ( n ^ ( n - 1 ) ) ;",
        "score": 99.52552208533653
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ? n : 0 ;",
        "score": 99.52118278952206
      },
      {
        "patch": "n = ( n - ( n - 1 ) ) ;",
        "score": 99.49195274939903
      },
      {
        "patch": "n = ( n ^ ( n ^ ( $NUMBER$ - 1 ) ) ) ;",
        "score": 99.51953125
      },
      {
        "patch": "n = ( n - 1 ) ;",
        "score": 99.49158393012152
      },
      {
        "patch": "n = ( n - 1 ) ^ ( n - 1 ) ; }",
        "score": 99.51326751708984
      },
      {
        "patch": "n = n ^ ( n - 1 ) ; count -- ;",
        "score": 99.49117606026786
      },
      {
        "patch": "n = ( n - 0 ) ^ ( n - 1 ) ;",
        "score": 99.5128173828125
      },
      {
        "patch": "n = ( n + ( n - 1 ) ) ; count ++ ;",
        "score": 99.48677825927734
      },
      {
        "patch": "n = ( n - $NUMBER$ ) ^ ( n - 1 ) ;",
        "score": 99.5119384765625
      },
      {
        "patch": "n = ( n / ( n - 1 ) ) ; count ++ ;",
        "score": 99.48607635498047
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ? 1 : 1 ;",
        "score": 99.50907628676471
      },
      {
        "patch": "n = ( n ^ ( 1 - 1 ) ) ; count ++ ;",
        "score": 99.48594665527344
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) & 1 ;",
        "score": 99.48340657552083
      },
      {
        "patch": "n = ( n > 0 ) ? ( n - 1 ) : 0 ;",
        "score": 99.50796329273896
      },
      {
        "patch": "return ( n ^ ( n - 1 ) ) ;",
        "score": 99.48264567057292
      },
      {
        "patch": "n = ( n - 1 ) ^ ( n - $NUMBER$ ) ;",
        "score": 99.50699055989584
      },
      {
        "patch": "n = n ^ ( n - 1 ) ; n ++ ;",
        "score": 99.48238699776786
      },
      {
        "patch": "n = ( n - 1 ) * ( n - 1 ) ;",
        "score": 99.49939778645833
      },
      {
        "patch": "i = ( n ^ ( n - 1 ) ) ;",
        "score": 99.48131385216347
      },
      {
        "patch": "n = ( n - 1 ) ? ( n - 1 ) : 1 ;",
        "score": 99.49737189797794
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) & 1 ) ;",
        "score": 99.47744954427084
      },
      {
        "patch": "n = ( n - 1 ) ? ( n - 1 ) : n ;",
        "score": 99.49595731847427
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ; ++ count ;",
        "score": 99.47480010986328
      },
      {
        "patch": "n = ( n - 1 ) - ( n - 1 ) ;",
        "score": 99.495947265625
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ; return count ;",
        "score": 99.47440338134766
      },
      {
        "patch": "n = ( byte ) ( n ^ ( n - 1 ) ) ;",
        "score": 99.49557495117188
      },
      {
        "patch": "n = ( n ^ ( n + 1 ) ) ; count ++ ;",
        "score": 99.47329711914062
      },
      {
        "patch": "n = ( n - 1 ) & ( n - 1 ) ;",
        "score": 99.489404296875
      },
      {
        "patch": "n = n & ( n - 1 ) ; count ++ ;",
        "score": 99.47168840680804
      },
      {
        "patch": "n = ( n ^ ( n - $NUMBER$ ) ) - 1 ;",
        "score": 99.4882568359375
      },
      {
        "patch": "n = n ^ ( n - 1 ) ; }",
        "score": 99.47142537434895
      },
      {
        "patch": "n = ( n ^ $NUMBER$ ) ^ ( n - 1 ) ;",
        "score": 99.4830322265625
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ) break ;",
        "score": 99.48124186197917
      },
      {
        "patch": "n = ( n & ( n - 1 ) ) + 1 ;",
        "score": 99.46961263020833
      },
      {
        "patch": "n = ( n - 1 ) ^ ( n + 1 ) ;",
        "score": 99.47787272135416
      },
      {
        "patch": "n = n ^ ( n - 1 ) ; } return n ;",
        "score": 99.46870930989583
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) / - 1 ;",
        "score": 99.47469329833984
      },
      {
        "patch": "n = ( n & ( n - 1 ) ) ; count -- ;",
        "score": 99.46732330322266
      },
      {
        "patch": "n = ( n * ( n - 1 ) ) ;",
        "score": 99.47303185096153
      },
      {
        "patch": "n = n & ( n - 1 ) ;",
        "score": 99.46663041548295
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) / $NUMBER$ ;",
        "score": 99.47061360677084
      },
      {
        "patch": "b = ( n ^ ( n - 1 ) ) ;",
        "score": 99.46625225360577
      },
      {
        "patch": "tmp = ( n ^ ( n - 1 ) ) ; count ++ ;",
        "score": 99.46369171142578
      },
      {
        "patch": "n = ( n - 1 ) / ( n - 1 ) ;",
        "score": 99.46728515625
      },
      {
        "patch": "c = ( n ^ ( n - 1 ) ) ; count ++ ;",
        "score": 99.46148681640625
      },
      {
        "patch": "n = ( n ^ ( n ^ $NUMBER$ ) ) ;",
        "score": 99.46493765024039
      },
      {
        "patch": "{ n = ( n ^ ( n - 1 ) ) ;",
        "score": 99.45792061941964
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ; ;",
        "score": 99.46483503069196
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) / 1 ;",
        "score": 99.4617431640625
      },
      {
        "patch": "n = n ^ ( n - 1 ) ; count += n ;",
        "score": 99.45266927083334
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) : 0 ;",
        "score": 99.45882161458333
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) + $NUMBER$ ;",
        "score": 99.45033365885416
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) - $NUMBER$ ;",
        "score": 99.45831705729167
      },
      {
        "patch": "n = ( n - 1 ) ; } return count ;",
        "score": 99.44569749098558
      },
      {
        "patch": "n = ( n / ( n - 1 ) ) ;",
        "score": 99.44565054086539
      },
      {
        "patch": "n = ( n ^ ( ( n - 1 ) ) ) ;",
        "score": 99.455908203125
      },
      {
        "patch": "n = n ^ ( n - ( n - 1 ) ) ;",
        "score": 99.44480794270834
      },
      {
        "patch": "n = ( n ^ ( 1 - 1 ) ) ;",
        "score": 99.44365985576923
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) - 0 ;",
        "score": 99.44663899739584
      },
      {
        "patch": "n = n & ( n - 1 ) ; } return count ;",
        "score": 99.4427001953125
      },
      {
        "patch": "n = ( n & ( n - 1 ) ) - 1 ;",
        "score": 99.4452880859375
      },
      {
        "patch": "n = ( n ^ ( n >> 1 ) ) ;",
        "score": 99.4449462890625
      },
      {
        "patch": "n = n ^ ( n ^ 1 ) ; count ++ ;",
        "score": 99.43574741908482
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ) ;",
        "score": 99.44471958705357
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) )",
        "score": 99.440673828125
      },
      {
        "patch": "n = n & ( n ^ ( n - 1 ) ) ;",
        "score": 99.43285319010417
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) ) }",
        "score": 99.43727329799107
      },
      {
        "patch": "n = ( n ^ ( n - 1 - 1 ) ) ;",
        "score": 99.432373046875
      },
      {
        "patch": "n = ( n ^ ( n ? 1 : 0 ) ) ;",
        "score": 99.43310546875
      },
      {
        "patch": "n = ( n - 1 ) + ( n - 1 ) ;",
        "score": 99.43021647135417
      },
      {
        "patch": "n = ( n ^ ( n - 1 ) ) * 0 ;",
        "score": 99.42979329427084
      },
      {
        "patch": "n = n ^ ( n ^ ( n - 1 ) ) ; }",
        "score": 99.42554473876953
      },
      {
        "patch": "n = ( n - 1 ) - 1 ; count ++ ;",
        "score": 99.42451695033482
      },
      {
        "patch": "n = ( n + 1 ) ^ ( n - 1 ) ; }",
        "score": 99.42434692382812
      },
      {
        "patch": "tmp = ( n ^ ( n - 1 ) ) ;",
        "score": 99.42164024939903
      },
      {
        "patch": "n = n ^ ( n ^ 1 ) ;",
        "score": 99.42005504261364
      },
      {
        "patch": "n = ( n + ( n - 1 ) ) ;",
        "score": 99.41209059495192
      },
      {
        "patch": "n = ( n + 1 ) - 1 ;",
        "score": 99.41206498579545
      },
      {
        "patch": "n = ( n ^ ( n + $NUMBER$ ) ) ;",
        "score": 99.41183706430289
      },
      {
        "patch": "n = ( n ^ - 1 ) ; count ++ ;",
        "score": 99.41563063401442
      },
      {
        "patch": "return n ^ ( n - 1 ) ;",
        "score": 99.4128662109375
      },
      {
        "patch": "n = ( n ^ ( n & $NUMBER$ ) ) ;",
        "score": 99.39846567007211
      },
      {
        "patch": "c = ( n ^ ( n - 1 ) ) ;",
        "score": 99.40183668870192
      },
      {
        "patch": "n = ( int ) ( n - 1 ) ; }",
        "score": 99.39800555889423
      },
      {
        "patch": "n = ( n & ( n ^ 1 ) ) ;",
        "score": 99.4003155048077
      },
      {
        "patch": "n = ( byte ) ( n - 1 ) ;",
        "score": 99.39593505859375
      },
      {
        "patch": "n = ( n & ( 1 - 1 ) ) ;",
        "score": 99.39759239783653
      },
      {
        "patch": "n = ( n - 1 ) ? 0 : 0 ;",
        "score": 99.39325420673077
      },
      {
        "patch": "n = ( n - 1 ) ? 1 : 0 ;",
        "score": 99.39218374399039
      },
      {
        "patch": "result = ( n ^ ( n - 1 ) ) ;",
        "score": 99.3890380859375
      },
      {
        "patch": "n = ( n | ( n - 1 ) ) ;",
        "score": 99.38376089242789
      },
      {
        "patch": "n = ( n ^ 0 n - 1 ) ;",
        "score": 99.38949584960938
      },
      {
        "patch": "n = ( n ^ n ) ; count ++ ;",
        "score": 99.37872314453125
      },
      {
        "patch": "n = ( n ^ n - 1 ) ;",
        "score": 99.3862637606534
      },
      {
        "patch": "n = ( n ^ - 1 ) ;",
        "score": 99.36654052734374
      },
      {
        "patch": "n = ( n ^ 0 n ) ;",
        "score": 99.3853759765625
      },
      {
        "patch": "n = n - ( n - 1 ) ;",
        "score": 99.35941938920455
      },
      {
        "patch": "n = ( int ) ( n + 1 ) ;",
        "score": 99.38356526692708
      },
      {
        "patch": "int n = n ^ ( n - 1 ) ;",
        "score": 99.34818522135417
      },
      {
        "patch": "n = n - 1 ; } return count ;",
        "score": 99.33094371448864
      },
      {
        "patch": "n = ( n ^ 0 - 1 ) ;",
        "score": 99.37534401633523
      },
      {
        "patch": "n = ( n ^ 1 ) ; count ++ ;",
        "score": 99.32630411783855
      },
      {
        "patch": "if ( n ^ ( n - 1 ) )",
        "score": 99.3171719637784
      },
      {
        "patch": "n = ( n + 1 ) ;",
        "score": 99.35074869791667
      },
      {
        "patch": "i = n ^ ( n - 1 ) ;",
        "score": 99.31511896306819
      },
      {
        "patch": "n = ( n - 0 ) - 1 ;",
        "score": 99.31279962713069
      },
      {
        "patch": "n = ( n ^ n ) ;",
        "score": 99.31198459201389
      },
      {
        "patch": "n = n * ( n - 1 ) ;",
        "score": 99.31153453480114
      },
      {
        "patch": "n = ( n - 1 ) ^ n ;",
        "score": 99.3023681640625
      },
      {
        "patch": "n = ( n - 1 ) - $NUMBER$ ;",
        "score": 99.31137917258523
      },
      {
        "patch": "n = n ^ ( n ^ n ) ;",
        "score": 99.29637562144886
      },
      {
        "patch": "n = n ^ ( n + 1 ) ;",
        "score": 99.28432395241477
      },
      {
        "patch": "n = n ^ ( n - $NUMBER$ ) ;",
        "score": 99.3070401278409
      },
      {
        "patch": "n = n - 1 ; count ++ ;",
        "score": 99.28245239257812
      },
      {
        "patch": "n = n + ( n - 1 ) ;",
        "score": 99.30115855823864
      },
      {
        "patch": "n = ( n ^ 1 ) ;",
        "score": 99.25838216145833
      },
      {
        "patch": "n = ( n ^ 0 - n ) ;",
        "score": 99.29881702769886
      },
      {
        "patch": "n = ( n - 1 ) ; }",
        "score": 99.24942016601562
      },
      {
        "patch": "n = ( n ^ $NUMBER$ ) ;",
        "score": 99.29855007595486
      },
      {
        "patch": "n = n ^ n ; count ++ ;",
        "score": 99.24867553710938
      },
      {
        "patch": "n += ( n - 1 ) ;",
        "score": 99.25849066840277
      },
      {
        "patch": "n = n ^ n - 1 ;",
        "score": 99.24546305338542
      },
      {
        "patch": "n = ( n - 1 ) n ;",
        "score": 99.25582275390624
      },
      {
        "patch": "n = ( n - $NUMBER$ ) ;",
        "score": 99.22908528645833
      },
      {
        "patch": "n = ( n - 0 ) ;",
        "score": 99.2266845703125
      },
      {
        "patch": "n = ( n ^ 0 ) ;",
        "score": 99.19474283854167
      },
      {
        "patch": "n = n - 1 ;",
        "score": 98.91913713727679
      }
    ]
  },
  "BREADTH_FIRST_SEARCH-24-25": {
    "src": "while ( true ) {",
    "patches": [
      {
        "patch": "while ( true ) { Node node = queue . remove CaMeL First ( ) ;",
        "score": 100.02664005055146
      },
      {
        "patch": "while ( true ) { while ( true ) {",
        "score": 99.73406427556819
      },
      {
        "patch": "while ( false ) { Node node = queue . remove CaMeL First ( ) ;",
        "score": 99.85971248851104
      },
      {
        "patch": "while ( true ) { if ( true ) {",
        "score": 99.70147150213069
      },
      {
        "patch": "while ( true ) { Node node = queue . get CaMeL First ( ) ;",
        "score": 99.79090073529412
      },
      {
        "patch": "while ( true ) { while ( ! true ) {",
        "score": 99.69017537434895
      },
      {
        "patch": "for ( Node node : queue . get CaMeL Successors ( ) ) {",
        "score": 99.79087727864584
      },
      {
        "patch": "if ( true ) { while ( true ) {",
        "score": 99.64744984019886
      },
      {
        "patch": "while ( true ) { int node = queue . remove CaMeL First ( ) ;",
        "score": 99.78587431066177
      },
      {
        "patch": "while ( true ) { if ( ! true ) {",
        "score": 99.5508321126302
      },
      {
        "patch": "while ( true ) { Node node = queue . remove CaMeL Last ( ) ;",
        "score": 99.75414321001838
      },
      {
        "patch": "if ( true ) { while ( ! true ) {",
        "score": 99.5319315592448
      },
      {
        "patch": "while ( true ) { node = queue . remove CaMeL First ( ) ;",
        "score": 99.75108337402344
      },
      {
        "patch": "} while ( true ) { while ( true ) {",
        "score": 99.5145772298177
      },
      {
        "patch": "while ( true ) { Node node = node . remove CaMeL First ( ) ;",
        "score": 99.74793198529412
      },
      {
        "patch": "while ( true ) { while ( true ) { {",
        "score": 99.5109354654948
      },
      {
        "patch": "Vector < Node > queue = new Array CaMeL Deque < Node > ( ) ;",
        "score": 99.73701028262867
      },
      {
        "patch": "if ( true ) { return false ; } else {",
        "score": 99.50015258789062
      },
      {
        "patch": "while ( true ) { Object node = queue . remove CaMeL First ( ) ;",
        "score": 99.7231804342831
      },
      {
        "patch": "} while ( true ) { if ( true ) {",
        "score": 99.4973856608073
      },
      {
        "patch": "Vector < Node > queue = new Array CaMeL Deque < > ( ) ;",
        "score": 99.71503448486328
      },
      {
        "patch": "if ( true ) { return true ; } else {",
        "score": 99.49495442708333
      },
      {
        "patch": "if ( true ) { nodesvisited . add ( startnode ) ;",
        "score": 99.69629669189453
      },
      {
        "patch": "} if ( true ) { while ( true ) {",
        "score": 99.4836934407552
      },
      {
        "patch": "for ( Node node : startnode . get CaMeL Successors ( ) ) {",
        "score": 99.69501495361328
      },
      {
        "patch": "while ( true ) { if ( true ) { }",
        "score": 99.47842407226562
      },
      {
        "patch": "for ( Node node : node . get CaMeL Successors ( ) ) {",
        "score": 99.6782470703125
      },
      {
        "patch": "while ( ! true ) { while ( true ) {",
        "score": 99.47731526692708
      },
      {
        "patch": "for ( Node node : queue . remove CaMeL First ( ) ) {",
        "score": 99.67689615885416
      },
      {
        "patch": "while ( true ) { while ( true ) { }",
        "score": 99.4772237141927
      },
      {
        "patch": "for ( Node startnode : queue . get CaMeL Successors ( ) ) {",
        "score": 99.67507934570312
      },
      {
        "patch": "while ( true ) { return true ) ; }",
        "score": 99.46833939985795
      },
      {
        "patch": "while ( true ) { Node startnode = goalnode ;",
        "score": 99.65998186383929
      },
      {
        "patch": "while ( true ) { while ( true ) ;",
        "score": 99.4576748934659
      },
      {
        "patch": "synchronized ( queue ) { nodesvisited . add ( startnode ) ;",
        "score": 99.65673828125
      },
      {
        "patch": "while ( true ) { while ( ! true )",
        "score": 99.45698686079545
      },
      {
        "patch": "while ( ! ! nodesvisited . contains ( startnode ) ) {",
        "score": 99.65375518798828
      },
      {
        "patch": "while ( true ) { { while ( true ) {",
        "score": 99.4442647298177
      },
      {
        "patch": "while ( true ) { Node node = queue . remove ( ) ;",
        "score": 99.64854329427084
      },
      {
        "patch": "while ( true ) { synchronized ( ! true ) {",
        "score": 99.44293212890625
      },
      {
        "patch": "synchronized ( queue ) { queue . add CaMeL Last ( startnode ) ;",
        "score": 99.64850616455078
      },
      {
        "patch": "while ( true ) { return false ) ; }",
        "score": 99.42073197798295
      },
      {
        "patch": "if ( goalnode == goalnode ) { return true ; }",
        "score": 99.64310455322266
      },
      {
        "patch": "while ( true ) { synchronized ( true ) {",
        "score": 99.40683815696023
      },
      {
        "patch": "while ( true ) {",
        "score": 99.63756306966145
      },
      {
        "patch": "while ( true ) { while ( false ) {",
        "score": 99.37897283380681
      },
      {
        "patch": "if ( goalnode == goalnode ) { return true ;",
        "score": 99.6341064453125
      },
      {
        "patch": "while ( ! true ) { return true ; }",
        "score": 99.37623180042614
      },
      {
        "patch": "while ( ! nodesvisited . contains ( startnode ) ) {",
        "score": 99.61136881510417
      },
      {
        "patch": "while ( true ) { Node startnode = startnode ;",
        "score": 99.60311185396634
      },
      {
        "patch": "if ( true ) { while ( false ) {",
        "score": 99.35609019886364
      },
      {
        "patch": "if ( startnode == goalnode ) { return true ; }",
        "score": 99.5988525390625
      },
      {
        "patch": "if ( true ) { if ( true ) {",
        "score": 99.35545765269886
      },
      {
        "patch": "synchronized ( nodesvisited ) { while ( true ) {",
        "score": 99.58141150841347
      },
      {
        "patch": "while ( true ) { if ( true ) ;",
        "score": 99.3437832919034
      },
      {
        "patch": "if ( nodesvisited . contains ( startnode ) ) {",
        "score": 99.57575334821429
      },
      {
        "patch": "if ( true ) { while ( ! true )",
        "score": 99.2941006747159
      },
      {
        "patch": "if ( startnode == goalnode ) { return true ;",
        "score": 99.57014683314732
      },
      {
        "patch": "while ( true ) { if ( ! true )",
        "score": 99.27577903053977
      },
      {
        "patch": "while ( true ) { Node goalnode = goalnode ;",
        "score": 99.56822916666667
      },
      {
        "patch": "} if ( true ) { return false ; }",
        "score": 99.2698641690341
      },
      {
        "patch": "while ( nodesvisited . contains ( startnode ) ) {",
        "score": 99.5611572265625
      },
      {
        "patch": "} while ( true ) { while ( true )",
        "score": 99.24596058238636
      },
      {
        "patch": "if ( true ) { return true ; } }",
        "score": 99.23110129616477
      },
      {
        "patch": "while ( true ) { Node node = startnode ;",
        "score": 99.54857381184895
      },
      {
        "patch": "if ( true ) { while ( true ) ;",
        "score": 99.22597434303977
      },
      {
        "patch": "try { for ( Node node : queue ) {",
        "score": 99.53223765980114
      },
      {
        "patch": "if ( true ) { return false ; } }",
        "score": 99.21992631392045
      },
      {
        "patch": "if ( goalnode == goalnode ) {",
        "score": 99.531005859375
      },
      {
        "patch": "while ( true ) { return while ( true )",
        "score": 99.21965997869319
      },
      {
        "patch": "try { for ( Node node : queue . get CaMeL Successors ( ) )",
        "score": 99.53059387207031
      },
      {
        "patch": "while ( ! true ) {",
        "score": 99.21891566685268
      },
      {
        "patch": "if ( goalnode == goalnode ) { return false ; }",
        "score": 99.52582550048828
      },
      {
        "patch": "while ( true ) { return true ; }",
        "score": 99.21561889648437
      },
      {
        "patch": "while ( true ) { Node node = goalnode ;",
        "score": 99.50304236778847
      },
      {
        "patch": "while ( ! true ) { while ( true )",
        "score": 99.19422496448864
      },
      {
        "patch": "for ( Node node = queue . remove CaMeL First ( ) ; node",
        "score": 99.48558756510417
      },
      {
        "patch": "while ( true ) { return true ; } }",
        "score": 99.18238414417614
      },
      {
        "patch": "while ( ! nodesvisited . contains ( startnode ) )",
        "score": 99.48381696428571
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
        "score": 99.18051147460938
      },
      {
        "patch": "while ( true ) { return false ; }",
        "score": 99.18021850585937
      },
      {
        "patch": "synchronized ( queue ) { while ( true ) {",
        "score": 99.48122336647727
      },
      {
        "patch": "if ( true ) { return false ; } else",
        "score": 99.17845569957386
      },
      {
        "patch": "if ( goalnode == goalnode ) { return false ;",
        "score": 99.47687174479167
      },
      {
        "patch": "while ( true ) { while ( true ) ?",
        "score": 99.17507102272727
      },
      {
        "patch": "while ( ! nodesvisited . contains ( goalnode ) ) {",
        "score": 99.47661590576172
      },
      {
        "patch": "if ( true ) { return true ; } else",
        "score": 99.16920055042614
      },
      {
        "patch": "try { while ( true ) {",
        "score": 99.16374206542969
      },
      {
        "patch": "if ( startnode == goalnode ) { return true ; } else",
        "score": 99.46194458007812
      },
      {
        "patch": "if ( true ) { return false ; }",
        "score": 99.150146484375
      },
      {
        "patch": "if ( startnode == goalnode ) {",
        "score": 99.461181640625
      },
      {
        "patch": "while ( true || true ) {",
        "score": 99.1406478881836
      },
      {
        "patch": "synchronized ( startnode ) { while ( true ) {",
        "score": 99.45516967773438
      },
      {
        "patch": "if ( true ) { return true ; }",
        "score": 99.13734741210938
      },
      {
        "patch": "while ( true ) { if ( goalnode == goalnode )",
        "score": 99.4538345336914
      },
      {
        "patch": "while ( true ) { / * /",
        "score": 99.13148328993056
      },
      {
        "patch": "try { Node node = queue . remove CaMeL First ( ) ;",
        "score": 99.45191301618304
      },
      {
        "patch": "if ( true ) {",
        "score": 99.12230428059895
      },
      {
        "patch": "try { nodesvisited . add ( startnode ) ;",
        "score": 99.44833608774039
      },
      {
        "patch": "} while ( true ) {",
        "score": 99.11822509765625
      },
      {
        "patch": "if ( ! nodesvisited . contains ( startnode ) ) {",
        "score": 99.44650065104166
      },
      {
        "patch": "} if ( true ) {",
        "score": 99.11787632533482
      },
      {
        "patch": "if ( true ) nodesvisited . add ( startnode ) ;",
        "score": 99.4428955078125
      },
      {
        "patch": "while ( true ) { while ( true )",
        "score": 99.113134765625
      },
      {
        "patch": "if ( nodesvisited . contains ( goalnode ) ) {",
        "score": 99.44095052083334
      },
      {
        "patch": "while ( true ) { / * * /",
        "score": 99.10157470703125
      },
      {
        "patch": "while ( nodesvisited . contains ( startnode ) )",
        "score": 99.43778170072116
      },
      {
        "patch": "if ( true && true ) {",
        "score": 99.08732604980469
      },
      {
        "patch": "for ( Node node : queue . get CaMeL Successors ( ) )",
        "score": 99.41844831194196
      },
      {
        "patch": "while ( true ) { / / * /",
        "score": 99.08121948242187
      },
      {
        "patch": "while ( queue . breadth _ first _ search ( ) ) {",
        "score": 99.40821184430804
      },
      {
        "patch": "while ( true ) { return true ) ;",
        "score": 99.0782958984375
      },
      {
        "patch": "while ( true ) { Iterator < Node > node = queue .",
        "score": 99.40256173270089
      },
      {
        "patch": "while ( ! true || true ) {",
        "score": 99.07789442274306
      },
      {
        "patch": "if ( nodesvisited . contains ( startnode ) )",
        "score": 99.39728252704327
      },
      {
        "patch": "while ( ! true && true ) {",
        "score": 99.06886121961806
      },
      {
        "patch": "synchronized ( node . get CaMeL Successors ( ) ) {",
        "score": 99.37216186523438
      },
      {
        "patch": "if ( true || true ) {",
        "score": 99.06277465820312
      },
      {
        "patch": "while ( ! queue . contains ( startnode ) ) {",
        "score": 99.36391977163461
      },
      {
        "patch": "while ( true && true ) {",
        "score": 99.05073547363281
      },
      {
        "patch": "if ( startnode != goalnode ) {",
        "score": 99.36388050426136
      },
      {
        "patch": "/ * * while ( true ) {",
        "score": 99.04918755425348
      },
      {
        "patch": "for ( Node node : queue ) {",
        "score": 99.35361735026042
      },
      {
        "patch": "} while ( ! true ) {",
        "score": 99.04823303222656
      },
      {
        "patch": "return nodesvisited . contains ( startnode ) ;",
        "score": 99.34522501627605
      },
      {
        "patch": "while ( true ) { return false ) ;",
        "score": 99.03697509765625
      },
      {
        "patch": "while ( goalnode == goalnode ) {",
        "score": 99.33864339192708
      },
      {
        "patch": "while ( true ) { try {",
        "score": 99.03683471679688
      },
      {
        "patch": "try { queue . add CaMeL Last ( startnode ) ;",
        "score": 99.33838829627403
      },
      {
        "patch": "} while ( true ) ;",
        "score": 99.03005545479911
      },
      {
        "patch": "while ( queue . equals ( startnode ) ) {",
        "score": 99.31142171223958
      },
      {
        "patch": "while ( true ) { {",
        "score": 99.02672467912946
      },
      {
        "patch": "synchronized ( nodesvisited ) {",
        "score": 99.28620910644531
      },
      {
        "patch": "while ( true ) { return true ;",
        "score": 99.01995849609375
      },
      {
        "patch": "if ( node == goalnode ) {",
        "score": 99.22286987304688
      },
      {
        "patch": "/ * while ( true ) {",
        "score": 99.01283264160156
      },
      {
        "patch": "if ( startnode != null ) {",
        "score": 99.21582709418402
      },
      {
        "patch": "while ( true ) { return false ;",
        "score": 98.99454074435764
      },
      {
        "patch": "for ( Node startnode : queue ) {",
        "score": 99.20005493164062
      },
      {
        "patch": "} { if ( true ) {",
        "score": 98.99021911621094
      },
      {
        "patch": "while ( true ) { true ;",
        "score": 98.9796142578125
      },
      {
        "patch": "while ( false ) {",
        "score": 99.16382853190105
      },
      {
        "patch": "try { if ( true ) {",
        "score": 98.97276306152344
      },
      {
        "patch": "while ( true ) { Iterator < Node >",
        "score": 99.16286010742188
      },
      {
        "patch": "} if ( ! true ) {",
        "score": 98.97272491455078
      },
      {
        "patch": "while ( true )",
        "score": 99.13085327148437
      },
      {
        "patch": "if ( ! true ) {",
        "score": 98.96011788504464
      },
      {
        "patch": "return while ( true ) {",
        "score": 98.93650599888393
      },
      {
        "patch": "if ( nodesvisited ) {",
        "score": 99.08975982666016
      },
      {
        "patch": "if ( true ) { {",
        "score": 98.87451171875
      },
      {
        "patch": "if ( goalnode ) {",
        "score": 99.08467864990234
      },
      {
        "patch": "while ( true ) { }",
        "score": 98.82855224609375
      },
      {
        "patch": "if ( startnode != null )",
        "score": 99.04901885986328
      },
      {
        "patch": "while ( ! true )",
        "score": 98.8131103515625
      },
      {
        "patch": "for ( Node node : queue )",
        "score": 99.03897094726562
      },
      {
        "patch": "if ( true ) { }",
        "score": 98.80755615234375
      },
      {
        "patch": "} while ( true )",
        "score": 98.793701171875
      },
      {
        "patch": "synchronized ( startnode ) {",
        "score": 99.02437046595982
      },
      {
        "patch": "synchronized ( queue ) {",
        "score": 98.97866821289062
      },
      {
        "patch": "while ( true ) ;",
        "score": 98.69026692708333
      },
      {
        "patch": "return nodesvisited ;",
        "score": 98.81451416015625
      },
      {
        "patch": "return true ;",
        "score": 98.65672302246094
      },
      {
        "patch": "synchronized ( true ) {",
        "score": 98.773681640625
      },
      {
        "patch": "return true ) ;",
        "score": 98.52650756835938
      },
      {
        "patch": "while ( false )",
        "score": 98.5767333984375
      },
      {
        "patch": "return true ; }",
        "score": 98.463720703125
      },
      {
        "patch": "if ( true )",
        "score": 98.5115966796875
      },
      {
        "patch": "if ( startnode",
        "score": 98.48753051757812
      },
      {
        "patch": "break ) ;",
        "score": 98.20126342773438
      },
      {
        "patch": "result = true ;",
        "score": 98.3984130859375
      },
      {
        "patch": "return false ;",
        "score": 98.1634292602539
      },
      {
        "patch": "Iterator < Node >",
        "score": 98.38914794921875
      },
      {
        "patch": "} ) ;",
        "score": 98.13877868652344
      },
      {
        "patch": "break ;",
        "score": 98.05757649739583
      },
      {
        "patch": "return queue ;",
        "score": 98.34095764160156
      },
      {
        "patch": "assert true ;",
        "score": 97.99321746826172
      },
      {
        "patch": "try {",
        "score": 98.26639811197917
      },
      {
        "patch": "return while )",
        "score": 97.96414947509766
      },
      {
        "patch": "} {",
        "score": 97.47178141276042
      },
      {
        "patch": "break {",
        "score": 97.44034830729167
      },
      {
        "patch": "for (",
        "score": 97.45790608723958
      },
      {
        "patch": "* /",
        "score": 97.29306030273438
      },
      {
        "patch": "finally {",
        "score": 97.35317993164062
      },
      {
        "patch": "}",
        "score": 96.9315185546875
      },
      {
        "patch": "/ *",
        "score": 97.35286458333333
      },
      {
        "patch": "do",
        "score": 96.1800537109375
      },
      {
        "patch": "{",
        "score": 95.52745056152344
      }
    ]
  },
  "BUCKETSORT-22-23": {
    "src": "for ( Integer count : arr ) {",
    "patches": [
      {
        "patch": "for ( Integer count : arr ) {",
        "score": 99.89191351996527
      },
      {
        "patch": "for ( Integer count : arr ) { for ( Integer count : arr ) {",
        "score": 99.83995145909927
      },
      {
        "patch": "for ( Integer count : arr ) { for ( Integer i : arr ) {",
        "score": 99.83025045955883
      },
      {
        "patch": "int i = 0 ; for ( Integer count : arr ) {",
        "score": 99.65658133370536
      },
      {
        "patch": "for ( Integer count : arr ) { for ( int i : arr ) {",
        "score": 99.76629279641544
      },
      {
        "patch": "for ( Integer count : arr ) for ( Integer count : arr ) {",
        "score": 99.64420318603516
      },
      {
        "patch": "for ( Integer i : arr ) { for ( Integer i : arr ) {",
        "score": 99.75574448529412
      },
      {
        "patch": "for ( Integer count : arr ) { counts . add ( i ) ;",
        "score": 99.62158203125
      },
      {
        "patch": "for ( Integer i : arr ) { for ( Integer count : arr ) {",
        "score": 99.75422219669117
      },
      {
        "patch": "int count = 0 ; for ( Integer count : arr ) {",
        "score": 99.59957449776786
      },
      {
        "patch": "for ( int i = 0 ; i < arr . length ; i ++ )",
        "score": 99.7515869140625
      },
      {
        "patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
        "score": 99.58163452148438
      },
      {
        "patch": "for ( Integer count : arr ) { counts . add ( count ) ;",
        "score": 99.57835388183594
      },
      {
        "patch": "for ( int i : arr ) { for ( Integer count : arr ) {",
        "score": 99.74376005284927
      },
      {
        "patch": "for ( int i = 0 ; i < count ; i ++ ) {",
        "score": 99.56976318359375
      },
      {
        "patch": "for ( Integer count : arr ) { for ( int count : arr ) {",
        "score": 99.72739545036765
      },
      {
        "patch": "for ( int i = 0 ; i < arr . length ; i {",
        "score": 99.55604553222656
      },
      {
        "patch": "for ( int count : arr ) { for ( Integer count : arr ) {",
        "score": 99.71572696461396
      },
      {
        "patch": "for ( Integer i : arr ) {",
        "score": 99.55048963758681
      },
      {
        "patch": "for ( int i : arr ) { for ( Integer i : arr ) {",
        "score": 99.71543255974265
      },
      {
        "patch": "for ( Integer count : arr ) { for ( Integer count : arr )",
        "score": 99.52766418457031
      },
      {
        "patch": "for ( int i = 0 ; i < 0 ; i ++ ) {",
        "score": 99.6932373046875
      },
      {
        "patch": "for ( Integer count : arr ) { if ( count > 0 ) {",
        "score": 99.52394104003906
      },
      {
        "patch": "for ( int count : arr ) { for ( Integer i : arr ) {",
        "score": 99.69196633731617
      },
      {
        "patch": "for ( Integer count : arr ) { int i = 0 ;",
        "score": 99.49161202566964
      },
      {
        "patch": "for ( Integer i : arr ) { for ( int i : arr ) {",
        "score": 99.68419692095588
      },
      {
        "patch": "for ( Integer count : arr ) { int count = 0 ;",
        "score": 99.4908447265625
      },
      {
        "patch": "for ( Integer count : arr ) { for ( Integer i : 0 ) {",
        "score": 99.68129595588235
      },
      {
        "patch": "for ( Integer count : arr )",
        "score": 99.48820495605469
      },
      {
        "patch": "for ( Integer count : arr ) { for ( Integer count : 0 ) {",
        "score": 99.67906278722427
      },
      {
        "patch": "for ( int i = 0 ; i < arr . length ; i )",
        "score": 99.4632568359375
      },
      {
        "patch": "for ( Integer counts : arr ) {",
        "score": 99.44492594401042
      },
      {
        "patch": "if ( arr != null ) { for ( Integer count : arr ) {",
        "score": 99.65937805175781
      },
      {
        "patch": "for ( Integer count : arr ) counts . add ( i ) ;",
        "score": 99.43262532552083
      },
      {
        "patch": "for ( Integer count : arr ) { for ( String count : arr ) {",
        "score": 99.64308794806985
      },
      {
        "patch": "for ( int i = 0 ; i < arr . size ( ) ;",
        "score": 99.43142700195312
      },
      {
        "patch": "for ( Integer i : arr ) { for ( int count : arr ) {",
        "score": 99.63962689568015
      },
      {
        "patch": "for < arr . size ( ) ; i ++ ) {",
        "score": 99.42259803185097
      },
      {
        "patch": "for ( Integer count : arr ) for ( Integer count : arr )",
        "score": 99.42012532552083
      },
      {
        "patch": "for ( int i : arr ) { for ( int i : arr ) {",
        "score": 99.63749425551471
      },
      {
        "patch": "for ( Integer count : arr ) { / * /",
        "score": 99.41480509440105
      },
      {
        "patch": "for ( Integer count : arr ) { for ( Integer arr : arr ) {",
        "score": 99.63315716911765
      },
      {
        "patch": "for ( Integer count : sorted _ arr ) {",
        "score": 99.40596147017045
      },
      {
        "patch": "for ( int i = 0 ; i < arr . length { i ++ )",
        "score": 99.62187643612133
      },
      {
        "patch": "for ( int count : arr ) {",
        "score": 99.38918728298611
      },
      {
        "patch": "for ( int i : arr ) { for ( int count : arr ) {",
        "score": 99.61436552159927
      },
      {
        "patch": "for ( int i = 0 ; i < arr . ] ) {",
        "score": 99.37827962239584
      },
      {
        "patch": "if ( arr != null ) { for ( Integer i : arr ) {",
        "score": 99.61116027832031
      },
      {
        "patch": "if ( arr . size ( ) > 0 ) {",
        "score": 99.37734985351562
      },
      {
        "patch": "for ( int count : arr ) { for ( int i : arr ) {",
        "score": 99.61053825827206
      },
      {
        "patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ )",
        "score": 99.36079915364583
      },
      {
        "patch": "for ( Integer i : arr ) { for ( Integer i : 0 ) {",
        "score": 99.60568416819854
      },
      {
        "patch": "for ( Iterator < Integer > count : arr ) {",
        "score": 99.34859212239583
      },
      {
        "patch": "for ( int i = 0 { i < arr . length ; i ++ )",
        "score": 99.5985466452206
      },
      {
        "patch": "for ( int i = 0 ; i < count ; i ++ )",
        "score": 99.34795735677083
      },
      {
        "patch": "for ( Integer count : arr ) counts . add ( count ) ;",
        "score": 99.342578125
      },
      {
        "patch": "for ( Integer count : arr ) { for ( Integer i : arr )",
        "score": 99.58466339111328
      },
      {
        "patch": "for ( Long count : arr ) {",
        "score": 99.34105767144098
      },
      {
        "patch": "if ( Collections . n CaMeL Copies ( count , i ) ) {",
        "score": 99.33892415364583
      },
      {
        "patch": "for ( int i = 0 ; i < arr ) break ;",
        "score": 99.55458286830357
      },
      {
        "patch": "for ( int i = 0 ; i < arr . length ; i",
        "score": 99.332080078125
      },
      {
        "patch": "for < arr . length ; i ++ ) {",
        "score": 99.3271484375
      },
      {
        "patch": "for ( Integer count : arr . iterator ( ) ) {",
        "score": 99.53940993088942
      },
      {
        "patch": "for ( Integer count : arr ) { / *",
        "score": 99.31901411576705
      },
      {
        "patch": "for ( Integer count : arr ) { for ( Integer i : 0 )",
        "score": 99.53582000732422
      },
      {
        "patch": "for ( Integer count ] : arr ) {",
        "score": 99.30472412109376
      },
      {
        "patch": "for ( Integer count : arr ) { for ( int i = 0 )",
        "score": 99.53411865234375
      },
      {
        "patch": "if ( sorted _ arr . size ( ) > 0 ) {",
        "score": 99.29622977120536
      },
      {
        "patch": "for ( Integer count : arr . size ( ) ) {",
        "score": 99.53403883713942
      },
      {
        "patch": "for ( Integer count > count : arr ) {",
        "score": 99.29515491832386
      },
      {
        "patch": "for ( Integer count : arr ) { for ( int i = count )",
        "score": 99.53315734863281
      },
      {
        "patch": "for ( Integer < Integer > count : arr ) {",
        "score": 99.2852783203125
      },
      {
        "patch": "for ( Integer count : arr ) { for ( int i : arr )",
        "score": 99.52276611328125
      },
      {
        "patch": "for ( Integer count : $NUMBER$ ) {",
        "score": 99.28426106770833
      },
      {
        "patch": "for ( int i = 0 ; i < 0 ; i ++ )",
        "score": 99.51827799479166
      },
      {
        "patch": "for ( Integer count - 1 : arr ) {",
        "score": 99.26882102272727
      },
      {
        "patch": "for ( Integer i : arr ) { for ( Integer i : arr )",
        "score": 99.50871276855469
      },
      {
        "patch": "if ( counts . size ( ) > 0 ) {",
        "score": 99.26666259765625
      },
      {
        "patch": "for ( Integer count : arr ) { for ( int i = i )",
        "score": 99.5016098022461
      },
      {
        "patch": "for ( Integer k : arr ) {",
        "score": 99.26537407769098
      },
      {
        "patch": "for ( int i : arr ) { for ( Integer count : arr )",
        "score": 99.49987030029297
      },
      {
        "patch": "for ( Integer count : arr ) { / * }",
        "score": 99.2643330891927
      },
      {
        "patch": "for ( int i : arr ) {",
        "score": 99.49820285373264
      },
      {
        "patch": "for ( Integer 1 : arr ) {",
        "score": 99.26427544487848
      },
      {
        "patch": "for ( Integer i : arr ) { for ( Integer count : arr )",
        "score": 99.49629211425781
      },
      {
        "patch": "for ( Integer count >= 0 ; i ++ ) {",
        "score": 99.25944010416667
      },
      {
        "patch": "for ( final Integer count : arr ) {",
        "score": 99.25755004882812
      },
      {
        "patch": "for ( Integer count : arr ) { for ( int i : 0 )",
        "score": 99.49065399169922
      },
      {
        "patch": "if ( arr . size ( ) > 1 ) {",
        "score": 99.25442504882812
      },
      {
        "patch": "for ( Integer i : arr ) { for ( Integer i : 0 )",
        "score": 99.48991394042969
      },
      {
        "patch": "for ( Integer count : arr ) + 1 ;",
        "score": 99.2521084872159
      },
      {
        "patch": "for ( int i : arr ) { for ( Integer i : arr )",
        "score": 99.48554229736328
      },
      {
        "patch": "Iterator < Integer > count = arr . iterator ( ) ;",
        "score": 99.24786846454327
      },
      {
        "patch": "for ( Integer count : arr [ i ] ) {",
        "score": 99.2425028483073
      },
      {
        "patch": "for ( int i = 0 ; i < arr . size ( ) {",
        "score": 99.47702026367188
      },
      {
        "patch": "for ( Integer count : counts ) {",
        "score": 99.23421902126736
      },
      {
        "patch": "for ( Integer count : arr ) { if ( count != 0 ) {",
        "score": 99.4747314453125
      },
      {
        "patch": "for ( Integer count : arr ) { counts . set (",
        "score": 99.23404634915866
      },
      {
        "patch": "for ( Integer count : arr ) { / / }",
        "score": 99.23157755533855
      },
      {
        "patch": "for ( Integer count : arr ) { for ( int count : arr )",
        "score": 99.46746063232422
      },
      {
        "patch": "for ( int i = 0 ; ++ i ) {",
        "score": 99.22398885091145
      },
      {
        "patch": "for ( Integer count : arr ) { if ( count == 0 ) {",
        "score": 99.4670639038086
      },
      {
        "patch": "for ( Integer count >= 0 ; count ++ ) {",
        "score": 99.22257486979167
      },
      {
        "patch": "for ( Integer count : arr ) { for ( Integer count : 0 )",
        "score": 99.460205078125
      },
      {
        "patch": "for ( String count : arr ) {",
        "score": 99.21917724609375
      },
      {
        "patch": "for ( Integer count > i : arr ) {",
        "score": 99.21674138849431
      },
      {
        "patch": "for ( Integer i : arr ) { for ( int i : arr )",
        "score": 99.45010375976562
      },
      {
        "patch": "for ( Integer arr : arr ) {",
        "score": 99.21458604600694
      },
      {
        "patch": "for ( Integer i : arr . size ( ) ) {",
        "score": 99.44899338942308
      },
      {
        "patch": "for ( Integer count : arr ) { / * ;",
        "score": 99.21400960286458
      },
      {
        "patch": "for ( int count : arr ) { for ( Integer count : arr )",
        "score": 99.44779968261719
      },
      {
        "patch": "for ( Integer count > arr : arr ) {",
        "score": 99.21381170099431
      },
      {
        "patch": "for ( Integer i : arr . iterator ( ) ) {",
        "score": 99.44382887620192
      },
      {
        "patch": "for ( Integer count : arr + 1 ) {",
        "score": 99.21043812144886
      },
      {
        "patch": "for ( int count : arr ) { for ( Integer i : arr )",
        "score": 99.44366455078125
      },
      {
        "patch": "for ( Integer count : arr ) { / /",
        "score": 99.208740234375
      },
      {
        "patch": "if ( arr != null ) { for ( Integer count : arr )",
        "score": 99.434765625
      },
      {
        "patch": "} for ( Integer count : arr ) {",
        "score": 99.20842895507812
      },
      {
        "patch": "for ( int i = 0 ; i < arr . length )",
        "score": 99.41135951450893
      },
      {
        "patch": "for ( Integer count 1 : arr ) {",
        "score": 99.1924560546875
      },
      {
        "patch": "if ( arr != null ) { for ( Integer i : arr )",
        "score": 99.40171712239584
      },
      {
        "patch": "for ( Integer 1 count : arr ) {",
        "score": 99.190869140625
      },
      {
        "patch": "for ( Integer [ ] arr : arr ) {",
        "score": 99.4010009765625
      },
      {
        "patch": "for ( Integer count : count ) {",
        "score": 99.17306857638889
      },
      {
        "patch": "for ( Integer count : arr ) { if ( count == 0 )",
        "score": 99.3973876953125
      },
      {
        "patch": "for ( Integer max : arr ) {",
        "score": 99.16949462890625
      },
      {
        "patch": "for ( Integer count : arr ) { }",
        "score": 99.385986328125
      },
      {
        "patch": "for ( Integer count : arr ) ;",
        "score": 99.16615804036458
      },
      {
        "patch": "for ( Integer count : arr ) continue ;",
        "score": 99.15375366210938
      },
      {
        "patch": "for ( int count : arr . iterator ( ) ) {",
        "score": 99.3450458233173
      },
      {
        "patch": "for ( Object count : arr ) {",
        "score": 99.152587890625
      },
      {
        "patch": "for ( Integer count : 0 ) {",
        "score": 99.14914957682292
      },
      {
        "patch": "for ( int i : arr . iterator ( ) ) {",
        "score": 99.33914888822116
      },
      {
        "patch": "for ( int i = 0 ;",
        "score": 99.14571380615234
      },
      {
        "patch": "for ( Integer [ ] count : arr ) {",
        "score": 99.33234197443181
      },
      {
        "patch": "for ( Integer count : arr ) { {",
        "score": 99.14562377929687
      },
      {
        "patch": "/ * for ( Integer count : arr ) {",
        "score": 99.33134321732955
      },
      {
        "patch": "for ( Integer Integer count : arr ) {",
        "score": 99.14180908203124
      },
      {
        "patch": "for ( Integer < String > count : arr ) {",
        "score": 99.33127848307292
      },
      {
        "patch": "for ( Integer count : arr . iterator ( ) )",
        "score": 99.31569417317708
      },
      {
        "patch": "for ( Integer count : arr ) ++",
        "score": 99.12822808159723
      },
      {
        "patch": "for ( Integer i : arr )",
        "score": 99.3133544921875
      },
      {
        "patch": "for ( Integer count ++ : arr ) {",
        "score": 99.12814331054688
      },
      {
        "patch": "for ( Integer iterator : arr ) {",
        "score": 99.12590196397569
      },
      {
        "patch": "/ * * for ( Integer count : arr ) {",
        "score": 99.30344645182292
      },
      {
        "patch": "if ( arr . length > 0 ) {",
        "score": 99.11702880859374
      },
      {
        "patch": "for < arr . length ; i ) {",
        "score": 99.113330078125
      },
      {
        "patch": "for ( Integer count : arr . length ) {",
        "score": 99.29351251775569
      },
      {
        "patch": "for ( int i = 0 ; ) {",
        "score": 99.113232421875
      },
      {
        "patch": "for ( Integer count : arr . size ( ) )",
        "score": 99.2897440592448
      },
      {
        "patch": "for ( Integer count : 1 ) {",
        "score": 99.09575737847223
      },
      {
        "patch": "for ( Integer count : list ) {",
        "score": 99.09013536241319
      },
      {
        "patch": "for ( int counts : arr ) {",
        "score": 99.08936225043402
      },
      {
        "patch": "for ( Integer value : arr ) {",
        "score": 99.27743191189236
      },
      {
        "patch": "for ( float count : arr ) {",
        "score": 99.08476426866319
      },
      {
        "patch": "for ( Integer count : arr ) break ;",
        "score": 99.24585571289063
      },
      {
        "patch": "for ( Integer i : arr ) { }",
        "score": 99.2423095703125
      },
      {
        "patch": "for ( Integer count : arr ) * /",
        "score": 99.08111572265625
      },
      {
        "patch": "for ( Integer version : arr ) {",
        "score": 99.07703993055556
      },
      {
        "patch": "for ( Integer name : arr ) {",
        "score": 99.23331027560764
      },
      {
        "patch": "for ( Integer min : arr ) {",
        "score": 99.07179090711806
      },
      {
        "patch": "for ( Integer count : i ) {",
        "score": 99.05289713541667
      },
      {
        "patch": "for ( int i : arr )",
        "score": 99.20684814453125
      },
      {
        "patch": "for ( Integer [ : arr ) {",
        "score": 99.05277506510417
      },
      {
        "patch": "/ * for ( Integer count : arr )",
        "score": 99.19031982421875
      },
      {
        "patch": "for ( Integer 0 : arr ) {",
        "score": 99.052490234375
      },
      {
        "patch": "for ( int i : arr ) { }",
        "score": 99.18037109375
      },
      {
        "patch": "for ( Integer : arr ) {",
        "score": 98.96885681152344
      },
      {
        "patch": "for ( Integer counts : arr )",
        "score": 98.96174621582031
      },
      {
        "patch": "for ( int count : arr )",
        "score": 99.16806030273438
      },
      {
        "patch": "for ( int ) {",
        "score": 98.88792928059895
      },
      {
        "patch": "for ( Iterator < Integer >",
        "score": 98.76171003069196
      },
      {
        "patch": "for ( Integer element : arr ) {",
        "score": 99.13091362847223
      },
      {
        "patch": "int i = 0 ;",
        "score": 98.75940958658855
      },
      {
        "patch": "for ( int i = 0 )",
        "score": 99.07490539550781
      },
      {
        "patch": "int count = 0 ;",
        "score": 98.67173258463542
      },
      {
        "patch": "/ * * /",
        "score": 98.4769287109375
      },
      {
        "patch": "for ( int }",
        "score": 98.34956665039063
      }
    ]
  },
  "DEPTH_FIRST_SEARCH-22-23": {
    "src": "for ( Node successornodes : node . get CaMeL Successors ( ) ) {",
    "patches": [
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.92964441636029
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { if ( search ( node ) ) {",
        "score": 99.86208984375
      },
      {
        "patch": "if ( node != null ) { for ( Node node : node . get CaMeL Successors ( ) ) {",
        "score": 99.74071155894886
      },
      {
        "patch": "for ( Node successornodes : get CaMeL Successors ( ) ) { if ( search ( successornodes ) ) {",
        "score": 99.86091796875
      },
      {
        "patch": "for ( Node < Node > successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.737353515625
      },
      {
        "patch": "if ( node == goalnode ) { return true ; } else if ( node == goalnode ) {",
        "score": 99.84731038411458
      },
      {
        "patch": "for ( Node < Node > node > successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.7328213778409
      },
      {
        "patch": "if ( node == goalnode ) { return false ; } else if ( node == goalnode ) {",
        "score": 99.8176981608073
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { return true ; } }",
        "score": 99.71785111860795
      },
      {
        "patch": "for ( Node node : node . get CaMeL Successors ( ) ) { if ( node == goalnode ) {",
        "score": 99.81531778971355
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { return true ; } } }",
        "score": 99.71333644701087
      },
      {
        "patch": "for ( Node node : node . get CaMeL Successors ( ) ) { if ( search ( node ) ) {",
        "score": 99.7822265625
      },
      {
        "patch": "synchronized ( node ) { for ( Node successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.7042236328125
      },
      {
        "patch": "for ( Node successornodes : list ) { if ( search ( successornodes ) ) { return true ; }",
        "score": 99.77974609375
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { return false ; } }",
        "score": 99.70098322088069
      },
      {
        "patch": "for ( Node successornodes : node . size ( ) ) { if ( search ( successornodes ) ) {",
        "score": 99.773271484375
      },
      {
        "patch": "for ( Node < Node < Node > successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.7001620205966
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { if ( search ( Node ) ) {",
        "score": 99.76365234375
      },
      {
        "patch": "synchronized ( this ) { for ( Node successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.69780939275569
      },
      {
        "patch": "for ( Node node : node . get CaMeL Successors ( ) ) { if ( search ( successornodes ) ) {",
        "score": 99.7465234375
      },
      {
        "patch": "for ( Node node : node . get CaMeL Successors ( ) ) {",
        "score": 99.69684244791667
      },
      {
        "patch": "if ( node == goalnode ) { return true ; } } else if ( node == goalnode ) {",
        "score": 99.744912109375
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { return false ; } } }",
        "score": 99.68761676290761
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { if ( search ( null ) ) {",
        "score": 99.741845703125
      },
      {
        "patch": "for ( Iterator < Node > successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.67674560546875
      },
      {
        "patch": "for ( Node successornodes : list ) { if ( search ( successornodes ) ) {",
        "score": 99.7405017671131
      },
      {
        "patch": "for ( Node [ ] successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.67292865953948
      },
      {
        "patch": "if ( node == goalnode ) { return true ; } else { return false ; }",
        "score": 99.7385009765625
      },
      {
        "patch": "Node successornodes : for ( Node successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.62827370383523
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { if ( search ( ) ) {",
        "score": 99.72948201497395
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { for ( Node ) {",
        "score": 99.6209716796875
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { boolean search ( successornodes ) {",
        "score": 99.72845703125
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { return null ; } }",
        "score": 99.62016157670455
      },
      {
        "patch": "if ( node == goalnode ) { return true ; } else { return false ; } }",
        "score": 99.72620210193452
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) return true ; } } else {",
        "score": 99.61854619565217
      },
      {
        "patch": "for ( Object node : node . get CaMeL Successors ( ) ) { if ( node == goalnode ) {",
        "score": 99.71678670247395
      },
      {
        "patch": "if ( node != null && node . get CaMeL Successors ( ) . size ( ) > 0 ) {",
        "score": 99.617919921875
      },
      {
        "patch": "for ( Node successornodes : list ) { if ( search ( successornodes ) ) { return true ;",
        "score": 99.71615600585938
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { {",
        "score": 99.61130099826389
      },
      {
        "patch": "for ( Node node : nodesvisited ) { if ( node == goalnode ) {",
        "score": 99.715283203125
      },
      {
        "patch": "for ( List < Node > successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.60789794921875
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { String search ( successornodes ) ;",
        "score": 99.7121484375
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) return true ; } } }",
        "score": 99.60460316051136
      },
      {
        "patch": "for ( Node node : nodesvisited ) { if ( node == goalnode ) { return true ;",
        "score": 99.7092815896739
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { return null ; } } }",
        "score": 99.60012950067934
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( 0 ) ) {",
        "score": 99.5992431640625
      },
      {
        "patch": "for ( Node node : nodesvisited ) { if ( node == goalnode ) { return true ; }",
        "score": 99.70416259765625
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { return true ; } } {",
        "score": 99.59787916100544
      },
      {
        "patch": "for ( Object successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.59698845358456
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { if ( true ) {",
        "score": 99.69513494318181
      },
      {
        "patch": "try { for ( Node successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.5915591591283
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) )",
        "score": 99.68700408935547
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( $NUMBER$ ) ) {",
        "score": 99.58574083116319
      },
      {
        "patch": "if ( node == goalnode ) { return true ; } else { return true ; }",
        "score": 99.68237915039063
      },
      {
        "patch": "/ * for ( Node successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.57252261513158
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { if ( search ( successornodes )",
        "score": 99.6797265625
      },
      {
        "patch": "for ( Node < Object > successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.57208251953125
      },
      {
        "patch": "if ( node == goalnode ) { return true ; } else if ( node == goalnode )",
        "score": 99.66724694293478
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( 1 ) ) {",
        "score": 99.57014973958333
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { if ( search ( successornodes ,",
        "score": 99.665673828125
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Classes ( ) ) {",
        "score": 99.56665757123162
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { if ( false ) {",
        "score": 99.66481711647727
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) return false ; } } }",
        "score": 99.5646639737216
      },
      {
        "patch": "Array CaMeL List < Node > nodesvisited = new Hash CaMeL Set < Node > ( ) ; class Search {",
        "score": 99.66189575195312
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) return true ; } }",
        "score": 99.5634998139881
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { if ( search ( node ) )",
        "score": 99.65852864583333
      },
      {
        "patch": "for ( Node successornodes : get CaMeL Successors ( ) ) { if ( search ( successornodes ) )",
        "score": 99.6495361328125
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) return true ; } } {",
        "score": 99.56056906960227
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { if ( node == goalnode )",
        "score": 99.645615234375
      },
      {
        "patch": "for ( Node < ? > successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.5583251953125
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { if ( search ( successornodes",
        "score": 99.64066569010417
      },
      {
        "patch": "for ( Node [ ] node : node . get CaMeL Successors ( ) ) {",
        "score": 99.55706428079044
      },
      {
        "patch": "if ( node == goalnode ) { return false ; } else if ( node == goalnode )",
        "score": 99.63545558763587
      },
      {
        "patch": "for ( Node < Node > node : node . get CaMeL Successors ( ) ) {",
        "score": 99.55274115668402
      },
      {
        "patch": "Array CaMeL List < Node > nodesvisited = new Hash CaMeL Set < > ( ) ; class Search {",
        "score": 99.63148564877717
      },
      {
        "patch": "for ( final Node successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.54838053385417
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { return true ; }",
        "score": 99.62359328497024
      },
      {
        "patch": "for ( int successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.54651596966912
      },
      {
        "patch": "Array CaMeL List < Node > nodesvisited = new Hash CaMeL Set < Node > ( ) ;",
        "score": 99.62281436011905
      },
      {
        "patch": "for ( Iterator < Node > : node . get CaMeL Successors ( ) ) {",
        "score": 99.5445915670956
      },
      {
        "patch": "for ( Node node : node . get CaMeL Successors ( ) ) { if ( node == goalnode )",
        "score": 99.62057362432066
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( true ) ) {",
        "score": 99.53162299262152
      },
      {
        "patch": "if ( node == goalnode ) { return true ; } else { return false ;",
        "score": 99.61116750616776
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) return false ; } }",
        "score": 99.52849469866071
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( this ) ) {",
        "score": 99.52437337239583
      },
      {
        "patch": "Array CaMeL List < Node > nodesvisited = new Hash CaMeL Set < > ( ) ;",
        "score": 99.59953002929687
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Comparator ( ) ) {",
        "score": 99.52100327435662
      },
      {
        "patch": "for ( Node successornodes < Node > successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.59902556046195
      },
      {
        "patch": "for ( Node element : node . get CaMeL Successors ( ) ) {",
        "score": 99.51690266927083
      },
      {
        "patch": "for ( Node successornodes . Node successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.5984219637784
      },
      {
        "patch": "for ( Node successornodes ] : node . get CaMeL Successors ( ) ) {",
        "score": 99.51489935980902
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { if ( search ( Node .",
        "score": 99.59693444293478
      },
      {
        "patch": "for ( Node successornodes [ ] : node . get CaMeL Successors ( ) ) {",
        "score": 99.51374897203948
      },
      {
        "patch": "for ( Node successornodes : new Hash CaMeL Set < Node > ( ) ) {",
        "score": 99.59527909128289
      },
      {
        "patch": "for ( Iterator successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.51347081801471
      },
      {
        "patch": "List < Node > nodesvisited = new Hash CaMeL Set < Node > ( ) ;",
        "score": 99.59287623355263
      },
      {
        "patch": "for ( Node successornodes : list . get CaMeL Successors ( ) ) {",
        "score": 99.5116828469669
      },
      {
        "patch": "Hash CaMeL Set < Node > nodesvisited = new Hash CaMeL Set < Node > ( ) ;",
        "score": 99.5791015625
      },
      {
        "patch": "for ( String successornodes : node . get CaMeL Successors ( ) ) {",
        "score": 99.51056267233456
      },
      {
        "patch": "for ( Node successornodes > node : node . get CaMeL Successors ( ) ) {",
        "score": 99.50905247738487
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Parent ( ) ) {",
        "score": 99.50371237362133
      },
      {
        "patch": "for ( Node successornodes : get CaMeL Successors ( ) ) {",
        "score": 99.57470703125
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { return true {",
        "score": 99.50062866210938
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { return true ;",
        "score": 99.56779174804687
      },
      {
        "patch": "if ( node != null && node . get CaMeL Successors ( ) != null ) {",
        "score": 99.50048828125
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( startnode ) ) {",
        "score": 99.56483218544408
      },
      {
        "patch": "for ( Node successornodes : node . get . get CaMeL Successors ( ) ) {",
        "score": 99.49742367393092
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) return true ; } } else",
        "score": 99.4952725497159
      },
      {
        "patch": "List < Node > nodesvisited = new Hash CaMeL Set < > ( ) ;",
        "score": 99.56005859375
      },
      {
        "patch": "for ( Node successornodes : this . node . get CaMeL Successors ( ) ) {",
        "score": 99.4947574013158
      },
      {
        "patch": "if ( node == goalnode ) { return true ; } else { return true ;",
        "score": 99.55160361842105
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( false ) ) {",
        "score": 99.49408637152777
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { }",
        "score": 99.49146185980902
      },
      {
        "patch": "for ( Node successornodes ( node ) : node . get CaMeL Successors ( ) ) {",
        "score": 99.54784545898437
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) return true ; }",
        "score": 99.49100952148437
      },
      {
        "patch": "Vector < Node > nodesvisited = new Hash CaMeL Set < Node > ( ) ;",
        "score": 99.54719623766448
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { return false ; }",
        "score": 99.4855724516369
      },
      {
        "patch": "if ( node == goalnode ) { return false ; } else { return false ;",
        "score": 99.54470343338816
      },
      {
        "patch": "if ( node != null && node . get CaMeL Successors ( ) . length > 0 ) {",
        "score": 99.48450317382813
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) continue ; }",
        "score": 99.48092490748355
      },
      {
        "patch": "if ( node == goalnode ) { return true ; } else {",
        "score": 99.53695678710938
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) break ; }",
        "score": 99.4787661903783
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { return false {",
        "score": 99.47760009765625
      },
      {
        "patch": "for ( Node startnode : node . get CaMeL Successors ( ) ) {",
        "score": 99.5185546875
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) return true {",
        "score": 99.4774105674342
      },
      {
        "patch": "if ( node == goalnode ) {",
        "score": 99.51708984375
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) continue ;",
        "score": 99.47075059678819
      },
      {
        "patch": "for ( Node node : nodesvisited . get CaMeL Successors ( ) ) {",
        "score": 99.5143683938419
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) return null ; } }",
        "score": 99.46934291294643
      },
      {
        "patch": "for ( Node successornodes -- : node . get CaMeL Successors ( ) ) {",
        "score": 99.50729709201389
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) return false ; }",
        "score": 99.4685791015625
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) ;",
        "score": 99.5070441750919
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { try {",
        "score": 99.46818462171052
      },
      {
        "patch": "Vector < Node > nodesvisited = new Hash CaMeL Set < > ( ) ;",
        "score": 99.50339084201389
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) return true ;",
        "score": 99.4670474403783
      },
      {
        "patch": "if ( node == goalnode ) { return true ;",
        "score": 99.4923565204327
      },
      {
        "patch": "for ( Node < Node > successornodes : node . get CaMeL Successors ( ) ) { {",
        "score": 99.46661086309524
      },
      {
        "patch": "if ( node == goalnode ) { return false ; } else {",
        "score": 99.4885482788086
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors ( ) ) { ) {",
        "score": 99.46598735608552
      },
      {
        "patch": "if ( nodesvisited . contains ( node ) ) {",
        "score": 99.48545485276442
      },
      {
        "patch": "for ( Node ! node . get CaMeL Successors ( ) . equals ( node ) ) {",
        "score": 99.45751953125
      },
      {
        "patch": "for ( Node successornodes : this . get CaMeL Successors ( ) ) {",
        "score": 99.47564338235294
      },
      {
        "patch": "for ( Node parent : node . get CaMeL Successors ( ) ) {",
        "score": 99.44771321614583
      },
      {
        "patch": "for ( Node successornodes : map . get CaMeL Successors ( ) ) {",
        "score": 99.47334558823529
      },
      {
        "patch": "final Node successornodes : node . get CaMeL Successors ( ) ;",
        "score": 99.45772298177083
      },
      {
        "patch": "if ( node != null && node . get CaMeL Successors ( ) == null ) {",
        "score": 99.44736056857639
      },
      {
        "patch": "if ( nodesvisited . contains ( node ) ) { return true ;",
        "score": 99.44995880126953
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Prefix ( ) ) {",
        "score": 99.43864171645221
      },
      {
        "patch": "for ( Node successornodes : node . size ( ) ) {",
        "score": 99.44388834635417
      },
      {
        "patch": "for ( Node first : node . get CaMeL Successors ( ) ) {",
        "score": 99.4286865234375
      },
      {
        "patch": "if ( node == goalnode ) { return true ; } }",
        "score": 99.44098307291667
      },
      {
        "patch": "synchronized ( node . get CaMeL Successors ( ) ) {",
        "score": 99.42526245117188
      },
      {
        "patch": "if ( node == goalnode ) { return false ;",
        "score": 99.43811974158653
      },
      {
        "patch": "for ( Node successornodes = node . get CaMeL Successors ( ) ;",
        "score": 99.41159057617188
      },
      {
        "patch": "for ( Object node : node . get CaMeL Successors ( ) ) {",
        "score": 99.43582356770834
      },
      {
        "patch": "if ( node . get CaMeL Successors ( ) != null ) {",
        "score": 99.40076555524554
      },
      {
        "patch": "if ( node == goalnode ) { return true ; }",
        "score": 99.42827497209821
      },
      {
        "patch": "Node successornodes : node . get CaMeL Successors ( ) ;",
        "score": 99.38630022321429
      },
      {
        "patch": "for ( Node successornodes : node . get CaMeL Successors (",
        "score": 99.41652134486607
      },
      {
        "patch": "Node successornodes = node . get CaMeL Successors ( ) ;",
        "score": 99.34162248883929
      },
      {
        "patch": "for ( Node successornodes : node != goalnode ) {",
        "score": 99.3831298828125
      },
      {
        "patch": "if ( node . get CaMeL Successors ( ) == null ) {",
        "score": 99.33956473214286
      },
      {
        "patch": "while ( nodesvisited . contains ( node ) ) {",
        "score": 99.3719951923077
      },
      {
        "patch": "if ( node != null ) { return false ; } } }",
        "score": 99.3306884765625
      },
      {
        "patch": "if ( node == goalnode ) { return false ; }",
        "score": 99.36711774553571
      },
      {
        "patch": "if ( successornodes . equals ( node ) ) {",
        "score": 99.28126878004808
      },
      {
        "patch": "for ( Node node : nodesvisited ) {",
        "score": 99.3490323153409
      },
      {
        "patch": "if ( node != null ) { return false ; } }",
        "score": 99.27774752103366
      },
      {
        "patch": "for ( Node node : node . get CaMeL Successors ( ) )",
        "score": 99.33624267578125
      },
      {
        "patch": "for ( Node successornodes : list ) {",
        "score": 99.26247336647727
      },
      {
        "patch": "list = new Hash CaMeL Set < Node > ( ) ;",
        "score": 99.32837853064903
      },
      {
        "patch": "node = node . get CaMeL Successors ( ) ; }",
        "score": 99.25255330403645
      },
      {
        "patch": "if ( node != null ) {",
        "score": 99.22714233398438
      },
      {
        "patch": "} else if ( node == goalnode ) {",
        "score": 99.25454711914062
      },
      {
        "patch": "for ( Node node : successornodes ) {",
        "score": 99.1912841796875
      },
      {
        "patch": "for ( Node successornodes : keys ) {",
        "score": 99.18363813920455
      },
      {
        "patch": "while ( node == goalnode ) {",
        "score": 99.24263305664063
      },
      {
        "patch": "for ( Node successornodes : node ) {",
        "score": 99.1497802734375
      },
      {
        "patch": "if ( node != goalnode ) {",
        "score": 99.14367065429687
      },
      {
        "patch": "if ( successornodes != null ) {",
        "score": 99.1306640625
      },
      {
        "patch": "if ( node == goalnode )",
        "score": 99.03972032335069
      },
      {
        "patch": "if ( node instanceof Node ) {",
        "score": 99.0387191772461
      },
      {
        "patch": "while ( node != null ) {",
        "score": 99.03570556640625
      },
      {
        "patch": "for ( Iterator < Node >",
        "score": 98.75179617745536
      }
    ]
  },
  "DETECT_CYCLE-18-19": {
    "src": "if ( hare . get CaMeL Successor ( ) == null )",
    "patches": [
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null )",
        "score": 99.88282121930804
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) return false ; tortoise = node ;",
        "score": 99.85754925271739
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) { return false ; }",
        "score": 99.84170692845395
      },
      {
        "patch": "if ( hare != null && hare . get CaMeL Successor ( ) == null ) {",
        "score": 99.75359497070312
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) != null )",
        "score": 99.74366106305804
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) return false ;",
        "score": 99.7941535500919
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) {",
        "score": 99.74046223958334
      },
      {
        "patch": "if ( true ) { if ( hare . get CaMeL Successor ( ) == null ) return false ;",
        "score": 99.77799849076705
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) . get CaMeL Successor ( ) == null )",
        "score": 99.72557983398437
      },
      {
        "patch": "if ( true ) return false ; tortoise = tortoise . get CaMeL Successor ( ) ;",
        "score": 99.77625621448864
      },
      {
        "patch": "if ( hare != null || hare . get CaMeL Successor ( ) == null ) {",
        "score": 99.70602416992188
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) . get CaMeL Successor ( ) == null ) return false ;",
        "score": 99.77518894361413
      },
      {
        "patch": "if ( hare != null && hare . get CaMeL Successor ( ) == null )",
        "score": 99.69790167557566
      },
      {
        "patch": "if ( hare == tortoise ) return false ; tortoise = node ;",
        "score": 99.74429481907895
      },
      {
        "patch": "if ( true ) { if ( hare . get CaMeL Successor ( ) == null )",
        "score": 99.73627672697368
      },
      {
        "patch": "if ( hare == null && hare . get CaMeL Successor ( ) == null ) {",
        "score": 99.69027709960938
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) return false ; tortoise = true ;",
        "score": 99.73239003057066
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) { return true ; }",
        "score": 99.67567202919408
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) return false ; return false ; }",
        "score": 99.73200334821429
      },
      {
        "patch": "if ( hare != null || hare . get CaMeL Successor ( ) == null )",
        "score": 99.65596731085526
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) != null ) return false ; tortoise = node ;",
        "score": 99.72982124660327
      },
      {
        "patch": "if ( hare == null && hare . get CaMeL Successor ( ) == null )",
        "score": 99.63958418996711
      },
      {
        "patch": "if ( hare != null ) { if ( hare . get CaMeL Successor ( ) == null )",
        "score": 99.72911487926136
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == - 1 )",
        "score": 99.63809407552084
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) return false ; tortoise = null ;",
        "score": 99.7255328634511
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) != null ) {",
        "score": 99.61756998697916
      },
      {
        "patch": "if ( hare != null ) { tortoise = tortoise . get CaMeL Successor ( ) ;",
        "score": 99.72449261209239
      },
      {
        "patch": "if ( hare == null || hare . get CaMeL Successor ( ) == null )",
        "score": 99.61331979851974
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) return true ; tortoise = node ;",
        "score": 99.71740191915761
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == 0 )",
        "score": 99.61084856305804
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) return false ; tortoise =",
        "score": 99.71309988839286
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) { return ) ; }",
        "score": 99.59340948807566
      },
      {
        "patch": "if ( tortoise . get CaMeL Successor ( ) == null ) { return false ; }",
        "score": 99.71295166015625
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) )",
        "score": 99.58256022135417
      },
      {
        "patch": "if ( false ) { if ( hare . get CaMeL Successor ( ) == null ) return false ;",
        "score": 99.71052689985795
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) { return null ; }",
        "score": 99.57973118832237
      },
      {
        "patch": "if ( hare == tortoise ) return true ; tortoise = node ;",
        "score": 99.70880448190789
      },
      {
        "patch": "if ( hare != null && hare . get CaMeL Successor ( ) != null )",
        "score": 99.56986276726974
      },
      {
        "patch": "if ( hare == null || hare . get CaMeL Successor ( ) == null ) return false ;",
        "score": 99.7069091796875
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) != null ) { return false ; }",
        "score": 99.56719006990132
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) return false ; return false ;",
        "score": 99.69860229492187
      },
      {
        "patch": "if ( hare . get CaMeL Name ( ) . equals ( $STRING$ ) )",
        "score": 99.5581413717831
      },
      {
        "patch": "if ( hare != null && ! hare . get CaMeL Successor ( ) )",
        "score": 99.55272081163194
      },
      {
        "patch": "if ( hare != null && hare . get CaMeL Successor ( ) == null ) return false ;",
        "score": 99.69598943536931
      },
      {
        "patch": "if ( hare . equals ( hare . get CaMeL Successor ( ) ) )",
        "score": 99.54549153645833
      },
      {
        "patch": "if ( hare == null && hare . get CaMeL Successor ( ) == null ) return false ;",
        "score": 99.69539018110795
      },
      {
        "patch": "if ( ! hare . get CaMeL Successor ( ) )",
        "score": 99.5446026141827
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) { return false ) ;",
        "score": 99.53829152960526
      },
      {
        "patch": "if ( ( hare . get CaMeL Successor ( ) == null ) ) return false ;",
        "score": 99.69003777754934
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) return true ;",
        "score": 99.53797822840073
      },
      {
        "patch": "try { if ( hare . get CaMeL Successor ( ) == null )",
        "score": 99.53217315673828
      },
      {
        "patch": "if ( ! ( hare . get CaMeL Successor ( ) == null ) ) return false ;",
        "score": 99.6796142578125
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) . equals ( ) )",
        "score": 99.52511596679688
      },
      {
        "patch": "if ( tortoise . get CaMeL Successor ( ) == null ) return false ;",
        "score": 99.66127522786458
      },
      {
        "patch": "if ( false ) { if ( hare . get CaMeL Successor ( ) == null )",
        "score": 99.65935958059211
      },
      {
        "patch": "if ( hare != null || hare . get CaMeL Successor ( ) != null )",
        "score": 99.5234375
      },
      {
        "patch": "if ( hare == tortoise )",
        "score": 99.65551147460937
      },
      {
        "patch": "if ( ! hare . get CaMeL Successor ( ) == null )",
        "score": 99.51806640625
      },
      {
        "patch": "if ( hare == null ) return false ; tortoise = node ;",
        "score": 99.65299718520221
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) . get CaMeL Successor ( ) == )",
        "score": 99.51622250205592
      },
      {
        "patch": "if ( true && hare . get CaMeL Successor ( ) == null ) return false ;",
        "score": 99.6519775390625
      },
      {
        "patch": "if ( hare . get ( hare . get CaMeL Successor ( ) ) )",
        "score": 99.51336669921875
      },
      {
        "patch": "if ( tortoise . get CaMeL Successor ( ) == null )",
        "score": 99.64806315104167
      },
      {
        "patch": "if ( hare == null && hare . get CaMeL Successor ( ) != null )",
        "score": 99.51251541940789
      },
      {
        "patch": "if ( ) { if ( hare . get CaMeL Successor ( ) == null ) return false ;",
        "score": 99.64705403645833
      },
      {
        "patch": "if ( ! hare . get CaMeL Successor ( ) . is CaMeL Empty ( ) )",
        "score": 99.51236122532895
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) != null ) return false ;",
        "score": 99.6353759765625
      },
      {
        "patch": "while ( hare . get CaMeL Successor ( ) == null )",
        "score": 99.51146589006696
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) . equals ( null ) )",
        "score": 99.51007439108456
      },
      {
        "patch": "try { if ( hare . get CaMeL Successor ( ) == null ) return false ;",
        "score": 99.61709755345395
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == )",
        "score": 99.50967172475961
      },
      {
        "patch": "else { if ( hare . get CaMeL Successor ( ) == null )",
        "score": 99.50917053222656
      },
      {
        "patch": "if ( tortoise . get CaMeL Successor ( ) == null ) return false ; tortoise =",
        "score": 99.60999644886364
      },
      {
        "patch": "if ( hare != null || ! hare . get CaMeL Successor ( ) )",
        "score": 99.50775146484375
      },
      {
        "patch": "if ( ! hare . get CaMeL Successor ( ) == null ) return false ;",
        "score": 99.60114203559027
      },
      {
        "patch": "if ( hare . get ( ) . get CaMeL Successor ( ) == null )",
        "score": 99.50600857204861
      },
      {
        "patch": "if ( hare == tortoise ) return false ;",
        "score": 99.5999286358173
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( 0 ) == null )",
        "score": 99.50499674479167
      },
      {
        "patch": "if ( ! hare . get CaMeL Successor ( ) . get CaMeL Successor ( ) )",
        "score": 99.50322522615132
      },
      {
        "patch": "if ( hare == tortoise || hare . get CaMeL Successor ( ) == null )",
        "score": 99.59085518973214
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) )",
        "score": 99.49825032552083
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) return false ; }",
        "score": 99.58983696831598
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == 0 ) {",
        "score": 99.49759114583334
      },
      {
        "patch": "if ( hare == tortoise ) {",
        "score": 99.589599609375
      },
      {
        "patch": "if ( hare == null && ! hare . get CaMeL Successor ( ) )",
        "score": 99.49596489800348
      },
      {
        "patch": "if ( true ) tortoise = tortoise . get CaMeL Successor ( ) ;",
        "score": 99.587646484375
      },
      {
        "patch": "/ * if ( hare . get CaMeL Successor ( ) == null )",
        "score": 99.49492645263672
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( hare ) )",
        "score": 99.49468994140625
      },
      {
        "patch": "if ( true ) { tortoise = tortoise . get CaMeL Successor ( ) ;",
        "score": 99.57586059570312
      },
      {
        "patch": "} if ( hare . get CaMeL Successor ( ) == null )",
        "score": 99.49366861979166
      },
      {
        "patch": "if ( ! tortoise . get CaMeL Successor ( ) == null ) return false ;",
        "score": 99.56744063527961
      },
      {
        "patch": "else if ( hare . get CaMeL Successor ( ) == null )",
        "score": 99.4918212890625
      },
      {
        "patch": "if ( hare == tortoise ) { return false ; }",
        "score": 99.56582845052084
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) return true )",
        "score": 99.4913689108456
      },
      {
        "patch": "if ( tortoise . get CaMeL Successor ( ) == null ) {",
        "score": 99.55563354492188
      },
      {
        "patch": "if ( ! hare . get CaMeL Successor ( ) . equals ( ) )",
        "score": 99.4912109375
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) return false )",
        "score": 99.48634966681985
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == true )",
        "score": 99.48489815848214
      },
      {
        "patch": "if ( ! tortoise . get CaMeL Successor ( ) == null )",
        "score": 99.54175567626953
      },
      {
        "patch": "if ( ! hare . get CaMeL Successor ( ) . equals ( null ) )",
        "score": 99.48403591579861
      },
      {
        "patch": "if ( hare == tortoise ) return true ;",
        "score": 99.53977614182692
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) != - 1 )",
        "score": 99.4805908203125
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) { return false ;",
        "score": 99.5380859375
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( hare ) == null )",
        "score": 99.47964477539062
      },
      {
        "patch": "if ( tortoise . get CaMeL Successor ( ) != null ) return false ;",
        "score": 99.53278266059027
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( [ 0 ] ) == null )",
        "score": 99.4730583639706
      },
      {
        "patch": "if ( ( hare . get CaMeL Successor ( ) == null ) )",
        "score": 99.51762390136719
      },
      {
        "patch": "if ( hare . get ( ) == null )",
        "score": 99.47090657552083
      },
      {
        "patch": "if ( ! ( hare . get CaMeL Successor ( ) == null ) )",
        "score": 99.51666618795956
      },
      {
        "patch": "if ( hare != null )",
        "score": 99.46477508544922
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) true ;",
        "score": 99.51507568359375
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) != null ) )",
        "score": 99.46175944010416
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) break ;",
        "score": 99.51296997070312
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( true ) == null )",
        "score": 99.45934244791667
      },
      {
        "patch": "if ( hare == tortoise ) { return true ; }",
        "score": 99.49357096354167
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null && true )",
        "score": 99.45651245117188
      },
      {
        "patch": "if ( tortoise . get CaMeL Successor ( ) != null )",
        "score": 99.4907470703125
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == - 1 ) {",
        "score": 99.45439147949219
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) false ;",
        "score": 99.48198699951172
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) { )",
        "score": 99.45316314697266
      },
      {
        "patch": "if ( hare != tortoise )",
        "score": 99.47318725585937
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) != 0 )",
        "score": 99.45186941964286
      },
      {
        "patch": "if ( hare != tortoise ) return false ;",
        "score": 99.47005521334134
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == null ) return )",
        "score": 99.44796752929688
      },
      {
        "patch": "if ( hare != tortoise ) {",
        "score": 99.45133833451705
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( 1 ) == null )",
        "score": 99.44483235677083
      },
      {
        "patch": "return hare . get CaMeL Successor ( ) == null ) ;",
        "score": 99.44597516741071
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == 1 )",
        "score": 99.44105747767857
      },
      {
        "patch": "return hare . get CaMeL Successor ( ) == null ;",
        "score": 99.44467397836539
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == false )",
        "score": 99.43879917689732
      },
      {
        "patch": "if ( hare == null ) return false ;",
        "score": 99.44248268821023
      },
      {
        "patch": "if ( hare . get CaMeL Name ( ) == null )",
        "score": 99.43720354352679
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) > null )",
        "score": 99.43759591238839
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( this ) == null )",
        "score": 99.4369140625
      },
      {
        "patch": "if ( hare . get CaMeL Key ( ) == null )",
        "score": 99.43589564732143
      },
      {
        "patch": "return tortoise . get CaMeL Successor ( ) == null ;",
        "score": 99.42192731584821
      },
      {
        "patch": "if ( hare == null )",
        "score": 99.42757415771484
      },
      {
        "patch": "if ( tortoise == null ) return false ;",
        "score": 99.42006429036458
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) <= null )",
        "score": 99.41298130580357
      },
      {
        "patch": "if ( node . get CaMeL Successor ( ) == null )",
        "score": 99.3988506610577
      },
      {
        "patch": "if ( hare != null ) {",
        "score": 99.41140407986111
      },
      {
        "patch": "if ( hare . get CaMeL Id ( ) == null )",
        "score": 99.4063720703125
      },
      {
        "patch": "if ( tortoise == tortoise )",
        "score": 99.3274258700284
      },
      {
        "patch": "if ( hare . get CaMeL Parent ( ) == null )",
        "score": 99.40585763113839
      },
      {
        "patch": "if ( tortoise == null )",
        "score": 99.31715901692708
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) == ) {",
        "score": 99.39837646484375
      },
      {
        "patch": "if ( hare . get CaMeL Successor ( ) ==",
        "score": 99.3148701985677
      },
      {
        "patch": "if ( hare == node ) return false ;",
        "score": 99.2586669921875
      },
      {
        "patch": "if ( hare . is CaMeL Empty ( ) )",
        "score": 99.38113403320312
      },
      {
        "patch": "if ( hare . get ( ) )",
        "score": 99.370263671875
      },
      {
        "patch": "switch ( hare . get CaMeL Successor ( ) )",
        "score": 99.35904947916667
      },
      {
        "patch": "if ( tortoise != null ) {",
        "score": 99.179638671875
      },
      {
        "patch": "if ( hare == null ) {",
        "score": 99.34332275390625
      },
      {
        "patch": "synchronized ( hare . get CaMeL Successor ( ) )",
        "score": 99.31809488932292
      },
      {
        "patch": "if ( true ) {",
        "score": 99.1583760579427
      },
      {
        "patch": "if ( hare . size ( ) == 0 )",
        "score": 99.298583984375
      },
      {
        "patch": "if ( tortoise != null )",
        "score": 99.13930257161458
      },
      {
        "patch": "if ( ! hare . get ( ) )",
        "score": 99.2300692471591
      },
      {
        "patch": "if ( hare == node )",
        "score": 99.13248443603516
      },
      {
        "patch": "if ( hare . get ( ) ) {",
        "score": 99.22828258167614
      },
      {
        "patch": "if ( true ) return false ;",
        "score": 99.08155822753906
      },
      {
        "patch": "if ( hare . equals ( ) )",
        "score": 99.15555419921876
      },
      {
        "patch": "if ( hare == false )",
        "score": 99.057373046875
      },
      {
        "patch": "if ( ! hare != null )",
        "score": 99.12444390190973
      },
      {
        "patch": "if ( hare == true )",
        "score": 99.00798034667969
      },
      {
        "patch": "if ( hare != null ) )",
        "score": 99.07906765407986
      },
      {
        "patch": "if ( true )",
        "score": 98.97568969726562
      },
      {
        "patch": "if ( hare == null ) )",
        "score": 99.05030653211806
      },
      {
        "patch": "if ( false ) {",
        "score": 98.894287109375
      },
      {
        "patch": "synchronized ( hare )",
        "score": 98.9550069173177
      },
      {
        "patch": "if ( node == null )",
        "score": 98.88025774274554
      },
      {
        "patch": "if ( hare instanceof Node )",
        "score": 98.89408111572266
      },
      {
        "patch": "if ( hare ==",
        "score": 98.77189127604167
      },
      {
        "patch": "if ( hare . get )",
        "score": 98.89397430419922
      },
      {
        "patch": "if ( false )",
        "score": 98.67214965820312
      },
      {
        "patch": "if ( hare !=",
        "score": 98.6201171875
      },
      {
        "patch": "if ( hare )",
        "score": 98.63057454427083
      },
      {
        "patch": "if ( ) {",
        "score": 98.59130249023437
      },
      {
        "patch": "return false ; }",
        "score": 98.52311401367187
      },
      {
        "patch": "return true ; }",
        "score": 98.494384765625
      },
      {
        "patch": "if ( ) )",
        "score": 98.17144775390625
      }
    ]
  },
  "FIND_FIRST_IN_SORTED-19-20": {
    "src": "while ( lo <= hi ) {",
    "patches": [
      {
        "patch": "while ( lo <= hi ) {",
        "score": 99.76232147216797
      },
      {
        "patch": "while ( lo <= hi ) { while ( lo <= hi ) {",
        "score": 99.759326171875
      },
      {
        "patch": "while ( lo < hi ) { while ( lo <= hi ) {",
        "score": 99.71586100260417
      },
      {
        "patch": "while ( ( lo <= hi ) || ( lo == hi ) ) {",
        "score": 99.70769500732422
      },
      {
        "patch": "while ( lo <= hi ) { while ( lo >= hi ) {",
        "score": 99.7110107421875
      },
      {
        "patch": "int hi = arr . length ; while ( lo <= hi ) {",
        "score": 99.66057942708333
      },
      {
        "patch": "while ( lo >= hi ) { while ( lo <= hi ) {",
        "score": 99.700537109375
      },
      {
        "patch": "while ( lo <= hi ) { while ( lo < hi ) {",
        "score": 99.7003662109375
      },
      {
        "patch": "while ( ( lo <= hi ) || ( lo == 0 ) ) {",
        "score": 99.64126586914062
      },
      {
        "patch": "while ( lo < hi ) { while ( lo >= hi ) {",
        "score": 99.66373697916667
      },
      {
        "patch": "while ( ( lo <= hi ) && ( lo == hi ) ) {",
        "score": 99.63290405273438
      },
      {
        "patch": "while ( lo <= hi ) { while ( lo > hi ) {",
        "score": 99.65567220052084
      },
      {
        "patch": "while ( lo <= hi )",
        "score": 99.59749930245536
      },
      {
        "patch": "while ( lo >= hi ) { while ( lo >= hi ) {",
        "score": 99.65345052083333
      },
      {
        "patch": "while ( lo <= hi ) { if ( lo <= hi ) {",
        "score": 99.59640299479166
      },
      {
        "patch": "while ( lo < hi ) { while ( lo < hi ) {",
        "score": 99.65132649739583
      },
      {
        "patch": "while ( ( lo <= hi ) || ( lo == hi ) )",
        "score": 99.58435872395833
      },
      {
        "patch": "while ( lo >= hi ) { while ( lo < hi ) {",
        "score": 99.64689127604167
      },
      {
        "patch": "int lo = arr . length ; while ( lo <= hi ) {",
        "score": 99.5609375
      },
      {
        "patch": "while ( lo <= hi ) { while ( hi <= hi ) {",
        "score": 99.6393310546875
      },
      {
        "patch": "while ( lo <= hi ) { if ( lo == hi ) {",
        "score": 99.55603841145833
      },
      {
        "patch": "while ( lo < hi ) { while ( lo > hi ) {",
        "score": 99.6271484375
      },
      {
        "patch": "while ( lo <= hi ) { while ( lo <= hi )",
        "score": 99.55242919921875
      },
      {
        "patch": "while ( lo <= hi ) { int lo = lo + hi ;",
        "score": 99.55144856770833
      },
      {
        "patch": "while ( lo <= hi ) { while ( lo == hi ) {",
        "score": 99.60792643229166
      },
      {
        "patch": "while ( lo == hi ) { while ( lo <= hi ) {",
        "score": 99.60567220052083
      },
      {
        "patch": "while ( lo <= hi && ( lo <= hi ) ) {",
        "score": 99.52450997488839
      },
      {
        "patch": "while ( lo >= 0 ) { while ( lo <= hi ) {",
        "score": 99.60232747395834
      },
      {
        "patch": "while ( lo == arr [ hi - 1 ] ) {",
        "score": 99.51376577524039
      },
      {
        "patch": "while ( hi <= hi ) { while ( lo <= hi ) {",
        "score": 99.59508463541667
      },
      {
        "patch": "while ( ( lo <= hi ) || ( lo == 0 ) )",
        "score": 99.51375325520833
      },
      {
        "patch": "while ( lo < hi ) { while ( hi <= hi ) {",
        "score": 99.59305826822917
      },
      {
        "patch": "while ( ( lo <= hi ) && ( lo == hi ) )",
        "score": 99.50574544270833
      },
      {
        "patch": "while ( lo != hi ) { while ( lo <= hi ) {",
        "score": 99.58880208333333
      },
      {
        "patch": "while ( lo <= hi ) { int hi = arr . length ;",
        "score": 99.50359700520833
      },
      {
        "patch": "while ( lo >= hi ) { while ( lo > hi ) {",
        "score": 99.58270670572917
      },
      {
        "patch": "while ( ( lo <= hi ) || ( lo <= hi ) )",
        "score": 99.5019775390625
      },
      {
        "patch": "while ( lo >= hi ) { while ( hi <= hi ) {",
        "score": 99.58090006510416
      },
      {
        "patch": "while ( lo <= hi ) { int lo = arr . length ;",
        "score": 99.489892578125
      },
      {
        "patch": "while ( lo <= hi && ( lo == hi ) ) {",
        "score": 99.48948451450893
      },
      {
        "patch": "while ( lo <= hi ) { while ( hi >= hi ) {",
        "score": 99.568896484375
      },
      {
        "patch": "while ( lo <= hi && ( lo == 0 ) ) {",
        "score": 99.4842529296875
      },
      {
        "patch": "while ( lo == hi ) { while ( lo >= hi ) {",
        "score": 99.56470540364583
      },
      {
        "patch": "if ( lo <= hi ) { int hi = arr . length ;",
        "score": 99.480126953125
      },
      {
        "patch": "while ( lo > hi ) { while ( lo <= hi ) {",
        "score": 99.56410319010416
      },
      {
        "patch": "int hi = arr . length ; while ( lo < hi ) {",
        "score": 99.477099609375
      },
      {
        "patch": "while ( lo >= 0 ) { while ( lo >= hi ) {",
        "score": 99.56131998697917
      },
      {
        "patch": "if ( lo <= hi ) { int lo = arr . length ;",
        "score": 99.47646484375
      },
      {
        "patch": "while ( lo >= 0 ) { while ( lo < hi ) {",
        "score": 99.55975748697917
      },
      {
        "patch": "int hi = arr . length ; while ( lo == hi ) {",
        "score": 99.47533365885417
      },
      {
        "patch": "while ( lo <= hi ) { if ( lo >= hi ) {",
        "score": 99.55919596354167
      },
      {
        "patch": "while ( lo <= hi ) { if ( lo <= hi )",
        "score": 99.47141810825893
      },
      {
        "patch": "while ( lo <= hi ) { while ( hi < hi ) {",
        "score": 99.5591552734375
      },
      {
        "patch": "while ( ( lo <= hi ) && ( lo == 0 ) )",
        "score": 99.46975911458334
      },
      {
        "patch": "while ( hi <= hi ) { while ( lo >= hi ) {",
        "score": 99.55330403645833
      },
      {
        "patch": "while ( lo <= hi ) { int hi = lo + hi ;",
        "score": 99.46931966145833
      },
      {
        "patch": "while ( lo <= hi ) { while ( lo <= 0 ) {",
        "score": 99.55264485677084
      },
      {
        "patch": "while ( lo == arr [ lo - 1 ] ) {",
        "score": 99.46431790865384
      },
      {
        "patch": "while ( lo >= hi ) { while ( lo == hi ) {",
        "score": 99.54689127604166
      },
      {
        "patch": "while ( lo <= hi && lo <= hi ) {",
        "score": 99.45016479492188
      },
      {
        "patch": "while ( lo < hi ) { while ( lo == hi ) {",
        "score": 99.544970703125
      },
      {
        "patch": "while ( lo < hi ) {",
        "score": 99.44122314453125
      },
      {
        "patch": "while ( lo <= hi ) { while ( lo != hi ) {",
        "score": 99.5448974609375
      },
      {
        "patch": "while ( lo <= hi || lo <= hi ) {",
        "score": 99.43332926432292
      },
      {
        "patch": "if ( lo <= hi ) { while ( lo <= hi ) {",
        "score": 99.53881022135417
      },
      {
        "patch": "while ( lo <= hi && ( lo <= hi ) )",
        "score": 99.42857947716347
      },
      {
        "patch": "while ( lo == hi ) { while ( lo < hi ) {",
        "score": 99.53836263020834
      },
      {
        "patch": "while ( lo <= hi ) { while ( lo == hi )",
        "score": 99.42264229910714
      },
      {
        "patch": "while ( hi <= hi ) { while ( lo < hi ) {",
        "score": 99.53624674479167
      },
      {
        "patch": "while ( lo <= hi ) { if ( lo == hi )",
        "score": 99.42152622767857
      },
      {
        "patch": "while ( lo != hi ) { while ( lo >= hi ) {",
        "score": 99.534765625
      },
      {
        "patch": "while ( lo <= hi || hi <= hi ) {",
        "score": 99.41963704427083
      },
      {
        "patch": "while ( lo <= 0 ) { while ( lo <= hi ) {",
        "score": 99.53444010416666
      },
      {
        "patch": "while ( lo <= hi && ( lo == hi ) )",
        "score": 99.38723520132211
      },
      {
        "patch": "while ( lo <= lo ) { while ( lo <= hi ) {",
        "score": 99.53257649739584
      },
      {
        "patch": "while ( lo <= hi && ( lo == 0 ) )",
        "score": 99.37759164663461
      },
      {
        "patch": "while ( lo <= hi ) { while ( lo >= 0 ) {",
        "score": 99.53173828125
      },
      {
        "patch": "int hi = arr . length ; while ( lo <= hi )",
        "score": 99.36807686941964
      },
      {
        "patch": "while ( lo < hi ) { if ( lo <= hi ) {",
        "score": 99.53115234375
      },
      {
        "patch": "int hi = ( lo + hi ) / $NUMBER$ ;",
        "score": 99.35677083333333
      },
      {
        "patch": "while ( lo < hi ) { while ( lo <= 0 ) {",
        "score": 99.52891438802084
      },
      {
        "patch": "while ( lo <= hi && lo == hi ) {",
        "score": 99.35347493489583
      },
      {
        "patch": "while ( lo <= hi ) { while ( hi > hi ) {",
        "score": 99.52665201822917
      },
      {
        "patch": "while ( lo == hi ) {",
        "score": 99.3511734008789
      },
      {
        "patch": "while ( lo <= hi ) { while ( lo <= lo ) {",
        "score": 99.52471516927083
      },
      {
        "patch": "while ( lo <= hi || lo == hi ) {",
        "score": 99.35010782877605
      },
      {
        "patch": "while ( lo >= hi ) { if ( lo <= hi ) {",
        "score": 99.52430013020833
      },
      {
        "patch": "while ( lo <= hi && hi <= hi ) {",
        "score": 99.34536743164062
      },
      {
        "patch": "while ( lo <= hi && lo <= hi )",
        "score": 99.34208540482955
      },
      {
        "patch": "while ( lo >= 0 ) { while ( lo >= 0 ) {",
        "score": 99.52291666666666
      },
      {
        "patch": "while ( lo <= hi ) { int lo = lo ;",
        "score": 99.33864182692308
      },
      {
        "patch": "while ( lo != hi ) { while ( lo < hi ) {",
        "score": 99.5227783203125
      },
      {
        "patch": "while ( lo <= hi || lo <= hi )",
        "score": 99.33265269886364
      },
      {
        "patch": "while ( lo <= hi ) { while ( lo > 0 ) {",
        "score": 99.5215087890625
      },
      {
        "patch": "int lo = ( lo + hi ) / $NUMBER$ ;",
        "score": 99.31728108723958
      },
      {
        "patch": "while ( lo > hi ) { while ( lo < hi ) {",
        "score": 99.52010904947916
      },
      {
        "patch": "while ( lo <= hi || hi <= hi )",
        "score": 99.3131436434659
      },
      {
        "patch": "while ( lo < hi ) { while ( hi >= hi ) {",
        "score": 99.51800130208333
      },
      {
        "patch": "while ( lo <= hi || hi == hi ) {",
        "score": 99.30031331380208
      },
      {
        "patch": "while ( lo >= hi ) {",
        "score": 99.50172424316406
      },
      {
        "patch": "for ( int [ ] arr : arr ) {",
        "score": 99.2959872159091
      },
      {
        "patch": "if ( lo <= hi ) { lo = hi ; }",
        "score": 99.439697265625
      },
      {
        "patch": "while ( lo <= hi ) { int [ ] arr = ( int",
        "score": 99.29353841145833
      },
      {
        "patch": "while ( lo <= hi ) { if ( arr [ hi ] ==",
        "score": 99.28866373697916
      },
      {
        "patch": "int x = ( lo + hi ) / $NUMBER$ ;",
        "score": 99.28240966796875
      },
      {
        "patch": "while ( lo < hi ) { if ( lo <= hi )",
        "score": 99.39253452845982
      },
      {
        "patch": "int lo = arr . length ; while ( lo <= hi )",
        "score": 99.25839669363839
      },
      {
        "patch": "while ( lo < hi ) { while ( lo <= hi )",
        "score": 99.38917759486607
      },
      {
        "patch": "while ( lo <= hi || hi == arr . length ) {",
        "score": 99.25518798828125
      },
      {
        "patch": "while ( lo >= hi ) { if ( lo <= hi )",
        "score": 99.37581961495536
      },
      {
        "patch": "while ( lo <= hi ) { while ( lo < hi )",
        "score": 99.37321254185268
      },
      {
        "patch": "while ( lo > hi ) {",
        "score": 99.25292205810547
      },
      {
        "patch": "while ( lo >= hi ) { while ( lo <= hi )",
        "score": 99.36658586774554
      },
      {
        "patch": "while ( lo <= hi || lo != hi ) {",
        "score": 99.24474080403645
      },
      {
        "patch": "while ( lo <= hi ) { while ( lo >= hi )",
        "score": 99.36292375837054
      },
      {
        "patch": "while ( lo <= hi || lo == hi )",
        "score": 99.24311967329545
      },
      {
        "patch": "while ( lo <= hi ) { if ( lo < hi )",
        "score": 99.35410853794643
      },
      {
        "patch": "while ( ( lo <= hi ) ) {",
        "score": 99.2413330078125
      },
      {
        "patch": "while ( lo >= 0 ) {",
        "score": 99.32587432861328
      },
      {
        "patch": "while ( lo <= hi && lo == hi )",
        "score": 99.23949085582386
      },
      {
        "patch": "while ( lo < hi )",
        "score": 99.23297991071429
      },
      {
        "patch": "while ( hi <= hi ) {",
        "score": 99.32439422607422
      },
      {
        "patch": "while ( lo < hi && lo <= hi ) {",
        "score": 99.23024495442708
      },
      {
        "patch": "while ( lo <= hi ) { {",
        "score": 99.31421576605902
      },
      {
        "patch": "while ( lo == hi && lo <= hi ) {",
        "score": 99.22764078776042
      },
      {
        "patch": "} while ( lo <= hi ) {",
        "score": 99.29239908854167
      },
      {
        "patch": "if ( lo <= hi ) {",
        "score": 99.22655487060547
      },
      {
        "patch": "while ( lo != hi ) {",
        "score": 99.2813491821289
      },
      {
        "patch": "while ( lo <= hi && hi <= hi )",
        "score": 99.2228670987216
      },
      {
        "patch": "/ * while ( lo <= hi ) {",
        "score": 99.27955322265625
      },
      {
        "patch": "while ( lo < hi || lo <= hi ) {",
        "score": 99.22172037760417
      },
      {
        "patch": "while ( lo <= hi && x <= hi ) {",
        "score": 99.2164306640625
      },
      {
        "patch": "while ( lo < hi ) { {",
        "score": 99.23689100477431
      },
      {
        "patch": "while ( lo <= hi && hi == hi ) {",
        "score": 99.2135009765625
      },
      {
        "patch": "while ( lo == 0 || lo <= hi ) {",
        "score": 99.21339925130208
      },
      {
        "patch": "while ( lo <= 0 ) {",
        "score": 99.21552276611328
      },
      {
        "patch": "int hi = arr . length ;",
        "score": 99.21117401123047
      },
      {
        "patch": "while ( lo == arr [ lo ] ) {",
        "score": 99.20500044389205
      },
      {
        "patch": "while ( lo <= hi ) { continue ;",
        "score": 99.19566650390625
      },
      {
        "patch": "while ( lo <= hi ) { int [ ] arr =",
        "score": 99.20450533353366
      },
      {
        "patch": "while ( lo <= 1 ) {",
        "score": 99.1774673461914
      },
      {
        "patch": "while ( lo == arr [ hi ] ) {",
        "score": 99.2030029296875
      },
      {
        "patch": "while ( lo <= length ) {",
        "score": 99.17655181884766
      },
      {
        "patch": "while ( lo <= hi || hi == hi )",
        "score": 99.18464799360795
      },
      {
        "patch": "while ( lo <= $NUMBER$ ) {",
        "score": 99.1749038696289
      },
      {
        "patch": "while ( lo <= lo ) {",
        "score": 99.17355346679688
      },
      {
        "patch": "while ( lo + hi <= hi ) {",
        "score": 99.13040771484376
      },
      {
        "patch": "} while ( lo >= hi ) {",
        "score": 99.16779242621527
      },
      {
        "patch": "for ( int [ ] arr : arr )",
        "score": 99.1251220703125
      },
      {
        "patch": "while ( hi < hi ) {",
        "score": 99.16101837158203
      },
      {
        "patch": "while ( lo == hi )",
        "score": 99.12346540178571
      },
      {
        "patch": "while ( lo >= hi ) { {",
        "score": 99.14796956380208
      },
      {
        "patch": "while ( lo == arr . length ) {",
        "score": 99.12174072265626
      },
      {
        "patch": "while ( lo != 0 ) {",
        "score": 99.13273620605469
      },
      {
        "patch": "int hi = arr . length - 1 ;",
        "score": 99.11390991210938
      },
      {
        "patch": "while ( lo > 0 ) {",
        "score": 99.13020324707031
      },
      {
        "patch": "while ( lo <= hi + 1 ) {",
        "score": 99.10051879882812
      },
      {
        "patch": "while ( hi >= hi ) {",
        "score": 99.12947082519531
      },
      {
        "patch": "while ( lo & hi <= hi ) {",
        "score": 99.08998413085938
      },
      {
        "patch": "while ( lo >= 1 ) {",
        "score": 99.12284088134766
      },
      {
        "patch": "while ( lo <= hi - 1 ) {",
        "score": 99.0840576171875
      },
      {
        "patch": "} while ( lo < hi ) {",
        "score": 99.11102973090277
      },
      {
        "patch": "if ( lo <= hi )",
        "score": 99.07151576450893
      },
      {
        "patch": "while ( lo >= - 1 ) {",
        "score": 99.10881890190973
      },
      {
        "patch": "int hi = arr [ lo ] ;",
        "score": 99.05375162760417
      },
      {
        "patch": "while ( lo >= $NUMBER$ ) {",
        "score": 99.10504150390625
      },
      {
        "patch": "int lo = arr . length ;",
        "score": 99.04166412353516
      },
      {
        "patch": "while ( lo < lo ) {",
        "score": 99.09893798828125
      },
      {
        "patch": "while ( ( lo <= hi ) )",
        "score": 99.03822835286458
      },
      {
        "patch": "while ( lo <= max ) {",
        "score": 99.098388671875
      },
      {
        "patch": "while ( lo == 0 ) {",
        "score": 99.00157165527344
      },
      {
        "patch": "while ( lo < length ) {",
        "score": 99.09310913085938
      },
      {
        "patch": "while ( lo > hi )",
        "score": 98.992919921875
      },
      {
        "patch": "while ( lo < 0 ) {",
        "score": 99.08486938476562
      },
      {
        "patch": "while ( lo >= hi )",
        "score": 98.9908447265625
      },
      {
        "patch": "while ( 1 <= hi ) {",
        "score": 98.97406005859375
      },
      {
        "patch": "if ( lo == hi ) {",
        "score": 98.96893310546875
      },
      {
        "patch": "if ( lo < hi )",
        "score": 98.9591064453125
      },
      {
        "patch": "int hi = 0 ;",
        "score": 98.63365681966145
      },
      {
        "patch": "return - 1 ;",
        "score": 98.4395751953125
      },
      {
        "patch": "for ( int }",
        "score": 98.32918701171874
      },
      {
        "patch": "} else {",
        "score": 98.22802734375
      },
      {
        "patch": "for ( )",
        "score": 98.17633819580078
      },
      {
        "patch": "for ( int",
        "score": 98.17002868652344
      }
    ]
  },
  "FIND_IN_SORTED-20-21": {
    "src": "return binsearch ( arr , x , mid , end ) ;",
    "patches": [
      {
        "patch": "return binsearch ( arr , x , mid , end ) ; } else { return mid ;",
        "score": 99.8900634765625
      },
      {
        "patch": "return binsearch ( arr , x , mid ) ;",
        "score": 99.8377176920573
      },
      {
        "patch": "return binsearch ( arr , x , mid , end ) ;",
        "score": 99.88656180245536
      },
      {
        "patch": "return binsearch ( arr , x , 0 , arr . length ) ;",
        "score": 99.7843246459961
      },
      {
        "patch": "return binsearch ( arr , x , mid , end , end ) ;",
        "score": 99.76779174804688
      },
      {
        "patch": "return binsearch ( arr , x , mid , end - arr [ mid ] ) ;",
        "score": 99.76739180715461
      },
      {
        "patch": "return binsearch ( arr , x , end , end ) ;",
        "score": 99.70938546316964
      },
      {
        "patch": "return arr [ mid ] ; } else if ( x > arr [ mid ] ) {",
        "score": 99.76435932360198
      },
      {
        "patch": "return binsearch ( arr , x , end , end , end ) ;",
        "score": 99.68737030029297
      },
      {
        "patch": "return binsearch ( arr , x , mid , end ) ; } else return mid ;",
        "score": 99.7387631064967
      },
      {
        "patch": "return binsearch ( arr , x , mid , mid ) ;",
        "score": 99.64944893973214
      },
      {
        "patch": "return binsearch ( arr , x , start , mid ) ;",
        "score": 99.73677280970982
      },
      {
        "patch": "return binsearch ( arr , x , mid , mid , end ) ;",
        "score": 99.64280700683594
      },
      {
        "patch": "return binsearch ( arr , x , start , mid , end ) ;",
        "score": 99.72970581054688
      },
      {
        "patch": "return binsearch ( arr , x , end ) ;",
        "score": 99.6239725748698
      },
      {
        "patch": "return binsearch ( arr , x , start , mid , end ) ; } else {",
        "score": 99.69287109375
      },
      {
        "patch": "return binsearch ( arr , x , mid , end , 1 ) ;",
        "score": 99.62120056152344
      },
      {
        "patch": "return binsearch ( new int [ ] { x , start , mid , end ) ;",
        "score": 99.68890059621711
      },
      {
        "patch": "return binsearch ( arr , x , mid , end - end ) ;",
        "score": 99.60275268554688
      },
      {
        "patch": "return mid ; } else if ( x > arr [ mid ] ) { return mid ;",
        "score": 99.68729440789474
      },
      {
        "patch": "return binsearch ( arr , x , mid , start , end ) ;",
        "score": 99.5986328125
      },
      {
        "patch": "return binsearch ( arr , x , mid , arr . length ) ;",
        "score": 99.67861938476562
      },
      {
        "patch": "return binsearch ( arr , x , mid , 1 ) ;",
        "score": 99.59230259486607
      },
      {
        "patch": "return binsearch ( arr , x , mid ) ; } else { return mid ; }",
        "score": 99.66658742804276
      },
      {
        "patch": "return binsearch ( arr , mid , mid , end ) ;",
        "score": 99.57078334263393
      },
      {
        "patch": "synchronized ( arr ) { return binsearch ( arr , x , mid , end ) ;",
        "score": 99.65341668379934
      },
      {
        "patch": "return binsearch ( arr , x , start , end , end ) ;",
        "score": 99.56507873535156
      },
      {
        "patch": "return binsearch ( arr , x , mid , end ) ; } else {",
        "score": 99.6469367532169
      },
      {
        "patch": "return binsearch ( arr , start , mid ) ;",
        "score": 99.5628153483073
      },
      {
        "patch": "return binsearch ( arr , x , mid , end - start ) ;",
        "score": 99.6324691772461
      },
      {
        "patch": "return binsearch ( arr , x , start , end ) ;",
        "score": 99.56242152622768
      },
      {
        "patch": "return binsearch ( arr , x , mid , end ) ; }",
        "score": 99.623974609375
      },
      {
        "patch": "return binsearch ( arr , mid , end , end ) ;",
        "score": 99.55875941685268
      },
      {
        "patch": "return binsearch ( arr , x , mid , end - start ) ; } else {",
        "score": 99.61362818667763
      },
      {
        "patch": "return binsearch ( arr , start , mid , end ) ;",
        "score": 99.55664934430804
      },
      {
        "patch": "return binsearch ( arr , x , 0 , arr . length , x ) ;",
        "score": 99.611572265625
      },
      {
        "patch": "return binsearch ( arr , x , mid , end , 0 ) ;",
        "score": 99.55537414550781
      },
      {
        "patch": "return binsearch ( arr , x , mid , end , $NUMBER$ ) ;",
        "score": 99.55458068847656
      },
      {
        "patch": "return binsearch ( arr , x , mid , end ) ; } return mid ;",
        "score": 99.6009521484375
      },
      {
        "patch": "return binsearch ( arr , x , end , mid ) ;",
        "score": 99.55129568917411
      },
      {
        "patch": "return binsearch ( arr , x , 0 , arr . length ) ; } else {",
        "score": 99.59962222450658
      },
      {
        "patch": "return binsearch ( arr , x , end , end , 1 ) ;",
        "score": 99.5499496459961
      },
      {
        "patch": "return binsearch ( arr , x , 0 , arr [ mid ] ) ;",
        "score": 99.58657657398896
      },
      {
        "patch": "return binsearch ( arr , x , mid , end - 1 ) ;",
        "score": 99.54680633544922
      },
      {
        "patch": "return binsearch ( arr , x , 0 , arr . length ) ; }",
        "score": 99.58509018841912
      },
      {
        "patch": "return binsearch ( arr , x , x , end , end ) ;",
        "score": 99.54292297363281
      },
      {
        "patch": "return binsearch ( arr , x , mid , end , end ) ; } else {",
        "score": 99.58262875205592
      },
      {
        "patch": "return binsearch ( arr , 0 , mid ) ;",
        "score": 99.53806559244792
      },
      {
        "patch": "return binsearch ( arr , x , mid , end - arr . length ) ;",
        "score": 99.57590738932292
      },
      {
        "patch": "return binsearch ( arr , start , mid , end , end ) ;",
        "score": 99.53451538085938
      },
      {
        "patch": "return mid ; } else if ( x > arr [ mid ] ) {",
        "score": 99.5638656616211
      },
      {
        "patch": "return binsearch ( arr , mid , mid , end , end ) ;",
        "score": 99.5318374633789
      },
      {
        "patch": "return binsearch ( arr , x , mid , end , false ) ;",
        "score": 99.52428436279297
      },
      {
        "patch": "return binsearch ( arr , 0 , mid , end ) ;",
        "score": 99.523193359375
      },
      {
        "patch": "return ( int ) binsearch ( arr , x , mid , end ) ;",
        "score": 99.55598718979779
      },
      {
        "patch": "return binsearch ( arr , 0 , mid , end , end ) ;",
        "score": 99.52027893066406
      },
      {
        "patch": "return binsearch ( this , arr , x , mid , end ) ;",
        "score": 99.5538101196289
      },
      {
        "patch": "{ return binsearch ( arr , x , mid , end ) ;",
        "score": 99.51726888020833
      },
      {
        "patch": "return binsearch ( arr , x , 1 , arr . length ) ;",
        "score": 99.55017852783203
      },
      {
        "patch": "return binsearch ( arr , mid , end , end , end ) ;",
        "score": 99.51712799072266
      },
      {
        "patch": "return binsearch ( arr , x , mid , end , arr . length ) ;",
        "score": 99.54424370659723
      },
      {
        "patch": "return binsearch ( arr , x , x , end ) ;",
        "score": 99.51408168247768
      },
      {
        "patch": "return binsearch ( this , arr , x , mid , end ) ; } else {",
        "score": 99.5441958778783
      },
      {
        "patch": "return binsearch ( arr , x , mid , end , mid ) ;",
        "score": 99.50569152832031
      },
      {
        "patch": "return binsearch ( arr , x , mid , arr [ mid ] ) ;",
        "score": 99.5396728515625
      },
      {
        "patch": "return binsearch ( arr , x , mid , length ) ;",
        "score": 99.50412423270089
      },
      {
        "patch": "{ return binsearch ( arr , x , mid ) ;",
        "score": 99.50306114783653
      },
      {
        "patch": "return binsearch ( arr , x , 0 , arr . length - start ) ;",
        "score": 99.5374755859375
      },
      {
        "patch": "return binsearch ( arr , x , mid , $NUMBER$ ) ;",
        "score": 99.50186593191964
      },
      {
        "patch": "return binsearch ( arr , x , 0 , arr . length - x ) ;",
        "score": 99.53388807508681
      },
      {
        "patch": "return binsearch ( arr , x , mid , end - mid ) ;",
        "score": 99.50132751464844
      },
      {
        "patch": "return binsearch ( arr , x , mid , arr . length , x ) ;",
        "score": 99.53211805555556
      },
      {
        "patch": "return binsearch ( arr , x , 0 , arr . length , end ) ;",
        "score": 99.53070746527777
      },
      {
        "patch": "return binsearch ( arr , x , end , end , 0 ) ;",
        "score": 99.4988784790039
      },
      {
        "patch": "return binsearch ( arr , x , end , end - end ) ;",
        "score": 99.49554443359375
      },
      {
        "patch": "return binsearch ( arr , x , start , mid ) ; } else {",
        "score": 99.52629538143383
      },
      {
        "patch": "return binsearch ( arr , x , mid , 1 , end ) ;",
        "score": 99.49546813964844
      },
      {
        "patch": "return binsearch ( arr , x , mid , end ) ; } else",
        "score": 99.525146484375
      },
      {
        "patch": "return binsearch ( arr , x , mid , end , true ) ;",
        "score": 99.49537658691406
      },
      {
        "patch": "return binsearch ( arr , x , mid , end - x ) ;",
        "score": 99.52349090576172
      },
      {
        "patch": "return binsearch ( arr , x , mid , mid , 1 ) ;",
        "score": 99.4952392578125
      },
      {
        "patch": "return - 1 ; } else if ( x > arr [ mid ] ) {",
        "score": 99.52135512408088
      },
      {
        "patch": "return binsearch ( arr , x , mid , length , end ) ;",
        "score": 99.49128723144531
      },
      {
        "patch": "return binsearch ( arr , x , mid , end + 1 ) ;",
        "score": 99.52114868164062
      },
      {
        "patch": "return binsearch ( arr , x , end , end , $NUMBER$ ) ;",
        "score": 99.49105072021484
      },
      {
        "patch": "return binsearch ( arr , x , mid , end , - 1 ) ;",
        "score": 99.51722627527573
      },
      {
        "patch": "return binsearch ( arr , x , end , mid , end ) ;",
        "score": 99.48109436035156
      },
      {
        "patch": "return binsearch ( arr , x , start , mid , end ) ; }",
        "score": 99.51271685431985
      },
      {
        "patch": "return binsearch ( arr , x , end , 1 ) ;",
        "score": 99.47901262555804
      },
      {
        "patch": "return binsearch ( arr , 0 , arr . length ) ;",
        "score": 99.51227678571429
      },
      {
        "patch": "return binsearch ( arr , x , mid , end ) ; } * /",
        "score": 99.51039751838235
      },
      {
        "patch": "return binsearch ( arr , x , end , start , end ) ;",
        "score": 99.47409057617188
      },
      {
        "patch": "return ( binsearch ( arr , x , mid , end ) ) ;",
        "score": 99.51019287109375
      },
      {
        "patch": "return binsearch ( arr , start , end , end ) ;",
        "score": 99.47307477678571
      },
      {
        "patch": "result = binsearch ( arr , x , mid , end ) ;",
        "score": 99.50782877604166
      },
      {
        "patch": "return binsearch ( arr , end , end , end ) ;",
        "score": 99.47126988002232
      },
      {
        "patch": "return binsearch ( arr , x , mid ) ; } else { return mid ;",
        "score": 99.50374348958333
      },
      {
        "patch": "return binsearch ( arr , mid , mid ) ;",
        "score": 99.46776326497395
      },
      {
        "patch": "return binsearch ( arr , x , 0 , arr . length - 1 ) ;",
        "score": 99.50328233506944
      },
      {
        "patch": "return binsearch ( arr , x , x , mid ) ;",
        "score": 99.46756417410714
      },
      {
        "patch": "return binsearch ( this , arr , x , 0 , arr . length ) ;",
        "score": 99.50153266059027
      },
      {
        "patch": "return binsearch ( arr , x , mid , max ) ;",
        "score": 99.46248081752232
      },
      {
        "patch": "return binsearch ( arr , x , mid , start , mid ) ;",
        "score": 99.50108337402344
      },
      {
        "patch": "return binsearch ( arr , x , mid , end + $NUMBER$ ) ;",
        "score": 99.50041198730469
      },
      {
        "patch": "return binsearch ( arr , mid , end ) ;",
        "score": 99.45963541666667
      },
      {
        "patch": "return binsearch ( arr , x , 0 , arr . length + 1 ) ;",
        "score": 99.49989149305556
      },
      {
        "patch": "return binsearch ( arr , x , length , end ) ;",
        "score": 99.45962960379464
      },
      {
        "patch": "return arr [ mid ] ; } else if ( x > arr [ mid ] )",
        "score": 99.49913872612848
      },
      {
        "patch": "return binsearch ( arr , end , mid ) ;",
        "score": 99.45895385742188
      },
      {
        "patch": "return binsearch ( arr , x , start , mid , end - start ) ;",
        "score": 99.49877251519098
      },
      {
        "patch": "return binsearch ( arr , x , mid , 0 ) ;",
        "score": 99.44317626953125
      },
      {
        "patch": "return binsearch ( arr , x , start , mid , arr . length ) ;",
        "score": 99.49580891927083
      },
      {
        "patch": "return binsearch ( arr , 0 , end , end ) ;",
        "score": 99.42586844308036
      },
      {
        "patch": "{ return binsearch ( arr , x , end , end ) ;",
        "score": 99.42420247395833
      },
      {
        "patch": "return binsearch ( arr , x , start , mid ) ; }",
        "score": 99.48556315104166
      },
      {
        "patch": "return binsearch ( arr , 1 , mid ) ;",
        "score": 99.41986083984375
      },
      {
        "patch": "return binsearch ( arr , x , mid , end ) ; } }",
        "score": 99.48030090332031
      },
      {
        "patch": "return binsearch ( arr , x , mid , start ) ;",
        "score": 99.41424560546875
      },
      {
        "patch": "return binsearch ( arr , x , mid , arr . length ) ; }",
        "score": 99.48011690027573
      },
      {
        "patch": "return binsearch ( arr , 1 , mid , end ) ;",
        "score": 99.41249302455357
      },
      {
        "patch": "return binsearch ( arr , x , x , mid , end ) ;",
        "score": 99.47821044921875
      },
      {
        "patch": "return binsearch ( arr , end , mid , end ) ;",
        "score": 99.4107666015625
      },
      {
        "patch": "return binsearch ( arr , [ x ] , mid ) ;",
        "score": 99.40479387555804
      },
      {
        "patch": "return binsearch ( arr , x , mid , - start ) ;",
        "score": 99.47598470052084
      },
      {
        "patch": "return binsearch ( arr , x , end , $NUMBER$ ) ;",
        "score": 99.40296282087054
      },
      {
        "patch": "return binsearch ( $STRING$ , arr , x , mid , end ) ;",
        "score": 99.47562408447266
      },
      {
        "patch": "return binsearch ( name , arr , x , mid , end ) ;",
        "score": 99.46749877929688
      },
      {
        "patch": "return binsearch ( arr , x , 0 , end ) ;",
        "score": 99.38984898158482
      },
      {
        "patch": "return binsearch ( arr , x , mid , end * $NUMBER$ ) ;",
        "score": 99.4630355834961
      },
      {
        "patch": "return binsearch ( arr , length , mid , end ) ;",
        "score": 99.38810511997768
      },
      {
        "patch": "return binsearch ( 0 , arr , x , mid , end ) ;",
        "score": 99.461669921875
      },
      {
        "patch": "return binsearch ( arr , x , 1 , end ) ;",
        "score": 99.38072858537946
      },
      {
        "patch": "return true ; } else if ( x > arr [ mid ] ) {",
        "score": 99.46084594726562
      },
      {
        "patch": "return binsearch ( arr , x , max , end ) ;",
        "score": 99.37945556640625
      },
      {
        "patch": "return binsearch ( arr , x , end , end ) ; }",
        "score": 99.37910970052083
      },
      {
        "patch": "return binsearch ( arr , start , mid , mid ) ;",
        "score": 99.37830461774554
      },
      {
        "patch": "return binsearch ( arr , x , mid , end true ) ;",
        "score": 99.4584228515625
      },
      {
        "patch": "return binsearch ( arr , start , end ) ;",
        "score": 99.37265014648438
      },
      {
        "patch": "return binsearch ( arr , x , mid , end - $NUMBER$ ) ;",
        "score": 99.45820617675781
      },
      {
        "patch": "return binsearch ( arr , length , end , end ) ;",
        "score": 99.37208775111607
      },
      {
        "patch": "ret = binsearch ( arr , x , mid , end ) ;",
        "score": 99.45179850260416
      },
      {
        "patch": "result = binsearch ( arr , x , mid ) ;",
        "score": 99.3700420673077
      },
      {
        "patch": "return binsearch ( arr , start , mid , 1 ) ;",
        "score": 99.36752755301339
      },
      {
        "patch": "return binsearch ( arr , length , mid ) ;",
        "score": 99.36672973632812
      },
      {
        "patch": "return arr [ mid ] ; } else { return mid ; }",
        "score": 99.43292236328125
      },
      {
        "patch": "return return binsearch ( arr , x , mid ) ;",
        "score": 99.36660531850961
      },
      {
        "patch": "return binsearch ( arr , x , mid , - end ) ;",
        "score": 99.43256022135417
      },
      {
        "patch": "return binsearch ( arr , x , max ) ;",
        "score": 99.36440022786458
      },
      {
        "patch": "return binsearch ( arr , 1 , arr . length ) ;",
        "score": 99.43136160714286
      },
      {
        "patch": "return binsearch ( arr , x , mid , end ) ; ;",
        "score": 99.36158854166666
      },
      {
        "patch": "return binsearch ( name , x , mid , end ) ;",
        "score": 99.43068150111607
      },
      {
        "patch": "return binsearch ( arr , end , end ) ;",
        "score": 99.3556620279948
      },
      {
        "patch": "return arr [ mid ] ; } else { return mid ;",
        "score": 99.42046649639423
      },
      {
        "patch": "return binsearch ( arr , x , mid ) ; }",
        "score": 99.35315880408653
      },
      {
        "patch": "int mid = start + ( end - start ) / $NUMBER$ ;",
        "score": 99.404541015625
      },
      {
        "patch": "return binsearch ( arr , x , length ) ;",
        "score": 99.35294596354167
      },
      {
        "patch": "return binsearch ( arr , x , mid ) ; ;",
        "score": 99.35189115084134
      },
      {
        "patch": "if ( arr [ mid ] < arr [ mid ] ) {",
        "score": 99.399658203125
      },
      {
        "patch": "return binsearch ( arr , x , mid ) ) ;",
        "score": 99.33081993689903
      },
      {
        "patch": "return read ( arr , x , mid , end ) ;",
        "score": 99.35863318810097
      },
      {
        "patch": "return binsearch ( arr , x , 1 ) ;",
        "score": 99.32680257161458
      },
      {
        "patch": "if ( x > arr [ mid ] ) {",
        "score": 99.32013494318181
      },
      {
        "patch": "throw binsearch ( arr , x , mid ) ;",
        "score": 99.31997680664062
      },
      {
        "patch": "return binsearch ( arr , 0 , end ) ;",
        "score": 99.31869506835938
      },
      {
        "patch": "return mid ; } else { return mid ; }",
        "score": 99.3164950284091
      },
      {
        "patch": "return binsearch ( arr , x , mid ,",
        "score": 99.3033447265625
      },
      {
        "patch": "return binsearch ( arr , $NUMBER$ , mid ) ;",
        "score": 99.3033447265625
      },
      {
        "patch": "return mid ; } else { return mid ;",
        "score": 99.28062133789062
      },
      {
        "patch": "return binsearch ( arr , x , x ) ;",
        "score": 99.28042602539062
      },
      {
        "patch": "return binsearch ( x , x , mid ) ;",
        "score": 99.27904256184895
      },
      {
        "patch": "if ( x < arr [ mid ] ) {",
        "score": 99.23891379616477
      },
      {
        "patch": "return arr [ mid ] ; } else {",
        "score": 99.18568115234375
      },
      {
        "patch": "return binsearch ( arr , mid ) ;",
        "score": 99.1805908203125
      },
      {
        "patch": "return binsearch ( arr , x ) ;",
        "score": 99.12078857421875
      },
      {
        "patch": "return ( arr [ mid ] ) ;",
        "score": 99.11627875434027
      },
      {
        "patch": "if ( arr [ mid ] ) {",
        "score": 99.06985812717014
      },
      {
        "patch": "return arr [ arr [ x ] ;",
        "score": 98.99808756510417
      },
      {
        "patch": "return arr [ mid ] ;",
        "score": 98.93052455357143
      },
      {
        "patch": "return arr [ x ] ;",
        "score": 98.84409005301339
      },
      {
        "patch": "return mid ;",
        "score": 98.06871795654297
      },
      {
        "patch": "return end ;",
        "score": 97.74422454833984
      }
    ]
  },
  "FLATTEN-21-27": {
    "src": "result . add ( flatten ( x ) ) ; } } return result ; } else { return flatten ( arr ) ; }",
    "patches": [
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; } }",
        "score": 99.84340122767857
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } else { return flatten ( x ) ; }",
        "score": 99.6176424893466
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , x ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.81644112723214
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } else { result . add ( flatten ( x ) ) ;",
        "score": 99.605263671875
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.81608312270221
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } } else { return flatten ( x ) ; }",
        "score": 99.59958902994792
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.81489701704545
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } else { result . add ( flatten ( x ) ) ; } } return result ;",
        "score": 99.59839680989583
      },
      {
        "patch": "if ( flatten ( x ) ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.80622632575758
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; } } return result ;",
        "score": 99.59361530172414
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x , x ) ) ;",
        "score": 99.78758370535714
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.59287672776442
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.77511160714286
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } else { result . add ( flatten ( x ) ) ; } return result ;",
        "score": 99.59231883081897
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.77147042410714
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } return result ; } else { return flatten ( arr ) ;",
        "score": 99.58912109375
      },
      {
        "patch": "if ( flatten ( x ) ) { result . add CaMeL All ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.76963588169643
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } return result ; } else { return flatten ( x ) ;",
        "score": 99.588359375
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , arr ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.76509486607142
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } } else { result . add ( flatten ( x ) ) ;",
        "score": 99.58329716435185
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { return ( Array CaMeL List ) flatten ( x ) ; } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.75741489955357
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.57659040178571
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x , arr ) ) ;",
        "score": 99.75287388392857
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.57033203125
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add CaMeL All ( flatten ( x ) ) ;",
        "score": 99.745556640625
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; } } } return result ;",
        "score": 99.56959635416666
      },
      {
        "patch": "if ( flatten ( x ) ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; } }",
        "score": 99.74265423943015
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } } return result ; } else { return flatten ( arr ) ;",
        "score": 99.56893807870371
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( new flatten ( x ) ) ; }",
        "score": 99.73346819196429
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } } return result ; } else { return flatten ( x ) ;",
        "score": 99.56869393807871
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , result ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.730908203125
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } else { return flatten ( arr ) ; }",
        "score": 99.56723854758523
      },
      {
        "patch": "if ( arr instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; } }",
        "score": 99.725634765625
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } } else { return flatten ( arr ) ; }",
        "score": 99.56173706054688
      },
      {
        "patch": "if ( x instanceof Hash CaMeL Set ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; } }",
        "score": 99.72002650669643
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } return result ; } else { return flatten ( x ) ; }",
        "score": 99.5594921875
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( arr ) ) ; } }",
        "score": 99.71087472098215
      },
      {
        "patch": "if ( x != null ) { result . add ( flatten ( x ) ) ; } } else { return flatten ( x ) ; }",
        "score": 99.55897258890086
      },
      {
        "patch": "if ( flatten ( x ) ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.71015930175781
      },
      {
        "patch": "if ( x != null ) { result . add ( x ) ; } } } return result ; } else { return flatten ( arr ) ;",
        "score": 99.55276692708334
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } } else { result . add ( flatten ( x ) ) ;",
        "score": 99.6996711282169
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.55079933449075
      },
      {
        "patch": "if ( arr instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.69440774356617
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } return result ; } else { return flatten ( x ) ; }",
        "score": 99.5506004050926
      },
      {
        "patch": "if ( x instanceof Hash CaMeL Set ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.68956801470588
      },
      {
        "patch": "result . add ( arr ) ; } } else { result . add ( flatten ( x ) ) ; } } return result ;",
        "score": 99.5488914207176
      },
      {
        "patch": "if ( arr instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.6895419034091
      },
      {
        "patch": "if ( x != null ) { result . add ( x ) ; } } else { return flatten ( x ) ; }",
        "score": 99.54639610877403
      },
      {
        "patch": "if ( flatten ( x ) ) { result . add CaMeL All ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.68353630514706
      },
      {
        "patch": "if ( x != null ) { result . add ( x ) ; } } return result ; } else { return flatten ( arr ) ; }",
        "score": 99.54549967447916
      },
      {
        "patch": "if ( x instanceof Hash CaMeL Set ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.6834383877841
      },
      {
        "patch": "result . add ( arr ) ; } } else { result . add ( flatten ( x ) ) ; } return result ;",
        "score": 99.54541954627403
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { return ( Array CaMeL List ) flatten ( x ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.67949362362133
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } return result ; } else { return flatten ( x ) ; }",
        "score": 99.54432091346153
      },
      {
        "patch": "if ( 0 instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.67783490349265
      },
      {
        "patch": "if ( x != null ) { result . add ( flatten ( x ) ) ; } } } return result ;",
        "score": 99.54345703125
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , ( Array CaMeL List ) x ) ) ;",
        "score": 99.67687536168981
      },
      {
        "patch": "if ( x != null ) { result . add ( x ) ; } } return result ; } else { return flatten ( x ) ; }",
        "score": 99.54330240885416
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( arr ) ) ; }",
        "score": 99.67596076516544
      },
      {
        "patch": "if ( x != null ) { result . add ( arr ) ; } } } return result ; } else { return flatten ( arr ) ;",
        "score": 99.54320475260417
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( ( Array CaMeL List ) flatten ( x , ( Array CaMeL List ) x ) ) ;",
        "score": 99.67568072150735
      },
      {
        "patch": "if ( x != null ) { result . add ( arr ) ; } } else { return flatten ( x ) ; }",
        "score": 99.54156963641827
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( arr ) ) ;",
        "score": 99.67423502604167
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } else { return flatten ( x ) ; } } else { return flatten ( x ) ;",
        "score": 99.54102376302083
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( 0 ) ) ; }",
        "score": 99.67285874310662
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } return result ; } else { return flatten ( arr ) ; }",
        "score": 99.53851787860577
      },
      {
        "patch": "if ( 0 instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.67129054214016
      },
      {
        "patch": "if ( x == null ) { result . add ( flatten ( x ) ) ; } } else { return flatten ( x ) ; }",
        "score": 99.53819537984914
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { narr . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.67026654411765
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } else { return result ; } } else { return flatten ( x ) ; }",
        "score": 99.53636823381696
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( arr ) ) ; } else { result . add ( flatten ( arr ) ) ; }",
        "score": 99.6686652688419
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } return result ; } else { return flatten ( arr ) ; }",
        "score": 99.535751953125
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( 0 ) ) ;",
        "score": 99.66790956439394
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } return result ; } else { return flatten ( arr ) ; }",
        "score": 99.53526475694444
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { Array CaMeL List result = new Array CaMeL List ( $NUMBER$ ) ; for ( Object x : narr ) {",
        "score": 99.66777801513672
      },
      {
        "patch": "if ( arr != null ) { result . add ( flatten ( x ) ) ; } } else { return flatten ( x ) ; }",
        "score": 99.53489527209052
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( arr ) ) ; } else { result . add ( flatten ( arr ) ) ;",
        "score": 99.66583806818181
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } else { return flatten ( x ) ; } } return flatten ( x ) ;",
        "score": 99.53385977909483
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( ( Array CaMeL List ) flatten ( x ) ) ; } else {",
        "score": 99.66490071614584
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; } return result ;",
        "score": 99.53089250837054
      },
      {
        "patch": "for ( Object x : narr ) { if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ;",
        "score": 99.66437398976294
      },
      {
        "patch": "if ( x != null ) { result . add CaMeL All ( flatten ( x ) ) ; } } } return result ;",
        "score": 99.53079927884616
      },
      {
        "patch": "if ( x != null ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.663818359375
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } return result ; } else { return flatten ( x ) ;",
        "score": 99.53004964192708
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( x ) ; } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.66258190524194
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } } return result ; } else { return flatten ( x ) ; }",
        "score": 99.52952357700893
      },
      {
        "patch": "if ( value instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.66217400045956
      },
      {
        "patch": "result . add ( arr ) ; } } return result ; } else { return flatten ( arr ) ;",
        "score": 99.5281094637784
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( arr ) ) ; } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.66167135799633
      },
      {
        "patch": "if ( x != null ) { result . add ( flatten ( x ) ) ; } } else { return flatten ( arr ) ; }",
        "score": 99.52785728717673
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { Array CaMeL List narr = ( Array CaMeL List ) x ; result . add ( flatten ( narr ) ) ;",
        "score": 99.66075942095588
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } return result ; } else { return flatten ( x ) ;",
        "score": 99.52626389723558
      },
      {
        "patch": "if ( value instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.65635357481061
      },
      {
        "patch": "if ( x != null ) { result . add ( x ) ; } } else { return flatten ( arr ) ; }",
        "score": 99.52515587439903
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } result . add ( flatten ( x ) ) ;",
        "score": 99.65595073084677
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } } return result ; } else { return flatten ( arr ) ; }",
        "score": 99.52463204520089
      },
      {
        "patch": "if ( x != null ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.65567508820564
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.5234883626302
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( arr ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.65562855113636
      },
      {
        "patch": "result . add ( x ) ; } } else { result . add ( flatten ( x ) ) ; } } return result ;",
        "score": 99.52306676793981
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else if ( x instanceof Array CaMeL List ) {",
        "score": 99.65417874243951
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; } }",
        "score": 99.5229022686298
      },
      {
        "patch": "if ( x != null ) { result . add ( arr ) ; } } else { return flatten ( arr ) ; }",
        "score": 99.5215594951923
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( x ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.65311686197917
      },
      {
        "patch": "if ( x instanceof Object [ ] ) { result . add ( flatten ( x ) ) ; } else { return result ; } }",
        "score": 99.52069091796875
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { return flatten ( x ) ; }",
        "score": 99.65228678385417
      },
      {
        "patch": "if ( x == null ) { result . add ( arr ) ; } else { result . add ( arr ) ; } }",
        "score": 99.52056206597223
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } return result ; } } else { return flatten ( x ) ;",
        "score": 99.52038122106481
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( flatten ( x , ( Array CaMeL List ) x ) ) ;",
        "score": 99.64911941002156
      },
      {
        "patch": "if ( x == null ) { result . add ( flatten ( x ) ) ; } else { return result ; } }",
        "score": 99.51844200721153
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , flatten ( x ) ) ) ;",
        "score": 99.647197265625
      },
      {
        "patch": "if ( x != null ) { result . add ( x ) ; } } else { result . add ( arr ) ; }",
        "score": 99.51832863136575
      },
      {
        "patch": "if ( x != null ) { result . add ( arr ) ; } } else { result . add ( arr ) ; }",
        "score": 99.51695421006944
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.64008331298828
      },
      {
        "patch": "result . add ( arr ) ; } return result ; } else { return flatten ( x ) ; }",
        "score": 99.51676802201705
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { return flatten ( x ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.63970736799568
      },
      {
        "patch": "result . add ( x ) ; } } else { result . add ( flatten ( x ) ) ; } return result ;",
        "score": 99.51617901141827
      },
      {
        "patch": "for ( Object x : narr ) { if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( flatten ( x ) ) ;",
        "score": 99.63919165826613
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } else { result . add ( flatten ( arr ) ) ;",
        "score": 99.515556640625
      },
      {
        "patch": "if ( x != null ) { result . add ( x ) ; } } return result ; } else { return flatten ( arr ) ;",
        "score": 99.51511146282327
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { return flatten ( x ) ; } else { result . add ( flatten ( x ) ) ; }",
        "score": 99.6341552734375
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } return result ; } else { return flatten ( arr ) ;",
        "score": 99.5147705078125
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) result . add ( flatten ( x ) ) ; else result . add ( flatten ( x ) ) ;",
        "score": 99.63226725260417
      },
      {
        "patch": "result . add ( arr ) ; } return result ; } else { return flatten ( arr ) ; }",
        "score": 99.51359419389205
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( this ) ; }",
        "score": 99.63193044354838
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } else { return result ; } } else { return flatten ( x ) ;",
        "score": 99.51248734085648
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , ( Array CaMeL List ) flatten ( x ) ) ) ;",
        "score": 99.63141276041667
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } return result ; } else { return flatten ( arr ) ;",
        "score": 99.5116475423177
      },
      {
        "patch": "result . add ( arr ) ; } } else { result . add ( arr ) ; } } return result ;",
        "score": 99.51126098632812
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , ( Array CaMeL List ) x ) ) ; } else {",
        "score": 99.63052571614584
      },
      {
        "patch": "else { result . add ( flatten ( x ) ) ; } } else { return flatten ( x ) ; }",
        "score": 99.51039632161458
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { return flatten ( x ) ;",
        "score": 99.62828327047414
      },
      {
        "patch": "if ( x == null ) { result . add ( flatten ( x ) ) ; } } } return result ;",
        "score": 99.51028442382812
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( ( Array CaMeL List ) flatten ( x ) ) ; }",
        "score": 99.62400599888393
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; } }",
        "score": 99.50939069475446
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( ( Array CaMeL List ) flatten ( x , x ) ) ;",
        "score": 99.62286166487068
      },
      {
        "patch": "if ( arr != null ) { result . add ( flatten ( x ) ) ; } } } return result ;",
        "score": 99.50872802734375
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ;",
        "score": 99.62076542295259
      },
      {
        "patch": "if ( x == null ) { result . add CaMeL All ( flatten ( x ) ) ; } else { return result ; } }",
        "score": 99.50747244698661
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.61879319411058
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } result . add ( flatten ( x ) ) ; return result ;",
        "score": 99.50721153846153
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( flatten ( x , flatten ( x ) ) ) ;",
        "score": 99.61727792245371
      },
      {
        "patch": "result . add ( x ) ; } } return result ; } else { return flatten ( arr ) ;",
        "score": 99.5043057528409
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , new Array CaMeL List ( $NUMBER$ ) ) ) ;",
        "score": 99.6141357421875
      },
      {
        "patch": "if ( x == null ) { result . add ( arr ) ; } else { result . add ( arr ) ; }",
        "score": 99.50354942908653
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( ( Array CaMeL List ) flatten ( x ) ) ;",
        "score": 99.61100260416667
      },
      {
        "patch": "result . add ( arr ) ; } } return result ; } else { return flatten ( x ) ;",
        "score": 99.5035067471591
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } return result ; }",
        "score": 99.6090234375
      },
      {
        "patch": "if ( x != null ) { result . add ( x ) ; } } else { return flatten ( x ) ; } }",
        "score": 99.50341796875
      },
      {
        "patch": "result . add CaMeL All ( arr ) ; } return result ; } else { return flatten ( arr ) ; }",
        "score": 99.50016276041667
      },
      {
        "patch": "result . add CaMeL All ( arr ) ; } return result ; } else { return flatten ( x ) ; }",
        "score": 99.5000508626302
      },
      {
        "patch": "result . add ( new Array CaMeL List ( $NUMBER$ ) ) ; } else { result . add ( flatten ( x ) ) ;",
        "score": 99.59022352430556
      },
      {
        "patch": "if ( x == null ) { result . add ( arr ) ; } else { return result ; } } } return result ;",
        "score": 99.49906864872685
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( new Array CaMeL List ( flatten ( x ) ) ) ;",
        "score": 99.58916766826923
      },
      {
        "patch": "if ( x == null ) { result . add ( arr ) ; } else { return result ; } }",
        "score": 99.49899159307066
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , x ) ) ; } else {",
        "score": 99.587412109375
      },
      {
        "patch": "result . add ( flatten ( x , x ) ) ; } } else { return flatten ( x ) ; }",
        "score": 99.49831136067708
      },
      {
        "patch": "result . add ( flatten ( arr ) ) ; } } else { return flatten ( x ) ; }",
        "score": 99.498291015625
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } } return result ;",
        "score": 99.584736328125
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } else { result . add ( flatten ( arr ) ) ; }",
        "score": 99.4955303485577
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } } } return result ;",
        "score": 99.58326134314903
      },
      {
        "patch": "result . add ( flatten ( arr ) ) ; } } else { return flatten ( arr ) ; }",
        "score": 99.4914217862216
      },
      {
        "patch": "result . add ( x ) ; } } return result ; } else { return flatten ( x ) ;",
        "score": 99.4835205078125
      },
      {
        "patch": "result . add ( x ) ; } return result ; } else { return flatten ( x ) ; }",
        "score": 99.4820223721591
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } return result ;",
        "score": 99.56627400716145
      },
      {
        "patch": "if ( x != null ) { result . add ( flatten ( x ) ) ; } } return result ;",
        "score": 99.4804156759511
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else {",
        "score": 99.5463230298913
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; } else { return flatten ( x ) ; } }",
        "score": 99.47932942708333
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ;",
        "score": 99.54290771484375
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } else { return flatten ( x ) ; } }",
        "score": 99.4787264737216
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } return result ; } return flatten ( arr ) ;",
        "score": 99.54115361752717
      },
      {
        "patch": "return flatten ( x , x ) ; } } else { return flatten ( x ) ; }",
        "score": 99.47859497070313
      },
      {
        "patch": "if ( flatten ( x ) ) { result . add ( flatten ( x ) ) ; } else {",
        "score": 99.52637828480114
      },
      {
        "patch": "if ( x == null ) { result . add ( arr ) ; } else { return flatten ( x ) ; }",
        "score": 99.4764453125
      },
      {
        "patch": "if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( flatten ( x ) ) ;",
        "score": 99.52056329900569
      },
      {
        "patch": "result . add ( arr ) ; } } return result ; } else { return flatten ( arr ) ; }",
        "score": 99.47622282608695
      },
      {
        "patch": "return flatten ( x ) ; } } return result ; } else { return flatten ( arr ) ;",
        "score": 99.51078869047619
      },
      {
        "patch": "if ( x != null ) { result . add ( x ) ; } else { return result ; } }",
        "score": 99.4697265625
      },
      {
        "patch": "if ( x == null ) { result . add ( x ) ; } else { return result ; } }",
        "score": 99.46959918478261
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ;",
        "score": 99.42099233774039
      },
      {
        "patch": "if ( x != null ) { result . add ( arr ) ; } else { return result ; } }",
        "score": 99.46911090353261
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; } } return result ;",
        "score": 99.38822937011719
      },
      {
        "patch": "return flatten ( x , arr ) ; } } else { return flatten ( x ) ; }",
        "score": 99.46148681640625
      },
      {
        "patch": "result . add CaMeL All ( flatten ( x ) ) ; }",
        "score": 99.38676234654018
      },
      {
        "patch": "result . add ( flatten ( x ) ) ;",
        "score": 99.38255726207386
      },
      {
        "patch": "result . add ( flatten ( x ) ) ; }",
        "score": 99.3551025390625
      },
      {
        "patch": "return flatten ( x ) ; }",
        "score": 99.02397155761719
      }
    ]
  },
  "GCD-19-20": {
    "src": "return gcd ( a % b , b ) ;",
    "patches": [
      {
        "patch": "return gcd ( a % b , b ) ;",
        "score": 99.71779563210227
      },
      {
        "patch": "return gcd ( a , b ) ;",
        "score": 99.5938720703125
      },
      {
        "patch": "return gcd ( a % b , b ) ; }",
        "score": 99.65940348307292
      },
      {
        "patch": "return gcd ( a % b ) ;",
        "score": 99.54599338107639
      },
      {
        "patch": "return gcd ( a % b , b , b ) ;",
        "score": 99.63849346454327
      },
      {
        "patch": "return gcd ( a , 0 , b ) ;",
        "score": 99.52712180397727
      },
      {
        "patch": "return gcd ( a % b , b ) ; } }",
        "score": 99.56895094651442
      },
      {
        "patch": "return gcd ( a , b , b ) ;",
        "score": 99.51508123224431
      },
      {
        "patch": "return gcd ( b , b ) ;",
        "score": 99.39634874131944
      },
      {
        "patch": "return gcd ( a % b % b , b ) ;",
        "score": 99.49112642728366
      },
      {
        "patch": "return gcd ( a , a , b ) ;",
        "score": 99.39134632457386
      },
      {
        "patch": "return gcd ( a % b , b , 0 ) ;",
        "score": 99.48046875
      },
      {
        "patch": "return gcd ( a , b , $NUMBER$ ) ;",
        "score": 99.38383345170455
      },
      {
        "patch": "return gcd ( a , b ) ; }",
        "score": 99.47821655273438
      },
      {
        "patch": "return gcd ( a , 1 , b ) ;",
        "score": 99.36072887073864
      },
      {
        "patch": "return gcd ( a - b , b ) ;",
        "score": 99.47215687144886
      },
      {
        "patch": "return gcd ( b , b , b ) ;",
        "score": 99.357421875
      },
      {
        "patch": "return gcd ( a , b , b ) ; }",
        "score": 99.47074381510417
      },
      {
        "patch": "return gcd ( a , $NUMBER$ , b ) ;",
        "score": 99.34782270951705
      },
      {
        "patch": "return gcd ( b % b , b ) ;",
        "score": 99.4565762606534
      },
      {
        "patch": "return gcd ( b % b ) ;",
        "score": 99.34105088975694
      },
      {
        "patch": "return gcd ( a - b , b ) ; }",
        "score": 99.45058186848958
      },
      {
        "patch": "return gcd ( 0 , b ) ;",
        "score": 99.33563910590277
      },
      {
        "patch": "return gcd ( a % b % b ) ;",
        "score": 99.44463556463069
      },
      {
        "patch": "return gcd ( a , b , 0 ) ;",
        "score": 99.33556019176136
      },
      {
        "patch": "return gcd ( a % b , b , 1 ) ;",
        "score": 99.43993201622597
      },
      {
        "patch": "return gcd ( a % b ) ; }",
        "score": 99.33467407226563
      },
      {
        "patch": "return gcd ( a + b , b ) ;",
        "score": 99.437744140625
      },
      {
        "patch": "return gcd ( 0 , 0 , b ) ;",
        "score": 99.3337069424716
      },
      {
        "patch": "return gcd ( a % b , b - 1 ) ;",
        "score": 99.43604454627403
      },
      {
        "patch": "return gcd ( a % 0 , b ) ;",
        "score": 99.33042214133523
      },
      {
        "patch": "return gcd ( 0 , b , b ) ;",
        "score": 99.32728160511364
      },
      {
        "patch": "return gcd ( b % b , b ) ; }",
        "score": 99.42369588216145
      },
      {
        "patch": "return gcd ( b , 0 , b ) ;",
        "score": 99.32661576704545
      },
      {
        "patch": "return gcd ( a % 1 , b ) ;",
        "score": 99.422607421875
      },
      {
        "patch": "return gcd ( 0 , a , b ) ;",
        "score": 99.32517311789773
      },
      {
        "patch": "return gcd ( a % b , b , $NUMBER$ ) ;",
        "score": 99.42139610877403
      },
      {
        "patch": "return gcd ( a , 0 ) ;",
        "score": 99.32179768880208
      },
      {
        "patch": "return gcd ( a % b , b % b ) ;",
        "score": 99.42064490685097
      },
      {
        "patch": "return gcd ( 0 % b , b ) ;",
        "score": 99.3172607421875
      },
      {
        "patch": "return gcd ( a + b , b ) ; }",
        "score": 99.41416422526042
      },
      {
        "patch": "return gcd ( a , b , 1 ) ;",
        "score": 99.31483043323864
      },
      {
        "patch": "return gcd ( a % b , b , a ) ;",
        "score": 99.41378079927884
      },
      {
        "patch": "return gcd ( a , b , false ) ;",
        "score": 99.30766157670455
      },
      {
        "patch": "return gcd ( a % b % b ) ; }",
        "score": 99.40707397460938
      },
      {
        "patch": "return gcd ( a , 0 % b ) ;",
        "score": 99.30361106178977
      },
      {
        "patch": "return gcd ( a % a , b ) ;",
        "score": 99.40227716619319
      },
      {
        "patch": "return gcd ( a % a ) ;",
        "score": 99.29546440972223
      },
      {
        "patch": "return gcd ( a % b , a , b ) ;",
        "score": 99.39865347055289
      },
      {
        "patch": "return gcd ( a - b , b , b ) ;",
        "score": 99.39771446814903
      },
      {
        "patch": "return gcd ( a % b , 0 , b ) ;",
        "score": 99.39670973557692
      },
      {
        "patch": "return gcd ( a , b , null ) ;",
        "score": 99.28870738636364
      },
      {
        "patch": "return gcd ( ( int ) b , b ) ;",
        "score": 99.3943583170573
      },
      {
        "patch": "return gcd ( a , 0 , a ) ;",
        "score": 99.2855224609375
      },
      {
        "patch": "return gcd ( a , b ) ; } }",
        "score": 99.3895263671875
      },
      {
        "patch": "return gcd ( a , a ) ;",
        "score": 99.27760823567708
      },
      {
        "patch": "return gcd ( a % 1 , b ) ; }",
        "score": 99.38878377278645
      },
      {
        "patch": "return gcd ( a , b % b ) ;",
        "score": 99.27594549005681
      },
      {
        "patch": "return gcd ( ( int ) a , b ) ;",
        "score": 99.38644409179688
      },
      {
        "patch": "return gcd ( a , 0 , 1 ) ;",
        "score": 99.26918723366477
      },
      {
        "patch": "return gcd ( a * b , b ) ;",
        "score": 99.37877308238636
      },
      {
        "patch": "return gcd ( a , 0 , $NUMBER$ ) ;",
        "score": 99.26832164417614
      },
      {
        "patch": "return gcd ( a % a , b ) ; }",
        "score": 99.37073771158855
      },
      {
        "patch": "return gcd ( a , 0 , b ) ; }",
        "score": 99.26417032877605
      },
      {
        "patch": "return gcd ( a * b , b ) ; }",
        "score": 99.36629231770833
      },
      {
        "patch": "return gcd ( a % b , b , ) ;",
        "score": 99.36012776692708
      },
      {
        "patch": "return gcd ( a , 0 , 0 ) ;",
        "score": 99.26319469105114
      },
      {
        "patch": "return gcd ( a % $NUMBER$ , b ) ;",
        "score": 99.35992986505681
      },
      {
        "patch": "return gcd ( a >> b , b ) ;",
        "score": 99.3578768643466
      },
      {
        "patch": "return gcd ( a >> b , b ) ; }",
        "score": 99.35184733072917
      },
      {
        "patch": "return gcd ( a % b , $NUMBER$ ) ;",
        "score": 99.25590376420455
      },
      {
        "patch": "return gcd ( a , b , a ) ;",
        "score": 99.25351784446023
      },
      {
        "patch": "return gcd ( a % b ) ; } }",
        "score": 99.33549360795455
      },
      {
        "patch": "return gcd ( a / b , b ) ;",
        "score": 99.33518288352273
      },
      {
        "patch": "return gcd ( 0 % b ) ;",
        "score": 99.24962022569444
      },
      {
        "patch": "return gcd ( a % $NUMBER$ , b ) ; }",
        "score": 99.32926432291667
      },
      {
        "patch": "return gcd ( b , b , b ) ; }",
        "score": 99.32120768229167
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
        "score": 99.23536987304688
      },
      {
        "patch": "return gcd ( ( int ) a % b ) ;",
        "score": 99.31791178385417
      },
      {
        "patch": "return gcd ( a % b , 0 ) ;",
        "score": 99.31316583806819
      },
      {
        "patch": "return gcd ( b , a , b ) ;",
        "score": 99.23142311789773
      },
      {
        "patch": "return gcd ( gcd ( a , b ) ) ;",
        "score": 99.23087565104167
      },
      {
        "patch": "return gcd ( b , b , $NUMBER$ ) ;",
        "score": 99.23049094460227
      },
      {
        "patch": "return gcd ( a , a , b ) ; }",
        "score": 99.30279541015625
      },
      {
        "patch": "return gcd ( a % b , 1 ) ;",
        "score": 99.21611993963069
      },
      {
        "patch": "return gcd ( a / b , b ) ; }",
        "score": 99.29944864908855
      },
      {
        "patch": "return gcd ( a , $NUMBER$ ) ;",
        "score": 99.21413845486111
      },
      {
        "patch": "return gcd ( a % b , 0 ) ; }",
        "score": 99.2931416829427
      },
      {
        "patch": "return gcd ( 0 % 0 , b ) ;",
        "score": 99.2096280184659
      },
      {
        "patch": "return gcd ( a % b , b $NUMBER$ ) ;",
        "score": 99.29249064127605
      },
      {
        "patch": "return gcd ( a + 0 , b ) ;",
        "score": 99.20857377485795
      },
      {
        "patch": "return ( gcd ( a % b ) ) ; }",
        "score": 99.2909647623698
      },
      {
        "patch": "return gcd ( a + b ) ;",
        "score": 99.20838080512152
      },
      {
        "patch": "return ( gcd ( a % b ) ) ;",
        "score": 99.28679865056819
      },
      {
        "patch": "return gcd ( a , b , ) ;",
        "score": 99.20136108398438
      },
      {
        "patch": "return gcd ( a % 0 , b ) ; }",
        "score": 99.28614298502605
      },
      {
        "patch": "return gcd ( a , 1 ) ;",
        "score": 99.19122992621527
      },
      {
        "patch": "return gcd ( a , a , 0 ) ;",
        "score": 99.1797207919034
      },
      {
        "patch": "return gcd ( b , b ) ; }",
        "score": 99.27964477539062
      },
      {
        "patch": "return a * gcd ( b , b ) ;",
        "score": 99.16016734730114
      },
      {
        "patch": "return gcd ( a % b , a ) ;",
        "score": 99.2776766690341
      },
      {
        "patch": "return ( a > 0 ) ? b : 0 ;",
        "score": 99.15994262695312
      },
      {
        "patch": "return gcd ( a & b , b ) ;",
        "score": 99.27654474431819
      },
      {
        "patch": "return gcd ( 0 , a ) ;",
        "score": 99.15953233506944
      },
      {
        "patch": "return gcd ( a % b , - 1 ) ;",
        "score": 99.2740987141927
      },
      {
        "patch": "return gcd ( b % b ) ; }",
        "score": 99.15508422851562
      },
      {
        "patch": "return gcd ( a ] % b , b ) ;",
        "score": 99.27354939778645
      },
      {
        "patch": "return gcd ( 0 % b , b ) ; }",
        "score": 99.27056884765625
      },
      {
        "patch": "return gcd ( a , b , $NUMBER$ ) ; }",
        "score": 99.1444600423177
      },
      {
        "patch": "return gcd ( a & b , b ) ; }",
        "score": 99.26218668619792
      },
      {
        "patch": "return gcd ( ( int ) b % b ) ;",
        "score": 99.25743611653645
      },
      {
        "patch": "return gcd ( a % $NUMBER$ ) ;",
        "score": 99.13152398003473
      },
      {
        "patch": "return a + 0 + b ;",
        "score": 99.13128662109375
      },
      {
        "patch": "return gcd ( b % b % b ) ;",
        "score": 99.24220969460227
      },
      {
        "patch": "return gcd ( a % a % b ) ;",
        "score": 99.24186567826705
      },
      {
        "patch": "return gcd ( a % a ) ; }",
        "score": 99.11978759765626
      },
      {
        "patch": "return gcd ( b , a ) ;",
        "score": 99.11833360460069
      },
      {
        "patch": "return gcd ( a ] , b ) ;",
        "score": 99.19802856445312
      },
      {
        "patch": "return gcd ( 0 , 0 , b ) ; }",
        "score": 99.11796061197917
      },
      {
        "patch": "return gcd ( a > b ) ; }",
        "score": 99.1912841796875
      },
      {
        "patch": "return gcd ( a , 1 , b ) ; }",
        "score": 99.1154073079427
      },
      {
        "patch": "return gcd ( 0 , b , b ) ; }",
        "score": 99.1066385904948
      },
      {
        "patch": "return gcd ( a - b ) ; }",
        "score": 99.18006591796875
      },
      {
        "patch": "return gcd ( a , $NUMBER$ , b ) ; }",
        "score": 99.10491943359375
      },
      {
        "patch": "return gcd ( a > b ) ;",
        "score": 99.17473008897569
      },
      {
        "patch": "return gcd ( b , 0 ) ;",
        "score": 99.10342746310764
      },
      {
        "patch": "return gcd ( ( int ) b ) ;",
        "score": 99.17468872070313
      },
      {
        "patch": "return gcd ( a % 0 ) ;",
        "score": 99.10013834635417
      },
      {
        "patch": "return gcd ( 0 , b ) ; }",
        "score": 99.17327270507812
      },
      {
        "patch": "return gcd ( b % a ) ;",
        "score": 99.08968098958333
      },
      {
        "patch": "return gcd ( a - b ) ;",
        "score": 99.17241753472223
      },
      {
        "patch": "return a + b + b ;",
        "score": 99.08477020263672
      },
      {
        "patch": "return gcd ( a $NUMBER$ , b ) ;",
        "score": 99.17235107421875
      },
      {
        "patch": "return a + a + b ;",
        "score": 99.07467651367188
      },
      {
        "patch": "return a % b ; }",
        "score": 99.16489083426339
      },
      {
        "patch": "return a * b ; }",
        "score": 99.07177734375
      },
      {
        "patch": "return a * 0 + b ;",
        "score": 99.03986358642578
      },
      {
        "patch": "return a * b + b ;",
        "score": 99.0308609008789
      },
      {
        "patch": "return ( a % b ) ; }",
        "score": 99.11520046657986
      },
      {
        "patch": "return b + 0 + b ;",
        "score": 99.01641845703125
      },
      {
        "patch": "return a % b ; } }",
        "score": 99.09881591796875
      },
      {
        "patch": "return a + 0 ; }",
        "score": 99.00910295758929
      },
      {
        "patch": "return b % b ; }",
        "score": 99.09559849330357
      },
      {
        "patch": "return a + 0 + a ;",
        "score": 98.9942398071289
      },
      {
        "patch": "if ( b == 0 ) {",
        "score": 99.06554412841797
      },
      {
        "patch": "return a * a + b ;",
        "score": 98.99017333984375
      },
      {
        "patch": "return b % b ; } }",
        "score": 99.02951049804688
      },
      {
        "patch": "return a + b ; }",
        "score": 98.98844691685268
      },
      {
        "patch": "return ( int ) b ; }",
        "score": 99.0239028930664
      },
      {
        "patch": "return a [ 0 ] ;",
        "score": 98.98644147600446
      },
      {
        "patch": "return ( a % b ) ;",
        "score": 99.02125549316406
      },
      {
        "patch": "return a * a * b ;",
        "score": 98.97471618652344
      },
      {
        "patch": "return ( b % b ) ;",
        "score": 98.99237060546875
      },
      {
        "patch": "return gcd ( a ) ;",
        "score": 98.94965471540179
      },
      {
        "patch": "return b + 0 ; }",
        "score": 98.9329833984375
      },
      {
        "patch": "return ( int ) b ;",
        "score": 98.89448765345982
      },
      {
        "patch": "return a + a ; }",
        "score": 98.89921351841518
      },
      {
        "patch": "return ( int ) a ;",
        "score": 98.87106759207589
      },
      {
        "patch": "return a ; }",
        "score": 98.52133178710938
      },
      {
        "patch": "return b ; }",
        "score": 98.51561889648437
      },
      {
        "patch": "return a ;",
        "score": 98.4353256225586
      },
      {
        "patch": "return b ;",
        "score": 98.38031005859375
      }
    ]
  },
  "GET_FACTORS-27-28": {
    "src": "return new Array CaMeL List < Integer > ( ) ;",
    "patches": [
      {
        "patch": "return new Array CaMeL List < Integer > ( ) ;",
        "score": 99.92501831054688
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( 0 ) ;",
        "score": 99.80918532151442
      },
      {
        "patch": "return new Array CaMeL List < String > ( ) ;",
        "score": 99.6993408203125
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( ) ; }",
        "score": 99.77860201322116
      },
      {
        "patch": "return new Array CaMeL List < Object > ( ) ;",
        "score": 99.65369669596355
      },
      {
        "patch": "return new Array CaMeL List < Long > ( ) ;",
        "score": 99.67930094401042
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( 0 ) ; }",
        "score": 99.67360142299107
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( $NUMBER$ ) ;",
        "score": 99.61948805588942
      },
      {
        "patch": "return new Array CaMeL List new Array CaMeL List < Integer > ( ) ;",
        "score": 99.60563659667969
      },
      {
        "patch": "return new Array CaMeL List < ? > ( ) ;",
        "score": 99.58450317382812
      },
      {
        "patch": "return new Array CaMeL List < Long > ( 0 ) ;",
        "score": 99.5872051532452
      },
      {
        "patch": "return new Array CaMeL List < ? < Integer > ( ) ;",
        "score": 99.57760184151786
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( 1 ) ;",
        "score": 99.567626953125
      },
      {
        "patch": "return new Array CaMeL List < Long > ( ) ; }",
        "score": 99.55557955228366
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Integer > ( ) ;",
        "score": 99.5565414428711
      },
      {
        "patch": "return new Array CaMeL List < Integer >> ( ) ;",
        "score": 99.55422973632812
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( 0 . 1 ) ;",
        "score": 99.54525553385416
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( 0 . 0 ) ;",
        "score": 99.5322265625
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( - 1 ) ;",
        "score": 99.541748046875
      },
      {
        "patch": "return new Array CaMeL List . Array CaMeL List < Integer > ( ) ;",
        "score": 99.52413940429688
      },
      {
        "patch": "return new Array CaMeL List < Integer < Integer > ( ) ;",
        "score": 99.54173060825893
      },
      {
        "patch": "return Collections . new Array CaMeL List < Integer > ( ) ;",
        "score": 99.52214704241071
      },
      {
        "patch": "return new Array CaMeL List < Integer > < Integer > ( ) ;",
        "score": 99.51461588541666
      },
      {
        "patch": "return new Linked CaMeL List < Integer > ( ) ;",
        "score": 99.4951680501302
      },
      {
        "patch": "return new Array CaMeL List < Integer >> ( 0 ) ;",
        "score": 99.504150390625
      },
      {
        "patch": "return new Array CaMeL List < Short > ( ) ;",
        "score": 99.49057006835938
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( 0 . $NUMBER$ ) ;",
        "score": 99.50230305989584
      },
      {
        "patch": "return new Array CaMeL List < Integer ( 1 ) ;",
        "score": 99.48251342773438
      },
      {
        "patch": "return new Array CaMeL List < Integer > < Integer > ( 0 ) ;",
        "score": 99.494140625
      },
      {
        "patch": "return new Hash CaMeL Set < Integer > ( ) ;",
        "score": 99.47086588541667
      },
      {
        "patch": "return Collections . new Array CaMeL List < Integer > ( 0 ) ;",
        "score": 99.48560384114583
      },
      {
        "patch": "return new Array CaMeL List < Integer ( 0 ) ;",
        "score": 99.46753946940105
      },
      {
        "patch": "return new Array CaMeL List < Date > ( ) ;",
        "score": 99.46493530273438
      },
      {
        "patch": "return new Array CaMeL List < Float > ( ) ;",
        "score": 99.4623311360677
      },
      {
        "patch": "return new Array CaMeL List extends Array CaMeL List < Integer > ( ) ;",
        "score": 99.46670532226562
      },
      {
        "patch": "return new Array CaMeL List < E > ( ) ;",
        "score": 99.46053059895833
      },
      {
        "patch": "return new Array CaMeL List < Byte > ( ) ;",
        "score": 99.45973714192708
      },
      {
        "patch": "return new Array CaMeL List < Long > ( 0 ) ; }",
        "score": 99.4609375
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( ) ; ;",
        "score": 99.4537353515625
      },
      {
        "patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
        "score": 99.45347086588542
      },
      {
        "patch": "return new Array CaMeL List <= Integer > ( ) ;",
        "score": 99.4503173828125
      },
      {
        "patch": "result = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.45120004507211
      },
      {
        "patch": "return new Array CaMeL List < Integer >> ( ) ; }",
        "score": 99.44659893329327
      },
      {
        "patch": "return new Array CaMeL List < Node > ( ) ;",
        "score": 99.44552612304688
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( 0 . 1 ) ; }",
        "score": 99.44603729248047
      },
      {
        "patch": "return new Array CaMeL List < int > ( ) ;",
        "score": 99.43802897135417
      },
      {
        "patch": "return new Array CaMeL List < Hash CaMeL Set < Integer > ( ) ;",
        "score": 99.44210052490234
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( n ) ;",
        "score": 99.43576284555289
      },
      {
        "patch": "return Collections . new Array CaMeL List < Integer > ( ) ; }",
        "score": 99.4406982421875
      },
      {
        "patch": "return return new Array CaMeL List < Integer > ( ) ;",
        "score": 99.43560321514423
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( 0 . 0 ) ; }",
        "score": 99.4381332397461
      },
      {
        "patch": "return new Array CaMeL List < Integer < ? > ( ) ;",
        "score": 99.43531145368304
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( ) + 1 ;",
        "score": 99.43409075055804
      },
      {
        "patch": "return new Array CaMeL List < Integer ( $NUMBER$ ) ;",
        "score": 99.42997233072917
      },
      {
        "patch": "return Array CaMeL List < Integer > get _ factors ( n ) ;",
        "score": 99.42889811197917
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( [ 1 ] ) ;",
        "score": 99.42716471354167
      },
      {
        "patch": "return new return new Array CaMeL List < Integer > ( ) ;",
        "score": 99.42702811104911
      },
      {
        "patch": "{ return new Array CaMeL List < Integer > ( ) ;",
        "score": 99.41629732572116
      },
      {
        "patch": "return new Array CaMeL List extends Integer > ( ) ;",
        "score": 99.41536458333333
      },
      {
        "patch": "return new Array CaMeL List < ? < ? > ( ) ;",
        "score": 99.41519601004464
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( ) ; } else {",
        "score": 99.4140869140625
      },
      {
        "patch": "return new Array CaMeL List < Integer ( ) ;",
        "score": 99.41477272727273
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( true ) ;",
        "score": 99.41310471754808
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( 0 . ) ;",
        "score": 99.41224016462054
      },
      {
        "patch": "return new Array CaMeL List < Number > ( ) ;",
        "score": 99.4032491048177
      },
      {
        "patch": "return new Array CaMeL List extends Integer > ( 0 ) ;",
        "score": 99.4053203876202
      },
      {
        "patch": "return new Array CaMeL List < Boolean > ( ) ;",
        "score": 99.39022827148438
      },
      {
        "patch": "return new Array CaMeL List > ( ) ;",
        "score": 99.3960693359375
      },
      {
        "patch": "return new Array CaMeL List < String > ( 0 ) ;",
        "score": 99.38419283353366
      },
      {
        "patch": "return ( new Array CaMeL List < Integer > ( ) ) ;",
        "score": 99.39157540457589
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( false ) ;",
        "score": 99.38331956129808
      },
      {
        "patch": "return new Array CaMeL List < Integer >> ( 0 ) ; }",
        "score": 99.39036342075893
      },
      {
        "patch": "return new Array CaMeL List < String > ( $NUMBER$ ) ;",
        "score": 99.37896259014423
      },
      {
        "patch": "return new Linked CaMeL List < Integer > ( ) ; }",
        "score": 99.38836200420673
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( ) ; } else ;",
        "score": 99.37858072916667
      },
      {
        "patch": "return new Array CaMeL List <= Integer > ( 0 ) ;",
        "score": 99.38792067307692
      },
      {
        "patch": "return new Array CaMeL List < Object < Integer > ( ) ;",
        "score": 99.37436349051339
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( 1 . 0 ) ;",
        "score": 99.3870849609375
      },
      {
        "patch": "return new Array CaMeL List < Integer Integer ] > ( ) ;",
        "score": 99.37050083705357
      },
      {
        "patch": "return new Array CaMeL List < Class > ( ) ;",
        "score": 99.36712646484375
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( null ) ;",
        "score": 99.36081167367789
      },
      {
        "patch": "return new Array CaMeL List < String > ( ) ; }",
        "score": 99.37775127704327
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( $NUMBER$ ) ; }",
        "score": 99.35464041573661
      },
      {
        "patch": "return new Linked CaMeL List < Integer > ( 0 ) ;",
        "score": 99.37098106971153
      },
      {
        "patch": "return new Array CaMeL List < Exception > ( ) ;",
        "score": 99.35350545247395
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( ) ; return null ;",
        "score": 99.35042317708333
      },
      {
        "patch": "return new Array CaMeL List < Integer extends Integer > ( ) ;",
        "score": 99.36650739397321
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( < Integer > ) ;",
        "score": 99.34590657552083
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
        "score": 99.34481201171874
      },
      {
        "patch": "return new Array CaMeL List < Integer > $NUMBER$ ( ) ;",
        "score": 99.34142127403847
      },
      {
        "patch": "return new Hash CaMeL Set < Integer > ( 0 ) ;",
        "score": 99.35541240985577
      },
      {
        "patch": "return new Array CaMeL List < Throwable > ( ) ;",
        "score": 99.34114583333333
      },
      {
        "patch": "return new Array CaMeL List Integer > ( ) ;",
        "score": 99.35526899857955
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( ) ) ;",
        "score": 99.33829439603366
      },
      {
        "patch": "return ( Array CaMeL List < Integer > ) null ;",
        "score": 99.33736165364583
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( ) ; break ;",
        "score": 99.35021100725446
      },
      {
        "patch": "return new Array CaMeL List <= Integer > ( ) ; }",
        "score": 99.34375
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( ( int ) ) ;",
        "score": 99.32999674479167
      },
      {
        "patch": "return new Array CaMeL List < Object > ( 0 ) ;",
        "score": 99.32799353966347
      },
      {
        "patch": "return new Hash CaMeL Map < Integer , Integer > ( ) ;",
        "score": 99.34302629743304
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( 1 ) ; }",
        "score": 99.34107317243304
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( ;",
        "score": 99.32419655539773
      },
      {
        "patch": "return new Hash CaMeL Set < Integer > ( ) ; }",
        "score": 99.34026630108173
      },
      {
        "patch": "return new Array CaMeL List < String > ( 1 ) ;",
        "score": 99.32269756610577
      },
      {
        "patch": "return new Array CaMeL List extends Integer > ( ) ; }",
        "score": 99.33960899939903
      },
      {
        "patch": "return new Array CaMeL List < Object > ( $NUMBER$ ) ;",
        "score": 99.32024676983173
      },
      {
        "patch": "return new Array CaMeL List > ( ) ; }",
        "score": 99.33935546875
      },
      {
        "patch": "return new Array CaMeL List < Integer Integer > ( ) ;",
        "score": 99.3161151592548
      },
      {
        "patch": "return new Array CaMeL List >= Integer > ( ) ;",
        "score": 99.33673095703125
      },
      {
        "patch": "return new new Array CaMeL List < Integer > ( ) ;",
        "score": 99.31594613882211
      },
      {
        "patch": "return new Array CaMeL List >= Integer > ( 0 ) ;",
        "score": 99.33033165564903
      },
      {
        "patch": "return new Array CaMeL List < ? > ( 0 ) ;",
        "score": 99.33030348557692
      },
      {
        "patch": "return get _ factors ( n ) ;",
        "score": 99.32474772135417
      },
      {
        "patch": "return new Array CaMeL List < Double > ( ) ;",
        "score": 99.30960083007812
      },
      {
        "patch": "list = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.3177490234375
      },
      {
        "patch": "return new Array CaMeL List < $STRING$ > ( ) ;",
        "score": 99.30680338541667
      },
      {
        "patch": "return new final Array CaMeL List < Integer > ( ) ;",
        "score": 99.31357046274039
      },
      {
        "patch": "try { return new Array CaMeL List < Integer > ( ) ;",
        "score": 99.29861886160714
      },
      {
        "patch": "return new Array CaMeL List < / > ( ) ;",
        "score": 99.29520670572917
      },
      {
        "patch": "return new Array CaMeL List Integer > ( ) ; }",
        "score": 99.30545043945312
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( ) ; } else",
        "score": 99.29251534598214
      },
      {
        "patch": "return new Array CaMeL List < byte > ( ) ;",
        "score": 99.28817749023438
      },
      {
        "patch": "return new Array CaMeL List Integer > ( 0 ) ;",
        "score": 99.28357950846355
      },
      {
        "patch": "return new List < Integer > ( ) ;",
        "score": 99.28604736328126
      },
      {
        "patch": "return new Hashtable < Integer , Integer > ( ) ;",
        "score": 99.28233846028645
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( - ) ;",
        "score": 99.27849872295673
      },
      {
        "patch": "return new Array CaMeL List < ? >> ( ) ;",
        "score": 99.2728780110677
      },
      {
        "patch": "return new Array CaMeL List < Entry > ( ) ;",
        "score": 99.2754618326823
      },
      {
        "patch": "return new Array CaMeL List < Long >> ( ) ;",
        "score": 99.26776123046875
      },
      {
        "patch": "return new Linked CaMeL List < String > ( ) ;",
        "score": 99.27392578125
      },
      {
        "patch": "return new Array CaMeL List == Integer > ( ) ;",
        "score": 99.26132202148438
      },
      {
        "patch": "return new Array CaMeL List < Object ( ) ;",
        "score": 99.27348188920455
      },
      {
        "patch": "return new Array CaMeL List Long > ( ) ;",
        "score": 99.25734641335227
      },
      {
        "patch": "new Array CaMeL List < Integer > ( ) ;",
        "score": 99.27327104048295
      },
      {
        "patch": "return new Array CaMeL List > ( 0 ) ;",
        "score": 99.2572354403409
      },
      {
        "patch": "return new Array CaMeL List < Integer ( n ) ;",
        "score": 99.2712910970052
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( 0 .",
        "score": 99.25309244791667
      },
      {
        "patch": "return get _ factors ( n ) ; }",
        "score": 99.23334350585938
      },
      {
        "patch": "return new Vector < Integer > ( ) ;",
        "score": 99.22960205078125
      },
      {
        "patch": "return super . get _ factors ( n ) ;",
        "score": 99.22324440696023
      },
      {
        "patch": "return new Array CaMeL List < String ( ) ;",
        "score": 99.19329279119319
      },
      {
        "patch": "return new Array CaMeL List ( ) ;",
        "score": 99.19259982638889
      },
      {
        "patch": "throw new Illegal CaMeL Argument CaMeL Exception ( ) ;",
        "score": 99.18239524147727
      },
      {
        "patch": "return new Integer ( 0 ) ;",
        "score": 99.14924621582031
      },
      {
        "patch": "return new Array CaMeL List ( ) ; }",
        "score": 99.14600219726563
      },
      {
        "patch": "return new Array CaMeL List >> ( ) ;",
        "score": 99.14076538085938
      },
      {
        "patch": "return Collections . empty CaMeL List ( ) ;",
        "score": 99.13138427734376
      },
      {
        "patch": "return new Integer [ 1 ] ;",
        "score": 99.05168914794922
      },
      {
        "patch": "return get _ factors ( ) ;",
        "score": 99.10470581054688
      },
      {
        "patch": "return new Integer ( 1 ) ;",
        "score": 99.02533721923828
      },
      {
        "patch": "return new Array CaMeL List - 1 ;",
        "score": 99.06187608506944
      },
      {
        "patch": "return new int [ 1 ] ;",
        "score": 99.02149963378906
      },
      {
        "patch": "List < Integer > ( ) ;",
        "score": 99.02144622802734
      },
      {
        "patch": "return get _ factors ( ) ; }",
        "score": 99.01561821831598
      },
      {
        "patch": "return new Array CaMeL List null ; }",
        "score": 99.0152587890625
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( ) ;",
        "score": 98.98886447482639
      },
      {
        "patch": "return get _ factors ( 0 ) ;",
        "score": 99.00570339626736
      },
      {
        "patch": "return new Integer [ 0 ] ;",
        "score": 98.97169494628906
      },
      {
        "patch": "return Array CaMeL List < Integer > ;",
        "score": 98.99163140190973
      },
      {
        "patch": "return new int [ 0 ] ;",
        "score": 98.93385314941406
      },
      {
        "patch": "return new Object [ 0 ] ;",
        "score": 98.92415618896484
      },
      {
        "patch": "return new Array CaMeL List null ;",
        "score": 98.92247772216797
      },
      {
        "patch": "return new > ( ) ;",
        "score": 98.81574358258929
      },
      {
        "patch": "throw new > 1 ;",
        "score": 98.48077392578125
      },
      {
        "patch": "return new Integer ( ) ;",
        "score": 98.76871163504464
      },
      {
        "patch": "return null ; }",
        "score": 98.28426513671874
      },
      {
        "patch": "return null ;",
        "score": 98.19548797607422
      }
    ]
  },
  "HANOI-27-28": {
    "src": "steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ;",
    "patches": [
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) ) ;",
        "score": 99.86861843532986
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ;",
        "score": 99.85697856702302
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , end ) ) ;",
        "score": 99.84720458984376
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( start , helper ) ) ;",
        "score": 99.8005138578869
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer >> ( start , helper ) ) ;",
        "score": 99.83824398643092
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( 0 , helper ) ) ;",
        "score": 99.75531969572368
      },
      {
        "patch": "steps . add ( new Pair < String , Integer > ( start , helper ) ) ;",
        "score": 99.73231265419408
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , start , helper ) ) ;",
        "score": 99.8025634765625
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer , Integer > ( start , helper ) ) ;",
        "score": 99.71057710193452
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) , hanoi ( height - 1 , helper ) ) ;",
        "score": 99.80104282924107
      },
      {
        "patch": "steps . add ( new Pair < Integer , String > ( start , helper ) ) ;",
        "score": 99.70013106496711
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) , hanoi ( height - 1 , helper , end ) ) ;",
        "score": 99.79959309895834
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( 0 , helper ) ) ;",
        "score": 99.69624255952381
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , start , helper ) , hanoi ( height - 1 , helper ) ) ;",
        "score": 99.78062337239584
      },
      {
        "patch": "Pair < Integer , Integer > helper = new Pair < Integer , Integer > ( start , helper ) ;",
        "score": 99.69554554332386
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer >> ( start , helper ) ) ; crap _ set . remove ( end ) ;",
        "score": 99.77498653017241
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( $NUMBER$ , helper ) ) ;",
        "score": 99.68198756167763
      },
      {
        "patch": "steps . add ( helper ) ; steps . add ( new Pair < Integer , Integer >> ( start , helper ) ) ;",
        "score": 99.7646014873798
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( 1 , helper ) ) ;",
        "score": 99.67608321340461
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) ) ; steps . add ( height - 1 , helper ) ;",
        "score": 99.76390759698276
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , end ) ) ; } return steps ;",
        "score": 99.72273763020833
      },
      {
        "patch": "steps . add ( new Pair < Long , Integer > ( start , helper ) ) ;",
        "score": 99.65689890008224
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) ) ; } return steps ;",
        "score": 99.71941583806819
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < String , Integer > ( start , helper ) ) ;",
        "score": 99.65606398809524
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , start , helper , end ) ) ;",
        "score": 99.71635298295455
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , start , helper ) ) ;",
        "score": 99.64667038690476
      },
      {
        "patch": "steps . add ( new Pair < Pair < Integer , Integer >> ( start , helper ) ) ;",
        "score": 99.71589006696429
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , String > ( start , helper ) ) ;",
        "score": 99.6403576078869
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer >> ( start , helper , end ) ) ;",
        "score": 99.70133463541667
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , helper , helper ) ) ;",
        "score": 99.64009021577381
      },
      {
        "patch": "steps . add ( hanoi ( height - 1 , helper ) ) ;",
        "score": 99.69676208496094
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( 1 , helper ) ) ;",
        "score": 99.6371837797619
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer >> ( start , helper ) ) ; } return steps ;",
        "score": 99.69481360394022
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer , Integer > ( start , helper ) ) ;",
        "score": 99.63585895040761
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) ) ; crap _ set . remove ( end ) ;",
        "score": 99.6947021484375
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ; }",
        "score": 99.63438110351562
      },
      {
        "patch": "steps . add ( new Pair < Integer , String >> ( start , helper ) ) ;",
        "score": 99.6945865028783
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer >> ( start , helper ) ) ;",
        "score": 99.63337053571429
      },
      {
        "patch": "steps . add ( new Pair < Integer , Long >> ( start , helper ) ) ;",
        "score": 99.69449655633224
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( 0 , start , helper ) ) ;",
        "score": 99.63337053571429
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , start ) ) ;",
        "score": 99.69089762369792
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( end , helper ) ) ;",
        "score": 99.63267758018092
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) ) ; steps . add ( end ) ;",
        "score": 99.686015625
      },
      {
        "patch": "steps . add ( new Pair < Integer , int > ( start , helper ) ) ;",
        "score": 99.63133480674342
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) ) ; steps . add ( helper ) ;",
        "score": 99.683740234375
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( $NUMBER$ , helper ) ) ;",
        "score": 99.63024321056548
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , helper , end ) ) ;",
        "score": 99.68339611235119
      },
      {
        "patch": "steps . add ( new Pair < Integer , Long > ( start , helper ) ) ;",
        "score": 99.62997918379934
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ; } return steps ;",
        "score": 99.68100373641305
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , helper , start , helper ) ) ;",
        "score": 99.62820567255434
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , end ) ) ; }",
        "score": 99.68010602678571
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , $NUMBER$ , helper ) ) ;",
        "score": 99.61884998139881
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) ) ; }",
        "score": 99.67780504728618
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( $STRING$ , helper ) ) ;",
        "score": 99.61761795847039
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , end ) ) ; steps . add ( end ) ;",
        "score": 99.67771629050925
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( start , start , helper ) ) ;",
        "score": 99.61587126358695
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , start , helper ) ) ; } return steps ;",
        "score": 99.6763916015625
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer < Integer > ( start , helper ) ) ;",
        "score": 99.61340913318452
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , end , helper ) ) ;",
        "score": 99.6733065518466
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , 0 ) ) ;",
        "score": 99.61312705592105
      },
      {
        "patch": "steps . add ( helper ) ; steps . add CaMeL All ( hanoi ( height - 1 , helper , end ) ) ;",
        "score": 99.6690086082176
      },
      {
        "patch": "steps . add ( new Pair < $STRING$ , Integer > ( start , helper ) ) ;",
        "score": 99.6119449013158
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , end ) ) ; steps . add ( helper ) ;",
        "score": 99.66898148148148
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( $STRING$ , helper ) ) ;",
        "score": 99.61172340029762
      },
      {
        "patch": "steps . add ( hanoi ( height - 1 , helper , end ) ) ;",
        "score": 99.66687689887152
      },
      {
        "patch": "steps . add ( new Array CaMeL List < Integer , Integer > ( start , helper ) ) ;",
        "score": 99.61022367931548
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , helper , 1 ) ) ;",
        "score": 99.60967726934524
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) ) ; crap _ set . remove ( start ) ;",
        "score": 99.66015625
      },
      {
        "patch": "steps . add ( new Pair < String , Integer > ( 0 , helper ) ) ;",
        "score": 99.6068179481908
      },
      {
        "patch": "steps . add ( helper ) ; steps . add CaMeL All ( hanoi ( height - 1 , helper ) ) ;",
        "score": 99.66013671875
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( end , helper ) ) ;",
        "score": 99.60678245907738
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , end - 1 ) ) ;",
        "score": 99.6562167080966
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( start , helper , helper ) ) ;",
        "score": 99.60655146059783
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , start , helper ) ) ; steps . add ( end ) ;",
        "score": 99.65497504340277
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Long > ( start , helper ) ) ;",
        "score": 99.60650344122024
      },
      {
        "patch": "steps . add ( new Pair < Pair < Integer , Integer > ( start , helper ) ) ;",
        "score": 99.65146019345238
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( first , helper ) ) ;",
        "score": 99.60623972039474
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( start , helper ) ) ; }",
        "score": 99.60566850142045
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , start , helper , helper ) ) ;",
        "score": 99.64899236505681
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( max , helper ) ) ;",
        "score": 99.60517321134868
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , end ) ) ; } return steps ; }",
        "score": 99.646845703125
      },
      {
        "patch": "steps . add ( new Pair < String , Integer , Integer > ( start , helper ) ) ;",
        "score": 99.604248046875
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer >> ( start , helper ) ) ; }",
        "score": 99.64656982421874
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( start , 0 ) ) ;",
        "score": 99.60043480282738
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) ) ; steps . add ( $NUMBER$ ) ;",
        "score": 99.644033203125
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Long , Integer > ( start , helper ) ) ;",
        "score": 99.59931873139881
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , start , helper ) ) ;",
        "score": 99.64345481178977
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( 0 , start , helper ) ) ;",
        "score": 99.5993015455163
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , start + helper ) ) ;",
        "score": 99.64144287109374
      },
      {
        "patch": "Pair < Integer , Integer > start = new Pair < Integer , Integer > ( start , helper ) ;",
        "score": 99.59837757457386
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) ) ; steps . add ( start ) ;",
        "score": 99.63861328125
      },
      {
        "patch": "steps . add ( new Pair < Integer , Object > ( start , helper ) ) ;",
        "score": 99.59834369860198
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) ) ; } return steps ; }",
        "score": 99.636962890625
      },
      {
        "patch": "steps . add ( new Pair < Integer , String > ( 0 , helper ) ) ;",
        "score": 99.59822805304276
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 + helper ) ) ;",
        "score": 99.63460286458333
      },
      {
        "patch": "steps . add ( new Pair < Integer , ? > ( start , helper ) ) ;",
        "score": 99.59809955797698
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , start , helper ) ) ; }",
        "score": 99.63325427827381
      },
      {
        "patch": "steps . add ( new Pair < Object , Integer > ( start , helper ) ) ;",
        "score": 99.59687243009868
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer >> ( height - 1 , helper ) ) ;",
        "score": 99.63125465029762
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , 0 , helper ) ) ;",
        "score": 99.59564499627976
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , end , helper , end ) ) ;",
        "score": 99.62966918945312
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer , Integer > ( 0 , helper ) ) ;",
        "score": 99.59558686755952
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( 0 , helper , start , helper ) ) ;",
        "score": 99.59071416440217
      },
      {
        "patch": "steps . add ( hanoi ( height - 1 , start , helper ) ) ;",
        "score": 99.62866889105902
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , $NUMBER$ ) ) ;",
        "score": 99.58927194695724
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , helper , end ) ) ;",
        "score": 99.62804066051136
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( new Integer ( start ) , helper ) ) ;",
        "score": 99.58732804008152
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , end ++ ) ) ;",
        "score": 99.62789481026786
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , helper , $NUMBER$ ) ) ;",
        "score": 99.58716982886905
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 + start , helper ) ) ;",
        "score": 99.625146484375
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( max , helper ) ) ;",
        "score": 99.58598400297619
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , helper ) ) ;",
        "score": 99.62300415039063
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Object > ( start , helper ) ) ;",
        "score": 99.5837169828869
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , end ) ) ;",
        "score": 99.61879475911458
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , int > ( start , helper ) ) ;",
        "score": 99.58262416294643
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height + 1 , helper , end ) ) ;",
        "score": 99.61860961914063
      },
      {
        "patch": "this . steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ;",
        "score": 99.58076404389881
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , crap _ set ) ) ;",
        "score": 99.61803668478261
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , 1 , helper ) ) ;",
        "score": 99.58046177455357
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( height - 1 , start , helper ) ) ;",
        "score": 99.61775008491848
      },
      {
        "patch": "steps . add ( new Pair < E , Integer > ( start , helper ) ) ;",
        "score": 99.58039293791118
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height + 1 , helper ) ) ;",
        "score": 99.61773003472223
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , ? > ( start , helper ) ) ;",
        "score": 99.57804361979167
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( height - 1 , helper ) ) ;",
        "score": 99.61588541666667
      },
      {
        "patch": "steps . add ( new Pair < Integer , Float > ( start , helper ) ) ;",
        "score": 99.57636461759868
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , start ) ) ;",
        "score": 99.61488037109375
      },
      {
        "patch": "steps . add ( new Pair < String , String > ( start , helper ) ) ;",
        "score": 99.57576069078948
      },
      {
        "patch": "steps . add ( new Map < Integer , Integer > ( start , helper ) ) ;",
        "score": 99.57248406661184
      },
      {
        "patch": "steps . add ( new Pair < String , Integer >> ( start , helper ) ) ;",
        "score": 99.61331337376645
      },
      {
        "patch": "return steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ;",
        "score": 99.57222290039063
      },
      {
        "patch": "steps . add ( new Pair < Integer , Object >> ( start , helper ) ) ;",
        "score": 99.61151444284539
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , start ) ) ;",
        "score": 99.57035104851974
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper , height ) ) ;",
        "score": 99.60859375
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( new Integer ( helper ) ) ) ;",
        "score": 99.57014973958333
      },
      {
        "patch": "steps . remove CaMeL All ( hanoi ( height - 1 , helper ) ) ;",
        "score": 99.60708279079861
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , helper , 0 ) ) ;",
        "score": 99.56939406622024
      },
      {
        "patch": "steps . add ( new Pair < Long , Integer >> ( start , helper ) ) ;",
        "score": 99.60688219572368
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( start , start ) ) ;",
        "score": 99.56895228794643
      },
      {
        "patch": "steps . add ( new Pair < Object , Integer >> ( start , helper ) ) ;",
        "score": 99.60566149259868
      },
      {
        "patch": "} else { steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ;",
        "score": 99.56843705610795
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) , end ) ;",
        "score": 99.60397338867188
      },
      {
        "patch": "steps . add ( new Object < Integer , Integer > ( start , helper ) ) ;",
        "score": 99.56719006990132
      },
      {
        "patch": "steps . remove CaMeL All ( hanoi ( height - 1 , helper , end ) ) ;",
        "score": 99.60062866210937
      },
      {
        "patch": "{ steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ; }",
        "score": 99.56562732514881
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , helper ) ) ; return steps ;",
        "score": 99.59287806919643
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( start , $NUMBER$ ) ) ;",
        "score": 99.56458100818452
      },
      {
        "patch": "steps . add ( new Pair < Pair < Integer , String >> ( start , helper ) ) ;",
        "score": 99.59248279389881
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( 0 , helper , 1 ) ) ;",
        "score": 99.56340680803571
      },
      {
        "patch": "steps . add ( new Pair < Pair < Integer , Long >> ( start , helper ) ) ;",
        "score": 99.58989025297619
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( this , helper ) ) ;",
        "score": 99.56145276521382
      },
      {
        "patch": "steps . add ( new Pair < Integer , Short > ( start , helper ) ) ;",
        "score": 99.56142064144737
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer >> ( start + 1 , helper ) ) ;",
        "score": 99.58958798363095
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , end ) ) ;",
        "score": 99.55387155633224
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , 1 , helper ) ) ;",
        "score": 99.58922119140625
      },
      {
        "patch": "steps . add ( new Pair < Integer , int > ( 0 , helper ) ) ;",
        "score": 99.55167429070724
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 , start ) , helper ) ;",
        "score": 99.5879150390625
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , max ) ) ;",
        "score": 99.55076840049342
      },
      {
        "patch": "steps . add ( new Pair < Integer , Number >> ( start , helper ) ) ;",
        "score": 99.58628443667763
      },
      {
        "patch": "steps . add ( new Pair < Integer , E > ( start , helper ) ) ;",
        "score": 99.5500424033717
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ; ;",
        "score": 99.5487548828125
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 ) , helper , end ) ;",
        "score": 99.58375854492188
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer >> ( 0 , helper ) ) ;",
        "score": 99.54606548108552
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height + 1 , start , helper ) ) ;",
        "score": 99.58342895507812
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( 0 , helper ) ) ; }",
        "score": 99.54448852539062
      },
      {
        "patch": "steps . add ( new Linked CaMeL List < Integer , Integer > ( ) ) ;",
        "score": 99.54442003038194
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 ) , helper ) ;",
        "score": 99.58246527777777
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , 1 ) ) ;",
        "score": 99.54059801603618
      },
      {
        "patch": "steps . add ( new Pair < Integer , Double >> ( start , helper ) ) ;",
        "score": 99.57870965254934
      },
      {
        "patch": "{ steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ;",
        "score": 99.540234375
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer >> ( 1 , helper ) ) ;",
        "score": 99.57545872738487
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( 0 , 0 ) ) ;",
        "score": 99.53996196546052
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer , Integer > ( start , helper ) ) ; }",
        "score": 99.5235928622159
      },
      {
        "patch": "steps . remove ( new Pair < Integer , Integer >> ( start , helper ) ) ;",
        "score": 99.56987561677632
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( start , helper ) ) ; ;",
        "score": 99.51849920099431
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 + start ) ) ;",
        "score": 99.55862087673611
      },
      {
        "patch": "steps . add CaMeL All ( new Pair < Integer , Integer > ( 0 , helper ) ) ; }",
        "score": 99.51202947443181
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 ) , end ) ;",
        "score": 99.54704454210069
      },
      {
        "patch": "steps . add ( new Pair < String , Integer > ( start , helper ) ) ; }",
        "score": 99.51197509765625
      },
      {
        "patch": "steps . add ( new Pair < Integer > ( start , helper ) ) ;",
        "score": 99.54433306525735
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ; break ;",
        "score": 99.50501069568452
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start ) ) ;",
        "score": 99.50445197610294
      },
      {
        "patch": "steps . add ( hanoi ( height - 1 , start ) ) ;",
        "score": 99.4981460571289
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ; ) ;",
        "score": 99.4933849516369
      },
      {
        "patch": "steps . add CaMeL All ( hanoi ( height - 1 ) ) ;",
        "score": 99.48246765136719
      },
      {
        "patch": "steps . add ( new Pair < Integer , String > ( start , helper ) ) ; }",
        "score": 99.48283081054687
      },
      {
        "patch": "steps . add ( new Pair > ( start , helper ) ) ;",
        "score": 99.4458984375
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( 1 , helper ) ) ; }",
        "score": 99.4704833984375
      },
      {
        "patch": "add ( hanoi ( height - 1 , helper ) ) ;",
        "score": 99.39493233816964
      },
      {
        "patch": "steps . add ( new Pair < Integer , Integer > ( $NUMBER$ , helper ) ) ; }",
        "score": 99.46984252929687
      },
      {
        "patch": "steps . add ( helper ) ;",
        "score": 98.90679931640625
      }
    ]
  },
  "IS_VALID_PARENTHESIZATION-24-25": {
    "src": "return true ;",
    "patches": [
      {
        "patch": "return true ;",
        "score": 99.73622131347656
      },
      {
        "patch": "return false ;",
        "score": 99.71368408203125
      },
      {
        "patch": "return null ;",
        "score": 99.55075073242188
      },
      {
        "patch": "return false ; } } return true ;",
        "score": 99.41879611545139
      },
      {
        "patch": "return true ; } } return true ;",
        "score": 99.41634114583333
      },
      {
        "patch": "} return true ;",
        "score": 99.2846435546875
      },
      {
        "patch": "return false ; } return true ; }",
        "score": 99.37266710069444
      },
      {
        "patch": "} return false ;",
        "score": 99.21326293945313
      },
      {
        "patch": "return true ; } return true ; }",
        "score": 99.37179904513889
      },
      {
        "patch": "} if return true ;",
        "score": 99.09068806966145
      },
      {
        "patch": "else if ( depth < 0 ) {",
        "score": 99.36836751302083
      },
      {
        "patch": "} return null ;",
        "score": 99.06973266601562
      },
      {
        "patch": "return true ; } } return false ;",
        "score": 99.36290825737848
      },
      {
        "patch": "} if ; return true ;",
        "score": 99.00569370814732
      },
      {
        "patch": "return false ; } } return false ;",
        "score": 99.35428873697917
      },
      {
        "patch": "else { return true ; }",
        "score": 98.95601109095982
      },
      {
        "patch": "return true ; }",
        "score": 99.2271728515625
      },
      {
        "patch": "return true ; return false ;",
        "score": 98.9559326171875
      },
      {
        "patch": "if ( depth < 0 ) {",
        "score": 99.22206115722656
      },
      {
        "patch": "return false ; return false ;",
        "score": 98.91554478236607
      },
      {
        "patch": "return false ; }",
        "score": 99.21375732421875
      },
      {
        "patch": "} else { return true ;",
        "score": 98.90409633091518
      },
      {
        "patch": "return false ; } return true ;",
        "score": 99.1915283203125
      },
      {
        "patch": "if ; return true ;",
        "score": 98.90357462565105
      },
      {
        "patch": "return true ; } return true ;",
        "score": 99.1882095336914
      },
      {
        "patch": "} else if return true ;",
        "score": 98.88597760881696
      },
      {
        "patch": "return true ; } return false ;",
        "score": 99.13722229003906
      },
      {
        "patch": "else { return null ; }",
        "score": 98.88245500837054
      },
      {
        "patch": "return false ; } return false ;",
        "score": 99.12103271484375
      },
      {
        "patch": "} else { return false ;",
        "score": 98.87290736607143
      },
      {
        "patch": "return true ; } else {",
        "score": 99.06301443917411
      },
      {
        "patch": "} if return false ;",
        "score": 98.86780802408855
      },
      {
        "patch": "return false ; } else {",
        "score": 99.05552455357143
      },
      {
        "patch": "return true ; return true ;",
        "score": 98.86628941127232
      },
      {
        "patch": "else { return false ; }",
        "score": 98.86530412946429
      },
      {
        "patch": "return false ; return true ;",
        "score": 99.03159005301339
      },
      {
        "patch": "if return false ;",
        "score": 98.86060791015625
      },
      {
        "patch": "return true ; break ;",
        "score": 98.9871317545573
      },
      {
        "patch": "} if return null ;",
        "score": 98.85254923502605
      },
      {
        "patch": "return false ; break ;",
        "score": 98.97885131835938
      },
      {
        "patch": "return ( depth < 0 ) ;",
        "score": 98.97740936279297
      },
      {
        "patch": "} else if return false ;",
        "score": 98.83666120256696
      },
      {
        "patch": "return { return true ; }",
        "score": 98.97665841238839
      },
      {
        "patch": "if return true ;",
        "score": 98.83333740234374
      },
      {
        "patch": "return { return true ; } }",
        "score": 98.95533752441406
      },
      {
        "patch": "return null ; return false ;",
        "score": 98.81692940848214
      },
      {
        "patch": "return null ; return true ;",
        "score": 98.81413051060268
      },
      {
        "patch": "return depth < parens . length ;",
        "score": 98.94022369384766
      },
      {
        "patch": "* * * * * /",
        "score": 98.80716378348214
      },
      {
        "patch": "return true ; break ; }",
        "score": 98.93943568638393
      },
      {
        "patch": "} ; return true ;",
        "score": 98.78812662760417
      },
      {
        "patch": "return depth < 0 + 1 ;",
        "score": 98.93929290771484
      },
      {
        "patch": "return true ; return null ;",
        "score": 98.78769356863839
      },
      {
        "patch": "return true ; } }",
        "score": 98.9376220703125
      },
      {
        "patch": "return return false ;",
        "score": 98.78394165039063
      },
      {
        "patch": "return ( ! true ) ;",
        "score": 98.93738664899554
      },
      {
        "patch": "/ * * * * /",
        "score": 98.78377859933036
      },
      {
        "patch": "} ; if return true ;",
        "score": 98.77898297991071
      },
      {
        "patch": "return false ; } }",
        "score": 98.92521158854167
      },
      {
        "patch": "return new Boolean ( true ;",
        "score": 98.76865931919643
      },
      {
        "patch": "return ( Boolean ) true ;",
        "score": 98.92287772042411
      },
      {
        "patch": "} else { if ; }",
        "score": 98.74494280133929
      },
      {
        "patch": "return ( ! false ) ;",
        "score": 98.91922433035714
      },
      {
        "patch": "} if ; return false ;",
        "score": 98.7401123046875
      },
      {
        "patch": "return false ; break ; }",
        "score": 98.91872732979911
      },
      {
        "patch": "} else { return null ;",
        "score": 98.73386056082589
      },
      {
        "patch": "return true ; } } else {",
        "score": 98.90873718261719
      },
      {
        "patch": "return false ; return null ;",
        "score": 98.7303466796875
      },
      {
        "patch": "return false ; } } else {",
        "score": 98.90193176269531
      },
      {
        "patch": "} else if return null ;",
        "score": 98.72617013113839
      },
      {
        "patch": "throw new Exception ( $STRING$ ) ;",
        "score": 98.8941879272461
      },
      {
        "patch": "return new true ;",
        "score": 98.72293701171876
      },
      {
        "patch": "return depth < 0 ) ;",
        "score": 98.89239501953125
      },
      {
        "patch": "return null ; return null ;",
        "score": 98.71772112165179
      },
      {
        "patch": "if ( depth > 0 ) {",
        "score": 98.88024139404297
      },
      {
        "patch": "} if return ! true ;",
        "score": 98.70579310825893
      },
      {
        "patch": "return true ; return true ; }",
        "score": 98.873291015625
      },
      {
        "patch": "} if true ;",
        "score": 98.6976806640625
      },
      {
        "patch": "return ( true ) ;",
        "score": 98.8631591796875
      },
      {
        "patch": "} else { if true ;",
        "score": 98.69408307756696
      },
      {
        "patch": "return false ; return true ; }",
        "score": 98.86273193359375
      },
      {
        "patch": "return $STRING$ ;",
        "score": 98.68644714355469
      },
      {
        "patch": "return { return false ; }",
        "score": 98.86064801897321
      },
      {
        "patch": "* * * * /",
        "score": 98.68465169270833
      },
      {
        "patch": "return ( Boolean ) false ;",
        "score": 98.85777064732143
      },
      {
        "patch": "/ * * * /",
        "score": 98.6842549641927
      },
      {
        "patch": "return { return false ; } }",
        "score": 98.85303497314453
      },
      {
        "patch": "return true ; true ;",
        "score": 98.67724609375
      },
      {
        "patch": "return depth < 0 ;",
        "score": 98.8450927734375
      },
      {
        "patch": "} * * * * /",
        "score": 98.66510881696429
      },
      {
        "patch": "return depth < 0 + 0 ;",
        "score": 98.84477996826172
      },
      {
        "patch": "} else return null ;",
        "score": 98.6612548828125
      },
      {
        "patch": "return true ; else return true ;",
        "score": 98.84303283691406
      },
      {
        "patch": "if ; return null ;",
        "score": 98.65897623697917
      },
      {
        "patch": "return { return true ;",
        "score": 98.83709716796875
      },
      {
        "patch": "throw new Runtime CaMeL Exception ;",
        "score": 98.65567452566964
      },
      {
        "patch": "return depth < 0 - 1 ;",
        "score": 98.83397674560547
      },
      {
        "patch": "} else { if ;",
        "score": 98.6483866373698
      },
      {
        "patch": "if ( depth == 0 ) {",
        "score": 98.83241271972656
      },
      {
        "patch": "return false ; true ;",
        "score": 98.64610799153645
      },
      {
        "patch": "if ( depth <= 0 ) {",
        "score": 98.82933807373047
      },
      {
        "patch": "return return && true ;",
        "score": 98.64554850260417
      },
      {
        "patch": "} else if ( true ;",
        "score": 98.64408656529018
      },
      {
        "patch": "if ( depth < 1 ) {",
        "score": 98.81208801269531
      },
      {
        "patch": "return return null ;",
        "score": 98.6435546875
      },
      {
        "patch": "return false ; else return true ;",
        "score": 98.8104019165039
      },
      {
        "patch": "} return return null ;",
        "score": 98.63675944010417
      },
      {
        "patch": "return return true ;",
        "score": 98.80914306640625
      },
      {
        "patch": "} else return true ;",
        "score": 98.62521362304688
      },
      {
        "patch": "if ( depth >= 0 ) {",
        "score": 98.80867004394531
      },
      {
        "patch": "} if ( true ;",
        "score": 98.6240743001302
      },
      {
        "patch": "return true ; return false ; }",
        "score": 98.80087280273438
      },
      {
        "patch": "return new Boolean ( false ;",
        "score": 98.62328229631696
      },
      {
        "patch": "if ( depth != 0 ) {",
        "score": 98.79595184326172
      },
      {
        "patch": "return null ; true ;",
        "score": 98.61182657877605
      },
      {
        "patch": "return depth < 0 + depth ;",
        "score": 98.79552459716797
      },
      {
        "patch": "state = false ; return true ;",
        "score": 98.78236389160156
      },
      {
        "patch": "if ( 0 == true ;",
        "score": 98.60641043526786
      },
      {
        "patch": "break ; } return true ;",
        "score": 98.75530133928571
      },
      {
        "patch": "return true true ;",
        "score": 98.59906616210938
      },
      {
        "patch": "return ( false ) ;",
        "score": 98.74657185872395
      },
      {
        "patch": "return true ; ;",
        "score": 98.56519775390625
      },
      {
        "patch": "return ; } return true ;",
        "score": 98.7384033203125
      },
      {
        "patch": "} if ;",
        "score": 98.56208038330078
      },
      {
        "patch": "return ( return true ) ;",
        "score": 98.73493303571429
      },
      {
        "patch": "return 0 ;",
        "score": 98.55703735351562
      },
      {
        "patch": "return true ; } break ;",
        "score": 98.71260288783482
      },
      {
        "patch": "} else if ;",
        "score": 98.54225463867188
      },
      {
        "patch": "return false ; } break ;",
        "score": 98.70549665178571
      },
      {
        "patch": "} else if true ;",
        "score": 98.5408223470052
      },
      {
        "patch": "return this ;",
        "score": 98.52154541015625
      },
      {
        "patch": "return { return false ;",
        "score": 98.69371541341145
      },
      {
        "patch": "else { if ; }",
        "score": 98.5142313639323
      },
      {
        "patch": "return null true ;",
        "score": 98.51029663085937
      },
      {
        "patch": "return Boolean . TRUE ;",
        "score": 98.631591796875
      },
      {
        "patch": "} return $STRING$ ;",
        "score": 98.50989990234375
      },
      {
        "patch": "return Boolean . FALSE ;",
        "score": 98.63025919596355
      },
      {
        "patch": "return false ; ;",
        "score": 98.50760498046876
      },
      {
        "patch": "return true ; else {",
        "score": 98.57515462239583
      },
      {
        "patch": "return false true ;",
        "score": 98.49822387695312
      },
      {
        "patch": "return false ; else {",
        "score": 98.56768798828125
      },
      {
        "patch": "if return null ;",
        "score": 98.48458251953124
      },
      {
        "patch": "return return false ; }",
        "score": 98.55257161458333
      },
      {
        "patch": "else { return true ;",
        "score": 98.482421875
      },
      {
        "patch": "return true ; * /",
        "score": 98.54478963216145
      },
      {
        "patch": "return return true ; }",
        "score": 98.53826904296875
      },
      {
        "patch": "return ;",
        "score": 98.4503885904948
      },
      {
        "patch": "return false ; * /",
        "score": 98.52698771158855
      },
      {
        "patch": "return null ; ;",
        "score": 98.44046020507812
      },
      {
        "patch": "if ( true ;",
        "score": 98.42913818359375
      },
      {
        "patch": "result = true ;",
        "score": 98.50493774414062
      },
      {
        "patch": "return - 1 ;",
        "score": 98.42864379882812
      },
      {
        "patch": "return false + true ;",
        "score": 98.50376383463542
      },
      {
        "patch": "/ * * /",
        "score": 98.42116088867188
      },
      {
        "patch": "return true + true ;",
        "score": 98.4993184407552
      },
      {
        "patch": "* * * /",
        "score": 98.4102783203125
      },
      {
        "patch": "return ! true ;",
        "score": 98.39937744140624
      },
      {
        "patch": "else return true ;",
        "score": 98.38246459960938
      },
      {
        "patch": "return ( true ;",
        "score": 98.371142578125
      },
      {
        "patch": "return ; }",
        "score": 98.3526840209961
      },
      {
        "patch": "if ; * /",
        "score": 98.32879638671875
      },
      {
        "patch": "result = false ;",
        "score": 98.33623046875
      },
      {
        "patch": "} else {",
        "score": 98.26988220214844
      },
      {
        "patch": "return -- depth ;",
        "score": 98.30586547851563
      },
      {
        "patch": "if true ;",
        "score": 98.25846862792969
      },
      {
        "patch": "return parens ;",
        "score": 98.2625961303711
      },
      {
        "patch": "if ;",
        "score": 98.2467753092448
      },
      {
        "patch": "return 0 ; }",
        "score": 98.24185791015626
      },
      {
        "patch": "} return ;",
        "score": 98.20647430419922
      },
      {
        "patch": "} true ;",
        "score": 98.14726257324219
      },
      {
        "patch": "return depth ;",
        "score": 98.05545806884766
      },
      {
        "patch": "else if ;",
        "score": 98.08786010742188
      },
      {
        "patch": "return ) ;",
        "score": 97.93494415283203
      },
      {
        "patch": "return $NUMBER$ ;",
        "score": 98.08580017089844
      },
      {
        "patch": "break ; }",
        "score": 98.04186248779297
      },
      {
        "patch": "break ;",
        "score": 97.74453735351562
      },
      {
        "patch": "} else ;",
        "score": 97.99016571044922
      },
      {
        "patch": "return }",
        "score": 97.53916422526042
      },
      {
        "patch": "finally {",
        "score": 97.14599609375
      },
      {
        "patch": "* /",
        "score": 97.40399169921875
      },
      {
        "patch": "return",
        "score": 96.82730865478516
      },
      {
        "patch": "}",
        "score": 96.7248306274414
      }
    ]
  },
  "KHEAPSORT-27-28": {
    "src": "for ( Integer x : arr ) {",
    "patches": [
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( 0 , k ) ) {",
        "score": 99.980712890625
      },
      {
        "patch": "for ( Integer x : arr ) {",
        "score": 99.73781331380208
      },
      {
        "patch": "for ( Integer x : arr ) { heap . add ( x ) ;",
        "score": 99.95563507080078
      },
      {
        "patch": "if ( arr != null ) { for ( Integer x : arr ) {",
        "score": 99.7364730834961
      },
      {
        "patch": "for ( Integer x : arr ) { output . add ( x ) ;",
        "score": 99.91146087646484
      },
      {
        "patch": "if ( x != null ) { for ( Integer x : arr ) {",
        "score": 99.68916320800781
      },
      {
        "patch": "for ( Integer x : arr ) { heap . add ( x ) ; }",
        "score": 99.82256002987133
      },
      {
        "patch": "for ( Integer x : arr . size ( ) ) {",
        "score": 99.6431884765625
      },
      {
        "patch": "for ( int x : arr . sub CaMeL List ( 0 , k ) ) {",
        "score": 99.78548177083333
      },
      {
        "patch": "synchronized ( this ) { for ( Integer x : arr ) {",
        "score": 99.64253452845982
      },
      {
        "patch": "for ( Integer x : heap . sub CaMeL List ( 0 , k ) ) {",
        "score": 99.77922227647569
      },
      {
        "patch": "for ( Integer x : arr . iterator ( ) ) {",
        "score": 99.59494253305289
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( k , k ) ) {",
        "score": 99.76580132378473
      },
      {
        "patch": "if ( arr == null ) { for ( Integer x : arr ) {",
        "score": 99.57905578613281
      },
      {
        "patch": "for ( Long x : arr . sub CaMeL List ( 0 , k ) ) {",
        "score": 99.76228162977431
      },
      {
        "patch": "if ( x == null ) { for ( Integer x : arr ) {",
        "score": 99.57490539550781
      },
      {
        "patch": "for ( Integer x : arr ) { output . add ( x ) ; }",
        "score": 99.7510986328125
      },
      {
        "patch": "if ( arr != null ) { for ( int x : arr ) {",
        "score": 99.57049560546875
      },
      {
        "patch": "for ( int k : arr . sub CaMeL List ( 0 , k ) ) {",
        "score": 99.74431016710069
      },
      {
        "patch": "while ( x != null ) { for ( Integer x : arr ) {",
        "score": 99.56523895263672
      },
      {
        "patch": "for ( Integer 1 : arr . sub CaMeL List ( 0 , k ) ) {",
        "score": 99.73969184027777
      },
      {
        "patch": "if ( x != null ) { for ( Integer x : 0 ) {",
        "score": 99.560546875
      },
      {
        "patch": "for ( Integer k : arr . sub CaMeL List ( 0 , k ) ) {",
        "score": 99.73828125
      },
      {
        "patch": "synchronized ( arr ) { for ( Integer x : arr ) {",
        "score": 99.55492292131696
      },
      {
        "patch": "for ( Integer x : arr ) for ( Integer x : arr ) {",
        "score": 99.55284118652344
      },
      {
        "patch": "List < Integer > output = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.73711081112133
      },
      {
        "patch": "for ( Integer x : arr ) { if ( x != null ) {",
        "score": 99.55274200439453
      },
      {
        "patch": "Vector < Integer > output = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.73193359375
      },
      {
        "patch": "if ( arr != null ) { for ( Integer x : 0 ) {",
        "score": 99.5459213256836
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( 0 , x ) ) {",
        "score": 99.73077392578125
      },
      {
        "patch": "if ( arr != null ) { for ( Integer arr : arr ) {",
        "score": 99.53598022460938
      },
      {
        "patch": "for ( Integer x : new Array CaMeL List < Integer > ( ) ) {",
        "score": 99.73064108455883
      },
      {
        "patch": "for ( Integer x : arr ) { arr . add ( arr ) ;",
        "score": 99.53563690185547
      },
      {
        "patch": "for ( Integer x : arr ) { for ( Integer x : arr ) {",
        "score": 99.72437959558823
      },
      {
        "patch": "for ( Iterator < Integer > x : arr . iterator ( ) ) {",
        "score": 99.53257751464844
      },
      {
        "patch": "for ( Integer x : arr ) { heap . add ( $STRING$ ) ;",
        "score": 99.72201538085938
      },
      {
        "patch": "for ( int x : arr ) {",
        "score": 99.52278645833333
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( 1 , k ) ) {",
        "score": 99.71571180555556
      },
      {
        "patch": "if ( x != null ) { for ( int x : arr ) {",
        "score": 99.52165222167969
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( 0 , 0 ) ) {",
        "score": 99.70454237196181
      },
      {
        "patch": "for ( Integer x : arr ) { arr . add ( x ) ;",
        "score": 99.51715850830078
      },
      {
        "patch": "for ( String x : arr . sub CaMeL List ( 0 , k ) ) {",
        "score": 99.70351155598958
      },
      {
        "patch": "for ( int x : arr . size ( ) ) {",
        "score": 99.5011455829327
      },
      {
        "patch": "for ( Long x : arr ) { heap . add ( x ) ;",
        "score": 99.70162963867188
      },
      {
        "patch": "for ( int x : arr . iterator ( ) ) {",
        "score": 99.447509765625
      },
      {
        "patch": "for < Integer > output = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.69060920266544
      },
      {
        "patch": "for ( Integer x : arr ) { if ( x instanceof Integer ) {",
        "score": 99.43983459472656
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL Set ( 0 , k ) ) {",
        "score": 99.67985704210069
      },
      {
        "patch": "for ( Integer [ ] arr : arr ) {",
        "score": 99.43923117897727
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( 0 + k ) ) {",
        "score": 99.67972140842014
      },
      {
        "patch": "for ( Integer x : arr . arr ) {",
        "score": 99.43769975142045
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( $STRING$ , k ) ) {",
        "score": 99.67694769965277
      },
      {
        "patch": "for ( Integer x : arr . x ) {",
        "score": 99.4353360262784
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( x , k ) ) {",
        "score": 99.6759033203125
      },
      {
        "patch": "for ( Integer x : arr . values ( ) ) {",
        "score": 99.43136831430289
      },
      {
        "patch": "for ( Integer x : output ) { heap . add ( x ) ;",
        "score": 99.67512512207031
      },
      {
        "patch": "for ( Integer x : arr . list ( ) ) {",
        "score": 99.42652306189903
      },
      {
        "patch": "for ( Integer arr : arr . sub CaMeL List ( 0 , k ) ) {",
        "score": 99.67327880859375
      },
      {
        "patch": "for ( Integer [ ] arr : arr . size ( ) ) {",
        "score": 99.40763346354167
      },
      {
        "patch": "for ( Integer heap : arr . sub CaMeL List ( 0 , k ) ) {",
        "score": 99.67289225260417
      },
      {
        "patch": "for ( Integer [ ] x : arr . size ( ) ) {",
        "score": 99.40474446614583
      },
      {
        "patch": "for ( Integer x : arr ) { heap . add ( heap ) ;",
        "score": 99.66697692871094
      },
      {
        "patch": "for ( Integer arr : arr ) {",
        "score": 99.40306260850694
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( 0 , k ) )",
        "score": 99.66394761029412
      },
      {
        "patch": "for ( Integer [ ] x : arr ) {",
        "score": 99.39766068892045
      },
      {
        "patch": "for ( Integer x : arr ) { heap . add ( 0 , x ) ;",
        "score": 99.66134982638889
      },
      {
        "patch": "for ( String x : arr . size ( ) ) {",
        "score": 99.39661583533653
      },
      {
        "patch": "for ( Long x : arr ) { output . add ( x ) ;",
        "score": 99.6606216430664
      },
      {
        "patch": "for ( Integer [ ] arr : arr . iterator ( ) ) {",
        "score": 99.39442545572916
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( 0 , 1 ) ) {",
        "score": 99.65728759765625
      },
      {
        "patch": "for ( Integer arr : arr . size ( ) ) {",
        "score": 99.39177997295673
      },
      {
        "patch": "Iterator < Integer > output = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.65537396599265
      },
      {
        "patch": "for ( Integer x : arr ) { if ( x == null ) {",
        "score": 99.38964080810547
      },
      {
        "patch": "Collection < Integer > output = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.65260943244485
      },
      {
        "patch": "for ( Integer [ ] x : arr . iterator ( ) ) {",
        "score": 99.38617350260417
      },
      {
        "patch": "for ( Integer x : output . sub CaMeL List ( 0 , k ) ) {",
        "score": 99.65189615885417
      },
      {
        "patch": "for ( Integer x : arr . max ) {",
        "score": 99.3851318359375
      },
      {
        "patch": "for ( int x : arr ) { heap . add ( x ) ;",
        "score": 99.65115356445312
      },
      {
        "patch": "for ( Integer x : arr . to CaMeL Array ( ) ) {",
        "score": 99.3785400390625
      },
      {
        "patch": "for ( String x : arr ) { heap . add ( x ) ;",
        "score": 99.64947509765625
      },
      {
        "patch": "for ( String x : arr ) {",
        "score": 99.37839762369792
      },
      {
        "patch": "for ( float x : arr . sub CaMeL List ( 0 , k ) ) {",
        "score": 99.64704725477431
      },
      {
        "patch": "for ( Integer < String > x : arr ) {",
        "score": 99.37105305989583
      },
      {
        "patch": "for ( Integer x : arr ) { output . add ( $STRING$ ) ;",
        "score": 99.64539337158203
      },
      {
        "patch": "for ( Integer x : arr . keys ( ) ) {",
        "score": 99.37062424879808
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( $NUMBER$ , k ) ) {",
        "score": 99.64336480034723
      },
      {
        "patch": "if ( arr != null ) { for ( Integer x : arr )",
        "score": 99.3685791015625
      },
      {
        "patch": "for ( int x : arr ) { output . add ( x ) ;",
        "score": 99.63773345947266
      },
      {
        "patch": "for ( final Integer x : arr ) {",
        "score": 99.36689453125
      },
      {
        "patch": "for ( Integer x : arr ) { output . add ( heap ) ;",
        "score": 99.63558197021484
      },
      {
        "patch": "for ( Integer x : arr ) { for ( Integer x : arr )",
        "score": 99.36138153076172
      },
      {
        "patch": "for ( Integer x : heap ) { heap . add ( x ) ;",
        "score": 99.6346206665039
      },
      {
        "patch": "for ( Integer [ ] [ ] arr : arr ) {",
        "score": 99.3595440204327
      },
      {
        "patch": "for ( Integer x : arr ) { heap . put ( x ) ;",
        "score": 99.63420867919922
      },
      {
        "patch": "for ( Integer < Integer > x : arr ) {",
        "score": 99.3587646484375
      },
      {
        "patch": "for ( Integer x : arr ) { heap . add ( x , x ) ;",
        "score": 99.63397216796875
      },
      {
        "patch": "for ( Integer x : arr . length ) {",
        "score": 99.35813210227273
      },
      {
        "patch": "for ( Integer x : output ) { output . add ( x ) ;",
        "score": 99.6295166015625
      },
      {
        "patch": "/ * for ( Integer x : arr ) {",
        "score": 99.355712890625
      },
      {
        "patch": "for ( Integer x : arr ) { heap . add ( k ) ;",
        "score": 99.62480163574219
      },
      {
        "patch": "for ( Integer x : arr . value ) {",
        "score": 99.355224609375
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( 0 , start ) ) {",
        "score": 99.62441677517361
      },
      {
        "patch": "for ( Object x : arr . size ( ) ) {",
        "score": 99.35096153846153
      },
      {
        "patch": "for ( Integer k : arr ) { heap . add ( x ) ;",
        "score": 99.62063598632812
      },
      {
        "patch": "for ( Integer arr : arr . iterator ( ) ) {",
        "score": 99.34989107572116
      },
      {
        "patch": "for ( Integer x : arr ) { out . add ( x ) ;",
        "score": 99.60372924804688
      },
      {
        "patch": "for ( Object x : arr ) {",
        "score": 99.33487277560764
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( k ) ) {",
        "score": 99.59444427490234
      },
      {
        "patch": "/ * * for ( Integer x : arr ) {",
        "score": 99.334716796875
      },
      {
        "patch": "for ( Long x : arr ) { heap . add ( x ) ; }",
        "score": 99.58310834099265
      },
      {
        "patch": "for ( Integer x : arr . max ( ) ) {",
        "score": 99.33225661057692
      },
      {
        "patch": "for ( Integer x : arr ) { heap . add ( $STRING$ ) ; }",
        "score": 99.56859633501838
      },
      {
        "patch": "for ( Integer x : arr . key CaMeL Set ( ) ) {",
        "score": 99.32543131510417
      },
      {
        "patch": "for ( Integer x : new Array CaMeL List < Integer > ( ) )",
        "score": 99.56102752685547
      },
      {
        "patch": "for ( Integer x : arr . size ( ) )",
        "score": 99.32330322265625
      },
      {
        "patch": "for ( Integer x : arr ) { heap . add ( x ) ; else",
        "score": 99.53852395450367
      },
      {
        "patch": "for ( Integer x : 0 ) {",
        "score": 99.31303575303819
      },
      {
        "patch": "for ( Iterator < Integer > x : arr ) {",
        "score": 99.30960083007812
      },
      {
        "patch": "if ( ! heap . is CaMeL Empty ( ) ) {",
        "score": 99.53297776442308
      },
      {
        "patch": "for ( Integer [ ] arr : arr . arr ) {",
        "score": 99.29973895733173
      },
      {
        "patch": "for ( Integer x : arr ) heap . add ( x ) ;",
        "score": 99.52010904947916
      },
      {
        "patch": "if ( x != null ) { for ( Integer x : arr )",
        "score": 99.29278971354167
      },
      {
        "patch": "for ( Integer x : arr ) { output . add ( x ) ; else",
        "score": 99.5085808249081
      },
      {
        "patch": "for ( Integer x : arr . iterator ( ) )",
        "score": 99.2926025390625
      },
      {
        "patch": "for ( Integer [ ] x : arr . arr ) {",
        "score": 99.28048940805289
      },
      {
        "patch": "} for ( Integer x : arr ) {",
        "score": 99.2787841796875
      },
      {
        "patch": "for ( Integer < ? > x : arr ) {",
        "score": 99.273681640625
      },
      {
        "patch": "for ( Integer x : arr ) output . add ( x ) ;",
        "score": 99.4968017578125
      },
      {
        "patch": "for ( Integer < Object > x : arr ) {",
        "score": 99.26611328125
      },
      {
        "patch": "for ( Integer [ ] arr : arr . x ) {",
        "score": 99.26073279747597
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( x ) ) {",
        "score": 99.47456359863281
      },
      {
        "patch": "for ( int x : arr . arr ) {",
        "score": 99.24994451349431
      },
      {
        "patch": "for ( Integer : arr . sub CaMeL List ( 0 , k ) ) {",
        "score": 99.47313735064338
      },
      {
        "patch": "for ( Integer [ ] x : arr . x ) {",
        "score": 99.24859149639423
      },
      {
        "patch": "for ( Integer x : arr ) { heap . add ( x ) ; return",
        "score": 99.46379538143383
      },
      {
        "patch": "for ( Integer x : arr . min ) {",
        "score": 99.2484463778409
      },
      {
        "patch": "if ( ! heap . is CaMeL Empty ( ) )",
        "score": 99.42392985026042
      },
      {
        "patch": "for ( Integer x : arr . k ) {",
        "score": 99.2471590909091
      },
      {
        "patch": "for ( Integer x : arr . sub CaMeL List ( k ) )",
        "score": 99.4197998046875
      },
      {
        "patch": "for ( int x : arr . x ) {",
        "score": 99.24640447443181
      },
      {
        "patch": "for ( Integer x : arr . as CaMeL List ( ) ) {",
        "score": 99.4131103515625
      },
      {
        "patch": "for ( int [ ] x : arr ) {",
        "score": 99.23851429332386
      },
      {
        "patch": "if ( heap . is CaMeL Empty ( ) ) {",
        "score": 99.3996073404948
      },
      {
        "patch": "for ( Iterator < String > x : arr ) {",
        "score": 99.2367451985677
      },
      {
        "patch": "for ( Integer x : arr . Linked CaMeL List ( ) ) {",
        "score": 99.389306640625
      },
      {
        "patch": "for ( Integer x : arr . start ) {",
        "score": 99.22454279119319
      },
      {
        "patch": "for ( Integer x : arr )",
        "score": 99.36544799804688
      },
      {
        "patch": "else { for ( Integer x : arr ) {",
        "score": 99.22393243963069
      },
      {
        "patch": "while ( ! heap . is CaMeL Empty ( ) ) {",
        "score": 99.3605205829327
      },
      {
        "patch": "for ( Integer x : list ) {",
        "score": 99.22041829427083
      },
      {
        "patch": "for ( int x : arr . length ) {",
        "score": 99.21819513494319
      },
      {
        "patch": "for ( Integer x : arr . values ( ) )",
        "score": 99.31345621744792
      },
      {
        "patch": "for ( Integer value : arr ) {",
        "score": 99.21323649088542
      },
      {
        "patch": "for ( int [ ] arr : arr ) {",
        "score": 99.20189319957386
      },
      {
        "patch": "for ( Long x : arr ) {",
        "score": 99.29338243272569
      },
      {
        "patch": "for ( Integer name : arr ) {",
        "score": 99.20073784722223
      },
      {
        "patch": "for ( Integer [ ] 0 : arr ) {",
        "score": 99.19940740411931
      },
      {
        "patch": "for ( Integer $NUMBER$ ] arr : arr ) {",
        "score": 99.1980868252841
      },
      {
        "patch": "if ( heap . is CaMeL Empty ( ) )",
        "score": 99.25978781960227
      },
      {
        "patch": "for ( Integer k : arr ) {",
        "score": 99.1934814453125
      },
      {
        "patch": "for ( Integer 1 : arr ) {",
        "score": 99.24159071180556
      },
      {
        "patch": "try { for ( Integer x : arr ) {",
        "score": 99.19319291548295
      },
      {
        "patch": "for ( Integer x : output ) {",
        "score": 99.23130967881944
      },
      {
        "patch": "for ( Integer x : $NUMBER$ ) {",
        "score": 99.19234890407986
      },
      {
        "patch": "for ( Integer x : arr ) { }",
        "score": 99.18202514648438
      },
      {
        "patch": "for ( Integer x : arr . out ) {",
        "score": 99.18100807883523
      },
      {
        "patch": "for ( int k : arr ) {",
        "score": 99.19115532769098
      },
      {
        "patch": "for ( Integer x : arr ) { {",
        "score": 99.17716064453126
      },
      {
        "patch": "for ( Integer x : arr . first ) {",
        "score": 99.17595880681819
      },
      {
        "patch": "for ( Integer x : heap ) {",
        "score": 99.18009440104167
      },
      {
        "patch": "for ( Object arr : arr ) {",
        "score": 99.15664333767361
      },
      {
        "patch": "for ( int x : 0 ) {",
        "score": 99.15300835503473
      },
      {
        "patch": "for ( Integer x ] : arr ) {",
        "score": 99.14981689453126
      },
      {
        "patch": "for ( Integer element : arr ) {",
        "score": 99.13684760199652
      },
      {
        "patch": "for ( String arr : arr ) {",
        "score": 99.11490885416667
      },
      {
        "patch": "for ( Integer heap : arr ) {",
        "score": 99.09505208333333
      },
      {
        "patch": "for ( Integer x : arr . arr )",
        "score": 99.10576171875
      },
      {
        "patch": "for ( Integer : arr ) {",
        "score": 98.97975158691406
      },
      {
        "patch": "for ( int ) {",
        "score": 98.80051676432292
      },
      {
        "patch": "synchronized ( this ) {",
        "score": 98.59498087565105
      },
      {
        "patch": "for ( int }",
        "score": 98.55703735351562
      },
      {
        "patch": "/ * * /",
        "score": 98.32638549804688
      }
    ]
  },
  "KNAPSACK-30-31": {
    "src": "else if ( weight < j ) {",
    "patches": [
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ j ] = 0 ;",
        "score": 99.97273334703948
      },
      {
        "patch": "} else if ( weight < j ) {",
        "score": 99.6442138671875
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ j ] = j ;",
        "score": 99.96811394942434
      },
      {
        "patch": "} else if ( weight < j && weight < j ) {",
        "score": 99.55313546316964
      },
      {
        "patch": "else if ( weight < j ) { memo [ i - 1 ] [ j ] = 0 ;",
        "score": 99.94984654017857
      },
      {
        "patch": "} else if ( weight < j || weight < j ) {",
        "score": 99.54340471540179
      },
      {
        "patch": "else { memo [ i ] [ j ] = memo [ i - 1 ] [ j ] ;",
        "score": 99.92510695684524
      },
      {
        "patch": "} else if ( weight < 0 ) {",
        "score": 99.5327880859375
      },
      {
        "patch": "else if ( weight < j ) { memo [ i - 1 ] [ j ] = j ;",
        "score": 99.91974748883929
      },
      {
        "patch": "} else if ( weight < j || weight < 0 ) {",
        "score": 99.5191650390625
      },
      {
        "patch": "else if ( weight < j ) { memo [ i - 1 ] = j ;",
        "score": 99.90589735243056
      },
      {
        "patch": "} else if ( weight < j && weight == j ) {",
        "score": 99.50067138671875
      },
      {
        "patch": "else { memo [ i - 1 ] = memo [ i - 1 ] [ j ] ;",
        "score": 99.90543212890626
      },
      {
        "patch": "} else if ( weight < j && weight < 0 ) {",
        "score": 99.49912806919643
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ j ] = 1 ;",
        "score": 99.9041683799342
      },
      {
        "patch": "} else if ( weight < j ) { weight += j ;",
        "score": 99.49727957589286
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ j ] = value ;",
        "score": 99.86830540707237
      },
      {
        "patch": "else if ( weight < j ) {",
        "score": 99.4884033203125
      },
      {
        "patch": "else { memo [ i - 1 ] [ j ] = 0 ;",
        "score": 99.86809895833333
      },
      {
        "patch": "} else if ( weight < j || weight == j ) {",
        "score": 99.48320661272321
      },
      {
        "patch": "else { memo [ i ] [ j ] = memo [ i ] [ j ] ;",
        "score": 99.86112895764802
      },
      {
        "patch": "} if ( weight < j ) {",
        "score": 99.48059760199652
      },
      {
        "patch": "else if ( weight < j ) { memo [ i - 1 ] = 0 ;",
        "score": 99.85301378038194
      },
      {
        "patch": "} else if ( weight == j ) {",
        "score": 99.4744873046875
      },
      {
        "patch": "else if ( weight < j ) { memo [ i - 1 ] = 1 ;",
        "score": 99.84189181857639
      },
      {
        "patch": "else if ( weight < j ) { weight ( weight ) ; }",
        "score": 99.47340494791666
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ j ] = - 1 ;",
        "score": 99.8407470703125
      },
      {
        "patch": "} else if ( weight < j ) { break ; } else {",
        "score": 99.46765950520833
      },
      {
        "patch": "else { memo [ i - 1 ] [ j ] = memo [ i - 1 ] ;",
        "score": 99.83865356445312
      },
      {
        "patch": "} else if ( weight < j ) { weight += j ; }",
        "score": 99.4656005859375
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ j ] = j ; }",
        "score": 99.83326416015625
      },
      {
        "patch": "else if ( weight < j ) { if ( weight < j )",
        "score": 99.46551920572917
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ j ] = 0 ; }",
        "score": 99.82605590820313
      },
      {
        "patch": "} else if ( weight < j ) { weight ( weight ) ;",
        "score": 99.46280110677084
      },
      {
        "patch": "else if ( weight <= j ) { memo [ i ] [ j ] = 0 ;",
        "score": 99.8250668174342
      },
      {
        "patch": "else if ( weight < j ) { weight += j ; } else",
        "score": 99.46110026041667
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ j ] = $NUMBER$ ;",
        "score": 99.82122481496711
      },
      {
        "patch": "else if ( weight < j ) { weight += j ; }",
        "score": 99.44936697823661
      },
      {
        "patch": "else if ( weight <= j ) { memo [ i ] [ j ] = j ;",
        "score": 99.81618138363487
      },
      {
        "patch": "else if ( weight < j ) { weight += j ; } }",
        "score": 99.4490234375
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ j ] = j ] ;",
        "score": 99.81475830078125
      },
      {
        "patch": "} else if ( weight < j ) { weight += j ) ;",
        "score": 99.44724934895834
      },
      {
        "patch": "else if ( weight >= j ) { memo [ i ] [ j ] = 0 ;",
        "score": 99.81343801398026
      },
      {
        "patch": "} else if ( weight < j ) { break ; } else",
        "score": 99.4451904296875
      },
      {
        "patch": "else { memo [ i - 1 ] [ j ] = j ;",
        "score": 99.8071044921875
      },
      {
        "patch": "} else if ( weight < j ) { weight += j ) {",
        "score": 99.44127604166667
      },
      {
        "patch": "else if ( weight == j ) { memo [ i ] [ j ] = 0 ;",
        "score": 99.80475174753289
      },
      {
        "patch": "else if ( weight < 0 ) { if ( weight < j )",
        "score": 99.43387044270834
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ i ] = 0 ;",
        "score": 99.804443359375
      },
      {
        "patch": "} else if ( weight < j ) { weight = j ) ;",
        "score": 99.43379720052083
      },
      {
        "patch": "else { memo [ i - 1 ] = memo [ i ] [ j ] ;",
        "score": 99.80023871527777
      },
      {
        "patch": "} else if ( j < j ) {",
        "score": 99.43157958984375
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ i ] = j ;",
        "score": 99.79740825452302
      },
      {
        "patch": "else if ( weight < 0 ) {",
        "score": 99.42055935329861
      },
      {
        "patch": "else if ( weight >= j ) { memo [ i ] [ j ] = j ;",
        "score": 99.79563502261513
      },
      {
        "patch": "} else if ( weight < j ) { {",
        "score": 99.40790349786931
      },
      {
        "patch": "else if ( weight < j ) { memo [ i - 1 ] = value ;",
        "score": 99.79332817925348
      },
      {
        "patch": "} else if ( weight < j ) { break ; } }",
        "score": 99.40371268136161
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ j ] =",
        "score": 99.79217170266544
      },
      {
        "patch": "} else if ( weight < j ) { weight += j {",
        "score": 99.40202985491071
      },
      {
        "patch": "else { memo [ i - 1 ] [ j ] = memo [ i - 1 ] [",
        "score": 99.79153442382812
      },
      {
        "patch": "} else if ( weight < j ) { weight = 0 ;",
        "score": 99.40080915178571
      },
      {
        "patch": "else { memo [ i - 1 ] [ j ] = 1 ;",
        "score": 99.79117024739584
      },
      {
        "patch": "} else if ( weight != j ) {",
        "score": 99.38580932617188
      },
      {
        "patch": "else { memo [ i - 1 ] [ j ] = 0 ; }",
        "score": 99.78810119628906
      },
      {
        "patch": "} else if ( weight < j ) { continue ; } else",
        "score": 99.38364083426339
      },
      {
        "patch": "else if ( weight == j ) { memo [ i ] [ j ] = j ;",
        "score": 99.78372353001645
      },
      {
        "patch": "} else if ( weight < j ) { j ++ ; }",
        "score": 99.37720598493304
      },
      {
        "patch": "else { memo [ i - 1 ] [ j ] = value ;",
        "score": 99.7790283203125
      },
      {
        "patch": "} else if ( weight < j )",
        "score": 99.37424723307292
      },
      {
        "patch": "else if ( weight < j ) { memo [ i - 1 ] [ j ] =",
        "score": 99.77249948601974
      },
      {
        "patch": "} else if ( weight < j ) { weight -- ; }",
        "score": 99.36825125558036
      },
      {
        "patch": "else if ( weight < j ) { memo [ i - 1 ] = j ; }",
        "score": 99.75947651110198
      },
      {
        "patch": "} else if ( weight < j ) { return j ; }",
        "score": 99.366943359375
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ j ] = 1 ; }",
        "score": 99.752978515625
      },
      {
        "patch": "else if ( weight < j ) { weight ( weight ) ;",
        "score": 99.36653355189732
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ j ] = value ; }",
        "score": 99.73717041015625
      },
      {
        "patch": "} else if ( weight < j ) { weight += 0 ;",
        "score": 99.36521693638393
      },
      {
        "patch": "else { memo [ i - 1 ] [ j ] = j ; }",
        "score": 99.73285675048828
      },
      {
        "patch": "} else if ( weight == j ) { weight += j ;",
        "score": 99.36386544363839
      },
      {
        "patch": "else { memo [ i - 1 ] [ j ] = - 1 ;",
        "score": 99.71683502197266
      },
      {
        "patch": "else if ( weight < 0 ) { weight += j ; }",
        "score": 99.35587855747768
      },
      {
        "patch": "else { memo [ i - 1 ] [ j ] = 1 ; }",
        "score": 99.71216583251953
      },
      {
        "patch": "} else if ( weight < j ) { weight = j ;",
        "score": 99.35552978515625
      },
      {
        "patch": "else if ( weight < j ) { memo [ i - 1 ] [",
        "score": 99.71007537841797
      },
      {
        "patch": "} else if ( weight < j ) { weight += weight ;",
        "score": 99.35022844587054
      },
      {
        "patch": "else { memo [ i ] [ j ] = memo [ i - 1 ] [",
        "score": 99.70464409722223
      },
      {
        "patch": "} else if ( weight < 0 ) { weight += j ;",
        "score": 99.34711565290179
      },
      {
        "patch": "else { memo [ i ] [ j ] = 0 ; }",
        "score": 99.70028250558036
      },
      {
        "patch": "else if ( weight < j ) { weight += j ) ;",
        "score": 99.34511021205357
      },
      {
        "patch": "else if ( weight < j ) { memo [ i - 1 ] = 0 ; }",
        "score": 99.69926372327302
      },
      {
        "patch": "} else { if ( weight < j ) {",
        "score": 99.34438254616477
      },
      {
        "patch": "else { memo [ i - 1 ] [ j ] = $NUMBER$ ;",
        "score": 99.6856689453125
      },
      {
        "patch": "else if ( weight < j ) { break ; } } else",
        "score": 99.34272984095982
      },
      {
        "patch": "else if ( weight < j ) { memo [ i - 1 ] = 1 ; }",
        "score": 99.68454461348684
      },
      {
        "patch": "else if ( weight < j )",
        "score": 99.34048461914062
      },
      {
        "patch": "else { memo [ i - 1 ] = memo [ i - 1 ] [",
        "score": 99.68247357536765
      },
      {
        "patch": "} else if ( weight < j ) { j += j ;",
        "score": 99.33868408203125
      },
      {
        "patch": "else if ( i == 0 || j == 0 ) { memo [ i - 1 ] [",
        "score": 99.6782470703125
      },
      {
        "patch": "} else if ( weight < j ) { else {",
        "score": 99.33727010091145
      },
      {
        "patch": "else { memo [ i ] [ j ] = j ; }",
        "score": 99.67727225167411
      },
      {
        "patch": "} else if ( weight < j ) { weight = j {",
        "score": 99.33698381696429
      },
      {
        "patch": "else if ( weight < j ) { memo [ i - 1 ] =",
        "score": 99.67021942138672
      },
      {
        "patch": "} else if ( weight < 0 ) { break ; } else",
        "score": 99.32878766741071
      },
      {
        "patch": "else if ( i == 0 || j == 0 || j == 0 ) {",
        "score": 99.66120461856617
      },
      {
        "patch": "} else if ( weight < j - 1 ) {",
        "score": 99.3284403483073
      },
      {
        "patch": "else { memo [ i - 1 ] [ j ] = memo [ i ] [",
        "score": 99.65354410807292
      },
      {
        "patch": "} if ( weight < 0 ) {",
        "score": 99.32684326171875
      },
      {
        "patch": "else if ( weight < j || j == 0 ) { memo [ i - 1 ] [",
        "score": 99.65111083984375
      },
      {
        "patch": "} else if ( weight >= j ) {",
        "score": 99.31867065429688
      },
      {
        "patch": "else if ( weight < j || memo < j ) { memo [ i - 1 ] [",
        "score": 99.63896484375
      },
      {
        "patch": "} else if ( weight == 0 ) {",
        "score": 99.31807861328124
      },
      {
        "patch": "else if ( i == 0 || j == 0 ) { memo [ i - 1 ] =",
        "score": 99.63466796875
      },
      {
        "patch": "} else if ( j < 0 ) {",
        "score": 99.3150146484375
      },
      {
        "patch": "else if ( weight < j || weight < j ) { memo [ i - 1 ] [",
        "score": 99.633935546875
      },
      {
        "patch": "} else if ( weight < 1 ) {",
        "score": 99.31372680664063
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [",
        "score": 99.62713623046875
      },
      {
        "patch": "else if ( weight < j ) { weight = 0 ; }",
        "score": 99.31233433314732
      },
      {
        "patch": "else if ( weight <= j ) { memo [ i - 1 ] [ j ] =",
        "score": 99.62566174958882
      },
      {
        "patch": "} else if ( weight < j ) { else",
        "score": 99.3118563565341
      },
      {
        "patch": "else if ( weight < j || weight == j ) { memo [ i - 1 ] [",
        "score": 99.62423706054688
      },
      {
        "patch": "else if ( weight < 0 ) { weight = 0 ; }",
        "score": 99.30766950334821
      },
      {
        "patch": "else { memo [ i - 1 ] = Math . max ( memo [ i - 1 ]",
        "score": 99.6229248046875
      },
      {
        "patch": "} else if ( weight < j ) { weight += weight {",
        "score": 99.30531529017857
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ j ] = memo [",
        "score": 99.6221923828125
      },
      {
        "patch": "else { if ( weight < j ) {",
        "score": 99.3005859375
      },
      {
        "patch": "else if ( weight <= j ) { memo [ i ] [ j ] =",
        "score": 99.62209185431985
      },
      {
        "patch": "else if ( weight < j ) { {",
        "score": 99.3001953125
      },
      {
        "patch": "else if ( i - 1 >= 0 || j == 0 ) {",
        "score": 99.6193359375
      },
      {
        "patch": "else if ( weight < j ) { weight += weight ) ;",
        "score": 99.29781668526786
      },
      {
        "patch": "else if ( weight >= j ) { memo [ i - 1 ] [ j ] =",
        "score": 99.61739951685855
      },
      {
        "patch": "else if ( weight < 0 ) { weight ( weight ) ;",
        "score": 99.29680524553571
      },
      {
        "patch": "else if ( i == 0 || j == 0 ) { memo [ i ] [",
        "score": 99.61254204644098
      },
      {
        "patch": "} else if ( weight < j < 1 ) {",
        "score": 99.28968302408855
      },
      {
        "patch": "else if ( weight >= j ) { memo [ i ] [ j ] =",
        "score": 99.61048081341912
      },
      {
        "patch": "} else if ( weight < 0 ) { {",
        "score": 99.27850896661931
      },
      {
        "patch": "for ( int j = 0 ; j <= capacity ; j ++ ) {",
        "score": 99.60962677001953
      },
      {
        "patch": "} else if ( weight < j < j ) {",
        "score": 99.27760823567708
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ i ] =",
        "score": 99.5965576171875
      },
      {
        "patch": "} else if ( weight > j ) {",
        "score": 99.27725219726562
      },
      {
        "patch": "} if ( weight == j ) {",
        "score": 99.27375623914931
      },
      {
        "patch": "else if ( weight == j ) { memo [ i ] [ j ] =",
        "score": 99.59214872472427
      },
      {
        "patch": "} else if ( weight != 0 ) {",
        "score": 99.27340087890624
      },
      {
        "patch": "} else if ( i == 0 || j == 0 ) {",
        "score": 99.58808244977679
      },
      {
        "patch": "} else if ( j == j ) {",
        "score": 99.26177978515625
      },
      {
        "patch": "else { memo [ i ] [ j ] = memo [ i ] [",
        "score": 99.57947540283203
      },
      {
        "patch": "else if ( j < j ) {",
        "score": 99.25532362196181
      },
      {
        "patch": "else if ( weight > j ) { memo [ i ] [ j ] =",
        "score": 99.57219381893383
      },
      {
        "patch": "} } if ( weight < j ) {",
        "score": 99.253369140625
      },
      {
        "patch": "else { memo [ i ] [ j ] = 0 ;",
        "score": 99.56388033353366
      },
      {
        "patch": "} else if ( weight < - 1 ) {",
        "score": 99.24946732954545
      },
      {
        "patch": "else if ( i == 0 || j == 0 ) {",
        "score": 99.5584716796875
      },
      {
        "patch": "} else if ( weight <= j ) {",
        "score": 99.24554443359375
      },
      {
        "patch": "else if ( weight < j ) { memo [ i ] [ j ]",
        "score": 99.54852294921875
      },
      {
        "patch": "} else if ( weight == j ) { {",
        "score": 99.24041193181819
      },
      {
        "patch": "else if ( weight <= j ) { memo [ i - 1 ] [",
        "score": 99.5391845703125
      },
      {
        "patch": "if ( weight < j ) {",
        "score": 99.23738861083984
      },
      {
        "patch": "else { memo [ i ] [ j ] = j ;",
        "score": 99.53501539963942
      },
      {
        "patch": "else if ( weight == j ) {",
        "score": 99.22803412543402
      },
      {
        "patch": "else if ( weight < j || j == 0 ) {",
        "score": 99.51700533353366
      },
      {
        "patch": "else if ( weight < j ) { else",
        "score": 99.22630004882812
      },
      {
        "patch": "else { memo [ i ] [ j ] = 1 ;",
        "score": 99.49099496694711
      },
      {
        "patch": "} else if ( i < j ) {",
        "score": 99.22409057617188
      },
      {
        "patch": "else { memo [ i - 1 ] = j ;",
        "score": 99.4882100423177
      },
      {
        "patch": "} else if ( j >= j ) {",
        "score": 99.22025146484376
      },
      {
        "patch": "else if ( weight < j || memo < j ) {",
        "score": 99.47352952223558
      },
      {
        "patch": "else if ( weight < j - 1 ) {",
        "score": 99.21998180042614
      },
      {
        "patch": "else { memo [ i - 1 ] = 0 ;",
        "score": 99.47103881835938
      },
      {
        "patch": "} else if ( weight < 0 )",
        "score": 99.2176513671875
      },
      {
        "patch": "else { memo [ i - 1 ] = 1 ;",
        "score": 99.46968587239583
      },
      {
        "patch": "else if ( weight < 0 )",
        "score": 99.20687866210938
      },
      {
        "patch": "else if ( weight < j || weight < j ) {",
        "score": 99.46168870192308
      },
      {
        "patch": "} else if ( weight < $NUMBER$ ) {",
        "score": 99.20673828125
      },
      {
        "patch": "else if ( weight < j || weight == j ) {",
        "score": 99.4460918719952
      },
      {
        "patch": "} if ( j < j ) {",
        "score": 99.19068739149306
      },
      {
        "patch": "else if ( j == 0 || j == 0 ) {",
        "score": 99.43749060997597
      },
      {
        "patch": "} else if ( weight == j )",
        "score": 99.18404134114583
      },
      {
        "patch": "else { memo [ i - 1 ] = value ;",
        "score": 99.38455200195312
      },
      {
        "patch": "else if ( j < 0 ) {",
        "score": 99.17450629340277
      },
      {
        "patch": "else if ( weight <= j ) {",
        "score": 99.28836398654514
      },
      {
        "patch": "} if ( weight != j ) {",
        "score": 99.16590033637152
      },
      {
        "patch": "else { memo [ i - 1 ] [",
        "score": 99.26992797851562
      },
      {
        "patch": "} else if ( j < j )",
        "score": 99.16195339626736
      },
      {
        "patch": "else if ( weight >= j ) {",
        "score": 99.26127115885417
      },
      {
        "patch": "} if ( weight < j )",
        "score": 99.15992736816406
      },
      {
        "patch": "if ( weight < 0 ) {",
        "score": 99.11514282226562
      },
      {
        "patch": "else if ( j < j )",
        "score": 99.08940124511719
      },
      {
        "patch": "else if ( weight > j ) {",
        "score": 99.19514973958333
      },
      {
        "patch": "} else {",
        "score": 98.17926025390625
      },
      {
        "patch": "else {",
        "score": 97.44039916992188
      },
      {
        "patch": "} else",
        "score": 97.4178975423177
      },
      {
        "patch": "else",
        "score": 96.37117004394531
      },
      {
        "patch": "}",
        "score": 95.30900573730469
      }
    ]
  },
  "KTH-25-26": {
    "src": "return kth ( above , k ) ;",
    "patches": [
      {
        "patch": "return kth ( above , k ) ; } else { return pivot ;",
        "score": 99.87747395833334
      },
      {
        "patch": "return kth ( above , k ) ;",
        "score": 99.77408854166667
      },
      {
        "patch": "return kth ( above , k ) ; }",
        "score": 99.64778442382813
      },
      {
        "patch": "return pivot ; } else { return kth ( above , k ) ;",
        "score": 99.71637369791667
      },
      {
        "patch": "return kth ( kth ( above , k ) ) ;",
        "score": 99.529296875
      },
      {
        "patch": "return kth ( below , k ) ; } else { return pivot ;",
        "score": 99.6962890625
      },
      {
        "patch": "return kth ( above , 0 ) ;",
        "score": 99.46731228298611
      },
      {
        "patch": "return below ; } else { return kth ( above , k ) ;",
        "score": 99.63194986979167
      },
      {
        "patch": "return kth ( above , k , k ) ;",
        "score": 99.4500399502841
      },
      {
        "patch": "return arr . size ( ) - above . size ( ) ;",
        "score": 99.62266322544643
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
        "score": 99.4114990234375
      },
      {
        "patch": "return kth ( above , k ) ; } else { return below ;",
        "score": 99.6158203125
      },
      {
        "patch": "return kth ( kth ( above , 0 ) ) ;",
        "score": 99.40206909179688
      },
      {
        "patch": "return above ; } else { return kth ( above , k ) ;",
        "score": 99.61477864583334
      },
      {
        "patch": "{ return kth ( above , k ) ; }",
        "score": 99.3840664950284
      },
      {
        "patch": "return kth ( above , k ) ; } else return pivot ;",
        "score": 99.61382184709821
      },
      {
        "patch": "return kth kth ( above , k ) ;",
        "score": 99.37669067382812
      },
      {
        "patch": "return kth ( below , k ) ;",
        "score": 99.55630154079861
      },
      {
        "patch": "return kth ( above , 0 , k ) ;",
        "score": 99.37639825994319
      },
      {
        "patch": "return new Integer ( k ) ; } else { return pivot ;",
        "score": 99.53647286551339
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( $STRING$ + k ) ;",
        "score": 99.37227376302083
      },
      {
        "patch": "return below . size ( ) - above . size ( ) ;",
        "score": 99.51776994977679
      },
      {
        "patch": "return kth ( above , 1 ) ;",
        "score": 99.36905246310764
      },
      {
        "patch": "return kth return kth ( above , k ) ;",
        "score": 99.36500133167614
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( arr ) ;",
        "score": 99.50418795072116
      },
      {
        "patch": "return kth ( above ) ;",
        "score": 99.35001918247768
      },
      {
        "patch": "return kth ( above , k ) ; } else {",
        "score": 99.4843241373698
      },
      {
        "patch": "return kth ( above . size ( ) ) ;",
        "score": 99.34686834161931
      },
      {
        "patch": "return num _ lessoreq ; } else { return pivot ;",
        "score": 99.47992815290179
      },
      {
        "patch": "return kth ( above , $NUMBER$ ) ;",
        "score": 99.338134765625
      },
      {
        "patch": "{ return kth ( above , k ) ;",
        "score": 99.31751098632813
      },
      {
        "patch": "int num _ lessoreq = arr . size ( ) ;",
        "score": 99.43067278180804
      },
      {
        "patch": "return kth ( above , 0 ) ; }",
        "score": 99.31739501953125
      },
      {
        "patch": "return above . size ( ) - above . size ( ) ;",
        "score": 99.42743791852679
      },
      {
        "patch": "return kth ( above , k , kth ) ;",
        "score": 99.31365411931819
      },
      {
        "patch": "return kth ( above , k , num _ less ) ;",
        "score": 99.42635404146634
      },
      {
        "patch": "return ( Integer ) kth ( above , k ) ;",
        "score": 99.3103535970052
      },
      {
        "patch": "return kth ( above , k , k ) ; } else {",
        "score": 99.42367989676339
      },
      {
        "patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
        "score": 99.3096211751302
      },
      {
        "patch": "return arr . size ( ) ;",
        "score": 99.39198303222656
      },
      {
        "patch": "return kth ( above , k , above ) ;",
        "score": 99.30947043678977
      },
      {
        "patch": "return arr . size ( ) ; } else { return pivot ;",
        "score": 99.38997977120536
      },
      {
        "patch": "return kth ( kth ( above ) , k ) ;",
        "score": 99.30222574869792
      },
      {
        "patch": "return arr . get ( 0 ) ;",
        "score": 99.38970269097223
      },
      {
        "patch": "return kth ( above , k ) ; ;",
        "score": 99.27765502929688
      },
      {
        "patch": "return pivot ; } else { return pivot ; }",
        "score": 99.38428844105114
      },
      {
        "patch": "return kth ( above , k ) ; } else",
        "score": 99.27668900923295
      },
      {
        "patch": "return kth ( above , k ) ; break ; } else {",
        "score": 99.37997000558036
      },
      {
        "patch": "return kth ( above , k ) ; break ;",
        "score": 99.2761563387784
      },
      {
        "patch": "return kth ( above , k , $NUMBER$ ) ;",
        "score": 99.27593439275569
      },
      {
        "patch": "return kth ( new Integer ( k ) , k ) ;",
        "score": 99.36327185997597
      },
      {
        "patch": "return kth ( above , size , k ) ;",
        "score": 99.27020818536931
      },
      {
        "patch": "return kth ( above , below , k ) ;",
        "score": 99.3594970703125
      },
      {
        "patch": "return kth ( above , 1 , k ) ;",
        "score": 99.26899857954545
      },
      {
        "patch": "return pivot ( above , k ) ;",
        "score": 99.35188123914931
      },
      {
        "patch": "return kth ( k , k ) ;",
        "score": 99.26248508029514
      },
      {
        "patch": "return kth ( above , above , k ) ;",
        "score": 99.35164018110795
      },
      {
        "patch": "return kth ( kth ( above ) ) ;",
        "score": 99.26060180664062
      },
      {
        "patch": "return ( Integer ) above . size ( ) ;",
        "score": 99.33964399857955
      },
      {
        "patch": "return return kth ( above , k ) ;",
        "score": 99.25960083007813
      },
      {
        "patch": "return pivot ; } else { return pivot ;",
        "score": 99.33937377929688
      },
      {
        "patch": "return kth ( above , - 1 ) ;",
        "score": 99.250048828125
      },
      {
        "patch": "return num _ less ; } else { return pivot ; }",
        "score": 99.33434119591347
      },
      {
        "patch": "return kth ( above , k ) ; * /",
        "score": 99.24822443181819
      },
      {
        "patch": "return kth ( above , 1 ) ; }",
        "score": 99.2453857421875
      },
      {
        "patch": "return kth ( above , k ) ; } ;",
        "score": 99.24301979758523
      },
      {
        "patch": "return ( int ) kth ( above , k ) ;",
        "score": 99.3208516438802
      },
      {
        "patch": "return kth ( above , start , k ) ;",
        "score": 99.23908025568181
      },
      {
        "patch": "return num _ less ; } else { return pivot ;",
        "score": 99.31675211588542
      },
      {
        "patch": "return kth ( above , first , k ) ;",
        "score": 99.23696067116477
      },
      {
        "patch": "return kth ( $STRING$ , k ) ;",
        "score": 99.31197102864583
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( ) ;",
        "score": 99.23674180772569
      },
      {
        "patch": "return kth ( arr , k ) ;",
        "score": 99.31155734592014
      },
      {
        "patch": "return pivot ; } else { return pivot ; } }",
        "score": 99.29720052083333
      },
      {
        "patch": "return kth ( above , $NUMBER$ ) ; }",
        "score": 99.23259887695312
      },
      {
        "patch": "return kth ( above , k ) ; } }",
        "score": 99.2253750887784
      },
      {
        "patch": "return new Integer ( num _ lessoreq ) ;",
        "score": 99.2938944498698
      },
      {
        "patch": "return kth ( kth ( k ) ) ;",
        "score": 99.21832885742188
      },
      {
        "patch": "return kth ( above , k , pivot ) ;",
        "score": 99.29212535511364
      },
      {
        "patch": "return kth ( above , $NUMBER$ , k ) ;",
        "score": 99.21748490767045
      },
      {
        "patch": "return kth ( 0 , k ) ;",
        "score": 99.28956434461806
      },
      {
        "patch": "return kth ( above , k , 1 ) ;",
        "score": 99.21626420454545
      },
      {
        "patch": "return ( Integer ) below . size ( ) ;",
        "score": 99.28765314275569
      },
      {
        "patch": "return kth kth ( above , k ) ; }",
        "score": 99.21000532670455
      },
      {
        "patch": "return pivot ( below , k ) ;",
        "score": 99.27924940321181
      },
      {
        "patch": "return kth ( $NUMBER$ , k ) ;",
        "score": 99.20534939236111
      },
      {
        "patch": "return arr . get ( k ) ;",
        "score": 99.27538384331598
      },
      {
        "patch": "result = kth ( above , k ) ;",
        "score": 99.20241088867188
      },
      {
        "patch": "return new Integer ( k ) ;",
        "score": 99.26956176757812
      },
      {
        "patch": "return kth ( k , k ) ; }",
        "score": 99.20228881835938
      },
      {
        "patch": "return kth ( above , k , below ) ;",
        "score": 99.26922052556819
      },
      {
        "patch": "return below . size ( ) ;",
        "score": 99.25814819335938
      },
      {
        "patch": "return kth ( above , k , 0 ) ;",
        "score": 99.19102894176136
      },
      {
        "patch": "return num _ lessoreq ; } else {",
        "score": 99.25440562855114
      },
      {
        "patch": "return kth ( above , above ) ;",
        "score": 99.18076578776042
      },
      {
        "patch": "return kth ( 1 , k ) ;",
        "score": 99.24648708767361
      },
      {
        "patch": "return kth ( above , k + 1 ) ;",
        "score": 99.1793212890625
      },
      {
        "patch": "return kth ( above , k , arr ) ;",
        "score": 99.2447842684659
      },
      {
        "patch": "return kth ( kth , k ) ;",
        "score": 99.17499457465277
      },
      {
        "patch": "return kth ( below , k ) ; }",
        "score": 99.241943359375
      },
      {
        "patch": "return kth ( above , k ) + k ;",
        "score": 99.17332874644886
      },
      {
        "patch": "return kth ( below , k , k ) ;",
        "score": 99.24090021306819
      },
      {
        "patch": "result = kth ( above , k ) ; }",
        "score": 99.1673251065341
      },
      {
        "patch": "return kth ( above , 0 , 0 ) ;",
        "score": 99.16637073863636
      },
      {
        "patch": "return kth ( above , size ) ;",
        "score": 99.16311306423611
      },
      {
        "patch": "return kth ( above , k + k ) ;",
        "score": 99.23288796164773
      },
      {
        "patch": "return kth ( above , start ) ;",
        "score": 99.15367296006944
      },
      {
        "patch": "return num _ lessoreq ; }",
        "score": 99.22347005208333
      },
      {
        "patch": "return kth ( above , - k ) ;",
        "score": 99.15241088867188
      },
      {
        "patch": "return kth ( above , 0 , above ) ;",
        "score": 99.1462069424716
      },
      {
        "patch": "return below ( above , k ) ;",
        "score": 99.20737033420139
      },
      {
        "patch": "return return kth ( above , k ) ; }",
        "score": 99.14277787642045
      },
      {
        "patch": "return size ( below , k ) ;",
        "score": 99.19538031684027
      },
      {
        "patch": "kth ( above , k ) ; break ;",
        "score": 99.14216918945313
      },
      {
        "patch": "return size ( above , k ) ;",
        "score": 99.19187418619792
      },
      {
        "patch": "return above . to CaMeL Array ( ) ;",
        "score": 99.13876953125
      },
      {
        "patch": "break kth ( above , k ) ;",
        "score": 99.13608127170139
      },
      {
        "patch": "return below ; } else { return pivot ;",
        "score": 99.181396484375
      },
      {
        "patch": "return kth ( kth , k ) ; }",
        "score": 99.13536987304687
      },
      {
        "patch": "kth ( above , k ) ;",
        "score": 99.13501739501953
      },
      {
        "patch": "return above ; } else { return pivot ;",
        "score": 99.1798828125
      },
      {
        "patch": "return kth ( above ( k ) ) ;",
        "score": 99.13295288085938
      },
      {
        "patch": "return arr . get ( 1 ) ;",
        "score": 99.179443359375
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( k ) ;",
        "score": 99.13053588867187
      },
      {
        "patch": "return k ; } else { return pivot ;",
        "score": 99.174755859375
      },
      {
        "patch": "return kth ( true , k ) ;",
        "score": 99.12944200303819
      },
      {
        "patch": "if ( k >= num _ less ) {",
        "score": 99.16797485351563
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( ) ; }",
        "score": 99.12508544921874
      },
      {
        "patch": "return kth ( above , first ) ;",
        "score": 99.12417263454861
      },
      {
        "patch": "return above . size ( ) ;",
        "score": 99.119873046875
      },
      {
        "patch": "return arr . size ( ) ; }",
        "score": 99.15193684895833
      },
      {
        "patch": "return kth ( above , k ) ; else",
        "score": 99.1149169921875
      },
      {
        "patch": "return kth ( $NUMBER$ , k ) ; }",
        "score": 99.11328125
      },
      {
        "patch": "return kth ( above + k ) ;",
        "score": 99.13957383897569
      },
      {
        "patch": "break kth ( above , k ) ; }",
        "score": 99.11001586914062
      },
      {
        "patch": "return size ( arr , k ) ;",
        "score": 99.12468804253473
      },
      {
        "patch": "return above ( above , k ) ;",
        "score": 99.10513644748264
      },
      {
        "patch": "return kth ( above , below ) ;",
        "score": 99.12178548177083
      },
      {
        "patch": "return kth ( above , false ) ;",
        "score": 99.10292561848958
      },
      {
        "patch": "return kth ( k ) ;",
        "score": 99.10280936104911
      },
      {
        "patch": "return kth ( false , k ) ;",
        "score": 99.08917914496527
      },
      {
        "patch": "return num _ lessoreq ;",
        "score": 99.06473541259766
      },
      {
        "patch": "return kth ( above , out ) ;",
        "score": 99.08051215277777
      },
      {
        "patch": "return kth ( above , length ) ;",
        "score": 99.06560601128473
      },
      {
        "patch": "return kth ( out , k ) ;",
        "score": 99.06064860026042
      },
      {
        "patch": "return ( Integer ) above ;",
        "score": 98.96098109654018
      },
      {
        "patch": "return ( int ) k ;",
        "score": 98.92994907924107
      },
      {
        "patch": "return above . next ( ) ;",
        "score": 99.05430603027344
      },
      {
        "patch": "return kth ( $STRING$ ) ;",
        "score": 98.91952078683036
      },
      {
        "patch": "return kth ( above , true ) ;",
        "score": 99.05293782552083
      },
      {
        "patch": "return num _ less ; }",
        "score": 98.90640694754464
      },
      {
        "patch": "return kth ( above , value ) ;",
        "score": 99.05042860243056
      },
      {
        "patch": "return pivot ( k ) ;",
        "score": 98.89712960379464
      },
      {
        "patch": "return kth ( above , max ) ;",
        "score": 99.04031032986111
      },
      {
        "patch": "return pivot ; } else {",
        "score": 98.89573451450893
      },
      {
        "patch": "kth ( above , k ) ; }",
        "score": 99.033203125
      },
      {
        "patch": "return pivot ; }",
        "score": 98.763916015625
      },
      {
        "patch": "return kth ( above ) ; }",
        "score": 99.01189422607422
      },
      {
        "patch": "return num _ less ;",
        "score": 98.68147786458333
      },
      {
        "patch": "return kth ( kth ) ;",
        "score": 98.99598039899554
      },
      {
        "patch": "return kth ; }",
        "score": 98.5199462890625
      },
      {
        "patch": "return kth ( k ) ; }",
        "score": 98.94855499267578
      },
      {
        "patch": "return below ; }",
        "score": 98.519775390625
      },
      {
        "patch": "return kth ( $NUMBER$ ) ;",
        "score": 98.86220877511161
      },
      {
        "patch": "return k ; }",
        "score": 98.45888671875
      },
      {
        "patch": "return kth ( ) ;",
        "score": 98.71071370442708
      },
      {
        "patch": "return arr ; }",
        "score": 98.4574951171875
      },
      {
        "patch": "return kth above ;",
        "score": 98.6124267578125
      },
      {
        "patch": "return above ; }",
        "score": 98.440869140625
      },
      {
        "patch": "return - 1 ;",
        "score": 98.41104125976562
      },
      {
        "patch": "return kth ) ;",
        "score": 98.398486328125
      },
      {
        "patch": "return pivot ;",
        "score": 98.35414123535156
      },
      {
        "patch": "return above ) ;",
        "score": 98.36817626953125
      },
      {
        "patch": "return below ;",
        "score": 98.18115234375
      },
      {
        "patch": "return above ;",
        "score": 98.27520751953125
      },
      {
        "patch": "return kth ;",
        "score": 97.97645568847656
      },
      {
        "patch": "return k ;",
        "score": 97.96979522705078
      },
      {
        "patch": "break ;",
        "score": 97.20726521809895
      }
    ]
  },
  "LCS_LENGTH-35-37": {
    "src": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
    "patches": [
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ;",
        "score": 99.95598810369319
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.93382161458334
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( i , insert _ value ) ;",
        "score": 99.94045188210227
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) + 1 ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.92893932711694
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ;",
        "score": 99.93783569335938
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.91918501420454
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , internal _ map ) ;",
        "score": 99.9363680752841
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.91849772135417
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.93341884328358
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( i ) + 1 ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.9176537298387
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.93062650240384
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) ;",
        "score": 99.91681105090726
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( i , internal _ map ) ;",
        "score": 99.92758641098484
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.9086205267137
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( i , insert _ value ) ;",
        "score": 99.92225646972656
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j - 1 ) . get ( j ) + 1 ;",
        "score": 99.90858114919355
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.92192007211538
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.90477728074596
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ;",
        "score": 99.92167217548077
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) . get ( j ) + 1 ;",
        "score": 99.90450032552083
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer >> internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ;",
        "score": 99.91611180160984
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i ) + 1 ;",
        "score": 99.90428899949596
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( j , internal _ map ) ;",
        "score": 99.91498565673828
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) + 1 ;",
        "score": 99.90083952872983
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ;",
        "score": 99.91323390151516
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ; int insert _ value = dp . get ( i - 1 ) . get ( j - 1 ) + 1 ;",
        "score": 99.89939831149194
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , 1 ) ;",
        "score": 99.91102600097656
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) ;",
        "score": 99.89892578125
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.90941569010417
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j + 1 ) . get ( j ) + 1 ;",
        "score": 99.89457062752017
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ;",
        "score": 99.9083023071289
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.89277159492924
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; dp . put ( i , internal _ map ) ; dp . put ( i , internal _ map ) ;",
        "score": 99.9071974113806
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) ;",
        "score": 99.89115397135417
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 1 ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.90668402777777
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i ) ;",
        "score": 99.88749186197917
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( i , internal _ map ) ;",
        "score": 99.90621185302734
      },
      {
        "patch": "if ( dp . contains ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.88671875
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 1 ) ; dp . put ( i , internal _ map ) ; dp . put ( i , internal _ map ) ;",
        "score": 99.90472506009615
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) + 1 ; insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.88667872694673
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ;",
        "score": 99.90466855177239
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.88422037760417
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer >> internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( i , insert _ value ) ;",
        "score": 99.90096028645833
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ; int insert _ value = dp . get ( i - 1 ) . get ( i ) + 1 ;",
        "score": 99.88323567708333
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; dp . put ( i , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.90034412202381
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i ) + 1 ;",
        "score": 99.88301595052083
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.89952674278847
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + $NUMBER$ ;",
        "score": 99.88026529947916
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; internal _ map . put ( j , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.8995015158582
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 0 ;",
        "score": 99.8800048828125
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) ; internal _ map . put ( j , insert _ value ) ;",
        "score": 99.89877319335938
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i ) + 1 ;",
        "score": 99.87828776041667
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( i , insert _ value ) ;",
        "score": 99.8983857125947
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) + 1 ;",
        "score": 99.87722981770834
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , internal _ map ) ; dp . put ( i , internal _ map ) ; dp . put ( i , internal _ map ) ;",
        "score": 99.89738077192165
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) + 1 ; int insert _ value = dp . get ( i - 1 ) . get ( j ) ;",
        "score": 99.87571614583334
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( i , 1 ) ;",
        "score": 99.89726257324219
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ; int insert _ value = dp . get ( i - 1 ) . get ( j - 1 ) ;",
        "score": 99.87569986979166
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , insert _ value ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.89693509615384
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j - 1 ) . get ( j ) ;",
        "score": 99.87540690104167
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) ;",
        "score": 99.8966796875
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( i ) + 1 ; insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.87516009221312
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ;",
        "score": 99.8959086403918
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) + 1 ;",
        "score": 99.87455078125
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.89588341346153
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) ;",
        "score": 99.87389119466145
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ;",
        "score": 99.89576770413306
      },
      {
        "patch": "Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.873486328125
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer >> internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ;",
        "score": 99.89571380615234
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) ;",
        "score": 99.87266438802084
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ; }",
        "score": 99.89526002798507
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j - 1 ) + 1 ;",
        "score": 99.87169339364036
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ;",
        "score": 99.89491021455224
      },
      {
        "patch": "Map < Integer , Integer > internal _ map = dp . get ( i ) ; if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.86920797413794
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.8942367311508
      },
      {
        "patch": "if ( dp . contains ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) ;",
        "score": 99.86857096354167
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( i , insert _ value ) ;",
        "score": 99.89307403564453
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) ;",
        "score": 99.86612802181604
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) + 1 ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.8646090323465
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer >> internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.8916890158582
      },
      {
        "patch": "if ( dp . contains ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.86248894457547
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , 1 ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.8916248139881
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ;",
        "score": 99.85785122575432
      },
      {
        "patch": "if ( s . char CaMeL At ( j ) == t . char CaMeL At ( j ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.89137564132463
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 + 1 ;",
        "score": 99.85781592653508
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.89086538461538
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j + 1 ) + 1 ;",
        "score": 99.85708778782895
      },
      {
        "patch": "if ( s . char CaMeL At ( j ) == t . char CaMeL At ( j ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ;",
        "score": 99.89078776041667
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + $NUMBER$ ;",
        "score": 99.85657848011364
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; internal _ map . put ( i , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.88959013526119
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.85647295106132
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; } else { Map < Integer , Integer >> internal _ map = dp . get ( i ) ;",
        "score": 99.88939302884616
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) ; insert _ value = dp . get ( i - 1 ) ;",
        "score": 99.85403592469262
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.88889723557692
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.85313265931373
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . add ( insert _ value ) ;",
        "score": 99.88873291015625
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) + 1 ; int insert _ value = dp . get ( i - 1 ) + 1 ;",
        "score": 99.85306160910088
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( j , 1 ) ;",
        "score": 99.88757717993951
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) ;",
        "score": 99.85237096567623
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) && dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.88630676269531
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 0 ;",
        "score": 99.85158913352272
      },
      {
        "patch": "Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.85076349431819
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 0 ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.88486638144842
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) ;",
        "score": 99.84925579202586
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ;",
        "score": 99.88445953824628
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i ) + 1 ;",
        "score": 99.84889439174107
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.88388981894842
      },
      {
        "patch": "Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.84875257959905
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; dp . put ( j , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.88286675347223
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i ) + 1 ;",
        "score": 99.84874471028645
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( i , insert _ value ) ; }",
        "score": 99.88043668376865
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) + 1 ;",
        "score": 99.84552001953125
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , internal _ map ) ; } else { Map < Integer , Integer >> internal _ map = dp . get ( i ) ;",
        "score": 99.88033353365384
      },
      {
        "patch": "Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.84402765012256
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , internal _ map ) ; }",
        "score": 99.87974434468283
      },
      {
        "patch": "if ( internal _ map . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.84399842379386
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; dp . put ( i , internal _ map ) ;",
        "score": 99.87957763671875
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j - 1 ) ;",
        "score": 99.84380326704546
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ;",
        "score": 99.87603449417372
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; long insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.84328835227272
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = new Hash CaMeL Map < Integer , Integer >> ( ) ; for ( int j = 0 ; j < t . length ( ) ; j ++ ) {",
        "score": 99.87568010602679
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( j - 1 ) . get ( j ) + 1 ;",
        "score": 99.841796875
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = new Hash CaMeL Map < Integer , Integer > ( ) ; for ( int j = 0 ; j < t . length ( ) ; j ++ ) {",
        "score": 99.87462506975446
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) + 1 ; int insert _ value = dp . get ( i ) + 1 ;",
        "score": 99.8397372159091
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.87433345734127
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j - 1 ) + 1 ;",
        "score": 99.83893821022727
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) + 1 ;",
        "score": 99.87210286458334
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) + 1 ; int insert _ value = dp . get ( i - 1 ) + 1 ;",
        "score": 99.83888596754808
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 1 ) ; dp . put ( i , internal _ map ) ;",
        "score": 99.87105758101852
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( i ) + 1 ;",
        "score": 99.83881392045454
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ;",
        "score": 99.87012493799604
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) + 1 ; int insert _ value = dp . get ( i - 1 ) ;",
        "score": 99.83841441761363
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , internal _ map ) ;",
        "score": 99.86838751324153
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) ;",
        "score": 99.83827359068627
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , internal _ map ) ; dp . put ( i , internal _ map ) ;",
        "score": 99.86789376395089
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j + 1 ) ;",
        "score": 99.8375
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ;",
        "score": 99.86751039566532
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - $NUMBER$ ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.83709161931819
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) + 1 ;",
        "score": 99.86747101814517
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ;",
        "score": 99.83697809938525
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ;",
        "score": 99.86597067212301
      },
      {
        "patch": "Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.83624152417453
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ; }",
        "score": 99.86519681490384
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( i ) + 1 ; int insert _ value = dp . get ( i - 1 ) + 1 ;",
        "score": 99.83572334155701
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ;",
        "score": 99.86232383578431
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get CaMeL Value ( j ) + 1 ;",
        "score": 99.83542351973684
      },
      {
        "patch": "Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ;",
        "score": 99.8348313934949
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ;",
        "score": 99.85396321614583
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.83417426215277
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) + 1 ; internal _ map . put ( j , insert _ value ) ;",
        "score": 99.85243975105932
      },
      {
        "patch": "if ( dp . contains ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.83335248161765
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( i , insert _ value ) ;",
        "score": 99.85223979334677
      },
      {
        "patch": "if ( ! dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.83313860212054
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , 1 ) ; dp . put ( i , internal _ map ) ;",
        "score": 99.85110134548611
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + - 1 ;",
        "score": 99.83241489955357
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , insert _ value ) ; dp . put ( i , internal _ map ) ;",
        "score": 99.85083879743304
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i ) ;",
        "score": 99.83234772858796
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; internal _ map . put ( j , internal _ map ) ;",
        "score": 99.85001761014344
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) ;",
        "score": 99.8318292025862
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 1 ) ;",
        "score": 99.8471251370614
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) + 1 ; int insert _ value = dp . get ( i ) + 1 ;",
        "score": 99.83059166217673
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 0 ) ; dp . put ( i , internal _ map ) ;",
        "score": 99.84647171585648
      },
      {
        "patch": "if ( i . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.83046875
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; internal _ map . put ( j , internal _ map ) ; dp . put ( i , internal _ map ) ;",
        "score": 99.84579573006465
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; double insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.83036221590909
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; dp . put ( i , internal _ map ) ; dp . put ( i , internal _ map ) ;",
        "score": 99.84564887152777
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( j - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.83033558238637
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , internal _ map ) ;",
        "score": 99.84414785879629
      },
      {
        "patch": "Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i ) + 1 ;",
        "score": 99.83026123046875
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; dp . put ( j , internal _ map ) ;",
        "score": 99.84058489118304
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) - 1 ;",
        "score": 99.83011363636363
      },
      {
        "patch": "if ( s . char CaMeL At ( j ) == t . char CaMeL At ( j ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.83902380601415
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ;",
        "score": 99.82846380739795
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; dp . put ( i , internal _ map ) ;",
        "score": 99.83776403356481
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + $NUMBER$ ;",
        "score": 99.82828161851415
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ; internal _ map . put ( j , internal _ map ) ;",
        "score": 99.8351581280048
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 + $NUMBER$ ;",
        "score": 99.82672012061404
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) ;",
        "score": 99.82603717672414
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer >> internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.83448186910377
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) + 1 + 1 ;",
        "score": 99.82517653245192
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ;",
        "score": 99.83234448702831
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) + 1 ; insert _ value = dp . get ( i - 1 ) + 1 ;",
        "score": 99.82455008370536
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 1 ) ; dp . put ( i , 1 ) ;",
        "score": 99.83025653545673
      },
      {
        "patch": "Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) + 1 ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
        "score": 99.82383219401042
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) + 1 ; int insert _ value = dp . get ( i - 1 ) ;",
        "score": 99.822724609375
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 1 ) ; dp . put ( i , internal _ map ) ;",
        "score": 99.8289043719952
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) + 1 ; int insert _ value = dp . get ( i ) + 1 ;",
        "score": 99.822724609375
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.82494618941327
      },
      {
        "patch": "if ( dp . contains ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) + 1 ;",
        "score": 99.81496175130208
      },
      {
        "patch": "Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) + 1 ;",
        "score": 99.81239827473958
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.81224524456522
      },
      {
        "patch": "if ( dp . contains ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) ;",
        "score": 99.81140667459239
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ;",
        "score": 99.75043487548828
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j - 1 ) . get ( j ) + 1 ;",
        "score": 99.81116739908855
      },
      {
        "patch": "if ( dp . contains CaMeL Key ( i - 1 ) ) {",
        "score": 99.4829833984375
      }
    ]
  },
  "LEVENSHTEIN-17-18": {
    "src": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
    "patches": [
      {
        "patch": "return 1 + Math . min ( levenshtein ( source , target . substring ( 1 ) ) , levenshtein ( source . substring ( 1 ) ) ) ;",
        "score": 99.90426728219697
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.88043767755681
      },
      {
        "patch": "return source . length ( ) ; } else { return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.90367126464844
      },
      {
        "patch": "return levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.80823974609375
      },
      {
        "patch": "return 1 + Math . min ( levenshtein ( source , target . substring ( 1 ) ) , levenshtein ( source . substring ( 1 ) , target ) ) ;",
        "score": 99.87645089285714
      },
      {
        "patch": "return $NUMBER$ + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.74382990056819
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ) ;",
        "score": 99.87073863636364
      },
      {
        "patch": "return 0 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.73957963423295
      },
      {
        "patch": "return source . length ( ) ; } else { return 1 + Math . min ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.86900005918561
      },
      {
        "patch": "return 1 + 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.73248291015625
      },
      {
        "patch": "return source . substring ( 1 ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {",
        "score": 99.86783599853516
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . length ( ) ) ;",
        "score": 99.71040271577381
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) , levenshtein ( source . substring ( 1 ) , target ) ) ;",
        "score": 99.86745954241071
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( $NUMBER$ ) , target . substring ( 1 ) ) ;",
        "score": 99.7060546875
      },
      {
        "patch": "return source . length ( ) ; } else { return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target ) ;",
        "score": 99.86530618106617
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( $NUMBER$ ) ) ;",
        "score": 99.70463423295455
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.86309603987068
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ; }",
        "score": 99.6902386209239
      },
      {
        "patch": "return target . length ( ) ; } else { return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.86062622070312
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 - 1 ) ) ;",
        "score": 99.68656412760417
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) , levenshtein ( source . substring ( 1 ) ) ) ;",
        "score": 99.85785097064394
      },
      {
        "patch": "return 1 + levenshtein ( source , target . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.68639119466145
      },
      {
        "patch": "return source . length ( ) ; } else { return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ; }",
        "score": 99.85295336174242
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , source . substring ( 1 ) ) ;",
        "score": 99.66837935014205
      },
      {
        "patch": "return source . length ( ) ; } else { return 1 + Math . min ( levenshtein ( source , target . substring ( 1 ) ) , target ) ;",
        "score": 99.85230210248162
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) - 1 ;",
        "score": 99.66468302408855
      },
      {
        "patch": "return 1 + Math . min ( levenshtein ( source , target . substring ( 1 ) ) , target . substring ( 1 ) ) ;",
        "score": 99.84971039870689
      },
      {
        "patch": "return source . levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.6631192294034
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target . substring ( 1 ) , target ) ;",
        "score": 99.84883757560483
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 0 ) , target . substring ( 1 ) ) ;",
        "score": 99.66124378551136
      },
      {
        "patch": "return source . substring ( 1 ) ; } else { return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.84724934895833
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target ) ;",
        "score": 99.65815286075367
      },
      {
        "patch": "return source . substring ( 1 ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 1 ) ) {",
        "score": 99.84190368652344
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . length ( ) - 1 ) ;",
        "score": 99.65787406589673
      },
      {
        "patch": "return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ; } else { return source . length ( ) ;",
        "score": 99.83936309814453
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target ) ;",
        "score": 99.65635172526042
      },
      {
        "patch": "return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ; } else { return source . length ( ) ; }",
        "score": 99.83726917613636
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 + 1 ) ) ;",
        "score": 99.65542602539062
      },
      {
        "patch": "return Math . min ( levenshtein ( source , target . substring ( 1 ) ) , levenshtein ( source . substring ( 1 ) ) ) ;",
        "score": 99.83516570060483
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) + 1 ;",
        "score": 99.65027872721355
      },
      {
        "patch": "return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ; } else { return 1 + source . length ( ) ;",
        "score": 99.83111213235294
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ; } else",
        "score": 99.64808146158855
      },
      {
        "patch": "return 1 + source . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {",
        "score": 99.83008552320075
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 , 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.64466349283855
      },
      {
        "patch": "return source . length ( ) ; } else { return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ;",
        "score": 99.82801055908203
      },
      {
        "patch": "return levenshtein ( source , source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.643310546875
      },
      {
        "patch": "return source . substring ( 1 ) ; } else if ( source . char CaMeL At ( 1 ) == target . char CaMeL At ( 0 ) ) {",
        "score": 99.8245620727539
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 , $NUMBER$ ) , target . substring ( 1 ) ) ;",
        "score": 99.64329020182292
      },
      {
        "patch": "return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ;",
        "score": 99.82429643110795
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target , target . substring ( 1 ) ) ;",
        "score": 99.64107259114583
      },
      {
        "patch": "return levenshtein ( source , target . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.64045854048295
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 , target . substring ( 1 ) ) ) ;",
        "score": 99.8193780307112
      },
      {
        "patch": "return 1 + levenshtein ( source . to CaMeL String ( ) , target . substring ( 1 ) ) ;",
        "score": 99.63949983016305
      },
      {
        "patch": "return source . length ( ) ; } else { return 1 + levenshtein ( source . substring ( 1 ) , target ) ;",
        "score": 99.81588179976852
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 , $NUMBER$ ) ) ;",
        "score": 99.63932291666667
      },
      {
        "patch": "return source . substring ( 1 ) ; } else if ( source . char CaMeL At ( 1 ) == target . char CaMeL At ( 1 ) ) {",
        "score": 99.81586456298828
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ) ;",
        "score": 99.63895847486413
      },
      {
        "patch": "return source . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {",
        "score": 99.81409085181451
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . to CaMeL String ( ) ) ;",
        "score": 99.63672936480978
      },
      {
        "patch": "return target . substring ( 1 ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {",
        "score": 99.8095932006836
      },
      {
        "patch": "return start + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.6343661221591
      },
      {
        "patch": "return 1 + source . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 1 ) ) {",
        "score": 99.80820904356061
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . char CaMeL At ( 1 ) ) ;",
        "score": 99.63417561848958
      },
      {
        "patch": "return source . substring ( 1 ) ; } else if ( source . char CaMeL At ( 0 ) == source . char CaMeL At ( 0 ) ) {",
        "score": 99.80107116699219
      },
      {
        "patch": "return 1 + levenshtein ( target . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.63304554332386
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target . substring ( 1 ) ) ; } else {",
        "score": 99.79882049560547
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 - 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.62969970703125
      },
      {
        "patch": "return source . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) { return 1 ;",
        "score": 99.79367244944854
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 , 1 ) ) ;",
        "score": 99.62964884440105
      },
      {
        "patch": "return source . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 1 ) ) {",
        "score": 99.79010206653226
      },
      {
        "patch": "return levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ; } return 1 ;",
        "score": 99.62964884440105
      },
      {
        "patch": "return source . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) { return 1 ; }",
        "score": 99.782421875
      },
      {
        "patch": "return 1 ; } return levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.62891642252605
      },
      {
        "patch": "return 1 + Math . min ( Math . min ( levenshtein ( source , target . substring ( 1 ) ) , levenshtein ( source . substring ( 1 ) ,",
        "score": 99.77957589285714
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . trim ( ) ) ;",
        "score": 99.62039620535714
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target ) ; } else {",
        "score": 99.77693684895833
      },
      {
        "patch": "return return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.61971382472827
      },
      {
        "patch": "return 1 + Math . min ( levenshtein ( source , target . substring ( 1 ) ) , levenshtein ( source . substring ( 1 ) ) ) ; }",
        "score": 99.77618049172794
      },
      {
        "patch": "return 1 - levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.61876331676136
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ; } else { return 1 ;",
        "score": 99.77466692243304
      },
      {
        "patch": "return levenshtein ( source . substring ( $NUMBER$ ) , target . substring ( 1 ) ) ;",
        "score": 99.61853637695313
      },
      {
        "patch": "return 1 * levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.61818625710227
      },
      {
        "patch": "return target . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {",
        "score": 99.76932648689517
      },
      {
        "patch": "return levenshtein ( source . substring ( 1 ) , target . substring ( $NUMBER$ ) ) ;",
        "score": 99.61791381835937
      },
      {
        "patch": "return source . substring ( 1 ) . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) )",
        "score": 99.76921735491071
      },
      {
        "patch": "return levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target ) ;",
        "score": 99.61653275923295
      },
      {
        "patch": "return source . length ( ) ; } else { return 1 + Math . min ( Math . min ( levenshtein ( source , target . substring ( 1 ) ) ,",
        "score": 99.76794782366072
      },
      {
        "patch": "return levenshtein ( source . substring ( 1 ) , target . length ( ) ) ;",
        "score": 99.612548828125
      },
      {
        "patch": "return source . length ( ) ; } else if ( source . char CaMeL At ( 1 ) == target . char CaMeL At ( 0 ) ) {",
        "score": 99.76671181955645
      },
      {
        "patch": "{ return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.61122197690217
      },
      {
        "patch": "return levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ; }",
        "score": 99.61095610119048
      },
      {
        "patch": "return source . length ( ) ; } else if ( source . char CaMeL At ( 1 ) == target . char CaMeL At ( 1 ) ) {",
        "score": 99.76089969758064
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 0 ) ) ;",
        "score": 99.6067782315341
      },
      {
        "patch": "return source . length ( ) ; } else { return 1 + Math . min ( levenshtein ( source , target . substring ( 1 ) ) ,",
        "score": 99.75743447580645
      },
      {
        "patch": "return levenshtein levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.60493607954545
      },
      {
        "patch": "return 1 + Math . min ( Math . min ( levenshtein ( source , target . substring ( 1 ) ) , target . substring ( 1 ) ) ,",
        "score": 99.75307025331439
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ; ;",
        "score": 99.6044921875
      },
      {
        "patch": "return 1 + Math . min ( levenshtein ( source , target . substring ( 1 ) ) , levenshtein ( source . substring ( 1 ) ,",
        "score": 99.74845640120968
      },
      {
        "patch": "return 1 + levenshtein ( source , target . substring ( 1 ) ) ;",
        "score": 99.60090906479779
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ) ; }",
        "score": 99.74750114889706
      },
      {
        "patch": "return levenshtein ( source . substring ( 1 ) , target , target . substring ( 1 ) ) ;",
        "score": 99.59954279119319
      },
      {
        "patch": "return source . is CaMeL Empty ( ) ? source . length ( ) : source . length ( ) ;",
        "score": 99.74720348011364
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 , target . substring ( 1 ) ) ) ;",
        "score": 99.59897682883523
      },
      {
        "patch": "return target . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 1 ) ) {",
        "score": 99.74598349294355
      },
      {
        "patch": "return levenshtein ( target . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.5907958984375
      },
      {
        "patch": "return source . substring ( 1 ) ; } else { return 1 + Math . min ( levenshtein ( source , target . substring ( 1 ) ) ,",
        "score": 99.74095153808594
      },
      {
        "patch": "return levenshtein ( source . substring ( 1 ) , source . substring ( 1 ) ) ;",
        "score": 99.590673828125
      },
      {
        "patch": "return source . length ( ) ; } else if ( target . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {",
        "score": 99.73997448336694
      },
      {
        "patch": "return 1 + levenshtein ( source . length ( ) , target . substring ( 1 ) ) ;",
        "score": 99.58741396949405
      },
      {
        "patch": "return source . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == source . char CaMeL At ( 0 ) ) {",
        "score": 99.73861202116936
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 , target . length ( ) ) ) ;",
        "score": 99.58458891369048
      },
      {
        "patch": "return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ; } else {",
        "score": 99.735458984375
      },
      {
        "patch": "return 1 + levenshtein ( source . trim ( ) , target . substring ( 1 ) ) ;",
        "score": 99.58355422247024
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target . substring ( 1 ) ) ; }",
        "score": 99.73455403645833
      },
      {
        "patch": "return source . substring ( 1 ) ; } else { return source . substring ( 1 ) ;",
        "score": 99.58291015625
      },
      {
        "patch": "return 1 + Math . min ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.73367442255434
      },
      {
        "patch": "return source . substring ( 1 ) ; } else { return target . substring ( 1 ) ;",
        "score": 99.5806396484375
      },
      {
        "patch": "return 1 ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {",
        "score": 99.73304578993056
      },
      {
        "patch": "return 1 + 1 + levenshtein ( source . substring ( 1 ) , target . length ( ) ) ;",
        "score": 99.57565174932066
      },
      {
        "patch": "return 1 + Math . min ( levenshtein ( source , target . substring ( 1 ) ) , target . substring ( 1 ) ) ; }",
        "score": 99.7189697265625
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . start ( ) ) ;",
        "score": 99.57513718377976
      },
      {
        "patch": "return source . length ( ) ? target . length ( ) : source . length ( ) ;",
        "score": 99.717529296875
      },
      {
        "patch": "return 1 ; } else { return 1 + levenshtein ( source . substring ( 1 ) ) ;",
        "score": 99.57357933407738
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , levenshtein ( source . substring ( 1 ) ) ) ;",
        "score": 99.71302208533653
      },
      {
        "patch": "return levenshtein ( source . substring ( 1 ) , target . substring ( 1 - 1 ) ) ;",
        "score": 99.56971324573864
      },
      {
        "patch": "return target . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ;",
        "score": 99.71270197088069
      },
      {
        "patch": "return 0 + levenshtein ( source . substring ( 1 ) , target . length ( ) ) ;",
        "score": 99.56899879092262
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ; } else {",
        "score": 99.7123828125
      },
      {
        "patch": "return levenshtein ( source . substring ( 1 ) , target . length ( ) - 1 ) ;",
        "score": 99.56889415922619
      },
      {
        "patch": "return source . is CaMeL Empty ( ) ? target . length ( ) : target . length ( ) ;",
        "score": 99.7119140625
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target . size ( ) ) ;",
        "score": 99.56825474330357
      },
      {
        "patch": "return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ; } else { return 1 ; }",
        "score": 99.71189722521552
      },
      {
        "patch": "return $NUMBER$ + levenshtein ( source . substring ( 1 ) , target . substring ( $NUMBER$ ) ) ;",
        "score": 99.56700550426136
      },
      {
        "patch": "return source . is CaMeL Empty ( ) ? target . length ( ) : source . substring ( 1 ) ;",
        "score": 99.70924974524456
      },
      {
        "patch": "return levenshtein ( source . substring ( 1 ) , target . substring ( 1 , $NUMBER$ ) ) ;",
        "score": 99.56578480113636
      },
      {
        "patch": "return 1 ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 1 ) ) {",
        "score": 99.70544885706019
      },
      {
        "patch": "return 1 + 1 + levenshtein ( source . substring ( 1 ) ) ;",
        "score": 99.56486241957721
      },
      {
        "patch": "return source . length ( ) ? source . length ( ) : source . length ( ) ;",
        "score": 99.70232543945312
      },
      {
        "patch": "return $NUMBER$ + levenshtein ( source . substring ( 1 ) , target . length ( ) ) ;",
        "score": 99.56458100818452
      },
      {
        "patch": "return levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.69769965277777
      },
      {
        "patch": "return levenshtein ( source . substring ( 0 ) , target . substring ( 1 ) ) ;",
        "score": 99.55802001953126
      },
      {
        "patch": "return source . substring ( 1 ) . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ;",
        "score": 99.695556640625
      },
      {
        "patch": "return levenshtein ( source . substring ( 1 ) , target . to CaMeL String ( ) ) ;",
        "score": 99.55497814360119
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) . substring ( 1 ) ) ;",
        "score": 99.55457153320313
      },
      {
        "patch": "return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ; }",
        "score": 99.68799889605978
      },
      {
        "patch": "return source . substring ( 1 ) + levenshtein ( source . substring ( 1 ) ) ;",
        "score": 99.54013061523438
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , $NUMBER$ ) ;",
        "score": 99.53938562729779
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) ) . substring ( 1 ) ;",
        "score": 99.53191528320312
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , target , target ) ;",
        "score": 99.53022846422698
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , 1 ) ;",
        "score": 99.52710678998162
      },
      {
        "patch": "return 1 + source . substring ( 1 ) , target . substring ( 1 ) ;",
        "score": 99.52012125651042
      },
      {
        "patch": "return source . is CaMeL Empty ( ) ? source . length ( ) : source . length ( ) ; } else {",
        "score": 99.66857421875
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) ) ;",
        "score": 99.5129150390625
      },
      {
        "patch": "return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ; } else",
        "score": 99.66595458984375
      },
      {
        "patch": "return 1 + 1 + levenshtein ( source . substring ( 1 ) , target ) ;",
        "score": 99.51161595394737
      },
      {
        "patch": "return 1 + source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ;",
        "score": 99.6655782063802
      },
      {
        "patch": "return source . substring ( 1 ) ; } else { return 1 ; }",
        "score": 99.5113296508789
      },
      {
        "patch": "return source . is CaMeL Empty ( ) ? target . length ( ) : source . char CaMeL At ( 0 ) ;",
        "score": 99.66373046875
      },
      {
        "patch": "return source . substring ( 1 ) + $STRING$ + target . substring ( 1 ) ;",
        "score": 99.51101345486111
      },
      {
        "patch": "return levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ; } else {",
        "score": 99.66162109375
      },
      {
        "patch": "return 1 + levenshtein ( source , source . substring ( 1 ) ) ;",
        "score": 99.50864545036765
      },
      {
        "patch": "return source . is CaMeL Empty ( ) ? target . substring ( 1 ) : source . length ( ) ;",
        "score": 99.65929645040761
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , $STRING$ ) ;",
        "score": 99.50429400275735
      },
      {
        "patch": "return source . length ( ) ; } else { return source . length ( ) ; }",
        "score": 99.65825452302632
      },
      {
        "patch": "return source . substring ( 1 , target . length ( ) - 1 ) ;",
        "score": 99.50369083180146
      },
      {
        "patch": "if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {",
        "score": 99.65496271306819
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) , 0 ) ;",
        "score": 99.50274299172794
      },
      {
        "patch": "return source . substring ( 1 ) ; } else { return 1 ;",
        "score": 99.50057779947916
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 , 1 ) ) ;",
        "score": 99.49247472426471
      },
      {
        "patch": "return target . length ( ) ? target . length ( ) : source . length ( ) ;",
        "score": 99.652587890625
      },
      {
        "patch": "return 1 + source . substring ( 1 ) + target . substring ( 1 ) ;",
        "score": 99.49199761284723
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 , $NUMBER$ ) ) ;",
        "score": 99.49006922104779
      },
      {
        "patch": "return source . length ( ) ; } else { return source . length ( ) ;",
        "score": 99.64347330729167
      },
      {
        "patch": "return 1 + levenshtein ( source . length ( ) - 1 ) ;",
        "score": 99.48221588134766
      },
      {
        "patch": "return Math . min ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
        "score": 99.63812546502976
      },
      {
        "patch": "return $NUMBER$ + levenshtein ( source . substring ( 1 ) , target ) ;",
        "score": 99.4802605124081
      },
      {
        "patch": "return source . length ( ) ? target . length ( ) : source . substring ( 1 ) ;",
        "score": 99.63262648809524
      },
      {
        "patch": "return 0 + levenshtein ( source . substring ( 1 ) , target ) ;",
        "score": 99.46950396369485
      },
      {
        "patch": "return target . length ( ) ? source . length ( ) : source . length ( ) ;",
        "score": 99.6318603515625
      },
      {
        "patch": "return 1 + levenshtein ( source . substring ( 1 ) ) ) ;",
        "score": 99.46639251708984
      },
      {
        "patch": "return source . length ( ) ; } else { return 1 + source . length ( ) ;",
        "score": 99.61734619140626
      },
      {
        "patch": "return 1 ; } else { return source . substring ( 1 ) ;",
        "score": 99.4571533203125
      },
      {
        "patch": "return 1 + levenshtein ( source , target . substring ( 1 ) , target ) ;",
        "score": 99.60268040707237
      },
      {
        "patch": "return 1 ; } else { return target . substring ( 1 ) ;",
        "score": 99.44868977864583
      },
      {
        "patch": "return source . substring ( 1 ) ;",
        "score": 99.29928927951389
      },
      {
        "patch": "return source . length ( ) ; } else { return 1 ; }",
        "score": 99.5291259765625
      },
      {
        "patch": "return 1 ;",
        "score": 98.41534423828125
      }
    ]
  },
  "LIS-31-32": {
    "src": "longest = length + 1 ;",
    "patches": [
      {
        "patch": "longest = length + 1 ;",
        "score": 99.87896728515625
      },
      {
        "patch": "longest = length + 1 ; } i ++ ; }",
        "score": 99.73384602864583
      },
      {
        "patch": "longest = length - 1 ;",
        "score": 99.504638671875
      },
      {
        "patch": "longest = length + 1 ; } } i ++ ;",
        "score": 99.67630004882812
      },
      {
        "patch": "longest = length + 1 ; }",
        "score": 99.48426055908203
      },
      {
        "patch": "longest = length + 1 ; } i ++ ;",
        "score": 99.64198996803977
      },
      {
        "patch": "longest = length - 1 ; }",
        "score": 99.3362808227539
      },
      {
        "patch": "longest = length + 1 ; } } return longest ;",
        "score": 99.63536580403645
      },
      {
        "patch": "longest = = length + 1 ;",
        "score": 99.30094146728516
      },
      {
        "patch": "longest = length + 1 ; } } return length ;",
        "score": 99.60477701822917
      },
      {
        "patch": "longest = length * 1 ;",
        "score": 99.29500906808036
      },
      {
        "patch": "longest = length + 1 ; break ;",
        "score": 99.29224989149306
      },
      {
        "patch": "longest = length + 1 ; } i -- ;",
        "score": 99.41544966264205
      },
      {
        "patch": "length = length + 1 ;",
        "score": 99.27956717354911
      },
      {
        "patch": "longest = length + 1 ; } return longest ;",
        "score": 99.32776988636364
      },
      {
        "patch": "longest = longest + 1 ;",
        "score": 99.27872140066964
      },
      {
        "patch": "longest = length + 1 ; } }",
        "score": 99.32156032986111
      },
      {
        "patch": "longest = longest + 1 ; }",
        "score": 99.27064514160156
      },
      {
        "patch": "longest = length + 1 ; } else {",
        "score": 99.31553955078125
      },
      {
        "patch": "longest = longest - 1 ;",
        "score": 99.26162283761161
      },
      {
        "patch": "longest = length + 1 ; } return length ;",
        "score": 99.31211159446023
      },
      {
        "patch": "longest = longest - 1 ; }",
        "score": 99.26068878173828
      },
      {
        "patch": "} longest = length + 1 ;",
        "score": 99.22299194335938
      },
      {
        "patch": "longest = length - 1 ; } i ++ ;",
        "score": 99.30678488991477
      },
      {
        "patch": "longest = longest ; }",
        "score": 99.21929931640625
      },
      {
        "patch": "longest = = length - 1 ;",
        "score": 99.2037124633789
      },
      {
        "patch": "longest = length + 1 ; } break ;",
        "score": 99.27372436523437
      },
      {
        "patch": "} else { longest = length + 1 ;",
        "score": 99.2034912109375
      },
      {
        "patch": "longest ++ ; longest = length + 1 ;",
        "score": 99.27277221679688
      },
      {
        "patch": "longest = = = length + 1 ;",
        "score": 99.18099636501736
      },
      {
        "patch": "longest = length + 1 ; i ++ ;",
        "score": 99.253076171875
      },
      {
        "patch": "length = length + 1 ; }",
        "score": 99.17504119873047
      },
      {
        "patch": "longest = length + 1 + 1 ;",
        "score": 99.25203450520833
      },
      {
        "patch": "longest = longest ; } }",
        "score": 99.17138671875
      },
      {
        "patch": "longest = longest + 1 ; } i ++ ;",
        "score": 99.2444180575284
      },
      {
        "patch": "longest = length / 1 ;",
        "score": 99.15085274832589
      },
      {
        "patch": "longest = length + 1 ; break ; }",
        "score": 99.22884521484374
      },
      {
        "patch": "longest = longest ; longest = longest ;",
        "score": 99.15065511067708
      },
      {
        "patch": "longest = length ; longest = length + 1 ;",
        "score": 99.21689675071023
      },
      {
        "patch": "longest = length - length ;",
        "score": 99.14972795758929
      },
      {
        "patch": "longest = length + 1 ; i ++ ; }",
        "score": 99.20991654829545
      },
      {
        "patch": "} else { = length + 1 ; }",
        "score": 99.14280395507812
      },
      {
        "patch": "longest = = = length - 1 ;",
        "score": 99.14241536458333
      },
      {
        "patch": "longest = + 1 ;",
        "score": 99.1978759765625
      },
      {
        "patch": "longest = length + 1 ; return longest ;",
        "score": 99.14229125976563
      },
      {
        "patch": "longest = + 1 ; } i ++ ;",
        "score": 99.1953857421875
      },
      {
        "patch": "} else if = length + 1 ;",
        "score": 99.13981797960069
      },
      {
        "patch": "longest = i + 1 ;",
        "score": 99.17149135044643
      },
      {
        "patch": "this . longest = length + 1 ;",
        "score": 99.13299560546875
      },
      {
        "patch": "longest = - 1 ; } i ++ ;",
        "score": 99.16527099609375
      },
      {
        "patch": "longest = length * 1 ; }",
        "score": 99.13130187988281
      },
      {
        "patch": "longest = last + 1 ;",
        "score": 99.16047886439732
      },
      {
        "patch": "longest = length - 1 ; break ;",
        "score": 99.12808566623264
      },
      {
        "patch": "longest = length + 1 ; } else",
        "score": 99.14100477430556
      },
      {
        "patch": "longest = length + length ;",
        "score": 99.12483433314732
      },
      {
        "patch": "longest = size + 1 ;",
        "score": 99.13680594308036
      },
      {
        "patch": "length = length - 1 ;",
        "score": 99.12482561383929
      },
      {
        "patch": "longest = longest ;",
        "score": 99.108544921875
      },
      {
        "patch": "longest = length + 1 - 1 ;",
        "score": 99.11374240451389
      },
      {
        "patch": "longest = longest * 1 ;",
        "score": 99.10178048270089
      },
      {
        "patch": "longest = length + - 1 ;",
        "score": 99.11138916015625
      },
      {
        "patch": "longest += length + 1 ;",
        "score": 99.09756033761161
      },
      {
        "patch": "longest = - 1 ;",
        "score": 99.1104736328125
      },
      {
        "patch": "longest = = longest + 1 ;",
        "score": 99.09522247314453
      },
      {
        "patch": "longest = length + longest + 1 ;",
        "score": 99.08304850260417
      },
      {
        "patch": "} if = longest + 1 ;",
        "score": 99.08973693847656
      },
      {
        "patch": "longest ++ ;",
        "score": 99.07831573486328
      },
      {
        "patch": "longest = longest ; } longest = longest ;",
        "score": 99.08062744140625
      },
      {
        "patch": "longest = length ; } i ++ ;",
        "score": 99.07489691840277
      },
      {
        "patch": "} else { longest = length - 1 ;",
        "score": 99.0784912109375
      },
      {
        "patch": "longest = length + $NUMBER$ ;",
        "score": 99.07262311662946
      },
      {
        "patch": "longest = = length + 1 ; }",
        "score": 99.06940375434027
      },
      {
        "patch": "longest ++ ; } i ++ ;",
        "score": 99.05321502685547
      },
      {
        "patch": "longest = longest ; } } else {",
        "score": 99.06829155815973
      },
      {
        "patch": "longest = length + longest ;",
        "score": 99.04012625558036
      },
      {
        "patch": "longest = longest ; longest = length ;",
        "score": 99.06667073567708
      },
      {
        "patch": "longest = i + 1 ; }",
        "score": 98.99812316894531
      },
      {
        "patch": "longest = longest - length ;",
        "score": 99.06401715959821
      },
      {
        "patch": "longest = val + 1 ;",
        "score": 98.99107142857143
      },
      {
        "patch": "longest = = longest - 1 ;",
        "score": 99.06253051757812
      },
      {
        "patch": "longest = + 1 ; }",
        "score": 98.98758370535714
      },
      {
        "patch": "longest = = longest ; }",
        "score": 99.06004115513393
      },
      {
        "patch": "longest = length ;",
        "score": 98.9805908203125
      },
      {
        "patch": "longest = 1 ; longest = 1 ;",
        "score": 99.05930582682292
      },
      {
        "patch": "max = length + 1 ;",
        "score": 98.97899518694196
      },
      {
        "patch": "result = length + 1 ;",
        "score": 99.05693708147321
      },
      {
        "patch": "longest = last + 1 ; }",
        "score": 98.97498321533203
      },
      {
        "patch": "longest = longest ; break ;",
        "score": 99.05410330636161
      },
      {
        "patch": "next = length + 1 ;",
        "score": 98.96592494419643
      },
      {
        "patch": "longest += length ; }",
        "score": 99.05321248372395
      },
      {
        "patch": "last = length + 1 ;",
        "score": 98.95944649832589
      },
      {
        "patch": "longest += length + 1 ; }",
        "score": 99.05245208740234
      },
      {
        "patch": "longest = - 1 ; }",
        "score": 98.94842529296875
      },
      {
        "patch": "longest = longest * 1 ; }",
        "score": 99.0519790649414
      },
      {
        "patch": "longest = length + 0 ;",
        "score": 98.94662039620536
      },
      {
        "patch": "longest = length + 1 ; ;",
        "score": 99.05026245117188
      },
      {
        "patch": "longest = size + 1 ; }",
        "score": 98.9391098022461
      },
      {
        "patch": "longest = = length * 1 ;",
        "score": 99.0481185913086
      },
      {
        "patch": "longest = length + 1 ; else",
        "score": 98.92546081542969
      },
      {
        "patch": "longest = length / 1 ; }",
        "score": 99.03877258300781
      },
      {
        "patch": "longest += longest + 1 ;",
        "score": 98.92398507254464
      },
      {
        "patch": "} else { = length + 1 ;",
        "score": 99.03664822048611
      },
      {
        "patch": "longest = start + 1 ;",
        "score": 98.90592738560268
      },
      {
        "patch": "longest ++ ; }",
        "score": 98.905615234375
      },
      {
        "patch": "if = length + 1 ;",
        "score": 99.01463099888393
      },
      {
        "patch": "longest = length + val ;",
        "score": 98.89395577566964
      },
      {
        "patch": "longest += length ;",
        "score": 99.01044311523438
      },
      {
        "patch": "longest = max + 1 ;",
        "score": 98.8897705078125
      },
      {
        "patch": "longest += length - 1 ;",
        "score": 98.99479457310268
      },
      {
        "patch": "longest = min + 1 ;",
        "score": 98.86886160714286
      },
      {
        "patch": "length = length - 1 ; }",
        "score": 98.99418640136719
      },
      {
        "patch": "longest = length ; }",
        "score": 98.86441040039062
      },
      {
        "patch": "longest = longest / 1 ; }",
        "score": 98.98844146728516
      },
      {
        "patch": "prev = length + 1 ;",
        "score": 98.84458705357143
      },
      {
        "patch": "longest += 1 ; }",
        "score": 98.98568725585938
      },
      {
        "patch": "min = length + 1 ;",
        "score": 98.78980364118304
      },
      {
        "patch": "longest = length + $NUMBER$ ; }",
        "score": 98.98439025878906
      },
      {
        "patch": "longest = longest / 1 ;",
        "score": 98.97883823939732
      },
      {
        "patch": "result = length + 1 ; }",
        "score": 98.9766845703125
      },
      {
        "patch": "longest = 0 ;",
        "score": 98.70591430664062
      },
      {
        "patch": "longest = longest ; break ; }",
        "score": 98.97348022460938
      },
      {
        "patch": "longest += 1 ;",
        "score": 98.69967651367188
      },
      {
        "patch": "if = longest + 1 ;",
        "score": 98.97317940848214
      },
      {
        "patch": "return length + 1 ;",
        "score": 98.6830342610677
      },
      {
        "patch": "longest = 0 ; }",
        "score": 98.64827473958333
      },
      {
        "patch": "} = length + 1 ;",
        "score": 98.96843610491071
      },
      {
        "patch": "longest = = = longest ; }",
        "score": 98.9662857055664
      },
      {
        "patch": "longest = length ] ;",
        "score": 98.6334940592448
      },
      {
        "patch": "longest = i ;",
        "score": 98.63250732421875
      },
      {
        "patch": "longest += length ; } }",
        "score": 98.95101492745536
      },
      {
        "patch": "longest ++ + 1 ;",
        "score": 98.62804158528645
      },
      {
        "patch": "length = length * 1 ;",
        "score": 98.93872942243304
      },
      {
        "patch": "longest = 1 ; }",
        "score": 98.92335001627605
      },
      {
        "patch": "longest = i ; }",
        "score": 98.58411661783855
      },
      {
        "patch": "longest = length ; } }",
        "score": 98.91343470982143
      },
      {
        "patch": "longest ++ ; } }",
        "score": 98.58102416992188
      },
      {
        "patch": "longest = length - longest ;",
        "score": 98.91240583147321
      },
      {
        "patch": "return length ; }",
        "score": 98.5555908203125
      },
      {
        "patch": "longest = = = longest ;",
        "score": 98.90959821428571
      },
      {
        "patch": "longest = 1 ;",
        "score": 98.53560791015624
      },
      {
        "patch": "longest = length - $NUMBER$ ;",
        "score": 98.90528215680804
      },
      {
        "patch": "longest += longest ;",
        "score": 98.4473876953125
      },
      {
        "patch": "} longest = longest ;",
        "score": 98.89394124348958
      },
      {
        "patch": "longest = true ;",
        "score": 98.442138671875
      },
      {
        "patch": "} i ++ ;",
        "score": 98.43182373046875
      },
      {
        "patch": "longest = = longest ;",
        "score": 98.8021952311198
      },
      {
        "patch": "longest -= 1 ;",
        "score": 98.41514892578125
      },
      {
        "patch": "longest += longest ; }",
        "score": 98.7866923014323
      },
      {
        "patch": "longest -= length ;",
        "score": 98.40296020507813
      },
      {
        "patch": "i ++ ; }",
        "score": 98.38958129882812
      },
      {
        "patch": "} longest += length ;",
        "score": 98.75546264648438
      },
      {
        "patch": "longest = last ;",
        "score": 98.37833862304687
      },
      {
        "patch": "longest -- ; }",
        "score": 98.70711669921874
      },
      {
        "patch": "longest = false ;",
        "score": 98.35838623046875
      },
      {
        "patch": "i ++ ;",
        "score": 98.32290649414062
      },
      {
        "patch": "longest -- ;",
        "score": 98.18330383300781
      },
      {
        "patch": "longest = ;",
        "score": 98.17530059814453
      },
      {
        "patch": "length += length ;",
        "score": 98.5611572265625
      },
      {
        "patch": "return length ;",
        "score": 98.14203643798828
      },
      {
        "patch": "return longest ;",
        "score": 98.12731170654297
      },
      {
        "patch": "break ;",
        "score": 98.34957885742188
      },
      {
        "patch": "last ++ ;",
        "score": 98.12487030029297
      },
      {
        "patch": "break ; }",
        "score": 98.28535461425781
      },
      {
        "patch": "pos ++ ;",
        "score": 98.01351165771484
      },
      {
        "patch": "num ++ ;",
        "score": 97.94170379638672
      },
      {
        "patch": "continue ;",
        "score": 97.7379150390625
      },
      {
        "patch": "longest =",
        "score": 97.38404337565105
      },
      {
        "patch": "} else",
        "score": 97.64554850260417
      }
    ]
  },
  "LONGEST_COMMON_SUBSEQUENCE-18-19": {
    "src": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
    "patches": [
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.85731336805556
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ;",
        "score": 99.8072998046875
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) ) ;",
        "score": 99.775126953125
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ;",
        "score": 99.79522494612068
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.76421440972223
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b . substring ( 1 ) ) ;",
        "score": 99.78890878182871
      },
      {
        "patch": "return $STRING$ . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.76271339699075
      },
      {
        "patch": "return $STRING$ + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.72567749023438
      },
      {
        "patch": "return $STRING$ . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) ) ;",
        "score": 99.72390625
      },
      {
        "patch": "return $STRING$ + a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.76847891971983
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 ) ) ;",
        "score": 99.71939453125
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b ) ;",
        "score": 99.76470392400569
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( $NUMBER$ ) , b ) ;",
        "score": 99.71766493055556
      },
      {
        "patch": "return $STRING$ ; } else if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 0 ) ) {",
        "score": 99.75736942997685
      },
      {
        "patch": "return a ; } else if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 0 ) ) {",
        "score": 99.75699869791667
      },
      {
        "patch": "return $STRING$ . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.70468930844908
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b , 1 ) ;",
        "score": 99.74782799030173
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . length ( ) ) ;",
        "score": 99.70082600911458
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ;",
        "score": 99.73552835398706
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . length ( ) - 1 ) ;",
        "score": 99.69944411057692
      },
      {
        "patch": "return a + longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ;",
        "score": 99.7314453125
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . char CaMeL At ( 0 ) , b ) ;",
        "score": 99.69777074353448
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b , 0 ) ;",
        "score": 99.73020777209052
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 0 , 0 ) ) ;",
        "score": 99.69338650173611
      },
      {
        "patch": "return a + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.72775268554688
      },
      {
        "patch": "return a . char CaMeL At ( $NUMBER$ ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.69191261574075
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a , b . substring ( 1 ) ) ;",
        "score": 99.72535988136575
      },
      {
        "patch": "return a . substring ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.723779296875
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + $STRING$ + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.68254141971983
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , a . substring ( 1 ) , b ) ;",
        "score": 99.72095568426724
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 , 0 ) ) ;",
        "score": 99.68122468171296
      },
      {
        "patch": "return longest _ common _ subsequence ( a . substring ( 1 ) , b . substring ( 1 ) ) ;",
        "score": 99.7190472146739
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ; } else",
        "score": 99.67749865301724
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) ) ; } else {",
        "score": 99.71794782366071
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . char CaMeL At ( 1 ) , b ) ;",
        "score": 99.67611799568965
      },
      {
        "patch": "return $STRING$ + a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.71352202316811
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 0 , 0 ) , b ) ;",
        "score": 99.67535189924568
      },
      {
        "patch": "return $STRING$ ; } else if ( a . char CaMeL At ( 1 ) == b . char CaMeL At ( 0 ) ) {",
        "score": 99.71223958333333
      },
      {
        "patch": "return a . to CaMeL String ( ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.67511455829327
      },
      {
        "patch": "return a ; } else if ( a . char CaMeL At ( 1 ) == b . char CaMeL At ( 0 ) ) {",
        "score": 99.710205078125
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( $NUMBER$ ) ) ;",
        "score": 99.674814453125
      },
      {
        "patch": "return $STRING$ ; } else if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 1 ) ) {",
        "score": 99.7099609375
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 , 1 ) ) ;",
        "score": 99.67455150462963
      },
      {
        "patch": "if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 0 ) ) {",
        "score": 99.7088623046875
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , 0 ) ;",
        "score": 99.67351164641204
      },
      {
        "patch": "return a ; } else if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 1 ) ) {",
        "score": 99.70857747395833
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 , $NUMBER$ ) ) ;",
        "score": 99.67343026620371
      },
      {
        "patch": "return $STRING$ + a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b . substring ( 1 ) ) ;",
        "score": 99.70828562769397
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . length ( ) , b ) ;",
        "score": 99.6730487530048
      },
      {
        "patch": "return longest _ common _ subsequence ( a , a . substring ( 1 ) , b ) ;",
        "score": 99.7081787109375
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , - 1 ) ;",
        "score": 99.67013985770089
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) ,",
        "score": 99.70625813802083
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . char CaMeL At ( 0 ) ) ;",
        "score": 99.66928891782408
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b , ) ;",
        "score": 99.70536586216518
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( $NUMBER$ ) , b ) ;",
        "score": 99.6689453125
      },
      {
        "patch": "return $STRING$ + a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) ) ;",
        "score": 99.70488823784723
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 0 , 1 ) ) ;",
        "score": 99.66881872106481
      },
      {
        "patch": "return b . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.703125
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 0 ) , b ) ;",
        "score": 99.66615125868056
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , a . substring ( 1 ) ) ;",
        "score": 99.70161494502315
      },
      {
        "patch": "return $STRING$ . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( $NUMBER$ ) , b ) ;",
        "score": 99.66561776620371
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . substring ( 1 ) , b . substring ( 1 ) ) ;",
        "score": 99.69541015625
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 0 , $NUMBER$ ) ) ;",
        "score": 99.66342954282408
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ; }",
        "score": 99.69498116629464
      },
      {
        "patch": "return null . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.66305881076389
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b , b ) ;",
        "score": 99.69489998653017
      },
      {
        "patch": "return $STRING$ . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 ) ) ;",
        "score": 99.65955078125
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ; } else {",
        "score": 99.69334876019022
      },
      {
        "patch": "return $STRING$ + longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ;",
        "score": 99.6908846768466
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . to CaMeL String ( ) , b ) ;",
        "score": 99.65849086216518
      },
      {
        "patch": "{ return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.68946184430804
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + b . char CaMeL At ( 0 ) + b . char CaMeL At ( 0 ) ;",
        "score": 99.65811893857759
      },
      {
        "patch": "result = a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.68806675502232
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 , 1 ) , b ) ;",
        "score": 99.65794214709052
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 0 , 1 ) , b ) ;",
        "score": 99.65790847252156
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . substring ( 1 ) , b . char CaMeL At ( 0 ) ) ;",
        "score": 99.68547453703704
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 , $NUMBER$ ) , b ) ;",
        "score": 99.65754647090517
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence $NUMBER$ ( a . substring ( 1 ) , b ) ;",
        "score": 99.68538120814732
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , $NUMBER$ ) ;",
        "score": 99.65742549189815
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a , b ) ;",
        "score": 99.68459250710227
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + $STRING$ + longest _ common _ subsequence ( a . substring ( 1 ) ) ;",
        "score": 99.65700954861111
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b . char CaMeL At ( 0 ) ) ;",
        "score": 99.68313914331897
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 , 0 ) , b ) ;",
        "score": 99.65674669989224
      },
      {
        "patch": "return $STRING$ ; } else if ( a . char CaMeL At ( 1 ) == b . char CaMeL At ( 1 ) ) {",
        "score": 99.68313259548611
      },
      {
        "patch": "return $STRING$ . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b ) ;",
        "score": 99.6548184481534
      },
      {
        "patch": "return $STRING$ + a ; } else if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 0 ) ) {",
        "score": 99.68200262661638
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b , $NUMBER$ ) ;",
        "score": 99.68195211476294
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 0 , $NUMBER$ ) , b ) ;",
        "score": 99.65452417834052
      },
      {
        "patch": "return a ; } else if ( a . char CaMeL At ( 1 ) == b . char CaMeL At ( 1 ) ) {",
        "score": 99.67985026041667
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . char CaMeL At ( 0 ) , b ) ;",
        "score": 99.65271417025862
      },
      {
        "patch": "return longest _ common _ subsequence ( a . substring ( 1 ) , b ) ; } else {",
        "score": 99.67975725446429
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . to CaMeL String ( ) ) ;",
        "score": 99.65224045973558
      },
      {
        "patch": "return longest _ common _ subsequence ( a . substring ( 1 ) , b . char CaMeL At ( 0 ) ) ;",
        "score": 99.679736328125
      },
      {
        "patch": "return longest _ common _ subsequence ( a . substring ( 1 ) , b . substring ( 1 ) , b ) ;",
        "score": 99.67916015625
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( 0 , 0 ) ) ;",
        "score": 99.64964916087963
      },
      {
        "patch": "return $STRING$ + a . substring ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.67850296585648
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , 1 ) ;",
        "score": 99.64924225983796
      },
      {
        "patch": "return a + longest _ common _ subsequence ( a , b . substring ( 1 ) ) ;",
        "score": 99.67835693359375
      },
      {
        "patch": "return $STRING$ . to CaMeL String ( ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.6475078876202
      },
      {
        "patch": "s = a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.67831856863839
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + b . char CaMeL At ( 0 ) + b . char CaMeL At ( 1 ) ;",
        "score": 99.64709051724138
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . char CaMeL At ( 0 ) , b ) ;",
        "score": 99.6768798828125
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , a ) ;",
        "score": 99.64658425071023
      },
      {
        "patch": "return $STRING$ ; } else if ( a . char CaMeL At ( 0 ) == a . char CaMeL At ( 0 ) ) {",
        "score": 99.67572699652777
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . length ( ) - 1 ) ;",
        "score": 99.64612755408653
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b . ) ;",
        "score": 99.675537109375
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) ; } else { return a . char CaMeL At ( 0 ) ;",
        "score": 99.645751953125
      },
      {
        "patch": "return a ; } else if ( a . char CaMeL At ( 0 ) == a . char CaMeL At ( 0 ) ) {",
        "score": 99.67502170138889
      },
      {
        "patch": "return $STRING$ . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . length ( ) ) ;",
        "score": 99.64432779947917
      },
      {
        "patch": "return $STRING$ + a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b ) ;",
        "score": 99.67422485351562
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . length ( ) ) ;",
        "score": 99.64418538411458
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b ) ; } else {",
        "score": 99.67314453125
      },
      {
        "patch": "return $STRING$ . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . length ( ) - 1 ) ;",
        "score": 99.64268141526442
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . substring ( 1 ) , b , 1 ) ;",
        "score": 99.67084295099431
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . length ( ) - $NUMBER$ ) ;",
        "score": 99.64258751502403
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( b . substring ( 1 ) , b ) ;",
        "score": 99.642333984375
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . substring ( 1 ) , b . length ( ) ) ;",
        "score": 99.66635131835938
      },
      {
        "patch": "return a . char CaMeL At ( $NUMBER$ ) + longest _ common _ subsequence ( a . substring ( 1 ) ) ;",
        "score": 99.641494140625
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . substring ( 1 ) , b , 0 ) ;",
        "score": 99.66182084517045
      },
      {
        "patch": "return $STRING$ . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . char CaMeL At ( 0 ) , b ) ;",
        "score": 99.64124797952586
      },
      {
        "patch": "return a + longest _ common _ subsequence ( a . substring ( 1 ) , b . substring ( 1 ) ) ;",
        "score": 99.66130859375
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . char CaMeL At ( 1 ) ) ;",
        "score": 99.6405617042824
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b . substring ( 1 ) ,",
        "score": 99.6604755108173
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . length ( ) - 0 ) ;",
        "score": 99.64011793870192
      },
      {
        "patch": "return longest _ common _ subsequence ( a . substring ( 1 ) , b . substring ( 1 ) ) ; } else {",
        "score": 99.6570575420673
      },
      {
        "patch": "return $STRING$ . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 0 , 0 ) ) ;",
        "score": 99.63985640914352
      },
      {
        "patch": "return a . substring ( 1 ) + longest _ common _ subsequence ( a , b . substring ( 1 ) ) ;",
        "score": 99.65689453125
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 , 0 ) ) ;",
        "score": 99.63527199074075
      },
      {
        "patch": "return $STRING$ ; } else { return longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ;",
        "score": 99.65610914963942
      },
      {
        "patch": "return a ; } else { return longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.6344706217448
      },
      {
        "patch": "return longest _ common _ subsequence ( a . substring ( 1 ) , b . char CaMeL At ( 1 ) ) ;",
        "score": 99.654833984375
      },
      {
        "patch": "} else if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 0 ) ) {",
        "score": 99.65121459960938
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) . longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.63277633101852
      },
      {
        "patch": "return a . substring ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 ) ) ;",
        "score": 99.64708941915761
      },
      {
        "patch": "return a ; } else if ( a . is CaMeL Empty ( ) || b . is CaMeL Empty ( ) ) {",
        "score": 99.646748046875
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 , 1 ) ) ;",
        "score": 99.63154658564815
      },
      {
        "patch": "return longest _ common _ subsequence ( a . substring ( 1 ) , b , 1 ) ;",
        "score": 99.6420166015625
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 , $NUMBER$ ) ) ;",
        "score": 99.6309226707176
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . substring ( 1 ) ) ; } else {",
        "score": 99.64198521205357
      },
      {
        "patch": "return $STRING$ ; } else { return longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.63010660807292
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . char CaMeL At ( 1 ) , b ) ;",
        "score": 99.64133522727273
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( 0 , 1 ) ) ;",
        "score": 99.62934027777777
      },
      {
        "patch": "return $STRING$ + a + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.6412686434659
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 0 ) ) ;",
        "score": 99.6259765625
      },
      {
        "patch": "if ( b . char CaMeL At ( 0 ) == b . char CaMeL At ( 0 ) ) {",
        "score": 99.6405029296875
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) ; } else { return a . char CaMeL At ( 0 ) ; }",
        "score": 99.624375
      },
      {
        "patch": "if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 1 ) ) {",
        "score": 99.63962624289773
      },
      {
        "patch": "return $STRING$ . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( $NUMBER$ ) ) ;",
        "score": 99.623046875
      },
      {
        "patch": "if ( a . char CaMeL At ( 1 ) == b . char CaMeL At ( 0 ) ) {",
        "score": 99.63918235085227
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( $NUMBER$ ) ) ;",
        "score": 99.619990234375
      },
      {
        "patch": "return a + longest _ common _ subsequence ( a , a . substring ( 1 ) , b ) ;",
        "score": 99.63506525213069
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , 0 ) ;",
        "score": 99.61360307173295
      },
      {
        "patch": "return a + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ; } else {",
        "score": 99.63244098165761
      },
      {
        "patch": "return $STRING$ + longest _ common _ subsequence ( a . char CaMeL At ( 0 ) , b ) ;",
        "score": 99.61293723366477
      },
      {
        "patch": "return longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.63063557942708
      },
      {
        "patch": "return a . to CaMeL String ( ) + longest _ common _ subsequence ( a . substring ( 1 ) ) ;",
        "score": 99.6122334798177
      },
      {
        "patch": "return $STRING$ + longest _ common _ subsequence ( a , b . substring ( 1 ) ) ;",
        "score": 99.63004760742187
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . substring ( 1 ) , b , ) ;",
        "score": 99.62689499627976
      },
      {
        "patch": "return a + $STRING$ + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
        "score": 99.6079989346591
      },
      {
        "patch": "return longest _ common _ subsequence ( a . substring ( 1 ) , b , 0 ) ;",
        "score": 99.60737915039063
      },
      {
        "patch": "return $STRING$ . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , a ) ;",
        "score": 99.5979891690341
      },
      {
        "patch": "return longest _ common _ subsequence ( a . substring ( 1 ) , b , b ) ;",
        "score": 99.5976806640625
      },
      {
        "patch": "return $STRING$ . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a , b ) ;",
        "score": 99.59430486505681
      },
      {
        "patch": "return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a , a ) ;",
        "score": 99.59270685369319
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ; }",
        "score": 99.59100632440476
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . substring ( 0 ) , b ) ;",
        "score": 99.590087890625
      },
      {
        "patch": "return $STRING$ + longest _ common _ subsequence ( a . substring ( $NUMBER$ ) , b ) ;",
        "score": 99.57908325195312
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . substring ( 1 ) , b . ) ;",
        "score": 99.58758835565476
      },
      {
        "patch": "return a ; } else { return a . char CaMeL At ( 0 ) ;",
        "score": 99.567626953125
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . substring ( 0 , b ) ) ;",
        "score": 99.58536376953126
      },
      {
        "patch": "return $STRING$ ; } else { return a . char CaMeL At ( 0 ) ;",
        "score": 99.55528349034927
      },
      {
        "patch": "return longest _ common _ subsequence ( a . substring ( 1 ) , b , ) ;",
        "score": 99.5828921669408
      },
      {
        "patch": "return longest _ common _ subsequence ( a . substring ( 0 , 0 ) , b ) ;",
        "score": 99.55258178710938
      },
      {
        "patch": "return longest _ common _ subsequence ( a . substring ( 1 ) , b ) ; }",
        "score": 99.56499922902961
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b . substring ( 1 ) ) ;",
        "score": 99.55962456597223
      },
      {
        "patch": "return $STRING$ ; } else { return a . char CaMeL At ( 0 ) ; }",
        "score": 99.52043999565973
      },
      {
        "patch": "return $STRING$ + a + longest _ common _ subsequence ( a , b ) ;",
        "score": 99.51630715762867
      },
      {
        "patch": "return a ; } else { return a . char CaMeL At ( 0 ) ; }",
        "score": 99.51290554470486
      },
      {
        "patch": "return a . char CaMeL At ( 0 ) ;",
        "score": 99.4084139737216
      },
      {
        "patch": "return longest _ common _ subsequence ( a , b ) ;",
        "score": 99.39723557692308
      },
      {
        "patch": "return $STRING$ ;",
        "score": 98.09783935546875
      },
      {
        "patch": "return a ;",
        "score": 97.92349243164062
      }
    ]
  },
  "MAX_SUBLIST_SUM-19-20": {
    "src": "max _ ending _ here = max _ ending _ here + x ;",
    "patches": [
      {
        "patch": "max _ ending _ here = max _ ending _ here + x ;",
        "score": 99.853515625
      },
      {
        "patch": "synchronized ( arr ) { max _ ending _ here = max _ ending _ here + x ;",
        "score": 99.72025756835937
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + 1 ;",
        "score": 99.68295084635416
      },
      {
        "patch": "max _ so _ far = Math . max ( max _ so _ far , arr ) ;",
        "score": 99.699609375
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here ;",
        "score": 99.67273888221153
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + max _ ending _ here + x ;",
        "score": 99.68172200520833
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + 1 + x ;",
        "score": 99.63625201056985
      },
      {
        "patch": "max _ ending _ here = Math . max ( max _ ending _ here , x ) ;",
        "score": 99.67700805664063
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + x + x ;",
        "score": 99.62518669577206
      },
      {
        "patch": "max _ ending _ here = max _ so _ far + x ;",
        "score": 99.67637532552084
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + x + 1 ;",
        "score": 99.62437528722427
      },
      {
        "patch": "max _ ending _ here = Math . max ( max _ so _ far , x ) ;",
        "score": 99.65626220703125
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here / x ;",
        "score": 99.622412109375
      },
      {
        "patch": "max _ so _ far = Math . max ( max _ so _ far , x ) ;",
        "score": 99.65411376953125
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here - x ;",
        "score": 99.61045735677084
      },
      {
        "patch": "max _ ending _ here = Math . max ( max _ so _ far , arr ) ;",
        "score": 99.652099609375
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + 0 ;",
        "score": 99.606591796875
      },
      {
        "patch": "max _ ending _ here = Math . max ( max _ ending _ here , arr ) ;",
        "score": 99.63584594726562
      },
      {
        "patch": "max _ ending _ here += max _ ending _ here + x ;",
        "score": 99.6056884765625
      },
      {
        "patch": "max _ so _ far = Math . max ( max _ ending _ here , x ) ;",
        "score": 99.6346923828125
      },
      {
        "patch": "if max _ ending _ here = max _ ending _ here + x ;",
        "score": 99.6005859375
      },
      {
        "patch": "max _ so _ far = max _ ending _ here + x ;",
        "score": 99.63209635416666
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + 0 + x ;",
        "score": 99.57575539981617
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + max _ ending _ here ;",
        "score": 99.62081106085526
      },
      {
        "patch": "max _ ending _ here = x ;",
        "score": 99.57031928168402
      },
      {
        "patch": "max _ so _ far = Math . max ( max _ so _ far , 0 ) ;",
        "score": 99.61944580078125
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here / 1 ;",
        "score": 99.5561767578125
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + $NUMBER$ + x ;",
        "score": 99.55280618106617
      },
      {
        "patch": "max _ ending _ here = Math . max ( max _ ending _ here , 1 ) ;",
        "score": 99.60736083984375
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + x ; }",
        "score": 99.54914093017578
      },
      {
        "patch": "max _ so _ far = Math . max ( max _ ending _ here , arr ) ;",
        "score": 99.60693969726563
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here ? x : x ;",
        "score": 99.53952205882354
      },
      {
        "patch": "max _ ending _ here = 0 + x ;",
        "score": 99.53497869318181
      },
      {
        "patch": "max _ ending _ here = max _ so _ far + max _ ending _ here + x ;",
        "score": 99.60467819940476
      },
      {
        "patch": "max _ ending _ here = x + x ;",
        "score": 99.53424627130681
      },
      {
        "patch": "max _ ending _ here = Math . max ( max _ so _ far , 0 ) ;",
        "score": 99.60333251953125
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + $NUMBER$ ;",
        "score": 99.531787109375
      },
      {
        "patch": "max _ ending _ here = Math . max ( max _ ending _ here , 0 ) ;",
        "score": 99.5909423828125
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + x + $NUMBER$ ;",
        "score": 99.5297492532169
      },
      {
        "patch": "max _ so _ far = Math . max ( max _ so _ far , 1 ) ;",
        "score": 99.58829345703126
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here - 1 ;",
        "score": 99.52639973958334
      },
      {
        "patch": "if ( Math . max ( max _ so _ far , max _ ending _ here ) ) {",
        "score": 99.57774135044643
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + x + 0 ;",
        "score": 99.52428481158088
      },
      {
        "patch": "max _ ending _ here = ( int ) max _ ending _ here + x ;",
        "score": 99.57371690538194
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here / x + x ;",
        "score": 99.51327694163604
      },
      {
        "patch": "max _ ending _ here = Math . max ( max _ so _ far , 1 ) ;",
        "score": 99.57223510742188
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here * x ;",
        "score": 99.5097900390625
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + ( 1 + x ) ;",
        "score": 99.56707442434211
      },
      {
        "patch": "int max _ ending _ here = max _ ending _ here + x ;",
        "score": 99.50910186767578
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here / 0 ;",
        "score": 99.50452473958333
      },
      {
        "patch": "max _ so _ far = Math . max ( max _ ending _ here , 1 ) ;",
        "score": 99.56500244140625
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + 1 + 1 ;",
        "score": 99.50442325367646
      },
      {
        "patch": "max _ ending _ here += max _ ending _ here + 1 ;",
        "score": 99.50362141927083
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + ( x + x ) ;",
        "score": 99.55552271792763
      },
      {
        "patch": "max _ ending _ here = 0 ;",
        "score": 99.50121392144098
      },
      {
        "patch": "return Math . max ( max _ so _ far , max _ ending _ here ) ;",
        "score": 99.55513723273026
      },
      {
        "patch": "try { max _ ending _ here = max _ ending _ here + x ;",
        "score": 99.49541159237133
      },
      {
        "patch": "max _ so _ far = Math . max ( max _ ending _ here , 0 ) ;",
        "score": 99.55126342773437
      },
      {
        "patch": "max _ ending _ here = 0 + max _ ending _ here + x ;",
        "score": 99.49518899356617
      },
      {
        "patch": "max _ ending _ here = Math . max ( max _ so _ far ,",
        "score": 99.5509033203125
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here / 1 + x ;",
        "score": 99.48247931985294
      },
      {
        "patch": "max _ so _ far = max _ so _ far + x ;",
        "score": 99.5437255859375
      },
      {
        "patch": "if max _ ending _ here = max _ ending _ here + 1 ;",
        "score": 99.47757720947266
      },
      {
        "patch": "max _ ending _ here += max _ ending _ here ;",
        "score": 99.47430889423077
      },
      {
        "patch": "max _ ending _ here = max _ so _ far + 1 ;",
        "score": 99.5359130859375
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here / $NUMBER$ ;",
        "score": 99.47178548177084
      },
      {
        "patch": "max _ ending _ here = $NUMBER$ + x ;",
        "score": 99.46565385298295
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + max _ so _ far ;",
        "score": 99.53205309416118
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here - 1 + x ;",
        "score": 99.46462833180146
      },
      {
        "patch": "max _ ending _ here = max _ so _ far + max _ ending _ here ;",
        "score": 99.52693899054276
      },
      {
        "patch": "if max _ ending _ here = max _ ending _ here ;",
        "score": 99.46245465959821
      },
      {
        "patch": "max _ so _ far = Math . max ( max _ so _ far ,",
        "score": 99.5250244140625
      },
      {
        "patch": "max _ ending _ here = $NUMBER$ + max _ ending _ here + x ;",
        "score": 99.46189970128677
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here ; }",
        "score": 99.45751953125
      },
      {
        "patch": "max _ ending _ here = x ; max _ ending _ here = 0 ;",
        "score": 99.4534553079044
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + x - x ;",
        "score": 99.51636460248162
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here ? x : 1 ;",
        "score": 99.45321834788604
      },
      {
        "patch": "max _ ending _ here = x + max _ ending _ here + x ;",
        "score": 99.45255773207721
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + x ; } else {",
        "score": 99.51156955295139
      },
      {
        "patch": "} max _ ending _ here = max _ ending _ here + x ;",
        "score": 99.44917297363281
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + - x ;",
        "score": 99.50769805908203
      },
      {
        "patch": "final max _ ending _ here = max _ ending _ here + x ;",
        "score": 99.44548034667969
      },
      {
        "patch": "max _ so _ far = Math . max ( max _ so _ far , arr",
        "score": 99.50559488932292
      },
      {
        "patch": "max _ ending _ here = 0 + max _ ending _ here ;",
        "score": 99.44498697916667
      },
      {
        "patch": "max _ ending _ here = x ; max _ ending _ here = x ;",
        "score": 99.5045525045956
      },
      {
        "patch": "max _ ending _ here = 0 ; }",
        "score": 99.4436279296875
      },
      {
        "patch": "max _ ending _ here = = max _ ending _ here + x ;",
        "score": 99.5020751953125
      },
      {
        "patch": "for max _ ending _ here = max _ ending _ here + x ;",
        "score": 99.43771362304688
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + arr . length ;",
        "score": 99.49859260110294
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here - 0 ;",
        "score": 99.43555501302083
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + ( x ;",
        "score": 99.49327850341797
      },
      {
        "patch": "max _ ending _ here = ( max _ ending _ here + x ;",
        "score": 99.43402862548828
      },
      {
        "patch": "synchronized max _ ending _ here = max _ ending _ here + x ;",
        "score": 99.43251037597656
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + $STRING$ ;",
        "score": 99.489892578125
      },
      {
        "patch": "max _ ending _ here = ( int ) max _ ending _ here ;",
        "score": 99.42959594726562
      },
      {
        "patch": "max _ ending _ here = Math . max ( arr , x ) ;",
        "score": 99.48871612548828
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + 1 ; }",
        "score": 99.42548370361328
      },
      {
        "patch": "max _ ending _ here -= max _ ending _ here + x ;",
        "score": 99.4846923828125
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here / x ; }",
        "score": 99.42538452148438
      },
      {
        "patch": "max _ so _ far = Math . max ( arr , x ) ;",
        "score": 99.47388458251953
      },
      {
        "patch": "if max _ ending _ here = max _ ending _ here + 0 ;",
        "score": 99.42253875732422
      },
      {
        "patch": "if max _ ending _ here += max _ ending _ here + x ;",
        "score": 99.42214965820312
      },
      {
        "patch": "max _ ending _ here = Math . max ( arr ) ;",
        "score": 99.44253976004464
      },
      {
        "patch": "max _ ending _ here = 1 + x ;",
        "score": 99.4208651455966
      },
      {
        "patch": "max _ ending _ here = max _ so _ far + 0 ;",
        "score": 99.43688151041667
      },
      {
        "patch": "if max _ ending _ here = max _ ending _ here / x ;",
        "score": 99.41305541992188
      },
      {
        "patch": "max _ so _ far = max _ so _ far + 1 ;",
        "score": 99.42825520833334
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here ? x ;",
        "score": 99.41228841145833
      },
      {
        "patch": "max _ ending _ here = max _ so _ far + $NUMBER$ ;",
        "score": 99.42366536458333
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here + x ; ;",
        "score": 99.41056060791016
      },
      {
        "patch": "max _ ending _ here = $NUMBER$ + max _ ending _ here ;",
        "score": 99.40775553385417
      },
      {
        "patch": "max _ so _ far = Math . max ( arr ) ;",
        "score": 99.41136823381696
      },
      {
        "patch": "max _ ending _ here += max _ ending _ here + 0 ;",
        "score": 99.40558268229167
      },
      {
        "patch": "max _ ending _ here += max _ ending _ here / x ;",
        "score": 99.40171712239584
      },
      {
        "patch": "max _ ending _ here = max _ so _ far ;",
        "score": 99.37560096153847
      },
      {
        "patch": "max _ ending _ here = x + max _ ending _ here ;",
        "score": 99.3977783203125
      },
      {
        "patch": "max _ ending _ here = max _ ending _ here +",
        "score": 99.35544996995192
      },
      {
        "patch": "max _ ending _ here = x ; }",
        "score": 99.39564819335938
      },
      {
        "patch": "max _ ending _ here = ( int ) x ;",
        "score": 99.35531616210938
      },
      {
        "patch": "max _ ending _ here += x ;",
        "score": 99.37902153862848
      },
      {
        "patch": "max _ ending _ here = x + x + x ;",
        "score": 99.35530911959134
      },
      {
        "patch": "max _ ending _ here = ( int ) 1 ;",
        "score": 99.31431070963542
      },
      {
        "patch": "max _ ending _ here = x + x ; }",
        "score": 99.34474690755208
      },
      {
        "patch": "if ( max _ ending _ here ) {",
        "score": 99.30643920898437
      },
      {
        "patch": "max _ ending _ here = 0 + x + x ;",
        "score": 99.3351299579327
      },
      {
        "patch": "for ( int x : arr ) {",
        "score": 99.26523166232639
      },
      {
        "patch": "max _ ending _ here = 0 + x ; }",
        "score": 99.33489990234375
      },
      {
        "patch": "max _ ending _ here += x + x ;",
        "score": 99.32090065696023
      },
      {
        "patch": "retval = max _ ending _ here + x ;",
        "score": 99.24708140980114
      },
      {
        "patch": "if ( max _ ending _ here + x ;",
        "score": 99.23871404474431
      },
      {
        "patch": "max _ ending _ here = 1 ;",
        "score": 99.29604763454861
      },
      {
        "patch": "max _ ending _ here = Math . max (",
        "score": 99.21666370738636
      },
      {
        "patch": "max _ ending _ here = $NUMBER$ + x + x ;",
        "score": 99.2869121844952
      },
      {
        "patch": "max _ so _ far = Math . max (",
        "score": 99.20872913707386
      },
      {
        "patch": "if max _ ending _ here = x ;",
        "score": 99.27468872070312
      },
      {
        "patch": "if max _ ending _ here = 0 + x ;",
        "score": 99.27454630533855
      },
      {
        "patch": "result = max _ ending _ here + x ;",
        "score": 99.18519176136364
      },
      {
        "patch": "if = max _ ending _ here + x ;",
        "score": 99.27199485085227
      },
      {
        "patch": "return max _ ending _ here + x ;",
        "score": 99.17665405273438
      },
      {
        "patch": "max _ ending _ here = $NUMBER$ + x ; }",
        "score": 99.26359049479167
      },
      {
        "patch": "max _ ending _ here = - 1 + x ;",
        "score": 99.25259399414062
      },
      {
        "patch": "max _ ending _ here = - 1 ;",
        "score": 99.15838623046875
      },
      {
        "patch": "max _ ending _ here = start + x ;",
        "score": 99.24724786931819
      },
      {
        "patch": "max _ ending _ here = false ;",
        "score": 99.15637885199652
      },
      {
        "patch": "if max _ ending _ here = x + x ;",
        "score": 99.24654134114583
      },
      {
        "patch": "max _ so _ far = 0 ;",
        "score": 99.15150960286458
      },
      {
        "patch": "max _ ending _ here = 0 + 1 ;",
        "score": 99.24253151633523
      },
      {
        "patch": "max _ ending _ here = x + 1 ;",
        "score": 99.24250932173295
      },
      {
        "patch": "max _ ending _ here -= x ;",
        "score": 99.14312744140625
      },
      {
        "patch": "max _ ending _ here = $NUMBER$ ;",
        "score": 99.228515625
      },
      {
        "patch": "max _ ending _ here = - x ;",
        "score": 99.1387451171875
      },
      {
        "patch": "max _ ending _ here = true ;",
        "score": 99.13389756944444
      },
      {
        "patch": "max _ ending _ here += 0 + x ;",
        "score": 99.2226895419034
      },
      {
        "patch": "int max _ ending _ here = 0 ;",
        "score": 99.12019653320313
      },
      {
        "patch": "max _ ending _ here = 1 + x ; }",
        "score": 99.22159830729167
      },
      {
        "patch": "if ( max _ so _ far ) {",
        "score": 99.11942138671876
      },
      {
        "patch": "max _ ending _ here = 0 + 0 ;",
        "score": 99.21673029119319
      },
      {
        "patch": "max _ so _ far = x ;",
        "score": 99.11201307508681
      },
      {
        "patch": "max _ ending _ here = x + 0 ;",
        "score": 99.20829634232955
      },
      {
        "patch": "byte [ ] arr : arr ) {",
        "score": 99.09219699435764
      },
      {
        "patch": "max _ ending _ here = $STRING$ ;",
        "score": 99.05746120876736
      },
      {
        "patch": "max _ ending _ here -- ;",
        "score": 99.18540954589844
      },
      {
        "patch": "if ( max _ ending _ here )",
        "score": 99.04569498697917
      },
      {
        "patch": "if max _ ending _ here = 0 ;",
        "score": 99.181298828125
      },
      {
        "patch": "max _ ending _ here =",
        "score": 99.04426792689732
      },
      {
        "patch": "max _ ending _ here = 1 ; }",
        "score": 99.17794189453124
      },
      {
        "patch": "max _ ending _ here += x ; }",
        "score": 99.16409912109376
      },
      {
        "patch": "max _ ending _ here ++ ;",
        "score": 98.97886657714844
      },
      {
        "patch": "int max _ ending _ here = x ;",
        "score": 99.14761352539062
      },
      {
        "patch": "max _ ending _ here = {",
        "score": 98.9460678100586
      },
      {
        "patch": "max _ ending _ here += 0 ;",
        "score": 99.14305284288194
      },
      {
        "patch": "synchronized ( arr ) {",
        "score": 98.74375406901042
      },
      {
        "patch": "-- x ;",
        "score": 97.80675506591797
      },
      {
        "patch": "try {",
        "score": 97.50855509440105
      },
      {
        "patch": "if (",
        "score": 97.18400065104167
      },
      {
        "patch": "break ;",
        "score": 96.97474161783855
      }
    ]
  },
  "MERGESORT-38-39": {
    "src": "if ( arr . size ( ) == 0 )",
    "patches": [
      {
        "patch": "if ( arr . size ( ) == 0 ) { return arr ; } else {",
        "score": 99.95806206597223
      },
      {
        "patch": "if ( arr . size ( ) == 0 )",
        "score": 99.83974387428977
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) { return arr ; }",
        "score": 99.93412780761719
      },
      {
        "patch": "if ( arr . size ( ) > 0 )",
        "score": 99.7200927734375
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) {",
        "score": 99.85361735026042
      },
      {
        "patch": "if ( arr . size ( ) != 0 ) { return arr ; } else {",
        "score": 99.78228081597223
      },
      {
        "patch": "if ( arr . size ( ) <= 0 )",
        "score": 99.646484375
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) { return arr ;",
        "score": 99.7553466796875
      },
      {
        "patch": "if ( arr . size ( ) != 0 )",
        "score": 99.60454767400569
      },
      {
        "patch": "if ( arr . size ( ) > 0 ) { return arr ; } else {",
        "score": 99.75434027777777
      },
      {
        "patch": "if ( arr . size ( ) > 0 ) {",
        "score": 99.59330240885417
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) { return arr ; } else",
        "score": 99.74254653033088
      },
      {
        "patch": "if ( arr . size ( ) >= 0 )",
        "score": 99.58844549005681
      },
      {
        "patch": "if ( arr . size ( ) != 0 ) { return arr ; }",
        "score": 99.74150085449219
      },
      {
        "patch": "if ( arr != null && arr . size ( ) == 0 )",
        "score": 99.56448567708334
      },
      {
        "patch": "if ( arr . is CaMeL Empty ( ) ) { return arr ; } else {",
        "score": 99.73495144314236
      },
      {
        "patch": "if ( arr != null || arr . size ( ) == 0 )",
        "score": 99.5598388671875
      },
      {
        "patch": "if ( arr . size ( ) == 1 ) { return arr ; } else {",
        "score": 99.73065863715277
      },
      {
        "patch": "if ( arr . is CaMeL Empty ( ) )",
        "score": 99.5569180575284
      },
      {
        "patch": "if ( arr != null && arr . size ( ) == 0 ) {",
        "score": 99.71581268310547
      },
      {
        "patch": "} if ( arr . size ( ) == 0 )",
        "score": 99.55520629882812
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) return arr ;",
        "score": 99.71504429408482
      },
      {
        "patch": "if ( arr . size ( ) < 0 )",
        "score": 99.55402166193181
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) return arr ; return arr ;",
        "score": 99.71186379825367
      },
      {
        "patch": "if ( arr . size ( ) == 1 )",
        "score": 99.54140403053977
      },
      {
        "patch": "if ( ! arr . size ( ) == 0 ) { return arr ; }",
        "score": 99.7037353515625
      },
      {
        "patch": "if ( arr == null || arr . size ( ) == 0 )",
        "score": 99.518359375
      },
      {
        "patch": "if ( arr . size ( ) > 0 ) { return arr ; }",
        "score": 99.67926788330078
      },
      {
        "patch": "else { if ( arr . size ( ) == 0 )",
        "score": 99.5110614483173
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) { return null ; }",
        "score": 99.676513671875
      },
      {
        "patch": "if ( arr == null && arr . size ( ) == 0 )",
        "score": 99.50205891927084
      },
      {
        "patch": "if ( arr . size ( ) == 1 ) { return arr ; }",
        "score": 99.6695327758789
      },
      {
        "patch": "if ( arr != null && arr . size ( ) > 0 )",
        "score": 99.50047200520834
      },
      {
        "patch": "if ( ! arr . size ( ) == 0 ) { return arr ;",
        "score": 99.66061401367188
      },
      {
        "patch": "} else if ( arr . size ( ) == 0 )",
        "score": 99.49867600661058
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) { return false ; }",
        "score": 99.65522766113281
      },
      {
        "patch": "if ( arr . size ( ) <= 0 ) {",
        "score": 99.48509724934895
      },
      {
        "patch": "if ( ! arr . size ( ) ) { return arr ; } else {",
        "score": 99.6431884765625
      },
      {
        "patch": "if ( ! arr . is CaMeL Empty ( ) )",
        "score": 99.48232014973958
      },
      {
        "patch": "if ( arr . size ( ) == $NUMBER$ ) { return arr ; }",
        "score": 99.6402359008789
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) return false ; else",
        "score": 99.47982584635416
      },
      {
        "patch": "if ( arr != null || arr . size ( ) == 0 ) {",
        "score": 99.6292495727539
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) break ; else",
        "score": 99.46722412109375
      },
      {
        "patch": "if ( arr . size ( ) <= 0 ) { return arr ; }",
        "score": 99.62505340576172
      },
      {
        "patch": "if ( ! arr . size ( ) == 0 )",
        "score": 99.4644775390625
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) return arr ; else {",
        "score": 99.62136840820312
      },
      {
        "patch": "if ( arr . size ( ) != 0 ) {",
        "score": 99.46255493164062
      },
      {
        "patch": "if ( arr == null && arr . size ( ) == 0 ) {",
        "score": 99.62108612060547
      },
      {
        "patch": "if ( arr != null || arr . size ( ) > 0 )",
        "score": 99.46209309895833
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) { return mergesort ; }",
        "score": 99.61417388916016
      },
      {
        "patch": "} if ( arr . size ( ) == 0 ) {",
        "score": 99.4603271484375
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) { return $STRING$ ; }",
        "score": 99.60400390625
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) return null ; else",
        "score": 99.45846354166666
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) { return true ; }",
        "score": 99.60359191894531
      },
      {
        "patch": "if ( arr . size ( ) >= 0 ) {",
        "score": 99.45121256510417
      },
      {
        "patch": "if ( arr . size ( ) > 1 )",
        "score": 99.44451349431819
      },
      {
        "patch": "} if ( arr . size ( ) > 0 )",
        "score": 99.44027709960938
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) { return $NUMBER$ ; }",
        "score": 99.58883666992188
      },
      {
        "patch": "if ( arr . size ( ) - 0 == 0 )",
        "score": 99.43914325420673
      },
      {
        "patch": "if ( arr . length == 0 ) { return arr ; } else {",
        "score": 99.58767700195312
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) return 0 ; else",
        "score": 99.43516438802084
      },
      {
        "patch": "if ( arr . size ( ) >= 0 ) { return arr ; }",
        "score": 99.58757781982422
      },
      {
        "patch": "if ( arr . size ( ) == $NUMBER$ )",
        "score": 99.4297762784091
      },
      {
        "patch": "if ( arr == null && arr . size ( ) > 0 )",
        "score": 99.42137044270834
      },
      {
        "patch": "if ( arr . size ( ) == arr . size ( ) ) {",
        "score": 99.58207702636719
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) break )",
        "score": 99.41502967247597
      },
      {
        "patch": "if ( ( arr . size ( ) == 0 ) ) { return arr ;",
        "score": 99.5793098000919
      },
      {
        "patch": "/ * if ( arr . size ( ) == 0 )",
        "score": 99.41248497596153
      },
      {
        "patch": "if ( arr . is CaMeL Empty ( ) ) {",
        "score": 99.5753173828125
      },
      {
        "patch": "if ( arr . size ( ) == 1 ) {",
        "score": 99.4014180501302
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) { { return arr ; }",
        "score": 99.57370174632354
      },
      {
        "patch": "/ * * if ( arr . size ( ) == 0 )",
        "score": 99.39930943080357
      },
      {
        "patch": "if ( arr . size ( ) == null ) { return arr ; }",
        "score": 99.57032775878906
      },
      {
        "patch": "} else { if ( arr . size ( ) == 0 )",
        "score": 99.39429582868304
      },
      {
        "patch": "if ( arr . size ( ) == - 1 ) { return arr ; }",
        "score": 99.56962316176471
      },
      {
        "patch": "} else if ( arr . size ( ) == 0 ) {",
        "score": 99.38992745535714
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) { return 0 ; }",
        "score": 99.56684112548828
      },
      {
        "patch": "else { if ( arr . size ( ) > 0 )",
        "score": 99.3887188251202
      },
      {
        "patch": "if ( arr . size ( ) == - 1 ) { return arr ;",
        "score": 99.5633773803711
      },
      {
        "patch": "if ( arr . size ( ) < 0 ) {",
        "score": 99.3861796061198
      },
      {
        "patch": "if ( arr . size ( ) != arr . size ( ) ) {",
        "score": 99.55364990234375
      },
      {
        "patch": "else if ( arr . size ( ) == 0 )",
        "score": 99.3826192220052
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) { { return arr ;",
        "score": 99.55303192138672
      },
      {
        "patch": "if ( arr . equals ( arr ) )",
        "score": 99.38060913085937
      },
      {
        "patch": "if ( arr . size ( ) != 0 ) { return arr ;",
        "score": 99.55148111979166
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) return false ;",
        "score": 99.37700544084821
      },
      {
        "patch": "if ( arr . size ( ) != 0 ) { return arr ; } else",
        "score": 99.54958926930146
      },
      {
        "patch": "if ( arr . size ( ) - 0 == 0 ) {",
        "score": 99.37504359654018
      },
      {
        "patch": "if ( arr . size ( ) > 0 ) { return arr ; } else",
        "score": 99.52768841911765
      },
      {
        "patch": "if ( arr . size ( ) <= 1 )",
        "score": 99.36967329545455
      },
      {
        "patch": "if ( ! arr . size ( ) . is CaMeL Empty ( ) ) {",
        "score": 99.52592198988971
      },
      {
        "patch": "} if ( arr . size ( ) > 0 ) {",
        "score": 99.3687744140625
      },
      {
        "patch": "if ( arr . get ( 0 ) == 0 )",
        "score": 99.36562093098958
      },
      {
        "patch": "if ( arr . size ( ) < 0 ) { return arr ; }",
        "score": 99.52253723144531
      },
      {
        "patch": "} if ( arr . size ( ) <= 0 )",
        "score": 99.36312866210938
      },
      {
        "patch": "if ( arr . size ( ) != 0 ) return arr ;",
        "score": 99.52233014787946
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) continue ; else",
        "score": 99.36155482700893
      },
      {
        "patch": "if ( arr . size ( ) > 0 ) { return arr ;",
        "score": 99.5159423828125
      },
      {
        "patch": "try { if ( arr . size ( ) == 0 )",
        "score": 99.35963792067308
      },
      {
        "patch": "if ( ! arr . size ( ) == 0 ) {",
        "score": 99.51548414963942
      },
      {
        "patch": "if ( arr != null )",
        "score": 99.35873849051339
      },
      {
        "patch": "if ( arr . size ( ) < $NUMBER$ ) { return arr ; }",
        "score": 99.51406860351562
      },
      {
        "patch": "if ( arr . size ( ) . length == 0 )",
        "score": 99.35695237379808
      },
      {
        "patch": "if ( arr . size ( ) < arr . size ( ) ) {",
        "score": 99.51145935058594
      },
      {
        "patch": "if ( [ ] . is CaMeL Empty ( ) )",
        "score": 99.35671997070312
      },
      {
        "patch": "if ( arr . size ( ) == 1 ) { return arr ; } else",
        "score": 99.50726677389706
      },
      {
        "patch": "} else if ( arr . size ( ) > 0 )",
        "score": 99.35152493990384
      },
      {
        "patch": "if ( arr . is CaMeL Empty ( ) ) { return arr ;",
        "score": 99.49641927083333
      },
      {
        "patch": "if ( arr . equals ( 0 ) )",
        "score": 99.35114135742188
      },
      {
        "patch": "if ( arr . size ( ) == $NUMBER$ ) {",
        "score": 99.49080403645833
      },
      {
        "patch": "} if ( arr . size ( ) != 0 )",
        "score": 99.34949747721355
      },
      {
        "patch": "if ( arr . size ( ) == 1 ) { return arr ;",
        "score": 99.48467610677083
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) return null ;",
        "score": 99.34922572544643
      },
      {
        "patch": "if ( arr . size ( ) > 0 ) return arr ;",
        "score": 99.4619140625
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) continue )",
        "score": 99.34725247896634
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) { continue ; }",
        "score": 99.46150716145833
      },
      {
        "patch": "if ( ( arr . size ( ) == 0 ) ) {",
        "score": 99.45732770647321
      },
      {
        "patch": "if ( arr . size ( ) == - 1 )",
        "score": 99.34521484375
      },
      {
        "patch": "if ( arr . size ( ) == $NUMBER$ ) { return arr ;",
        "score": 99.45516764322916
      },
      {
        "patch": "else { if ( arr . size ( ) == 0 ) {",
        "score": 99.34477887834821
      },
      {
        "patch": "if ( arr . is CaMeL Empty ( ) ) return arr ;",
        "score": 99.45306396484375
      },
      {
        "patch": "if ( arr . size ( ) > 1 ) {",
        "score": 99.34073893229167
      },
      {
        "patch": "if ( arr . contains ( arr . size ( ) ) ) {",
        "score": 99.44478352864583
      },
      {
        "patch": "if ( arr . length . size ( ) == 0 )",
        "score": 99.33836951622597
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) )",
        "score": 99.33748372395833
      },
      {
        "patch": "if ( arr . size ( ) == 1 ) return arr ;",
        "score": 99.43975830078125
      },
      {
        "patch": "} if ( arr . size ( ) >= 0 )",
        "score": 99.33622233072917
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( $NUMBER$ ) ;",
        "score": 99.43898362379808
      },
      {
        "patch": "if ( arr . size ( ) - 1 == 0 )",
        "score": 99.32874474158653
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) return arr ; else",
        "score": 99.43414713541667
      },
      {
        "patch": "if ( size . size ( ) == 0 )",
        "score": 99.328369140625
      },
      {
        "patch": "if ( arr . size ( ) == $NUMBER$ ) return arr ;",
        "score": 99.42908586774554
      },
      {
        "patch": "if ( arr . size ( ) > 0 ) break ; else",
        "score": 99.32749720982143
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) return 0 ;",
        "score": 99.32745361328125
      },
      {
        "patch": "if ( arr . size ( ) > $NUMBER$ )",
        "score": 99.32231001420455
      },
      {
        "patch": "if ( arr . size ( ) == 0 ) { {",
        "score": 99.41592172475961
      },
      {
        "patch": "if ( arr . size ( ) - 0 > 0 )",
        "score": 99.3174579326923
      },
      {
        "patch": "if ( arr . size ( ) == - 1 ) {",
        "score": 99.41541466346153
      },
      {
        "patch": "if ( ! arr . size ( ) ) {",
        "score": 99.410400390625
      },
      {
        "patch": "if ( arr . length == 0 ) {",
        "score": 99.31580810546875
      },
      {
        "patch": "if ( ! arr . is CaMeL Empty ( ) ) {",
        "score": 99.38289701021634
      },
      {
        "patch": "if ( arr . size ( ) >= 1 )",
        "score": 99.30999200994319
      },
      {
        "patch": "if ( arr . contains ( arr ) ) {",
        "score": 99.35692249644886
      },
      {
        "patch": "if ( list . size ( ) == 0 )",
        "score": 99.3042879971591
      },
      {
        "patch": "if ( arr . size ( ) == null ) {",
        "score": 99.32722981770833
      },
      {
        "patch": "if ( first . size ( ) == 0 )",
        "score": 99.3042325106534
      },
      {
        "patch": "while ( arr . size ( ) == 0 )",
        "score": 99.28764204545455
      },
      {
        "patch": "if ( is CaMeL Empty ( arr ) ) {",
        "score": 99.3021240234375
      },
      {
        "patch": "if ( arr . size ( ) < 1 )",
        "score": 99.27761008522727
      },
      {
        "patch": "if ( arr . length == 0 )",
        "score": 99.27195231119792
      },
      {
        "patch": "if ( arr . size ( ) != 1 )",
        "score": 99.27011940696023
      },
      {
        "patch": "if ( arr . size ( ) - 0 )",
        "score": 99.2664462002841
      },
      {
        "patch": "if ( arr . size ( ) <= $NUMBER$ )",
        "score": 99.26451526988636
      },
      {
        "patch": "if ( arr == null )",
        "score": 99.2584228515625
      },
      {
        "patch": "if ( arr . contains ( arr ) )",
        "score": 99.21776733398437
      },
      {
        "patch": "if ( arr != null ) {",
        "score": 99.2012710571289
      },
      {
        "patch": "if ( arr . contains ( 0 ) )",
        "score": 99.19829711914062
      },
      {
        "patch": "if ( arr != null ) return arr ;",
        "score": 99.1958984375
      },
      {
        "patch": "if ( arr == null ) {",
        "score": 99.03250122070312
      },
      {
        "patch": "if ( size ( ) == 0 )",
        "score": 99.09166802300348
      },
      {
        "patch": "if ( arr <= 0 ) {",
        "score": 98.88914489746094
      },
      {
        "patch": "if ( size == 0 )",
        "score": 99.05803571428571
      },
      {
        "patch": "super . mergesort ( arr ) ;",
        "score": 98.85246276855469
      },
      {
        "patch": "} if ( arr != null )",
        "score": 98.94554901123047
      },
      {
        "patch": "if ( size != 0 )",
        "score": 98.89357212611607
      },
      {
        "patch": "if ( false ) {",
        "score": 98.80673217773438
      },
      {
        "patch": "if ( arr != 0 )",
        "score": 98.86784144810268
      },
      {
        "patch": "if ( arr ) {",
        "score": 98.74609375
      },
      {
        "patch": "if ( size < 0 )",
        "score": 98.81250871930804
      },
      {
        "patch": "if ( length == 0 )",
        "score": 98.80463518415179
      },
      {
        "patch": "return mergesort ( arr ) ;",
        "score": 98.70620291573661
      },
      {
        "patch": "synchronized ( arr ) {",
        "score": 98.6595458984375
      },
      {
        "patch": "if ( arr )",
        "score": 98.60648193359376
      },
      {
        "patch": "if ( true ) {",
        "score": 98.65315755208333
      },
      {
        "patch": "synchronized ( arr )",
        "score": 98.54576416015625
      },
      {
        "patch": "boolean mergesort ( arr ) {",
        "score": 98.638916015625
      },
      {
        "patch": "/ * * /",
        "score": 98.46486206054688
      },
      {
        "patch": "if ( true )",
        "score": 98.3538330078125
      },
      {
        "patch": "return arr ; }",
        "score": 98.29559326171875
      },
      {
        "patch": "if ( false )",
        "score": 98.34808349609375
      },
      {
        "patch": "if ( arr [",
        "score": 98.17449951171875
      }
    ]
  },
  "MINIMUM_SPANNING_TREE-28-29": {
    "src": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
    "patches": [
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
        "score": 99.86060680042614
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ v ) ;",
        "score": 99.85221724076705
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u ) ; }",
        "score": 99.80213994565217
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , vertex _ v ) ;",
        "score": 99.84981595552884
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , node ) ;",
        "score": 99.79052734375
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , vertex _ u ) ;",
        "score": 99.80804912860577
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , node ) ;",
        "score": 99.7530850497159
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < > ( vertex _ v ) ) ;",
        "score": 99.8001239483173
      },
      {
        "patch": "group CaMeL By CaMeL Node . update ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
        "score": 99.7526522549716
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ v , vertex _ v ) ;",
        "score": 99.7955791766827
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , vertex _ u ) ;",
        "score": 99.74700927734375
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < > ( vertex _ u ) ) ;",
        "score": 99.78660231370192
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node , vertex _ u ) ;",
        "score": 99.74676513671875
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < > ( vertex _ v ) ) ;",
        "score": 99.78516564002403
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u ) ;",
        "score": 99.74660034179688
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , vertex _ v ) ; }",
        "score": 99.77694589120371
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node , node , vertex _ u ) ; }",
        "score": 99.74141261888587
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ v ) ; }",
        "score": 99.77066703464673
      },
      {
        "patch": "group CaMeL By CaMeL Node . update ( group CaMeL By CaMeL Node , node , vertex _ u ) ; }",
        "score": 99.7390773607337
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
        "score": 99.73029119318181
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < > ( vertex _ u ) ) ;",
        "score": 99.76882699819711
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node ) ;",
        "score": 99.70377197265626
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , vertex _ v ) ;",
        "score": 99.7659403483073
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , true ) ;",
        "score": 99.69392903645833
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < Node >> ( vertex _ v ) ) ;",
        "score": 99.762939453125
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , node , vertex _ u ) ; }",
        "score": 99.68937882133152
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ v , vertex _ u ) ;",
        "score": 99.76092059795673
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , node ) ; }",
        "score": 99.68635360054348
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < Node > ( vertex _ v ) ) ;",
        "score": 99.76058846932871
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node , vertex _ u ) ;",
        "score": 99.67696533203124
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < Node >> ( vertex _ u ) ) ;",
        "score": 99.75637478298611
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node , vertex _ u ) ; }",
        "score": 99.67585100446429
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < Node > ( vertex _ u ) ) ;",
        "score": 99.75420464409723
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node . get ( vertex _ u ) ) ;",
        "score": 99.67517620584239
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node , vertex _ v ) ;",
        "score": 99.75250244140625
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node ) ;",
        "score": 99.66993543836806
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < Node >> ( vertex _ v ) ) ;",
        "score": 99.74810112847223
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , false ) ;",
        "score": 99.66988118489583
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < Node > ( vertex _ v ) ) ;",
        "score": 99.74653682002315
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node . get ( node ) ) ;",
        "score": 99.66908482142857
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
        "score": 99.66650390625
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < > ( vertex _ v ) ) ; }",
        "score": 99.742919921875
      },
      {
        "patch": "group CaMeL By CaMeL Node . update ( group CaMeL By CaMeL Node , vertex _ u ) ;",
        "score": 99.66586303710938
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , vertex _ u , vertex _ v ) ;",
        "score": 99.74051339285714
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u ) ; }",
        "score": 99.66545758928571
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < Node >> ( vertex _ u ) ) ;",
        "score": 99.73840784143519
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u ) ; } }",
        "score": 99.65941365559895
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < Node > ( vertex _ u ) ) ;",
        "score": 99.73819082754629
      },
      {
        "patch": "group CaMeL By CaMeL Node . update ( group CaMeL By CaMeL Node , vertex _ u , vertex _ u ) ;",
        "score": 99.65926106770833
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , vertex _ u ) ; }",
        "score": 99.73479094328704
      },
      {
        "patch": "group CaMeL By CaMeL Node . update ( group CaMeL By CaMeL Node , node , vertex _ u , node ) ;",
        "score": 99.65707397460938
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node , vertex _ u , vertex _ v ) ;",
        "score": 99.73379080636161
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node . get ( node ) ) ; }",
        "score": 99.65418590198864
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node , node ) ;",
        "score": 99.64373779296875
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < > ( vertex _ v ) ) ; }",
        "score": 99.72908528645833
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , group CaMeL By CaMeL Node ) ;",
        "score": 99.64314778645833
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < > ( vertex _ u ) ) ; }",
        "score": 99.72888635706019
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node , node ) ;",
        "score": 99.64295543323864
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , 0 ) ;",
        "score": 99.6419169108073
      },
      {
        "patch": "group CaMeL By CaMeL Node . update ( group CaMeL By CaMeL Node , vertex _ u ) ; }",
        "score": 99.64175269717262
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ v , vertex _ v ) ; }",
        "score": 99.72591145833333
      },
      {
        "patch": "this . group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
        "score": 99.64136759440105
      },
      {
        "patch": "group CaMeL By CaMeL Node . update ( group CaMeL By CaMeL Node , vertex _ u , node ) ;",
        "score": 99.6409579190341
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , vertex _ v , vertex _ v ) ;",
        "score": 99.72297886439732
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( node , group CaMeL By CaMeL Node , node , vertex _ u ) ;",
        "score": 99.64028930664062
      },
      {
        "patch": "group CaMeL By CaMeL Node = new Hash CaMeL Set < > ( Arrays . as CaMeL List ( vertex _ v ) ) ;",
        "score": 99.72178297776442
      },
      {
        "patch": "group CaMeL By CaMeL Node . update ( group CaMeL By CaMeL Node , node , node , vertex _ u ) ;",
        "score": 99.63991292317708
      },
      {
        "patch": "group CaMeL By CaMeL Node = new Hash CaMeL Set < > ( group CaMeL By CaMeL Node . get ( vertex _ v ) ) ;",
        "score": 99.71552385602679
      },
      {
        "patch": "update ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
        "score": 99.63699340820312
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ v ) ;",
        "score": 99.7148193359375
      },
      {
        "patch": "group CaMeL By CaMeL Node . set ( group CaMeL By CaMeL Node , node , vertex _ u ) ; }",
        "score": 99.6365382982337
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < > ( vertex _ u ) ) ; }",
        "score": 99.71225766782408
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , true ) ;",
        "score": 99.6316650390625
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , node , vertex _ v ) ;",
        "score": 99.71181815011161
      },
      {
        "patch": "group CaMeL By CaMeL Node . set ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
        "score": 99.6296719637784
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ u , group CaMeL By CaMeL Node . get ( vertex _ v ) ) ;",
        "score": 99.71115451388889
      },
      {
        "patch": "group CaMeL By CaMeL Node = add ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
        "score": 99.62553267045455
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , update ( group CaMeL By CaMeL Node , node ) ) ;",
        "score": 99.70637116608796
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( update ( group CaMeL By CaMeL Node , vertex _ u ) ) ;",
        "score": 99.62498938519022
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ v , vertex _ v ) ;",
        "score": 99.7055155436198
      },
      {
        "patch": "group CaMeL By CaMeL Node = get ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
        "score": 99.6238680752841
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u ) ; ;",
        "score": 99.6210300611413
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node . get ( vertex _ v ) ) ;",
        "score": 99.7020953634511
      },
      {
        "patch": "group CaMeL By CaMeL Node . update ( group CaMeL By CaMeL Node , vertex _ u , node ) ; }",
        "score": 99.6166461447011
      },
      {
        "patch": "group CaMeL By CaMeL Node = new Hash CaMeL Set < > ( Arrays . as CaMeL List ( vertex _ u ) ) ;",
        "score": 99.69977276141827
      },
      {
        "patch": "group CaMeL By CaMeL Node = add ( group CaMeL By CaMeL Node , node , vertex _ u ) ; }",
        "score": 99.6132281759511
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ v , node ) ;",
        "score": 99.69883219401042
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node , true ) ;",
        "score": 99.61278187144886
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ v , group CaMeL By CaMeL Node . get ( vertex _ v ) ) ;",
        "score": 99.69643373842592
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node , vertex _ u , node ) ;",
        "score": 99.61274857954545
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , node , vertex _ v ) ;",
        "score": 99.6961200420673
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , vertex _ u ) ; }",
        "score": 99.61003766741071
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , vertex _ v ) ; }",
        "score": 99.69451171875
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node . vertex _ u ) ;",
        "score": 99.60723322088069
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( update ( group CaMeL By CaMeL Node , node , vertex _ u ) ) ;",
        "score": 99.69353515625
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , true ) ;",
        "score": 99.60585715553977
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , node , vertex _ u ) ;",
        "score": 99.6931621844952
      },
      {
        "patch": "group CaMeL By CaMeL Node . clear ( group CaMeL By CaMeL Node , node , vertex _ u ) ; }",
        "score": 99.6052776834239
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ v ) ; } }",
        "score": 99.69100952148438
      },
      {
        "patch": "group CaMeL By CaMeL Node . clear ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
        "score": 99.60175115411931
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , false ) ;",
        "score": 99.60147705078126
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( update ( group CaMeL By CaMeL Node , node , vertex _ v ) ) ;",
        "score": 99.68662109375
      },
      {
        "patch": "group CaMeL By CaMeL Node = copy ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
        "score": 99.60111860795455
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node . get ( vertex _ v ) ) ;",
        "score": 99.68284009850544
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node , node , node ) ;",
        "score": 99.600927734375
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node , vertex _ v ) ; }",
        "score": 99.680400390625
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node , vertex _ u , node ) ; }",
        "score": 99.60022503396739
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ v , vertex _ u ) ;",
        "score": 99.67857869466145
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( node , vertex _ u , node , vertex _ u ) ;",
        "score": 99.60009765625
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node , vertex _ u ) ; }",
        "score": 99.672021484375
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node ) ;",
        "score": 99.5983657836914
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u ,",
        "score": 99.66480654761905
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node ) ; }",
        "score": 99.59552873883929
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node . get ( vertex _ u ) ) ;",
        "score": 99.66225798233695
      },
      {
        "patch": "group CaMeL By CaMeL Node . remove ( group CaMeL By CaMeL Node , node , vertex _ u ) ; }",
        "score": 99.59506623641305
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , node ) ;",
        "score": 99.66080050998264
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node = node , vertex _ u ) ; }",
        "score": 99.59422766644022
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , vertex _ u ) ;",
        "score": 99.58841552734376
      },
      {
        "patch": "group CaMeL By CaMeL Node . copy ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
        "score": 99.58783513849431
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node . vertex _ v ) ;",
        "score": 99.64354359019886
      },
      {
        "patch": "update ( group CaMeL By CaMeL Node , node , vertex _ u , node ) ;",
        "score": 99.58765326605902
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ u , vertex _ u ) ;",
        "score": 99.64341905381944
      },
      {
        "patch": "update ( group CaMeL By CaMeL Node , node , vertex _ u , vertex _ u ) ;",
        "score": 99.58547973632812
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( node , vertex _ u , vertex _ u ) ;",
        "score": 99.584326171875
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , parent , vertex _ u ) ;",
        "score": 99.58392888849431
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node ,",
        "score": 99.6395263671875
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( node , node , vertex _ u ) ;",
        "score": 99.58346218532986
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ v ) ; }",
        "score": 99.63568405877976
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( node , vertex _ u , node ) ;",
        "score": 99.58291965060764
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node . node $NUMBER$ ) ;",
        "score": 99.63195219494048
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node ) ;",
        "score": 99.58206939697266
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node ) ; }",
        "score": 99.62240439967105
      },
      {
        "patch": "group CaMeL By CaMeL Node . update ( group CaMeL By CaMeL Node , node , node ) ;",
        "score": 99.58106079101563
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , null ) ;",
        "score": 99.61883544921875
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ v , vertex _ u ) ;",
        "score": 99.61507839626736
      },
      {
        "patch": "group CaMeL By CaMeL Node . update ( group CaMeL By CaMeL Node , node ) ;",
        "score": 99.56668429904514
      },
      {
        "patch": "group CaMeL By CaMeL Node = group CaMeL By CaMeL Node . get ( vertex _ v ) ;",
        "score": 99.61224975585938
      },
      {
        "patch": "update ( group CaMeL By CaMeL Node , node , vertex _ u ) ; }",
        "score": 99.5607048483456
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( node , vertex _ u ) ;",
        "score": 99.55398559570312
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , node ) ; }",
        "score": 99.60333573190789
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , node , node ) ;",
        "score": 99.5538330078125
      },
      {
        "patch": "if ( ! group CaMeL By CaMeL Node . contains CaMeL Key ( vertex _ u ) ) {",
        "score": 99.60189819335938
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node , node ) ; }",
        "score": 99.55229749177632
      },
      {
        "patch": "if ( ! group CaMeL By CaMeL Node . contains CaMeL Key ( vertex _ v ) ) {",
        "score": 99.60110473632812
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , $NUMBER$ ) ;",
        "score": 99.5494384765625
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( node , node , vertex _ u , node ) ;",
        "score": 99.54791259765625
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ u , vertex _ v ) ;",
        "score": 99.58917914496527
      },
      {
        "patch": "group CaMeL By CaMeL Node . set ( group CaMeL By CaMeL Node , vertex _ u ) ;",
        "score": 99.54771728515625
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , edge ) ;",
        "score": 99.58878580729167
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( vertex _ u , node , vertex _ u ) ;",
        "score": 99.54695434570313
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , null ) ;",
        "score": 99.58672417534723
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( node , vertex _ u ) ;",
        "score": 99.54125213623047
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , false ) ;",
        "score": 99.58416748046875
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ u , vertex _ u ) ; }",
        "score": 99.57723838404605
      },
      {
        "patch": "update ( group CaMeL By CaMeL Node , node , node , vertex _ u ) ;",
        "score": 99.52787950303819
      },
      {
        "patch": "add ( update ( group CaMeL By CaMeL Node , node , vertex _ v ) ) ;",
        "score": 99.57721910978618
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( node , group CaMeL By CaMeL Node ) ;",
        "score": 99.52675374348958
      },
      {
        "patch": "add ( update ( group CaMeL By CaMeL Node , node , vertex _ u ) ) ;",
        "score": 99.57278603001645
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node , true ) ;",
        "score": 99.51845296223958
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ u , edge ) ;",
        "score": 99.56915283203125
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( node , vertex _ u ) ; }",
        "score": 99.5053351907169
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ v , vertex _ v ) ;",
        "score": 99.56598578559027
      },
      {
        "patch": "update ( group CaMeL By CaMeL Node , vertex _ u , node ) ;",
        "score": 99.49571990966797
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , true ) ;",
        "score": 99.56336127387152
      },
      {
        "patch": "group CaMeL By CaMeL Node . update ( node , vertex _ u ) ;",
        "score": 99.49454498291016
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ v , edge ) ;",
        "score": 99.54840850830078
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( node ) ;",
        "score": 99.4934794108073
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ u , node ) ;",
        "score": 99.53639221191406
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( vertex _ u , node ) ;",
        "score": 99.4858169555664
      },
      {
        "patch": "add ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
        "score": 99.52751159667969
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( node , vertex _ u ) ;",
        "score": 99.47716522216797
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( vertex _ v , node ) ;",
        "score": 99.5079116821289
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( node , node ) ;",
        "score": 99.46481759207589
      },
      {
        "patch": "update ( group CaMeL By CaMeL Node , vertex _ u ) ;",
        "score": 99.46433803013393
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( edge , edge ) ;",
        "score": 99.41892787388393
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( node , node ) ;",
        "score": 99.44324602399554
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( edge , node ) ;",
        "score": 99.41232735770089
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( node , node ) ;",
        "score": 99.43406459263393
      },
      {
        "patch": "group CaMeL By CaMeL Node . put ( node , edge ) ;",
        "score": 99.40140206473214
      },
      {
        "patch": "group CaMeL By CaMeL Node . add ( node ) ;",
        "score": 99.4326883951823
      },
      {
        "patch": "group CaMeL By CaMeL Node = update ( edge ) ;",
        "score": 99.38960774739583
      },
      {
        "patch": "update ( group CaMeL By CaMeL Node , node , node ) ;",
        "score": 99.40643310546875
      },
      {
        "patch": "add ( edge ) ;",
        "score": 98.36260986328125
      }
    ]
  },
  "NEXT_PALINDROME-35-36": {
    "src": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
    "patches": [
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.89415973165761
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.85528273809524
      },
      {
        "patch": "otherwise . add ( 1 ) ; otherwise . add ( 1 ) ; otherwise . add ( 1 ) ;",
        "score": 99.84857732599431
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list , 0 ) ) ;",
        "score": 99.77795991443452
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . size ( ) , 0 ) ) ;",
        "score": 99.77341627038044
      },
      {
        "patch": "List < Integer > otherwise = new Array CaMeL List < Integer > ( ) ; otherwise . add ( 1 ) ;",
        "score": 99.75431315104167
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , $NUMBER$ ) ) ;",
        "score": 99.73388671875
      },
      {
        "patch": "if ( low _ mid != high _ mid ) { digit _ list [ high _ mid ] += 1 ; }",
        "score": 99.7328592936198
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 1 ) ) ;",
        "score": 99.73200789741848
      },
      {
        "patch": "otherwise . add ( 1 ) ; otherwise . add ( 1 ) ; otherwise . add ( $NUMBER$ ) ;",
        "score": 99.73109019886364
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list , 0 ) ) ;",
        "score": 99.73136179070724
      },
      {
        "patch": "otherwise . add ( digit _ list ) ; otherwise . add ( 1 ) ; otherwise . add ( 1 ) ;",
        "score": 99.7265625
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . size , 0 ) ) ;",
        "score": 99.73094641644022
      },
      {
        "patch": "otherwise . add ( $NUMBER$ ) ; otherwise . add ( 1 ) ; otherwise . add ( 1 ) ;",
        "score": 99.72480912642045
      },
      {
        "patch": "otherwise . add ( 1 ) ; otherwise . add ( $NUMBER$ ) ; otherwise . add ( 1 ) ;",
        "score": 99.72017045454545
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . size , 0 ) ) ;",
        "score": 99.70150902157738
      },
      {
        "patch": "otherwise . add ( 1 ) ; otherwise . add ( 1 ) ;",
        "score": 99.71844075520833
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list , 0 , 0 ) ) ;",
        "score": 99.6922023607337
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length - 0 ) ) ;",
        "score": 99.68442170516305
      },
      {
        "patch": "otherwise . add ( 1 ) ; return String . value CaMeL Of ( otherwise ) ;",
        "score": 99.69756401909723
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length , $NUMBER$ ) ) ;",
        "score": 99.68126860119048
      },
      {
        "patch": "if ( low _ mid != high _ mid ) { digit _ list [ high _ mid ] += 1 ;",
        "score": 99.69101350203805
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length , 1 ) ) ;",
        "score": 99.6811755952381
      },
      {
        "patch": "add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.69080171130952
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list , digit _ list ) ) ;",
        "score": 99.67612092391305
      },
      {
        "patch": "loop . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.68505859375
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length ) ) ;",
        "score": 99.66893368675595
      },
      {
        "patch": "if ( low _ mid != high _ mid ) { digit _ list [ low _ mid ] += 1 ;",
        "score": 99.68003778872283
      },
      {
        "patch": "otherwise . put CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.65969981317934
      },
      {
        "patch": "otherwise . add ( 1 ) ; return String . value CaMeL Of ( digit _ list ) ;",
        "score": 99.67758178710938
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . size ( ) ) ) ;",
        "score": 99.65967858355978
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list , length , 0 ) ) ;",
        "score": 99.65867017663044
      },
      {
        "patch": "otherwise . add ( digit _ list ) ; otherwise . add ( digit _ list ) ;",
        "score": 99.65531841077302
      },
      {
        "patch": "list . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.64798106317934
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length , 0 , 0 ) ) ;",
        "score": 99.64619777513587
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . 0 , 0 ) ) ;",
        "score": 99.64501953125
      },
      {
        "patch": "queue . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.63709026834239
      },
      {
        "patch": "otherwise . set CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.6434909986413
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list , 0 , 0 ) ) ;",
        "score": 99.63926478794643
      },
      {
        "patch": "otherwise . add ( digit _ list ) ; return String . value CaMeL Of ( otherwise ) ;",
        "score": 99.62759399414062
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , digit ) ) ;",
        "score": 99.63879925271739
      },
      {
        "patch": "Array CaMeL List < Integer > otherwise = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.62628495065789
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . size ( ) , 1 ) ) ;",
        "score": 99.63302479619566
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . iterator ( ) , 0 ) ) ;",
        "score": 99.62889563519022
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list ) ; otherwise . add CaMeL All ( digit _ list ) ;",
        "score": 99.62266474184783
      },
      {
        "patch": "add . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.62863026494566
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length - 1 ) ) ;",
        "score": 99.6216351052989
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list . length , 0 ) ;",
        "score": 99.6265869140625
      },
      {
        "patch": "if ( low _ mid < high _ mid ) { digit _ list [ high _ mid ] += 1 ;",
        "score": 99.61886463994566
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length - 0 , 0 ) ) ;",
        "score": 99.62596594769022
      },
      {
        "patch": "otherwise . add ( 1 ) ; otherwise . add CaMeL All ( digit _ list ) ;",
        "score": 99.61700760690789
      },
      {
        "patch": "otherwise . remove CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.62423573369566
      },
      {
        "patch": "otherwise . add ( digit _ list ) ; return String . value CaMeL Of ( digit _ list ) ;",
        "score": 99.61637739701705
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length , digit _ list ) ) ;",
        "score": 99.6239597486413
      },
      {
        "patch": "if ( high _ mid != high _ mid ) { digit _ list [ high _ mid ] += 1 ;",
        "score": 99.61551036005434
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length + 0 ) ) ;",
        "score": 99.62338654891305
      },
      {
        "patch": "synchronized ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) {",
        "score": 99.6131591796875
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . size ( ) , $NUMBER$ ) ) ;",
        "score": 99.62245244565217
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list , digit _ list ) ) ;",
        "score": 99.62188430059524
      },
      {
        "patch": "q . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.60889733355978
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length , 0 , $NUMBER$ ) ) ;",
        "score": 99.60887610394022
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list , length ) ) ;",
        "score": 99.61817568824405
      },
      {
        "patch": "if ( low _ mid < high _ mid ) { digit _ list [ low _ mid ] += 1 ;",
        "score": 99.60827105978261
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length - 0 ) ) ;",
        "score": 99.61290922619048
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( 0 , 0 ) ) ;",
        "score": 99.61201557360198
      },
      {
        "patch": "if ( high _ mid != high _ mid ) { digit _ list [ low _ mid ] += 1 ;",
        "score": 99.60457710597827
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ; }",
        "score": 99.6109952059659
      },
      {
        "patch": "add ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.60345137746711
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list ) ; otherwise . add ( 1 ) ;",
        "score": 99.6024169921875
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length ) ) ;",
        "score": 99.60069515830592
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list ) ; return String . value CaMeL Of ( otherwise ) ;",
        "score": 99.60105202414773
      },
      {
        "patch": "otherwise . add ( digit _ list . length , 0 ) ;",
        "score": 99.59751674107143
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list ) ; otherwise . add ( digit _ list ) ;",
        "score": 99.60093470982143
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list [ 0 ] , 0 ) ) ;",
        "score": 99.59724564985795
      },
      {
        "patch": "if ( low _ mid != high _ mid ) { digit _ list [ high _ mid ] = 1 ;",
        "score": 99.5989406419837
      },
      {
        "patch": "} otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.59416060014205
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list , 1 ) ) ;",
        "score": 99.59406389508929
      },
      {
        "patch": "otherwise . add ( digit _ list ) ; otherwise . add ( 1 ) ;",
        "score": 99.59756290211396
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list , 0 ) ;",
        "score": 99.59311349051339
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . 0 , 0 ) ) ;",
        "score": 99.59302920386905
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list , length , 0 ) ) ;",
        "score": 99.59099469866071
      },
      {
        "patch": "otherwise . add ( 1 ) ; return String . value CaMeL Of ( otherwise ) ; }",
        "score": 99.58474892064145
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list . size ( ) ) ;",
        "score": 99.58952331542969
      },
      {
        "patch": "add . add ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.58698381696429
      },
      {
        "patch": "otherwise . add ( 1 ) ; otherwise . add ( digit _ list ) ;",
        "score": 99.57589901194854
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . size ( ) ) ) ;",
        "score": 99.58211263020833
      },
      {
        "patch": "loop . add ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
        "score": 99.57398623511905
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length , digit ) ) ;",
        "score": 99.58120582217262
      },
      {
        "patch": "otherwise . add ( 1 ) ; return String . value CaMeL Of ( otherwise . size ( ) ) ;",
        "score": 99.57373046875
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list , digit _ list . length , 0 ) ;",
        "score": 99.58076782226563
      },
      {
        "patch": "otherwise . add ( 1 ) ; return Arrays . to CaMeL String ( digit _ list ) ;",
        "score": 99.57355346679688
      },
      {
        "patch": "List < Integer > otherwise = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.57188505284927
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list ( digit _ list . length , 0 ) ) ;",
        "score": 99.57177734375
      },
      {
        "patch": "otherwise . add ( digit _ list ) ; otherwise . add CaMeL All ( digit _ list ) ;",
        "score": 99.56746419270833
      },
      {
        "patch": "otherwise . add ( String . value CaMeL Of ( otherwise ) ) ;",
        "score": 99.56673990885416
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( $NUMBER$ , 0 ) ) ;",
        "score": 99.56573165090461
      },
      {
        "patch": "int high _ mid = Math . floor CaMeL Div ( digit _ list . length , 0 ) ;",
        "score": 99.56532505580357
      },
      {
        "patch": "otherwise . add ( digit _ list [ digit _ list . length - 1 ] ) ;",
        "score": 99.55955746299342
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list , digit _ list , 0 ) ;",
        "score": 99.55751546223958
      },
      {
        "patch": "otherwise . add ( $NUMBER$ ) ; return String . value CaMeL Of ( otherwise ) ;",
        "score": 99.55313449435764
      },
      {
        "patch": "otherwise . add ( digit _ list . size ( ) ) ;",
        "score": 99.55602155412946
      },
      {
        "patch": "otherwise . add ( String . value CaMeL Of ( digit _ list ) ) ;",
        "score": 99.54967543658088
      },
      {
        "patch": "return Collections . n CaMeL Copies ( digit _ list . length , 0 ) ;",
        "score": 99.5546515969669
      },
      {
        "patch": "otherwise . add ( 1 ) ; return String . value CaMeL Of ( low _ mid ) ;",
        "score": 99.54478759765625
      },
      {
        "patch": "otherwise . add ( digit _ list [ digit _ list . length , 0 ) ;",
        "score": 99.54852294921875
      },
      {
        "patch": "otherwise . add CaMeL All ( new Array CaMeL List < Integer > ( ) ) ;",
        "score": 99.54399956597223
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list ) ) ;",
        "score": 99.54726690995066
      },
      {
        "patch": "if ( low _ mid != high _ mid ) {",
        "score": 99.54150390625
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit , 0 ) ) ;",
        "score": 99.5465152138158
      },
      {
        "patch": "otherwise . add ( $NUMBER$ ) ; otherwise . add ( 1 ) ;",
        "score": 99.53719075520833
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list , 1 ) ) ;",
        "score": 99.5455258018092
      },
      {
        "patch": "otherwise . add ( 1 ) ; otherwise . add ( $NUMBER$ ) ;",
        "score": 99.534130859375
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit _ list , length ) ) ;",
        "score": 99.54447214226974
      },
      {
        "patch": "otherwise . add ( digit _ list ) ; otherwise . add ( low _ mid ) ;",
        "score": 99.53293328536184
      },
      {
        "patch": "add CaMeL All ( Collections . n CaMeL Copies ( digit _ list , 0 ) ) ;",
        "score": 99.53843287417763
      },
      {
        "patch": "Collection < Integer > otherwise = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.52964154411765
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( 0 , 0 ) ) ;",
        "score": 99.53488338694854
      },
      {
        "patch": "otherwise . add ( digit _ list ) ; otherwise . add ( otherwise ) ;",
        "score": 99.51973230698529
      },
      {
        "patch": "otherwise . add ( digit _ list [ digit _ list . size ( ) ] ) ;",
        "score": 99.53306820518092
      },
      {
        "patch": "otherwise . add ( Arrays . to CaMeL String ( digit _ list ) ) ;",
        "score": 99.51349954044117
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( 1 , 0 ) ) ;",
        "score": 99.53191817434211
      },
      {
        "patch": "otherwise . add ( low _ mid ) ; otherwise . add ( 1 ) ;",
        "score": 99.51202751608456
      },
      {
        "patch": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit ) ) ;",
        "score": 99.52369600183823
      },
      {
        "patch": "if ( digit _ list . length && low _ mid != high _ mid ) {",
        "score": 99.51118299696181
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list . length , digit _ list ) ;",
        "score": 99.52208116319444
      },
      {
        "patch": "Vector < Integer > otherwise = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.51055549172794
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list , 0 , 0 ) ;",
        "score": 99.5192642211914
      },
      {
        "patch": "otherwise . add ( high _ mid ) ; otherwise . add ( 1 ) ;",
        "score": 99.50453814338235
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list , digit _ list ) ;",
        "score": 99.51643371582031
      },
      {
        "patch": "synchronized ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) )",
        "score": 99.50413682725694
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list . length ( ) ) ;",
        "score": 99.51605224609375
      },
      {
        "patch": "otherwise . add ( String . value CaMeL Of ( low _ mid ) ) ;",
        "score": 99.49098115808823
      },
      {
        "patch": "otherwise . add ( 0 ) ; otherwise . add ( 0 ) ;",
        "score": 99.5053955078125
      },
      {
        "patch": "otherwise . add ( Collections . to CaMeL String ( digit _ list ) ) ;",
        "score": 99.48963838465073
      },
      {
        "patch": "otherwise . add ( digit _ list , 0 ) ;",
        "score": 99.49901326497395
      },
      {
        "patch": "otherwise . add ( 1 ) ; otherwise . add ( high _ mid ) ;",
        "score": 99.48806583180146
      },
      {
        "patch": "otherwise . add ( digit _ list . size ( ) , 0 ) ;",
        "score": 99.49805450439453
      },
      {
        "patch": "int high _ mid = Math . floor CaMeL Div ( digit _ list ) ;",
        "score": 99.48243623621323
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit , 0 ) ) ;",
        "score": 99.478759765625
      },
      {
        "patch": "otherwise . add ( 1 ) ; otherwise . add ( 0 ) ;",
        "score": 99.471337890625
      },
      {
        "patch": "otherwise . add ( digit _ list [ 0 ] ) ;",
        "score": 99.47813063401442
      },
      {
        "patch": "otherwise . add ( 0 ) ; otherwise . add ( 1 ) ;",
        "score": 99.47027180989583
      },
      {
        "patch": "otherwise . add ( digit _ list . to CaMeL String ( ) ) ;",
        "score": 99.47139739990234
      },
      {
        "patch": "if ( digit _ list [ high _ mid ] == $NUMBER$ ) {",
        "score": 99.437451171875
      },
      {
        "patch": "otherwise . add ( digit _ list . size ( ) - 1 ) ;",
        "score": 99.45785522460938
      },
      {
        "patch": "return String . value CaMeL Of ( digit _ list ) ;",
        "score": 99.43246694711539
      },
      {
        "patch": "otherwise . add ( digit _ list . size ( ) - 0 ) ;",
        "score": 99.45423889160156
      },
      {
        "patch": "otherwise . add ( otherwise ) ; otherwise . add ( 1 ) ;",
        "score": 99.43003743489584
      },
      {
        "patch": "otherwise . add ( $NUMBER$ ) ; otherwise . add ( 0 ) ;",
        "score": 99.44383138020834
      },
      {
        "patch": "return String . value CaMeL Of ( otherwise ) ;",
        "score": 99.4108553799716
      },
      {
        "patch": "otherwise . add ( Collections . n CaMeL Copies ( digit ) ) ;",
        "score": 99.439208984375
      },
      {
        "patch": "if ( high _ mid != high _ mid ) {",
        "score": 99.40559895833333
      },
      {
        "patch": "otherwise . add ( digit _ list . length ( ) ) ;",
        "score": 99.42642647879464
      },
      {
        "patch": "otherwise . add ( digit _ list . length - 1 ) ;",
        "score": 99.39717320033482
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list [ 0 ] ) ;",
        "score": 99.42220052083333
      },
      {
        "patch": "otherwise . add ( 1 ) . add ( 1 ) ;",
        "score": 99.373046875
      },
      {
        "patch": "if ( low _ mid < high _ mid ) {",
        "score": 99.362060546875
      },
      {
        "patch": "return Collections . n CaMeL Copies ( digit _ list , 0 ) ;",
        "score": 99.41708170572916
      },
      {
        "patch": "add ( 1 ) ; otherwise . add ( 1 ) ;",
        "score": 99.35440767728366
      },
      {
        "patch": "otherwise . add ( digit _ list . length , 1 ) ;",
        "score": 99.38157435825893
      },
      {
        "patch": "add ( String . value CaMeL Of ( otherwise ) ) ;",
        "score": 99.3534405048077
      },
      {
        "patch": "otherwise . add ( digit _ list , digit _ list ) ;",
        "score": 99.38154820033482
      },
      {
        "patch": "otherwise . add ( digit _ list ) ; return otherwise ;",
        "score": 99.34015362079327
      },
      {
        "patch": "otherwise . add ( digit _ list [ length ] ) ;",
        "score": 99.37143179086539
      },
      {
        "patch": "otherwise . add ( 1 ) ;",
        "score": 99.33097839355469
      },
      {
        "patch": "otherwise . add ( 0 ) . add ( 0 ) ;",
        "score": 99.34164663461539
      },
      {
        "patch": "otherwise . add CaMeL All ( digit _ list ) ;",
        "score": 99.31658935546875
      },
      {
        "patch": "otherwise . add ( digit _ list ) ;",
        "score": 99.31317138671875
      },
      {
        "patch": "otherwise . add ( 1 ) ; return otherwise ;",
        "score": 99.31162331321023
      },
      {
        "patch": "otherwise . add ( new Integer ( 0 ) ) ;",
        "score": 99.28515625
      },
      {
        "patch": "if ( low _ mid >= high _ mid ) {",
        "score": 99.30746459960938
      },
      {
        "patch": "otherwise . add ( 0 ) ;",
        "score": 99.24333953857422
      },
      {
        "patch": "if ( low _ mid != high _ mid )",
        "score": 99.28728693181819
      },
      {
        "patch": "if ( digit _ list . length > 0 )",
        "score": 99.23439719460227
      },
      {
        "patch": "otherwise . add ( 1 ) ; return $STRING$ ;",
        "score": 99.27407004616477
      },
      {
        "patch": "otherwise . add ( 0 , 0 ) ;",
        "score": 99.20322265625
      },
      {
        "patch": "otherwise . add ( 1 ) ; break ; }",
        "score": 99.2278164950284
      },
      {
        "patch": "otherwise . add ( $NUMBER$ ) ;",
        "score": 99.16343688964844
      },
      {
        "patch": "otherwise . add ( 1 ) ; break ;",
        "score": 99.18768310546875
      },
      {
        "patch": "otherwise . add ( 1 ) ; }",
        "score": 99.14798990885417
      },
      {
        "patch": "otherwise . add ( 0 ) ; }",
        "score": 99.07392035590277
      }
    ]
  },
  "NEXT_PERMUTATION-19-20": {
    "src": "if ( perm . get ( j ) < perm . get ( i ) ) {",
    "patches": [
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) {",
        "score": 99.87936062282986
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = perm . size ( ) - 1 ;",
        "score": 99.8635771780303
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) && perm . get ( i ) < perm . get ( i ) ) {",
        "score": 99.85305786132812
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) )",
        "score": 99.84138758042279
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm ; j != i ; j -- ) {",
        "score": 99.84772283380681
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( i ) ) {",
        "score": 99.83882649739583
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm . size ( ) - 1 ;",
        "score": 99.84389175907258
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( i ) )",
        "score": 99.79709041819854
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { Array CaMeL List < Integer > next = perm . get ( j ) ;",
        "score": 99.83892637310606
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( j ) ) {",
        "score": 99.79458279079861
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = 1 ; j != i ; j -- ) {",
        "score": 99.83805338541667
      },
      {
        "patch": "if ( perm . get ( j ) == perm . get ( i ) ) {",
        "score": 99.76752387152777
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i - 1 ) ) {",
        "score": 99.76617431640625
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( i ) ) { for ( int j = perm . size ( ) - 1 ;",
        "score": 99.83475378787878
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( j ) ) {",
        "score": 99.76001654730902
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i + 1 ) ) {",
        "score": 99.83145751953126
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( j ) )",
        "score": 99.7448371438419
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i + 1 ) && perm . get ( i ) < perm . get ( i ) )",
        "score": 99.83015210700758
      },
      {
        "patch": "if ( perm . get ( j ) != perm . get ( i ) ) {",
        "score": 99.73439534505208
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { Array CaMeL List < Integer > next = perm ;",
        "score": 99.82410539899554
      },
      {
        "patch": "if ( perm . get ( i ) == perm . get ( i ) ) {",
        "score": 99.72037760416667
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { Array CaMeL List < Integer > next = perm . get ( i ) ;",
        "score": 99.81653201941288
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( i - 1 ) ) {",
        "score": 99.71890869140626
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i + 1 ) || perm . get ( i ) < perm . get ( i ) )",
        "score": 99.81636925899622
      },
      {
        "patch": "if ( perm . get ( j ) >= perm . get ( i ) ) {",
        "score": 99.71615261501736
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( i + 1 ) ) { for ( int j = perm . size ( ) - 1 ;",
        "score": 99.81613991477273
      },
      {
        "patch": "if ( perm . get ( j ) == perm . get ( i ) )",
        "score": 99.71513097426471
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( j + 1 ) ) { for ( int j = perm . size ( ) - 1 ;",
        "score": 99.80814245975378
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( j ) )",
        "score": 99.71238798253677
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( i ) ) {",
        "score": 99.80812377929688
      },
      {
        "patch": "if ( perm . get ( j ) != perm . get ( i ) )",
        "score": 99.69154986213235
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) && perm . get ( i ) < perm . get ( i ) )",
        "score": 99.8031517767137
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i 1 ) ) {",
        "score": 99.69119423314145
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm ; j != i ; j -- )",
        "score": 99.80217742919922
      },
      {
        "patch": "if ( perm . get ( i ) != perm . get ( i ) ) {",
        "score": 99.69011773003473
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = perm . size ( ) - $NUMBER$ ;",
        "score": 99.79686020359848
      },
      {
        "patch": "if ( perm . get ( j ) == perm . get ( j ) ) {",
        "score": 99.68875461154514
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = 1 ; j != i ; j -- )",
        "score": 99.79454040527344
      },
      {
        "patch": "if ( perm . get ( i - 1 ) < perm . get ( i ) ) {",
        "score": 99.68613891601562
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( i + 1 ) ) {",
        "score": 99.79451127485795
      },
      {
        "patch": "if ( perm . get ( j ) <= perm . get ( i ) ) {",
        "score": 99.68579779730902
      },
      {
        "patch": "if ( perm . get ( i + 1 ) < perm . get ( i ) ) { for ( int j = perm . size ( ) - 1 ;",
        "score": 99.79363458806819
      },
      {
        "patch": "if ( perm . get ( j ) >= perm . get ( i ) )",
        "score": 99.68308392693015
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i + 1 ) ) { Array CaMeL List < Integer > next = perm ;",
        "score": 99.789892578125
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i - 1 ) )",
        "score": 99.67586477179276
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( i ) ) { for ( int j = perm . size ( ) - 1 ;",
        "score": 99.7888419858871
      },
      {
        "patch": "if ( perm . get ( j - 1 ) < perm . get ( i ) ) {",
        "score": 99.67410888671876
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( j ) ) { for ( int j = perm . size ( ) - 1 ;",
        "score": 99.77679246471774
      },
      {
        "patch": "if ( perm . get ( i ) >= perm . get ( i ) ) {",
        "score": 99.67206488715277
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( j ) ) { for ( int j = perm . size ( ) - 1 ;",
        "score": 99.77187647964016
      },
      {
        "patch": "if ( perm . get ( i ) == perm . get ( i ) )",
        "score": 99.6655632467831
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm . size ( ) - $NUMBER$ ;",
        "score": 99.77152375252017
      },
      {
        "patch": "if ( perm . get ( j ) == perm . get ( i - 1 ) ) {",
        "score": 99.65956420898438
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = perm ; j != i ;",
        "score": 99.77016129032258
      },
      {
        "patch": "if ( perm . get ( j ) > perm . get ( i ) ) {",
        "score": 99.65637885199652
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i + 1 ) )",
        "score": 99.76967259457237
      },
      {
        "patch": "if ( perm . get ( j ) != perm . get ( j ) ) {",
        "score": 99.65460205078125
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( i ) ) { for ( int j = perm . size ( ) - $NUMBER$ ;",
        "score": 99.76902077414773
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) continue ;",
        "score": 99.6521060341283
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = perm . get ( j ) ;",
        "score": 99.76776885986328
      },
      {
        "patch": "if ( perm . get ( i ) == perm . get ( j ) ) {",
        "score": 99.64790852864583
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = 1 ; j != i ;",
        "score": 99.76624716481855
      },
      {
        "patch": "if ( perm . get ( i ) != perm . get ( i ) )",
        "score": 99.6444450827206
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) break ;",
        "score": 99.6436767578125
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = perm . get ( i ) ;",
        "score": 99.75830078125
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) break ; }",
        "score": 99.64117431640625
      },
      {
        "patch": "if ( perm . get ( j ) == perm . get ( i + 1 ) ) { for ( int j = perm . size ( ) - 1 ;",
        "score": 99.75506776751894
      },
      {
        "patch": "if ( perm . get ( i ) <= perm . get ( i ) ) {",
        "score": 99.64080810546875
      },
      {
        "patch": "if ( perm . get ( j ) <= perm . get ( i + 1 ) ) { for ( int j = perm . size ( ) - 1 ;",
        "score": 99.75494939630681
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( i + 1 ) ) {",
        "score": 99.75003051757812
      },
      {
        "patch": "if ( perm . get ( i ) >= perm . get ( i ) )",
        "score": 99.63434914981617
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm . get ( j + 1 ) ;",
        "score": 99.7496109008789
      },
      {
        "patch": "if ( perm . get ( j ) != perm . get ( i - 1 ) ) {",
        "score": 99.63361206054688
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm . get ( j ) ;",
        "score": 99.7475341796875
      },
      {
        "patch": "if ( perm . get ( j ) <= perm . get ( i ) )",
        "score": 99.6335808249081
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm . get ( i + 1 ) ;",
        "score": 99.74559020996094
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( j - 1 ) ) {",
        "score": 99.6324462890625
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm ; j != i ;",
        "score": 99.74553811961206
      },
      {
        "patch": "if ( perm . get ( j ) >= perm . get ( j ) ) {",
        "score": 99.63089328342014
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( j + 1 ) ) {",
        "score": 99.74225463867188
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( i 1 ) ) {",
        "score": 99.63004985608552
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = 1 ; j != i ;",
        "score": 99.74193494073276
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i - ) ) {",
        "score": 99.62980571546052
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = i ; j != i ;",
        "score": 99.74182522681451
      },
      {
        "patch": "if ( perm . get ( i - 1 ) < perm . get ( i ) )",
        "score": 99.62704307154605
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( i ) ) { for ( int j = perm . get ( j ) ;",
        "score": 99.73992156982422
      },
      {
        "patch": "if ( perm . get ( j ) == perm . get ( j ) )",
        "score": 99.62580422794117
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = 0 ; j != i ;",
        "score": 99.7392814390121
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( i - 1 ) )",
        "score": 99.62399131373355
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( i ) ) { for ( int j = perm ; j != i ;",
        "score": 99.73855689264113
      },
      {
        "patch": "if ( perm . get ( j ) >= perm . get ( i - 1 ) ) {",
        "score": 99.6231201171875
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( i ) )",
        "score": 99.73812063116776
      },
      {
        "patch": "if ( perm . get ( j - 1 ) < perm . get ( i ) )",
        "score": 99.61929481907895
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( i + 1 ) )",
        "score": 99.73516555059524
      },
      {
        "patch": "if ( perm . get ( i ) != perm . get ( j ) ) {",
        "score": 99.61632622612848
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { }",
        "score": 99.61204769736842
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm . get ( i ) ;",
        "score": 99.73404134114584
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( i ) ) continue ;",
        "score": 99.61185495476974
      },
      {
        "patch": "if ( perm . get ( i + 1 ) < perm . get ( i ) ) {",
        "score": 99.73353881835938
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i $NUMBER$ ) ) {",
        "score": 99.60894454152961
      },
      {
        "patch": "if ( perm . get ( i + 1 ) < perm . get ( i + 1 ) ) {",
        "score": 99.72969193892045
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( 0 ) ) {",
        "score": 99.6083984375
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( 1 ) ) {",
        "score": 99.60606553819444
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( j + 1 ) ) {",
        "score": 99.70969460227273
      },
      {
        "patch": "if ( perm . get ( i ) > perm . get ( i ) ) {",
        "score": 99.60578748914931
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( j ) ) {",
        "score": 99.70720825195312
      },
      {
        "patch": "if ( perm . get ( i ) == perm . get ( i - 1 ) ) {",
        "score": 99.60564575195312
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( i + 1 ) )",
        "score": 99.68423622532895
      },
      {
        "patch": "if ( perm . get ( j ) <= perm . get ( j ) ) {",
        "score": 99.60416666666667
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( j + 1 ) )",
        "score": 99.67607036389802
      },
      {
        "patch": "if ( ! perm . get ( j ) < perm . get ( i ) ) {",
        "score": 99.60377261513158
      },
      {
        "patch": "if ( perm . get ( j + 1 ) == perm . get ( i + 1 ) ) {",
        "score": 99.67301802201705
      },
      {
        "patch": "if ( perm . get ( j ) != perm . get ( j ) )",
        "score": 99.60284782858456
      },
      {
        "patch": "if ( perm . get ( j + 1 ) == perm . get ( i ) ) {",
        "score": 99.67239379882812
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( i ) ) break ;",
        "score": 99.6015625
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( i + 1 ) ) { for (",
        "score": 99.6702372233073
      },
      {
        "patch": "if ( perm . get ( j ) > perm . get ( i ) )",
        "score": 99.6005500344669
      },
      {
        "patch": "if ( perm . get ( j + 1 ) <= perm . get ( i + 1 ) ) {",
        "score": 99.66945578835227
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( i ) ) break ; }",
        "score": 99.6003662109375
      },
      {
        "patch": "if ( perm . get ( i + 1 ) < perm . get ( i + 1 ) )",
        "score": 99.66743396577381
      },
      {
        "patch": "if ( perm . get ( j + 1 ) <= perm . get ( i ) ) {",
        "score": 99.66666259765626
      },
      {
        "patch": "if ( perm . get ( i - 1 ) != perm . get ( i ) ) {",
        "score": 99.5991943359375
      },
      {
        "patch": "if ( perm . get ( i + 1 ) < perm . get ( i ) )",
        "score": 99.66055458470395
      },
      {
        "patch": "if ( ( perm . get ( j ) < perm . get ( i ) ) ) {",
        "score": 99.598876953125
      },
      {
        "patch": "if ( perm . get ( j ) == perm . get ( i + 1 ) ) {",
        "score": 99.65909423828126
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i - $NUMBER$ ) ) {",
        "score": 99.59852905273438
      },
      {
        "patch": "if ( perm . get ( i - 1 ) < perm . get ( j ) ) {",
        "score": 99.59833984375
      },
      {
        "patch": "if ( perm . get ( j ) <= perm . get ( i + 1 ) ) {",
        "score": 99.6557861328125
      },
      {
        "patch": "if ( perm . get ( j ) == perm . get ( i 1 ) ) {",
        "score": 99.59598581414474
      },
      {
        "patch": "if ( perm . get ( j + 1 ) > perm . get ( i ) ) {",
        "score": 99.65385131835937
      },
      {
        "patch": "if ( perm . get ( i - 1 ) == perm . get ( i ) ) {",
        "score": 99.59344482421875
      },
      {
        "patch": "if ( perm . get ( j + 1 ) > perm . get ( i + 1 ) ) {",
        "score": 99.65226606889205
      },
      {
        "patch": "if ( perm . get ( j - 1 ) != perm . get ( i ) ) {",
        "score": 99.59305419921876
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( i - 1 ) ) {",
        "score": 99.64777166193181
      },
      {
        "patch": "if ( perm . get ( i ) >= perm . get ( j ) ) {",
        "score": 99.59285481770833
      },
      {
        "patch": "if ( perm . get ( j ) <= perm . get ( i - 1 ) ) {",
        "score": 99.59268188476562
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( j + 1 ) )",
        "score": 99.64684477306548
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( j - 1 ) ) {",
        "score": 99.59241333007813
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i + $NUMBER$ ) ) {",
        "score": 99.64592895507812
      },
      {
        "patch": "if ( perm . get ( j ) . equals ( perm . get ( i ) ) )",
        "score": 99.5908447265625
      },
      {
        "patch": "if ( perm . get ( j + 1 ) >= perm . get ( i + 1 ) ) {",
        "score": 99.6451748934659
      },
      {
        "patch": "if ( perm . get ( j ) >= perm . get ( j ) )",
        "score": 99.58958524816177
      },
      {
        "patch": "if ( perm . get ( j ) & perm . get ( i ) ) {",
        "score": 99.58823649088542
      },
      {
        "patch": "if ( perm . get ( j + 1 ) >= perm . get ( i ) ) {",
        "score": 99.64031982421875
      },
      {
        "patch": "if ( perm . get ( i ) <= perm . get ( i ) )",
        "score": 99.58519789751838
      },
      {
        "patch": "if ( perm . get ( i ) == perm . get ( j ) )",
        "score": 99.58409208409927
      },
      {
        "patch": "if ( perm . get ( j ) >= perm . get ( i + 1 ) ) {",
        "score": 99.63427124023437
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) { {",
        "score": 99.5833740234375
      },
      {
        "patch": "if ( perm . get ( j ) > perm . get ( i + 1 ) ) {",
        "score": 99.633544921875
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( i - ) ) {",
        "score": 99.58090049342105
      },
      {
        "patch": "if ( perm . get ( j ) > perm . get ( j ) ) {",
        "score": 99.57253011067708
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < perm . get ( j ) )",
        "score": 99.63249126233552
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i ) ) }",
        "score": 99.57250298394098
      },
      {
        "patch": "if ( perm . get ( j + $NUMBER$ ) < perm . get ( i ) ) {",
        "score": 99.63040161132812
      },
      {
        "patch": "if ( perm . get ( i ) < perm . get ( i ) ) { }",
        "score": 99.57155890213816
      },
      {
        "patch": "if ( perm . get ( j + 1 ) != perm . get ( i ) ) {",
        "score": 99.62001342773438
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( i 1 ) )",
        "score": 99.57067192925348
      },
      {
        "patch": "if ( perm . get ( j ) & perm . get ( i + 1 ) ) {",
        "score": 99.61966552734376
      },
      {
        "patch": "if ( perm . get ( 0 ) < perm . get ( i ) ) {",
        "score": 99.56989203559027
      },
      {
        "patch": "if ( perm . get ( j ) < perm . get ( j ) ) continue ;",
        "score": 99.56745990953948
      },
      {
        "patch": "if ( ( perm . get ( j ) < perm . get ( i ) ) )",
        "score": 99.56711297286184
      },
      {
        "patch": "if ( perm . get ( i ) != perm . get ( j ) )",
        "score": 99.56318933823529
      },
      {
        "patch": "if ( perm . get ( i ) >= perm . get ( j ) )",
        "score": 99.54942411534927
      },
      {
        "patch": "if ( perm . get ( j + 1 ) <= perm . get ( i ) )",
        "score": 99.59080103824013
      },
      {
        "patch": "if ( perm . get ( j ) < $NUMBER$ ) {",
        "score": 99.42576246995192
      },
      {
        "patch": "if ( perm . get ( j ) < 0 ) {",
        "score": 99.4221942608173
      },
      {
        "patch": "if ( perm . get ( j ) != 0 ) {",
        "score": 99.38649338942308
      },
      {
        "patch": "if ( perm . get ( j ) < 1 ) {",
        "score": 99.37708458533653
      },
      {
        "patch": "if ( perm . get ( j ) < perm . size ( ) ) {",
        "score": 99.54327751608456
      },
      {
        "patch": "if ( perm . get ( i ) < 0 ) {",
        "score": 99.37244591346153
      },
      {
        "patch": "if ( perm . get ( j + 1 ) < i ) {",
        "score": 99.45291341145834
      },
      {
        "patch": "if ( perm . get ( i ) < $NUMBER$ ) {",
        "score": 99.37210787259616
      },
      {
        "patch": "if ( perm . get ( j ) < i ) {",
        "score": 99.40313251201923
      },
      {
        "patch": "if ( perm . get ( i ) != 0 ) {",
        "score": 99.33077298677884
      },
      {
        "patch": "if ( perm . get ( j ) != $NUMBER$ ) {",
        "score": 99.33063213641827
      },
      {
        "patch": "String perm = perm . get ( j + 1 ) ;",
        "score": 99.36648324819711
      },
      {
        "patch": "if ( perm . get ( j ) < j ) {",
        "score": 99.32562725360577
      },
      {
        "patch": "if ( perm . get ( j + 1 ) ) {",
        "score": 99.34930889423077
      },
      {
        "patch": "if ( j < perm . get ( i ) )",
        "score": 99.2609151204427
      },
      {
        "patch": "if ( perm . get ( j ) < $NUMBER$ )",
        "score": 99.2511698404948
      }
    ]
  },
  "PASCAL-22-23": {
    "src": "for ( int c = 0 ; c < r ; c ++ ) {",
    "patches": [
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.90867614746094
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ )",
        "score": 99.80484212239584
      },
      {
        "patch": "int r = 0 ; for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.73690941220238
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { Array CaMeL List < Integer > row = null ;",
        "score": 99.77817946213942
      },
      {
        "patch": "int c = 0 ; for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.7197033110119
      },
      {
        "patch": "int c = rows . get ( r - 1 ) . get ( c - 1 ) . get ( c - 1 ) ;",
        "score": 99.75485568576389
      },
      {
        "patch": "synchronized ( this ) { for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.71082124255952
      },
      {
        "patch": "if ( c > 0 ) { Array CaMeL List < Integer > row = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.74758676382211
      },
      {
        "patch": "for ( int c = 0 ; c < 0 ; c ++ ) {",
        "score": 99.70964050292969
      },
      {
        "patch": "int r = rows . get ( r - 1 ) . get ( c - 1 ) . get ( c - 1 ) ;",
        "score": 99.73508933738425
      },
      {
        "patch": "int r = r ; for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.69939313616071
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { row . add ( r - 1 ) ;",
        "score": 99.7327734375
      },
      {
        "patch": "int c = r ; for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.69845145089286
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { if ( c > 0 ) {",
        "score": 99.7294284986413
      },
      {
        "patch": "int n = 0 ; for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.67222377232143
      },
      {
        "patch": "if ( c > 0 ) { Array CaMeL List < Integer > row = new Array CaMeL List < Integer >> ( ) ;",
        "score": 99.72633713942308
      },
      {
        "patch": "for ( int c = 1 ; c < r ; c ++ ) {",
        "score": 99.67115020751953
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { row . add ( r - c ) ;",
        "score": 99.719453125
      },
      {
        "patch": "int n = r ; for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.66789899553571
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { if ( c > 0 )",
        "score": 99.71049360795455
      },
      {
        "patch": "for ( int c = 0 ; c < n ; c ++ ) {",
        "score": 99.66574096679688
      },
      {
        "patch": "for ( int c = 0 ; c < $NUMBER$ ; c ++ ) {",
        "score": 99.6627197265625
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { int c = 0 ;",
        "score": 99.70371791294643
      },
      {
        "patch": "for ( int c = 0 ; c < 1 ; c ++ ) {",
        "score": 99.66168212890625
      },
      {
        "patch": "if ( c > 0 ) { for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.69908075747283
      },
      {
        "patch": "int size = r ; for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.66141183035714
      },
      {
        "patch": "for ( int c = 0 ; c < c ; c ++ ) {",
        "score": 99.65966033935547
      },
      {
        "patch": "for ( int c = 0 ; c < n ; c ++ )",
        "score": 99.69783528645833
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c -- ) {",
        "score": 99.64250183105469
      },
      {
        "patch": "for ( int c = 1 ; c < r ; c ++ )",
        "score": 99.6963623046875
      },
      {
        "patch": "for ( int c = 0 ; c < max ; c ++ ) {",
        "score": 99.63890838623047
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { row . add ( r ) ;",
        "score": 99.68921959918478
      },
      {
        "patch": "if ( c > 0 ) { for ( int c = 0 ; c < r ; c ++ )",
        "score": 99.68675648082386
      },
      {
        "patch": "for ( int c = r ; c < r ; c ++ ) {",
        "score": 99.62425994873047
      },
      {
        "patch": "for ( int c = 0 ; c < rows . size ( ) ; c ++ ) {",
        "score": 99.63805541992187
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { c = r ; }",
        "score": 99.61915225074405
      },
      {
        "patch": "for ( int r = 0 ; r < n ; r ++ ) {",
        "score": 99.63165283203125
      },
      {
        "patch": "for ( int c = 0 ; c < size ; c ++ ) {",
        "score": 99.61812591552734
      },
      {
        "patch": "for ( int c = 1 ; c < r ; c ++ ) { int c = 0 ;",
        "score": 99.62974330357143
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { if ( r ; }",
        "score": 99.61437406994048
      },
      {
        "patch": "for ( int c = 0 ; c < rows . size ( ) ; c ++ )",
        "score": 99.6278140419408
      },
      {
        "patch": "for ( int c = 0 ; c < r - 1 ; c ++ ) {",
        "score": 99.61399332682292
      },
      {
        "patch": "for ( int c = 0 ; c < n ; c ++ ) { int c = 0 ;",
        "score": 99.62760416666667
      },
      {
        "patch": "for ( int c = 0 ; c <= r ; c ++ ) {",
        "score": 99.6127700805664
      },
      {
        "patch": "for ( int r = 1 ; r < n ; r ++ ) {",
        "score": 99.61927795410156
      },
      {
        "patch": "for ( final int c = 0 ; c < r ; c ++ ) {",
        "score": 99.60270421645221
      },
      {
        "patch": "for ( Array CaMeL List < Integer > row = new Array CaMeL List < Integer >> ( ) ;",
        "score": 99.61660621279762
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { c += r ; }",
        "score": 99.59049479166667
      },
      {
        "patch": "for ( int r = 0 ; r < n ; r ++ )",
        "score": 99.61215006510416
      },
      {
        "patch": "for ( int c = 0 ; c < r + 1 ; c ++ ) {",
        "score": 99.58473714192708
      },
      {
        "patch": "for ( Integer c = 0 ; c < r ; c ++ ) {",
        "score": 99.61204528808594
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { if ( c ; }",
        "score": 99.58097330729167
      },
      {
        "patch": "for ( int r = 0 ; r < r ; r ++ ) {",
        "score": 99.61000061035156
      },
      {
        "patch": "for ( int c = $NUMBER$ ; c < r ; c ++ ) {",
        "score": 99.58021545410156
      },
      {
        "patch": "for ( Integer c = 0 ; c < r ; c ++ )",
        "score": 99.608056640625
      },
      {
        "patch": "/ * for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.58011881510417
      },
      {
        "patch": "} for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.57753619025735
      },
      {
        "patch": "for ( int c = 1 ; c < n ; c ++ ) {",
        "score": 99.60333251953125
      },
      {
        "patch": "for ( int r = 0 ; c < r ; c ++ ) {",
        "score": 99.57550811767578
      },
      {
        "patch": "for ( int r = 1 ; r < r ; r ++ ) {",
        "score": 99.60295867919922
      },
      {
        "patch": "for ( int c = 0 ; c < start ; c ++ ) {",
        "score": 99.5723648071289
      },
      {
        "patch": "for ( Array CaMeL List < Integer > row = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.60206240699405
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { c = c ; }",
        "score": 99.57132393973214
      },
      {
        "patch": "for ( int c = 0 ; c < c ; c ++ )",
        "score": 99.60110677083334
      },
      {
        "patch": "for ( int c = 0 ; c < min ; c ++ ) {",
        "score": 99.57107543945312
      },
      {
        "patch": "for ( int r = 1 ; r < n ; r ++ )",
        "score": 99.59939778645834
      },
      {
        "patch": "for ( int c = 0 ; c < first ; c ++ ) {",
        "score": 99.57038879394531
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { Array CaMeL List < Integer > row =",
        "score": 99.59405517578125
      },
      {
        "patch": "for ( int c = 0 ; r < r ; c ++ ) {",
        "score": 99.56909942626953
      },
      {
        "patch": "for ( int r = 0 ; r < r ; r ++ )",
        "score": 99.59344889322917
      },
      {
        "patch": "for ( int c = 0 ; c < length ; c ++ ) {",
        "score": 99.56407165527344
      },
      {
        "patch": "for ( int c = 0 ; n < r ; c ++ ) {",
        "score": 99.56019592285156
      },
      {
        "patch": "for ( int c = 1 ; c < n ; c ++ )",
        "score": 99.590478515625
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { {",
        "score": 99.55964211856617
      },
      {
        "patch": "/ * * for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.55867084703948
      },
      {
        "patch": "for ( Array CaMeL List < Integer >> row = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.58876255580357
      },
      {
        "patch": "for ( int c = 0 ; c < r ; n ++ ) {",
        "score": 99.55482482910156
      },
      {
        "patch": "for ( int r = 1 ; r < r ; r ++ )",
        "score": 99.5857666015625
      },
      {
        "patch": "for ( int c = 0 ; c >= 0 ; c ++ ) {",
        "score": 99.55465698242188
      },
      {
        "patch": "for ( Array CaMeL List < Integer >> row = new Array CaMeL List < Integer >> ( ) ;",
        "score": 99.58241489955357
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { c = 0 ; }",
        "score": 99.55243210565476
      },
      {
        "patch": "for ( Iterator < Integer > c = rows . iterator ( ) ; c . < r ; c ++ )",
        "score": 99.57996136209239
      },
      {
        "patch": "for ( int c = 0 ; c < r && c < r ; c ++ ) {",
        "score": 99.54761352539063
      },
      {
        "patch": "for ( int c = 0 ; c <= r ; c ++ )",
        "score": 99.5796875
      },
      {
        "patch": "if ( r ; for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.5421142578125
      },
      {
        "patch": "for ( int c = 0 ; c < 0 ; c ++ )",
        "score": 99.57320149739583
      },
      {
        "patch": "for ( int c = 0 ; c < r + r ; c ++ ) {",
        "score": 99.53072102864583
      },
      {
        "patch": "for ( int c = 0 ; c < row . size ( ) ; c ++ ) {",
        "score": 99.56853637695312
      },
      {
        "patch": "for ( int c = 0 ; c < r - 0 ; c ++ ) {",
        "score": 99.52988688151042
      },
      {
        "patch": "for < Integer > row = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.56540814568015
      },
      {
        "patch": "for ( int c = 0 ; c < r + 0 ; c ++ ) {",
        "score": 99.52904595269098
      },
      {
        "patch": "for ( int c = 0 ; c < row . length ; c ++ ) {",
        "score": 99.52851698133681
      },
      {
        "patch": "int c = rows . get ( r - 1 ) . get ( c - 1 ) ;",
        "score": 99.5600341796875
      },
      {
        "patch": "for ( int c = 0 ; c < r + $NUMBER$ ; c ++ ) {",
        "score": 99.52522108289931
      },
      {
        "patch": "for ( int c = 0 ; c < row . size ( ) ; c ++ )",
        "score": 99.5582211143092
      },
      {
        "patch": "for ( int c = 0 ; c < r ; length ++ ) {",
        "score": 99.52472686767578
      },
      {
        "patch": "for ( Iterator < int c = r ; c < r ; c ++ ) {",
        "score": 99.51494683159723
      },
      {
        "patch": "for ( int c = 0 ; c < r && c < r ; c ++ )",
        "score": 99.55610737047698
      },
      {
        "patch": "for ( int c = 0 ; c < r - $NUMBER$ ; c ++ ) {",
        "score": 99.51485866970486
      },
      {
        "patch": "Array CaMeL List < Integer > row = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.55572831003289
      },
      {
        "patch": "for ( int c = 0 ; c < list . size ( ) ; c ++ ) {",
        "score": 99.50930786132812
      },
      {
        "patch": "for ( int c = 0 ; c < 1 ; c ++ )",
        "score": 99.54764811197917
      },
      {
        "patch": "if ( c ; for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.50757446289063
      },
      {
        "patch": "for ( int c = 0 ; c < r - 1 ; c ++ )",
        "score": 99.54730583639706
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) ;",
        "score": 99.50686645507812
      },
      {
        "patch": "for ( int c = 0 ; c < rows . length ; c ++ ) {",
        "score": 99.53895399305556
      },
      {
        "patch": "for ( int c = 0 ; c < list . length ; c ++ ) {",
        "score": 99.50113254123264
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { }",
        "score": 99.4973503561581
      },
      {
        "patch": "for ( int c = 0 ; c < r || c < r ; c ++ ) {",
        "score": 99.53399047851562
      },
      {
        "patch": "for ( int c = 1 ; c < 0 ; c ++ ) {",
        "score": 99.49703979492188
      },
      {
        "patch": "int r = rows . get ( r - 1 ) . get ( c - 1 ) ;",
        "score": 99.52744140625
      },
      {
        "patch": "for ( int c = 0 ; c < r ; 1 ++ ) {",
        "score": 99.48934173583984
      },
      {
        "patch": "Array CaMeL List < Integer > row = new Array CaMeL List < Integer >> ( ) ;",
        "score": 99.524658203125
      },
      {
        "patch": "for ( int c = - 1 ; c < r ; c ++ ) {",
        "score": 99.48900649126838
      },
      {
        "patch": "for ( int c = 1 ; c < rows . size ( ) ; c ++ ) {",
        "score": 99.5244873046875
      },
      {
        "patch": "for ( int c = 0 - 1 ; c < r ; c ++ ) {",
        "score": 99.48885091145833
      },
      {
        "patch": "for ( int c = 0 ; c < - 1 ; c ++ ) {",
        "score": 99.48761345358456
      },
      {
        "patch": "for ( int c = r ; c < r ; c ++ )",
        "score": 99.52255859375
      },
      {
        "patch": "else { for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.48711480034723
      },
      {
        "patch": "for < Integer > row = new Array CaMeL List < Integer >> ( ) ;",
        "score": 99.52253274356617
      },
      {
        "patch": "for ( int n = 0 ; c < r ; c ++ ) {",
        "score": 99.48316955566406
      },
      {
        "patch": "for ( int c = 0 ; c < rows . length ; c ++ )",
        "score": 99.52246811810662
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { int c = r ;",
        "score": 99.48249162946429
      },
      {
        "patch": "for ( int r = 0 ; r < rows . size ( ) ; r ++ ) {",
        "score": 99.52014770507813
      },
      {
        "patch": "for ( int c = 0 ; c >= 1 ; c ++ ) {",
        "score": 99.48188018798828
      },
      {
        "patch": "for ( int c = 0 ; c < r || c < r ; c ++ )",
        "score": 99.51876027960526
      },
      {
        "patch": "for ( int c = 0 ; c < last ; c ++ ) {",
        "score": 99.48180389404297
      },
      {
        "patch": "for ( int c = 1 ; c <= r ; c ++ ) {",
        "score": 99.5147933959961
      },
      {
        "patch": "for ( Iterator < String > c = r ; c . has CaMeL Next ( ) ; ) {",
        "score": 99.47988746279762
      },
      {
        "patch": "for ( int c += 0 ; c < r ; c ++ ) {",
        "score": 99.47981262207031
      },
      {
        "patch": "List < Integer > row = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.51056267233456
      },
      {
        "patch": "for ( int c = 0 ; c < r ; $NUMBER$ ++ ) {",
        "score": 99.47453308105469
      },
      {
        "patch": "for ( int c = 1 ; c < rows . size ( ) ; c ++ )",
        "score": 99.5098876953125
      },
      {
        "patch": "for ( int c = 0 ; c <= 0 ; c ++ ) {",
        "score": 99.47447967529297
      },
      {
        "patch": "for ( int c = 1 ; c < c ; c ++ ) {",
        "score": 99.50947570800781
      },
      {
        "patch": "for ( int c = 0 ; c < r ; -- c ) {",
        "score": 99.46092224121094
      },
      {
        "patch": "for ( int c = 0 ; c < n - 1 ; c ++ ) {",
        "score": 99.50733778211806
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) continue ;",
        "score": 99.46006146599265
      },
      {
        "patch": "for < Integer >> row = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.50656307444854
      },
      {
        "patch": "for ( int c = r ; c < 0 ; c ++ ) {",
        "score": 99.45985412597656
      },
      {
        "patch": "/ for ( int c = 0 ; c < r ; c ++ ) {",
        "score": 99.45855353860294
      },
      {
        "patch": "for ( int r = 0 ; r < rows . size ( ) ; r ++ )",
        "score": 99.50316097861842
      },
      {
        "patch": "for ( int c = 0 ; c < r ; ++ c ) {",
        "score": 99.45854187011719
      },
      {
        "patch": "for ( int c = 0 ; c < $NUMBER$ ; c ++ )",
        "score": 99.50061848958333
      },
      {
        "patch": "for ( int c = 0 ; c >= 0 ; c -- ) {",
        "score": 99.45590209960938
      },
      {
        "patch": "for ( int c = 1 ; c <= r ; c ++ )",
        "score": 99.50034993489584
      },
      {
        "patch": "for ( int c = 1 ; c < 1 ; c ++ ) {",
        "score": 99.4549789428711
      },
      {
        "patch": "for ( int c = 1 ; c < c ; c ++ )",
        "score": 99.49951985677083
      },
      {
        "patch": "for ( int c = 0 ; c < 0 ; c -- ) {",
        "score": 99.4542236328125
      },
      {
        "patch": "for ( int c = 0 ; c < - 1 ; c ++ )",
        "score": 99.4970474243164
      },
      {
        "patch": "for ( int c = r ; c < c ; c ++ ) {",
        "score": 99.45408630371094
      },
      {
        "patch": "for ( int c = 0 ; c < n - 1 ; c ++ )",
        "score": 99.49457146139706
      },
      {
        "patch": "for ( Integer c = 1 ; c < r ; c ++ ) {",
        "score": 99.49186706542969
      },
      {
        "patch": "for ( int c = 0 ; c < r ; r ++ ) {",
        "score": 99.44596099853516
      },
      {
        "patch": "for ( int c = 1 ; c < $NUMBER$ ; c ++ ) {",
        "score": 99.44537353515625
      },
      {
        "patch": "for ( Integer c = 1 ; c < r ; c ++ )",
        "score": 99.48092447916666
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) break ;",
        "score": 99.44501091452206
      },
      {
        "patch": "Vector < Integer > row = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.47856588924633
      },
      {
        "patch": "List < Integer > row = new Array CaMeL List < Integer >> ( ) ;",
        "score": 99.4764763327206
      },
      {
        "patch": "for ( int c = 1 ; c < r - 1 ; c ++ ) {",
        "score": 99.47536214192708
      },
      {
        "patch": "for ( int c = 0 ; c < row ; c ++ ) {",
        "score": 99.43743133544922
      },
      {
        "patch": "for ( int c = 0 ; c < r ; start ++ ) {",
        "score": 99.43643951416016
      },
      {
        "patch": "for ( int c = 0 ; c >= 0 ; c ++ )",
        "score": 99.47354329427084
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { c = r ;",
        "score": 99.435888671875
      },
      {
        "patch": "for ( int c = r ; c < n ; c ++ ) {",
        "score": 99.43478393554688
      },
      {
        "patch": "for ( int c = 0 ; c <= n ; c ++ )",
        "score": 99.46617024739584
      },
      {
        "patch": "for ( int c = 0 - 1 ; c < r ; c ++ )",
        "score": 99.46581313189338
      },
      {
        "patch": "for ( int c = 0 ; c < r + 1 ; c ++ )",
        "score": 99.41423483455883
      },
      {
        "patch": "for ( int c = 1 ; c < 0 ; c ++ )",
        "score": 99.46392415364583
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { ) {",
        "score": 99.41324869791667
      },
      {
        "patch": "for ( Integer c = 0 ; c < n ; c ++ )",
        "score": 99.46254069010416
      },
      {
        "patch": "for ( int c = 0 ; c < r ; c ++ ) { try {",
        "score": 99.4112548828125
      },
      {
        "patch": "for ( int c = 1 ; c < r - 1 ; c ++ )",
        "score": 99.46096622242646
      },
      {
        "patch": "for ( int c = 0 ; c < ) {",
        "score": 99.26978556315105
      },
      {
        "patch": "for ( int c = 0 ; c < r ;",
        "score": 99.42525227864583
      },
      {
        "patch": "for ( int c = 0 ; c ++ ) {",
        "score": 99.26211547851562
      }
    ]
  },
  "POSSIBLE_CHANGE-17-18": {
    "src": "if ( total < 0 ) {",
    "patches": [
      {
        "patch": "if ( ( total < 0 ) ) { return 0 ; }",
        "score": 99.78574044363839
      },
      {
        "patch": "if ( total < 0 ) {",
        "score": 99.77281188964844
      },
      {
        "patch": "if ( ( total < 0 ) ) { return 1 ; }",
        "score": 99.75191824776786
      },
      {
        "patch": "} if ( total < 0 || total < 0 ) {",
        "score": 99.6160419170673
      },
      {
        "patch": "if ( total < 0 ) { return 0 ; }",
        "score": 99.72574869791667
      },
      {
        "patch": "if ( total == 0 ) {",
        "score": 99.59724426269531
      },
      {
        "patch": "if ( total < 0 ) { return 1 ; }",
        "score": 99.68302408854167
      },
      {
        "patch": "if ( total < 0 ) { return 0 ; } else",
        "score": 99.58988131009616
      },
      {
        "patch": "if ( ( total < 0 ) ) { return 0 ;",
        "score": 99.67347130408653
      },
      {
        "patch": "} if ( total < 0 && total < 0 ) {",
        "score": 99.57574932391827
      },
      {
        "patch": "} if ( total < 0 ) {",
        "score": 99.57023790147569
      },
      {
        "patch": "if ( ( total == 0 ) ) { return 0 ; }",
        "score": 99.66633823939732
      },
      {
        "patch": "else { if ( total < 0 ) { return 0 {",
        "score": 99.56117600661058
      },
      {
        "patch": "if ( total < 0 ) { return - 0 ; }",
        "score": 99.66280423677884
      },
      {
        "patch": "else { if ( total < 0 ) { } else {",
        "score": 99.5358135516827
      },
      {
        "patch": "} if ( total < 0 ) { return 0 ; }",
        "score": 99.65508563701923
      },
      {
        "patch": "else { if ( total < 0 ) {",
        "score": 99.52949829101563
      },
      {
        "patch": "if ( ( total < 0 ) ) { return 1 ;",
        "score": 99.6520244891827
      },
      {
        "patch": "synchronized ( this ) { if ( total < 0 ) {",
        "score": 99.52247971754808
      },
      {
        "patch": "if ( total < 0 ) { return coins [ 0 ] ;",
        "score": 99.65043422154018
      },
      {
        "patch": "if ( total < 0 || total < 0 ) {",
        "score": 99.51426188151042
      },
      {
        "patch": "if ( ( total >= 0 ) ) { return 0 ; }",
        "score": 99.63641357421875
      },
      {
        "patch": "if ( total == 0 ) { return 0 ; } else",
        "score": 99.48958646334134
      },
      {
        "patch": "if ( ( total == 0 ) ) { return 1 ; }",
        "score": 99.63590785435268
      },
      {
        "patch": "int total = 0 ; if ( total < 0 ) {",
        "score": 99.48288198617789
      },
      {
        "patch": "if ( total == 0 ) { return 0 ; }",
        "score": 99.63397216796875
      },
      {
        "patch": "else { if ( total < 0 ) { return ) {",
        "score": 99.48121995192308
      },
      {
        "patch": "if ( ( total > 0 ) ) { return 0 ; }",
        "score": 99.63275146484375
      },
      {
        "patch": "if ( total < 0 && total < 0 ) {",
        "score": 99.4713134765625
      },
      {
        "patch": "if ( total > 0 ) { return coins [ 0 ] ;",
        "score": 99.63214111328125
      },
      {
        "patch": "if ( total < 0 ) { total = 0 ; }",
        "score": 99.46505972055289
      },
      {
        "patch": "if ( total >= 0 ) { return coins [ 0 ] ;",
        "score": 99.63078090122768
      },
      {
        "patch": "if ( total < 0 ) { return 1 ; } else",
        "score": 99.45749136117789
      },
      {
        "patch": "if ( total < 0 ) { return 0 ; } else {",
        "score": 99.62226213727679
      },
      {
        "patch": "if ( total < 0 ) { break ; } else {",
        "score": 99.45737868088942
      },
      {
        "patch": "if ( total < 0 ) { return - 1 ; }",
        "score": 99.62093411959134
      },
      {
        "patch": "else { if ( total < 0 ) return 0 ; else",
        "score": 99.44846754807692
      },
      {
        "patch": "} if ( total < 0 ) { return 1 ; }",
        "score": 99.61695274939903
      },
      {
        "patch": "if ( total < 0 )",
        "score": 99.44712611607143
      },
      {
        "patch": "if ( ( total >= 0 ) ) { return 1 ; }",
        "score": 99.60716029575893
      },
      {
        "patch": "else { if ( total == 0 ) { return 0 {",
        "score": 99.4447772686298
      },
      {
        "patch": "else if ( total < 0 ) { return 0 ; }",
        "score": 99.6064453125
      },
      {
        "patch": "if ( total != 0 ) {",
        "score": 99.43016052246094
      },
      {
        "patch": "if ( ( total > 0 ) ) { return 1 ; }",
        "score": 99.60341099330357
      },
      {
        "patch": "if ( total < 0 ) { return 0 { } else",
        "score": 99.42971567007211
      },
      {
        "patch": "if ( total < 0 ) { return 0 ;",
        "score": 99.60207297585227
      },
      {
        "patch": "else { if ( total < 0 ) { return 1 {",
        "score": 99.42859825721153
      },
      {
        "patch": "if ( total == 0 ) { return 1 ; }",
        "score": 99.59647623697917
      },
      {
        "patch": "if ( total < 0 ) { return ) ; } else",
        "score": 99.41714242788461
      },
      {
        "patch": "if ( total < 0 ) { return 1 ; } else {",
        "score": 99.59157017299107
      },
      {
        "patch": "if ( total == 0 || total < 0 ) {",
        "score": 99.41466267903645
      },
      {
        "patch": "if ( total == 0 ) { return coins [ 0 ] ;",
        "score": 99.58008684430804
      },
      {
        "patch": "if ( total > 0 ) {",
        "score": 99.41337585449219
      },
      {
        "patch": "if ( total < 0 ) { return 1 ;",
        "score": 99.57054554332386
      },
      {
        "patch": "if ( total < 0 ) { return 0 {",
        "score": 99.41274192116477
      },
      {
        "patch": "if ( total == 0 ) { return - 0 ; }",
        "score": 99.56697904146634
      },
      {
        "patch": "if ( total < 0 || total <= 0 ) {",
        "score": 99.40671793619792
      },
      {
        "patch": "else if ( total < 0 ) { return 1 ; }",
        "score": 99.56165489783653
      },
      {
        "patch": "if ( total < 0 || total > 0 ) {",
        "score": 99.38681030273438
      },
      {
        "patch": "if ( total == 0 ) { return 0 ; } else {",
        "score": 99.5576171875
      },
      {
        "patch": "if ( total < 0 && total <= 0 ) {",
        "score": 99.38104248046875
      },
      {
        "patch": "if ( total > 0 ) { return 0 ; }",
        "score": 99.5532735188802
      },
      {
        "patch": "} else if ( total < 0 ) {",
        "score": 99.37649536132812
      },
      {
        "patch": "if ( ( total == 0 ) ) { return 0 ;",
        "score": 99.5529033954327
      },
      {
        "patch": "if ( total < 0 && total > 0 ) {",
        "score": 99.3645731608073
      },
      {
        "patch": "if ( total >= 0 ) { return 0 ; }",
        "score": 99.55138142903645
      },
      {
        "patch": "if ( total == 0 && total < 0 ) {",
        "score": 99.35683186848958
      },
      {
        "patch": "if ( total < 0 || total == 0 ) {",
        "score": 99.35525512695312
      },
      {
        "patch": "if ( ( total == 0 ) ) { return 1 ;",
        "score": 99.53217022235577
      },
      {
        "patch": "else { if ( total == 0 ) {",
        "score": 99.355029296875
      },
      {
        "patch": "if ( total > 0 ) { return 1 ; }",
        "score": 99.51493326822917
      },
      {
        "patch": "} ) { if ( total < 0 ) {",
        "score": 99.33676979758523
      },
      {
        "patch": "if ( ( total >= 0 ) ) { return 0 ;",
        "score": 99.51354041466347
      },
      {
        "patch": "else if ( total < 0 ) {",
        "score": 99.33549669053819
      },
      {
        "patch": "if ( total >= 0 ) { return 1 ; }",
        "score": 99.51242065429688
      },
      {
        "patch": "if ( ( total > 0 ) ) { return 0 ;",
        "score": 99.51097693810097
      },
      {
        "patch": "if ( total < 0 && total == 0 ) {",
        "score": 99.33107503255208
      },
      {
        "patch": "if ( total == 0 ) { return 0 ;",
        "score": 99.5095547762784
      },
      {
        "patch": "if ( total == 0 || total == 0 ) {",
        "score": 99.32867431640625
      },
      {
        "patch": "if ( total < $NUMBER$ ) {",
        "score": 99.3271484375
      },
      {
        "patch": "if ( total < 1 ) { return 0 ; }",
        "score": 99.5004170735677
      },
      {
        "patch": "if ( total < 0 ) { {",
        "score": 99.32207573784723
      },
      {
        "patch": "if ( ( total >= 0 ) ) { return 1 ;",
        "score": 99.49710787259616
      },
      {
        "patch": "if ( total < 0 || total >= 0 ) {",
        "score": 99.32045491536458
      },
      {
        "patch": "if ( ( total > 0 ) ) { return 1 ;",
        "score": 99.49390587439903
      },
      {
        "patch": "if ( total == 0 ) { return 0 {",
        "score": 99.31975763494319
      },
      {
        "patch": "if ( ( total < 0 ) ) {",
        "score": 99.4885498046875
      },
      {
        "patch": "} if ( total == 0 ) {",
        "score": 99.31908501519098
      },
      {
        "patch": "if ( total <= 0 ) { return 0 ; }",
        "score": 99.48484293619792
      },
      {
        "patch": "if ( total < 0 ) { } else {",
        "score": 99.31427556818181
      },
      {
        "patch": "if ( total == 0 ) { return 1 ;",
        "score": 99.47861550071023
      },
      {
        "patch": "if ( total == 0 || total <= 0 ) {",
        "score": 99.31166585286458
      },
      {
        "patch": "if ( total < coins . length ) { return 0 ; }",
        "score": 99.47404261997768
      },
      {
        "patch": "} else { if ( total < 0 ) {",
        "score": 99.30695134943181
      },
      {
        "patch": "if ( total < 0 ) { return ) {",
        "score": 99.30551979758523
      },
      {
        "patch": "if ( total < 1 ) { return 1 ; }",
        "score": 99.45883178710938
      },
      {
        "patch": "if ( total >= 0 ) {",
        "score": 99.30403900146484
      },
      {
        "patch": "if ( total <= 0 ) {",
        "score": 99.30242156982422
      },
      {
        "patch": "if ( total > 0 || total < 0 ) {",
        "score": 99.3021240234375
      },
      {
        "patch": "if ( total <= 0 ) { return 1 ; }",
        "score": 99.44631958007812
      },
      {
        "patch": "if ( total == 0 && total == 0 ) {",
        "score": 99.29886881510417
      },
      {
        "patch": "if ( total < 0 ) { return 0 ; } for (",
        "score": 99.44464111328125
      },
      {
        "patch": "/ * if ( total < 0 ) {",
        "score": 99.29822998046875
      },
      {
        "patch": "if ( total < 0 ) { return $NUMBER$ ; }",
        "score": 99.4442850748698
      },
      {
        "patch": "if ( total != 0 || total < 0 ) {",
        "score": 99.2946268717448
      },
      {
        "patch": "if ( total == 0 ) { return 1 ; } else",
        "score": 99.44259878305289
      },
      {
        "patch": "if ( total < 0 && total >= 0 ) {",
        "score": 99.29439290364583
      },
      {
        "patch": "if ( total < coins . length ) { return 1 ; }",
        "score": 99.43895612444196
      },
      {
        "patch": "if ( total < 0 ) return 0 {",
        "score": 99.28778076171875
      },
      {
        "patch": "} if ( total < 0 ) { return 0 ;",
        "score": 99.28172810872395
      },
      {
        "patch": "if ( total > 0 ) { return 0 ;",
        "score": 99.4170809659091
      },
      {
        "patch": "if ( total < 0 || max < 0 ) {",
        "score": 99.28079223632812
      },
      {
        "patch": "if ( total >= coins . length ) { return 0 ; }",
        "score": 99.41635567801339
      },
      {
        "patch": "if ( total == 0 && total <= 0 ) {",
        "score": 99.27578735351562
      },
      {
        "patch": "if ( total >= 0 ) { return 0 ;",
        "score": 99.41307484019886
      },
      {
        "patch": "if ( total == 0 )",
        "score": 99.27503313337054
      },
      {
        "patch": "if ( total == 1 ) { return 0 ; }",
        "score": 99.412841796875
      },
      {
        "patch": "if ( total > 0 && total < 0 ) {",
        "score": 99.2738545735677
      },
      {
        "patch": "if ( total > 0 ) { return 1 ;",
        "score": 99.3894930752841
      },
      {
        "patch": "else { if ( total < 0 )",
        "score": 99.26906331380208
      },
      {
        "patch": "if ( total >= 0 ) { return 1 ;",
        "score": 99.3858309659091
      },
      {
        "patch": "if ( total < 0 || total < 0 )",
        "score": 99.26842151988636
      },
      {
        "patch": "if ( total < 0 ) { return ) ;",
        "score": 99.26481489701705
      },
      {
        "patch": "if ( total == 1 ) { return 1 ; }",
        "score": 99.37698364257812
      },
      {
        "patch": "if ( total < 1 ) { return 0 ;",
        "score": 99.3571444424716
      },
      {
        "patch": "if ( total < - 1 ) {",
        "score": 99.25949435763889
      },
      {
        "patch": "if ( total < total ) {",
        "score": 99.25667572021484
      },
      {
        "patch": "if ( total < coins . length ) {",
        "score": 99.35244140625
      },
      {
        "patch": "else { if ( total != 0 ) {",
        "score": 99.25402221679687
      },
      {
        "patch": "if ( total < 0 ) { return total ; }",
        "score": 99.35098266601562
      },
      {
        "patch": "if ( total < 0 && total < 0 )",
        "score": 99.24641557173295
      },
      {
        "patch": "if ( total <= 0 ) { return 0 ;",
        "score": 99.34491521661931
      },
      {
        "patch": "if ( total < 1 ) {",
        "score": 99.22515106201172
      },
      {
        "patch": "if ( 0 < total ) {",
        "score": 99.21805572509766
      },
      {
        "patch": "if ( ( total == 0 ) ) {",
        "score": 99.33919677734374
      },
      {
        "patch": "} if ( total < 0 )",
        "score": 99.20768737792969
      },
      {
        "patch": "if ( ! total < 0 ) {",
        "score": 99.19492594401042
      },
      {
        "patch": "if ( total < 1 ) { return 1 ;",
        "score": 99.3258389559659
      },
      {
        "patch": "if ( total == 0 ) return 0 {",
        "score": 99.19395141601562
      },
      {
        "patch": "if ( total <= 0 ) { return 1 ;",
        "score": 99.31456409801136
      },
      {
        "patch": "} if ( total != 0 ) {",
        "score": 99.19081624348958
      },
      {
        "patch": "if ( ( total >= 0 ) ) {",
        "score": 99.30001831054688
      },
      {
        "patch": "if ( 0 < 0 ) {",
        "score": 99.17771911621094
      },
      {
        "patch": "if ( ( total > 0 ) ) {",
        "score": 99.29779052734375
      },
      {
        "patch": "} if ( total > 0 ) {",
        "score": 99.17224799262152
      },
      {
        "patch": "if ( total == 0 ) { {",
        "score": 99.14661322699652
      },
      {
        "patch": "if ( total < 0 ) { return $NUMBER$ ;",
        "score": 99.29150390625
      },
      {
        "patch": "if ( total < ) {",
        "score": 99.14344133649554
      },
      {
        "patch": "if ( total >= coins . length ) {",
        "score": 99.28980712890625
      },
      {
        "patch": "if ( total < 0 0 ) {",
        "score": 99.13208685980902
      },
      {
        "patch": "if ( total == 1 ) {",
        "score": 99.23333740234375
      },
      {
        "patch": "if ( total < null ) {",
        "score": 99.10511779785156
      },
      {
        "patch": "if ( total == coins . length ) {",
        "score": 99.22959594726562
      },
      {
        "patch": "if ( total == $NUMBER$ ) {",
        "score": 99.07628631591797
      },
      {
        "patch": "if ( total != 0 )",
        "score": 99.03133719308036
      },
      {
        "patch": "if ( total > 0 )",
        "score": 99.01663643973214
      },
      {
        "patch": "if ( total < $NUMBER$ )",
        "score": 98.96059744698661
      },
      {
        "patch": "if ( total < total )",
        "score": 98.94532121930804
      },
      {
        "patch": "if ( total > 1 ) {",
        "score": 99.12715148925781
      },
      {
        "patch": "if ( total == ) {",
        "score": 98.93386404854911
      },
      {
        "patch": "if ( total >= 1 ) {",
        "score": 99.11492919921875
      },
      {
        "patch": "if ( total <= 0 )",
        "score": 98.93265206473214
      },
      {
        "patch": "if ( total ) {",
        "score": 98.91398111979167
      },
      {
        "patch": "if ( ! total ) {",
        "score": 98.89525495256696
      },
      {
        "patch": "return coins [ 0 ] ;",
        "score": 99.05137416294643
      },
      {
        "patch": "if ( ) {",
        "score": 98.61527099609376
      },
      {
        "patch": "if ( total >= 0 )",
        "score": 98.93738664899554
      },
      {
        "patch": "if ( total {",
        "score": 98.37872924804688
      },
      {
        "patch": "} ) ;",
        "score": 98.2854232788086
      },
      {
        "patch": "} else {",
        "score": 98.15330505371094
      },
      {
        "patch": "if ( false ) {",
        "score": 98.78475952148438
      },
      {
        "patch": "} ) {",
        "score": 97.9814453125
      },
      {
        "patch": "} ) )",
        "score": 97.94036102294922
      },
      {
        "patch": "return 0 ;",
        "score": 97.92613220214844
      },
      {
        "patch": "if ( )",
        "score": 97.91730499267578
      },
      {
        "patch": "}",
        "score": 95.19609832763672
      }
    ]
  },
  "QUICKSORT-26-27": {
    "src": "} else if ( x > pivot ) {",
    "patches": [
      {
        "patch": "} else if ( x > pivot ) { greater . add ( x ) ;",
        "score": 100.08708639705883
      },
      {
        "patch": "} else if ( x > pivot ) {",
        "score": 99.63291015625
      },
      {
        "patch": "} else if ( x > pivot ) { lesser . add ( x ) ;",
        "score": 99.96292453342014
      },
      {
        "patch": "} } if ( x > pivot ) {",
        "score": 99.58438720703126
      },
      {
        "patch": "} else if ( x > pivot ) { greater . add ( x ) ; }",
        "score": 99.94342041015625
      },
      {
        "patch": "} } else if ( x > pivot ) {",
        "score": 99.54421164772727
      },
      {
        "patch": "} else if ( x < pivot ) { greater . add ( x ) ;",
        "score": 99.853515625
      },
      {
        "patch": "; } if ( x > pivot ) {",
        "score": 99.47889404296875
      },
      {
        "patch": "} else if ( x > pivot ) { greater . add ( pivot ) ;",
        "score": 99.84960219439338
      },
      {
        "patch": "} if ( x > pivot ) {",
        "score": 99.47378879123264
      },
      {
        "patch": "} else if ( x >= pivot ) { greater . add ( x ) ;",
        "score": 99.84089929917279
      },
      {
        "patch": "} else if ( x >= pivot ) {",
        "score": 99.4541015625
      },
      {
        "patch": "; } else if ( x > pivot ) {",
        "score": 99.44903009588069
      },
      {
        "patch": "} else if ( x > pivot ) { lesser . add ( pivot ) ;",
        "score": 99.82249620225694
      },
      {
        "patch": "} else if ( x > pivot ) { continue ;",
        "score": 99.42384847005208
      },
      {
        "patch": "} else if ( x <= pivot ) { greater . add ( x ) ;",
        "score": 99.81047506893383
      },
      {
        "patch": "} else if ( x > pivot ) { break ;",
        "score": 99.41587320963542
      },
      {
        "patch": "} else if ( x > pivot ) { greater . set ( x ) ;",
        "score": 99.80347397748162
      },
      {
        "patch": "} else if ( x > pivot ) { break {",
        "score": 99.41305541992188
      },
      {
        "patch": "} else if ( x > pivot ) { lesser = quicksort ( greater ) ;",
        "score": 99.80118815104167
      },
      {
        "patch": "} } if ( x >= pivot ) {",
        "score": 99.40955200195313
      },
      {
        "patch": "} else if ( x > pivot ) { greater = quicksort ( greater ) ;",
        "score": 99.7994025735294
      },
      {
        "patch": "} } if ( x == pivot ) {",
        "score": 99.39644775390624
      },
      {
        "patch": "} else if ( x == pivot ) { greater . add ( x ) ;",
        "score": 99.78811465992646
      },
      {
        "patch": "} else if ( x > pivot ) { continue {",
        "score": 99.39040120442708
      },
      {
        "patch": "} else if ( x < pivot ) { lesser . add ( x ) ;",
        "score": 99.78652615017361
      },
      {
        "patch": "; } } if ( x > pivot ) {",
        "score": 99.37212579900569
      },
      {
        "patch": "} else if ( x > pivot ) { greater = quicksort ( x ) ;",
        "score": 99.75932042738971
      },
      {
        "patch": "} } else if ( x >= pivot ) {",
        "score": 99.3678866299716
      },
      {
        "patch": "} else if ( x > 1 ) { greater . add ( x ) ;",
        "score": 99.75783404181985
      },
      {
        "patch": "} } if ( pivot > pivot ) {",
        "score": 99.36498413085937
      },
      {
        "patch": "} else if ( x >= pivot ) { lesser . add ( x ) ;",
        "score": 99.74727376302083
      },
      {
        "patch": "; } } else if ( x > pivot ) {",
        "score": 99.36442057291667
      },
      {
        "patch": "} else if ( x > pivot ) { greater . remove ( x ) ;",
        "score": 99.74215877757354
      },
      {
        "patch": "} } if ( x != pivot ) {",
        "score": 99.35982055664063
      },
      {
        "patch": "} else if ( x > pivot ) { greater . add ( pivot ) ; }",
        "score": 99.74068874782986
      },
      {
        "patch": "} } else { if ( x > pivot ) {",
        "score": 99.3550516764323
      },
      {
        "patch": "} else if ( x <= pivot ) { lesser . add ( x ) ;",
        "score": 99.72754584418402
      },
      {
        "patch": "} else if ( x > pivot ) { break ; }",
        "score": 99.35477388822116
      },
      {
        "patch": "} else if ( x > pivot ) { greater . add ( 0 ) ;",
        "score": 99.71173454733456
      },
      {
        "patch": "} else if ( x > pivot ) { } else",
        "score": 99.34271240234375
      },
      {
        "patch": "} else if ( x < pivot ) { greater . add ( x ) ; }",
        "score": 99.70815700954861
      },
      {
        "patch": "} else if ( x == pivot ) {",
        "score": 99.34158935546876
      },
      {
        "patch": "} else if ( x > pivot || x > pivot && x > pivot ) {",
        "score": 99.70661078559027
      },
      {
        "patch": "} else if ( x > pivot ) { continue ; }",
        "score": 99.3393085186298
      },
      {
        "patch": "} else if ( x != pivot ) { greater . add ( x ) ;",
        "score": 99.70354147518383
      },
      {
        "patch": "} else if ( x < pivot ) {",
        "score": 99.33253173828125
      },
      {
        "patch": "} else if ( x >= pivot ) { greater . add ( x ) ; }",
        "score": 99.70230441623264
      },
      {
        "patch": "} } if ( x < pivot ) {",
        "score": 99.3303466796875
      },
      {
        "patch": "} else if ( x > pivot ) { greater = quicksort ( pivot ) ;",
        "score": 99.6991325827206
      },
      {
        "patch": "} } if ( pivot != null ) {",
        "score": 99.32886962890625
      },
      {
        "patch": "} else if ( x == pivot ) { lesser . add ( x ) ;",
        "score": 99.69894070095486
      },
      {
        "patch": "} else if ( x > pivot . size ( ) ) {",
        "score": 99.32532610212054
      },
      {
        "patch": "} else if ( x > pivot $NUMBER$ ) { greater . add ( x ) ;",
        "score": 99.69822862413194
      },
      {
        "patch": "} } else if ( x < pivot ) {",
        "score": 99.32313121448864
      },
      {
        "patch": "} else if ( x > pivot ) { greater = quicksort ( greater ) ; }",
        "score": 99.69670952690973
      },
      {
        "patch": "; } if ( x >= pivot ) {",
        "score": 99.3189697265625
      },
      {
        "patch": "} else if ( ( x > pivot ) || ( x > pivot ) ) {",
        "score": 99.693115234375
      },
      {
        "patch": "} else if ( x > pivot ) { break ; } }",
        "score": 99.3172607421875
      },
      {
        "patch": "} else if ( x > pivot ) { greater = quicksort ( lesser ) ;",
        "score": 99.69227430555556
      },
      {
        "patch": "} else { if ( x > pivot ) {",
        "score": 99.31720525568181
      },
      {
        "patch": "} else if ( x > pivot && x > pivot && x > pivot ) {",
        "score": 99.69134521484375
      },
      {
        "patch": "} else if ( x > pivot ) { return pivot {",
        "score": 99.3121807391827
      },
      {
        "patch": "} else if ( x > pivot || x > pivot || x > pivot ) {",
        "score": 99.68854437934027
      },
      {
        "patch": "} else if ( x > pivot )",
        "score": 99.31217447916667
      },
      {
        "patch": "} else if ( x > pivot ) { greater . add ( 1 ) ;",
        "score": 99.68843347886029
      },
      {
        "patch": "} else if ( x != pivot ) {",
        "score": 99.30930786132812
      },
      {
        "patch": "} else if ( x > pivot ) { greater . contains ( x ) ;",
        "score": 99.68660242417279
      },
      {
        "patch": "; } else if ( x > pivot ) { continue ;",
        "score": 99.30489408052884
      },
      {
        "patch": "} else if ( x > pivot ) { { greater . add ( x ) ;",
        "score": 99.68547227647569
      },
      {
        "patch": "} else if ( x > pivot ) { }",
        "score": 99.30078125
      },
      {
        "patch": "} else if ( x > pivot && arr . size ( ) > 1 ) {",
        "score": 99.68380398220486
      },
      {
        "patch": "} else if ( x > pivot ) { break ; else",
        "score": 99.29945725661058
      },
      {
        "patch": "} else if ( x > pivot ) { greater . put ( x ) ;",
        "score": 99.68379480698529
      },
      {
        "patch": "; } else if ( x > pivot ) { break {",
        "score": 99.29917555588942
      },
      {
        "patch": "} else if ( x > 1 ) { lesser . add ( x ) ;",
        "score": 99.67192925347223
      },
      {
        "patch": "} else if ( x > pivot || x > pivot ) {",
        "score": 99.29702322823661
      },
      {
        "patch": "} else if ( x > pivot ) { lesser = quicksort ( x ) ;",
        "score": 99.66695149739583
      },
      {
        "patch": "} } else if ( x == pivot ) {",
        "score": 99.29508833451705
      },
      {
        "patch": "} else if ( pivot > pivot ) { greater . add ( x ) ;",
        "score": 99.66659725413604
      },
      {
        "patch": "} else if ( x > pivot && x > pivot ) {",
        "score": 99.29488699776786
      },
      {
        "patch": "} else if ( x > pivot ) { if ( x > pivot ) {",
        "score": 99.6598762063419
      },
      {
        "patch": "; } else if ( x >= pivot ) {",
        "score": 99.29425603693181
      },
      {
        "patch": "} else if ( x <= pivot ) { greater . add ( x ) ; }",
        "score": 99.65828450520833
      },
      {
        "patch": "} else if ( x >= pivot . size ( ) ) {",
        "score": 99.29216657366071
      },
      {
        "patch": "} else if ( x > pivot ) { greater . add ( $NUMBER$ ) ;",
        "score": 99.65711167279412
      },
      {
        "patch": "} } else if ( pivot > pivot ) {",
        "score": 99.2897061434659
      },
      {
        "patch": "} else if ( x > pivot ) { lesser = quicksort ( pivot ) ;",
        "score": 99.65164523654514
      },
      {
        "patch": "; } else if ( x > pivot ) { continue {",
        "score": 99.28396371694711
      },
      {
        "patch": "} else { if ( x > pivot ) { greater . add ( x ) ;",
        "score": 99.64898681640625
      },
      {
        "patch": "} } if ( x <= pivot ) {",
        "score": 99.2811279296875
      },
      {
        "patch": "} else if ( x > greater ) { greater . add ( x ) ;",
        "score": 99.63791073069854
      },
      {
        "patch": "} else if ( x >= pivot ) { continue ;",
        "score": 99.28042602539062
      },
      {
        "patch": "; } else if ( x > pivot ) { break ;",
        "score": 99.28006685697116
      },
      {
        "patch": "else if ( x > pivot ) { greater . add ( x ) ; }",
        "score": 99.61336023667279
      },
      {
        "patch": "} else if ( x > pivot ) { else {",
        "score": 99.27687581380208
      },
      {
        "patch": "; } if ( x == pivot ) {",
        "score": 99.27410888671875
      },
      {
        "patch": "if ( x > pivot ) { greater . add ( x ) ; } }",
        "score": 99.60544720818015
      },
      {
        "patch": "} else if ( x > pivot ) { break ; } else",
        "score": 99.27248709542411
      },
      {
        "patch": "} else if ( x > pivot ) { if ( greater ) {",
        "score": 99.56962076822917
      },
      {
        "patch": "} if ( x < pivot ) {",
        "score": 99.27234564887152
      },
      {
        "patch": "} if ( x > pivot ) { greater . add ( x ) ; }",
        "score": 99.56886919806985
      },
      {
        "patch": "} else if ( x >= pivot ) { break {",
        "score": 99.26652018229167
      },
      {
        "patch": "if ( x > pivot ) { greater . add ( x ) ;",
        "score": 99.56649576822916
      },
      {
        "patch": "} else if ( x >= pivot ) { break ;",
        "score": 99.26585896809895
      },
      {
        "patch": "if ( x > pivot ) { lesser . add ( x ) ;",
        "score": 99.5606689453125
      },
      {
        "patch": "} else if ( x <= pivot ) {",
        "score": 99.2657470703125
      },
      {
        "patch": "} if ( x >= pivot ) {",
        "score": 99.26318359375
      },
      {
        "patch": "else if ( x > pivot ) { greater . add ( x ) ;",
        "score": 99.55351257324219
      },
      {
        "patch": "} if ( x > pivot . size ( ) ) {",
        "score": 99.26151216947116
      },
      {
        "patch": "} else if ( x > pivot ) { greater = x ; }",
        "score": 99.54371744791666
      },
      {
        "patch": "} else if ( x + pivot > pivot ) {",
        "score": 99.26050821940105
      },
      {
        "patch": "} else if ( x > pivot ) { greater = pivot ; }",
        "score": 99.53753255208333
      },
      {
        "patch": "} else if ( x > pivot ) { return pivot ; }",
        "score": 99.25950404575893
      },
      {
        "patch": "} else if ( x > pivot ) greater . add ( x ) ;",
        "score": 99.53028106689453
      },
      {
        "patch": "} else if ( x > pivot ) { continue ; else",
        "score": 99.2562255859375
      },
      {
        "patch": "} else if ( x > pivot ) lesser . add ( x ) ;",
        "score": 99.52273380055146
      },
      {
        "patch": "; } if ( x != pivot ) {",
        "score": 99.25428466796875
      },
      {
        "patch": "else if ( x > pivot ) { lesser . add ( x ) ;",
        "score": 99.52174287683823
      },
      {
        "patch": "} else if ( pivot > pivot ) {",
        "score": 99.25215454101563
      },
      {
        "patch": "} else if ( x > pivot ) { greater = x ;",
        "score": 99.507568359375
      },
      {
        "patch": "} } else if ( x > pivot ) { else {",
        "score": 99.25092022235577
      },
      {
        "patch": "} else { greater . add ( x ) ;",
        "score": 99.50510475852273
      },
      {
        "patch": "} else if ( x > pivot ) { return x {",
        "score": 99.25055401141827
      },
      {
        "patch": "} else if ( x > pivot ) { greater = pivot ;",
        "score": 99.48876081194196
      },
      {
        "patch": "} else if ( x > pivot ) { } else {",
        "score": 99.25050706129808
      },
      {
        "patch": "if ( x > pivot ) { greater . add ( x ) ; }",
        "score": 99.47837829589844
      },
      {
        "patch": "; } else if ( x > pivot ) { } else",
        "score": 99.24959622896634
      },
      {
        "patch": "} if ( x > pivot ) { greater . add ( x ) ;",
        "score": 99.47737884521484
      },
      {
        "patch": "} if ( x > pivot && x > pivot ) {",
        "score": 99.24708909254808
      },
      {
        "patch": "} else { greater . add ( x ) ; }",
        "score": 99.4496358235677
      },
      {
        "patch": "} else if ( x >= pivot ) { continue {",
        "score": 99.24686686197917
      },
      {
        "patch": "; } if ( x > pivot ) { break {",
        "score": 99.2446797688802
      },
      {
        "patch": "} else if ( x > pivot ) { {",
        "score": 99.24432927911931
      },
      {
        "patch": "} else if ( x > pivot ) { greater = ) ;",
        "score": 99.40647670200893
      },
      {
        "patch": "; } if ( x > pivot ) { continue ;",
        "score": 99.24397786458333
      },
      {
        "patch": "} if ( x > pivot ) { continue ;",
        "score": 99.23823686079545
      },
      {
        "patch": "} else if ( x > pivot && pivot ) {",
        "score": 99.36891682942708
      },
      {
        "patch": "} } if ( x > pivot ) { else {",
        "score": 99.2362569173177
      },
      {
        "patch": "break ; } else if ( x > pivot ) {",
        "score": 99.36805216471355
      },
      {
        "patch": "} } if ( pivot == null ) {",
        "score": 99.2346923828125
      },
      {
        "patch": "} else { lesser . add ( x ) ;",
        "score": 99.36525472005208
      },
      {
        "patch": "; } if ( x > pivot ) { break ;",
        "score": 99.23385620117188
      },
      {
        "patch": "} else if ( x > pivot || pivot ) {",
        "score": 99.34981282552083
      },
      {
        "patch": "} else if ( x + pivot == pivot ) {",
        "score": 99.23141479492188
      },
      {
        "patch": "} else { greater . add ( x ) ; } }",
        "score": 99.34689565805289
      },
      {
        "patch": "; else if ( x > pivot ) {",
        "score": 99.230126953125
      },
      {
        "patch": "} else { lesser . add ( x ) ; }",
        "score": 99.34405048076923
      },
      {
        "patch": "} if ( x > pivot ) { break ;",
        "score": 99.23002485795455
      },
      {
        "patch": "} if ( x > pivot ) { return pivot {",
        "score": 99.22939046223958
      },
      {
        "patch": "} * Integer pivot = arr . get ( 0 ) ;",
        "score": 99.33994704026442
      },
      {
        "patch": "; } if ( x < pivot ) {",
        "score": 99.2154541015625
      },
      {
        "patch": "} * Integer x : greater . add ( x ) ;",
        "score": 99.3317401592548
      },
      {
        "patch": "} if ( x > pivot ) { break {",
        "score": 99.213134765625
      },
      {
        "patch": "} else if ( x > pivot - 1 ) {",
        "score": 99.32127888997395
      },
      {
        "patch": "} else if ( x > pivot ) ;",
        "score": 99.19957275390625
      },
      {
        "patch": "} else if ( x > pivot && greater ) {",
        "score": 99.30513509114583
      },
      {
        "patch": "} else if ( x > min ) {",
        "score": 99.18275756835938
      },
      {
        "patch": "} if ( pivot > pivot ) {",
        "score": 99.17997911241319
      },
      {
        "patch": "} else if ( x > 1 ) {",
        "score": 99.27064208984375
      },
      {
        "patch": "} if ( x == pivot ) {",
        "score": 99.1671142578125
      },
      {
        "patch": "else greater . add ( x ) ;",
        "score": 99.26328531901042
      },
      {
        "patch": "} } if ( x > pivot )",
        "score": 99.15945773654514
      },
      {
        "patch": "} else if ( x > pivot $NUMBER$ ) {",
        "score": 99.22509765625
      },
      {
        "patch": "; if ( x > pivot ) {",
        "score": 99.14812554253473
      },
      {
        "patch": "else lesser . add ( x ) ;",
        "score": 99.21898803710937
      },
      {
        "patch": "} while ( x > pivot ) {",
        "score": 99.13701036241319
      },
      {
        "patch": "} else if ( x > pivot ) break ;",
        "score": 99.20478959517045
      },
      {
        "patch": "} if ( x <= pivot ) {",
        "score": 99.13130696614583
      },
      {
        "patch": "else { greater . add ( x ) ; }",
        "score": 99.1996737393466
      },
      {
        "patch": "} else if ( x >= pivot )",
        "score": 99.12308078342014
      },
      {
        "patch": "else if ( x > pivot ) {",
        "score": 99.19823540581598
      },
      {
        "patch": "} if ( x > pivot )",
        "score": 99.11672973632812
      },
      {
        "patch": "; } if ( x > pivot )",
        "score": 99.11512586805556
      },
      {
        "patch": "else { greater . add ( x ) ;",
        "score": 99.18826904296876
      },
      {
        "patch": "} else {",
        "score": 98.14051055908203
      },
      {
        "patch": "else greater . add ( x ) ; }",
        "score": 99.17200317382813
      },
      {
        "patch": "} }",
        "score": 97.53759765625
      },
      {
        "patch": "} else if ( x > pivot && {",
        "score": 99.171923828125
      },
      {
        "patch": "; }",
        "score": 97.4371337890625
      },
      {
        "patch": "if ( x > pivot ) {",
        "score": 99.15978240966797
      },
      {
        "patch": "} else",
        "score": 97.3165995279948
      },
      {
        "patch": "}",
        "score": 96.99298095703125
      },
      {
        "patch": "result = quicksort ( greater ) ;",
        "score": 98.90152740478516
      },
      {
        "patch": ";",
        "score": 96.51301574707031
      },
      {
        "patch": "break ;",
        "score": 96.78737386067708
      },
      {
        "patch": "else",
        "score": 95.45330810546875
      },
      {
        "patch": "{",
        "score": 95.43894958496094
      }
    ]
  },
  "REVERSE_LINKED_LIST-20-21": {
    "src": "node = nextnode ;",
    "patches": [
      {
        "patch": "node = nextnode ;",
        "score": 99.76627604166667
      },
      {
        "patch": "node = nextnode ; } node = nextnode ;",
        "score": 99.414306640625
      },
      {
        "patch": "node = nextnode ; node = nextnode ;",
        "score": 99.67699085582386
      },
      {
        "patch": "if ( nextnode != null ) node = nextnode ;",
        "score": 99.3217022235577
      },
      {
        "patch": "node = nextnode ; node = nextnode ; }",
        "score": 99.63380940755208
      },
      {
        "patch": "if ( nextnode != null ; return nextnode ;",
        "score": 99.30416870117188
      },
      {
        "patch": "node = nextnode ; } return prevnode ; }",
        "score": 99.60721842447917
      },
      {
        "patch": "node = nextnode ; if node = nextnode ;",
        "score": 99.29128011067708
      },
      {
        "patch": "node = nextnode . get CaMeL Successor ( ) ;",
        "score": 99.59171549479167
      },
      {
        "patch": "node = nextnode ; else node = nextnode ;",
        "score": 99.2864990234375
      },
      {
        "patch": "node = nextnode ; } else { node = nextnode ;",
        "score": 99.26207624162946
      },
      {
        "patch": "node = node . get CaMeL Successor ( ) ;",
        "score": 99.54327947443181
      },
      {
        "patch": "if ( nextnode != null ; node = nextnode ;",
        "score": 99.2522723858173
      },
      {
        "patch": "node = nextnode ; if ( node != null )",
        "score": 99.51783243815105
      },
      {
        "patch": "if ( nextnode == null ; return nextnode ;",
        "score": 99.24560546875
      },
      {
        "patch": "node = nextnode ; break ; } return node ;",
        "score": 99.50940958658855
      },
      {
        "patch": "if ( nextnode == null ) node = nextnode ;",
        "score": 99.23751126802884
      },
      {
        "patch": "node = nextnode ; } return node ; }",
        "score": 99.5076016512784
      },
      {
        "patch": "node = nextnode ; if nextnode = nextnode ;",
        "score": 99.22954852764423
      },
      {
        "patch": "if ( node != null ) node = nextnode ;",
        "score": 99.50687662760417
      },
      {
        "patch": "node = nextnode ; if ; node = nextnode ;",
        "score": 99.2271259014423
      },
      {
        "patch": "Node node = nextnode ; node = nextnode ;",
        "score": 99.49429321289062
      },
      {
        "patch": "node = nextnode ; } else node = null ;",
        "score": 99.49141438802083
      },
      {
        "patch": "node = nextnode ; } return prevnode ;",
        "score": 99.48750443892045
      },
      {
        "patch": "if ( nextnode == null ; node = nextnode ;",
        "score": 99.19278658353366
      },
      {
        "patch": "node . set CaMeL Successor ( prevnode ) ;",
        "score": 99.47847123579545
      },
      {
        "patch": "node = nextnode ; } node = nextnode ; }",
        "score": 99.18734036959134
      },
      {
        "patch": "node . set CaMeL Successor ( node ) ;",
        "score": 99.36134643554688
      },
      {
        "patch": "node = nextnode ; return nextnode ;",
        "score": 99.17967529296875
      },
      {
        "patch": "node = nextnode ; node = prevnode ;",
        "score": 99.3570223721591
      },
      {
        "patch": "if ( nextnode != null ; return node ;",
        "score": 99.17523748224431
      },
      {
        "patch": "node = nextnode ; } return node ;",
        "score": 99.35471801757812
      },
      {
        "patch": "node = nextnode ; if node = nextnode ; }",
        "score": 99.16300142728366
      },
      {
        "patch": "node = nextnode ; break ; } else {",
        "score": 99.34572531960227
      },
      {
        "patch": "node = nextnode ; node = nextnode ; ;",
        "score": 99.1429443359375
      },
      {
        "patch": "node = nextnode ; } return nextnode ;",
        "score": 99.33290793678977
      },
      {
        "patch": "node = node ; node = nextnode ;",
        "score": 99.32122802734375
      },
      {
        "patch": "{ node = nextnode ; node = nextnode ;",
        "score": 99.12034098307292
      },
      {
        "patch": "node = nextnode ; break ; }",
        "score": 99.31328667534723
      },
      {
        "patch": "node = nextnode ; if ( nextnode != null ;",
        "score": 99.11578838641827
      },
      {
        "patch": "node = node ; node = nextnode ; }",
        "score": 99.3050870028409
      },
      {
        "patch": "try { node = nextnode ; node = nextnode ;",
        "score": 99.1119384765625
      },
      {
        "patch": "node . set CaMeL Successor ( nextnode ) ;",
        "score": 99.2928133877841
      },
      {
        "patch": "return nextnode ;",
        "score": 99.10857543945312
      },
      {
        "patch": "node = prevnode ; node = nextnode ;",
        "score": 99.27968528053977
      },
      {
        "patch": "if ( node != null ) { node = nextnode ;",
        "score": 99.08480130709134
      },
      {
        "patch": "node = nextnode ; node = node ;",
        "score": 99.26790771484374
      },
      {
        "patch": "node = nextnode ; if ( nextnode == null ;",
        "score": 99.08193734975961
      },
      {
        "patch": "node = nextnode ; }",
        "score": 99.26591273716518
      },
      {
        "patch": "node = nextnode ; break ;",
        "score": 99.05068969726562
      },
      {
        "patch": "node = nextnode ; else { node = nextnode ;",
        "score": 99.04995492788461
      },
      {
        "patch": "next = nextnode ; node = nextnode ;",
        "score": 99.24449573863636
      },
      {
        "patch": "node = nextnode ; } node = node ;",
        "score": 99.04730779474431
      },
      {
        "patch": "prev = nextnode ; node = nextnode ;",
        "score": 99.23987926136364
      },
      {
        "patch": "if ( node == null ) { node = nextnode ;",
        "score": 99.03564453125
      },
      {
        "patch": "node = get CaMeL Successor ( nextnode ) ;",
        "score": 99.2218017578125
      },
      {
        "patch": "node = nextnode ; return nextnode ; else {",
        "score": 99.03209431966145
      },
      {
        "patch": "node = nextnode ; nextnode = node ;",
        "score": 99.21912730823864
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
        "score": 99.02759399414063
      },
      {
        "patch": "next = node . get CaMeL Successor ( ) ;",
        "score": 99.21239124644886
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( $STRING$ ;",
        "score": 99.01217990451389
      },
      {
        "patch": "o = nextnode ; node = nextnode ;",
        "score": 99.20435680042614
      },
      {
        "patch": "node = nextnode ; node = nextnode ; else",
        "score": 98.9991455078125
      },
      {
        "patch": "i = node . get CaMeL Successor ( ) ;",
        "score": 99.19896351207386
      },
      {
        "patch": "o = node . get CaMeL Successor ( ) ;",
        "score": 99.18574662642045
      },
      {
        "patch": "node = nextnode ; node = nextnode . node ;",
        "score": 98.9982158954327
      },
      {
        "patch": "loop = node . get CaMeL Successor ( ) ;",
        "score": 99.1712313565341
      },
      {
        "patch": "node = nextnode . get = nextnode ;",
        "score": 98.9938631924716
      },
      {
        "patch": "node = nextnode ; return nextnode ; }",
        "score": 99.169921875
      },
      {
        "patch": "node = nextnode . get CaMeL Parent ( ) ;",
        "score": 98.99354044596355
      },
      {
        "patch": "node = nextnode ; return prevnode ;",
        "score": 99.14207763671875
      },
      {
        "patch": "node = node . get CaMeL Parent ( ) ;",
        "score": 98.98722700639205
      },
      {
        "patch": "node = nextnode ; } return null ;",
        "score": 99.13235473632812
      },
      {
        "patch": "node = nextnode . nextnode ;",
        "score": 98.97620307074652
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( $STRING$ ; }",
        "score": 98.97354736328126
      },
      {
        "patch": "node = nextnode ; return node ; }",
        "score": 99.10968627929688
      },
      {
        "patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ; }",
        "score": 98.96002197265625
      },
      {
        "patch": "node = node ; } return prevnode ;",
        "score": 99.10498657226563
      },
      {
        "patch": "node = nextnode ; if ;",
        "score": 98.95458221435547
      },
      {
        "patch": "node = nextnode ; return node ;",
        "score": 99.10062662760417
      },
      {
        "patch": "node = nextnode . node ;",
        "score": 98.9449462890625
      },
      {
        "patch": "node = nextnode ; } else {",
        "score": 99.09490288628473
      },
      {
        "patch": "node = nextnode ; nextnode = nextnode ;",
        "score": 98.94082641601562
      },
      {
        "patch": "node = node ;",
        "score": 99.09058837890625
      },
      {
        "patch": "break ; } if ( nextnode != null ) {",
        "score": 98.93849690755208
      },
      {
        "patch": "node = nextnode ; continue ; }",
        "score": 99.05767822265625
      },
      {
        "patch": "return nextnode ; } node = nextnode ;",
        "score": 98.93414861505681
      },
      {
        "patch": "Node node = nextnode ;",
        "score": 99.04991803850446
      },
      {
        "patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ;",
        "score": 98.9325838955966
      },
      {
        "patch": "Node nextnode = nextnode ;",
        "score": 99.03488159179688
      },
      {
        "patch": "node = prevnode ;",
        "score": 99.03401692708333
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( $STRING$ + nextnode ;",
        "score": 98.9193115234375
      },
      {
        "patch": "node = nextnode + nextnode ;",
        "score": 99.01877170138889
      },
      {
        "patch": "Node prevnode = nextnode ;",
        "score": 99.01153564453125
      },
      {
        "patch": "node = node = nextnode ;",
        "score": 98.98713684082031
      },
      {
        "patch": "try { node = nextnode ;",
        "score": 98.96340942382812
      },
      {
        "patch": "node = nextnode . get = ) ;",
        "score": 98.90291137695313
      },
      {
        "patch": "if ( nextnode != null )",
        "score": 98.95655822753906
      },
      {
        "patch": "node = nextnode . get = true ;",
        "score": 98.85809936523438
      },
      {
        "patch": "node = nextnode ; continue ;",
        "score": 98.95315551757812
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
        "score": 98.8501864346591
      },
      {
        "patch": "if ( prevnode != null )",
        "score": 98.95004272460938
      },
      {
        "patch": "node = nextnode . get ;",
        "score": 98.84832000732422
      },
      {
        "patch": "node = nextnode + node ;",
        "score": 98.91736602783203
      },
      {
        "patch": "next = nextnode ;",
        "score": 98.9128926595052
      },
      {
        "patch": "} node = nextnode ;",
        "score": 98.80581229073661
      },
      {
        "patch": "node = nextnode - node ;",
        "score": 98.91065216064453
      },
      {
        "patch": "node = . ( ) ;",
        "score": 98.80471365792411
      },
      {
        "patch": "{ node = nextnode ;",
        "score": 98.8914794921875
      },
      {
        "patch": "try { node = nextnode . node ;",
        "score": 98.7921875
      },
      {
        "patch": "prev = nextnode ;",
        "score": 98.88014729817708
      },
      {
        "patch": "node = node . node ;",
        "score": 98.78853062220982
      },
      {
        "patch": "o = nextnode ;",
        "score": 98.87689208984375
      },
      {
        "patch": "break ; } node = nextnode ;",
        "score": 98.78586832682292
      },
      {
        "patch": "if ( node != null )",
        "score": 98.87334333147321
      },
      {
        "patch": "node = node . nextnode ;",
        "score": 98.7840347290039
      },
      {
        "patch": "Node nextnode = node ;",
        "score": 98.84846714564732
      },
      {
        "patch": "return node ;",
        "score": 98.76362609863281
      },
      {
        "patch": "i = nextnode ;",
        "score": 98.81937662760417
      },
      {
        "patch": "node = nextnode ; = nextnode ;",
        "score": 98.76329956054687
      },
      {
        "patch": "else node = nextnode ;",
        "score": 98.78026471819196
      },
      {
        "patch": "node = nextnode ; } if ;",
        "score": 98.75886366102431
      },
      {
        "patch": "result = nextnode ;",
        "score": 98.77694702148438
      },
      {
        "patch": "return nextnode ; }",
        "score": 98.71497599283855
      },
      {
        "patch": "node = node ; break ;",
        "score": 98.76597377232143
      },
      {
        "patch": "node = nextnode ; while ;",
        "score": 98.71446228027344
      },
      {
        "patch": "while ( node != null )",
        "score": 98.76217215401786
      },
      {
        "patch": "node = nextnode ; if ; {",
        "score": 98.68982611762152
      },
      {
        "patch": "if ( nextnode != null ;",
        "score": 98.68952941894531
      },
      {
        "patch": "ret = nextnode ;",
        "score": 98.7540791829427
      },
      {
        "patch": "node = nextnode ; if ; ;",
        "score": 98.68684895833333
      },
      {
        "patch": "loop = nextnode ;",
        "score": 98.74913533528645
      },
      {
        "patch": "node = nextnode ; } ;",
        "score": 98.68112182617188
      },
      {
        "patch": "c = nextnode ;",
        "score": 98.73325602213542
      },
      {
        "patch": "node = nextnode ; ;",
        "score": 98.66498674665179
      },
      {
        "patch": "state = nextnode ;",
        "score": 98.72072347005208
      },
      {
        "patch": "node = pop ( nextnode ;",
        "score": 98.6380844116211
      },
      {
        "patch": "cur = nextnode ;",
        "score": 98.70022583007812
      },
      {
        "patch": "throw new Runtime CaMeL Exception ;",
        "score": 98.62702287946429
      },
      {
        "patch": "rs = nextnode ;",
        "score": 98.6937764485677
      },
      {
        "patch": "if node = nextnode ;",
        "score": 98.55708530970982
      },
      {
        "patch": "l = nextnode ;",
        "score": 98.67032877604167
      },
      {
        "patch": "} return nextnode ;",
        "score": 98.53567504882812
      },
      {
        "patch": "p = nextnode ;",
        "score": 98.66495768229167
      },
      {
        "patch": "res = nextnode ;",
        "score": 98.65883382161458
      },
      {
        "patch": "{ return nextnode ; }",
        "score": 98.53116280691964
      },
      {
        "patch": "parent = nextnode ;",
        "score": 98.6566874186198
      },
      {
        "patch": "return node ; }",
        "score": 98.49200439453125
      },
      {
        "patch": "tmp = nextnode ;",
        "score": 98.64752197265625
      },
      {
        "patch": "node = false ;",
        "score": 98.47960205078125
      },
      {
        "patch": "node = node ; }",
        "score": 98.6308085123698
      },
      {
        "patch": "node = true ;",
        "score": 98.45684814453125
      },
      {
        "patch": "{ return nextnode ;",
        "score": 98.42039998372395
      },
      {
        "patch": "tree = nextnode ;",
        "score": 98.62544759114583
      },
      {
        "patch": "m = nextnode ;",
        "score": 98.37833658854167
      },
      {
        "patch": "group = nextnode ;",
        "score": 98.62369791666667
      },
      {
        "patch": "retval = nextnode ;",
        "score": 98.60463460286458
      },
      {
        "patch": "node = out ;",
        "score": 98.22135009765626
      },
      {
        "patch": "return prevnode ;",
        "score": 98.56809692382812
      },
      {
        "patch": "break ;",
        "score": 98.21214803059895
      },
      {
        "patch": "Node nextnode ;",
        "score": 98.5235595703125
      },
      {
        "patch": "return false ;",
        "score": 98.2070083618164
      },
      {
        "patch": "node = null ;",
        "score": 98.51729736328124
      },
      {
        "patch": "return false ; }",
        "score": 98.18157958984375
      },
      {
        "patch": "next = node ;",
        "score": 98.37871704101562
      },
      {
        "patch": "return true ;",
        "score": 98.17194366455078
      },
      {
        "patch": "return true ; }",
        "score": 98.14874267578125
      },
      {
        "patch": "node = parent ;",
        "score": 98.33089599609374
      },
      {
        "patch": "break ; }",
        "score": 98.03828430175781
      },
      {
        "patch": "throw null ;",
        "score": 97.83329772949219
      },
      {
        "patch": "continue node ;",
        "score": 97.81607055664062
      },
      {
        "patch": "continue ;",
        "score": 97.54229736328125
      },
      {
        "patch": "try {",
        "score": 97.31058756510417
      },
      {
        "patch": "}",
        "score": 96.30728149414062
      },
      {
        "patch": "{",
        "score": 96.14448547363281
      }
    ]
  },
  "RPN_EVAL-34-35": {
    "src": "c = bin _ op . apply ( a , b ) ;",
    "patches": [
      {
        "patch": "c = bin _ op . apply ( a , b ) ; stack . push ( c ) ;",
        "score": 100.01202101934524
      },
      {
        "patch": "c = bin _ op . apply ( a , b ) ;",
        "score": 99.84858921595982
      },
      {
        "patch": "if ( b != null ) c = bin _ op . apply ( a , b ) ;",
        "score": 99.7686279296875
      },
      {
        "patch": "c = bin _ op . apply ( a , b ) ; stack . add ( c ) ;",
        "score": 99.86067708333333
      },
      {
        "patch": "if ( c != null ) c = bin _ op . apply ( a , b ) ;",
        "score": 99.76287841796875
      },
      {
        "patch": "c = bin _ op . apply ( a , b ) ; stack . push ( a ) ;",
        "score": 99.79191080729167
      },
      {
        "patch": "if ( a != null ) c = bin _ op . apply ( a , b ) ;",
        "score": 99.74696044921875
      },
      {
        "patch": "c = bin _ op . apply ( a , b ) ; stack . push ( b ) ;",
        "score": 99.7885974702381
      },
      {
        "patch": "c = bin _ op . apply ( a , b , b ) ;",
        "score": 99.69634246826172
      },
      {
        "patch": "c = bin _ op . get ( a , b ) ; stack . push ( c ) ;",
        "score": 99.7824474516369
      },
      {
        "patch": "c = bin _ op . apply ( a ) ;",
        "score": 99.69484456380208
      },
      {
        "patch": "c = bin _ op . apply ( a , a ) ; stack . push ( c ) ;",
        "score": 99.77776227678571
      },
      {
        "patch": "if ( b == null ) c = bin _ op . apply ( a , b ) ;",
        "score": 99.68445434570313
      },
      {
        "patch": "c = bin _ op . apply ( a , c ) ; stack . push ( c ) ;",
        "score": 99.7746349516369
      },
      {
        "patch": "if ( b != null ) { c = bin _ op . apply ( a ) ; }",
        "score": 99.66680908203125
      },
      {
        "patch": "c = op . apply ( a , b ) ; stack . push ( c ) ;",
        "score": 99.75153551603618
      },
      {
        "patch": "if ( c != null ) { c = bin _ op . apply ( a ) ; }",
        "score": 99.6623779296875
      },
      {
        "patch": "c = bin _ op . apply ( a , b ) ; stack . append ( c ) ;",
        "score": 99.74789574032738
      },
      {
        "patch": "if ( a != null ) { c = bin _ op . apply ( a ) ; }",
        "score": 99.65361328125
      },
      {
        "patch": "result = bin _ op . apply ( a , b ) ; stack . push ( c ) ;",
        "score": 99.74705868675595
      },
      {
        "patch": "c = bin _ op . apply ( a , b , false ) ;",
        "score": 99.63494110107422
      },
      {
        "patch": "c = bin _ op . do ( a , b ) ; stack . push ( c ) ;",
        "score": 99.7470470610119
      },
      {
        "patch": "c = bin _ op . get ( a , b ) ;",
        "score": 99.62960379464286
      },
      {
        "patch": "tmp = bin _ op . apply ( a , b ) ; stack . push ( c ) ;",
        "score": 99.74107142857143
      },
      {
        "patch": "c = bin _ op . apply ( a , b , true ) ;",
        "score": 99.62158203125
      },
      {
        "patch": "c = bin _ op . apply ( a , b , bin _ op ) ;",
        "score": 99.60614013671875
      },
      {
        "patch": "c = bin _ op . apply ( bin _ op , b ) ;",
        "score": 99.60491943359375
      },
      {
        "patch": "c = bin _ op . apply ( a , b ) ; if ( c ) {",
        "score": 99.67648154810855
      },
      {
        "patch": "c = bin _ op . apply ( b , b ) ;",
        "score": 99.60341971261161
      },
      {
        "patch": "c = op . apply ( a , b ) ; stack . push ( c ) ; }",
        "score": 99.6697265625
      },
      {
        "patch": "c = bin _ op . apply ( a , a ) ;",
        "score": 99.59483119419643
      },
      {
        "patch": "if ( c ) { c = bin _ op . apply ( a , b ) ;",
        "score": 99.63691791735198
      },
      {
        "patch": "if ( b == null ) { c = bin _ op . apply ( a ) ; }",
        "score": 99.59390258789062
      },
      {
        "patch": "c = bin _ op . apply ( a ) ; stack . push ( c ) ;",
        "score": 99.62039987664474
      },
      {
        "patch": "c = bin _ op . apply ( bin _ op ) ;",
        "score": 99.59254673549107
      },
      {
        "patch": "c = bin _ op . apply ( a , b ) ; if ( c != null )",
        "score": 99.61134033203125
      },
      {
        "patch": "c = bin _ op . apply ( a , a , b ) ;",
        "score": 99.58992767333984
      },
      {
        "patch": "c = bin _ op . apply ( a , b , b , b ) ;",
        "score": 99.59087456597223
      },
      {
        "patch": "c = bin _ op . apply ( a , b . double CaMeL Value ( ) ) ;",
        "score": 99.58828735351562
      },
      {
        "patch": "c = bin _ op . apply ( c , b ) ;",
        "score": 99.58505684988839
      },
      {
        "patch": "c = bin _ op . apply ( a , b , c ) ;",
        "score": 99.58048248291016
      },
      {
        "patch": "c = bin _ op . apply ( a , b ) ; stack . pop ( ) ;",
        "score": 99.57275390625
      },
      {
        "patch": "c = bin _ op . apply ( a , b , null ) ;",
        "score": 99.57966613769531
      },
      {
        "patch": "c = bin _ op . get ( token ) ;",
        "score": 99.56842041015625
      },
      {
        "patch": "if ( b != null ) { c = bin _ op . apply ( a ) ;",
        "score": 99.57682719983552
      },
      {
        "patch": "c = bin _ op . get ( token ) ; stack . push ( c ) ;",
        "score": 99.56630987870066
      },
      {
        "patch": "c = bin _ op . apply ( a , b , a ) ;",
        "score": 99.5740737915039
      },
      {
        "patch": "c = bin _ op . apply ( a , b , $NUMBER$ ) ;",
        "score": 99.56571197509766
      },
      {
        "patch": "c = bin _ op . apply ( a , c ) ;",
        "score": 99.56406947544643
      },
      {
        "patch": "c = bin _ op ; c = bin _ op . apply ( a , b ) ;",
        "score": 99.55361938476562
      },
      {
        "patch": "if ( c != null ) { c = bin _ op . apply ( a ) ;",
        "score": 99.56342516447368
      },
      {
        "patch": "return bin _ op . apply ( a , b ) ;",
        "score": 99.55076246995192
      },
      {
        "patch": "c = bin _ op . apply ( a , b ) ; if ( c == null )",
        "score": 99.55223388671875
      },
      {
        "patch": "c = bin _ op . get ( a ) ;",
        "score": 99.54830932617188
      },
      {
        "patch": "c = bin _ op . apply ( a , b ) ; stack . clear ( ) ;",
        "score": 99.54376220703125
      },
      {
        "patch": "c = bin _ op . apply ( a ) ; stack . push ( c ) ; }",
        "score": 99.54159545898438
      },
      {
        "patch": "if ( a != null ) { c = bin _ op . apply ( a ) ;",
        "score": 99.54127261513158
      },
      {
        "patch": "c = bin _ op . apply ( a , b ) ; stack . reset ( ) ;",
        "score": 99.54150390625
      },
      {
        "patch": "c = bin _ op . apply ( a , b ) ; }",
        "score": 99.53976236979166
      },
      {
        "patch": "int c = bin _ op . apply ( a , b ) ;",
        "score": 99.5402099609375
      },
      {
        "patch": "c = bin _ op . apply ( a , b ) ; if ( b == null )",
        "score": 99.53822631835938
      },
      {
        "patch": "if ( bin _ op ) c = bin _ op . apply ( a , b ) ;",
        "score": 99.53955688476563
      },
      {
        "patch": "c = bin _ op . apply ( a , bin _ op ) ;",
        "score": 99.53712463378906
      },
      {
        "patch": "c = op . apply ( a , b ) ;",
        "score": 99.5270284016927
      },
      {
        "patch": "c = bin _ op = bin _ op . apply ( a , b ) ;",
        "score": 99.52553982204861
      },
      {
        "patch": "c = bin _ op . apply ( a , b . value ) ;",
        "score": 99.52232360839844
      },
      {
        "patch": "c = bin _ op . apply ( token ) ; stack . push ( c ) ;",
        "score": 99.52397075452302
      },
      {
        "patch": "c = bin _ op . apply ( bin _ op , b , b ) ;",
        "score": 99.52130126953125
      },
      {
        "patch": "b = bin _ op . apply ( a , b ) ;",
        "score": 99.52094377790179
      },
      {
        "patch": "c = bin _ op . apply ( op , b ) ;",
        "score": 99.51976667131696
      },
      {
        "patch": "try { c = bin _ op . apply ( a , b ) ;",
        "score": 99.51112365722656
      },
      {
        "patch": "c = bin _ op . apply ( a , b , a , b ) ;",
        "score": 99.50973849826389
      },
      {
        "patch": "c = bin _ op . apply ( a , b , b , false ) ;",
        "score": 99.51341417100694
      },
      {
        "patch": "c = bin _ op . do ( a , b ) ;",
        "score": 99.50782993861607
      },
      {
        "patch": "c = bin _ op . apply ( a , b , 0 ) ;",
        "score": 99.5127944946289
      },
      {
        "patch": "result = bin _ op . apply ( a , b ) ;",
        "score": 99.49917166573661
      },
      {
        "patch": "c = bin _ op . apply ( a , b , b , true ) ;",
        "score": 99.50604926215277
      },
      {
        "patch": "tmp = bin _ op . apply ( a , b ) ;",
        "score": 99.49867466517857
      },
      {
        "patch": "c = bin _ op . apply ( a , 0 . 0 ) ;",
        "score": 99.50511932373047
      },
      {
        "patch": "c . apply ( a , b ) ; stack . push ( c ) ;",
        "score": 99.4933723000919
      },
      {
        "patch": "c = bin _ op . apply ( a , b , value ) ;",
        "score": 99.50125122070312
      },
      {
        "patch": "c = bin _ op . apply ( a , b , b , a ) ;",
        "score": 99.49222140842014
      },
      {
        "patch": "c = bin _ op . apply ( a , value ) ;",
        "score": 99.49539620535714
      },
      {
        "patch": "c = bin _ op . apply ( a , b , b , c ) ;",
        "score": 99.49046495225694
      },
      {
        "patch": "bin _ op = bin _ op . apply ( a , b ) ;",
        "score": 99.49251556396484
      },
      {
        "patch": "c = bin _ op . apply ( a , b , b . value ) ;",
        "score": 99.49229600694444
      },
      {
        "patch": "if ( bin _ op . apply ( a , b ) ) {",
        "score": 99.48755696614583
      },
      {
        "patch": "c = bin _ op . apply ( a , b , 0 . 0 ) ;",
        "score": 99.48990885416667
      },
      {
        "patch": "c = new Binary CaMeL Operator < Double > ( a , b ) ;",
        "score": 99.48712921142578
      },
      {
        "patch": "c = bin _ op . apply ( b , b , b ) ;",
        "score": 99.48668670654297
      },
      {
        "patch": "{ c = bin _ op . apply ( a , b ) ;",
        "score": 99.4862060546875
      },
      {
        "patch": "if ( b == null ) { c = bin _ op . apply ( a ) ;",
        "score": 99.48618035567434
      },
      {
        "patch": "c = bin _ op . apply ( bin _ op , a , b ) ;",
        "score": 99.48506673177083
      },
      {
        "patch": "c = bin _ op . apply ( a , new Integer ( b ) ) ;",
        "score": 99.48210991753473
      },
      {
        "patch": "c = bin _ op . apply ( a , ( Integer ) b ) ;",
        "score": 99.47687844669117
      },
      {
        "patch": "c = bin _ op . apply ( b ) ;",
        "score": 99.47972615559895
      },
      {
        "patch": "int bin _ op = bin _ op . apply ( a , b ) ;",
        "score": 99.4730583639706
      },
      {
        "patch": "c = bin _ op . apply ( a , c , b ) ;",
        "score": 99.47662353515625
      },
      {
        "patch": "c = bin _ op . apply ( a , bin _ op , b ) ;",
        "score": 99.47652180989583
      },
      {
        "patch": "c = bin _ op . apply ( a , ( Double ) b ) ;",
        "score": 99.47002096737133
      },
      {
        "patch": "c = bin _ op . apply ( a , b , b . b ) ;",
        "score": 99.47577582465277
      },
      {
        "patch": "double c = bin _ op . apply ( a , b ) ;",
        "score": 99.4651123046875
      },
      {
        "patch": "c = bin _ op . apply ( a , true ) ;",
        "score": 99.47210693359375
      },
      {
        "patch": "c = bin _ op . apply ( token , b ) ;",
        "score": 99.46464320591518
      },
      {
        "patch": "c = bin _ op . apply ( a , 0 ) ;",
        "score": 99.47135707310268
      },
      {
        "patch": "c = bin _ op . run ( a , b ) ;",
        "score": 99.46163504464286
      },
      {
        "patch": "i = bin _ op . apply ( a , b ) ;",
        "score": 99.45669119698661
      },
      {
        "patch": "c = bin _ op . apply ( a , b , 1 ) ;",
        "score": 99.47015380859375
      },
      {
        "patch": "p = bin _ op . apply ( a , b ) ;",
        "score": 99.45444161551339
      },
      {
        "patch": "c = bin _ op . apply ( c , b , b ) ;",
        "score": 99.46981811523438
      },
      {
        "patch": "c ; c = bin _ op . apply ( a , b ) ;",
        "score": 99.45274353027344
      },
      {
        "patch": "c = bin _ op . apply ( a , b . b ) ;",
        "score": 99.46717071533203
      },
      {
        "patch": "c = new Binary CaMeL Operator < Double >> ( a , b ) ;",
        "score": 99.45149993896484
      },
      {
        "patch": "c = bin _ op . get ( b ) ;",
        "score": 99.45969645182292
      },
      {
        "patch": "int a = bin _ op . apply ( a , b ) ;",
        "score": 99.44890950520833
      },
      {
        "patch": "a = bin _ op . apply ( a , b ) ;",
        "score": 99.45831298828125
      },
      {
        "patch": "retval = bin _ op . apply ( a , b ) ;",
        "score": 99.44864327566964
      },
      {
        "patch": "c = bin _ op . apply ( bin _ op , a ) ;",
        "score": 99.45718383789062
      },
      {
        "patch": "return bin _ op . apply ( a , b ) ; }",
        "score": 99.44043840680804
      },
      {
        "patch": "c = bin _ op . apply ( a , b ) ; break ;",
        "score": 99.45108795166016
      },
      {
        "patch": "c = bin _ op . apply ( new Double ( b ) ) ;",
        "score": 99.43955993652344
      },
      {
        "patch": "c = bin _ op . apply ( a , $NUMBER$ ) ;",
        "score": 99.45063999720982
      },
      {
        "patch": "float c = bin _ op . apply ( a , b ) ;",
        "score": 99.43681640625
      },
      {
        "patch": "c = bin _ op . get ( a , b , b ) ;",
        "score": 99.443359375
      },
      {
        "patch": "c = bin _ op . set ( a , b ) ;",
        "score": 99.43247767857143
      },
      {
        "patch": "c = bin _ op . apply ( a , op ) ;",
        "score": 99.44317626953125
      },
      {
        "patch": "c = bin _ op ; stack . push ( c ) ;",
        "score": 99.43233816964286
      },
      {
        "patch": "c = bin _ op . get ( a , 0 ) ;",
        "score": 99.43393380301339
      },
      {
        "patch": "s = bin _ op . apply ( a , b ) ;",
        "score": 99.43154471261161
      },
      {
        "patch": "c = bin _ op . apply ( new Double ( c ) ) ;",
        "score": 99.4314956665039
      },
      {
        "patch": "c = bin _ op . apply ( op ) ;",
        "score": 99.42923990885417
      },
      {
        "patch": "try { bin _ op = op . apply ( a , b ) ;",
        "score": 99.42778015136719
      },
      {
        "patch": "c = bin _ op . get ( b , b ) ;",
        "score": 99.42619977678571
      },
      {
        "patch": "Integer c = bin _ op . apply ( a , b ) ;",
        "score": 99.42722981770834
      },
      {
        "patch": "c . set ( bin _ op , b ) ;",
        "score": 99.42579142252605
      },
      {
        "patch": "c = bin _ op . apply ( a , null ) ;",
        "score": 99.42535400390625
      },
      {
        "patch": "c = bin _ op . apply ( a , false ) ;",
        "score": 99.42435128348214
      },
      {
        "patch": "int b = bin _ op . apply ( a , b ) ;",
        "score": 99.41951497395833
      },
      {
        "patch": "c = bin _ op . apply ( $NUMBER$ , b ) ;",
        "score": 99.41637311662946
      },
      {
        "patch": "buf = bin _ op . apply ( a , b ) ;",
        "score": 99.41157749720982
      },
      {
        "patch": "c += bin _ op . apply ( a , b ) ;",
        "score": 99.40669468470982
      },
      {
        "patch": "c = op . apply ( a , b , b ) ;",
        "score": 99.41085379464286
      },
      {
        "patch": "Point c = bin _ op . apply ( a , b ) ;",
        "score": 99.4039794921875
      },
      {
        "patch": "c = a . apply ( a , b ) ;",
        "score": 99.40757242838542
      },
      {
        "patch": "try { bin _ op = op . get ( token ) ;",
        "score": 99.40276227678571
      },
      {
        "patch": "c = c . apply ( a , b ) ;",
        "score": 99.40269978841145
      },
      {
        "patch": "c = bin _ op . parse ( a , b ) ;",
        "score": 99.40050397600446
      },
      {
        "patch": "c = bin _ op . apply ( c ) ;",
        "score": 99.39816284179688
      },
      {
        "patch": "c = b . apply ( a , b ) ;",
        "score": 99.39686075846355
      },
      {
        "patch": "m = bin _ op . apply ( a , b ) ;",
        "score": 99.38973563058036
      },
      {
        "patch": "c = bin _ op . apply ( start , b ) ;",
        "score": 99.38960484095982
      },
      {
        "patch": "c = bin _ op . get ( c ) ;",
        "score": 99.35885620117188
      },
      {
        "patch": "z = bin _ op . apply ( a , b ) ;",
        "score": 99.38874162946429
      },
      {
        "patch": "c . set ( a , b ) ;",
        "score": 99.311279296875
      },
      {
        "patch": "c = bin _ op . apply ( token ) ;",
        "score": 99.3823954264323
      },
      {
        "patch": "c . add ( bin _ op ) ;",
        "score": 99.29266357421875
      },
      {
        "patch": "c = op . apply ( a ) ;",
        "score": 99.2760986328125
      },
      {
        "patch": "c = bin _ op . apply ( a ,",
        "score": 99.36183860085227
      },
      {
        "patch": "c = bin _ op . apply ( ) ;",
        "score": 99.25669167258523
      },
      {
        "patch": "c = ( Double ) stack . pop ( ) ;",
        "score": 99.35622151692708
      },
      {
        "patch": "c = b . apply ( a ) ;",
        "score": 99.25276489257813
      },
      {
        "patch": "c . apply ( a , b ) ;",
        "score": 99.312109375
      },
      {
        "patch": "c = apply ( a , b ) ;",
        "score": 99.20410766601563
      },
      {
        "patch": "c = op . get ( token ) ;",
        "score": 99.28831176757812
      },
      {
        "patch": "c . apply ( bin _ op ) ;",
        "score": 99.20380249023438
      },
      {
        "patch": "return op . apply ( a , b ) ;",
        "score": 99.26025390625
      },
      {
        "patch": "c = a . apply ( a ) ;",
        "score": 99.2032470703125
      },
      {
        "patch": "c = c . apply ( a ) ;",
        "score": 99.17620239257812
      },
      {
        "patch": "if ( bin _ op ) {",
        "score": 98.996826171875
      },
      {
        "patch": "c . set ( bin _ op ) ;",
        "score": 99.16558837890625
      },
      {
        "patch": "c . push ( c ) ;",
        "score": 98.9613037109375
      },
      {
        "patch": "c . apply ( a ) ;",
        "score": 99.06732177734375
      },
      {
        "patch": "if ( c ) {",
        "score": 98.57183837890625
      }
    ]
  },
  "SHORTEST_PATH_LENGTH-37-38": {
    "src": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
    "patches": [
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.92956194196428
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ) ;",
        "score": 99.87052408854167
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ; }",
        "score": 99.80522325303819
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ;",
        "score": 99.8627068014706
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) + 1 ) ) ) ;",
        "score": 99.80090661951013
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + 1 ) ) ;",
        "score": 99.78648158482143
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; for ( Node nextnode : node . get CaMeL Successors ( ) ) { if ( visited CaMeL Nodes . contains ( nextnode ) ) {",
        "score": 99.83635602678571
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + length _ by _ edge . get ( node ) ) ) ;",
        "score": 99.78309755067568
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ; } } return distance ;",
        "score": 99.82628173828125
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ;",
        "score": 99.77908063616071
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; unvisited CaMeL Nodes . put ( nextnode , Math . min ( unvisited CaMeL Nodes . get ( nextnode ) ) ) ;",
        "score": 99.81861542492378
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) ) ) ; }",
        "score": 99.77259657118056
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ; } return - 0 ;",
        "score": 99.818212890625
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) + 0 ) ) ) ;",
        "score": 99.76454946157095
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } unvisited CaMeL Nodes . add ( nextnode ) ; for ( Node nextnode : node . get CaMeL Successors ( ) ) {",
        "score": 99.8180497332317
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) + 1 ) ) ;",
        "score": 99.76165936444256
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) + $NUMBER$ ) ) ) ;",
        "score": 99.76052444045608
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ) ; }",
        "score": 99.806640625
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ; return distance ;",
        "score": 99.80292711759868
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + 1 ) ) ; }",
        "score": 99.75548895474138
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ; }",
        "score": 99.80018833705357
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + 0 ) ) ;",
        "score": 99.75449916294643
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ; } }",
        "score": 99.79480310388513
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + - length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.74898952907986
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ; } return distance ;",
        "score": 99.78294020432692
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node ) ) ) ) ;",
        "score": 99.74877166748047
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) - length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.77898297991071
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ; ;",
        "score": 99.74654812282986
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ; break ;",
        "score": 99.77746252111487
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) , length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.74347795758929
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , node , nextnode ) ) ) ) ;",
        "score": 99.77339131123311
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) , nextnode ) ) ) ;",
        "score": 99.77309698807566
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( node ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.73166073069854
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ) ) ;",
        "score": 99.76871964738176
      },
      {
        "patch": "Collections . as CaMeL List ( node , nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.73126898871527
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ; }",
        "score": 99.72576226128473
      },
      {
        "patch": "unvisited CaMeL Nodes . contains ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.76349748883929
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node ) , nextnode ) ) ) ;",
        "score": 99.72308872767857
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.76132541232639
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) + 0 ) ) ;",
        "score": 99.7230323585304
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( nextnode ) ) ) ) ;",
        "score": 99.7604462594697
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . size ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.72269112723214
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } unvisited CaMeL Nodes . add ( nextnode ) ;",
        "score": 99.76034780649039
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + 0 ) ) ; }",
        "score": 99.72211745689656
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ; continue ;",
        "score": 99.75894082559121
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + $NUMBER$ ) ) ;",
        "score": 99.72201974051339
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) + distance ;",
        "score": 99.75580658783784
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) + $NUMBER$ ) ) ;",
        "score": 99.72046558277027
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( ( node , nextnode ) ) ) ) ) ;",
        "score": 99.75417678420608
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get CaMeL Count ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.72012906461148
      },
      {
        "patch": "visited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.71950396369485
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ; return distance ;",
        "score": 99.7537742820946
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node ) nextnode ) ) ) ;",
        "score": 99.7189582375919
      },
      {
        "patch": "list . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.75279998779297
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , node ) ) ) ) ;",
        "score": 99.7188361672794
      },
      {
        "patch": "new Integer ( unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.75196597450658
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + length _ by _ edge . get ( ) ) ) ;",
        "score": 99.71424018012152
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.71116480334052
      },
      {
        "patch": "new Integer ( unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ) ;",
        "score": 99.74982471955128
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) ) ) ;",
        "score": 99.70958533653847
      },
      {
        "patch": "this . unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.74842958192568
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( node ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ;",
        "score": 99.70759851792279
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node . get ( nextnode ) ) ) ) ) ;",
        "score": 99.74769351356908
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node . nextnode ) ) ) ) ;",
        "score": 99.70684291294643
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ) ; return distance ;",
        "score": 99.7466571514423
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) . get ( nextnode ) + length _ by _ edge . get ( nextnode ) ) ) ;",
        "score": 99.70564270019531
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ; break ; }",
        "score": 99.74557976973684
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( node ) ) ) ; }",
        "score": 99.69839242788461
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ;",
        "score": 99.74373372395833
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( unvisited CaMeL Nodes ) ) ) ) ;",
        "score": 99.69612165178572
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; unvisited CaMeL Nodes . put ( nextnode , Integer . MAX _ VALUE ) ;",
        "score": 99.74358933971774
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + $NUMBER$ ) ) ; }",
        "score": 99.69094322467673
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , node , nextnode ) ) ) ;",
        "score": 99.74087185329861
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node ) ) + 1 ) ) ;",
        "score": 99.68899356617646
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) , ) ) ) ;",
        "score": 99.73853217230902
      },
      {
        "patch": "unvisited CaMeL Nodes + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.68893116918103
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( ( node , nextnode ) ) ) ) ;",
        "score": 99.73828803168402
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ,",
        "score": 99.73737335205078
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) ) + 1 ) ;",
        "score": 99.68792724609375
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) - length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ;",
        "score": 99.73558872767858
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get CaMeL Value ( ) + 1 ) ) ;",
        "score": 99.68629673549107
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) +",
        "score": 99.7278060913086
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( unvisited CaMeL Nodes . get ( nextnode ) ) ) ) ;",
        "score": 99.68608542049633
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode )",
        "score": 99.72178206905242
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + - 1 ) ) ;",
        "score": 99.68319807381465
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + unvisited CaMeL Nodes . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.72097598805146
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + Arrays . as CaMeL List ( node , nextnode ) ) ) ;",
        "score": 99.68292705829327
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; unvisited CaMeL Nodes . put ( nextnode , Math . MAX _ VALUE ) ;",
        "score": 99.72001008064517
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) . get ( nextnode ) + length _ by _ edge . get CaMeL Value ( ) ) ) ;",
        "score": 99.68167114257812
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) )",
        "score": 99.71890079273896
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + 1 ) ) ;",
        "score": 99.67649931066177
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; for ( Node nextnode : node . get CaMeL Successors ( ) ) {",
        "score": 99.71858162715517
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get CaMeL Count ( ) + 1 ) ) ;",
        "score": 99.67644391741071
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } unvisited CaMeL Nodes . remove ( nextnode ) ;",
        "score": 99.71331317608173
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get CaMeL Value ( ) ) ) ;",
        "score": 99.67039137620192
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } unvisited CaMeL Nodes . put ( nextnode , Integer . MAX _ VALUE ) ;",
        "score": 99.70792388916016
      },
      {
        "patch": "unvisited CaMeL Nodes + length _ by _ edge . get ( nextnode ) + length _ by _ edge . get ( nextnode ) ) ) ;",
        "score": 99.66706085205078
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) , Math . min ( unvisited CaMeL Nodes . get ( nextnode ) ) ) ;",
        "score": 99.70431315104166
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node ) ) ) ;",
        "score": 99.6663589477539
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) )",
        "score": 99.7040497750947
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) ) ) ; ;",
        "score": 99.66135886863425
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + node . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.6987540952621
      },
      {
        "patch": "unvisited CaMeL Nodes , length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.66018150592673
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } return Integer . MAX _ VALUE ; } return Integer . MAX _ VALUE ;",
        "score": 99.69723307291666
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) + length _ by _ edge . get ( nextnode ) + 1 ) ;",
        "score": 99.65869140625
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; if ( unvisited CaMeL Nodes . get ( nextnode ) == null ) {",
        "score": 99.69437662760417
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get CaMeL Type ( ) + 1 ) ) ;",
        "score": 99.65727015904018
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } for ( Node nextnode : node . get CaMeL Successors ( ) ) {",
        "score": 99.69400227864584
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( node ) ) ) ;",
        "score": 99.65478515625
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } visited CaMeL Nodes . add ( nextnode ) ;",
        "score": 99.693916015625
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) + length _ by _ edge . get ( nextnode ) ) ; }",
        "score": 99.65442346643519
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } return unvisited CaMeL Nodes . get ( nextnode ) ;",
        "score": 99.6935402199074
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) . get ( nextnode ) + length _ by _ edge . get ( node ) ) ) ;",
        "score": 99.6538794732863
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; unvisited CaMeL Nodes . add ( nextnode ) ; }",
        "score": 99.69241098257211
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get CaMeL Key ( ) + 1 ) ) ;",
        "score": 99.65101841517857
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get CaMeL Count ( ) ) ) ;",
        "score": 99.64988356370192
      },
      {
        "patch": "list . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ;",
        "score": 99.686279296875
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + 1 ) ) ; ;",
        "score": 99.64895945581897
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } } return unvisited CaMeL Nodes . get ( nextnode ) ;",
        "score": 99.68593924386161
      },
      {
        "patch": "node , nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ;",
        "score": 99.64869005926724
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } unvisited CaMeL Nodes . put ( nextnode , unvisited CaMeL Nodes ) ;",
        "score": 99.68165637600806
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) , Arrays . as CaMeL List ( node , nextnode ) ) ) ;",
        "score": 99.64633413461539
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } unvisited CaMeL Nodes . add ( nextnode ) ; }",
        "score": 99.67342122395833
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + - length _ by _ edge . get ( nextnode ) ) ) ;",
        "score": 99.64602322048611
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } } unvisited CaMeL Nodes . add ( nextnode ) ;",
        "score": 99.67103407118056
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) ) ) ) ;",
        "score": 99.64199037905092
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; return unvisited CaMeL Nodes . get ( nextnode ) ;",
        "score": 99.66799692007211
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + nextnode ) ) ;",
        "score": 99.64125639816811
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + 1 ) ) ; } }",
        "score": 99.64124348958333
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ; }",
        "score": 99.66348266601562
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) ) ) ; } }",
        "score": 99.64059884207589
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; if ( unvisited CaMeL Nodes . contains ( nextnode ) ) {",
        "score": 99.65841238839286
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + 1 ) ) ) ;",
        "score": 99.63965685614224
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ) ; } unvisited CaMeL Nodes . add ( nextnode ) ;",
        "score": 99.65187355324075
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( nextnode ) + - 1 ) ) ; }",
        "score": 99.635986328125
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( $STRING$ ) ) ) ) ;",
        "score": 99.65017465444711
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } } } return Integer . MAX _ VALUE ;",
        "score": 99.64682006835938
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + 1 ) + length _ by _ edge . get ( nextnode ) ) ;",
        "score": 99.63053676060268
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; unvisited CaMeL Nodes . remove ( nextnode ) ; }",
        "score": 99.6468036358173
      },
      {
        "patch": "Collections . as CaMeL List ( node , nextnode ) + length _ by _ edge . get ( nextnode ) ) ) ;",
        "score": 99.6279296875
      },
      {
        "patch": "/ length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.646533203125
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + Collections . as CaMeL List ( node , nextnode ) ) ) ;",
        "score": 99.62688739483173
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ) ;",
        "score": 99.64586385091145
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get CaMeL Type ( ) ) ) ;",
        "score": 99.62505634014423
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get CaMeL Value ( ) + 1 ) ) ; }",
        "score": 99.62263436153017
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + unvisited CaMeL Nodes . get ( nextnode ) ) ) ) ;",
        "score": 99.64138559194711
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + Arrays . as CaMeL List ( node , nextnode ) ) ) ; }",
        "score": 99.61981879340277
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } } return Integer . MAX _ VALUE ; }",
        "score": 99.63925170898438
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) , length _ by _ edge . get ( nextnode ) ) ) ; }",
        "score": 99.6166359230324
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ;",
        "score": 99.63818359375
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get CaMeL Offset ( ) ) ) ;",
        "score": 99.61359112079327
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) , unvisited CaMeL Nodes . get ( nextnode ) ) ; }",
        "score": 99.6374042217548
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get CaMeL Key ( ) ) ) ;",
        "score": 99.61208871694711
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } } visited CaMeL Nodes . add ( nextnode ) ;",
        "score": 99.6373760516827
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.61180579144022
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + unvisited CaMeL Nodes . get ( nextnode ) ) ) ; }",
        "score": 99.63658728966347
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( Arrays . as CaMeL List ( node , nextnode ) + 1 ) ) ) ;",
        "score": 99.60640625
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } unvisited CaMeL Nodes . add ( node ) ;",
        "score": 99.6355859375
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get CaMeL Value ( ) ) ) ; }",
        "score": 99.60413953993056
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; unvisited CaMeL Nodes . add ( nextnode ) ;",
        "score": 99.634697265625
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . size ( ) ) ) ;",
        "score": 99.60214233398438
      },
      {
        "patch": ">> length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
        "score": 99.632353515625
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } visited CaMeL Nodes . remove ( nextnode ) ;",
        "score": 99.62458984375
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) . get ( nextnode ) + 1 ) ) ; }",
        "score": 99.58337933084239
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + 1 ) ) ;",
        "score": 99.54755401611328
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } return node . get CaMeL Value ( ) ;",
        "score": 99.61287434895833
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge ) ) ;",
        "score": 99.53453369140625
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ) ; } } return Integer . MAX _ VALUE ;",
        "score": 99.60946655273438
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + 1 ) ) ; }",
        "score": 99.5118049172794
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } } return Integer . MAX _ VALUE ;",
        "score": 99.60304857336956
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; }",
        "score": 99.43406575520834
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } return Integer . MAX _ VALUE ;",
        "score": 99.5782803622159
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( node ) ) ) ;",
        "score": 99.43088942307692
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } } return - 0 ;",
        "score": 99.5438720703125
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + 0 ) ) ;",
        "score": 99.41863250732422
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) + $NUMBER$ ) ) ;",
        "score": 99.40157318115234
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ; } } return - 1 ;",
        "score": 99.5258056640625
      },
      {
        "patch": "unvisited CaMeL Nodes . size ( ) ) ) ;",
        "score": 99.28546142578125
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) ) ) ) ;",
        "score": 99.46351725260416
      },
      {
        "patch": "unvisited CaMeL Nodes ) ) ;",
        "score": 98.88877868652344
      },
      {
        "patch": "unvisited CaMeL Nodes . get ( nextnode ) +",
        "score": 99.22918701171875
      },
      {
        "patch": "node , nextnode ) ) ;",
        "score": 98.87713623046875
      },
      {
        "patch": "list . get ( nextnode ) ) ) ;",
        "score": 99.07924582741477
      },
      {
        "patch": "node ) ) ;",
        "score": 98.07647094726562
      }
    ]
  },
  "SHORTEST_PATH_LENGTHS-36-37": {
    "src": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
    "patches": [
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.97764144405242
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.91112219769022
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.97726341985887
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.902587890625
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.97393208165323
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.90215773809524
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.97357768397177
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) { for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) {",
        "score": 99.90139334542411
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.96741903981855
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.89719556725544
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.96656848538306
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) { for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) {",
        "score": 99.89174107142857
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.9626228578629
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( $STRING$ ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.89080489309211
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.96203219506049
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , new Hash CaMeL Map < Integer > ( ) ) ;",
        "score": 99.88888784555289
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) ) ;",
        "score": 99.94296875
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.88810221354167
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) ) ;",
        "score": 99.938232421875
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) { for ( int j = 0 ; j < num CaMeL Nodes ; j ++ )",
        "score": 99.88294566761364
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( k , k ) ) ) ;",
        "score": 99.92803364415323
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.88226609002976
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.92679036458334
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( $STRING$ , j ) ;",
        "score": 99.87779651988636
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) ) ;",
        "score": 99.92610677083333
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , new Integer ( update _ length ) ) ;",
        "score": 99.87509765625
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.92413736979167
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } } return length _ by _ path ;",
        "score": 99.87497336647728
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) ) ;",
        "score": 99.92364908854167
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) { for ( int j = 0 ; j < num CaMeL Nodes ; j ++ )",
        "score": 99.87327769886363
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( k , k ) ) ) ;",
        "score": 99.92363911290323
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } } }",
        "score": 99.86929009885205
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( k , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.923583984375
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , Arrays . as CaMeL List ( i , k ) ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.8690544577206
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; }",
        "score": 99.92334759424604
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; }",
        "score": 99.8671251662234
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; }",
        "score": 99.92319258432539
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( $STRING$ ) ) ;",
        "score": 99.86685583726415
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; }",
        "score": 99.92124720982143
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( $STRING$ , j ) ;",
        "score": 99.86585582386364
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.921142578125
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , Arrays . as CaMeL List ( i , k ) ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.86527267156863
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; }",
        "score": 99.92069692460318
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( $STRING$ ) ) ;",
        "score": 99.86452498525944
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( k , k ) ) ) ;",
        "score": 99.92026839717742
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , Arrays . as CaMeL List ( i , k ) ) ) ) ;",
        "score": 99.86350145526961
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.9186279296875
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } } return length _ by _ path ;",
        "score": 99.8630859375
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.91753743489583
      },
      {
        "patch": "length _ by _ edge . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.85995881453805
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.91422526041667
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i ,",
        "score": 99.85953776041667
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , Arrays . as CaMeL List ( j , k ) ) ) ) ;",
        "score": 99.85713465073529
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j ,",
        "score": 99.85683936403508
      },
      {
        "patch": "length _ by _ path . get ( i ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.89690816627359
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } } }",
        "score": 99.85662468112245
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j ,",
        "score": 99.85570004111842
      },
      {
        "patch": "length _ by _ path . get ( i ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.89513929834905
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , Arrays . as CaMeL List ( j , k ) ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.85565065870098
      },
      {
        "patch": "length _ by _ path . get ( i ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.89382186025944
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i ,",
        "score": 99.85437225877193
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; }",
        "score": 99.85354679188829
      },
      {
        "patch": "length _ by _ path . get ( i ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.89049602004717
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) {",
        "score": 99.85336538461539
      },
      {
        "patch": "length _ by _ path . get ( j ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.88855210790095
      },
      {
        "patch": "length _ by _ edge . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.84987474524456
      },
      {
        "patch": "length _ by _ path . get ( k ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.8878335053066
      },
      {
        "patch": "length _ by _ edge . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.84879557291667
      },
      {
        "patch": "length _ by _ path . get ( j ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.88669111143868
      },
      {
        "patch": "length _ by _ edge . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.84872581845238
      },
      {
        "patch": "length _ by _ path . get ( k ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.88614755306604
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( j , j ) , update _ length ) ;",
        "score": 99.84644616168478
      },
      {
        "patch": "length _ by _ path . get ( j ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.88464585790095
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j , update _ length ) ) ;",
        "score": 99.84403659986413
      },
      {
        "patch": "length _ by _ path . get ( k ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.88428655660377
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } }",
        "score": 99.84396362304688
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( j ) ) ;",
        "score": 99.88187278891509
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j , update _ length ) ) ;",
        "score": 99.8411281419837
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( j ) ) ;",
        "score": 99.88166089327831
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) {",
        "score": 99.83982496995192
      },
      {
        "patch": "length _ by _ path . get ( j ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.88160561615567
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , j ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.83812415081522
      },
      {
        "patch": "length _ by _ path . get ( k ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.88118182488208
      },
      {
        "patch": "length _ by _ edge . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.8371349516369
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) ) ;",
        "score": 99.86382446289062
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; if ( Arrays . as CaMeL List ( i , j ) )",
        "score": 99.83423295454546
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + 1 ) ;",
        "score": 99.8540371981534
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; if ( Arrays . as CaMeL List ( i , j ) )",
        "score": 99.83377130681818
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + 1 ) ;",
        "score": 99.85385964133523
      },
      {
        "patch": "length _ by _ edge . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.83363560267857
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) ) ;",
        "score": 99.84320068359375
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ edge . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.83349609375
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + 1 ) ;",
        "score": 99.84044300426136
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( j , j ) , update _ length ) ;",
        "score": 99.832275390625
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + 1 ) ;",
        "score": 99.8395663174716
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } }",
        "score": 99.83076985677083
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + $NUMBER$ ) ;",
        "score": 99.83322975852273
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.82753208705357
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( k , k ) ) ) ;",
        "score": 99.83265904017857
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } else {",
        "score": 99.82685945471938
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + $NUMBER$ ) ;",
        "score": 99.83251953125
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , k ) , update _ length ) ;",
        "score": 99.82626740828805
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( k , k ) ) ) ;",
        "score": 99.82413736979167
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.82383510044643
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + 0 ) ;",
        "score": 99.82279829545455
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , j ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.82261439732143
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } } else {",
        "score": 99.822578125
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( k , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.82196335565476
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + 0 ) ;",
        "score": 99.82080078125
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , j ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.82041713169643
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ edge . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.81953761888587
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + $NUMBER$ ) ;",
        "score": 99.8194580078125
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + $NUMBER$ ) ;",
        "score": 99.81902521306819
      },
      {
        "patch": "length _ by _ edge . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; }",
        "score": 99.81645819481383
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( k , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.81777808779762
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , i ) , update _ length ) ;",
        "score": 99.81504755434783
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.81738891601563
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.81434849330357
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.81567993164063
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } else {",
        "score": 99.81375558035714
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , update _ length ) , update _ length ) ;",
        "score": 99.8118896484375
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + 0 ) ;",
        "score": 99.80939275568181
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + 1 ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.81139119466145
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + 0 ) ;",
        "score": 99.80840509588069
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , k ) , update _ length ) ;",
        "score": 99.8096233865489
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; }",
        "score": 99.80763989825581
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , j ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.80896526834239
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; }",
        "score": 99.80653842659883
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , i ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.80819038722827
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + k ) ;",
        "score": 99.80614124644886
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j , update _ length ) , update _ length ) ;",
        "score": 99.80806640625
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k , k ) ) ) ;",
        "score": 99.80473188920455
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . add ( Arrays . as CaMeL List ( i , j ) ) ;",
        "score": 99.80760556175595
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ) ;",
        "score": 99.80350167410714
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get (",
        "score": 99.80754743303571
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) + 1 ) ) ;",
        "score": 99.80185768821023
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) ,",
        "score": 99.80686094702745
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ) ;",
        "score": 99.80121140252976
      },
      {
        "patch": "length _ by _ edge . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; }",
        "score": 99.80665101396276
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i ) ) ) ;",
        "score": 99.80088500976562
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.80410621279762
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( k ) ) ) ;",
        "score": 99.79366455078124
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length true ) ;",
        "score": 99.80409532912235
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) ) ;",
        "score": 99.77219752261513
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( j , j ) , update _ length ) ; }",
        "score": 99.8036486037234
      },
      {
        "patch": "( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.74900948660714
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , true ) ;",
        "score": 99.80045942826705
      },
      {
        "patch": "( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.74612862723214
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , j ) ) ) ;",
        "score": 99.8002697172619
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + 1 ) ) ;",
        "score": 99.74332682291667
      },
      {
        "patch": "length _ by _ path . get ( $STRING$ ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.79955394847973
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + Arrays . as CaMeL List ( j , k ) ) ;",
        "score": 99.73579545454545
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) +",
        "score": 99.7965058117378
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + 1 ) ; }",
        "score": 99.73410373263889
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k , k ) ) ) ;",
        "score": 99.79597611860795
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + Arrays . as CaMeL List ( i , k ) ) ;",
        "score": 99.72991388494319
      },
      {
        "patch": "length _ by _ edge . get ( Arrays . as CaMeL List ( i , k ) ) ) ; for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) {",
        "score": 99.79407677283653
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + Arrays . as CaMeL List ( j , k ) ) ;",
        "score": 99.7206143465909
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.71891645951705
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) +",
        "score": 99.79233755716463
      },
      {
        "patch": "length _ by _ path . get ( i ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;",
        "score": 99.69804243607955
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( j ) ) ;",
        "score": 99.69470584753788
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) ,",
        "score": 99.79080125762195
      },
      {
        "patch": "length _ by _ path . get ( i ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.69378847064394
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) )",
        "score": 99.78960571289062
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
        "score": 99.6894198330966
      },
      {
        "patch": "length _ by _ path . get ( 0 ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.78666068412163
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + 1 ) ;",
        "score": 99.62148030598958
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) )",
        "score": 99.78587646484375
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + $NUMBER$ ) ;",
        "score": 99.59604899088542
      },
      {
        "patch": "length _ by _ path . get ( i ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.7776076858108
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + 1 ) ;",
        "score": 99.59206136067708
      },
      {
        "patch": "Integer . as CaMeL List ( i , k ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.77654534417229
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + $NUMBER$ ) ;",
        "score": 99.5652567545573
      },
      {
        "patch": "length _ by _ edge . get ( i ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.77171531883445
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j ) ) ) ;",
        "score": 99.56414794921875
      },
      {
        "patch": "length _ by _ path . get ( $NUMBER$ ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.76994035050676
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + 0 ) ;",
        "score": 99.5622049967448
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( $STRING$ , j ) ;",
        "score": 99.76612025669642
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k , k ) ) ) ;",
        "score": 99.53904215494792
      },
      {
        "patch": "length _ by _ edge . get ( $STRING$ ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.76514331714527
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + k ) ;",
        "score": 99.53253173828125
      },
      {
        "patch": "length _ by _ path . get ( j ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.76362568623311
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + 0 ) ;",
        "score": 99.5281473795573
      },
      {
        "patch": "Integer . as CaMeL List ( j , k ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;",
        "score": 99.76361248944256
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; }",
        "score": 99.52171790081522
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( $STRING$ , j ) ;",
        "score": 99.73711635044643
      },
      {
        "patch": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + ) ;",
        "score": 99.51773734714673
      },
      {
        "patch": "length _ by _ path . get ( i ) ) ;",
        "score": 99.3592998798077
      },
      {
        "patch": "length _ by _ path . get ( k ) ) ;",
        "score": 99.34124286358173
      },
      {
        "patch": "length _ by _ path . get ( j ) ) ;",
        "score": 99.34011606069711
      },
      {
        "patch": "length _ by _ path",
        "score": 98.19846598307292
      }
    ]
  },
  "SHORTEST_PATHS-30-31": {
    "src": "weight _ by _ edge . put ( edge , update _ weight ) ;",
    "patches": [
      {
        "patch": "weight _ by _ node . put ( edge . get ( edge . get ( 1 ) ) , update _ weight ) ;",
        "score": 99.8883056640625
      },
      {
        "patch": "weight _ by _ edge . put ( edge , update _ weight ) ;",
        "score": 99.80601501464844
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( edge . get ( 1 ) ) , update _ weight ) ;",
        "score": 99.88442758413461
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , update _ weight ) ;",
        "score": 99.79731677827381
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , edge , update _ weight ) ;",
        "score": 99.79396654211956
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( edge . get ( 0 ) ) , update _ weight ) ;",
        "score": 99.84202223557692
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 1 ) , update _ weight ) ;",
        "score": 99.78699311755952
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( edge . get ( 0 ) ) , update _ weight ) ;",
        "score": 99.83543043870192
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 1 ) , edge , update _ weight ) ;",
        "score": 99.7869289232337
      },
      {
        "patch": "weight _ by _ node . put ( edge , update _ weight ) ;",
        "score": 99.8332748413086
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( $NUMBER$ ) , edge , update _ weight ) ;",
        "score": 99.77677055027173
      },
      {
        "patch": "if ( update _ weight ) weight _ by _ node . put ( edge . get ( 0 ) , update _ weight ) ;",
        "score": 99.82219328703704
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( $NUMBER$ ) , update _ weight ) ;",
        "score": 99.77568126860119
      },
      {
        "patch": "if ( update _ weight ) weight _ by _ edge . put ( edge . get ( 0 ) , update _ weight ) ;",
        "score": 99.82136140046296
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( edge . get ( 0 ) ) , edge ) ;",
        "score": 99.75186157226562
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( 0 ) , update _ weight ) ;",
        "score": 99.81603422619048
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , edge . get ( 0 ) ) ;",
        "score": 99.74988810221355
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( edge . get ( 1 ) ) , INF ) ;",
        "score": 99.81221516927083
      },
      {
        "patch": "if ( update _ weight ) { weight _ by _ edge . put ( edge , update _ weight ) ; }",
        "score": 99.74659220377605
      },
      {
        "patch": "if ( ! update _ weight ) weight _ by _ edge . put ( edge , update _ weight ) ;",
        "score": 99.73695439877717
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( edge . get ( 1 ) ) , INF ) ;",
        "score": 99.80729166666667
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( edge . get ( 1 ) ) , edge ) ;",
        "score": 99.73277791341145
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( 0 ) , new Integer ( update _ weight ) ) ;",
        "score": 99.80720703125
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( ) , update _ weight ) ;",
        "score": 99.73228759765625
      },
      {
        "patch": "weight _ by _ edge . put ( edge , update _ weight ) ; } } return weight _ by _ node ;",
        "score": 99.807080078125
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 1 ) , edge . get ( 0 ) ) ;",
        "score": 99.72850545247395
      },
      {
        "patch": "weight _ by _ node . put ( edge , update _ weight ) ; } } return weight _ by _ node ;",
        "score": 99.803466796875
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( ( i ) ) , update _ weight ) ;",
        "score": 99.7278468919837
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , new Integer ( update _ weight ) ) ;",
        "score": 99.802197265625
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , update _ weight ) ; } }",
        "score": 99.72621221127717
      },
      {
        "patch": "for ( List < String > edge : weight _ by _ node . key CaMeL Set ( ) ) {",
        "score": 99.79011674360795
      },
      {
        "patch": "if ( ! update _ weight ) weight _ by _ edge . put ( edge , update _ weight ) ; }",
        "score": 99.72158813476562
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( 0 ) , update _ weight ) ; } }",
        "score": 99.77188773777173
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 1 ) , update _ weight ) ; } }",
        "score": 99.71678626019022
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( 1 ) , update _ weight ) ;",
        "score": 99.77111235119048
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( edge . get ( $NUMBER$ ) ) , edge ) ;",
        "score": 99.71321614583333
      },
      {
        "patch": "for ( List < String > edge : weight _ by _ edge . key CaMeL Set ( ) ) {",
        "score": 99.76987526633523
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , weight _ by _ edge ) ;",
        "score": 99.7122218919837
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( 1 ) , new Integer ( update _ weight ) ) ;",
        "score": 99.76966796875
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , update _ weight ) ; }",
        "score": 99.7053555575284
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( $NUMBER$ ) , update _ weight ) ; } }",
        "score": 99.70472783627717
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , edge , update _ weight ) ; }",
        "score": 99.7041015625
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( edge . get ( 0 ) ) , INF ) ;",
        "score": 99.76244099934895
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 1 ) , weight _ by _ edge ) ;",
        "score": 99.7027004076087
      },
      {
        "patch": "if ( update _ weight ) weight _ by _ edge . put ( edge , update _ weight ) ; }",
        "score": 99.7415187669837
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 1 ) , edge , update _ weight ) ; }",
        "score": 99.6967061360677
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( 1 ) , update _ weight ) ; } }",
        "score": 99.72947095788044
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 1 ) , update _ weight ) ; }",
        "score": 99.69547895951705
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( $NUMBER$ ) , weight _ by _ edge ) ;",
        "score": 99.69430409307066
      },
      {
        "patch": "weight _ by _ edge . put ( edge , update _ weight ) ; }",
        "score": 99.72477452895221
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( $NUMBER$ ) , edge , update _ weight ) ; }",
        "score": 99.68666585286458
      },
      {
        "patch": "int update _ weight = Math . min ( weight _ by _ node . get ( edge . get ( 1 ) )",
        "score": 99.722001953125
      },
      {
        "patch": "if ( update _ weight ) weight _ by _ node . put ( edge , update _ weight ) ; }",
        "score": 99.72150985054348
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get CaMeL Key ( ) , update _ weight ) ;",
        "score": 99.6824951171875
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( 0 ) , update _ weight ) ; }",
        "score": 99.71586470170455
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( $NUMBER$ ) , update _ weight ) ; }",
        "score": 99.68192915482955
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( update _ weight ) , update _ weight ) ;",
        "score": 99.67210852581522
      },
      {
        "patch": "weight _ by _ node . put ( edge , update _ weight ) ; }",
        "score": 99.70946547564338
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get CaMeL Value ( ) , update _ weight ) ;",
        "score": 99.65885786576705
      },
      {
        "patch": "if ( update _ weight ) weight _ by _ edge . put ( edge , update _ weight ) ;",
        "score": 99.69655539772727
      },
      {
        "patch": "if ( ! update _ weight ) { weight _ by _ edge . put ( edge , update _ weight ) ;",
        "score": 99.64345296223958
      },
      {
        "patch": "Integer update _ weight = Math . min ( weight _ by _ node . get ( edge . get ( 1 ) )",
        "score": 99.6903515625
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( $STRING$ ) , update _ weight ) ;",
        "score": 99.63992745535714
      },
      {
        "patch": "try { update _ weight = Math . min ( weight _ by _ node . get ( edge . get ( 1 ) )",
        "score": 99.68626051682692
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( i ) , update _ weight ) ;",
        "score": 99.63896251860119
      },
      {
        "patch": "int update _ weight = Math . min ( weight _ by _ edge . get ( edge . get ( 1 ) )",
        "score": 99.6808203125
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( true ) , update _ weight ) ;",
        "score": 99.63530040922619
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( edge ) , update _ weight ) ;",
        "score": 99.67724609375
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , edge ) ;",
        "score": 99.63465640419408
      },
      {
        "patch": "if ( update _ weight ) weight _ by _ node . put ( edge , update _ weight ) ;",
        "score": 99.67638050426136
      },
      {
        "patch": "weight _ by _ edge . put ( weight _ by _ edge , update _ weight ) ;",
        "score": 99.630029296875
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( 0 ) , INF ) ;",
        "score": 99.67267809416118
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( ) , weight _ by _ edge ) ;",
        "score": 99.6293057528409
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( edge ) , update _ weight ) ;",
        "score": 99.67267717633929
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , update _ weight ) ; } else",
        "score": 99.62645422894022
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( 1 ) , update _ weight ) ; }",
        "score": 99.67218572443181
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , update _ weight ) ; } } else",
        "score": 99.62608846028645
      },
      {
        "patch": "weight _ by _ edge . put ( edge , update _ weight _ by _ edge ) ;",
        "score": 99.62457885742188
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , INF ) ;",
        "score": 99.67020456414474
      },
      {
        "patch": "try { weight _ by _ edge . put ( edge . get ( 0 ) , update _ weight ) ;",
        "score": 99.62412958559783
      },
      {
        "patch": "for ( List < String > edge : weight _ by _ node . key CaMeL Set ( ) )",
        "score": 99.66176060267857
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 1 ) , edge ) ;",
        "score": 99.62172980057566
      },
      {
        "patch": "if ( weight _ by _ node . get ( edge . get ( edge . get ( 1 ) ) ) )",
        "score": 99.65737915039062
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( ) , update _ weight ) ; }",
        "score": 99.61997767857143
      },
      {
        "patch": "for ( List < String > edge : weight _ by _ edge . key CaMeL Set ( ) )",
        "score": 99.64071800595238
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get CaMeL Property ( $STRING$ ) , update _ weight ) ;",
        "score": 99.61805791440217
      },
      {
        "patch": "weight _ by _ edge . put ( edge , update _ weight ) ; } return weight _ by _ node ;",
        "score": 99.63004557291667
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 1 ) , update _ weight ) ; } } else",
        "score": 99.61691284179688
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( 1 ) , INF ) ;",
        "score": 99.62992778577302
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get CaMeL Key ( ) , update _ weight ) ; }",
        "score": 99.61661430027173
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 1 ) , INF ) ;",
        "score": 99.62919536389802
      },
      {
        "patch": "if ( weight _ by _ edge . get ( edge . get ( 1 ) ) == update _ weight )",
        "score": 99.61634893002717
      },
      {
        "patch": "weight _ by _ node . put ( edge , weight _ by _ node . get ( edge ) ) ;",
        "score": 99.62771739130434
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get CaMeL Type ( ) , update _ weight ) ;",
        "score": 99.61626642400569
      },
      {
        "patch": "weight _ by _ edge . put ( edge , weight _ by _ node . get ( edge ) ) ;",
        "score": 99.62765370244566
      },
      {
        "patch": "weight _ by _ edge . put ( edge , update _ weight , update _ weight ) ;",
        "score": 99.61533813476562
      },
      {
        "patch": "weight _ by _ edge . put ( edge , new Integer ( update _ weight ) ) ;",
        "score": 99.62742919921875
      },
      {
        "patch": "weight _ by _ edge . add ( edge , update _ weight ) ;",
        "score": 99.61338806152344
      },
      {
        "patch": "weight _ by _ edge . put ( edge , update _ weight ) ; } }",
        "score": 99.62530517578125
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get CaMeL Key ( ) , weight _ by _ edge ) ;",
        "score": 99.61302693684895
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( $NUMBER$ ) , update _ weight ) ;",
        "score": 99.62476748511905
      },
      {
        "patch": "if ( update _ weight ) { weight _ by _ edge . put ( edge , update _ weight ) ;",
        "score": 99.61288850203805
      },
      {
        "patch": "return weight _ by _ node . put ( edge . get ( 0 ) , update _ weight ) ;",
        "score": 99.62291370738636
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , weight _ by _ edge ) ; }",
        "score": 99.6120096842448
      },
      {
        "patch": "try { weight _ by _ edge . put ( edge . get ( 1 ) , update _ weight ) ;",
        "score": 99.61098845108695
      },
      {
        "patch": "weight _ by _ node . put ( edge , new Integer ( update _ weight ) ) ;",
        "score": 99.6114990234375
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( $NUMBER$ ) , edge ) ;",
        "score": 99.61058285361842
      },
      {
        "patch": "weight _ by _ node . put ( edge , update _ weight ) ; } }",
        "score": 99.60971408420139
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( $NUMBER$ ) ) ;",
        "score": 99.60470760569854
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( null ) , update _ weight ) ;",
        "score": 99.60343424479167
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 1 ) , weight _ by _ edge ) ; }",
        "score": 99.6030782063802
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( 0 ) , INF ) ; }",
        "score": 99.58279418945312
      },
      {
        "patch": "if ( weight _ by _ edge . get ( edge . get ( 0 ) ) == update _ weight )",
        "score": 99.60190217391305
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , INF ) ; }",
        "score": 99.58068237304687
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) ) ;",
        "score": 99.6002197265625
      },
      {
        "patch": "weight _ by _ node . put ( edge . get ( 0 ) , weight ) ;",
        "score": 99.56260279605263
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( - 1 ) , update _ weight ) ;",
        "score": 99.5972567471591
      },
      {
        "patch": "return weight _ by _ node . put ( edge , update _ weight ) ;",
        "score": 99.5579833984375
      },
      {
        "patch": "weight _ by _ edge . put ( edge , weight _ by _ edge ) ;",
        "score": 99.59651014539931
      },
      {
        "patch": "weight _ by _ node . put ( source , update _ weight ) ;",
        "score": 99.55430603027344
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 1 ) ) ;",
        "score": 99.59636374080883
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( edge . get ( 0 ) ) ) ;",
        "score": 99.58842329545455
      },
      {
        "patch": "weight _ by _ edge . remove ( edge . get ( 1 ) ) ;",
        "score": 99.54332059972427
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get CaMeL Value ( ) , update _ weight ) ; }",
        "score": 99.5878269361413
      },
      {
        "patch": "weight _ by _ edge . put ( source , update _ weight ) ;",
        "score": 99.53054809570312
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( edge , update _ weight ) ) ;",
        "score": 99.58260091145833
      },
      {
        "patch": "weight _ by _ edge . set ( edge , update _ weight ) ;",
        "score": 99.52460479736328
      },
      {
        "patch": "weight _ by _ edge . remove ( edge . get ( 0 ) ) ;",
        "score": 99.52236758961396
      },
      {
        "patch": "weight _ by _ edge . put ( weight _ by _ edge , update _ weight ) ; }",
        "score": 99.5666736421131
      },
      {
        "patch": "weight _ by _ node . add ( edge , update _ weight ) ;",
        "score": 99.51758575439453
      },
      {
        "patch": "weight _ by _ node . put ( node , update _ weight ) ;",
        "score": 99.50830078125
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( ) , edge ) ;",
        "score": 99.55514187282986
      },
      {
        "patch": "weight _ by _ edge . put ( node , update _ weight ) ;",
        "score": 99.50794982910156
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get CaMeL Key ( ) , edge ) ;",
        "score": 99.55256958007813
      },
      {
        "patch": "weight _ by _ edge . add ( update _ weight ) ;",
        "score": 99.5050048828125
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( 0 ) , update ) ;",
        "score": 99.54633532072368
      },
      {
        "patch": "weight _ by _ node . add ( update _ weight ) ;",
        "score": 99.46787806919643
      },
      {
        "patch": "weight _ by _ edge . add ( edge ) ;",
        "score": 99.53329467773438
      },
      {
        "patch": "weight _ by _ edge . put ( edge , null ) ;",
        "score": 99.42525809151786
      },
      {
        "patch": "for ( int i = 0 ; i < update _ weight ; i ++ ) {",
        "score": 99.53192138671875
      },
      {
        "patch": "weight _ by _ edge . put ( edge , edge ) ;",
        "score": 99.41207449776786
      },
      {
        "patch": "weight _ by _ edge . put ( edge . get ( ) ) ;",
        "score": 99.53033447265625
      },
      {
        "patch": "weight _ by _ node . put ( edge , null ) ;",
        "score": 99.40777587890625
      },
      {
        "patch": "weight _ by _ edge . add ( weight _ by _ edge ) ;",
        "score": 99.51824188232422
      },
      {
        "patch": "weight _ by _ node . put ( edge , 0 ) ;",
        "score": 99.40748814174107
      },
      {
        "patch": "edge . put ( edge . get ( 0 ) , update _ weight ) ;",
        "score": 99.51069192325367
      },
      {
        "patch": "weight _ by _ edge . put ( update _ weight ) ;",
        "score": 99.40728759765625
      },
      {
        "patch": "} weight _ by _ edge . put ( edge , update _ weight ) ;",
        "score": 99.51060575597427
      },
      {
        "patch": "weight _ by _ edge . put ( edge , 0 ) ;",
        "score": 99.40681675502232
      },
      {
        "patch": "weight _ by _ edge . put ( edge , update _ weight ) ; ;",
        "score": 99.49994255514706
      },
      {
        "patch": "weight _ by _ node . put ( edge ) ;",
        "score": 99.32906087239583
      },
      {
        "patch": "weight _ by _ edge . put ( name , update _ weight ) ;",
        "score": 99.49198913574219
      },
      {
        "patch": "weight _ by _ edge . put ( edge ) ;",
        "score": 99.32562255859375
      },
      {
        "patch": "weight _ by _ node . add ( edge ) ;",
        "score": 99.3187255859375
      },
      {
        "patch": "put ( edge . get ( 0 ) , update _ weight ) ;",
        "score": 99.46640625
      },
      {
        "patch": "add ( edge , update _ weight ) ;",
        "score": 99.16454467773437
      },
      {
        "patch": "weight _ by _ edge . put ( edge , update ) ;",
        "score": 99.4256591796875
      },
      {
        "patch": "return weight _ by _ node ;",
        "score": 99.14447784423828
      },
      {
        "patch": "return weight _ by _ edge ;",
        "score": 99.12294006347656
      },
      {
        "patch": "edge . set ( edge , update _ weight ) ;",
        "score": 99.36012776692708
      },
      {
        "patch": "return weight _ by _ node ; }",
        "score": 99.10078938802083
      },
      {
        "patch": "edge . put ( edge , update _ weight ) ;",
        "score": 99.34157307942708
      },
      {
        "patch": "return weight _ by _ edge ; }",
        "score": 99.08873155381944
      },
      {
        "patch": "put ( edge , update _ weight ) ;",
        "score": 99.33682861328126
      },
      {
        "patch": "if ( update _ weight )",
        "score": 99.051025390625
      },
      {
        "patch": "add ( update _ weight ) ;",
        "score": 99.0380859375
      },
      {
        "patch": "weight _ by _ edge . clear ( ) ;",
        "score": 99.2891845703125
      },
      {
        "patch": "if ( update _ weight ) {",
        "score": 99.02957916259766
      },
      {
        "patch": "edge . add ( update _ weight ) ;",
        "score": 99.20581665039063
      },
      {
        "patch": "result = update _ weight ) ;",
        "score": 98.96707916259766
      },
      {
        "patch": "edge . add ( edge ) ;",
        "score": 99.08460235595703
      },
      {
        "patch": "return update _ weight ) ;",
        "score": 98.93122209821429
      },
      {
        "patch": "if ( ! update _ weight )",
        "score": 98.97264862060547
      },
      {
        "patch": "return update _ weight ;",
        "score": 98.82059733072917
      },
      {
        "patch": "i ++ ;",
        "score": 97.84513854980469
      },
      {
        "patch": "if ( }",
        "score": 97.76922607421875
      },
      {
        "patch": "if ( edge",
        "score": 97.76734924316406
      },
      {
        "patch": "break ; }",
        "score": 97.77964782714844
      },
      {
        "patch": "j ++ ;",
        "score": 97.71122741699219
      }
    ]
  },
  "SHUNTING_YARD-33-34": {
    "src": "}",
    "patches": [
      {
        "patch": "} else { String operator = ( String ) token ;",
        "score": 100.13479614257812
      },
      {
        "patch": "; } if ( false }",
        "score": 99.56842912946429
      },
      {
        "patch": "} else { rpntokens . add ( ( Integer ) token ) ;",
        "score": 100.01068522135417
      },
      {
        "patch": "} } if ( false }",
        "score": 99.4962158203125
      },
      {
        "patch": "} else { rpntokens . add ( token ) ;",
        "score": 99.97671508789062
      },
      {
        "patch": "} }",
        "score": 99.45651245117188
      },
      {
        "patch": "} else { rpntokens . add ( token ) ; }",
        "score": 99.95947265625
      },
      {
        "patch": "; } } if } }",
        "score": 99.44205147879464
      },
      {
        "patch": "} else { rpntokens . add ( ( String ) token ) ;",
        "score": 99.87340494791667
      },
      {
        "patch": "; } } if ( }",
        "score": 99.43865966796875
      },
      {
        "patch": "} else { rpntokens . add ( ( Long ) token ) ;",
        "score": 99.84159342447917
      },
      {
        "patch": "} else = null ; }",
        "score": 99.41243198939732
      },
      {
        "patch": "} else { rpntokens . add ( Integer ) token ) ;",
        "score": 99.78379603794643
      },
      {
        "patch": "} } if } * /",
        "score": 99.40216064453125
      },
      {
        "patch": "} else { String operator = token ;",
        "score": 99.75556098090277
      },
      {
        "patch": "; } else if } }",
        "score": 99.37411934988839
      },
      {
        "patch": "} else { String operator = new String ( token ) ;",
        "score": 99.75328650841347
      },
      {
        "patch": "; } } } if }",
        "score": 99.37058803013393
      },
      {
        "patch": "} else { int operator = ( String ) token ;",
        "score": 99.74777221679688
      },
      {
        "patch": "; } / * * /",
        "score": 99.35569545200893
      },
      {
        "patch": "} * String operator = ( String ) token ;",
        "score": 99.73363148082386
      },
      {
        "patch": "} else if ( false }",
        "score": 99.35055977957589
      },
      {
        "patch": "} else { rpntokens . add ( Integer ) token ) ; }",
        "score": 99.72657877604166
      },
      {
        "patch": "} else if } * /",
        "score": 99.34912981305804
      },
      {
        "patch": "} else { rpntokens . add ( token ) ; } }",
        "score": 99.72154889787946
      },
      {
        "patch": "; } if ( * }",
        "score": 99.34765625
      },
      {
        "patch": "} else { rpntokens . add ( ( int ) token ) ;",
        "score": 99.71919759114583
      },
      {
        "patch": "} } if }",
        "score": 99.29005126953125
      },
      {
        "patch": "} else { rpntokens . add ( opstack ) ; }",
        "score": 99.71677943638393
      },
      {
        "patch": "; } }",
        "score": 99.2674560546875
      },
      {
        "patch": "} else { rpntokens . add ( opstack ) ;",
        "score": 99.71197040264423
      },
      {
        "patch": "; } } if }",
        "score": 99.25393676757812
      },
      {
        "patch": "} else { rpntokens . add ( ( Object ) token ) ;",
        "score": 99.70213216145834
      },
      {
        "patch": "; } else {",
        "score": 99.23348388671874
      },
      {
        "patch": "} else { String operator = ( String ) $STRING$ ;",
        "score": 99.68932088216145
      },
      {
        "patch": "; } else if }",
        "score": 99.22765096028645
      },
      {
        "patch": "} else { String [ ] operator = ( String ) token ;",
        "score": 99.689208984375
      },
      {
        "patch": "} else {",
        "score": 99.22062683105469
      },
      {
        "patch": "} else { rpntokens . add ( $STRING$ ) ; }",
        "score": 99.680419921875
      },
      {
        "patch": "} else if }",
        "score": 99.20801391601563
      },
      {
        "patch": "} else { String operator = opstack . pop ( ) ;",
        "score": 99.67567661830357
      },
      {
        "patch": "; } if }",
        "score": 99.2059814453125
      },
      {
        "patch": "} else { String operator = ( String ) token + $STRING$ ;",
        "score": 99.675048828125
      },
      {
        "patch": "} else",
        "score": 99.16075642903645
      },
      {
        "patch": "} else { rpntokens . add ( $STRING$ ) ;",
        "score": 99.67273966471355
      },
      {
        "patch": "; } if } ;",
        "score": 99.14764404296875
      },
      {
        "patch": "} else { String operator = ( String ) token ) ;",
        "score": 99.67233511117789
      },
      {
        "patch": "} if }",
        "score": 99.1240463256836
      },
      {
        "patch": "} else { rpntokens . add ( Integer ) token ;",
        "score": 99.67145244891827
      },
      {
        "patch": "; } else",
        "score": 99.04313659667969
      },
      {
        "patch": "} else { String operator = ( String ) token ; while ( token",
        "score": 99.66319173177084
      },
      {
        "patch": "} } } if }",
        "score": 99.0266825358073
      },
      {
        "patch": "} String operator = ( String ) token ;",
        "score": 99.66025390625
      },
      {
        "patch": "; } if } }",
        "score": 99.01509602864583
      },
      {
        "patch": "} else { String operator = ( Integer ) token ;",
        "score": 99.6602274576823
      },
      {
        "patch": "} } else {",
        "score": 99.00040893554687
      },
      {
        "patch": "} else { String name = ( String ) token ;",
        "score": 99.65555826822917
      },
      {
        "patch": "} else { }",
        "score": 98.99615478515625
      },
      {
        "patch": "} else { String operator = ( String ) ( Integer ) token ;",
        "score": 99.644921875
      },
      {
        "patch": "; } } }",
        "score": 98.99119262695312
      },
      {
        "patch": "} else { String operator = token ) ;",
        "score": 99.64191284179688
      },
      {
        "patch": "} } if ( }",
        "score": 98.9893290201823
      },
      {
        "patch": "} else { else { String operator = ( String ) token ;",
        "score": 99.62907191685268
      },
      {
        "patch": "; }",
        "score": 98.98733520507812
      },
      {
        "patch": "} else { String operator = ( int ) token ;",
        "score": 99.62615966796875
      },
      {
        "patch": "} } if } }",
        "score": 98.9795430501302
      },
      {
        "patch": "} else { String operator = ( String ) token + token ;",
        "score": 99.62159946986607
      },
      {
        "patch": "} } }",
        "score": 98.9600830078125
      },
      {
        "patch": "} else { operator = ( Integer ) token ;",
        "score": 99.61870783025569
      },
      {
        "patch": "; } else { }",
        "score": 98.9471435546875
      },
      {
        "patch": "} else { rpntokens . add ( operator ) ; }",
        "score": 99.61043607271634
      },
      {
        "patch": "; } if ( }",
        "score": 98.9203389485677
      },
      {
        "patch": "} else { String operator = ( Node ) token ;",
        "score": 99.60544840494792
      },
      {
        "patch": "} } else if }",
        "score": 98.91200764973958
      },
      {
        "patch": "} * else { String operator = ( String ) token ;",
        "score": 99.601318359375
      },
      {
        "patch": "} if } ;",
        "score": 98.90906982421875
      },
      {
        "patch": "} else { String operator = precedence . get ( operator ) ;",
        "score": 99.60062953404018
      },
      {
        "patch": "} } if } ;",
        "score": 98.87540690104167
      },
      {
        "patch": "} else { String operator = null ;",
        "score": 99.59969075520833
      },
      {
        "patch": "; } } } }",
        "score": 98.87427775065105
      },
      {
        "patch": "} else { operator = ( String ) token ;",
        "score": 99.59815562855114
      },
      {
        "patch": "} else if } ;",
        "score": 98.86962890625
      },
      {
        "patch": "} else { rpntokens . add ( operator ) ;",
        "score": 99.59164428710938
      },
      {
        "patch": "; } * /",
        "score": 98.86909790039063
      },
      {
        "patch": "} else { String operator = ( String ) token ; }",
        "score": 99.5891864483173
      },
      {
        "patch": "} if ( * }",
        "score": 98.8601582845052
      },
      {
        "patch": "} else { String operator = token . pop ( ) ;",
        "score": 99.58743051382211
      },
      {
        "patch": "} } } }",
        "score": 98.85938110351563
      },
      {
        "patch": "} else { int operator = ( Integer ) token ;",
        "score": 99.58362833658855
      },
      {
        "patch": "} if } }",
        "score": 98.852392578125
      },
      {
        "patch": "} else { String operator = ( String ) element ;",
        "score": 99.582275390625
      },
      {
        "patch": "} else if } }",
        "score": 98.83917236328125
      },
      {
        "patch": "} else { String operator = ( byte ) token ;",
        "score": 99.5798848470052
      },
      {
        "patch": "} if ( false }",
        "score": 98.81892903645833
      },
      {
        "patch": "} * / rpntokens . add ( token ) ;",
        "score": 99.57789103190105
      },
      {
        "patch": "; if } } }",
        "score": 98.79843139648438
      },
      {
        "patch": "} else { String operator = $STRING$ ;",
        "score": 99.57522243923611
      },
      {
        "patch": "; } / * /",
        "score": 98.78746541341145
      },
      {
        "patch": "} * / String operator = ( String ) token ;",
        "score": 99.57297770182292
      },
      {
        "patch": "} if } } }",
        "score": 98.7864481608073
      },
      {
        "patch": "} else { String token = ( String ) token ;",
        "score": 99.57002766927083
      },
      {
        "patch": "} else { if }",
        "score": 98.76125081380208
      },
      {
        "patch": "} else { String operator : ( String ) token ;",
        "score": 99.56756591796875
      },
      {
        "patch": "} if ( }",
        "score": 98.76094970703124
      },
      {
        "patch": "} else { rpntokens . add ( token ) ; break ;",
        "score": 99.56635393415179
      },
      {
        "patch": "; } else ; }",
        "score": 98.75643920898438
      },
      {
        "patch": "} else { opstack . add ( token ) ;",
        "score": 99.5653584798177
      },
      {
        "patch": "; } * * /",
        "score": 98.74449666341145
      },
      {
        "patch": "} * int operator = ( String ) token ;",
        "score": 99.56524103338069
      },
      {
        "patch": "} } } } }",
        "score": 98.73655192057292
      },
      {
        "patch": "} else { char operator = ( String ) token ;",
        "score": 99.56344604492188
      },
      {
        "patch": "} / * * /",
        "score": 98.72737630208333
      },
      {
        "patch": "} else { String operator = ( Number ) token ;",
        "score": 99.5618387858073
      },
      {
        "patch": "} if } if }",
        "score": 98.72427368164062
      },
      {
        "patch": "} } * /",
        "score": 98.72220458984376
      },
      {
        "patch": "} else String operator = ( String ) token ;",
        "score": 99.55897105823864
      },
      {
        "patch": "; } } * /",
        "score": 98.7169698079427
      },
      {
        "patch": "} else { String operator = token . get ( ) ;",
        "score": 99.54250863882211
      },
      {
        "patch": "; * * * /",
        "score": 98.70333862304688
      },
      {
        "patch": "} else while ( ! precedence . get ( operator ) ) {",
        "score": 99.53200857979911
      },
      {
        "patch": "; } } else {",
        "score": 98.69866943359375
      },
      {
        "patch": "} else rpntokens . add ( token ) ;",
        "score": 99.5045498934659
      },
      {
        "patch": "} else { } }",
        "score": 98.69508870442708
      },
      {
        "patch": "} else { String operator = ( String ) token ; rp@@",
        "score": 99.50120192307692
      },
      {
        "patch": "; if } }",
        "score": 98.69456787109375
      },
      {
        "patch": "} else { String operator = ( String ) token ; try {",
        "score": 99.48219517299107
      },
      {
        "patch": "; } catch }",
        "score": 98.68884887695313
      },
      {
        "patch": "} else { String operator = ( String ) token ; while (",
        "score": 99.46983119419643
      },
      {
        "patch": "} if } * /",
        "score": 98.6870829264323
      },
      {
        "patch": "} else { String operator = ( String ) token ; String",
        "score": 99.41245680588942
      },
      {
        "patch": "} if } ; }",
        "score": 98.67838541666667
      },
      {
        "patch": "} else { String operator ;",
        "score": 99.40807233537946
      },
      {
        "patch": "} if ( } }",
        "score": 98.66668701171875
      },
      {
        "patch": "} else { String operator = token .",
        "score": 99.40169270833333
      },
      {
        "patch": "; * * /",
        "score": 98.66143798828125
      },
      {
        "patch": "} else { add ( token ) ;",
        "score": 99.39546712239583
      },
      {
        "patch": "} * * /",
        "score": 98.65311889648437
      },
      {
        "patch": "} * String operator = token ;",
        "score": 99.39205932617188
      },
      {
        "patch": "; if }",
        "score": 98.6400375366211
      },
      {
        "patch": "} else { String operator = token . get CaMeL",
        "score": 99.37163751775569
      },
      {
        "patch": "; * /",
        "score": 98.63298034667969
      },
      {
        "patch": "} else if ( token != null ) {",
        "score": 99.35648803710937
      },
      {
        "patch": "; } else ;",
        "score": 98.63092651367188
      },
      {
        "patch": "} else { String operator = token ; while ( token",
        "score": 99.3360087076823
      },
      {
        "patch": "; } else }",
        "score": 98.60658569335938
      },
      {
        "patch": "} else { String operator = ( String )",
        "score": 99.29678344726562
      },
      {
        "patch": "} } else ;",
        "score": 98.59761962890624
      },
      {
        "patch": "} else if ( ( Integer ) token )",
        "score": 99.2740966796875
      },
      {
        "patch": "} else = }",
        "score": 98.58656005859375
      },
      {
        "patch": "} else { pop ( ) ;",
        "score": 99.27381896972656
      },
      {
        "patch": "} else ; }",
        "score": 98.58435668945313
      },
      {
        "patch": "} else { String [ ] operator = ( String",
        "score": 99.21306818181819
      },
      {
        "patch": "} else * /",
        "score": 98.56236572265625
      },
      {
        "patch": "} else { String operator =",
        "score": 99.20356968470982
      },
      {
        "patch": "} / * /",
        "score": 98.54957885742188
      },
      {
        "patch": "} else { continue ; }",
        "score": 99.12248883928571
      },
      {
        "patch": "} * /",
        "score": 98.5239028930664
      },
      {
        "patch": "} else { String operator = new String",
        "score": 99.107421875
      },
      {
        "patch": "} } else",
        "score": 98.51808166503906
      },
      {
        "patch": "} else { String operator = get CaMeL",
        "score": 99.08022732204861
      },
      {
        "patch": "} else }",
        "score": 98.34227752685547
      },
      {
        "patch": "} else { String operator = token",
        "score": 98.94733428955078
      },
      {
        "patch": "} else ;",
        "score": 98.32669067382812
      },
      {
        "patch": "} * ) ;",
        "score": 98.75242309570312
      },
      {
        "patch": "break } }",
        "score": 98.3094711303711
      },
      {
        "patch": "}",
        "score": 98.67031860351562
      },
      {
        "patch": "return } }",
        "score": 98.23170471191406
      },
      {
        "patch": "} return rpntokens ;",
        "score": 98.56939697265625
      },
      {
        "patch": "} ) ;",
        "score": 98.53287506103516
      },
      {
        "patch": "; else {",
        "score": 98.20875549316406
      },
      {
        "patch": "} / ) ;",
        "score": 98.43314819335937
      },
      {
        "patch": "= } }",
        "score": 98.16504669189453
      },
      {
        "patch": "} catch }",
        "score": 98.13125610351562
      },
      {
        "patch": "} else { rp@@",
        "score": 98.34942626953125
      },
      {
        "patch": "; else",
        "score": 97.99930826822917
      },
      {
        "patch": "* /",
        "score": 97.93949381510417
      },
      {
        "patch": "} * else {",
        "score": 98.25913696289062
      },
      {
        "patch": "= }",
        "score": 97.8587646484375
      },
      {
        "patch": "} break ;",
        "score": 98.00117492675781
      },
      {
        "patch": "* }",
        "score": 97.53841145833333
      },
      {
        "patch": "} / *",
        "score": 97.93689727783203
      },
      {
        "patch": "return ;",
        "score": 97.52254231770833
      },
      {
        "patch": "break ; }",
        "score": 97.93592834472656
      },
      {
        "patch": "return }",
        "score": 97.386474609375
      },
      {
        "patch": "} finally {",
        "score": 97.90670776367188
      },
      {
        "patch": "break }",
        "score": 97.2212422688802
      },
      {
        "patch": "if }",
        "score": 97.06028238932292
      },
      {
        "patch": "} * }",
        "score": 97.76897430419922
      },
      {
        "patch": ";",
        "score": 96.69557189941406
      },
      {
        "patch": "{",
        "score": 96.22213745117188
      },
      {
        "patch": "break ;",
        "score": 97.46561686197917
      },
      {
        "patch": ":",
        "score": 95.77374267578125
      },
      {
        "patch": "} *",
        "score": 97.27494303385417
      },
      {
        "patch": "else",
        "score": 95.74835205078125
      }
    ]
  },
  "SIEVE-41-42": {
    "src": "if ( any ( list _ comp ( n , primes ) ) ) {",
    "patches": [
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( n ) ;",
        "score": 100.00808848505434
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) {",
        "score": 99.72747802734375
      },
      {
        "patch": "if ( ! any ( list _ comp ( n , primes ) ) ) {",
        "score": 99.6160026999081
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( primes ) ;",
        "score": 99.7940090013587
      },
      {
        "patch": "if ( any ( list _ comp , n , primes ) ) {",
        "score": 99.55843098958333
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes . remove ( n ) ;",
        "score": 99.7813136888587
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) )",
        "score": 99.5290283203125
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( value ) ;",
        "score": 99.77284307065217
      },
      {
        "patch": "if ( any ( list _ comp ( n , n , primes ) ) ) {",
        "score": 99.52764214409723
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes . set ( n ) ;",
        "score": 99.76561438519022
      },
      {
        "patch": "if ( list _ comp ( n , primes ) ) {",
        "score": 99.52605731670673
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes . put ( n ) ;",
        "score": 99.7647121263587
      },
      {
        "patch": "if ( any ( list _ comp ( n ) ) ) {",
        "score": 99.51580810546875
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( 1 ) ;",
        "score": 99.7592242697011
      },
      {
        "patch": "if ( any ( any ( list _ comp ( n , primes ) ) ) ) {",
        "score": 99.50884046052632
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) && any ( primes ) ) {",
        "score": 99.75449916294643
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) , primes ) ) {",
        "score": 99.49920654296875
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( true ) ;",
        "score": 99.75266431725544
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes , primes ) ) ) {",
        "score": 99.49307590060764
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( $NUMBER$ ) ;",
        "score": 99.74922511888587
      },
      {
        "patch": "if ( any ( list _ comp , primes ) ) {",
        "score": 99.48301344651442
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( $STRING$ ) ;",
        "score": 99.74661387567934
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) continue ;",
        "score": 99.471923828125
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( 0 ) ;",
        "score": 99.7462848165761
      },
      {
        "patch": "if ( any ( list _ comp ( n , n ) ) ) {",
        "score": 99.47099304199219
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( max ) ;",
        "score": 99.74521272078805
      },
      {
        "patch": "if ( any ( list ( n , primes ) ) ) {",
        "score": 99.47020612444196
      },
      {
        "patch": "if ( any ( list _ comp ( n , false ) ) ) { primes . add ( n ) ;",
        "score": 99.74190090013587
      },
      {
        "patch": "if ( any ( list _ comp ( n , any ( primes ) ) ) ) {",
        "score": 99.46774773848684
      },
      {
        "patch": "if ( any ( list _ comp ( n , 0 ) ) ) { primes . add ( n ) ;",
        "score": 99.73527725883152
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) return true ; }",
        "score": 99.4628842002467
      },
      {
        "patch": "if ( any ( list _ comp ( n , 1 ) ) ) { primes . add ( n ) ;",
        "score": 99.72130816915761
      },
      {
        "patch": "if ( any ( primes ( list _ comp ( n , primes ) ) ) ) {",
        "score": 99.45925421463816
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( list ) ;",
        "score": 99.7182086447011
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { {",
        "score": 99.45836684283088
      },
      {
        "patch": "if ( any ( list _ comp ( n + primes ) ) ) { primes . add ( n ) ;",
        "score": 99.71628736413044
      },
      {
        "patch": "if ( ! any ( list _ comp , n , primes ) ) {",
        "score": 99.45783233642578
      },
      {
        "patch": "if ( any ( list _ comp ( n , true ) ) ) { primes . add ( n ) ;",
        "score": 99.7150242017663
      },
      {
        "patch": "if ( any ( list ( list _ comp ( n , primes ) ) ) ) {",
        "score": 99.45689633018092
      },
      {
        "patch": "if ( any ( list _ comp ( n , null ) ) ) { primes . add ( n ) ;",
        "score": 99.71292246942934
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) return true ;",
        "score": 99.45521375868056
      },
      {
        "patch": "if ( any ( list _ comp ( n , list _ comp ( n , primes ) ) ) ) {",
        "score": 99.71290123980978
      },
      {
        "patch": "if ( any ( list _ comp ( 0 , primes ) ) ) {",
        "score": 99.45283508300781
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) || any ( primes ) ) {",
        "score": 99.70042782738095
      },
      {
        "patch": "if ( any ( list _ comp ( $NUMBER$ , primes ) ) ) {",
        "score": 99.4498519897461
      },
      {
        "patch": "if ( any ( list _ comp ( size , primes ) ) ) {",
        "score": 99.4492416381836
      },
      {
        "patch": "if ( primes . equals ( list _ comp ( n , primes ) ) ) {",
        "score": 99.44273546006944
      },
      {
        "patch": "if ( any ( list ( n , primes ) ) ) { primes . add ( n ) ;",
        "score": 99.67350260416667
      },
      {
        "patch": "if ( any ( list _ comp ( 1 , primes ) ) ) {",
        "score": 99.44247436523438
      },
      {
        "patch": "if ( list _ comp ( n , primes ) ) { primes . add ( n ) ;",
        "score": 99.67076416015625
      },
      {
        "patch": "if ( any ( list _ comp ) && any ( list _ comp ) ) {",
        "score": 99.43909369574652
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) && any ( list ) ) {",
        "score": 99.67024739583333
      },
      {
        "patch": "if ( any ( list _ comp ( n ) , primes ) ) {",
        "score": 99.43818664550781
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) primes . add ( n ) ;",
        "score": 99.65484064275569
      },
      {
        "patch": "if ( ! any ( list _ comp ( n , primes ) , primes ) ) {",
        "score": 99.43787906044408
      },
      {
        "patch": "if ( any ( list _ comp ( primes ) ) ) { primes . add ( n ) ;",
        "score": 99.64751906622024
      },
      {
        "patch": "if ( any ( list _ comp ( list _ comp ( n ) ) ) ) {",
        "score": 99.4348080283717
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) break ;",
        "score": 99.43047018612133
      },
      {
        "patch": "} if ( any ( list _ comp ( n , primes ) ) ) {",
        "score": 99.42776309742646
      },
      {
        "patch": "if ( list _ comp ( n , primes ) ) { primes . add ( n ) ; }",
        "score": 99.60944475446429
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) continue ; else",
        "score": 99.42731391059027
      },
      {
        "patch": "if ( any ( list _ comp ( n , $NUMBER$ ) ) ) {",
        "score": 99.42604064941406
      },
      {
        "patch": "if ( any ( list _ comp ( list _ comp ( n , primes ) ) ) ) {",
        "score": 99.59402901785714
      },
      {
        "patch": "if ( ! any ( list _ comp ( n , primes ) ) )",
        "score": 99.42529296875
      },
      {
        "patch": "if ( any ( list _ comp ( n ) ) ) { primes . add ( n ) ;",
        "score": 99.59205264136905
      },
      {
        "patch": "any ( list _ comp ( n , primes ) ) ;",
        "score": 99.42487041766827
      },
      {
        "patch": "if ( any ( list _ comp ( primes ) ) ) { primes . add ( n ) ; }",
        "score": 99.59044300426136
      },
      {
        "patch": "if ( any ( list _ comp ( n + 1 ) ) ) {",
        "score": 99.42172241210938
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { return false ; }",
        "score": 99.58773803710938
      },
      {
        "patch": "if ( any ( list _ comp , n ) ) {",
        "score": 99.420166015625
      },
      {
        "patch": "if ( ( list _ comp ( n , primes ) ) ) { primes . add ( n ) ;",
        "score": 99.58287464488636
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) return false ;",
        "score": 99.41980658637152
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { return true ; }",
        "score": 99.57689208984375
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) return false ; }",
        "score": 99.41745476973684
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) break ; else",
        "score": 99.41743977864583
      },
      {
        "patch": "if ( any ( list _ comp ( n , 1 , primes ) ) ) {",
        "score": 99.56341552734375
      },
      {
        "patch": "if ( any ( list _ comp ( primes ) ) ) {",
        "score": 99.41680036272321
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes . add (",
        "score": 99.56173706054688
      },
      {
        "patch": "if ( any ( list _ comp ( list _ comp ( primes ) ) ) ) {",
        "score": 99.41496839021382
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { return primes ; }",
        "score": 99.55698852539062
      },
      {
        "patch": "if ( ! any ( list _ comp ( n , primes ) ) ) return true ;",
        "score": 99.41330437911184
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { break ; }",
        "score": 99.54917506167763
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) break ; }",
        "score": 99.41090901692708
      },
      {
        "patch": "if ( any ( n , primes ) ) {",
        "score": 99.40680486505681
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { continue ; }",
        "score": 99.54185084292763
      },
      {
        "patch": "if ( any ( list _ comp ) || any ( list _ comp ) ) {",
        "score": 99.40254720052083
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) continue {",
        "score": 99.40232220818015
      },
      {
        "patch": "if ( ( any ( list _ comp ( n , primes ) ) ) ) {",
        "score": 99.5340576171875
      },
      {
        "patch": "if ( any ( list _ comp ( n / primes ) ) ) {",
        "score": 99.40127563476562
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { return primes ;",
        "score": 99.53230365953948
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) throw null ;",
        "score": 99.39942084418402
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { return false ;",
        "score": 99.53205309416118
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) continue )",
        "score": 99.39893296185662
      },
      {
        "patch": "Array CaMeL List < Integer > primes = new Array CaMeL List < Integer > ( ) ;",
        "score": 99.528076171875
      },
      {
        "patch": "any ( list _ comp ( n , primes ) ) ; }",
        "score": 99.39824567522321
      },
      {
        "patch": "int n = any ( list _ comp ( n , primes ) ) ;",
        "score": 99.52753448486328
      },
      {
        "patch": "if ( ! any ( list _ comp ( n , n ) ) ) {",
        "score": 99.39715217141544
      },
      {
        "patch": "if ( any ( n , primes ) ) { primes . add ( n ) ;",
        "score": 99.52155219184027
      },
      {
        "patch": "if ( ! any ( list _ comp ( n ) ) ) {",
        "score": 99.3966796875
      },
      {
        "patch": "if ( any ( list _ comp ( n , 0 , primes ) ) ) {",
        "score": 99.52016194661458
      },
      {
        "patch": "if ( any ( list _ comp ( n + 0 ) ) ) {",
        "score": 99.39575958251953
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { return true ;",
        "score": 99.51920358758224
      },
      {
        "patch": "if ( ! any ( list _ comp ) ) {",
        "score": 99.39468383789062
      },
      {
        "patch": "try { if ( any ( list _ comp ( n , primes ) ) ) {",
        "score": 99.51531982421875
      },
      {
        "patch": "if ( any ( list _ comp ( n , 0 ) ) ) {",
        "score": 99.39112091064453
      },
      {
        "patch": "if ( any ( list _ comp ( n , max , primes ) ) ) {",
        "score": 99.51219346788194
      },
      {
        "patch": "if ( list _ comp != null && ! any ( list _ comp ) ) {",
        "score": 99.38620334201389
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes , primes ) ) )",
        "score": 99.5110222311581
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) return true ; else",
        "score": 99.38461785567434
      },
      {
        "patch": "if ( any ( list _ comp ( n , false ) ) ) {",
        "score": 99.5077896118164
      },
      {
        "patch": "assert any ( list _ comp ( n , primes ) ) ;",
        "score": 99.38140869140625
      },
      {
        "patch": "if ( any ( first ( list _ comp ( n , primes ) ) ) ) {",
        "score": 99.50222296463816
      },
      {
        "patch": "if ( any ( list _ comp ( n * primes ) ) ) {",
        "score": 99.38085174560547
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) , 0 ) ) {",
        "score": 99.49862331814236
      },
      {
        "patch": "if ( any ( list _ comp ( n , 1 ) ) ) {",
        "score": 99.38035583496094
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes , 0 ) ) ) {",
        "score": 99.49831136067708
      },
      {
        "patch": "if ( any ( list _ comp ( n - primes ) ) ) {",
        "score": 99.38021850585938
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { break ;",
        "score": 99.49759250217014
      },
      {
        "patch": "if ( ! any ( list _ comp , primes ) ) {",
        "score": 99.37815638950893
      },
      {
        "patch": "if ( any ( primes ) ) { primes . add ( n ) ;",
        "score": 99.49474334716797
      },
      {
        "patch": "if ( any ( list _ comp , n , list _ comp ) ) {",
        "score": 99.37685977711396
      },
      {
        "patch": "if ( this . any ( list _ comp ( n , primes ) ) ) {",
        "score": 99.49318440755208
      },
      {
        "patch": "if ( ! any ( list _ comp ( n , primes ) ) ) { {",
        "score": 99.37661404079861
      },
      {
        "patch": "while ( any ( list _ comp ( n , primes ) ) ) {",
        "score": 99.49249267578125
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) && true ) {",
        "score": 99.37172444661458
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { }",
        "score": 99.37069881663604
      },
      {
        "patch": "if ( list _ comp ( list _ comp ( n , primes ) ) ) {",
        "score": 99.48592122395833
      },
      {
        "patch": "if ( any ( list _ comp ( primes , primes ) ) ) {",
        "score": 99.36488342285156
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes ) {",
        "score": 99.48287160773026
      },
      {
        "patch": "if ( list _ comp . any ( n , primes ) ) {",
        "score": 99.36222330729167
      },
      {
        "patch": "if ( any ( list _ comp ( primes , n , primes ) ) ) {",
        "score": 99.48206244574652
      },
      {
        "patch": "if ( list _ comp ( n , primes , primes ) ) {",
        "score": 99.3608154296875
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes , n ) ) ) {",
        "score": 99.48109944661458
      },
      {
        "patch": "if ( any ( list _ comp ( n + $NUMBER$ ) ) ) {",
        "score": 99.35897827148438
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { primes ;",
        "score": 99.47910563151042
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) break {",
        "score": 99.3525031594669
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) ) { return ; }",
        "score": 99.4779116981908
      },
      {
        "patch": "if ( list _ comp != null && any ( list _ comp ) ) {",
        "score": 99.3489990234375
      },
      {
        "patch": "if ( list _ comp ( n , n , primes ) ) {",
        "score": 99.34611002604167
      },
      {
        "patch": "if ( any ( list _ comp ( n + primes ) ) ) {",
        "score": 99.47374725341797
      },
      {
        "patch": "if ( any ( list _ comp , primes , primes ) ) {",
        "score": 99.34520670572917
      },
      {
        "patch": "if ( any ( list _ comp ( n / n ) ) ) {",
        "score": 99.34139251708984
      },
      {
        "patch": "if ( any ( list _ comp ( n , true ) ) ) {",
        "score": 99.46879577636719
      },
      {
        "patch": "if ( any ( list _ comp , list _ comp ) ) {",
        "score": 99.33843587239583
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ] ) ) ) {",
        "score": 99.46454216452206
      },
      {
        "patch": "if ( ! list _ comp ( n , primes ) ) {",
        "score": 99.326904296875
      },
      {
        "patch": "if ( any ( list _ comp ( n , null ) ) ) {",
        "score": 99.46415710449219
      },
      {
        "patch": "any ( list _ comp ( n , primes ) ) ; break ;",
        "score": 99.32556966145833
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) , primes ) )",
        "score": 99.45731847426471
      },
      {
        "patch": "if ( any ( any ( list _ comp ) ) ) {",
        "score": 99.32080078125
      },
      {
        "patch": "if ( list ( list _ comp ( n , primes ) ) ) {",
        "score": 99.4567642211914
      },
      {
        "patch": "if ( ! any ( list _ comp , n ) ) {",
        "score": 99.31433977399554
      },
      {
        "patch": "if ( any ( list _ comp ( n ) ) )",
        "score": 99.31092247596153
      },
      {
        "patch": "if ( ( list _ comp ( n , primes ) ) ) {",
        "score": 99.45450846354167
      },
      {
        "patch": "if ( any ( list _ comp ) ) {",
        "score": 99.30912642045455
      },
      {
        "patch": "if ( any ( list , n , primes ) ) {",
        "score": 99.29701585036058
      },
      {
        "patch": "if ( any ( list _ comp ( - n , primes ) ) ) {",
        "score": 99.45337632123162
      },
      {
        "patch": "if ( any ( list _ comp ( n , primes ) ) {",
        "score": 99.293310546875
      },
      {
        "patch": "if ( any ( list _ comp , n , primes ) )",
        "score": 99.28379603794643
      },
      {
        "patch": "if ( all ( list _ comp ( n , primes ) ) ) {",
        "score": 99.44358825683594
      },
      {
        "patch": "if ( any ( list _ comp ( ) ) ) {",
        "score": 99.2821514423077
      },
      {
        "patch": "result = any ( list _ comp ( n , primes ) ) ;",
        "score": 99.42904459635416
      },
      {
        "patch": "if ( any ( list [ n ] ) ) {",
        "score": 99.27576700846355
      },
      {
        "patch": "if ( any ( list _ comp [ n , primes ) ) {",
        "score": 99.42420247395833
      },
      {
        "patch": "if ( any ( list _ comp ( 1 ) ) ) {",
        "score": 99.27138846261161
      },
      {
        "patch": "if ( any ( list _ comp . n , primes ) ) {",
        "score": 99.39076334635416
      },
      {
        "patch": "if ( any ( list _ comp , 0 ) ) {",
        "score": 99.26905235877403
      },
      {
        "patch": "if ( list _ comp ( n , primes ) )",
        "score": 99.23477172851562
      },
      {
        "patch": "if ( ! value ) { primes . add ( n ) ;",
        "score": 99.36872209821429
      },
      {
        "patch": "if ( any ( list ( primes ) ) ) {",
        "score": 99.23302205403645
      },
      {
        "patch": "int n = list _ comp ( n , primes ) ;",
        "score": 99.36599496694711
      },
      {
        "patch": "if ( ! any ( n , primes ) ) {",
        "score": 99.22694905598958
      },
      {
        "patch": "if ( any ( list _ comp , primes ) )",
        "score": 99.2194112141927
      },
      {
        "patch": "if ( ! any ( primes ) ) {",
        "score": 99.18468017578125
      },
      {
        "patch": "if ( any ( primes , primes ) ) {",
        "score": 99.17381702769886
      },
      {
        "patch": "if ( any ( max , primes ) ) {",
        "score": 99.2008944424716
      },
      {
        "patch": "if ( any ( primes ) ) {",
        "score": 99.10599093967014
      }
    ]
  },
  "SQRT-16-17": {
    "src": "while ( Math . abs ( x - approx ) > epsilon ) {",
    "patches": [
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) {",
        "score": 99.8589111328125
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon && Math . abs ( x - approx ) > epsilon )",
        "score": 99.7902734375
      },
      {
        "patch": "while ( Math . abs ( x - approx - approx ) > epsilon ) {",
        "score": 99.72898954503677
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x / approx ;",
        "score": 99.7812732514881
      },
      {
        "patch": "while ( Math . abs ( x - approx ) == epsilon ) {",
        "score": 99.6659423828125
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x / approx + approx ;",
        "score": 99.7396824048913
      },
      {
        "patch": "while ( Math . abs ( x - approx ) != epsilon ) {",
        "score": 99.64952799479167
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x - approx + x / approx ;",
        "score": 99.73962890625
      },
      {
        "patch": "while ( Math . abs ( x - approx ) <= epsilon ) {",
        "score": 99.635888671875
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x / approx + x / approx ;",
        "score": 99.738330078125
      },
      {
        "patch": "if ( Math . abs ( x - approx ) > epsilon ) {",
        "score": 99.63277994791666
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x - approx + approx ;",
        "score": 99.73723038383152
      },
      {
        "patch": "while ( Math . abs ( x - approx - epsilon ) > epsilon ) {",
        "score": 99.6191047219669
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon || Math . abs ( x - approx ) > epsilon )",
        "score": 99.7348046875
      },
      {
        "patch": "while ( Math . min ( x , approx ) > epsilon ) {",
        "score": 99.59347330729166
      },
      {
        "patch": "while ( Math . abs ( ( Math . abs ( x - approx ) ) > epsilon ) ) {",
        "score": 99.730224609375
      },
      {
        "patch": "while ( Math . abs ( x - approx ) < epsilon ) {",
        "score": 99.57939453125
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x - approx ;",
        "score": 99.7284923735119
      },
      {
        "patch": "while ( Math . abs ( x - approx - x ) > epsilon ) {",
        "score": 99.57403923483456
      },
      {
        "patch": "while ( ( Math . abs ( x - approx ) ) > epsilon ) { approx = x / approx ;",
        "score": 99.70923913043478
      },
      {
        "patch": "while ( Math . abs ( x ) > epsilon ) {",
        "score": 99.56540151742789
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = ( approx + x / approx ) ;",
        "score": 99.708173828125
      },
      {
        "patch": "while ( Math . abs ( x - approx - approx ) == epsilon ) {",
        "score": 99.56125057444854
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x / approx ; } return approx ;",
        "score": 99.7071875
      },
      {
        "patch": "while ( Math . abs ( x - approx ) >= epsilon ) {",
        "score": 99.56046549479167
      },
      {
        "patch": "while ( Math . abs ( Math . abs ( x - approx ) - approx ) > epsilon ) {",
        "score": 99.7069091796875
      },
      {
        "patch": "while ( Math . abs ( approx - approx ) > epsilon ) {",
        "score": 99.551904296875
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon && Math . abs ( x - approx ) >= epsilon )",
        "score": 99.705205078125
      },
      {
        "patch": "while ( x - approx > epsilon ) {",
        "score": 99.5489013671875
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon )",
        "score": 99.70023890904018
      },
      {
        "patch": "} while ( Math . abs ( x - approx ) > epsilon ) {",
        "score": 99.54881286621094
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x / ( approx + $NUMBER$ ) ;",
        "score": 99.699267578125
      },
      {
        "patch": "while ( Math . min ( x - approx ) > epsilon ) {",
        "score": 99.54737141927083
      },
      {
        "patch": "while ( Math . abs ( Math . abs ( x - approx ) ) > epsilon ) {",
        "score": 99.69757690429688
      },
      {
        "patch": "while ( Math . max ( x , approx ) > epsilon ) {",
        "score": 99.540576171875
      },
      {
        "patch": "while ( Math . abs ( x - approx ) >= epsilon && Math . abs ( x - approx ) > epsilon )",
        "score": 99.695087890625
      },
      {
        "patch": "while ( Math . abs ( x - approx - approx ) <= epsilon ) {",
        "score": 99.53917020909927
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { {",
        "score": 99.5334243774414
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x / $NUMBER$ . $NUMBER$ ;",
        "score": 99.6904827615489
      },
      {
        "patch": "while ( Math . abs ( x - x ) > epsilon ) {",
        "score": 99.52333984375
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon && Math . abs ( x - approx ) <= epsilon )",
        "score": 99.688154296875
      },
      {
        "patch": "while ( Math . max ( x - approx ) > epsilon ) {",
        "score": 99.52294108072917
      },
      {
        "patch": "while ( ( Math . abs ( x - approx ) ) > epsilon ) {",
        "score": 99.68657370174633
      },
      {
        "patch": "while ( Math . round ( x - approx ) > epsilon ) {",
        "score": 99.51835123697917
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x - approx + $NUMBER$ ;",
        "score": 99.68276579483695
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { }",
        "score": 99.5180892944336
      },
      {
        "patch": "while ( false ) { while ( Math . abs ( x - approx ) > epsilon ) {",
        "score": 99.68204345703126
      },
      {
        "patch": "while ( x - approx == epsilon ) {",
        "score": 99.51160278320313
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x - approx + $NUMBER$ . $NUMBER$ ;",
        "score": 99.678671875
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > approx ) {",
        "score": 99.50301106770833
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x / approx + $NUMBER$ . $NUMBER$ ;",
        "score": 99.67748046875
      },
      {
        "patch": "while ( Math . abs ( x - epsilon ) > epsilon ) {",
        "score": 99.50160319010416
      },
      {
        "patch": "while ( ( Math . abs ( x - approx ) ) > epsilon ) { approx = x - approx ;",
        "score": 99.67313816236413
      },
      {
        "patch": "while ( Math . abs ( x + approx ) > epsilon ) {",
        "score": 99.49923502604166
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon && Math . abs ( x - approx ) > $NUMBER$ )",
        "score": 99.67060546875
      },
      {
        "patch": "while ( ! Math . abs ( x - approx ) > epsilon ) {",
        "score": 99.49861145019531
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon && Math . abs ( x - approx ) < epsilon )",
        "score": 99.6705078125
      },
      {
        "patch": "while ( x Math . abs ( x - approx ) > epsilon ) {",
        "score": 99.49691772460938
      },
      {
        "patch": "while ( Math . abs ( x - approx ) >= epsilon ) { approx = x / approx ;",
        "score": 99.66963123139881
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > $NUMBER$ ) {",
        "score": 99.49125162760417
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon && Math . abs ( x - approx ) > approx )",
        "score": 99.6689453125
      },
      {
        "patch": "if ( Math . abs ( x - approx ) == epsilon ) {",
        "score": 99.48609212239583
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x / approx ) ;",
        "score": 99.66532759232955
      },
      {
        "patch": "while ( Math . abs ( x - approx ) & epsilon ) {",
        "score": 99.485791015625
      },
      {
        "patch": "while ( true ) { while ( Math . abs ( x - approx ) > epsilon ) {",
        "score": 99.6634521484375
      },
      {
        "patch": "while ( x - approx != epsilon ) {",
        "score": 99.48182373046875
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon || Math . abs ( x - approx ) >= epsilon )",
        "score": 99.66251953125
      },
      {
        "patch": "final while ( Math . abs ( x - approx ) > epsilon ) {",
        "score": 99.47545623779297
      },
      {
        "patch": "if ( Math . abs ( x - approx ) != epsilon ) {",
        "score": 99.4680419921875
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = 0 . max ( approx ) ;",
        "score": 99.6581522623698
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) ;",
        "score": 99.45699055989583
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) break ;",
        "score": 99.45182800292969
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x / $NUMBER$ ;",
        "score": 99.65113467261905
      },
      {
        "patch": "if ( Math . abs ( x - approx ) <= epsilon ) {",
        "score": 99.443896484375
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { double approx = x / approx ;",
        "score": 99.64955832741477
      },
      {
        "patch": "while ( ( x - approx - approx ) > epsilon ) {",
        "score": 99.44231305803571
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x + approx ;",
        "score": 99.6476818266369
      },
      {
        "patch": "while ( ( x - approx ) > epsilon ) {",
        "score": 99.44225056966145
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x / 0 . $NUMBER$ ;",
        "score": 99.639892578125
      },
      {
        "patch": "while ( x - approx <= epsilon ) {",
        "score": 99.42691650390626
      },
      {
        "patch": "while ( Math . abs ( x * approx ) > epsilon ) {",
        "score": 99.4259033203125
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x / approx ; }",
        "score": 99.6103848544034
      },
      {
        "patch": "while ( Math . min ( x + approx ) > epsilon ) {",
        "score": 99.4255126953125
      },
      {
        "patch": "while ( Math . abs ( Math . abs ( x - approx ) > epsilon ) ) {",
        "score": 99.59268188476562
      },
      {
        "patch": "if ( Math . min ( x , approx ) > epsilon ) {",
        "score": 99.41630045572917
      },
      {
        "patch": "while ( Math . abs ( approx ) > epsilon ) {",
        "score": 99.59103628305289
      },
      {
        "patch": "while ( Math . abs ( x - approx - ) > epsilon ) {",
        "score": 99.4151611328125
      },
      {
        "patch": "while ( x ( approx - approx ) > epsilon ) {",
        "score": 99.4135272686298
      },
      {
        "patch": "while ( ( Math . abs ( x - approx ) > epsilon ) ) {",
        "score": 99.58534869025735
      },
      {
        "patch": "while ( x > approx ) { while ( x > approx ) {",
        "score": 99.41298014322916
      },
      {
        "patch": "while ( x - approx >= epsilon ) {",
        "score": 99.40596923828124
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = 0 . $NUMBER$ ;",
        "score": 99.5751953125
      },
      {
        "patch": "synchronized ( Math . abs ( x - approx ) ) {",
        "score": 99.40308556189903
      },
      {
        "patch": "while ( Math . abs ( Math . abs ( x - approx ) ) > epsilon )",
        "score": 99.57480340254934
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > x ) {",
        "score": 99.39927571614584
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x - approx ; }",
        "score": 99.56781560724431
      },
      {
        "patch": "while ( Math . abs ( x - approx ) == epsilon ) { {",
        "score": 99.39651489257812
      },
      {
        "patch": "while ( Math . abs ( ( x - approx ) > epsilon ) ) {",
        "score": 99.56772030101104
      },
      {
        "patch": "while ( x abs ( x - approx ) > epsilon ) {",
        "score": 99.382568359375
      },
      {
        "patch": "while ( Math . abs ( ( x - approx ) ) > epsilon ) {",
        "score": 99.55959903492646
      },
      {
        "patch": "while ( Math . abs ( x - approx ) == epsilon ) { }",
        "score": 99.38143920898438
      },
      {
        "patch": "while ( ( Math . abs ( x - approx ) - approx ) > epsilon ) {",
        "score": 99.55733449835526
      },
      {
        "patch": "while ( Math . abs ( x - approx ) != epsilon ) { {",
        "score": 99.375244140625
      },
      {
        "patch": "while ( Math . abs ( Math . abs ( x - approx ) ) >= epsilon ) {",
        "score": 99.5556640625
      },
      {
        "patch": "while ( x - approx > approx ) {",
        "score": 99.37509155273438
      },
      {
        "patch": "while ( x < approx ) { while ( x > approx ) {",
        "score": 99.37386881510416
      },
      {
        "patch": "while ( Math . abs ( approx + approx ) > epsilon ) {",
        "score": 99.549169921875
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > 0 ) {",
        "score": 99.37154134114583
      },
      {
        "patch": "while ( ( Math . abs ( x - approx ) ) >= epsilon ) {",
        "score": 99.54044835707721
      },
      {
        "patch": "while ( Math . abs ( x ) == epsilon ) {",
        "score": 99.37105618990384
      },
      {
        "patch": "while ( Math . Math . abs ( x - approx ) > epsilon ) {",
        "score": 99.53784897748162
      },
      {
        "patch": "if ( Math . abs ( x - approx ) > epsilon ) { {",
        "score": 99.36872863769531
      },
      {
        "patch": "while ( ( Math . abs ( x - approx ) ) > epsilon )",
        "score": 99.5322265625
      },
      {
        "patch": "while ( Math . abs ( Math . abs ( x - approx ) ) <= epsilon ) {",
        "score": 99.53200073242188
      },
      {
        "patch": "while ( x - approx < epsilon ) {",
        "score": 99.3595703125
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = 0 . $NUMBER$ . $NUMBER$ ;",
        "score": 99.53188688858695
      },
      {
        "patch": "while ( x - approx . length ( ) > epsilon ) {",
        "score": 99.35491071428571
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = 0 . x ;",
        "score": 99.52999441964286
      },
      {
        "patch": "if ( Math . abs ( x ) > epsilon ) {",
        "score": 99.33790001502403
      },
      {
        "patch": "if ( Math . abs ( x - approx ) > epsilon )",
        "score": 99.52587890625
      },
      {
        "patch": "while ( Math . abs ( x ) != epsilon ) {",
        "score": 99.33713942307692
      },
      {
        "patch": "while ( x - approx <= approx ) {",
        "score": 99.33029174804688
      },
      {
        "patch": "while ( Math . abs ( x - approx ) >= epsilon )",
        "score": 99.52253069196429
      },
      {
        "patch": "while ( x - approx < approx ) {",
        "score": 99.328271484375
      },
      {
        "patch": "while ( Math . abs ( Math . abs ( x - approx ) ) > epsilon ) { approx =",
        "score": 99.520751953125
      },
      {
        "patch": "while ( Math . abs ( x <= approx ) ) {",
        "score": 99.3125
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = x / $NUMBER$",
        "score": 99.52015380859375
      },
      {
        "patch": "while ( ( x - approx ) == epsilon ) {",
        "score": 99.30596923828125
      },
      {
        "patch": "while ( Math . abs ( x - $NUMBER$ ) > epsilon ) {",
        "score": 99.51944173177084
      },
      {
        "patch": "while ( x ( approx ) > epsilon ) {",
        "score": 99.30586381392045
      },
      {
        "patch": "while ( Math . abs ( abs ( x - approx ) ) > epsilon ) {",
        "score": 99.51815456814236
      },
      {
        "patch": "while ( Math . abs ( x ) <= epsilon ) {",
        "score": 99.3029315655048
      },
      {
        "patch": "while ( Math . abs ( x - approx + approx ) > epsilon ) {",
        "score": 99.51566808363971
      },
      {
        "patch": "if ( x - approx == epsilon ) {",
        "score": 99.29375610351562
      },
      {
        "patch": "while ( Math . abs ( x / approx ) > epsilon ) {",
        "score": 99.51536458333334
      },
      {
        "patch": "while ( x . length ( ) > epsilon ) {",
        "score": 99.291748046875
      },
      {
        "patch": "while ( Math . ceil ( x - approx ) > epsilon ) {",
        "score": 99.5150390625
      },
      {
        "patch": "while ( x - approx == approx ) {",
        "score": 99.2913818359375
      },
      {
        "patch": "while ( Math . abs ( x - approx ) > epsilon ) { approx = 0 . MAX",
        "score": 99.51301879882813
      },
      {
        "patch": "while ( x - approx - approx > epsilon ) {",
        "score": 99.28305053710938
      },
      {
        "patch": "while ( ( Math . abs ( x - approx ) ) <= epsilon ) {",
        "score": 99.51255170036765
      },
      {
        "patch": "while ( x - approx - approx <= epsilon ) {",
        "score": 99.2797139485677
      },
      {
        "patch": "while ( x - approx - approx == epsilon ) {",
        "score": 99.27107747395833
      },
      {
        "patch": "if ( Math . abs ( x - approx ) >= epsilon ) {",
        "score": 99.49974772135417
      },
      {
        "patch": "while ( x < approx - approx ) {",
        "score": 99.25689697265625
      },
      {
        "patch": "if ( x - approx > epsilon ) {",
        "score": 99.25597534179687
      },
      {
        "patch": "while ( Math . abs ( x - approx ) <= epsilon )",
        "score": 99.49261474609375
      },
      {
        "patch": "while ( x > approx || x > approx ) {",
        "score": 99.24716186523438
      },
      {
        "patch": "while ( x - approx != 0 ) {",
        "score": 99.24100341796876
      },
      {
        "patch": "while ( Math . abs ( x - approx >= epsilon ) ) {",
        "score": 99.46485188802083
      },
      {
        "patch": "if ( x - approx != epsilon ) {",
        "score": 99.240234375
      },
      {
        "patch": "while ( x > approx - approx ) {",
        "score": 99.22799072265624
      },
      {
        "patch": "while ( x - approx >= approx ) {",
        "score": 99.22415771484376
      },
      {
        "patch": "while ( x - epsilon > epsilon ) {",
        "score": 99.20914916992187
      },
      {
        "patch": "while ( Math . abs ( x - approx > epsilon ) ) {",
        "score": 99.4598388671875
      },
      {
        "patch": "while ( x - approx > 0 ) {",
        "score": 99.20836791992187
      },
      {
        "patch": "while ( Math . Double ( x - approx ) > epsilon ) {",
        "score": 99.45926920572917
      },
      {
        "patch": "while ( x < approx ) { }",
        "score": 99.20133463541667
      },
      {
        "patch": "while ( Math . abs ( x - approx ) < epsilon )",
        "score": 99.45893205915179
      },
      {
        "patch": "while ( x > approx - epsilon ) {",
        "score": 99.20121459960937
      },
      {
        "patch": "while ( x > approx ) { }",
        "score": 99.20120578342014
      },
      {
        "patch": "while ( Math . abs ( epsilon - approx ) > epsilon ) {",
        "score": 99.456201171875
      },
      {
        "patch": "if ( x - approx <= epsilon ) {",
        "score": 99.1931884765625
      },
      {
        "patch": "while ( x - approx != approx ) {",
        "score": 99.17109985351563
      },
      {
        "patch": "while ( x - approx >= 0 ) {",
        "score": 99.16996459960937
      },
      {
        "patch": "while ( Math . abs ( x - approx ) == epsilon )",
        "score": 99.40715680803571
      },
      {
        "patch": "while ( x > approx ) {",
        "score": 99.14083862304688
      },
      {
        "patch": "while ( Math . min ( x , approx ) ) {",
        "score": 99.38568584735577
      },
      {
        "patch": "while ( x < approx ) {",
        "score": 99.12407684326172
      },
      {
        "patch": "while ( Math . abs ( $NUMBER$ ) > epsilon ) {",
        "score": 99.38377028245192
      },
      {
        "patch": "while ( x <= approx ) { }",
        "score": 99.09977213541667
      },
      {
        "patch": "while ( Math . abs ( x - approx ) ) {",
        "score": 99.3770282451923
      },
      {
        "patch": "while ( x == approx ) { }",
        "score": 99.06681315104167
      },
      {
        "patch": "while ( Math . abs ( approx ) > epsilon )",
        "score": 99.37019856770833
      },
      {
        "patch": "while ( x >= approx ) { }",
        "score": 99.05813259548611
      },
      {
        "patch": "while ( Math . abs ( approx ) >= epsilon ) {",
        "score": 99.3541729266827
      },
      {
        "patch": "while ( x <= approx ) {",
        "score": 99.03262329101562
      },
      {
        "patch": "if ( ( x - approx ) > epsilon ) {",
        "score": 99.31650797526042
      },
      {
        "patch": "while ( x > epsilon ) {",
        "score": 99.0260009765625
      }
    ]
  },
  "SUBSEQUENCES-16-17": {
    "src": "return new Array CaMeL List ( ) ;",
    "patches": [
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List > ( ) ;",
        "score": 99.98777940538194
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < String > ( ) ;",
        "score": 99.91263580322266
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List > ( $NUMBER$ ) ;",
        "score": 99.92892937911184
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Object > ( ) ;",
        "score": 99.84463500976562
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List > ( ) ; }",
        "score": 99.88499049136513
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Integer > ( ) ;",
        "score": 99.83830261230469
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List < String > ( ) ;",
        "score": 99.83941040039062
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List > ( ) ;",
        "score": 99.80326625279018
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List > ( $NUMBER$ ) ; }",
        "score": 99.8309814453125
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < ? > ( ) ;",
        "score": 99.7949447631836
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List < Long > ( ) ;",
        "score": 99.8101806640625
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < return > ( ) ;",
        "score": 99.79350280761719
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List > ( $NUMBER$ ) ; }",
        "score": 99.80310821533203
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < List > ( ) ;",
        "score": 99.77910614013672
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List < String > ( $NUMBER$ ) ;",
        "score": 99.80036272321429
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Node > ( ) ;",
        "score": 99.75798034667969
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List < ? > ( ) ;",
        "score": 99.79993896484375
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < int > ( ) ;",
        "score": 99.75240325927734
      },
      {
        "patch": "return new Array CaMeL List < String > ( ) ;",
        "score": 99.73085530598958
      },
      {
        "patch": "return new Array CaMeL List < Object > ( ) ;",
        "score": 99.7197265625
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Linked CaMeL List > ( ) ;",
        "score": 99.76236979166667
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Class > ( ) ;",
        "score": 99.71814727783203
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List < Integer > ( ) ;",
        "score": 99.75724487304687
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < char > ( ) ;",
        "score": 99.71025085449219
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List >> ( ) ;",
        "score": 99.75703938802083
      },
      {
        "patch": "return new Array CaMeL List < Linked CaMeL List < String > ( ) ;",
        "score": 99.70623779296875
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Long > ( ) ;",
        "score": 99.75598907470703
      },
      {
        "patch": "return new Array CaMeL List < List < Array CaMeL List > ( ) ;",
        "score": 99.70011138916016
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List < Hashtable > ( ) ;",
        "score": 99.74872436523438
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Byte > ( ) ;",
        "score": 99.69767761230469
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < ? > ( $NUMBER$ ) ;",
        "score": 99.7443488625919
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Vector > ( ) ;",
        "score": 99.69747161865234
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List < Object > ( ) ;",
        "score": 99.7423828125
      },
      {
        "patch": "return new return new Array CaMeL List < Array CaMeL List > ( ) ;",
        "score": 99.69276428222656
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List ( $NUMBER$ ) ;",
        "score": 99.74028862847223
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List >> ( $NUMBER$ ) ;",
        "score": 99.7399966591283
      },
      {
        "patch": "return new Array CaMeL List < new Array CaMeL List < String > ( ) ;",
        "score": 99.66539091222427
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Boolean > ( ) ;",
        "score": 99.66141510009766
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List ( ) + 1 ;",
        "score": 99.7255923622533
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < ) > ( ) ;",
        "score": 99.65878295898438
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < String > ( $NUMBER$ ) ;",
        "score": 99.72492532169117
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < ( > ( ) ) ;",
        "score": 99.63974178538604
      },
      {
        "patch": "return new Array CaMeL List < Linked CaMeL List < Array CaMeL List > ( ) ;",
        "score": 99.72199164496527
      },
      {
        "patch": "return new List < Array CaMeL List < Array CaMeL List > ( ) ;",
        "score": 99.6236801147461
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List < static > ( ) ;",
        "score": 99.720458984375
      },
      {
        "patch": "result = new Array CaMeL List < Array CaMeL List < String > ( ) ;",
        "score": 99.61127786075367
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Linked CaMeL List > ( $NUMBER$ ) ;",
        "score": 99.71950812088816
      },
      {
        "patch": "return new Array CaMeL List < List < String > ( ) ;",
        "score": 99.60820661272321
      },
      {
        "patch": "return new Linked CaMeL List < Array CaMeL List < Array CaMeL List > ( ) ;",
        "score": 99.71809895833333
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < String > ( ) ; ;",
        "score": 99.60397518382354
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List ( ) ;",
        "score": 99.71734149639423
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List > ( ) ; } else ;",
        "score": 99.60276884191177
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Long > ( $NUMBER$ ) ;",
        "score": 99.71486529181985
      },
      {
        "patch": "return new Array CaMeL List < Integer > ( ) ;",
        "score": 99.59682210286458
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List > ( 0 ) ;",
        "score": 99.70791786595395
      },
      {
        "patch": "return new Array CaMeL List < List < Object > ( ) ;",
        "score": 99.59554617745536
      },
      {
        "patch": "return new Array CaMeL List < List > ( ) ;",
        "score": 99.59414672851562
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List > ( $NUMBER$ ) ;",
        "score": 99.70309244791666
      },
      {
        "patch": "return new Array CaMeL List < Node > ( ) ;",
        "score": 99.58346557617188
      },
      {
        "patch": "return new Array CaMeL List < new Array CaMeL List < Array CaMeL List > ( ) ;",
        "score": 99.6909243935033
      },
      {
        "patch": "return new Array CaMeL List < ? > ( ) ;",
        "score": 99.55082194010417
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < class > ( ) ;",
        "score": 99.68846130371094
      },
      {
        "patch": "return new Array CaMeL List < return > ( ) ;",
        "score": 99.54770914713542
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < String > ( ) ; }",
        "score": 99.68755026424633
      },
      {
        "patch": "return new Array CaMeL List < Linked CaMeL List > ( ) ;",
        "score": 99.53711809430804
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List > ( a ) ;",
        "score": 99.68590023643092
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List > ( ) ; } else",
        "score": 99.53065490722656
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < ? > ( ) ; }",
        "score": 99.68567612591912
      },
      {
        "patch": "return new Array CaMeL List < Hash CaMeL Set > ( ) ;",
        "score": 99.52253069196429
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List ( ) ; }",
        "score": 99.68223063151042
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List > ( ) ; }",
        "score": 99.51334635416667
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Linked CaMeL List > ( ) ; }",
        "score": 99.67283871299342
      },
      {
        "patch": "return new Array CaMeL List < int > ( ) ;",
        "score": 99.51296997070312
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Hashtable > ( ) ;",
        "score": 99.67015075683594
      },
      {
        "patch": "return new Array CaMeL List < Vector > ( ) ;",
        "score": 99.50846354166667
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List >> ( ) ; }",
        "score": 99.66899028577302
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List ( size ) ;",
        "score": 99.66841634114583
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List > ( ) ; ;",
        "score": 99.4995361328125
      },
      {
        "patch": "return new Array CaMeL List < Byte > ( ) ;",
        "score": 99.49609375
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < void > ( ) ;",
        "score": 99.6597900390625
      },
      {
        "patch": "return new Array CaMeL List ( ) ;",
        "score": 99.48539225260417
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < static > ( ) ;",
        "score": 99.6587142944336
      },
      {
        "patch": "return new Array CaMeL List < char > ( ) ;",
        "score": 99.45670572916667
      },
      {
        "patch": "return new Array CaMeL List < Class > ( ) ;",
        "score": 99.45350138346355
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Long > ( ) ; }",
        "score": 99.65234375
      },
      {
        "patch": "try { return new Array CaMeL List < Array CaMeL List > ( ) ;",
        "score": 99.45093536376953
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < ? > ( $NUMBER$ ) ; }",
        "score": 99.64023844401042
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List >> ( ) ;",
        "score": 99.4478759765625
      },
      {
        "patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
        "score": 99.44099934895833
      },
      {
        "patch": "return subsequences ( a , b , k - 1 ) ;",
        "score": 99.63069370814732
      },
      {
        "patch": "result = new Array CaMeL List < Array CaMeL List > ( ) ; }",
        "score": 99.4299545288086
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List ( ) ; }",
        "score": 99.62126813616071
      },
      {
        "patch": "return new Array CaMeL List < Boolean > ( ) ;",
        "score": 99.427734375
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List ( $NUMBER$ ) ;",
        "score": 99.61846051897321
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < ( > ) ;",
        "score": 99.41515299479167
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List < Array CaMeL List ( ) ;",
        "score": 99.61309455422794
      },
      {
        "patch": "return new Linked CaMeL List < Array CaMeL List > ( ) ;",
        "score": 99.41281563895089
      },
      {
        "patch": "return new Array CaMeL List ( ) ; }",
        "score": 99.58941040039062
      },
      {
        "patch": "return new Array CaMeL List < Long > ( ) ;",
        "score": 99.40537516276042
      },
      {
        "patch": "return new Array CaMeL List ( $NUMBER$ ) ;",
        "score": 99.53843383789062
      },
      {
        "patch": "return new Array CaMeL List < long > ( ) ;",
        "score": 99.40414428710938
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List ( $NUMBER$ ) ; }",
        "score": 99.53185221354167
      },
      {
        "patch": "return new Array CaMeL List ( $NUMBER$ ) ; }",
        "score": 99.50438343394886
      },
      {
        "patch": "return new Array CaMeL List > ( ) ;",
        "score": 99.39048461914062
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List ( ) + 1 ;",
        "score": 99.5031005859375
      },
      {
        "patch": "return new Hash CaMeL Set < Array CaMeL List > ( ) ;",
        "score": 99.38961356026786
      },
      {
        "patch": "return new Array CaMeL List > ( $NUMBER$ ) ;",
        "score": 99.46415571732955
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
        "score": 99.38328857421875
      },
      {
        "patch": "return new Array CaMeL List < ) > ( ) ;",
        "score": 99.36502075195312
      },
      {
        "patch": "return new Array CaMeL List < Exception > ( ) ;",
        "score": 99.36483764648438
      },
      {
        "patch": "return new Array CaMeL List > ( ) ; }",
        "score": 99.41523881392045
      },
      {
        "patch": "return new Array CaMeL List < Double > ( ) ;",
        "score": 99.36208089192708
      },
      {
        "patch": "return new Array CaMeL List > ( $NUMBER$ ) ; }",
        "score": 99.41481526692708
      },
      {
        "patch": "return new Array CaMeL List < Short > ( ) ;",
        "score": 99.35188802083333
      },
      {
        "patch": "return new Array CaMeL List < Array CaMeL List ( 0 ) ;",
        "score": 99.40606689453125
      },
      {
        "patch": "return new Array CaMeL List < Object > ( ) ; } else",
        "score": 99.34958321707589
      },
      {
        "patch": "return new Array CaMeL List < synchronized > ( ) ;",
        "score": 99.3495381673177
      },
      {
        "patch": "return new Array CaMeL List < Entry > ( ) ;",
        "score": 99.3477783203125
      },
      {
        "patch": "return new Array CaMeL List < Linked CaMeL List ( ) ;",
        "score": 99.36024827223558
      },
      {
        "patch": "return new Array CaMeL List < String > ( ) ; } else",
        "score": 99.33514404296875
      },
      {
        "patch": "return new Linked CaMeL List < Array CaMeL List ( ) ;",
        "score": 99.3425762469952
      },
      {
        "patch": "return new Array CaMeL List < Thread > ( ) ;",
        "score": 99.33468627929688
      },
      {
        "patch": "return new Array CaMeL List < Number > ( ) ;",
        "score": 99.3297831217448
      },
      {
        "patch": "return new Array CaMeL List < / > ( ) ;",
        "score": 99.32150268554688
      },
      {
        "patch": "return new Array CaMeL List < class > ( ) ;",
        "score": 99.31521606445312
      },
      {
        "patch": "return new Array CaMeL List < Hashtable > ( ) ;",
        "score": 99.3199462890625
      },
      {
        "patch": "return new Array CaMeL List < float > ( ) ;",
        "score": 99.31893920898438
      },
      {
        "patch": "return new Array CaMeL List ( 0 ) ;",
        "score": 99.166064453125
      },
      {
        "patch": "return new Array CaMeL List < Date > ( ) ;",
        "score": 99.31552124023438
      },
      {
        "patch": "return Collections . empty CaMeL List ( ) ;",
        "score": 99.15122680664062
      },
      {
        "patch": "return new List < Array CaMeL List > ( ) ;",
        "score": 99.31515502929688
      },
      {
        "patch": "return new Linked CaMeL List ( ) ; }",
        "score": 99.1232666015625
      },
      {
        "patch": "return new Array CaMeL List < while > ( ) ;",
        "score": 99.3120829264323
      },
      {
        "patch": "return new Linked CaMeL List ( ) ;",
        "score": 99.10348171657986
      },
      {
        "patch": "return new Hash CaMeL Set < String > ( ) ;",
        "score": 99.31009928385417
      },
      {
        "patch": "List < Array CaMeL List ( ) ;",
        "score": 99.04407416449652
      },
      {
        "patch": "return new Hash CaMeL Set < Object > ( ) ;",
        "score": 99.30516560872395
      },
      {
        "patch": "return subsequences ( ) ; }",
        "score": 98.95872497558594
      },
      {
        "patch": "result = new Array CaMeL List < String > ( ) ;",
        "score": 99.29998309795673
      },
      {
        "patch": "return subsequences ( ) ;",
        "score": 98.94978550502232
      },
      {
        "patch": "return new Array CaMeL List < Set > ( ) ;",
        "score": 99.29569498697917
      },
      {
        "patch": "return null ; }",
        "score": 98.94367065429688
      },
      {
        "patch": "return new Array CaMeL List < boolean > ( ) ;",
        "score": 99.2905782063802
      },
      {
        "patch": "return subsequences ( a ) ;",
        "score": 98.90637969970703
      },
      {
        "patch": "return new Array CaMeL List < Object > ( ) ; ;",
        "score": 99.28030160757211
      },
      {
        "patch": "return subsequences ( $NUMBER$ ) ;",
        "score": 98.89315032958984
      },
      {
        "patch": "return new Array CaMeL List < String > ( ) ; ;",
        "score": 99.2794658954327
      },
      {
        "patch": "if ( k == 0 ) {",
        "score": 98.86503601074219
      },
      {
        "patch": "throw new Illegal CaMeL Argument CaMeL Exception ( ) ;",
        "score": 99.24766956676136
      },
      {
        "patch": "return new Array CaMeL List <",
        "score": 98.84858921595982
      },
      {
        "patch": "return new Array CaMeL List < return ( ) ;",
        "score": 99.24416281960227
      },
      {
        "patch": "return null ;",
        "score": 98.72614288330078
      },
      {
        "patch": "return new List < String > ( ) ;",
        "score": 99.23300170898438
      },
      {
        "patch": "throw new > 1 ;",
        "score": 98.62679036458333
      },
      {
        "patch": "return new Array CaMeL List < ( ) ;",
        "score": 99.16098022460938
      },
      {
        "patch": "return subsequences ; }",
        "score": 98.59274291992188
      },
      {
        "patch": "return new List < Object > ( ) ;",
        "score": 99.14248046875
      },
      {
        "patch": "return empty CaMeL List ;",
        "score": 98.53176879882812
      },
      {
        "patch": "return Array CaMeL List . EMPTY _ LIST ;",
        "score": 99.139990234375
      },
      {
        "patch": "return Collections . null ;",
        "score": 98.5249735514323
      },
      {
        "patch": "return Collections . EMPTY _ LIST ;",
        "score": 99.0948257446289
      },
      {
        "patch": "return subsequences ;",
        "score": 98.4355224609375
      },
      {
        "patch": "throw new Runtime CaMeL Exception ( ) ;",
        "score": 99.07223171657986
      },
      {
        "patch": "return ) ; }",
        "score": 98.40965576171875
      },
      {
        "patch": "return new int [ 1 ] ;",
        "score": 98.9747085571289
      },
      {
        "patch": "return 0 ; }",
        "score": 98.40150146484375
      },
      {
        "patch": "return new int [ 0 ] ;",
        "score": 98.96636199951172
      },
      {
        "patch": "return $NUMBER$ ; }",
        "score": 98.376318359375
      },
      {
        "patch": "return new List [ 0 ] ;",
        "score": 98.92481231689453
      },
      {
        "patch": "return false ; }",
        "score": 98.325830078125
      },
      {
        "patch": "return true ; }",
        "score": 98.13424072265624
      },
      {
        "patch": "return new ( ) ;",
        "score": 98.77171834309895
      },
      {
        "patch": "List ( ) ;",
        "score": 98.120947265625
      },
      {
        "patch": "return ) ;",
        "score": 98.37671661376953
      },
      {
        "patch": "return 0 ;",
        "score": 98.03683471679688
      },
      {
        "patch": "return true ;",
        "score": 97.90299987792969
      },
      {
        "patch": "return $NUMBER$ ;",
        "score": 97.99120330810547
      },
      {
        "patch": "return false ;",
        "score": 97.86875915527344
      },
      {
        "patch": "throw null ;",
        "score": 97.8330078125
      },
      {
        "patch": "return list ;",
        "score": 97.67819213867188
      },
      {
        "patch": "break ;",
        "score": 97.56526692708333
      }
    ]
  },
  "TO_BASE-21-22": {
    "src": "result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
    "patches": [
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.92931547619048
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.80474532277961
      },
      {
        "patch": "return result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.7539306640625
      },
      {
        "patch": "result = result + result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.7461574388587
      },
      {
        "patch": "result = result + String . value CaMeL Of ( b ) ;",
        "score": 99.72589111328125
      },
      {
        "patch": "result = alphabet + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.71072823660714
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet ) ;",
        "score": 99.72250802176339
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( 0 ) ) ;",
        "score": 99.71013532366071
      },
      {
        "patch": "result = result + alphabet + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.6819484544837
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) . length ( ) ;",
        "score": 99.68166185461956
      },
      {
        "patch": "result = result + String . value CaMeL Of ( String . value CaMeL Of ( b ) ) ;",
        "score": 99.64278738839286
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . to CaMeL String ( ) ) ;",
        "score": 99.67050170898438
      },
      {
        "patch": "result += String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.63760536595395
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . to CaMeL String ( i ) ) ;",
        "score": 99.66560872395833
      },
      {
        "patch": "result = result + alphabet . char CaMeL At ( i ) ;",
        "score": 99.63587297712054
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . to CaMeL Lower CaMeL Case ( ) ) ;",
        "score": 99.65004660866477
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( num ) ) ;",
        "score": 99.62569754464286
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) . trim ( ) ;",
        "score": 99.64534859035327
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( b ) ) ;",
        "score": 99.62050083705357
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( i - 1 ) ) ;",
        "score": 99.64466924252717
      },
      {
        "patch": "result = result + String . to CaMeL String ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.61879185267857
      },
      {
        "patch": "} result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.64253373579545
      },
      {
        "patch": "result = result + String . value CaMeL Of ( num ) ;",
        "score": 99.61163330078125
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ; }",
        "score": 99.61112670898437
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ; }",
        "score": 99.63880504261364
      },
      {
        "patch": "return result + result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.63483220880681
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . substring ( i ) ) ;",
        "score": 99.58983090049342
      },
      {
        "patch": "result = String . value CaMeL Of ( result . char CaMeL At ( i ) ) ;",
        "score": 99.62995990953948
      },
      {
        "patch": "return alphabet + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.5895751953125
      },
      {
        "patch": "result = result + String . value CaMeL Of ( result . char CaMeL At ( i ) ) ;",
        "score": 99.62994094122024
      },
      {
        "patch": "result = result + String . decode ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.58840460526316
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet , alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.62913876488095
      },
      {
        "patch": "result = result + String . value CaMeL Of ( result ) ;",
        "score": 99.58582414899554
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( i , i ) ) ;",
        "score": 99.62643299932066
      },
      {
        "patch": "result = result + String . value CaMeL Of ( b ) ; } return result ;",
        "score": 99.57918972439236
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ) ;",
        "score": 99.6258544921875
      },
      {
        "patch": "result = result + $STRING$ ; result = result + String . value CaMeL Of ( b ) ;",
        "score": 99.577001953125
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet ) . to CaMeL String ( ) ;",
        "score": 99.62021484375
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet ) ; } return result ;",
        "score": 99.57526991102431
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet . char CaMeL At ( 0 ) ) ;",
        "score": 99.57522743626645
      },
      {
        "patch": "this . result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.61316448709239
      },
      {
        "patch": "result = result + String . value CaMeL Of ( value ) ;",
        "score": 99.57177734375
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet . to CaMeL String ( i ) ) ;",
        "score": 99.61159153988487
      },
      {
        "patch": "result = result . to CaMeL String ( ) + String . value CaMeL Of ( b ) ;",
        "score": 99.56002807617188
      },
      {
        "patch": "m = result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.60893322172619
      },
      {
        "patch": "result = result + alphabet . char CaMeL At ( i ) ; } return result ;",
        "score": 99.54041205512152
      },
      {
        "patch": "result = result + String . value CaMeL Of ( this . alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.60860011888587
      },
      {
        "patch": "result = result + result + String . value CaMeL Of ( b ) ;",
        "score": 99.53809356689453
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ; ;",
        "score": 99.60859818892045
      },
      {
        "patch": "return String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.53087022569444
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet ) . char CaMeL At ( i ) ;",
        "score": 99.6072009858631
      },
      {
        "patch": "result = result + String . value CaMeL Of ( to _ base ( num ) ) ;",
        "score": 99.52320620888158
      },
      {
        "patch": "result = result . to CaMeL String ( ) + String . value CaMeL Of ( alphabet ) ;",
        "score": 99.6063720703125
      },
      {
        "patch": "result = result + String . value CaMeL Of ( i ) ;",
        "score": 99.51988002232143
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . to CaMeL Lower CaMeL Case ( i ) ) ;",
        "score": 99.60634977921195
      },
      {
        "patch": "return result + String . value CaMeL Of ( alphabet . char CaMeL At ( 0 ) ) ;",
        "score": 99.516650390625
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet ) . char CaMeL At ( i ) ;",
        "score": 99.60258403577302
      },
      {
        "patch": "result = $STRING$ ; result = result + String . value CaMeL Of ( b ) ;",
        "score": 99.51620822482639
      },
      {
        "patch": "result = result . char CaMeL At ( i ) . char CaMeL At ( i ) ;",
        "score": 99.60097784745066
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . char [ i ] ) ;",
        "score": 99.51212350945724
      },
      {
        "patch": "result = result + String . value CaMeL Of ( parent . char CaMeL At ( i ) ) ;",
        "score": 99.60028366815476
      },
      {
        "patch": "result = result + String . value CaMeL Of ( to _ base ( b ) ) ;",
        "score": 99.50933516652961
      },
      {
        "patch": "result = result . to CaMeL String ( ) + alphabet . char CaMeL At ( i ) ;",
        "score": 99.59880981445312
      },
      {
        "patch": "result = result + String . value CaMeL Of ( ( int ) b ) ;",
        "score": 99.50757553998162
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( 1 ) ) ;",
        "score": 99.59830729166667
      },
      {
        "patch": "result = result + result ; result = result + String . value CaMeL Of ( b ) ;",
        "score": 99.50567626953125
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ) ;",
        "score": 99.57835083007812
      },
      {
        "patch": "result = result . append ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.50552188648896
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet . to CaMeL String ( ) ) ;",
        "score": 99.57463243272569
      },
      {
        "patch": "result = num / b ; result = result + String . value CaMeL Of ( alphabet ) ;",
        "score": 99.50447387695313
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet . char CaMeL At ( i , i ) ) ;",
        "score": 99.57284691220238
      },
      {
        "patch": "return result + String . value CaMeL Of ( alphabet ) ;",
        "score": 99.50284517728366
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet . char CaMeL At ( i - 1 ) ) ;",
        "score": 99.57239350818452
      },
      {
        "patch": "result = alphabet . char CaMeL At ( i ) ; } return result ;",
        "score": 99.50021362304688
      },
      {
        "patch": "result = result + result + String . value CaMeL Of ( alphabet ) ;",
        "score": 99.56937408447266
      },
      {
        "patch": "result = result + String . value CaMeL Of ( num ) ; } return result ;",
        "score": 99.49366590711806
      },
      {
        "patch": "result = result + result . char CaMeL At ( i ) ;",
        "score": 99.56913539341518
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . length ( ) ) ;",
        "score": 99.49181450737848
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . to CaMeL String ( 0 ) ) ;",
        "score": 99.56905691964286
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet . trim ( ) ) ;",
        "score": 99.48908148871527
      },
      {
        "patch": "} result = String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
        "score": 99.56842651367188
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet ) . to CaMeL String ( ) ;",
        "score": 99.56705050998264
      },
      {
        "patch": "result = result + String . value CaMeL Of ( $STRING$ ) ;",
        "score": 99.48563058035714
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet [ i ] ) ;",
        "score": 99.56622673483456
      },
      {
        "patch": "result = result + String . value CaMeL Of ( num / b ) ;",
        "score": 99.48465728759766
      },
      {
        "patch": "result = result + result + String . value CaMeL Of ( alphabet . to CaMeL String ( ) ) ;",
        "score": 99.56488591974431
      },
      {
        "patch": "result = result + String . value CaMeL Of ( result ) ; } return result ;",
        "score": 99.46792263454861
      },
      {
        "patch": "result = result + String . value CaMeL Of ( b ) ; result = result ;",
        "score": 99.461181640625
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet , String . value CaMeL Of ( alphabet ) ) ;",
        "score": 99.56016322544643
      },
      {
        "patch": "result = result + String . value CaMeL Of ( b + 1 ) ;",
        "score": 99.45932006835938
      },
      {
        "patch": "result = result + $STRING$ + String . value CaMeL Of ( b ) ;",
        "score": 99.45932006835938
      },
      {
        "patch": "result = result . char CaMeL At ( i ) ; result = result . to CaMeL String ( ) ;",
        "score": 99.55785023082386
      },
      {
        "patch": "result = result + String . value CaMeL Of ( num % b ) ;",
        "score": 99.45903015136719
      },
      {
        "patch": "result = result . substring ( i , i ) ;",
        "score": 99.55633544921875
      },
      {
        "patch": "result = result + String . value CaMeL Of ( value ) ; } return result ;",
        "score": 99.45808919270833
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet . to CaMeL Lower CaMeL Case ( i ) ) ;",
        "score": 99.5546642485119
      },
      {
        "patch": "result = result + String . value CaMeL Of ( b ) ; }",
        "score": 99.4527099609375
      },
      {
        "patch": "result = result . char CaMeL At ( i ) + String . value CaMeL Of ( alphabet ) ;",
        "score": 99.55362955729167
      },
      {
        "patch": "result = result + String . to CaMeL String ( b ) ;",
        "score": 99.45151192801339
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet ) . to CaMeL Lower CaMeL Case ( ) ;",
        "score": 99.5535888671875
      },
      {
        "patch": "result = result . append ( String . value CaMeL Of ( alphabet ) ) ;",
        "score": 99.45109288832721
      },
      {
        "patch": "result = result . to CaMeL String ( ) ; result = result . to CaMeL String ( ) ;",
        "score": 99.55339704241071
      },
      {
        "patch": "result = result + String . value CaMeL Of ( num + b ) ;",
        "score": 99.4501724243164
      },
      {
        "patch": "result = result . char CaMeL At ( i ) + alphabet . char CaMeL At ( i ) ;",
        "score": 99.55259486607143
      },
      {
        "patch": "result = result . char CaMeL At ( i ) ; } return result ;",
        "score": 99.44905853271484
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet ) ; }",
        "score": 99.44773763020834
      },
      {
        "patch": "result = alphabet + String . value CaMeL Of ( alphabet . to CaMeL String ( ) ) ;",
        "score": 99.54977416992188
      },
      {
        "patch": "result = result . to CaMeL String ( ) ; } return result ;",
        "score": 99.44642740885416
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet . to CaMeL Lower CaMeL Case ( ) ) ;",
        "score": 99.54891967773438
      },
      {
        "patch": "result = result + String . value CaMeL Of ( b , i ) ;",
        "score": 99.44577026367188
      },
      {
        "patch": "result = result + alphabet . char CaMeL At ( i ) . char CaMeL At ( i ) ;",
        "score": 99.54872349330357
      },
      {
        "patch": "result = result + String . value CaMeL Of ( b + $STRING$ ) ;",
        "score": 99.43590545654297
      },
      {
        "patch": "result = result . substring ( i , alphabet . length ( ) ) ;",
        "score": 99.5485610961914
      },
      {
        "patch": "result = result + String . value CaMeL Of ( b ) ; return result ;",
        "score": 99.43304802389706
      },
      {
        "patch": "result = result . substring ( i , alphabet . length ( ) - 1 ) ;",
        "score": 99.54653591579861
      },
      {
        "patch": "result = result = result + String . value CaMeL Of ( b ) ;",
        "score": 99.41870880126953
      },
      {
        "patch": "result = result . char CaMeL At ( i ) . to CaMeL String ( ) ;",
        "score": 99.54384358723958
      },
      {
        "patch": "result = result + result + String . value CaMeL Of ( num ) ;",
        "score": 99.41687774658203
      },
      {
        "patch": "result = alphabet . char CaMeL At ( i ) . char CaMeL At ( i ) ;",
        "score": 99.5438296669408
      },
      {
        "patch": "result = result + String . value CaMeL Of ( 1 ) ;",
        "score": 99.41574532645089
      },
      {
        "patch": "result = String . value CaMeL Of ( result . to CaMeL String ( ) ) ;",
        "score": 99.54150390625
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet ) ; } return result ;",
        "score": 99.41322326660156
      },
      {
        "patch": "result = result . char CaMeL At ( i ) . to CaMeL Lower CaMeL Case ( ) ;",
        "score": 99.53771362304687
      },
      {
        "patch": "result = result + alphabet . char CaMeL At ( i ) ; }",
        "score": 99.39771321614583
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ; ;",
        "score": 99.5326171875
      },
      {
        "patch": "result = alphabet + String . value CaMeL Of ( alphabet ) ;",
        "score": 99.39297921316964
      },
      {
        "patch": "result = result . to CaMeL String ( ) + result . to CaMeL String ( ) ;",
        "score": 99.52350817228618
      },
      {
        "patch": "result = result + $STRING$ . to CaMeL String ( ) ;",
        "score": 99.38792067307692
      },
      {
        "patch": "result = result + alphabet + String . value CaMeL Of ( alphabet ) ;",
        "score": 99.51046752929688
      },
      {
        "patch": "result = result + String . to CaMeL String ( num ) ;",
        "score": 99.38706752232143
      },
      {
        "patch": "result = alphabet . char CaMeL At ( i ) . to CaMeL String ( ) ;",
        "score": 99.50910101996527
      },
      {
        "patch": "return result + alphabet . char CaMeL At ( i ) ;",
        "score": 99.386962890625
      },
      {
        "patch": "result = result + result + alphabet . char CaMeL At ( i ) ;",
        "score": 99.50325775146484
      },
      {
        "patch": "result = result . to CaMeL String ( ) + $STRING$ ;",
        "score": 99.38437124399039
      },
      {
        "patch": "result = result + String . value CaMeL Of ( last ) ;",
        "score": 99.37041364397321
      },
      {
        "patch": "result = result + Integer . to CaMeL String ( b ) ;",
        "score": 99.3702392578125
      },
      {
        "patch": "result = result . to CaMeL String ( ) + result . length ( ) ;",
        "score": 99.49093807444854
      },
      {
        "patch": "return result + String . value CaMeL Of ( b ) ;",
        "score": 99.3697040264423
      },
      {
        "patch": "result = alphabet . char CaMeL At ( i ) ;",
        "score": 99.34754435221355
      },
      {
        "patch": "result = result + result . to CaMeL String ( ) ;",
        "score": 99.4815204326923
      },
      {
        "patch": "result = alphabet . char CaMeL At ( i ) ; }",
        "score": 99.34219125600961
      },
      {
        "patch": "result = result . substring ( i , 0 , i ) ;",
        "score": 99.46806989397321
      },
      {
        "patch": "return result + String . value CaMeL Of ( result ) ;",
        "score": 99.32398399939903
      },
      {
        "patch": "result = result . substring ( i , result . length ( ) ) ;",
        "score": 99.46012878417969
      },
      {
        "patch": "result = result . to CaMeL String ( ) ;",
        "score": 99.31049138849431
      },
      {
        "patch": "result = result . substring ( 0 , i ) ;",
        "score": 99.30991617838542
      },
      {
        "patch": "result = result + String . value CaMeL Of ( alphabet + 0 ) ;",
        "score": 99.44769287109375
      },
      {
        "patch": "result = to _ base ( num / b ) ;",
        "score": 99.29945882161458
      },
      {
        "patch": "result = result + result + String . value CaMeL Of ( i ) ;",
        "score": 99.44750213623047
      },
      {
        "patch": "result = result . char CaMeL At ( i ) ;",
        "score": 99.26920572916667
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet [ i ] ) ;",
        "score": 99.43937174479167
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet ) ;",
        "score": 99.26767985026042
      },
      {
        "patch": "result = result . substring ( i , i + 1 ) ;",
        "score": 99.43714250837054
      },
      {
        "patch": "result = result + $STRING$ ; } return result ;",
        "score": 99.22779430042614
      },
      {
        "patch": "result = result [ i ] . char CaMeL At ( i ) ;",
        "score": 99.42902018229167
      },
      {
        "patch": "result = result + $STRING$ + num / b ;",
        "score": 99.2211026278409
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet , alphabet ) ;",
        "score": 99.42802211216518
      },
      {
        "patch": "result = result + ( num / b ) ;",
        "score": 99.2202481356534
      },
      {
        "patch": "result = result + result . substring ( i , i ) ;",
        "score": 99.42497035435268
      },
      {
        "patch": "result = result + alphabet ; } return result ;",
        "score": 99.21348987926136
      },
      {
        "patch": "result = result . char CaMeL At ( i , i ) ;",
        "score": 99.418701171875
      },
      {
        "patch": "result = result + $STRING$ + num ;",
        "score": 99.15957980685764
      },
      {
        "patch": "result = result + $STRING$ + b ;",
        "score": 99.14874945746527
      },
      {
        "patch": "result = alphabet + alphabet . char CaMeL At ( i ) ;",
        "score": 99.41248430524554
      },
      {
        "patch": "result = result + $STRING$ + result ;",
        "score": 99.1309814453125
      },
      {
        "patch": "result = String . value CaMeL Of ( alphabet , i ) ;",
        "score": 99.40084402901786
      },
      {
        "patch": "String alphabet = $STRING$ ; int i ;",
        "score": 99.12839762369792
      },
      {
        "patch": "result = result + $STRING$ + alphabet ;",
        "score": 99.1156005859375
      },
      {
        "patch": "result = result . substring ( i , 1 ) ;",
        "score": 99.37115478515625
      },
      {
        "patch": "result = result + num / b ;",
        "score": 99.11048041449652
      },
      {
        "patch": "result = result + alphabet + $STRING$ ;",
        "score": 99.10264756944444
      },
      {
        "patch": "result = result + $STRING$ + i ;",
        "score": 99.09012858072917
      },
      {
        "patch": "result = result . substring ( i , alphabet ) ;",
        "score": 99.3360087076823
      },
      {
        "patch": "result = result + result + $STRING$ ;",
        "score": 99.05409071180556
      },
      {
        "patch": "result = result + result . length ( ) ;",
        "score": 99.31639515269886
      },
      {
        "patch": "result = result + num % b ;",
        "score": 99.033203125
      },
      {
        "patch": "result = result + result + result ;",
        "score": 99.11711968315973
      },
      {
        "patch": "result = result + $STRING$ ;",
        "score": 98.89866420200893
      }
    ]
  },
  "TOPOLOGICAL_ORDERING-17-18": {
    "src": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
    "patches": [
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.93218470982143
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.89901662427326
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; } } return ordered CaMeL Nodes ;",
        "score": 99.87032920435855
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.87802358774039
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.85692641314338
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.8768935785061
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) )",
        "score": 99.85641659007354
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.85560960036058
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.85329367897727
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.84583875868056
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }",
        "score": 99.85254810474537
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.84357561383929
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }",
        "score": 99.84909319196429
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( node ) ;",
        "score": 99.84053178267045
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.84134928385417
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.83588201349431
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.83546357996323
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.8347763433689
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.83147872121711
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.8311082793445
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ;",
        "score": 99.82820375504032
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.82072932545732
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.82509940011161
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.81914813701923
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; }",
        "score": 99.82363891601562
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.81535034179687
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }",
        "score": 99.82032933728448
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.80884576612904
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.81355365953948
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }",
        "score": 99.805908203125
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.81313941592262
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) {",
        "score": 99.80436417863176
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.8108410957532
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ;",
        "score": 99.80085523200758
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) )",
        "score": 99.80994233630952
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ;",
        "score": 99.80020718961148
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains CaMeL All ( node . get CaMeL Successors ( ) ) ) {",
        "score": 99.80839129192073
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; }",
        "score": 99.79754997702206
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.80836791992188
      },
      {
        "patch": "if ( ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) ) {",
        "score": 99.79575327280405
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.80769856770833
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ; }",
        "score": 99.79222347861842
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ; }",
        "score": 99.80684502180233
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.7920280905331
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains CaMeL All ( ordered CaMeL Nodes . get CaMeL Successors ( ) ) ) {",
        "score": 99.80503951671511
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.79201438210227
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node ) ) {",
        "score": 99.79912719726562
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ;",
        "score": 99.78485107421875
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.79845081676136
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.78215398015203
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains CaMeL All ( ordered CaMeL Nodes ) ) {",
        "score": 99.797119140625
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.78212709780092
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( ordered CaMeL Nodes . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.79670466933139
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ;",
        "score": 99.78108978271484
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.7957251764113
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; }",
        "score": 99.78095967060811
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ;",
        "score": 99.79325939360119
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; } } return ordered CaMeL Nodes ;",
        "score": 99.7807099313447
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }",
        "score": 99.78062220982143
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.79132254464285
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ;",
        "score": 99.7779181985294
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( node . get CaMeL Successors ( ) ) ) {",
        "score": 99.79018304286859
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ; }",
        "score": 99.7770108309659
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) { {",
        "score": 99.78993918678977
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ;",
        "score": 99.77549115349265
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.78948419744319
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.77516004774306
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . equals ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.78873697916667
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) ) {",
        "score": 99.77507390202703
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.78854896282327
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.77384185791016
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . equals ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.78751429115853
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.77379608154297
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.7850242820946
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; list CaMeL Size ++ ;",
        "score": 99.77353922526042
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( node ) ) {",
        "score": 99.78289979876894
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; } }",
        "score": 99.77294921875
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) )",
        "score": 99.78252563476562
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }",
        "score": 99.77215897409539
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . is CaMeL Empty ( ) ) {",
        "score": 99.78221938189338
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) )",
        "score": 99.77091979980469
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ; }",
        "score": 99.77950528772865
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ; }",
        "score": 99.77005440848214
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.7792499248798
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }",
        "score": 99.7698641690341
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) )",
        "score": 99.77875077097039
      },
      {
        "patch": "if ( node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ;",
        "score": 99.76985909598214
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.77827649238782
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ;",
        "score": 99.76973724365234
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.77616159539474
      },
      {
        "patch": "if ( node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.76863887392241
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }",
        "score": 99.7686064749053
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.768310546875
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( ordered CaMeL Nodes . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.77218191964286
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; }",
        "score": 99.76814038825758
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.77107238769531
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ; }",
        "score": 99.76797572544643
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.77063598632813
      },
      {
        "patch": "if ( node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }",
        "score": 99.76752115885417
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ! ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.768896484375
      },
      {
        "patch": "if ( node . get CaMeL Successors ( ) . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.7657371727196
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.76737253289474
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) )",
        "score": 99.76563197544642
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( ordered CaMeL Nodes . get ( i ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.76714324951172
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; } list CaMeL Size ++ ;",
        "score": 99.76561737060547
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.7666015625
      },
      {
        "patch": "if ( node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ; }",
        "score": 99.76559787326389
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.76622596153847
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; } }",
        "score": 99.76546223958333
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node ) ) {",
        "score": 99.76569567228618
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; list CaMeL Size ++ ; }",
        "score": 99.7646286423142
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . equals ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.76503655849359
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.76434536637932
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.764892578125
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; } } } return ordered CaMeL Nodes ;",
        "score": 99.76406680836396
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Name ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.76296037946429
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { {",
        "score": 99.76221381293402
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) continue ;",
        "score": 99.76255289713542
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( node . get CaMeL Successors ( ) ) ) {",
        "score": 99.76080157305744
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ;",
        "score": 99.76234266493056
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ( ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) ) {",
        "score": 99.76220703125
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.75896453857422
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; } } return ordered CaMeL Nodes ;",
        "score": 99.75989815848214
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( ordered CaMeL Nodes ) ) {",
        "score": 99.75791015625
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { }",
        "score": 99.75974527994792
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( node ) ) {",
        "score": 99.75656029485887
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.758837890625
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.75614970439189
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.75570565682871
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) )",
        "score": 99.75511955492425
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ordered CaMeL Nodes . contains CaMeL All ( ordered CaMeL Nodes ) ) {",
        "score": 99.75223117404514
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) ) {",
        "score": 99.74825710720486
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; } }",
        "score": 99.7537841796875
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( i ) ) {",
        "score": 99.75375828598484
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . equals ( next CaMeL Node ) ) {",
        "score": 99.74387555803571
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( ordered CaMeL Nodes ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.75254242995689
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( ordered CaMeL Nodes . get ( next CaMeL Node ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.74337948069854
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . is CaMeL Empty ( ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.7509765625
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.74169049944196
      },
      {
        "patch": "if ( node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ;",
        "score": 99.7495476217831
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . is CaMeL Empty ( ) ) {",
        "score": 99.7416000366211
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( element . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.74866832386364
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . equals ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.73765240293561
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size -- ; }",
        "score": 99.74414825439453
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( ordered CaMeL Nodes . get ( 0 ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.73529815673828
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size -- ;",
        "score": 99.74275453629032
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node ) ) {",
        "score": 99.73485565185547
      },
      {
        "patch": "if ( ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.73750945060483
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) || ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.73115596064815
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.73569672683189
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) . get ( next CaMeL Node ) ) ) {",
        "score": 99.72725132533482
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }",
        "score": 99.7355224609375
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) {",
        "score": 99.72641938308189
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; } }",
        "score": 99.731884765625
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.72072265625
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Predecessors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.72894090221774
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . equals ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.7194191261574
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.71785835597827
      },
      {
        "patch": "if ( node . get CaMeL Predecessors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }",
        "score": 99.71903483072917
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node ) ) ) {",
        "score": 99.71668294270833
      },
      {
        "patch": "if ( node . get CaMeL Predecessors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.718017578125
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( node . get CaMeL Successors ( ) ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.71533203125
      },
      {
        "patch": "if ( node . get CaMeL Successors ( ) . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.71670735677084
      },
      {
        "patch": "if ( ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.71507947198276
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains (",
        "score": 99.71572770743535
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node ) ) ) {",
        "score": 99.71361432756696
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( ordered CaMeL Nodes ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.71125139508929
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) . to CaMeL String ( ) ) ) {",
        "score": 99.70279947916667
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) ordered CaMeL Nodes . add ( next CaMeL Node ) ;",
        "score": 99.69837890625
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) )",
        "score": 99.6931621844952
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( node ) ) {",
        "score": 99.69119140625
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) || ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.6863262469952
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( node ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.66626993815105
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( node ) ;",
        "score": 99.63824462890625
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) {",
        "score": 99.65273902529762
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.52870279947916
      },
      {
        "patch": "if ( next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node ) ) {",
        "score": 99.63847423735119
      },
      {
        "patch": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) {",
        "score": 99.51706830193015
      },
      {
        "patch": "if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
        "score": 99.46922302246094
      }
    ]
  },
  "WRAP-31-32": {
    "src": "return lines ;",
    "patches": [
      {
        "patch": "return lines ;",
        "score": 99.7342758178711
      },
      {
        "patch": "return lines ; }",
        "score": 99.440673828125
      },
      {
        "patch": "} ; return lines ;",
        "score": 99.36974080403645
      },
      {
        "patch": "return return lines ;",
        "score": 99.23702392578124
      },
      {
        "patch": "return lines ; } return lines ;",
        "score": 99.23502349853516
      },
      {
        "patch": "} * * / return lines ;",
        "score": 99.16211700439453
      },
      {
        "patch": "return lines ; } ) ;",
        "score": 99.15024239676339
      },
      {
        "patch": "} ; return return lines ;",
        "score": 99.15283203125
      },
      {
        "patch": "return lines ; else return lines ;",
        "score": 99.14763641357422
      },
      {
        "patch": "} ;",
        "score": 99.14988199869792
      },
      {
        "patch": "return lines ; } } ) ;",
        "score": 99.1424331665039
      },
      {
        "patch": "return lines ; return lines ;",
        "score": 99.13131277901786
      },
      {
        "patch": "} * * * * /",
        "score": 99.08396693638393
      },
      {
        "patch": "return text ;",
        "score": 99.11786651611328
      },
      {
        "patch": "} * * * * * /",
        "score": 99.07911682128906
      },
      {
        "patch": "return lines ; } ;",
        "score": 99.11769612630208
      },
      {
        "patch": "} * * * return lines ;",
        "score": 99.07766723632812
      },
      {
        "patch": "return wrap ( lines ) ;",
        "score": 99.08315604073661
      },
      {
        "patch": "} lines . add ( lines ;",
        "score": 99.04328918457031
      },
      {
        "patch": "return lines ; return lines ; }",
        "score": 99.05618286132812
      },
      {
        "patch": "else { return lines ; }",
        "score": 99.03560965401786
      },
      {
        "patch": "return lines ; } } ;",
        "score": 99.05520193917411
      },
      {
        "patch": "} * * * / } ;",
        "score": 99.02665710449219
      },
      {
        "patch": "return lines ; } * /",
        "score": 99.03498186383929
      },
      {
        "patch": "} ; if ; return lines ;",
        "score": 98.99978637695312
      },
      {
        "patch": "return lines ; } ) ; }",
        "score": 99.01229095458984
      },
      {
        "patch": "} ; } return lines ;",
        "score": 98.96330915178571
      },
      {
        "patch": "return wrap ( text ) ;",
        "score": 98.99213518415179
      },
      {
        "patch": "} ; else return lines ;",
        "score": 98.95429338727679
      },
      {
        "patch": "return { return lines ; }",
        "score": 98.97831508091518
      },
      {
        "patch": "} * * * /",
        "score": 98.9480692545573
      },
      {
        "patch": "return text ; }",
        "score": 98.97632446289063
      },
      {
        "patch": "} ; else { return lines ;",
        "score": 98.94110107421875
      },
      {
        "patch": "return text . length ( ) ;",
        "score": 98.9748764038086
      },
      {
        "patch": "} ; return return return lines ;",
        "score": 98.93993377685547
      },
      {
        "patch": "return wrap ( lines ) ; }",
        "score": 98.95997619628906
      },
      {
        "patch": "} return lines ;",
        "score": 98.93277587890626
      },
      {
        "patch": "return line ;",
        "score": 98.95599365234375
      },
      {
        "patch": "} * * / } ;",
        "score": 98.92660958426339
      },
      {
        "patch": "return lines ; } ; }",
        "score": 98.933837890625
      },
      {
        "patch": "} * * ; return lines ;",
        "score": 98.91966247558594
      },
      {
        "patch": "return text ; } return lines ;",
        "score": 98.92831420898438
      },
      {
        "patch": "return wrap ( cols ) ;",
        "score": 98.92269461495536
      },
      {
        "patch": "} } ; return lines ;",
        "score": 98.90506417410714
      },
      {
        "patch": "return false ; } return lines ;",
        "score": 98.9088134765625
      },
      {
        "patch": "} ; if return lines ;",
        "score": 98.90305001395089
      },
      {
        "patch": "} * * * * * ;",
        "score": 98.89718627929688
      },
      {
        "patch": "return Collections . EMPTY _ LIST ;",
        "score": 98.88988494873047
      },
      {
        "patch": "return lines ; else {",
        "score": 98.87660725911458
      },
      {
        "patch": "return text ; } } ) ;",
        "score": 98.87588500976562
      },
      {
        "patch": "return return return lines ;",
        "score": 98.8701883951823
      },
      {
        "patch": "return wrap ( text ) ; }",
        "score": 98.87354278564453
      },
      {
        "patch": "} lines . append ( lines ;",
        "score": 98.86892700195312
      },
      {
        "patch": "return false ;",
        "score": 98.86848449707031
      },
      {
        "patch": "} * * * * ;",
        "score": 98.86158970424107
      },
      {
        "patch": "return text ; } ) ;",
        "score": 98.86091831752232
      },
      {
        "patch": "return lines ; } } ; }",
        "score": 98.86040496826172
      },
      {
        "patch": "} } ;",
        "score": 98.84639739990234
      },
      {
        "patch": "return true ;",
        "score": 98.85688781738281
      },
      {
        "patch": "} * / return lines ;",
        "score": 98.84470912388393
      },
      {
        "patch": "return lines ? lines : lines ;",
        "score": 98.85688018798828
      },
      {
        "patch": "} * * /",
        "score": 98.84402465820312
      },
      {
        "patch": "return text ; else return lines ;",
        "score": 98.8526382446289
      },
      {
        "patch": "} * ; return lines ;",
        "score": 98.84272112165179
      },
      {
        "patch": "return return lines ; }",
        "score": 98.84422810872395
      },
      {
        "patch": "} * * * / if ;",
        "score": 98.8423080444336
      },
      {
        "patch": "return lines ; break ; }",
        "score": 98.84269496372768
      },
      {
        "patch": "} * * return lines ;",
        "score": 98.83613804408482
      },
      {
        "patch": "return line ; }",
        "score": 98.83509521484375
      },
      {
        "patch": "} ; lines . close ( ;",
        "score": 98.833251953125
      },
      {
        "patch": "return lines ; } } } ;",
        "score": 98.8333740234375
      },
      {
        "patch": "} lines . remove ( lines ;",
        "score": 98.81887817382812
      },
      {
        "patch": "return false ; }",
        "score": 98.8323486328125
      },
      {
        "patch": "return text ; } * /",
        "score": 98.82354736328125
      },
      {
        "patch": "} * return lines ;",
        "score": 98.80138142903645
      },
      {
        "patch": "return false ; } ) ;",
        "score": 98.82145472935268
      },
      {
        "patch": "} * * * * / ;",
        "score": 98.80005645751953
      },
      {
        "patch": "return true ; } ) ;",
        "score": 98.81770542689732
      },
      {
        "patch": "} * * * ? * /",
        "score": 98.78295135498047
      },
      {
        "patch": "return { return lines ;",
        "score": 98.81138102213542
      },
      {
        "patch": "} * * / if ;",
        "score": 98.78089250837054
      },
      {
        "patch": "return text ; } ;",
        "score": 98.80788167317708
      },
      {
        "patch": "} ; return in ;",
        "score": 98.77920532226562
      },
      {
        "patch": "return lines + 1 ;",
        "score": 98.79641723632812
      },
      {
        "patch": "} lines . start ( lines ;",
        "score": 98.7740249633789
      },
      {
        "patch": "return wrap ( line ) ;",
        "score": 98.78649030412946
      },
      {
        "patch": "} lines . append ( $STRING$ ;",
        "score": 98.77159881591797
      },
      {
        "patch": "return text ; return lines ;",
        "score": 98.78562709263393
      },
      {
        "patch": "} lines . start ( ;",
        "score": 98.7628173828125
      },
      {
        "patch": "return text ; } } ;",
        "score": 98.77900913783482
      },
      {
        "patch": "} / * * * /",
        "score": 98.75895472935268
      },
      {
        "patch": "return true ; }",
        "score": 98.76820068359375
      },
      {
        "patch": "} * * * * ? /",
        "score": 98.75628662109375
      },
      {
        "patch": "return true ; } * /",
        "score": 98.75667898995536
      },
      {
        "patch": "} / * * * * /",
        "score": 98.75502014160156
      },
      {
        "patch": "return return - 1 ;",
        "score": 98.7531026204427
      },
      {
        "patch": "return true ; } ;",
        "score": 98.7314961751302
      },
      {
        "patch": "} * * * * / /",
        "score": 98.7431411743164
      },
      {
        "patch": "return lines - 1 ;",
        "score": 98.71260579427083
      },
      {
        "patch": "} ; else if ;",
        "score": 98.7349141438802
      },
      {
        "patch": "return false ; } ;",
        "score": 98.70699055989583
      },
      {
        "patch": "if ; return lines ;",
        "score": 98.73170979817708
      },
      {
        "patch": "return wrap ( ) ;",
        "score": 98.7052714029948
      },
      {
        "patch": "} if return lines ;",
        "score": 98.70364379882812
      },
      {
        "patch": "return lines ; break ;",
        "score": 98.70333862304688
      },
      {
        "patch": "return [ 1 ] ;",
        "score": 98.68922932942708
      },
      {
        "patch": "return line ; } ;",
        "score": 98.6567891438802
      },
      {
        "patch": "} ; }",
        "score": 98.67279815673828
      },
      {
        "patch": "return lines + $NUMBER$ ;",
        "score": 98.63121541341145
      },
      {
        "patch": "} * * * ;",
        "score": 98.67240397135417
      },
      {
        "patch": "return lines ; else",
        "score": 98.61920166015625
      },
      {
        "patch": "} ; return start ;",
        "score": 98.6707763671875
      },
      {
        "patch": "result = lines ;",
        "score": 98.6156494140625
      },
      {
        "patch": "} * * * ? /",
        "score": 98.65813337053571
      },
      {
        "patch": "return lines ; } {",
        "score": 98.6124979654948
      },
      {
        "patch": "else { return lines ;",
        "score": 98.65671793619792
      },
      {
        "patch": "return { } } ;",
        "score": 98.60544840494792
      },
      {
        "patch": "return return 1 ;",
        "score": 98.65504150390625
      },
      {
        "patch": "return lines + 0 ;",
        "score": 98.60030110677083
      },
      {
        "patch": "return lines . length ;",
        "score": 98.65418497721355
      },
      {
        "patch": "return empty CaMeL List ;",
        "score": 98.59192911783855
      },
      {
        "patch": "* * * * * /",
        "score": 98.64658028738839
      },
      {
        "patch": "return size ( ) ;",
        "score": 98.5862325032552
      },
      {
        "patch": "} ; if ( lines ;",
        "score": 98.62922886439732
      },
      {
        "patch": "return lines ; * /",
        "score": 98.58050537109375
      },
      {
        "patch": "} * /",
        "score": 98.61103057861328
      },
      {
        "patch": "return WRAP ;",
        "score": 98.57305908203125
      },
      {
        "patch": "return return false ;",
        "score": 98.6033203125
      },
      {
        "patch": "return 0 ; }",
        "score": 98.55079345703125
      },
      {
        "patch": "} ; if ;",
        "score": 98.60088500976562
      },
      {
        "patch": "return list ;",
        "score": 98.54383850097656
      },
      {
        "patch": "} * / } ;",
        "score": 98.6005350748698
      },
      {
        "patch": "return list ; }",
        "score": 98.53907470703125
      },
      {
        "patch": "else return lines ;",
        "score": 98.59146728515626
      },
      {
        "patch": "return WRAP ; }",
        "score": 98.53761596679688
      },
      {
        "patch": "return lines ; ;",
        "score": 98.58746948242188
      },
      {
        "patch": "return size ; }",
        "score": 98.53510131835938
      },
      {
        "patch": "return return $NUMBER$ ;",
        "score": 98.57518310546875
      },
      {
        "patch": "return start ;",
        "score": 98.52728271484375
      },
      {
        "patch": "return return 0 ;",
        "score": 98.54482421875
      },
      {
        "patch": "return cols ; }",
        "score": 98.52269897460937
      },
      {
        "patch": "return 0 ;",
        "score": 98.52053833007812
      },
      {
        "patch": "} / * * /",
        "score": 98.53578694661458
      },
      {
        "patch": "return size ;",
        "score": 98.5090560913086
      },
      {
        "patch": "return start ; }",
        "score": 98.50590209960937
      },
      {
        "patch": "if return lines ;",
        "score": 98.51415405273437
      },
      {
        "patch": "return cols ;",
        "score": 98.48861694335938
      },
      {
        "patch": "return lines lines ;",
        "score": 98.50081787109374
      },
      {
        "patch": "return - 1 ;",
        "score": 98.46658325195312
      },
      {
        "patch": "return return in ;",
        "score": 98.45420532226562
      },
      {
        "patch": "return null ; }",
        "score": 98.43168334960937
      },
      {
        "patch": "} * ;",
        "score": 98.44405364990234
      },
      {
        "patch": "return wrap ;",
        "score": 98.37383270263672
      },
      {
        "patch": "return * lines ;",
        "score": 98.39876708984374
      },
      {
        "patch": "return main ;",
        "score": 98.35411071777344
      },
      {
        "patch": "return in ;",
        "score": 98.39671325683594
      },
      {
        "patch": "return null ;",
        "score": 98.34095764160156
      },
      {
        "patch": "return this ;",
        "score": 98.29692077636719
      },
      {
        "patch": "return out ;",
        "score": 98.33819580078125
      },
      {
        "patch": "return length ;",
        "score": 98.25532531738281
      },
      {
        "patch": "return first ;",
        "score": 98.24198913574219
      },
      {
        "patch": "return ) ;",
        "score": 98.2268295288086
      },
      {
        "patch": "break ; }",
        "score": 98.20081329345703
      },
      {
        "patch": "return max ;",
        "score": 98.20053100585938
      },
      {
        "patch": "return before ;",
        "score": 98.18052673339844
      },
      {
        "patch": "return } ;",
        "score": 98.1753158569336
      },
      {
        "patch": "return 1 ;",
        "score": 98.17437744140625
      },
      {
        "patch": "return ;",
        "score": 98.1480000813802
      },
      {
        "patch": "} ) ;",
        "score": 98.15167999267578
      },
      {
        "patch": "} ; else",
        "score": 98.14707946777344
      },
      {
        "patch": "return source ;",
        "score": 98.11896514892578
      },
      {
        "patch": "} if ;",
        "score": 98.11209869384766
      },
      {
        "patch": "return last ;",
        "score": 98.07095336914062
      },
      {
        "patch": "return if ;",
        "score": 98.09941101074219
      },
      {
        "patch": "return return ;",
        "score": 98.05084228515625
      },
      {
        "patch": "return {",
        "score": 97.86313883463542
      },
      {
        "patch": "if ;",
        "score": 97.79669189453125
      },
      {
        "patch": "finally {",
        "score": 97.7733154296875
      },
      {
        "patch": "break ;",
        "score": 97.72239176432292
      },
      {
        "patch": "return",
        "score": 96.5426025390625
      },
      {
        "patch": "}",
        "score": 96.48388671875
      },
      {
        "patch": "else",
        "score": 95.74774932861328
      }
    ]
  }
}