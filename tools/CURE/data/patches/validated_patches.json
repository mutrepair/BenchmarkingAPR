{
  "BITCOUNT-15-16": {
    "src": "n = ( n ^ ( n - 1 ) ) ;",
    "patches": [
      {
        "patch": "n =( n ^( n -1) ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "n =( n ^( n -1) ) ; count ++ ;",
        "correctness": "timeout"
      },
      {
        "patch": "n =( n ^( n ^( n -1) ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "n = n ^( n -1) ;",
        "correctness": "timeout"
      },
      {
        "patch": "n =( n -1) ^( n -1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "n = n ^( n -1) ; count ++ ;",
        "correctness": "timeout"
      },
      {
        "patch": "n = n ^( n ^( n -1) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "n =( n ^( n -1) ) -1;",
        "correctness": "timeout"
      },
      {
        "patch": "n =( n ^( n -1) ) ; count -- ;",
        "correctness": "timeout"
      },
      {
        "patch": "n =( int )( n ^( n -1) ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "n =( n &( n -1) ) ; count ++ ;",
        "correctness": "wrong"
      },
      {
        "patch": "n =( n ^( n +1) ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "n = n ^( n -1) ; } return count ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "n =( n ^(( n -1) -1) ) ;",
        "correctness": "timeout"
      }
    ]
  },
  "BREADTH_FIRST_SEARCH-24-25": {
    "src": "while ( true ) {",
    "patches": [
      {
        "patch": "while( true ) { Node node = queue.removeFirst( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { while( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( false ) { Node node = queue.removeFirst( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { if( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { Node node = queue.getFirst( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { while( ! true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : queue.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { while( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { int node = queue.removeFirst( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { if( ! true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { Node node = queue.removeLast( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { while( ! true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { node = queue.removeFirst( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} while( true ) { while( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { Node node = node.removeFirst( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { while( true ) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "Vector < Node > queue = new ArrayDeque < Node >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { return false ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { Object node = queue.removeFirst( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} while( true ) { if( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "Vector < Node > queue = new ArrayDeque < >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { return true ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { nodesvisited.add( startnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( true ) { while( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : startnode.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { if( true ) { }",
        "correctness": "wrong"
      },
      {
        "patch": "for( Node node : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( ! true ) { while( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : queue.removeFirst( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { while( true ) { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node startnode : queue.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { return true ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { Node startnode = goalnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { while( true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( queue ) { nodesvisited.add( startnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { while( ! true )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( ! ! nodesvisited.contains( startnode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { { while( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { Node node = queue.remove( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { synchronized( ! true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( queue ) { queue.addLast( startnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { return false ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( goalnode == goalnode ) { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { synchronized( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( true ) { while( false ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( goalnode == goalnode ) { return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( ! true ) { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( ! nodesvisited.contains( startnode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { Node startnode = startnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { while( false ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( startnode == goalnode ) { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { if( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( nodesvisited ) { while( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { if( true ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( nodesvisited.contains( startnode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { while( ! true )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( startnode == goalnode ) { return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { if( ! true )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { Node goalnode = goalnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( true ) { return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( nodesvisited.contains( startnode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} while( true ) { while( true )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { return true ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { Node node = startnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { while( true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { for( Node node : queue ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { return false ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( goalnode == goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { return while( true )",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { for( Node node : queue.getSuccessors( ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( ! true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( goalnode == goalnode ) { return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { Node node = goalnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( ! true ) { while( true )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node = queue.removeFirst( ) ; node",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { return true ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( ! nodesvisited.contains( startnode ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( queue ) { while( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { return false ; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( goalnode == goalnode ) { return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { while( true ) ?",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( ! nodesvisited.contains( goalnode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { return true ; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { while( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( startnode == goalnode ) { return true ; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( startnode == goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true || true ) {",
        "correctness": "wrong"
      },
      {
        "patch": "synchronized( startnode ) { while( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { if( goalnode == goalnode )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { / */",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { Node node = queue.removeFirst( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { nodesvisited.add( startnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} while( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! nodesvisited.contains( startnode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) nodesvisited.add( startnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { while( true )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nodesvisited.contains( goalnode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { / **/",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( nodesvisited.contains( startnode ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true && true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : queue.getSuccessors( ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { / / */",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( queue.breadth_first_search( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { return true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { Iterator < Node > node = queue.",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( ! true || true ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( nodesvisited.contains( startnode ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( ! true && true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true || true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( ! queue.contains( startnode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true && true ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( startnode != goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "/ **while( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : queue ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} while( ! true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return nodesvisited.contains( startnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { return false ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( goalnode == goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { try {",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { queue.addLast( startnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} while( true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( queue.equals( startnode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( nodesvisited ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "/ *while( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( startnode != null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node startnode : queue ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} { if( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( false ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { if( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { Iterator < Node >",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( ! true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return while( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nodesvisited ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( startnode != null )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( ! true )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : queue )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} while( true )",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( startnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( queue ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return nodesvisited ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( false )",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( startnode",
        "correctness": "uncompilable"
      },
      {
        "patch": "break ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Iterator < Node >",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return queue ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "assert true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "try {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return while )",
        "correctness": "uncompilable"
      },
      {
        "patch": "} {",
        "correctness": "uncompilable"
      },
      {
        "patch": "break {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for(",
        "correctness": "uncompilable"
      },
      {
        "patch": "*/",
        "correctness": "uncompilable"
      },
      {
        "patch": "finally {",
        "correctness": "uncompilable"
      },
      {
        "patch": "}",
        "correctness": "uncompilable"
      },
      {
        "patch": "/ *",
        "correctness": "uncompilable"
      },
      {
        "patch": "do",
        "correctness": "uncompilable"
      },
      {
        "patch": "{",
        "correctness": "uncompilable"
      }
    ]
  },
  "BUCKETSORT-22-23": {
    "src": "for ( Integer count : arr ) {",
    "patches": [
      {
        "patch": "for( Integer count : arr ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer count : arr ) { for( Integer count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { for( Integer i : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "int i =0; for( Integer count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { for( int i : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) for( Integer count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer i : arr ) { for( Integer i : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { counts.add( i ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer i : arr ) { for( Integer count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "int count =0; for( Integer count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0; i < arr.length ; i ++ )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0; i <100; i ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { counts.add( count ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "for( int i : arr ) { for( Integer count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0; i < count ; i ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { for( int count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0; i < arr.length ; i {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int count : arr ) { for( Integer count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer i : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i : arr ) { for( Integer i : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { for( Integer count : arr )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0; i <0; i ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { if( count >0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int count : arr ) { for( Integer i : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { int i =0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer i : arr ) { for( int i : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { int count =0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { for( Integer i :0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { for( Integer count :0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0; i < arr.length ; i )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer counts : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr != null ) { for( Integer count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) counts.add( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { for( String count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0; i < arr.size( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer i : arr ) { for( int count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for < arr.size( ) ; i ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) for( Integer count : arr )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i : arr ) { for( int i : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { / */",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { for( Integer arr : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : sorted_arr ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( int i =0; i < arr.length { i ++ )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int count : arr ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( int i : arr ) { for( int count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0; i < arr.] ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr != null ) { for( Integer i : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) >0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int count : arr ) { for( int i : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0; i <100; i ++ )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer i : arr ) { for( Integer i :0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Iterator < Integer > count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0{ i < arr.length ; i ++ )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0; i < count ; i ++ )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) counts.add( count ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { for( Integer i : arr )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Long count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( Collections.nCopies( count , i ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0; i < arr ) break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0; i < arr.length ; i",
        "correctness": "uncompilable"
      },
      {
        "patch": "for < arr.length ; i ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr.iterator( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { / *",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { for( Integer i :0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count ] : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { for( int i =0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( sorted_arr.size( ) >0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr.size( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count > count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { for( int i = count )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer < Integer > count : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { for( int i : arr )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count :100) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0; i <0; i ++ )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count -1: arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer i : arr ) { for( Integer i : arr )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( counts.size( ) >0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { for( int i = i )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer k : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i : arr ) { for( Integer count : arr )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) { / *}",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer1: arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer i : arr ) { for( Integer count : arr )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count >=0; i ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( final Integer count : arr ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer count : arr ) { for( int i :0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) >1) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer i : arr ) { for( Integer i :0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i : arr ) { for( Integer i : arr )",
        "correctness": "uncompilable"
      },
      {
        "patch": "Iterator < Integer > count = arr.iterator( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer count : arr [ i ] ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int i =0; i < arr.size( ) {",
        "correctness": "uncompilable"
      }
    ]
  },
  "DEPTH_FIRST_SEARCH-22-23": {
    "src": "for ( Node successornodes : node . get CaMeL Successors ( ) ) {",
    "patches": [
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { if( search( node ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node != null ) { for( Node node : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : getSuccessors( ) ) { if( search( successornodes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node < Node > successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return true ; } else if( node == goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node < Node > node > successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return false ; } else if( node == goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { return true ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : node.getSuccessors( ) ) { if( node == goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { return true ; } } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : node.getSuccessors( ) ) { if( search( node ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( node ) { for( Node successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : list ) { if( search( successornodes ) ) { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { return false ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.size( ) ) { if( search( successornodes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node < Node < Node > successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { if( search( Node ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( this ) { for( Node successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : node.getSuccessors( ) ) { if( search( successornodes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return true ; } } else if( node == goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { return false ; } } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { if( search( null ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Iterator < Node > successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : list ) { if( search( successornodes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node [ ] successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return true ; } else { return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "Node successornodes : for( Node successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { if( search( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { for( Node ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { boolean search( successornodes ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { return null ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return true ; } else { return false ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) return true ; } } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Object node : node.getSuccessors( ) ) { if( node == goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node != null && node.getSuccessors( ).size( ) >0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : list ) { if( search( successornodes ) ) { return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : nodesvisited ) { if( node == goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( List < Node > successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { String search( successornodes ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) return true ; } } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : nodesvisited ) { if( node == goalnode ) { return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { return null ; } } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors(0) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : nodesvisited ) { if( node == goalnode ) { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { return true ; } } {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Object successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { if( true ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { for( Node successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return true ; } else { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "/ *for( Node successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { if( search( successornodes )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node < Object > successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return true ; } else if( node == goalnode )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors(1) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { if( search( successornodes ,",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getClasses( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { if( false ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) return false ; } } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "ArrayList < Node > nodesvisited = new HashSet < Node >( ) ; class Search {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) return true ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { if( search( node ) )",
        "correctness": "timeout"
      },
      {
        "patch": "for( Node successornodes : getSuccessors( ) ) { if( search( successornodes ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) return true ; } } {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { if( node == goalnode )",
        "correctness": "wrong"
      },
      {
        "patch": "for( Node < ? > successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { if( search( successornodes",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node [ ] node : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return false ; } else if( node == goalnode )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node < Node > node : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "ArrayList < Node > nodesvisited = new HashSet < >( ) ; class Search {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( final Node successornodes : node.getSuccessors( ) ) {",
        "correctness": "timeout"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "ArrayList < Node > nodesvisited = new HashSet < Node >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Iterator < Node > : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : node.getSuccessors( ) ) { if( node == goalnode )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( true ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return true ; } else { return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) return false ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( this ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "ArrayList < Node > nodesvisited = new HashSet < >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getComparator( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes < Node > successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node element : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes.Node successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes ] : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { if( search( Node.",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes [ ] : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : new HashSet < Node >( ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( Iterator successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "List < Node > nodesvisited = new HashSet < Node >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : list.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "HashSet < Node > nodesvisited = new HashSet < Node >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( String successornodes : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes > node : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getParent( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { return true {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node != null && node.getSuccessors( ) != null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( startnode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.get.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) return true ; } } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "List < Node > nodesvisited = new HashSet < >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : this.node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return true ; } else { return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( false ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes( node ) : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "Vector < Node > nodesvisited = new HashSet < Node >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return false ; } else { return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node != null && node.getSuccessors( ).length >0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) continue ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return true ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) break ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { return false {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node startnode : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) return true {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) continue ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : nodesvisited.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) return null ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes -- : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { try {",
        "correctness": "uncompilable"
      },
      {
        "patch": "Vector < Node > nodesvisited = new HashSet < >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node < Node > successornodes : node.getSuccessors( ) ) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return false ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors( ) ) { ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nodesvisited.contains( node ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node ! node.getSuccessors( ).equals( node ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : this.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node parent : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : map.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "final Node successornodes : node.getSuccessors( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node != null && node.getSuccessors( ) == null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nodesvisited.contains( node ) ) { return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getPrefix( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.size( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node first : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return true ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes = node.getSuccessors( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Object node : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node.getSuccessors( ) != null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "Node successornodes : node.getSuccessors( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node.getSuccessors(",
        "correctness": "uncompilable"
      },
      {
        "patch": "Node successornodes = node.getSuccessors( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node != goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node.getSuccessors( ) == null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( nodesvisited.contains( node ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node != null ) { return false ; } } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode ) { return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( successornodes.equals( node ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : nodesvisited ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node != null ) { return false ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : node.getSuccessors( ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : list ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "list = new HashSet < Node >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = node.getSuccessors( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node != null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( node == goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node node : successornodes ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : keys ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( node == goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Node successornodes : node ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node != goalnode ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( successornodes != null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == goalnode )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node instanceof Node ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( node != null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Iterator < Node >",
        "correctness": "uncompilable"
      }
    ]
  },
  "DETECT_CYCLE-18-19": {
    "src": "if ( hare . get CaMeL Successor ( ) == null )",
    "patches": [
      {
        "patch": "if( hare.getSuccessor( ) == null )",
        "correctness": "wrong"
      },
      {
        "patch": "if( hare.getSuccessor( ) == null ) return false ; tortoise = node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare.getSuccessor( ) == null ) { return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare != null && hare.getSuccessor( ) == null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare.getSuccessor( ) != null )",
        "correctness": "wrong"
      },
      {
        "patch": "if( hare.getSuccessor( ) == null ) return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare.getSuccessor( ) == null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { if( hare.getSuccessor( ) == null ) return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare.getSuccessor( ).getSuccessor( ) == null )",
        "correctness": "wrong"
      },
      {
        "patch": "if( true ) return false ; tortoise = tortoise.getSuccessor( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare != null || hare.getSuccessor( ) == null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare.getSuccessor( ).getSuccessor( ) == null ) return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare != null && hare.getSuccessor( ) == null )",
        "correctness": "wrong"
      },
      {
        "patch": "if( hare == tortoise ) return false ; tortoise = node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( true ) { if( hare.getSuccessor( ) == null )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare == null && hare.getSuccessor( ) == null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare.getSuccessor( ) == null ) return false ; tortoise = true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare.getSuccessor( ) == null ) { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare.getSuccessor( ) == null ) return false ; return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare != null || hare.getSuccessor( ) == null )",
        "correctness": "wrong"
      },
      {
        "patch": "if( hare.getSuccessor( ) != null ) return false ; tortoise = node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare == null && hare.getSuccessor( ) == null )",
        "correctness": "wrong"
      },
      {
        "patch": "if( hare != null ) { if( hare.getSuccessor( ) == null )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare.getSuccessor( ) == -1)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare.getSuccessor( ) == null ) return false ; tortoise = null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare.getSuccessor( ) != null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( hare != null ) { tortoise = tortoise.getSuccessor( ) ;",
        "correctness": "uncompilable"
      }
    ]
  },
  "FIND_FIRST_IN_SORTED-19-20": {
    "src": "while ( lo <= hi ) {",
    "patches": [
      {
        "patch": "while( lo <= hi ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( lo <= hi ) { while( lo <= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo < hi ) { while( lo <= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while(( lo <= hi ) ||( lo == hi ) ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( lo <= hi ) { while( lo >= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "int hi = arr.length ; while( lo <= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo >= hi ) { while( lo <= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi ) { while( lo < hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while(( lo <= hi ) ||( lo ==0) ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( lo < hi ) { while( lo >= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while(( lo <= hi ) &&( lo == hi ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( lo <= hi ) { while( lo > hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo >= hi ) { while( lo >= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi ) { if( lo <= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo < hi ) { while( lo < hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while(( lo <= hi ) ||( lo == hi ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo >= hi ) { while( lo < hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "int lo = arr.length ; while( lo <= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi ) { while( hi <= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi ) { if( lo == hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo < hi ) { while( lo > hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi ) { while( lo <= hi )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi ) { int lo = lo + hi ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi ) { while( lo == hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo == hi ) { while( lo <= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi &&( lo <= hi ) ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( lo >=0) { while( lo <= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo == arr [ hi -1] ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( hi <= hi ) { while( lo <= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while(( lo <= hi ) ||( lo ==0) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo < hi ) { while( hi <= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while(( lo <= hi ) &&( lo == hi ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo != hi ) { while( lo <= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi ) { int hi = arr.length ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo >= hi ) { while( lo > hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while(( lo <= hi ) ||( lo <= hi ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo >= hi ) { while( hi <= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi ) { int lo = arr.length ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi &&( lo == hi ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( lo <= hi ) { while( hi >= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi &&( lo ==0) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( lo == hi ) { while( lo >= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( lo <= hi ) { int hi = arr.length ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo > hi ) { while( lo <= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "int hi = arr.length ; while( lo < hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo >=0) { while( lo >= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( lo <= hi ) { int lo = arr.length ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo >=0) { while( lo < hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "int hi = arr.length ; while( lo == hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi ) { if( lo >= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi ) { if( lo <= hi )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi ) { while( hi < hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while(( lo <= hi ) &&( lo ==0) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( hi <= hi ) { while( lo >= hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi ) { int hi = lo + hi ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi ) { while( lo <=0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo == arr [ lo -1] ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( lo >= hi ) { while( lo == hi ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( lo <= hi && lo <= hi ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( lo < hi ) { while( lo == hi ) {",
        "correctness": "uncompilable"
      }
    ]
  },
  "FIND_IN_SORTED-20-21": {
    "src": "return binsearch ( arr , x , mid , end ) ;",
    "patches": [
      {
        "patch": "return binsearch( arr , x , mid , end ) ; } else { return mid ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x ,0, arr.length ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x , mid , end , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end - arr [ mid ] ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , end , end ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return arr [ mid ] ; } else if( x > arr [ mid ] ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , end , end , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end ) ; } else return mid ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , mid ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , start , mid ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , mid , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , start , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , start , mid , end ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( new int [ ] { x , start , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end - end ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return mid ; } else if( x > arr [ mid ] ) { return mid ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , mid , start , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , arr.length ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x , mid ,1) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x , mid ) ; } else { return mid ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , mid , mid , end ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "synchronized( arr ) { return binsearch( arr , x , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , start , end , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , start , mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end - start ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , start , end ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x , mid , end ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , mid , end , end ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , mid , end - start ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , start , mid , end ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x ,0, arr.length , x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end ,2) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end ) ; } return mid ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , end , mid ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x ,0, arr.length ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , end , end ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x ,0, arr [ mid ] ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x , mid , end -1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x ,0, arr.length ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , x , end , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end , end ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr ,0, mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end - arr.length ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , start , mid , end , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return mid ; } else if( x > arr [ mid ] ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , mid , mid , end , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end , false ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr ,0, mid , end ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return( int ) binsearch( arr , x , mid , end ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr ,0, mid , end , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( this , arr , x , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "{ return binsearch( arr , x , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x ,1, arr.length ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , mid , end , end , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end , arr.length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , x , end ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( this , arr , x , mid , end ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end , mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , arr [ mid ] ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x , mid , length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "{ return binsearch( arr , x , mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x ,0, arr.length - start ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x , mid ,2) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x ,0, arr.length - x ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x , mid , end - mid ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , mid , arr.length , x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x ,0, arr.length , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , end , end ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , end , end - end ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , start , mid ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid ,1, end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end ) ; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end , true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end - x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , mid , mid ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return -1; } else if( x > arr [ mid ] ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , length , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end +1) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x , end , end ,2) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end , -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , end , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , start , mid , end ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , end ,1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr ,0, arr.length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end ) ; } */",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , end , start , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( binsearch( arr , x , mid , end ) ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , start , end , end ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = binsearch( arr , x , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , end , end , end ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , mid ) ; } else { return mid ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , mid , mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x ,0, arr.length -1) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x , x , mid ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( this , arr , x ,0, arr.length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , max ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , start , mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end +2) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x ,0, arr.length +1) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x , length , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return arr [ mid ] ; } else if( x > arr [ mid ] )",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , end , mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , start , mid , end - start ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid ,0) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x , start , mid , arr.length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr ,0, end , end ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "{ return binsearch( arr , x , end , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , start , mid ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr ,1, mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , start ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , mid , arr.length ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr ,1, mid , end ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , x , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , end , mid , end ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , [ x ] , mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , - start ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , end ,2) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( name , arr , x , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x ,0, end ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return binsearch( arr , x , mid , end *2) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , length , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch(0, arr , x , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x ,1, end ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return true ; } else if( x > arr [ mid ] ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , max , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , end , end ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , start , mid , mid ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , mid , end true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , start , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end -2) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , length , end , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "ret = binsearch( arr , x , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = binsearch( arr , x , mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , start , mid ,1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , length , mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return arr [ mid ] ; } else { return mid ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return return binsearch( arr , x , mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , - end ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return binsearch( arr , x , max ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr ,1, arr.length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid , end ) ; ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( name , x , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , end , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return arr [ mid ] ; } else { return mid ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "int mid = start +( end - start ) /2;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid ) ; ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr [ mid ] < arr [ mid ] ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return read( arr , x , mid , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x > arr [ mid ] ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "throw binsearch( arr , x , mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr ,0, end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return mid ; } else { return mid ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , mid ,",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr ,2, mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return mid ; } else { return mid ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x , x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( x , x , mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x < arr [ mid ] ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return arr [ mid ] ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , mid ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return binsearch( arr , x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( arr [ mid ] ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( arr [ mid ] ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return arr [ arr [ x ] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return arr [ mid ] ;",
        "correctness": "wrong"
      },
      {
        "patch": "return arr [ x ] ;",
        "correctness": "wrong"
      },
      {
        "patch": "return mid ;",
        "correctness": "wrong"
      },
      {
        "patch": "return end ;",
        "correctness": "wrong"
      }
    ]
  },
  "FLATTEN-21-27": {
    "src": "result . add ( flatten ( x ) ) ; } } return result ; } else { return flatten ( arr ) ; }",
    "patches": [
      {
        "patch": "if( x instanceof ArrayList ) { result.add( flatten( x ) ) ; } else { result.add( flatten( x ) ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.add( flatten( x ) ) ; } } else { return flatten( x ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x instanceof ArrayList ) { result.add( flatten( x , x ) ) ; } else { result.add( flatten( x ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.add( flatten( x ) ) ; } } else { result.add( flatten( x ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x instanceof ArrayList ) { result.add( flatten( x ) ) ; } else { result.add( flatten( x ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.addAll( flatten( x ) ) ; } } else { return flatten( x ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x instanceof ArrayList ) { result.add( flatten( x ) ) ; } else { result.add( flatten( x ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.add( flatten( x ) ) ; } } else { result.add( flatten( x ) ) ; } } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( flatten( x ) ) { result.add( flatten( x ) ) ; } else { result.add( flatten( x ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.add( flatten( x ) ) ; } else { result.add( flatten( x ) ) ; } } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x instanceof ArrayList ) { result.add( flatten( x ) ) ; } else { result.add( flatten( x , x ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.add( flatten( x ) ) ; } } else { result.add( flatten( x ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x instanceof ArrayList ) { result.addAll( flatten( x ) ) ; } else { result.add( flatten( x ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.add( flatten( x ) ) ; } } else { result.add( flatten( x ) ) ; } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x instanceof ArrayList ) { result.add( flatten( x ) ) ; } } else { result.add( flatten( x ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.add( flatten( x ) ) ; } } return result ; } else { return flatten( arr ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( flatten( x ) ) { result.addAll( flatten( x ) ) ; } else { result.add( flatten( x ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.add( flatten( x ) ) ; } } return result ; } else { return flatten( x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x instanceof ArrayList ) { result.add( flatten( x , arr ) ) ; } else { result.add( flatten( x ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.addAll( flatten( x ) ) ; } } else { result.add( flatten( x ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x instanceof ArrayList ) {  return( ArrayList ) flatten( x ) ; } else { result.add( flatten( x ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.addAll( flatten( x ) ) ; } } else { result.add( flatten( x ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x instanceof ArrayList ) { result.add( flatten( x ) ) ; } else { result.add( flatten( x , arr ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.add( flatten( x ) ) ; } else { result.add( flatten( x ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x instanceof ArrayList ) { result.add( flatten( x ) ) ; } else { result.addAll( flatten( x ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.add( flatten( x ) ) ; } else { result.add( flatten( x ) ) ; } } } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( flatten( x ) ) { result.add( flatten( x ) ) ; } else { result.add( flatten( x ) ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.addAll( flatten( x ) ) ; } } return result ; } else { return flatten( arr ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x instanceof ArrayList ) { result.add( flatten( x ) ) ; } else { result.add( new flatten( x ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.addAll( flatten( x ) ) ; } } return result ; } else { return flatten( x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x instanceof ArrayList ) { result.add( flatten( x , result ) ) ; } else { result.add( flatten( x ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.add( flatten( x ) ) ; } } else { return flatten( arr ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr instanceof ArrayList ) { result.add( flatten( x ) ) ; } else { result.add( flatten( x ) ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.addAll( flatten( x ) ) ; } } else { return flatten( arr ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x instanceof HashSet ) { result.add( flatten( x ) ) ; } else { result.add( flatten( x ) ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result.add( flatten( x ) ) ; } return result ; } else { return flatten( x ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x instanceof ArrayList ) { result.add( flatten( x ) ) ; } else { result.add( flatten( arr ) ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x != null ) { result.add( flatten( x ) ) ; } } else { return flatten( x ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( flatten( x ) ) { result.add( flatten( x ) ) ; } else { result.add( flatten( x ) ) ;",
        "correctness": "uncompilable"
      }
    ]
  },
  "GCD-19-20": {
    "src": "return gcd ( a % b , b ) ;",
    "patches": [
      {
        "patch": "return gcd( a % b , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a % b , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b , b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a ,0, b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b , b ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a , b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( b , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a % b % b , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a , a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b , b ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a ,1, b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a - b , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( b , b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a , b , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( b % b , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( b % b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a - b , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd(0, b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a % b % b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a , b ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b , b ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a + b , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd(0,0, b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b , b -1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return gcd( a %0, b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return gcd(0, b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( b % b , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( b ,0, b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a %1, b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd(0, a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a ,0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return gcd( a % b , b % b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return gcd(0% b , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a + b , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a , b ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b , b , a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a , b , false ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b % b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a ,0% b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return gcd( a % a , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return gcd( a % a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b , a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a - b , b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b ,0, b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a , b , null ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd(( int ) b , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a ,0, a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a , b ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a , a ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a %1, b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a , b % b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return gcd(( int ) a , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a ,0,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a *b , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a % a , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a ,0, b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a *b , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b , b , ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a ,0,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a >> b , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a >> b , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a , b , a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a / b , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd(0% b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( b , b , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd(( int ) a % b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b ,0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return gcd( b , a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( gcd( a , b ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a , a , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b ,1) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a / b , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % b ,0) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd(0%0, b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return gcd( a +0, b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return( gcd( a % b ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a + b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( gcd( a % b ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a , b , ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a %0, b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a ,1) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a , a ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( b , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a *gcd( b , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a % b , a ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return( a >0) ? b :0;",
        "correctness": "wrong"
      },
      {
        "patch": "return gcd( a & b , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd(0, a ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return gcd( a % b , -1) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( b % b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a ] % b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd(0% b , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a & b , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd(( int ) b % b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a +0+ b ;",
        "correctness": "wrong"
      },
      {
        "patch": "return gcd( b % b % b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % a % b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a % a ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( b , a ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return gcd( a ] , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd(0,0, b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a > b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a ,1, b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd(0, b , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a - b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a > b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( b ,0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return gcd(( int ) b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a %0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd(0, b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( b % a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return gcd( a - b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a + b + b ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a + a + b ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a % b ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a *b ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a *0+ b ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a *b + b ;",
        "correctness": "wrong"
      },
      {
        "patch": "return( a % b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return b +0+ b ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a % b ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a +0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return b % b ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a +0+ a ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( b ==0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a *a + b ;",
        "correctness": "wrong"
      },
      {
        "patch": "return b % b ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a + b ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( int ) b ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a [0] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( a % b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a *a *b ;",
        "correctness": "wrong"
      },
      {
        "patch": "return( b % b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return gcd( a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return b +0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( int ) b ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a + a ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( int ) a ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return b ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a ;",
        "correctness": "wrong"
      },
      {
        "patch": "return b ;",
        "correctness": "wrong"
      }
    ]
  },
  "GET_FACTORS-27-28": {
    "src": "return new Array CaMeL List < Integer > ( ) ;",
    "patches": [
      {
        "patch": "return new ArrayList < Integer >( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new ArrayList < Integer >(0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new ArrayList < String >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Object >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Long >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >(0) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >(2) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new ArrayList new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ? >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Long >(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ? < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >(1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new ArrayList < Long >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >>( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >(0.1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >(0.0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( -1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new ArrayList.ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return Collections.new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer > < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new LinkedList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >>(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Short >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >(0.2) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer(1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer > < Integer >(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new HashSet < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return Collections.new ArrayList < Integer >(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Date >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Float >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList extends ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < E >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Byte >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Long >(0) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( ) ; ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList <= Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >>( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Node >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >(0.1) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < int >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < HashSet < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( n ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return Collections.new ArrayList < Integer >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return return new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >(0.0) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer < ? >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer(2) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ArrayList < Integer > get_factors( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( [1] ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new return new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "{ return new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList extends Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ? < ? >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >(0.) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Number >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList extends Integer >(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Boolean >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < String >(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( new ArrayList < Integer >( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new ArrayList < Integer >( false ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >>(0) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < String >(2) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new LinkedList < Integer >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( ) ; } else ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList <= Integer >(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Object < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >(1.0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer Integer ] >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Class >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( null ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new ArrayList < String >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >(2) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new LinkedList < Integer >(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Exception >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( ) ; return null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer extends Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( < Integer > ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >2( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new HashSet < Integer >(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Throwable >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( ArrayList < Integer > ) null ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new ArrayList < Integer >( ) ; break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList <= Integer >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >(( int ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Object >(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new HashMap < Integer , Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >(1) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new HashSet < Integer >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < String >(1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList extends Integer >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Object >(2) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList >= Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList >= Integer >(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ? >(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return get_factors( n ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return new ArrayList < Double >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "list = new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new final ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { return new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < / >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList Integer >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( ) ; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < byte >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList Integer >(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new List < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new Hashtable < Integer , Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( - ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ? >>( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Entry >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Long >>( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new LinkedList < String >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList == Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Object( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList Long >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList >(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >(0.",
        "correctness": "uncompilable"
      },
      {
        "patch": "return get_factors( n ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new Vector < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return super.get_factors( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < String( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "throw new IllegalArgumentException( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new Integer(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList >>( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return Collections.emptyList( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new Integer [1] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return get_factors( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new Integer(1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList -1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new int [1] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "List < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return get_factors( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList null ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "throw new RuntimeException( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return get_factors(0) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return new Integer [0] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ArrayList < Integer > ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new int [0] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new Object [0] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "throw new >1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new Integer( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return null ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return null ;",
        "correctness": "wrong"
      }
    ]
  },
  "HANOI-27-28": {
    "src": "steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ;",
    "patches": [
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start , helper ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , end ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >>( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >(0, helper ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.add( new Pair < String , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, start , helper ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) , hanoi( height -1, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , String >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) , hanoi( height -1, helper , end ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >(0, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, start , helper ) , hanoi( height -1, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Pair < Integer , Integer > helper = new Pair < Integer , Integer >( start , helper ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >>( start , helper ) ) ; crap_set.remove( end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >(3, helper ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >(2, helper ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.add( helper ) ; steps.add( new Pair < Integer , Integer >>( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >(1, helper ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) ) ; steps.add( height -1, helper ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , end ) ) ; } return steps ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Long , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) ) ; } return steps ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < String , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, start , helper , end ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start , start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Pair < Integer , Integer >>( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , String >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >>( start , helper , end ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start , helper , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( hanoi( height -1, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >(1, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >>( start , helper ) ) ; } return steps ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) ) ; crap_set.remove( end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start , helper ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , String >>( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >>( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Long >>( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >(0, start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, start ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( end , helper ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) ) ; steps.add( end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , int >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) ) ; steps.add( helper ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >(3, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >(2, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start , helper , end ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Long >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start , helper ) ) ; } return steps ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start , helper , start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , end ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start ,3, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start ,2, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( '(', helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( ' + String.valueOf(first) + ', helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( ', ', helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( ' + String.valueOf(second) + ', helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( ')', helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , end ) ) ; steps.add( end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( start , start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, start , helper ) ) ; } return steps ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer < Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , end , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start ,0) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.add( helper ) ; steps.addAll( hanoi( height -1, helper , end ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < '(', Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < ' + String.valueOf(first) + ', Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < ', ', Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < ' + String.valueOf(second) + ', Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < ')', Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , end ) ) ; steps.add( helper ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( '(', helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( ' + String.valueOf(first) + ', helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( ', ', helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( ' + String.valueOf(second) + ', helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( ')', helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( hanoi( height -1, helper , end ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new ArrayList < Integer , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start , helper ,1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) ) ; crap_set.remove( start ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < String , Integer >(0, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( helper ) ; steps.addAll( hanoi( height -1, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( end , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , end -1) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( start , helper , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, start , helper ) ) ; steps.add( end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Long >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Pair < Integer , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( first , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( start , helper ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, start , helper , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( max , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , end ) ) ; } return steps ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < String , Integer , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >>( start , helper ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( start ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) ) ; steps.add(3) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) ) ; steps.add(2) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Long , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >(0, start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, start + helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Pair < Integer , Integer > start = new Pair < Integer , Integer >( start , helper ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) ) ; steps.add( start ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Object >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) ) ; } return steps ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , String >(0, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1+ helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , ? >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, start , helper ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Object , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >>( height -1, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start ,0, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , end , helper , end ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer , Integer >(0, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >(0, helper , start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( hanoi( height -1, start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start ,3) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start ,2) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , helper , end ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( new Integer( start ) , helper ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , end ++ ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start , helper ,3) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start , helper ,2) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1+ start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( max , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , helper ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Object >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, end ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , int >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height +1, helper , end ) ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "this.steps.add( new Pair < Integer , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , crap_set ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start ,1, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( height -1, start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < E , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height +1, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , ? >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( height -1, helper ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.add( new Pair < Integer , Float >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , start ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.add( new Pair < String , String >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Map < Integer , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < String , Integer >>( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return steps.add( new Pair < Integer , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Object >>( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start , start ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper , height ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( new Integer( helper ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.removeAll( hanoi( height -1, helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( start , helper ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Long , Integer >>( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( start , start ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Object , Integer >>( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { steps.add( new Pair < Integer , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) , end ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Object < Integer , Integer >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.removeAll( hanoi( height -1, helper , end ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "{ steps.add( new Pair < Integer , Integer >( start , helper ) ) ; }",
        "correctness": "wrong"
      },
      {
        "patch": "steps.addAll( hanoi( height -1, helper ) ) ; return steps ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( start ,3) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.addAll( new Pair < Integer , Integer >( start ,2) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Pair < Integer , String >>( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >(0, helper ,1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Pair < Integer , Long >>( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >( this , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Short >( start , helper ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "steps.add( new Pair < Integer , Integer >>( start +1, helper ) ) ;",
        "correctness": "uncompilable"
      }
    ]
  },
  "IS_VALID_PARENTHESIZATION-24-25": {
    "src": "return true ;",
    "patches": [
      {
        "patch": "return true ;",
        "correctness": "wrong"
      },
      {
        "patch": "return false ;",
        "correctness": "wrong"
      },
      {
        "patch": "return null ;",
        "correctness": "wrong"
      },
      {
        "patch": "return false ; } } return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; } } return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ; } return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; } return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( depth <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} return null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; } } return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if ; return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ; } } return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( depth <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ; return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ; } return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if ; return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; } return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; } return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { return null ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ; } return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ; return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if return null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ; break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( depth <0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "} else if return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return { return true ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return null ; return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return null ; return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return depth < parens.length ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "*****/",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; break ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; return true ;",
        "correctness": "uncompilable"
      }
    ]
  },
  "KHEAPSORT-27-28": {
    "src": "for ( Integer x : arr ) {",
    "patches": [
      {
        "patch": "for( Integer x : arr.subList(0, k ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer x : arr ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer x : arr ) { heap.add( x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( arr != null ) { for( Integer x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { output.add( x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( x != null ) { for( Integer x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { heap.add( x ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.size( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int x : arr.subList(0, k ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "synchronized( this ) { for( Integer x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : heap.subList(0, k ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.iterator( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.subList( k , k ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( arr == null ) { for( Integer x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Long x : arr.subList(0, k ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x == null ) { for( Integer x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { output.add( x ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr != null ) { for( int x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int k : arr.subList(0, k ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x != null ) { for( Integer x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer1: arr.subList(0, k ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x != null ) { for( Integer x :0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer k : arr.subList(0, k ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( arr ) { for( Integer x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) for( Integer x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "List < Integer > output = new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { if( x != null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "Vector < Integer > output = new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr != null ) { for( Integer x :0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.subList(0, x ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr != null ) { for( Integer arr : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : new ArrayList < Integer >( ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer x : arr ) { arr.add( arr ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { for( Integer x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Iterator < Integer > x : arr.iterator( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int x : arr ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer x : arr.subList(1, k ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( x != null ) { for( int x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.subList(0,0) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer x : arr ) { arr.add( x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "for( String x : arr.subList(0, k ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int x : arr.size( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Long x : arr ) { heap.add( x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int x : arr.iterator( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for < Integer > output = new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { if( x instanceof Integer ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.subSet(0, k ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer [ ] arr : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.subList(0+ k ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.x ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.subList( x , k ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.values( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : output ) { heap.add( x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer x : arr.list( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer arr : arr.subList(0, k ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer [ ] arr : arr.size( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer heap : arr.subList(0, k ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer [ ] x : arr.size( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { heap.add( heap ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer arr : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.subList(0, k ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer [ ] x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { heap.add(0, x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( String x : arr.size( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Long x : arr ) { output.add( x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer [ ] arr : arr.iterator( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.subList(0,1) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer arr : arr.size( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "Iterator < Integer > output = new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { if( x == null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "Collection < Integer > output = new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer [ ] x : arr.iterator( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : output.subList(0, k ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer x : arr.max ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int x : arr ) { heap.add( x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer x : arr.toArray( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( String x : arr ) { heap.add( x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( String x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( float x : arr.subList(0, k ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer < String > x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.keys( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr != null ) { for( Integer x : arr )",
        "correctness": "wrong"
      },
      {
        "patch": "for( int x : arr ) { output.add( x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "for( final Integer x : arr ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer x : arr ) { output.add( heap ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { for( Integer x : arr )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : heap ) { heap.add( x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer [ ] [ ] arr : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { heap.put( x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer < Integer > x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { heap.add( x , x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.length ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : output ) { output.add( x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "/ *for( Integer x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { heap.add( k ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer x : arr.value ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.subList(0, start ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Object x : arr.size( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer k : arr ) { heap.add( x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer arr : arr.iterator( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { out.add( x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Object x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.subList( k ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "/ **for( Integer x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Long x : arr ) { heap.add( x ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.max( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.keySet( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : new ArrayList < Integer >( ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.size( ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { heap.add( x ) ; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x :0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Iterator < Integer > x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! heap.isEmpty( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer [ ] arr : arr.arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) heap.add( x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x != null ) { for( Integer x : arr )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { output.add( x ) ; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.iterator( ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer [ ] x : arr.arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} for( Integer x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer < ? > x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) output.add( x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer < Object > x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer [ ] arr : arr.x ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.subList( x ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int x : arr.arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer : arr.subList(0, k ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer [ ] x : arr.x ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { heap.add( x ) ; return",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.min ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! heap.isEmpty( ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.k ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.subList( k ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int x : arr.x ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.asList( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int [ ] x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( heap.isEmpty( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Iterator < String > x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.LinkedList( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.start ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr )",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { for( Integer x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( ! heap.isEmpty( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : list ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int x : arr.length ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.values( ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer value : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int [ ] arr : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Long x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer name : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer [ ]0: arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( heap.isEmpty( ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer k : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer1: arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { for( Integer x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : output ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( Integer x : arr ) { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.out ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int k : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr ) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.first ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : heap ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( Object arr : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int x :0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x ] : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer element : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( String arr : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer heap : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer x : arr.arr )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( Integer : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( this ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int }",
        "correctness": "uncompilable"
      },
      {
        "patch": "/ **/",
        "correctness": "uncompilable"
      }
    ]
  },
  "KNAPSACK-30-31": {
    "src": "else if ( weight < j ) {",
    "patches": [
      {
        "patch": "else if( weight < j ) { memo [ i ] [ j ] =0;",
        "correctness": "wrong"
      },
      {
        "patch": "} else if( weight < j ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( weight < j ) { memo [ i ] [ j ] = j ;",
        "correctness": "wrong"
      },
      {
        "patch": "} else if( weight < j && weight < j ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( weight < j ) { memo [ i -1] [ j ] =0;",
        "correctness": "wrong"
      },
      {
        "patch": "} else if( weight < j || weight < j ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { memo [ i ] [ j ] = memo [ i -1] [ j ] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( weight <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( weight < j ) { memo [ i -1] [ j ] = j ;",
        "correctness": "wrong"
      },
      {
        "patch": "} else if( weight < j || weight <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( weight < j ) { memo [ i -1] = j ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( weight < j && weight == j ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { memo [ i -1] = memo [ i -1] [ j ] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( weight < j && weight <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( weight < j ) { memo [ i ] [ j ] =1;",
        "correctness": "wrong"
      },
      {
        "patch": "} else if( weight < j ) { weight += j ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( weight < j ) { memo [ i ] [ j ] = value ;",
        "correctness": "wrong"
      },
      {
        "patch": "else if( weight < j ) {",
        "correctness": "wrong"
      },
      {
        "patch": "else { memo [ i -1] [ j ] =0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( weight < j || weight == j ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { memo [ i ] [ j ] = memo [ i ] [ j ] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( weight < j ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( weight < j ) { memo [ i -1] =0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( weight == j ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( weight < j ) { memo [ i -1] =1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( weight < j ) { weight( weight ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( weight < j ) { memo [ i ] [ j ] = -1;",
        "correctness": "wrong"
      },
      {
        "patch": "} else if( weight < j ) { break ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { memo [ i -1] [ j ] = memo [ i -1] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( weight < j ) { weight += j ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( weight < j ) { memo [ i ] [ j ] = j ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( weight < j ) { if( weight < j )",
        "correctness": "wrong"
      },
      {
        "patch": "else if( weight < j ) { memo [ i ] [ j ] =0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( weight < j ) { weight( weight ) ;",
        "correctness": "uncompilable"
      }
    ]
  },
  "KTH-25-26": {
    "src": "return kth ( above , k ) ;",
    "patches": [
      {
        "patch": "return kth( above , k ) ; } else { return pivot ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above , k ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return pivot ; } else { return kth( above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( kth( above , k ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( below , k ) ; } else { return pivot ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above ,0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return below ; } else { return kth( above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return arr.size( ) - above.size( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above , k ) ; } else { return below ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( kth( above ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return above ; } else { return kth( above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "{ return kth( above , k ) ; }",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above , k ) ; } else return pivot ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth kth( above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( below , k ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above ,0, k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new Integer( k ) ; } else { return pivot ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return below.size( ) - above.size( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above ,1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth return kth( above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( arr ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above.size( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return num_lessoreq ; } else { return pivot ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "{ return kth( above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "int num_lessoreq = arr.size( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above ,0) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return above.size( ) - above.size( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above , k , kth ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k , num_less ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( Integer ) kth( above , k ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above , k , k ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return arr.size( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above , k , above ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return arr.size( ) ; } else { return pivot ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( kth( above ) , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return arr.get(0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above , k ) ; ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return pivot ; } else { return pivot ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k ) ; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k ) ; break ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k ) ; break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( new Integer( k ) , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , size , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , below , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above ,1, k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return pivot( above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( k , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( kth( above ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( Integer ) above.size( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return return kth( above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return pivot ; } else { return pivot ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , -1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return num_less ; } else { return pivot ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k ) ; */",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above ,1) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k ) ; } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( int ) kth( above , k ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above , start , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return num_less ; } else { return pivot ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , first , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "throw new RuntimeException( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( arr , k ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return pivot ; } else { return pivot ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new Integer( num_lessoreq ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( kth( k ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k , pivot ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth(0, k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( Integer ) below.size( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth kth( above , k ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return pivot( below , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return arr.get( k ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = kth( above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new Integer( k ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( k , k ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k , below ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return below.size( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above , k ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return num_lessoreq ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , above ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth(1, k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k +1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above , k , arr ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( kth , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( below , k ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k ) + k ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( below , k , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = kth( above , k ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above ,0,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , size ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k + k ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above , start ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return num_lessoreq ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , - k ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above ,0, above ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return below( above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return return kth( above , k ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return size( below , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "kth( above , k ) ; break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return size( above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return above.toArray( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "break kth( above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return below ; } else { return pivot ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( kth , k ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "kth( above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return above ; } else { return pivot ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above( k ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return arr.get(1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "throw new RuntimeException( k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return k ; } else { return pivot ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( true , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( k >= num_less ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "throw new RuntimeException( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , first ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return above.size( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return arr.size( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , k ) ; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above + k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "break kth( above , k ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return size( arr , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return above( above , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , below ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , false ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( false , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return num_lessoreq ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( above , out ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( out , k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( Integer ) above ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return( int ) k ;",
        "correctness": "wrong"
      },
      {
        "patch": "return above.next( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return num_less ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return pivot( k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above , max ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return pivot ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "kth( above , k ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return pivot ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( above ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return num_less ;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth( kth ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( k ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return below ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return k ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return arr ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth above ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return above ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return -1;",
        "correctness": "wrong"
      },
      {
        "patch": "return kth ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return pivot ;",
        "correctness": "wrong"
      },
      {
        "patch": "return above ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return below ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return above ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return kth ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return k ;",
        "correctness": "wrong"
      },
      {
        "patch": "break ;",
        "correctness": "uncompilable"
      }
    ]
  },
  "LCS_LENGTH-35-37": {
    "src": "if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;",
    "patches": [
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1; internal_map.put( j , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1; internal_map.put( i , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) +1; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1; internal_map.put( j , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1; internal_map.put( j , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( i ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( i ) +1; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j , internal_map ) ; } else { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1) ; int insert_value = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1; internal_map.put( i , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j -1) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1; internal_map.put( i , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( i , internal_map ) ; } else { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( i -1) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer >> internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1; internal_map.put( j , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1) ; int insert_value = dp.get( i ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1; internal_map.put( j , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i ) ; int insert_value = dp.get( i -1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i ).get( j ) +1; internal_map.put( j , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) ; int insert_value = dp.get( i -1).get( j -1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1; internal_map.put( j ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i ) ; int insert_value = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j +1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1; internal_map.put( j , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j , internal_map ) ; dp.put( i , internal_map ) ; dp.put( i , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1) ; int insert_value = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j ,1) ; } else { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1) ; int insert_value = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1; internal_map.put( i , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.contains( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j ,1) ; dp.put( i , internal_map ) ; dp.put( i , internal_map ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) +1; insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j , internal_map ) ; } else { Map < Integer , Integer > internal_map = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer >> internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1; internal_map.put( i , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) ; int insert_value = dp.get( i -1).get( i ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; dp.put( i , internal_map ) ; } else { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i ) ; int insert_value = dp.get( i ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; internal_map.put( j , internal_map ) ; } else { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) ; int insert_value = dp.get( i -1).get( j ) +0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) ; internal_map.put( j , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1) ; int insert_value = dp.get( i ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i ).get( j ) +1; internal_map.put( i , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ) ; int insert_value = dp.get( i -1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( i , internal_map ) ; dp.put( i , internal_map ) ; dp.put( i , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) +1; int insert_value = dp.get( i -1).get( j ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1; internal_map.put( i ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) ; int insert_value = dp.get( i -1).get( j -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j , insert_value ) ; } else { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j -1).get( j ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( i ) +1; insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( i , internal_map ) ; } else { Map < Integer , Integer > internal_map = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Map < Integer , Integer > internal_map = dp.get( i -1) ; if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer >> internal_map = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1; internal_map.put( j , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j -1) ; int insert_value = dp.get( i -1).get( j ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1; internal_map.put( j , insert_value ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j -1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i ).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Map < Integer , Integer > internal_map = dp.get( i ) ; if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.contains( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1) ; int insert_value = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1; internal_map.put( i , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) +1; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer >> internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.contains( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( i ,1) ; } else { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( s.charAt( j ) == t.charAt( j ) ) { if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) +1+1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j +1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( s.charAt( j ) == t.charAt( j ) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; internal_map.put( i , internal_map ) ; } else { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j , internal_map ) ; } else { Map < Integer , Integer >> internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1) ; insert_value = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1; internal_map.add( insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) +1; int insert_value = dp.get( i -1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1; internal_map.put( j ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) && dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) +0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j ,0) ; } else { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) ; int insert_value = dp.get( i -1).get( j ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ) ; int insert_value = dp.get( i ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j , internal_map ) ; } else { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; dp.put( j , internal_map ) ; } else { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1; internal_map.put( i , insert_value ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( i , internal_map ) ; } else { Map < Integer , Integer >> internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1; internal_map.put( j , internal_map ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( internal_map.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j , internal_map ) ; dp.put( i , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; long insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = new HashMap < Integer , Integer >>( ) ; for( int j =0; j < t.length( ) ; j ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( j -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = new HashMap < Integer , Integer >( ) ; for( int j =0; j < t.length( ) ; j ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) +1; int insert_value = dp.get( i ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( i , internal_map ) ; } else { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j -1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) +1; int insert_value = dp.get( i -1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j ,1) ; dp.put( i , internal_map ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( i ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) +1; int insert_value = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( i , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( i , internal_map ) ; dp.put( i , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j +1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1; internal_map.put( j , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1; internal_map.put( j , insert_value ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( i ) +1; int insert_value = dp.get( i -1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).getValue( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ) +1; internal_map.put( j , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.contains( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1; internal_map.put( i , insert_value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( i ,1) ; dp.put( i , internal_map ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) + -1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j , insert_value ) ; dp.put( i , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ) ; int insert_value = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; internal_map.put( j , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( i ) ; int insert_value = dp.get( i -1).get( j ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ) +1; int insert_value = dp.get( i ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j ,0) ; dp.put( i , internal_map ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( i.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; internal_map.put( j , internal_map ) ; dp.put( i , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; double insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; dp.put( i , internal_map ) ; dp.put( i , internal_map ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( dp.containsKey( j -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) +1; internal_map.put( j , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ) ; int insert_value = dp.get( i ) ; int insert_value = dp.get( i ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j , internal_map ) ; dp.put( j , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1).get( j ) -1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( s.charAt( j ) == t.charAt( j ) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j , internal_map ) ; dp.put( i , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) ; internal_map.put( j , internal_map ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i ) ; int insert_value = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer >> internal_map = dp.get( i ) ; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1) +1+1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) +1; insert_value = dp.get( i -1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j ,1) ; dp.put( i ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Map < Integer , Integer > internal_map = dp.get( i -1).get( j ) +1; int insert_value = dp.get( i -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) +1; int insert_value = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i ) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; internal_map.put( j ,1) ; dp.put( i , internal_map ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) +1; int insert_value = dp.get( i ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ; Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.contains( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Map < Integer , Integer > internal_map = dp.get( i ) ; int insert_value = dp.get( i -1) ; int insert_value = dp.get( i -1) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.contains( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1) ; int insert_value = dp.get( i -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) { Map < Integer , Integer > internal_map = dp.get( i -1).get( j -1).get( j ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( dp.containsKey( i -1) ) {",
        "correctness": "uncompilable"
      }
    ]
  },
  "LEVENSHTEIN-17-18": {
    "src": "return 1 + levenshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;",
    "patches": [
      {
        "patch": "return 1+ Math.min( levenshtein( source , target.substring(1) ) , levenshtein( source.substring(1) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return 1+ levenshtein( source.substring(1) , target.substring(1) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return source.length( ) ; } else { return 1+ levenshtein( source.substring(1) , target.substring(1) ) ;",
        "correctness": "uncompilable"
      }
    ]
  },
  "LIS-31-32": {
    "src": "longest = length + 1 ;",
    "patches": [
      {
        "patch": "longest = length +1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length +1; } i ++ ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length -1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length +1; } } i ++ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length +1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length +1; } i ++ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length -1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length +1; } } return longest ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = = length +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length +1; } } return length ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length *1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length +1; break ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length +1; } i -- ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length = length +1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length +1; } return longest ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = longest +1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length +1; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = longest +1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length +1; } else {",
        "correctness": "wrong"
      },
      {
        "patch": "longest = longest -1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length +1; } return length ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = longest -1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} longest = length +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length -1; } i ++ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = longest ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = = length -1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length +1; } break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { longest = length +1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest ++ ; longest = length +1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = = = length +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length +1; i ++ ;",
        "correctness": "wrong"
      },
      {
        "patch": "length = length +1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length +1+1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = longest ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = longest +1; } i ++ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length /1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length +1; break ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = longest ; longest = longest ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length ; longest = length +1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length - length ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length +1; i ++ ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { = length +1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = = = length -1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = +1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length +1; return longest ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = +1; } i ++ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if = length +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = i +1;",
        "correctness": "wrong"
      },
      {
        "patch": "this.longest = length +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = -1; } i ++ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length *1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = last +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length -1; break ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length +1; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length + length ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = size +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length = length -1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = longest ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length +1-1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = longest *1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length + -1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest += length +1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = -1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = = longest +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length + longest +1;",
        "correctness": "wrong"
      },
      {
        "patch": "} if = longest +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest ++ ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = longest ; } longest = longest ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length ; } i ++ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { longest = length -1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length +100;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = = length +1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest ++ ; } i ++ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = longest ; } } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length + longest ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = longest ; longest = length ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = i +1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = longest - length ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = val +1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = = longest -1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = +1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = = longest ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest =1; longest =1;",
        "correctness": "wrong"
      },
      {
        "patch": "max = length +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = length +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = last +1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = longest ; break ;",
        "correctness": "wrong"
      },
      {
        "patch": "next = length +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest += length ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "last = length +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest += length +1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = -1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = longest *1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length +0;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length +1; ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = size +1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = = length *1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length +1; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length /1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest += longest +1;",
        "correctness": "wrong"
      },
      {
        "patch": "} else { = length +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = start +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest ++ ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if = length +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length + val ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest += length ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = max +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest += length -1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = min +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length = length -1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = longest /1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "prev = length +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest +=1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "min = length +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length +100; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = longest /1;",
        "correctness": "wrong"
      },
      {
        "patch": "result = length +1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest =0;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = longest ; break ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest +=1;",
        "correctness": "wrong"
      },
      {
        "patch": "if = longest +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return length +1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest =0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} = length +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = = = longest ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length ] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = i ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest += length ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest ++ +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length = length *1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest =1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = i ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest ++ ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = length - longest ;",
        "correctness": "wrong"
      },
      {
        "patch": "return length ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = = = longest ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest =1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = length -100;",
        "correctness": "wrong"
      },
      {
        "patch": "longest += longest ;",
        "correctness": "wrong"
      },
      {
        "patch": "} longest = longest ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} i ++ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = = longest ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest -=1;",
        "correctness": "wrong"
      },
      {
        "patch": "longest += longest ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest -= length ;",
        "correctness": "wrong"
      },
      {
        "patch": "i ++ ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} longest += length ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = last ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest -- ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "longest = false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "i ++ ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest -- ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest = ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length += length ;",
        "correctness": "wrong"
      },
      {
        "patch": "return length ;",
        "correctness": "wrong"
      },
      {
        "patch": "return longest ;",
        "correctness": "wrong"
      },
      {
        "patch": "break ;",
        "correctness": "wrong"
      },
      {
        "patch": "last ++ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "break ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "pos ++ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "num ++ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "continue ;",
        "correctness": "wrong"
      },
      {
        "patch": "longest =",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else",
        "correctness": "uncompilable"
      }
    ]
  },
  "LONGEST_COMMON_SUBSEQUENCE-18-19": {
    "src": "return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;",
    "patches": [
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return longest_common_subsequence( a , b.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a , b.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(1) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a , b.substring(1) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return ''.charAt(0) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''+ longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''.charAt(0) + longest_common_subsequence( a.substring(1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''+ a.charAt(0) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(1) + longest_common_subsequence( a.substring(1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return ''; } else if( a.charAt(0) == b.charAt(0) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a ; } else if( a.charAt(0) == b.charAt(0) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''.charAt(1) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1) , b ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.length( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(1) + longest_common_subsequence( a , b.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.length( ) -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a + longest_common_subsequence( a , b.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.charAt(0) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1) , b ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(0,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a.charAt(1) + longest_common_subsequence( a , b.substring(1) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a.substring(1) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a.charAt(0) + ''+ longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a , a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a.substring(1) , b.substring(1) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1) , b ) ; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1) ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.charAt(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''+ a.charAt(1) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(0,0) , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return ''; } else if( a.charAt(1) == b.charAt(0) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.toString( ) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a ; } else if( a.charAt(1) == b.charAt(0) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''; } else if( a.charAt(0) == b.charAt(1) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1,1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( a.charAt(0) == b.charAt(0) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1) ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a ; } else if( a.charAt(0) == b.charAt(1) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''+ a.charAt(0) + longest_common_subsequence( a , b.substring(1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.length( ) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a , a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1) , -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1) ,",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.charAt(0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1) , b , ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''+ a.charAt(0) + longest_common_subsequence( a.substring(1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(0,1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return b.charAt(0) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(0) , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a , a.substring(1) ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return longest_common_subsequence( a , b.substring(1) , b.substring(1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1) , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return null.charAt(0) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1) , b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''.charAt(1) + longest_common_subsequence( a.substring(1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a , b.substring(1) , b ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''+ longest_common_subsequence( a , b.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.toString( ) , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "{ return a.charAt(0) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + b.charAt(0) + b.charAt(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = a.charAt(0) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1,1) , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(0,1) , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return longest_common_subsequence( a , b.substring(1) , b.charAt(0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(1) + longest_common_subsequence( a , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return a.charAt(0) + ''+ longest_common_subsequence( a.substring(1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a , b.charAt(0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1,0) , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return ''; } else if( a.charAt(1) == b.charAt(1) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''.charAt(0) + longest_common_subsequence( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''+ a ; } else if( a.charAt(0) == b.charAt(0) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a ; } else if( a.charAt(1) == b.charAt(1) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(1) + longest_common_subsequence( a.charAt(0) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a.substring(1) , b ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.toString( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a.substring(1) , b.charAt(0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a.substring(1) , b.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(1) + longest_common_subsequence( a.substring(0,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''+ a.substring(1) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1) ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a + longest_common_subsequence( a , b.substring(1) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return ''.toString( ) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "s = a.charAt(0) + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + b.charAt(0) + b.charAt(1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a , b.charAt(0) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a , a ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return ''; } else if( a.charAt(0) == a.charAt(0) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(1) + longest_common_subsequence( a.length( ) -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(1) , b.) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) ; } else { return a.charAt(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a ; } else if( a.charAt(0) == a.charAt(0) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''.charAt(0) + longest_common_subsequence( a.length( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''+ a.charAt(0) + longest_common_subsequence( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(1) + longest_common_subsequence( a.length( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a , b ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''.charAt(0) + longest_common_subsequence( a.length( ) -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a , b.substring(1) , b ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( b.substring(1) , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return longest_common_subsequence( a , b.substring(1) , b.length( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a , b.substring(1) , b ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''.charAt(0) + longest_common_subsequence( a.charAt(0) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a + longest_common_subsequence( a.substring(1) , b.substring(1) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.charAt(1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a , b.substring(1) ,",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.length( ) -0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a.substring(1) , b.substring(1) ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''.charAt(0) + longest_common_subsequence( a.substring(0,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.substring(1) + longest_common_subsequence( a , b.substring(1) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a.charAt(1) + longest_common_subsequence( a.substring(1,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''; } else { return longest_common_subsequence( a , b.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a ; } else { return longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a.substring(1) , b.charAt(1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( a.charAt(0) == b.charAt(0) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0).longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.substring(1) + longest_common_subsequence( a.substring(1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a ; } else if( a.isEmpty( ) || b.isEmpty( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(1) + longest_common_subsequence( a.substring(1,1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a.substring(1) , b ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a , b.substring(1) ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''; } else { return longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a , b.charAt(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(1) + longest_common_subsequence( a.substring(0,1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''+ a + longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a.substring(0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( b.charAt(0) == b.charAt(0) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) ; } else { return a.charAt(0) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( a.charAt(0) == b.charAt(1) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( a.charAt(1) == b.charAt(0) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a + longest_common_subsequence( a , a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) + longest_common_subsequence( a ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a + longest_common_subsequence( a.substring(1) , b ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''+ longest_common_subsequence( a.charAt(0) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return a.toString( ) + longest_common_subsequence( a.substring(1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''+ longest_common_subsequence( a , b.substring(1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a , b.substring(1) , b , ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a + ''+ longest_common_subsequence( a.substring(1) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a.substring(1) , b ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''.charAt(0) + longest_common_subsequence( a , a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a.substring(1) , b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''.charAt(1) + longest_common_subsequence( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(1) + longest_common_subsequence( a , a ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return longest_common_subsequence( a , b.substring(1) , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a , b.substring(0) , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a , b.substring(1) , b.) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a ; } else { return a.charAt(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a , b.substring(0, b ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''; } else { return a.charAt(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a.substring(1) , b , ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a.substring(0,0) , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return longest_common_subsequence( a.substring(1) , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a , b.substring(1) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return ''; } else { return a.charAt(0) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ''+ a + longest_common_subsequence( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a ; } else { return a.charAt(0) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a.charAt(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return longest_common_subsequence( a , b ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "return '';",
        "correctness": "uncompilable"
      },
      {
        "patch": "return a ;",
        "correctness": "wrong"
      }
    ]
  },
  "MAX_SUBLIST_SUM-19-20": {
    "src": "max _ ending _ here = max _ ending _ here + x ;",
    "patches": [
      {
        "patch": "max_ending_here = max_ending_here + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "synchronized( arr ) { max_ending_here = max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = max_ending_here +1;",
        "correctness": "wrong"
      },
      {
        "patch": "max_so_far = Math.max( max_so_far , arr ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = max_ending_here ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here + max_ending_here + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here +1+ x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = Math.max( max_ending_here , x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here + x + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_so_far + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here + x +1;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = Math.max( max_so_far , x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here / x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_so_far = Math.max( max_so_far , x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here - x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = Math.max( max_so_far , arr ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = max_ending_here +0;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = Math.max( max_ending_here , arr ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here += max_ending_here + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_so_far = Math.max( max_ending_here , x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if max_ending_here = max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_so_far = max_ending_here + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here +0+ x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here + max_ending_here ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_so_far = Math.max( max_so_far ,0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here /1;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = Math.max( max_ending_here ,1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here + x ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_so_far = Math.max( max_ending_here , arr ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = max_ending_here ? x : x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here =0+ x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_so_far + max_ending_here + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = x + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = Math.max( max_so_far ,0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = Math.max( max_ending_here ,0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_so_far = Math.max( max_so_far ,1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here -1;",
        "correctness": "wrong"
      },
      {
        "patch": "if( Math.max( max_so_far , max_ending_here ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = max_ending_here + x +0;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here =( int ) max_ending_here + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here / x + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = Math.max( max_so_far ,1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here *x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here +(1+ x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "int max_ending_here = max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = max_ending_here /0;",
        "correctness": "wrong"
      },
      {
        "patch": "max_so_far = Math.max( max_ending_here ,1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here +1+1;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here += max_ending_here +1;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here +( x + x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here =0;",
        "correctness": "wrong"
      },
      {
        "patch": "return Math.max( max_so_far , max_ending_here ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { max_ending_here = max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_so_far = Math.max( max_ending_here ,0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here =0+ max_ending_here + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = Math.max( max_so_far ,",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = max_ending_here /1+ x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_so_far = max_so_far + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "if max_ending_here = max_ending_here +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here += max_ending_here ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_so_far +1;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here + max_so_far ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here -1+ x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_so_far + max_ending_here ;",
        "correctness": "wrong"
      },
      {
        "patch": "if max_ending_here = max_ending_here ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_so_far = Math.max( max_so_far ,",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = max_ending_here ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = x ; max_ending_here =0;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here + x - x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here ? x :1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = x + max_ending_here + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here + x ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} max_ending_here = max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = max_ending_here + - x ;",
        "correctness": "wrong"
      },
      {
        "patch": "final max_ending_here = max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_so_far = Math.max( max_so_far , arr",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here =0+ max_ending_here ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = x ; max_ending_here = x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here =0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = = max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for max_ending_here = max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = max_ending_here + arr.length ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here -0;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here +( x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here =( max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized max_ending_here = max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here =( int ) max_ending_here ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = Math.max( arr , x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = max_ending_here +1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here -= max_ending_here + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here / x ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_so_far = Math.max( arr , x ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if max_ending_here = max_ending_here +0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if max_ending_here += max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = Math.max( arr ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here =1+ x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_so_far +0;",
        "correctness": "wrong"
      },
      {
        "patch": "if max_ending_here = max_ending_here / x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_so_far = max_so_far +1;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here ? x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = max_ending_here + x ; ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_so_far = Math.max( arr ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here += max_ending_here +0;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here += max_ending_here / x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_so_far ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = x + max_ending_here ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = max_ending_here +",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = x ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here =( int ) x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here += x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = x + x + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here =( int )1;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = x + x ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( max_ending_here ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here =0+ x + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "for( int x : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here =0+ x ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here += x + x ;",
        "correctness": "wrong"
      },
      {
        "patch": "retval = max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here =1;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = Math.max(",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_so_far = Math.max(",
        "correctness": "uncompilable"
      },
      {
        "patch": "if max_ending_here = x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if max_ending_here =0+ x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if = max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return max_ending_here + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = -1+ x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = -1;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = start + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if max_ending_here = x + x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_so_far =0;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here =0+1;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = x +1;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here -= x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = - x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here +=0+ x ;",
        "correctness": "wrong"
      },
      {
        "patch": "int max_ending_here =0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here =1+ x ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( max_so_far ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here =0+0;",
        "correctness": "wrong"
      },
      {
        "patch": "max_so_far = x ;",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here = x +0;",
        "correctness": "wrong"
      },
      {
        "patch": "byte [ ] arr : arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here -- ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( max_ending_here )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if max_ending_here =0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here =",
        "correctness": "wrong"
      },
      {
        "patch": "max_ending_here =1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here += x ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here ++ ;",
        "correctness": "wrong"
      },
      {
        "patch": "int max_ending_here = x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here = {",
        "correctness": "uncompilable"
      },
      {
        "patch": "max_ending_here +=0;",
        "correctness": "wrong"
      },
      {
        "patch": "synchronized( arr ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "-- x ;",
        "correctness": "wrong"
      },
      {
        "patch": "try {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(",
        "correctness": "uncompilable"
      },
      {
        "patch": "break ;",
        "correctness": "uncompilable"
      }
    ]
  },
  "MERGESORT-38-39": {
    "src": "if ( arr . size ( ) == 0 )",
    "patches": [
      {
        "patch": "if( arr.size( ) ==0) { return arr ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) { return arr ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) >0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( arr.size( ) !=0) { return arr ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) <=0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) { return arr ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) !=0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) >0) { return arr ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) >0) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( arr.size( ) ==0) { return arr ; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) >=0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) !=0) { return arr ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr != null && arr.size( ) ==0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.isEmpty( ) ) { return arr ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr != null || arr.size( ) ==0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==1) { return arr ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.isEmpty( ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr != null && arr.size( ) ==0) {",
        "correctness": "timeout"
      },
      {
        "patch": "} if( arr.size( ) ==0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) return arr ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) <0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) return arr ; return arr ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==1)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! arr.size( ) ==0) { return arr ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr == null || arr.size( ) ==0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) >0) { return arr ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { if( arr.size( ) ==0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) { return null ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr == null && arr.size( ) ==0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==1) { return arr ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr != null && arr.size( ) >0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! arr.size( ) ==0) { return arr ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( arr.size( ) ==0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) { return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) <=0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( ! arr.size( ) ) { return arr ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! arr.isEmpty( ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==100) { return arr ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==2) { return arr ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) return false ; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr != null || arr.size( ) ==0) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( arr.size( ) ==0) break ; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) <=0) { return arr ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! arr.size( ) ==0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) return arr ; else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) !=0) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( arr == null && arr.size( ) ==0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( arr != null || arr.size( ) >0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) { return mergesort ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( arr.size( ) ==0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) return null ; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) >=0) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( arr.size( ) >1)",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( arr.size( ) >0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) { return 100; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) { return 2; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) -0==0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.length ==0) { return arr ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==0) return 0; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) >=0) { return arr ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==100)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) ==2)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr == null && arr.size( ) >0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.size( ) == arr.size( ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( arr.size( ) ==0) break )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( arr.size( ) ==0) ) { return arr ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "/ *if( arr.size( ) ==0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( arr.isEmpty( ) ) {",
        "correctness": "timeout"
      }
    ]
  },
  "MINIMUM_SPANNING_TREE-28-29": {
    "src": "group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u ) ;",
    "patches": [
      {
        "patch": "groupByNode = update( groupByNode , node , vertex_u ) ;",
        "correctness": "wrong"
      }
    ]
  },
  "NEXT_PALINDROME-35-36": {
    "src": "otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;",
    "patches": [
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add(1) ; otherwise.add(1) ; otherwise.add(1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.size( ) ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "List < Integer > otherwise = new ArrayList < Integer >( ) ; otherwise.add(1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list.length ,9) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list.length ,2) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( low_mid != high_mid ) { digit_list [ high_mid ] +=1; }",
        "correctness": "wrong"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list.length ,1) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "otherwise.add(1) ; otherwise.add(1) ; otherwise.add(9) ;",
        "correctness": "wrong"
      },
      {
        "patch": "otherwise.add(1) ; otherwise.add(1) ; otherwise.add(2) ;",
        "correctness": "wrong"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( digit_list ) ; otherwise.add(1) ; otherwise.add(1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list.size ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add(9) ; otherwise.add(1) ; otherwise.add(1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "otherwise.add(2) ; otherwise.add(1) ; otherwise.add(1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "otherwise.add(1) ; otherwise.add(9) ; otherwise.add(1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "otherwise.add(1) ; otherwise.add(2) ; otherwise.add(1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.size ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add(1) ; otherwise.add(1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list ,0,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list.length -0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add(1) ; return String.valueOf( otherwise ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.length ,9) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.length ,2) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( low_mid != high_mid ) { digit_list [ high_mid ] +=1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.length ,1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "addAll( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list , digit_list ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "loop.addAll( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list.length ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( low_mid != high_mid ) { digit_list [ low_mid ] +=1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.putAll( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add(1) ; return String.valueOf( digit_list ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list.size( ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list , length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( digit_list ) ; otherwise.add( digit_list ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "list.addAll( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.length ,0,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list.0,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "queue.addAll( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.setAll( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list ,0,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( digit_list ) ; return String.valueOf( otherwise ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list.length , digit ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "ArrayList < Integer > otherwise = new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.size( ) ,1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.iterator( ) ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( digit_list ) ; otherwise.addAll( digit_list ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "add.addAll( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list.length -1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( digit_list.length ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( low_mid < high_mid ) { digit_list [ high_mid ] +=1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.length -0,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add(1) ; otherwise.addAll( digit_list ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.removeAll( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "otherwise.add( digit_list ) ; return String.valueOf( digit_list ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.length , digit_list ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( high_mid != high_mid ) { digit_list [ high_mid ] +=1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list.length +0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( Collections.nCopies( digit_list.length ,0) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.size( ) ,9) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.size( ) ,2) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list , digit_list ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "q.addAll( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.length ,0,9) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.length ,0,2) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list , length ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( low_mid < high_mid ) { digit_list [ low_mid ] +=1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.length -0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies(0,0) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( high_mid != high_mid ) { digit_list [ low_mid ] +=1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.length ,0) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "add( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( digit_list ) ; otherwise.add(1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.length ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( digit_list ) ; return String.valueOf( otherwise ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( digit_list.length ,0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "otherwise.addAll( digit_list ) ; otherwise.add( digit_list ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list [0] ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( low_mid != high_mid ) { digit_list [ high_mid ] =1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} otherwise.add( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies( digit_list ,1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( digit_list ) ; otherwise.add(1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( digit_list ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.0,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list , length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add(1) ; return String.valueOf( otherwise ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( digit_list.size( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "add.add( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add(1) ; otherwise.add( digit_list ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.size( ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "loop.add( Collections.nCopies( digit_list.length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( Collections.nCopies( digit_list.length , digit ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add(1) ; return String.valueOf( otherwise.size( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( digit_list , digit_list.length ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add(1) ; return Arrays.toString( digit_list ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "List < Integer > otherwise = new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( digit_list( digit_list.length ,0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( digit_list ) ; otherwise.addAll( digit_list ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.add( String.valueOf( otherwise ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "otherwise.addAll( Collections.nCopies(9,0) ) ;",
        "correctness": "wrong"
      }
    ]
  },
  "NEXT_PERMUTATION-19-20": {
    "src": "if ( perm . get ( j ) < perm . get ( i ) ) {",
    "patches": [
      {
        "patch": "if( perm.get( j ) < perm.get( i ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( perm.get( j ) < perm.get( i +1) ) { for( int j = perm.size( ) -1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( perm.get( j ) < perm.get( i ) && perm.get( i ) < perm.get( i ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( perm.get( j ) < perm.get( i ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( perm.get( j ) < perm.get( i ) ) { for( int j = perm ; j != i ; j -- ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( perm.get( i ) < perm.get( i ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( perm.get( j ) < perm.get( i ) ) { for( int j = perm.size( ) -1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( perm.get( i ) < perm.get( i ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( perm.get( j ) < perm.get( i ) ) { ArrayList < Integer > next = perm.get( j ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( perm.get( j ) < perm.get( j ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( perm.get( j ) < perm.get( i ) ) { for( int j =1; j != i ; j -- ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( perm.get( j ) == perm.get( i ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( perm.get( j ) < perm.get( i -1) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( perm.get( j +1) < perm.get( i ) ) { for( int j = perm.size( ) -1;",
        "correctness": "uncompilable"
      }
    ]
  },
  "PASCAL-22-23": {
    "src": "for ( int c = 0 ; c < r ; c ++ ) {",
    "patches": [
      {
        "patch": "for( int c =0; c < r ; c ++ ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( int c =0; c < r ; c ++ )",
        "correctness": "uncompilable"
      },
      {
        "patch": "int r =0; for( int c =0; c < r ; c ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =0; c < r ; c ++ ) { ArrayList < Integer > row = null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "int c =0; for( int c =0; c < r ; c ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "int c = rows.get( r -1).get( c -1).get( c -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( this ) { for( int c =0; c < r ; c ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( c >0) { ArrayList < Integer > row = new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =0; c <0; c ++ ) {",
        "correctness": "wrong"
      },
      {
        "patch": "int r = rows.get( r -1).get( c -1).get( c -1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "int r = r ; for( int c =0; c < r ; c ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =0; c < r ; c ++ ) { row.add( r -1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "int c = r ; for( int c =0; c < r ; c ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =0; c < r ; c ++ ) { if( c >0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "int n =0; for( int c =0; c < r ; c ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( c >0) { ArrayList < Integer > row = new ArrayList < Integer >>( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =1; c < r ; c ++ ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( int c =0; c < r ; c ++ ) { row.add( r - c ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "int n = r ; for( int c =0; c < r ; c ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =0; c < r ; c ++ ) { if( c >0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =0; c < n ; c ++ ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( int c =0; c < r ; c ++ ) { int c =0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =0; c <1; c ++ ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( c >0) { for( int c =0; c < r ; c ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "int size = r ; for( int c =0; c < r ; c ++ ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( int c =0; c < c ; c ++ ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( int c =0; c < n ; c ++ )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =0; c < r ; c -- ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( int c =1; c < r ; c ++ )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =0; c < max ; c ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =0; c < r ; c ++ ) { row.add( r ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( c >0) { for( int c =0; c < r ; c ++ )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c = r ; c < r ; c ++ ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( int c =0; c < rows.size( ) ; c ++ ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( int c =0; c < r ; c ++ ) { c = r ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int r =0; r < n ; r ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =0; c < size ; c ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =1; c < r ; c ++ ) { int c =0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =0; c < r ; c ++ ) { if( r ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =0; c < rows.size( ) ; c ++ )",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( int c =0; c < r -1; c ++ ) {",
        "correctness": "wrong"
      },
      {
        "patch": "for( int c =0; c < n ; c ++ ) { int c =0;",
        "correctness": "uncompilable"
      }
    ]
  },
  "POSSIBLE_CHANGE-17-18": {
    "src": "if ( total < 0 ) {",
    "patches": [
      {
        "patch": "if(( total <0) ) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if(( total <0) ) { return 1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( total <0|| total <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total <0) { return 1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return 0; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( total <0) ) { return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( total <0&& total <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( total <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( total ==0) ) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { if( total <0) { return 0{",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return -0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { if( total <0) { } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( total <0) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { if( total <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( total <0) ) { return 1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "synchronized( this ) { if( total <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return coins [0] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0|| total <0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if(( total >=0) ) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0) { return 0; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( total ==0) ) { return 1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "int total =0; if( total <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { if( total <0) { return ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( total >0) ) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0&& total <0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total >0) { return coins [0] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { total =0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total >=0) { return coins [0] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return 1; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return 0; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { break ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return -1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { if( total <0) return 0; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( total <0) { return 1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( total >=0) ) { return 1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { if( total ==0) { return 0{",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( total <0) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total !=0) {",
        "correctness": "wrong"
      },
      {
        "patch": "if(( total >0) ) { return 1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return 0{ } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { if( total <0) { return 1{",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0) { return 1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return ) ; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return 1; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0|| total <0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total ==0) { return coins [0] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total >0) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( total <0) { return 1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return 0{",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0) { return -0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0|| total <=0) {",
        "correctness": "timeout"
      },
      {
        "patch": "else if( total <0) { return 1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0|| total >0) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( total ==0) { return 0; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0&& total <=0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total >0) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( total <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( total ==0) ) { return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0&& total >0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total >=0) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0&& total <0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total <0|| total ==0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if(( total ==0) ) { return 1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { if( total ==0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total >0) { return 1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ) { if( total <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( total >=0) ) { return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "else if( total <0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total >=0) { return 1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( total >0) ) { return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0&& total ==0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total ==0) { return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0|| total ==0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total <1) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( total >=0) ) { return 1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0|| total >=0) {",
        "correctness": "wrong"
      },
      {
        "patch": "if(( total >0) ) { return 1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0) { return 0{",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( total <0) ) {",
        "correctness": "timeout"
      },
      {
        "patch": "} if( total ==0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <=0) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { } else {",
        "correctness": "wrong"
      },
      {
        "patch": "if( total ==0) { return 1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0|| total <=0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total < coins.length ) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { if( total <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <1) { return 1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total >=0) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( total <=0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total >0|| total <0) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( total <=0) { return 1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0&& total ==0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total <0) { return 0; } for(",
        "correctness": "uncompilable"
      },
      {
        "patch": "/ *if( total <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total !=0|| total <0) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( total ==0) { return 1; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0&& total >=0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total < coins.length ) { return 1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) return 0{",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( total <0) { return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total >0) { return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0|| max <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total >= coins.length ) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0&& total <=0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total >=0) { return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==1) { return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total >0&& total <0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total >0) { return 1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { if( total <0)",
        "correctness": "timeout"
      },
      {
        "patch": "if( total >=0) { return 1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0|| total <0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==1) { return 1; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <1) { return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total < -1) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total < total ) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total < coins.length ) {",
        "correctness": "timeout"
      },
      {
        "patch": "else { if( total !=0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0) { return total ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <0&& total <0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <=0) { return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <1) {",
        "correctness": "timeout"
      },
      {
        "patch": "if(0< total ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if(( total ==0) ) {",
        "correctness": "timeout"
      },
      {
        "patch": "} if( total <0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! total <0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <1) { return 1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0) return 0{",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total <=0) { return 1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( total !=0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( total >=0) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if(0<0) {",
        "correctness": "timeout"
      },
      {
        "patch": "if(( total >0) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "} if( total >0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ==0) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total < ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total >= coins.length ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( total <00) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total ==1) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total < null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total == coins.length ) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( total !=0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total >0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total < total )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total >1) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( total == ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total >=1) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( total <=0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! total ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return coins [0] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total >=0)",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( total {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( false ) {",
        "correctness": "timeout"
      },
      {
        "patch": "} ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( )",
        "correctness": "uncompilable"
      },
      {
        "patch": "}",
        "correctness": "uncompilable"
      }
    ]
  },
  "QUICKSORT-26-27": {
    "src": "} else if ( x > pivot ) {",
    "patches": [
      {
        "patch": "} else if( x > pivot ) { greater.add( x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "} else if( x > pivot ) {",
        "correctness": "wrong"
      },
      {
        "patch": "} else if( x > pivot ) { lesser.add( x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "} } if( x > pivot ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( x > pivot ) { greater.add( x ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } else if( x > pivot ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( x < pivot ) { greater.add( x ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "; } if( x > pivot ) {",
        "correctness": "wrong"
      },
      {
        "patch": "} else if( x > pivot ) { greater.add( pivot ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "} if( x > pivot ) {",
        "correctness": "wrong"
      },
      {
        "patch": "} else if( x >= pivot ) { greater.add( x ) ;",
        "correctness": "timeout"
      }
    ]
  },
  "REVERSE_LINKED_LIST-20-21": {
    "src": "node = nextnode ;",
    "patches": [
      {
        "patch": "node = nextnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = nextnode ; } node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; node = nextnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextnode != null ) node = nextnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = nextnode ; node = nextnode ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nextnode != null ; return nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; } return prevnode ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; if node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode.getSuccessor( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = nextnode ; else node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; } else { node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = node.getSuccessor( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextnode != null ; node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; if( node != null )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nextnode == null ; return nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; break ; } return node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nextnode == null ) node = nextnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = nextnode ; } return node ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; if nextnode = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node != null ) node = nextnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = nextnode ; if ; node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Node node = nextnode ; node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; } else node = null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; } return prevnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nextnode == null ; node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node.setSuccessor( prevnode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = nextnode ; } node = nextnode ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "node.setSuccessor( node ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = nextnode ; return nextnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = nextnode ; node = prevnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextnode != null ; return node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; } return node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; if node = nextnode ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; break ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; node = nextnode ; ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = nextnode ; } return nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = node ; node = nextnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "{ node = nextnode ; node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; break ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; if( nextnode != null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = node ; node = nextnode ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { node = nextnode ; node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node.setSuccessor( nextnode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return nextnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = prevnode ; node = nextnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( node != null ) { node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; node = node ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = nextnode ; if( nextnode == null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; break ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = nextnode ; else { node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "next = nextnode ; node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; } node = node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "prev = nextnode ; node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node == null ) { node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = getSuccessor( nextnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; return nextnode ; else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; nextnode = node ;",
        "correctness": "wrong"
      },
      {
        "patch": "next = node.getSuccessor( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "o = nextnode ; node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; node = nextnode ; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "i = node.getSuccessor( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "o = node.getSuccessor( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; node = nextnode.node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "loop = node.getSuccessor( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode.get = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; return nextnode ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode.getParent( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; return prevnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = node.getParent( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; } return null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode.nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; return node ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = node ; } return prevnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; if ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; return node ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = nextnode.node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; nextnode = nextnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = node ;",
        "correctness": "wrong"
      },
      {
        "patch": "break ; } if( nextnode != null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; continue ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return nextnode ; } node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Node node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Node nextnode = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = prevnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = nextnode + nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Node prevnode = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = node = nextnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "try { node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode.get = ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nextnode != null )",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode.get = true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; continue ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( prevnode != null )",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode.get ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode + node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "next = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode - node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node =.( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "{ node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { node = nextnode.node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "prev = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = node.node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "o = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "break ; } node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node != null )",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = node.nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Node nextnode = node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return node ;",
        "correctness": "wrong"
      },
      {
        "patch": "i = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "else node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; } if ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return nextnode ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = node ; break ;",
        "correctness": "wrong"
      },
      {
        "patch": "node = nextnode ; while ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( node != null )",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; if ; {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nextnode != null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "ret = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; if ; ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "loop = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = nextnode ; ;",
        "correctness": "wrong"
      },
      {
        "patch": "state = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = pop( nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "cur = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "throw new RuntimeException ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "rs = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if node = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "l = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} return nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "p = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "res = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "{ return nextnode ; }",
        "correctness": "wrong"
      },
      {
        "patch": "parent = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return node ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "tmp = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = node ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "{ return nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "tree = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "m = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "group = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "retval = nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = out ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return prevnode ;",
        "correctness": "wrong"
      },
      {
        "patch": "break ;",
        "correctness": "wrong"
      },
      {
        "patch": "Node nextnode ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = null ;",
        "correctness": "wrong"
      },
      {
        "patch": "return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "next = node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "node = parent ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "break ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "throw null ;",
        "correctness": "wrong"
      },
      {
        "patch": "continue node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "continue ;",
        "correctness": "wrong"
      },
      {
        "patch": "try {",
        "correctness": "uncompilable"
      },
      {
        "patch": "}",
        "correctness": "uncompilable"
      },
      {
        "patch": "{",
        "correctness": "uncompilable"
      }
    ]
  },
  "RPN_EVAL-34-35": {
    "src": "c = bin _ op . apply ( a , b ) ;",
    "patches": [
      {
        "patch": "c = bin_op.apply( a , b ) ; stack.push( c ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.apply( a , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( b != null ) c = bin_op.apply( a , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.apply( a , b ) ; stack.add( c ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( c != null ) c = bin_op.apply( a , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.apply( a , b ) ; stack.push( a ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( a != null ) c = bin_op.apply( a , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.apply( a , b ) ; stack.push( b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.apply( a , b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.get( a , b ) ; stack.push( c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , a ) ; stack.push( c ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( b == null ) c = bin_op.apply( a , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.apply( a , c ) ; stack.push( c ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( b != null ) { c = bin_op.apply( a ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = op.apply( a , b ) ; stack.push( c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( c != null ) { c = bin_op.apply( a ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b ) ; stack.append( c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( a != null ) { c = bin_op.apply( a ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = bin_op.apply( a , b ) ; stack.push( c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b , false ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.do( a , b ) ; stack.push( c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.get( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "tmp = bin_op.apply( a , b ) ; stack.push( c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b , true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b , bin_op ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( bin_op , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b ) ; if( c ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( b , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = op.apply( a , b ) ; stack.push( c ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , a ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( c ) { c = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( b == null ) { c = bin_op.apply( a ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a ) ; stack.push( c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( bin_op ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b ) ; if( c != null )",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.apply( a , a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b , b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b.doubleValue( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.apply( c , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.apply( a , b , c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b ) ; stack.pop( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.apply( a , b , null ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.get( token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( b != null ) { c = bin_op.apply( a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.get( token ) ; stack.push( c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b , a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , c ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op ; c = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( c != null ) { c = bin_op.apply( a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b ) ; if( c == null )",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.get( a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b ) ; stack.clear( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.apply( a ) ; stack.push( c ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( a != null ) { c = bin_op.apply( a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b ) ; stack.reset( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "int c = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b ) ; if( b == null )",
        "correctness": "wrong"
      },
      {
        "patch": "if( bin_op ) c = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , bin_op ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b.value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( token ) ; stack.push( c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( bin_op , b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "b = bin_op.apply( a , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.apply( op , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { c = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b , a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b , b , false ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.do( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b , b , true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "tmp = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a ,0.0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c.apply( a , b ) ; stack.push( c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b , value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b , b , a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b , b , c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "bin_op = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b , b.value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( bin_op.apply( a , b ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b ,0.0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = new BinaryOperator < Double >( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( b , b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "{ c = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( b == null ) { c = bin_op.apply( a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( bin_op , a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , new Integer( b ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a ,( Integer ) b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "int bin_op = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , c , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , bin_op , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a ,( Double ) b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.apply( a , b , b.b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "double c = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( token , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.run( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "i = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b ,1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "p = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( c , b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c ; c = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b.b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = new BinaryOperator < Double >>( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.get( b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "int a = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "a = bin_op.apply( a , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "retval = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( bin_op , a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return bin_op.apply( a , b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , b ) ; break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( new Double( b ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "float c = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.get( a , b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.set( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , op ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op ; stack.push( c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.get( a ,0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "s = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( new Double( c ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( op ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { bin_op = op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.get( b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Integer c = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c.set( bin_op , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a , null ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = bin_op.apply( a , false ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "int b = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "buf = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c += bin_op.apply( a , b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = op.apply( a , b , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Point c = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = a.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { bin_op = op.get( token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = c.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.parse( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = b.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "m = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( start , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.get( c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "z = bin_op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c.set( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c.add( bin_op ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = op.apply( a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( a ,",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = bin_op.apply( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c =( Double ) stack.pop( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "c = b.apply( a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = op.get( token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c.apply( bin_op ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return op.apply( a , b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = a.apply( a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c = c.apply( a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( bin_op ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "c.set( bin_op ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c.push( c ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "c.apply( a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( c ) {",
        "correctness": "uncompilable"
      }
    ]
  },
  "SHORTEST_PATH_LENGTH-37-38": {
    "src": "unvisited CaMeL Nodes . get ( nextnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nextnode ) ) ) ) ;",
    "patches": [
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) +1) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) +1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; for( Node nextnode : node.getSuccessors( ) ) { if( visitedNodes.contains( nextnode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) + length_by_edge.get( node ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ; } } return distance ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; unvisitedNodes.put( nextnode , Math.min( unvisitedNodes.get( nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ; } return -0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) +0) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } unvisitedNodes.add( nextnode ) ; for( Node nextnode : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) +1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ; return distance ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) +1) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) +0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + - length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ; } return distance ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) - length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ; ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ; break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) , length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) , nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( node ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Collections.asList( node , nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.contains( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node ) , nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) +0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.size( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } unvisitedNodes.add( nextnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) +0) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ; continue ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) + distance ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList(( node , nextnode ) ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.getCount( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "visitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ; return distance ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node ) nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "list.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , node ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "new Integer( unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) + length_by_edge.get( ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ).get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "new Integer( unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "this.unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( node ) ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node.get( nextnode ) ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node.nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ) ; return distance ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ).get( nextnode ) + length_by_edge.get( nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ; break ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( node ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( unvisitedNodes ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; unvisitedNodes.put( nextnode , Integer.MAX_VALUE ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , node , nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node ) ) +1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) , ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList(( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ,",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) ) +1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) - length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.getValue( ) +1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) +",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( unvisitedNodes.get( nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode )",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) + -1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + unvisitedNodes.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + Arrays.asList( node , nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; unvisitedNodes.put( nextnode , Math.MAX_VALUE ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ).get( nextnode ) + length_by_edge.getValue( ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ).get( nextnode ) + length_by_edge.get( nextnode ) +1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; for( Node nextnode : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.getCount( ) +1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } unvisitedNodes.remove( nextnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.getValue( ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } unvisitedNodes.put( nextnode , Integer.MAX_VALUE ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes + length_by_edge.get( nextnode ) + length_by_edge.get( nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) , Math.min( unvisitedNodes.get( nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) + length_by_edge.get( Arrays.asList( node ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) ) ) ; ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + node.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes , length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } return Integer.MAX_VALUE ; } return Integer.MAX_VALUE ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) + length_by_edge.get( nextnode ) +1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; if( unvisitedNodes.get( nextnode ) == null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.getType( ) +1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } for( Node nextnode : node.getSuccessors( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( node ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } visitedNodes.add( nextnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) + length_by_edge.get( nextnode ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } return unvisitedNodes.get( nextnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ).get( nextnode ) + length_by_edge.get( node ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; unvisitedNodes.add( nextnode ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.getKey( ) +1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.getCount( ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "list.get( nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) +1) ) ; ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } } return unvisitedNodes.get( nextnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node , nextnode ) + length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } unvisitedNodes.put( nextnode , unvisitedNodes ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) , Arrays.asList( node , nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } unvisitedNodes.add( nextnode ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + - length_by_edge.get( nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } } unvisitedNodes.add( nextnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; return unvisitedNodes.get( nextnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) + nextnode ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) +1) ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( Arrays.asList( node , nextnode ) ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) ) ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; if( unvisitedNodes.contains( nextnode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) +1) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ) ; } unvisitedNodes.add( nextnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.get( nextnode ) + -1) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } } } return Integer.MAX_VALUE ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) +1) + length_by_edge.get( nextnode ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; unvisitedNodes.remove( nextnode ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "Collections.asList( node , nextnode ) + length_by_edge.get( nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "/ length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + Collections.asList( node , nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( Arrays.asList( node , nextnode ) ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.getType( ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.getValue( ) +1) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + unvisitedNodes.get( nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + Arrays.asList( node , nextnode ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } } return Integer.MAX_VALUE ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) , length_by_edge.get( nextnode ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.getOffset( ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) , unvisitedNodes.get( nextnode ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.getKey( ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } } visitedNodes.add( nextnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + unvisitedNodes.get( nextnode ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( Arrays.asList( node , nextnode ) +1) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } unvisitedNodes.add( node ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.getValue( ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; unvisitedNodes.add( nextnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge.size( ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": ">> length_by_edge.get( Arrays.asList( node , nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } visitedNodes.remove( nextnode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ).get( nextnode ) +1) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) +1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } return node.getValue( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) + length_by_edge ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ) ; } } return Integer.MAX_VALUE ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) +1) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } } return Integer.MAX_VALUE ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } return Integer.MAX_VALUE ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( node ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } } return -0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) +0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ; } } return -1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.size( ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "unvisitedNodes.get( nextnode ) +",
        "correctness": "uncompilable"
      },
      {
        "patch": "node , nextnode ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "list.get( nextnode ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "node ) ) ;",
        "correctness": "uncompilable"
      }
    ]
  },
  "SHORTEST_PATH_LENGTHS-36-37": {
    "src": "length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;",
    "patches": [
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; for( int j =0; j < numNodes ; j ++ ) { for( int j =0; j < numNodes ; j ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; for( int j =0; j < numNodes ; j ++ ) { for( int j =0; j < numNodes ; j ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , new HashMap < Integer >( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; for( int j =0; j < numNodes ; j ++ ) { for( int j =0; j < numNodes ; j ++ )",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( k , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , new Integer( update_length ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ; } } return length_by_path ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; for( int j =0; j < numNodes ; j ++ ) { for( int j =0; j < numNodes ; j ++ )",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( k , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ; } } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( k , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , Arrays.asList( i , k ) ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , Arrays.asList( i , k ) ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( k , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , Arrays.asList( i , k ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ; } } return length_by_path ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_edge.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i ,",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , Arrays.asList( j , k ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j ,",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( i ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ; } } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j ,",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( i ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , Arrays.asList( j , k ) ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( i ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i ,",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( i ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; for( int j =0; j < numNodes ; j ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( j ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_edge.get( Arrays.asList( j , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( k ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_edge.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( j ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_edge.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( k ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( j , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( j ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; length_by_path.put( Arrays.asList( i , j , update_length ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( k ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( j ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j , update_length ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( j ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; for( int j =0; j < numNodes ; j ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( j ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , j ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( k ) + length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_edge.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ; if( Arrays.asList( i , j ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) +1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ; if( Arrays.asList( i , j ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) +1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_edge.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_edge.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) +1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; length_by_path.put( Arrays.asList( j , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) +1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) +99999) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_edge.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( k , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) +99999) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , k ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( k , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_edge.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) +0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , j ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ; } } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( k , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) +0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , j ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; length_by_edge.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) +99999) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) +99999) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_edge.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( k , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , i ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_edge.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , update_length ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) +0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) +1) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) +0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; length_by_path.put( Arrays.asList( i , k ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , j ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , i ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) + k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; length_by_path.put( Arrays.asList( i , j , update_length ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.add( Arrays.asList( i , j ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) + length_by_path.get( Arrays.asList( i , k ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get(",
        "correctness": "wrong"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) +1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) ,",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) + length_by_path.get( Arrays.asList( j , k ) ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_edge.get( Arrays.asList( j , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + length_by_edge.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j ) ) + length_by_path.get( Arrays.asList( j ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( j , j ) , update_length ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) , true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , j ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) +1) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + Arrays.asList( j , k ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) +",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) ) +1) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + Arrays.asList( i , k ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_edge.get( Arrays.asList( i , k ) ) ) ; for( int j =0; j < numNodes ; j ++ ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) + Arrays.asList( j , k ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) ) +",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( i ) + length_by_path.get( Arrays.asList( i , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( j ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ; length_by_path.put( Arrays.asList( i , j ) ,",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( i ) + length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( i , k ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get(0) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) +1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + length_by_path.get( Arrays.asList( j , k ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) +99999) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( i ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) +1) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Integer.asList( i , k ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) +99999) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_edge.get( i ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get(99999) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) +0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k , k ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + k ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( j ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( j , k ) ) +0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "Integer.asList( j , k ) ) ; length_by_path.put( Arrays.asList( i , j ) , update_length ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( Arrays.asList( i , k ) ) + ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( k ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path.get( j ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "length_by_path",
        "correctness": "uncompilable"
      }
    ]
  },
  "SHORTEST_PATHS-30-31": {
    "src": "weight _ by _ edge . put ( edge , update _ weight ) ;",
    "patches": [
      {
        "patch": "weight_by_node.put( edge.get( edge.get(1) ) , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge , update_weight ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "weight_by_edge.put( edge.get( edge.get(1) ) , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get(0) , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get(0) , edge , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_node.put( edge.get( edge.get(0) ) , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get(1) , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get( edge.get(0) ) , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get(1) , edge , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_node.put( edge , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get(2) , edge , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get(99999) , edge , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( update_weight ) weight_by_node.put( edge.get(0) , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get(2) , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get(99999) , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( update_weight ) weight_by_edge.put( edge.get(0) , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get( edge.get(0) ) , edge ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_node.put( edge.get(0) , update_weight ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "weight_by_edge.put( edge.get(0) , edge.get(0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_node.put( edge.get( edge.get(1) ) , INF ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( update_weight ) { weight_by_edge.put( edge , update_weight ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! update_weight ) weight_by_edge.put( edge , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get( edge.get(1) ) , INF ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get( edge.get(1) ) , edge ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_node.put( edge.get(0) , new Integer( update_weight ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "weight_by_edge.put( edge.get( ) , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge , update_weight ) ; } } return weight_by_node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get(1) , edge.get(0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_node.put( edge , update_weight ) ; } } return weight_by_node ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get(( i ) ) , update_weight ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get(0) , new Integer( update_weight ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get(0) , update_weight ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "for( List < String > edge : weight_by_node.keySet( ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! update_weight ) weight_by_edge.put( edge , update_weight ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_node.put( edge.get(0) , update_weight ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "weight_by_edge.put( edge.get(1) , update_weight ) ; } }",
        "correctness": "uncompilable"
      }
    ]
  },
  "SHUNTING_YARD-33-34": {
    "src": "}",
    "patches": [
      {
        "patch": "} else { String operator =( String ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } if( false }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add(( Integer ) token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } if( false }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( token ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } } if } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add(( String ) token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } } if( }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add(( Long ) token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else = null ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( Integer ) token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } if } */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } else if } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = new String( token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } } } if }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { int operator =( String ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } / **/",
        "correctness": "uncompilable"
      },
      {
        "patch": "} *String operator =( String ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( false }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( Integer ) token ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if } */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( token ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } if( *}",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add(( int ) token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } if }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( opstack ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( opstack ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } } if }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add(( Object ) token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) '/';",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) '*';",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) '-';",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) '+';",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } else if }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String [ ] operator =( String ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( '/') ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( '*') ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( '-') ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( '+') ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = opstack.pop( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } if }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) token + '/';",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) token + '*';",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) token + '-';",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) token + '+';",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( '/') ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( '*') ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( '-') ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( '+') ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } if } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( Integer ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) token ; while( token",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } } if }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} String operator =( String ) token ;",
        "correctness": "wrong"
      },
      {
        "patch": "; } if } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( Integer ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String name =( String ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String )( Integer ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } if( }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { else { String operator =( String ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; }",
        "correctness": "wrong"
      },
      {
        "patch": "} else { String operator =( int ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } if } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) token + token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { operator =( Integer ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } else { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( operator ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } if( }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( Node ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } else if }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} *else { String operator =( String ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = precedence.get( operator ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } if } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } } } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { operator =( String ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( operator ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) token ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( *}",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = token.pop( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { int operator =( Integer ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) element ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( byte ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( false }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} */ rpntokens.add( token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; if } } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = '/';",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = '*';",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = '-';",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = '+';",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } / */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} */ String operator =( String ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if } } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String token =( String ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { if }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator :( String ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rpntokens.add( token ) ; break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } else ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { opstack.add( token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } **/",
        "correctness": "uncompilable"
      },
      {
        "patch": "} *int operator =( String ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } } } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { char operator =( String ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} / **/",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( Number ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if } if }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else String operator =( String ) token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } } */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = token.get( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; ***/",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else while( ! precedence.get( operator ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } } else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else rpntokens.add( token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) token ; rp@@",
        "correctness": "uncompilable"
      },
      {
        "patch": "; if } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) token ; try {",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } catch }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) token ; while(",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if } */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String ) token ; String",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if } ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = token.",
        "correctness": "uncompilable"
      },
      {
        "patch": "; **/",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { add( token ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} **/",
        "correctness": "uncompilable"
      },
      {
        "patch": "} *String operator = token ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; if }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = token.getCaMeL",
        "correctness": "uncompilable"
      },
      {
        "patch": "; */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if( token != null ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } else ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = token ; while( token",
        "correctness": "uncompilable"
      },
      {
        "patch": "; } else }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =( String )",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } else ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else if(( Integer ) token )",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else = }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { pop( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String [ ] operator =( String",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator =",
        "correctness": "uncompilable"
      },
      {
        "patch": "} / */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { continue ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = new String",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = getCaMeL",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { String operator = token",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} *) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "break } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "}",
        "correctness": "wrong"
      },
      {
        "patch": "return } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} return rpntokens ;",
        "correctness": "wrong"
      },
      {
        "patch": "} ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "; else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "} / ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "= } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} catch }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} else { rp@@",
        "correctness": "uncompilable"
      },
      {
        "patch": "; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "*/",
        "correctness": "uncompilable"
      },
      {
        "patch": "} *else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "= }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} break ;",
        "correctness": "wrong"
      },
      {
        "patch": "*}",
        "correctness": "uncompilable"
      },
      {
        "patch": "} / *",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "break ; }",
        "correctness": "wrong"
      },
      {
        "patch": "return }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} finally {",
        "correctness": "uncompilable"
      },
      {
        "patch": "break }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} *}",
        "correctness": "uncompilable"
      },
      {
        "patch": ";",
        "correctness": "uncompilable"
      },
      {
        "patch": "{",
        "correctness": "uncompilable"
      },
      {
        "patch": "break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": ":",
        "correctness": "uncompilable"
      },
      {
        "patch": "} *",
        "correctness": "uncompilable"
      },
      {
        "patch": "else",
        "correctness": "uncompilable"
      }
    ]
  },
  "SIEVE-41-42": {
    "src": "if ( any ( list _ comp ( n , primes ) ) ) {",
    "patches": [
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes.add( n ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( ! any( list_comp( n , primes ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes.add( primes ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp , n , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes.remove( n ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes.add( value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , n , primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes.set( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( list_comp( n , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes.put( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes.add(1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( any( list_comp( n , primes ) ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) && any( primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes.add( true ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes , primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes.add(2) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( list_comp , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) continue ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes.add(0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( list_comp( n , n ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes.add( max ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( list( n , primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , false ) ) ) { primes.add( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , any( primes ) ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n ,0) ) ) { primes.add( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n ,1) ) ) { primes.add( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( primes( list_comp( n , primes ) ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes.add( list ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n + primes ) ) ) { primes.add( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! any( list_comp , n , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , true ) ) ) { primes.add( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list( list_comp( n , primes ) ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , null ) ) ) { primes.add( n ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , list_comp( n , primes ) ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp(0, primes ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) || any( primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp(2, primes ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( list_comp( size , primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( primes.equals( list_comp( n , primes ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( list( n , primes ) ) ) { primes.add( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp(1, primes ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( list_comp( n , primes ) ) { primes.add( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp ) && any( list_comp ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) && any( list ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n ) , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) primes.add( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! any( list_comp( n , primes ) , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( primes ) ) ) { primes.add( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( list_comp( n ) ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if( any( list_comp( n , primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( list_comp( n , primes ) ) { primes.add( n ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) continue ; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n ,2) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( list_comp( n , primes ) ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! any( list_comp( n , primes ) ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n ) ) ) { primes.add( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "any( list_comp( n , primes ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( primes ) ) ) { primes.add( n ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n +1) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp , n ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( list_comp( n , primes ) ) ) { primes.add( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) break ; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n ,1, primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes.add(",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( list_comp( primes ) ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { return primes ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! any( list_comp( n , primes ) ) ) return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { break ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) break ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( n , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { continue ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp ) || any( list_comp ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) continue {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( any( list_comp( n , primes ) ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( list_comp( n / primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { return primes ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) throw null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) continue )",
        "correctness": "uncompilable"
      },
      {
        "patch": "ArrayList < Integer > primes = new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "any( list_comp( n , primes ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "int n = any( list_comp( n , primes ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! any( list_comp( n , n ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( n , primes ) ) { primes.add( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! any( list_comp( n ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n ,0, primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n +0) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! any( list_comp ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { if( any( list_comp( n , primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n ,0) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , max , primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( list_comp != null && ! any( list_comp ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes , primes ) ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) return true ; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , false ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "assert any( list_comp( n , primes ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( first( list_comp( n , primes ) ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n *primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ,0) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n ,1) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ,0) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n - primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! any( list_comp , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( primes ) ) { primes.add( n ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp , n , list_comp ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( this.any( list_comp( n , primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! any( list_comp( n , primes ) ) ) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( any( list_comp( n , primes ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) && true ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( list_comp( list_comp( n , primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( primes , primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( list_comp.any( n , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( primes , n , primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( list_comp( n , primes , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes , n ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n +2) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { primes ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) break {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) ) { return ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( list_comp != null && any( list_comp ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( list_comp( n , n , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n + primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp , primes , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n / n ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , true ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp , list_comp ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ] ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! list_comp( n , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , null ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "any( list_comp( n , primes ) ) ; break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n , primes ) , primes ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( any( list_comp ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( list( list_comp( n , primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! any( list_comp , n ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( n ) ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if(( list_comp( n , primes ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list , n , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp( - n , primes ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( any( list_comp( n , primes ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( any( list_comp , n , primes ) )",
        "correctness": "uncompilable"
      }
    ]
  },
  "SQRT-16-17": {
    "src": "while ( Math . abs ( x - approx ) > epsilon ) {",
    "patches": [
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon && Math.abs( x - approx ) > epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx - approx ) > epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x / approx ;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) == epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x / approx + approx ;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) != epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x - approx + x / approx ;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) <= epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x / approx + x / approx ;",
        "correctness": "timeout"
      },
      {
        "patch": "if( Math.abs( x - approx ) > epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x - approx + approx ;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx - epsilon ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon || Math.abs( x - approx ) > epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.min( x , approx ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs(( Math.abs( x - approx ) ) > epsilon ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) < epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x - approx ;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx - x ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while(( Math.abs( x - approx ) ) > epsilon ) { approx = x / approx ;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx =( approx + x / approx ) ;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx - approx ) == epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x / approx ; } return approx ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) >= epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( Math.abs( x - approx ) - approx ) > epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( approx - approx ) > epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon && Math.abs( x - approx ) >= epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x - approx > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "} while( Math.abs( x - approx ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x /( approx +5) ;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x /( approx +2) ;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.min( x - approx ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( Math.abs( x - approx ) ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.max( x , approx ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) >= epsilon && Math.abs( x - approx ) > epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx - approx ) <= epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x /5.5;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x /2.2;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - x ) > epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon && Math.abs( x - approx ) <= epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.max( x - approx ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while(( Math.abs( x - approx ) ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.round( x - approx ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x - approx +5;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x - approx +2;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( false ) { while( Math.abs( x - approx ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x - approx == epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x - approx +5.5;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x - approx +2.2;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > approx ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x / approx +5.5;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x / approx +2.2;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - epsilon ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while(( Math.abs( x - approx ) ) > epsilon ) { approx = x - approx ;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x + approx ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon && Math.abs( x - approx ) >5)",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon && Math.abs( x - approx ) >2)",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( ! Math.abs( x - approx ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon && Math.abs( x - approx ) < epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x Math.abs( x - approx ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) >= epsilon ) { approx = x / approx ;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) >5) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) >2) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon && Math.abs( x - approx ) > approx )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( Math.abs( x - approx ) == epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x / approx ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) & epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( true ) { while( Math.abs( x - approx ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x - approx != epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon || Math.abs( x - approx ) >= epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "final while( Math.abs( x - approx ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( Math.abs( x - approx ) != epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx =0.max( approx ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x /5;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x /2;",
        "correctness": "timeout"
      },
      {
        "patch": "if( Math.abs( x - approx ) <= epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { double approx = x / approx ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while(( x - approx - approx ) > epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x + approx ;",
        "correctness": "timeout"
      },
      {
        "patch": "while(( x - approx ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x /0.5;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x /0.2;",
        "correctness": "timeout"
      },
      {
        "patch": "while( x - approx <= epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x *approx ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x / approx ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.min( x + approx ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( Math.abs( x - approx ) > epsilon ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( Math.min( x , approx ) > epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( approx ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx - ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x( approx - approx ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while(( Math.abs( x - approx ) > epsilon ) ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( x > approx ) { while( x > approx ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x - approx >= epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx =0.5;",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx =0.2;",
        "correctness": "timeout"
      },
      {
        "patch": "synchronized( Math.abs( x - approx ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( Math.abs( x - approx ) ) > epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) > x ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x - approx ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) == epsilon ) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs(( x - approx ) > epsilon ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x abs( x - approx ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs(( x - approx ) ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) == epsilon ) { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while(( Math.abs( x - approx ) - approx ) > epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) != epsilon ) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( Math.abs( x - approx ) ) >= epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( x - approx > approx ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( x < approx ) { while( x > approx ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( approx + approx ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) >0) {",
        "correctness": "timeout"
      },
      {
        "patch": "while(( Math.abs( x - approx ) ) >= epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x ) == epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.Math.abs( x - approx ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( Math.abs( x - approx ) > epsilon ) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while(( Math.abs( x - approx ) ) > epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( Math.abs( x - approx ) ) <= epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( x - approx < epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx =0.5.5;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx =0.2.2;",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x - approx.length( ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx =0.x ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( Math.abs( x ) > epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( Math.abs( x - approx ) > epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x ) != epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( x - approx <= approx ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) >= epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x - approx < approx ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( Math.abs( x - approx ) ) > epsilon ) { approx =",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x <= approx ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x /$NUMBER$",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx = x /$NUMBER$",
        "correctness": "uncompilable"
      },
      {
        "patch": "while(( x - approx ) == epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x -5) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x -2) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( x( approx ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( abs( x - approx ) ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x ) <= epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx + approx ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( x - approx == epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x / approx ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( x.length( ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.ceil( x - approx ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( x - approx == approx ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) > epsilon ) { approx =0.MAX",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x - approx - approx > epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while(( Math.abs( x - approx ) ) <= epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( x - approx - approx <= epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( x - approx - approx == epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( Math.abs( x - approx ) >= epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( x < approx - approx ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( x - approx > epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs( x - approx ) <= epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x > approx || x > approx ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( x - approx !=0) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx >= epsilon ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( x - approx != epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( x > approx - approx ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( x - approx >= approx ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( x - epsilon > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx > epsilon ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x - approx >0) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.Double( x - approx ) > epsilon ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x < approx ) { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) < epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x > approx - epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( x > approx ) { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( epsilon - approx ) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "if( x - approx <= epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( x - approx != approx ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( x - approx >=0) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs( x - approx ) == epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x > approx ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.min( x , approx ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x < approx ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( Math.abs(5) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( Math.abs(2) > epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( x <= approx ) { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( x - approx ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x == approx ) { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( approx ) > epsilon )",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( x >= approx ) { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "while( Math.abs( approx ) >= epsilon ) {",
        "correctness": "timeout"
      },
      {
        "patch": "while( x <= approx ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if(( x - approx ) > epsilon ) {",
        "correctness": "wrong"
      },
      {
        "patch": "while( x > epsilon ) {",
        "correctness": "timeout"
      }
    ]
  },
  "SUBSEQUENCES-16-17": {
    "src": "return new Array CaMeL List ( ) ;",
    "patches": [
      {
        "patch": "return new ArrayList < ArrayList < ArrayList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < String >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList >(50) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < Object >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList < String >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList >( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList >(50) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ? >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList < Long >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < return >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList >(50) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < List >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList < String >(50) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < Node >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList < ? >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < int >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < String >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Object >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < LinkedList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < Class >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < char >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList >>( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < LinkedList < String >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < Long >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < List < ArrayList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList < Hashtable >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < Byte >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ? >(50) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < Vector >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList < Object >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new return new ArrayList < ArrayList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList(50) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList >>(50) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < new ArrayList < String >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < Boolean >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList( ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ) >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < String >(50) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList <( >( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < LinkedList < ArrayList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new List < ArrayList < ArrayList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList < static >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = new ArrayList < ArrayList < String >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < LinkedList >(50) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < List < String >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new LinkedList < ArrayList < ArrayList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < String >( ) ; ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList >( ) ; } else ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < Long >(50) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Integer >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList >(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < List < Object >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < List >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList >(50) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new ArrayList < Node >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < new ArrayList < ArrayList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ? >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < class >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < return >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < String >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < LinkedList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList >( a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList >( ) ; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ? >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < HashSet >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < LinkedList >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < int >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < Hashtable >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Vector >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList >>( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList( size ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList >( ) ; ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Byte >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < void >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new ArrayList < ArrayList < static >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < char >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Class >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < Long >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "try { return new ArrayList < ArrayList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ? >(50) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList >>( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return subsequences( a , b , k -1) ;",
        "correctness": "timeout"
      },
      {
        "patch": "result = new ArrayList < ArrayList >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Boolean >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList(50) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList <( > ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList < ArrayList( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new LinkedList < ArrayList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Long >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList(50) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new ArrayList < long >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList(50) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList(50) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList( ) +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new HashSet < ArrayList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList >(50) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ) >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Exception >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList >( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Double >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList >(50) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Short >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < ArrayList(0) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Object >( ) ; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < synchronized >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Entry >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < LinkedList( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < String >( ) ; } else",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new LinkedList < ArrayList( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Thread >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Number >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < / >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < class >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Hashtable >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < float >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList(0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new ArrayList < Date >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return Collections.emptyList( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new List < ArrayList >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new LinkedList( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < while >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new LinkedList( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new HashSet < String >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "List < ArrayList( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new HashSet < Object >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return subsequences( ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = new ArrayList < String >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return subsequences( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Set >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return null ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < boolean >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return subsequences( a ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < Object >( ) ; ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return subsequences(50) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList < String >( ) ; ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( k ==0) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "throw new IllegalArgumentException( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new ArrayList <",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList <  return( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return null ;",
        "correctness": "wrong"
      },
      {
        "patch": "return new List < String >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "throw new >1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new ArrayList <( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return subsequences ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new List < Object >( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return emptyList ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ArrayList.EMPTY_LIST ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return Collections.null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return Collections.EMPTY_LIST ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return subsequences ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "throw new RuntimeException( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new int [1] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new int [0] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return 50; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new List [0] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return new( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "List( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return 50;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "throw null ;",
        "correctness": "wrong"
      },
      {
        "patch": "return list ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "break ;",
        "correctness": "uncompilable"
      }
    ]
  },
  "TO_BASE-21-22": {
    "src": "result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;",
    "patches": [
      {
        "patch": "result = result + String.valueOf( alphabet.charAt( i ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = String.valueOf( alphabet.charAt( i ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return result + String.valueOf( alphabet.charAt( i ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + result + String.valueOf( alphabet.charAt( i ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = alphabet + String.valueOf( alphabet.charAt( i ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.charAt(0) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + alphabet + String.valueOf( alphabet.charAt( i ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = String.valueOf( alphabet.charAt( i ) ).length( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( String.valueOf( b ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.toString( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result += String.valueOf( alphabet.charAt( i ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.toString( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + alphabet.charAt( i ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.toLowerCase( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.charAt( num ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = String.valueOf( alphabet.charAt( i ) ).trim( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.charAt( b ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.charAt( i -1) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.toString( alphabet.charAt( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} result = result + String.valueOf( alphabet.charAt( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( num ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = String.valueOf( alphabet.charAt( i ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.charAt( i ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return result + result + String.valueOf( alphabet.charAt( i ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.substring( i ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = String.valueOf( result.charAt( i ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return alphabet + String.valueOf( alphabet.charAt( i ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( result.charAt( i ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.decode( alphabet.charAt( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = String.valueOf( alphabet , alphabet.charAt( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( result ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.charAt( i , i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( b ) ; } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.charAt( i ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'; result = result + String.valueOf( b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + ''; result = result + String.valueOf( b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( alphabet ).toString( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet ) ; } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = String.valueOf( alphabet.charAt(0) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "this.result = result + String.valueOf( alphabet.charAt( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( value ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = String.valueOf( alphabet.toString( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.toString( ) + String.valueOf( b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "m = result + String.valueOf( alphabet.charAt( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + alphabet.charAt( i ) ; } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( this.alphabet.charAt( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + result + String.valueOf( b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.charAt( i ) ) ; ;",
        "correctness": "wrong"
      },
      {
        "patch": "return String.valueOf( alphabet.charAt( i ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet ).charAt( i ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( to_base( num ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.toString( ) + String.valueOf( alphabet ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( i ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.toLowerCase( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return result + String.valueOf( alphabet.charAt(0) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = String.valueOf( alphabet ).charAt( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'; result = result + String.valueOf( b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = ''; result = result + String.valueOf( b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.charAt( i ).charAt( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.char [ i ] ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( parent.charAt( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( to_base( b ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.toString( ) + alphabet.charAt( i ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf(( int ) b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.charAt(1) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + result ; result = result + String.valueOf( b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = String.valueOf( alphabet.charAt( i ) ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.append( alphabet.charAt( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = String.valueOf( alphabet.toString( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = num / b ; result = result + String.valueOf( alphabet ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = String.valueOf( alphabet.charAt( i , i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return result + String.valueOf( alphabet ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = String.valueOf( alphabet.charAt( i -1) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = alphabet.charAt( i ) ; } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + result + String.valueOf( alphabet ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( num ) ; } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + result.charAt( i ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.length( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.toString(0) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( alphabet.trim( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "} result = String.valueOf( alphabet.charAt( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = String.valueOf( alphabet ).toString( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( '') ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( alphabet [ i ] ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( num / b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + result + String.valueOf( alphabet.toString( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( result ) ; } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( b ) ; result = result ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = String.valueOf( alphabet , String.valueOf( alphabet ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( b +1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'+ String.valueOf( b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + ''+ String.valueOf( b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.charAt( i ) ; result = result.toString( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( num % b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result.substring( i , i ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( value ) ; } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = String.valueOf( alphabet.toLowerCase( i ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( b ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.charAt( i ) + String.valueOf( alphabet ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.toString( b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( alphabet ).toLowerCase( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result.append( String.valueOf( alphabet ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.toString( ) ; result = result.toString( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( num + b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result.charAt( i ) + alphabet.charAt( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.charAt( i ) ; } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( alphabet ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = alphabet + String.valueOf( alphabet.toString( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result.toString( ) ; } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = String.valueOf( alphabet.toLowerCase( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( b , i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + alphabet.charAt( i ).charAt( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( b + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( b + '') ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.substring( i , alphabet.length( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( b ) ; return result ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result.substring( i , alphabet.length( ) -1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result = result + String.valueOf( b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result.charAt( i ).toString( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + result + String.valueOf( num ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = alphabet.charAt( i ).charAt( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf(1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = String.valueOf( result.toString( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = String.valueOf( alphabet ) ; } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.charAt( i ).toLowerCase( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + alphabet.charAt( i ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = String.valueOf( alphabet.charAt( i ) ) ; ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = alphabet + String.valueOf( alphabet ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result.toString( ) + result.toString( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.toString( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + ''.toString( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + alphabet + String.valueOf( alphabet ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.toString( num ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = alphabet.charAt( i ).toString( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return result + alphabet.charAt( i ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + result + alphabet.charAt( i ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result.toString( ) + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.toString( ) + '';",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + String.valueOf( last ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + Integer.toString( b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result.toString( ) + result.length( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "return result + String.valueOf( b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = alphabet.charAt( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + result.toString( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = alphabet.charAt( i ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.substring( i ,0, i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return result + String.valueOf( result ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result.substring( i , result.length( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result.toString( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result.substring(0, i ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + String.valueOf( alphabet +0) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = to_base( num / b ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + result + String.valueOf( i ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result.charAt( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = String.valueOf( alphabet [ i ] ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = String.valueOf( alphabet ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result.substring( i , i +1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'; } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + ''; } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result [ i ].charAt( i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'+ num / b ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + ''+ num / b ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = String.valueOf( alphabet , alphabet ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result +( num / b ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + result.substring( i , i ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + alphabet ; } return result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.charAt( i , i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'+ num ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + ''+ num ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'+ b ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + ''+ b ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = alphabet + alphabet.charAt( i ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'+ result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + ''+ result ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = String.valueOf( alphabet , i ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "String alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'; int i ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "String alphabet = ''; int i ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'+ alphabet ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + ''+ alphabet ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.substring( i ,1) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + num / b ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + alphabet + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + alphabet + '';",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'+ i ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + ''+ i ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result.substring( i , alphabet ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + result + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + result + '';",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + result.length( ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + num % b ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + result + result ;",
        "correctness": "wrong"
      },
      {
        "patch": "result = result + '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = result + '';",
        "correctness": "uncompilable"
      }
    ]
  },
  "TOPOLOGICAL_ORDERING-17-18": {
    "src": "if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {",
    "patches": [
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; listSize ++ ; } } return orderedNodes ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) { orderedNodes.add( nextNode ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) { orderedNodes.add( node ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && ! orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) && ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; listSize ++ ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( node.getSuccessors( ) ) && ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && ! orderedNodes.contains( nextNode ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; listSize ++ ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && orderedNodes.contains( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode ) ) { orderedNodes.add( nextNode ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).isEmpty( ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) && orderedNodes.contains( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).isEmpty( ) ) { orderedNodes.add( nextNode ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.containsAll( nextNode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).contains( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode ) ) { orderedNodes.add( nextNode ) ; listSize ++ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).isEmpty( ) ) { orderedNodes.add( nextNode.getSuccessors( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.containsAll( node.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode ) ) { orderedNodes.add( nextNode ) ; listSize ++ ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! orderedNodes.contains( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if(( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).contains( nextNode ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).isEmpty( ) ) { orderedNodes.add( nextNode.getSuccessors( ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) { orderedNodes.containsAll( nextNode.getSuccessors( ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! orderedNodes.contains( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.containsAll( orderedNodes.getSuccessors( ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( node.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && nextNode.getSuccessors( ).contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).isEmpty( ) ) { orderedNodes.add( nextNode ) ; listSize ++ ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.containsAll( orderedNodes ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( ! orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( orderedNodes.getSuccessors( ) ) && ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode.getSuccessors( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( node.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).isEmpty( ) ) { orderedNodes.add( nextNode ) ; listSize ++ ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) { orderedNodes.containsAll( nextNode.getSuccessors( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; } } return orderedNodes ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode ) ) { orderedNodes.add( nextNode.getSuccessors( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( node.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode.getSuccessors( ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.addAll( nextNode.getSuccessors( ) ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) && nextNode.getSuccessors( ).contains( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).equals( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && !( orderedNodes.contains( nextNode ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).containsAll( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.equals( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).contains( nextNode ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( node.getSuccessors( ) ) && ! orderedNodes.contains( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; listSize ++ ; listSize ++ ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( node ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) { orderedNodes.add( nextNode ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode.getSuccessors( ) ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.isEmpty( ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) { orderedNodes.add( nextNode.getSuccessors( ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode ) ) { orderedNodes.add( nextNode.getSuccessors( ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).contains( nextNode ) ) { orderedNodes.add( nextNode ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode.getSuccessors( ) ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node.getSuccessors( ).isEmpty( ) ) { orderedNodes.add( nextNode.getSuccessors( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( node.getSuccessors( ) ) && ! orderedNodes.contains( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( ! orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; listSize ++ ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && orderedNodes.contains( nextNode ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( node.getSuccessors( ).isEmpty( ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) ) { orderedNodes.add( nextNode ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) orderedNodes.add( nextNode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( orderedNodes.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; listSize ++ ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) && orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.addAll( nextNode.getSuccessors( ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).containsAll( nextNode.getSuccessors( ) ) && orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( node.getSuccessors( ).isEmpty( ) ) { orderedNodes.add( nextNode ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) && ! ! orderedNodes.contains( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( node.getSuccessors( ).contains( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && ! orderedNodes.contains( nextNode ) && orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( orderedNodes.get( i ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; } listSize ++ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! orderedNodes.contains( nextNode ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( node.getSuccessors( ).isEmpty( ) ) { orderedNodes.add( nextNode.getSuccessors( ) ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( node.getSuccessors( ) ) && ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; listSize ++ ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) && nextNode.getSuccessors( ).contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; listSize ++ ; listSize ++ ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) && ! orderedNodes.equals( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && ! orderedNodes.contains( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; } } } return orderedNodes ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getName( ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) { {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) continue ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( node.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode ) ) { orderedNodes.addAll( nextNode.getSuccessors( ) ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) &&( ! orderedNodes.contains( nextNode ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).contains( nextNode ) && orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode ) ) { orderedNodes.add( nextNode ) ; } } return orderedNodes ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( orderedNodes ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) { }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( node ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode ) && ! orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).contains( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && orderedNodes.contains( nextNode ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && orderedNodes.containsAll( orderedNodes ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) &&( orderedNodes.contains( nextNode ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains( i ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.equals( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( orderedNodes ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( orderedNodes.get( nextNode ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).isEmpty( ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && ! ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( node.getSuccessors( ).isEmpty( ) ) { orderedNodes.add( nextNode ) ; listSize ++ ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) && ! orderedNodes.isEmpty( ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( element.getSuccessors( ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).equals( nextNode ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; listSize -- ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( orderedNodes.get(0) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( nextNode ) ; listSize -- ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && nextNode.getSuccessors( ).contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if(( orderedNodes.containsAll( nextNode ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) || ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( ! orderedNodes.containsAll( nextNode ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ).get( nextNode ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! orderedNodes.containsAll( nextNode ) ) { orderedNodes.add( nextNode ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && ! orderedNodes.containsAll( nextNode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode ) ) { orderedNodes.add( nextNode ) ; } }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( node ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextNode.getPredecessors( ).isEmpty( ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).equals( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( node.getPredecessors( ).isEmpty( ) ) { orderedNodes.add( nextNode ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ).contains( nextNode ) ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( node.getPredecessors( ).isEmpty( ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( node.getSuccessors( ) ) && orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( node.getSuccessors( ).contains( nextNode ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if(( orderedNodes.contains( nextNode ) ) && ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode.getSuccessors( ) ) && ! orderedNodes.contains(",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ).contains( nextNode ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( orderedNodes ) ) { orderedNodes.add( nextNode ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ).toString( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) orderedNodes.add( nextNode ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && ! orderedNodes.contains( nextNode ) )",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) && ! orderedNodes.contains( node ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) || orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( node ) && orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) { orderedNodes.add( node ) ;",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode.getSuccessors( ) ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( nextNode.getSuccessors( ).contains( nextNode ) ) {",
        "correctness": "wrong"
      },
      {
        "patch": "if( orderedNodes.containsAll( nextNode ) ) {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if( ! orderedNodes.contains( nextNode ) ) {",
        "correctness": "wrong"
      }
    ]
  },
  "WRAP-31-32": {
    "src": "return lines ;",
    "patches": [
      {
        "patch": "return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; } return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} **/ return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; } ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; return return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; else return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; } } ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ****/",
        "correctness": "uncompilable"
      },
      {
        "patch": "return text ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} *****/",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ***return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return wrap( lines ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} lines.add( lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; return lines ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { return lines ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; } } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ***/ } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; } */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; if ; return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; } ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; } return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return wrap( text ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; else return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return { return lines ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ***/",
        "correctness": "uncompilable"
      },
      {
        "patch": "return text ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; else { return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return text.length( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; return return return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return wrap( lines ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return line ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} **/ } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; } ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} **; return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return text ; } return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return wrap( cols ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } ; return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ; } return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; if return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} *****;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return Collections.EMPTY_LIST ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; else {",
        "correctness": "uncompilable"
      },
      {
        "patch": "return text ; } } ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return return return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return wrap( text ) ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} lines.append( lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ****;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return text ; } ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; } } ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} */ return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ? lines : lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} **/",
        "correctness": "uncompilable"
      },
      {
        "patch": "return text ; else return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} *; return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return return lines ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ***/ if ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; break ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} **return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return line ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; lines.close( ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; } } } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} lines.remove( lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return text ; } */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} *return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ; } ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ****/ ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; } ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ***? */",
        "correctness": "uncompilable"
      },
      {
        "patch": "return { return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} **/ if ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return text ; } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; return in ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines +1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} lines.start( lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return wrap( line ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} lines.append( ' ';",
        "correctness": "uncompilable"
      },
      {
        "patch": "} lines.append( 'abc';",
        "correctness": "uncompilable"
      },
      {
        "patch": "} lines.append( '.lastIndexOf(';",
        "correctness": "uncompilable"
      },
      {
        "patch": "} lines.append( 'c';",
        "correctness": "uncompilable"
      },
      {
        "patch": "return text ; return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} lines.start( ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return text ; } } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} / ***/",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ****? /",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; } */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} / ****/",
        "correctness": "uncompilable"
      },
      {
        "patch": "return return -1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return true ; } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ****/ /",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines -1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; else if ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return false ; } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "if ; return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return wrap( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return [1] ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return line ; } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines +30;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ***;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; return start ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "result = lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ***? /",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; } {",
        "correctness": "uncompilable"
      },
      {
        "patch": "else { return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return { } } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return return 1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines +0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines.length ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return emptyList ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "*****/",
        "correctness": "uncompilable"
      },
      {
        "patch": "return size( ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; if( lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; */",
        "correctness": "uncompilable"
      },
      {
        "patch": "} */",
        "correctness": "uncompilable"
      },
      {
        "patch": "return WRAP ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return return false ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return 0; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; if ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return list ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} */ } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return list ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "else return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return WRAP ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines ; ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return size ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return return 30;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return start ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return cols ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return 0;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} / **/",
        "correctness": "uncompilable"
      },
      {
        "patch": "return size ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return start ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "if return lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return cols ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return lines lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return -1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return return in ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return null ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "} *;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return wrap ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return *lines ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return main ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return in ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return null ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return this ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return out ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return length ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return first ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "break ; }",
        "correctness": "uncompilable"
      },
      {
        "patch": "return max ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return before ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return } ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return 1;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ) ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} ; else",
        "correctness": "uncompilable"
      },
      {
        "patch": "return source ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "} if ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return last ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return if ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return return ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return {",
        "correctness": "uncompilable"
      },
      {
        "patch": "if ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "finally {",
        "correctness": "uncompilable"
      },
      {
        "patch": "break ;",
        "correctness": "uncompilable"
      },
      {
        "patch": "return",
        "correctness": "uncompilable"
      },
      {
        "patch": "}",
        "correctness": "uncompilable"
      },
      {
        "patch": "else",
        "correctness": "uncompilable"
      }
    ]
  }
}