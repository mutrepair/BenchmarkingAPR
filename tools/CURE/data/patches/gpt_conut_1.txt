S-0	n = ( n ^ ( n - 1 ) ) ;
T-0	n = ( n & ( n - 1 ) ) ;
H-0	99.79615196814903	n = ( n ^ ( n - 1 ) ) ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 99.9902 99.9657 99.91 99.0763
H-0	99.78645324707031	n = ( n ^ ( n - 1 ) ) ; count ++ ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 99.9902 99.9657 99.91 99.1923 99.8197 99.9859 99.3117
H-0	99.7048672762784	n = n ^ ( n - 1 ) ;
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 99.7791 99.9771 99.9899 99.9634 99.2683
H-0	99.66486467633929	n = n ^ ( n - 1 ) ; count ++ ;
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 99.7791 99.9771 99.9899 99.9634 98.7262 99.8037 99.9871 99.3056
H-0	99.64346516927084	n = n ^ ( n ^ ( n - 1 ) ) ;
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 98.2374 99.581 99.917 99.9721 99.9888 99.9919 99.9605 99.9855 99.242
H-0	99.63101959228516	n = ( n ^ ( n - 1 ) ) ; count -- ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 99.9902 99.9657 99.91 99.1923 97.1989 99.9794 99.4521
H-0	99.62151336669922	n = ( n & ( n - 1 ) ) ; count ++ ;
P-0	99.9572 99.5686 99.9506 97.4592 99.6913 99.8301 99.8767 99.9837 99.9708 99.9827 99.8006 99.1318 99.8164 99.9838 99.2878
H-0	99.60896809895833	n = n ^ ( n - 1 ) ; } return count ;
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 99.7791 99.9771 99.9899 99.9634 98.0176 99.4067 99.5218 99.8279 99.8754
H-0	99.60256723257211	n = ( n & ( n - 1 ) ) ;
P-0	99.9572 99.5686 99.9506 97.4592 99.6913 99.8301 99.8767 99.9837 99.9708 99.9827 99.8006 99.109
H-0	99.59178873697917	n = ( n - 1 ) ^ ( n - 1 ) ;
P-0	99.9572 99.5686 99.9506 97.9474 99.8016 99.9684 98.219 99.5992 99.9579 99.9469 99.9894 99.9949 99.9625 99.3603
H-0	99.58361002604167	n = ( n ^ ( n - 1 ) ) + 1 ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 99.9902 99.9657 96.4916 99.4818 99.9835 99.4336
H-0	99.57430267333984	n = ( n ^ ( n ^ 1 ) ) ; count ++ ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 97.2147 99.4324 99.9789 99.9689 99.9213 98.9778 99.8184 99.9859 99.3842
H-0	99.56072235107422	n = ( n - 1 ) ; count ++ ; } return count ;
P-0	99.9572 99.5686 99.9506 97.9474 99.8016 99.9684 99.4357 98.7492 99.7907 99.9845 99.2974 99.5135 99.5999 99.8886 99.8654
H-0	99.55965482271634	n = ( n ^ ( n ^ 1 ) ) ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 97.2147 99.4324 99.9789 99.9689 99.9213 99.2532
H-0	99.55907331194196	n = ( n ^ ( n - 1 ) ) ; }
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 99.9902 99.9657 99.91 97.3112 98.2422
H-0	99.55206298828125	n = ( n ^ ( n - 1 ) ) ; n ++ ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 99.9902 99.9657 99.91 95.8922 99.4308 99.9823 99.254
H-0	99.54508972167969	n = ( n - ( n - 1 ) ) ; count ++ ;
P-0	99.9572 99.5686 99.9506 97.9474 98.1062 99.7375 99.8691 99.9467 99.9887 99.8607 99.8383 99.2613 99.8185 99.9851 99.2326
H-0	99.5317138671875	n = n ^ ( n - 1 ) ; count ++ ; }
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 99.7791 99.9771 99.9899 99.9634 98.7262 99.8037 99.9871 99.1274 97.8458
H-0	99.52198893229166	n = ( ( n ^ ( n - 1 ) ) ) ;
P-0	99.9572 99.5686 96.0311 99.8509 99.6936 99.6235 99.8889 99.9328 99.9863 99.9911 99.9387 99.7144 99.8651 99.1345
H-0	99.52086588541667	n = ( n ^ ( n - 1 ) ) - 1 ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 99.9902 99.9657 95.3949 99.5867 99.9841 99.4837
H-0	99.5154037475586	i = ( n ^ ( n - 1 ) ) ; count ++ ;
P-0	99.9117 99.5767 99.9473 99.5597 99.8163 99.9394 99.9067 99.9844 99.9894 99.9558 99.9128 99.0599 99.8219 99.9854 99.3048
H-0	99.51136881510416	n = ( n ^ ( n - 1 ) ) ; break ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 99.9902 99.9657 99.91 95.076 99.9067 99.4143
H-0	99.50808279854911	return n ^ ( n ^ ( n - 1 ) ) ;
P-0	99.2735 99.6871 99.7558 99.9451 98.9416 99.587 99.9327 99.9576 99.9888 99.9797 99.9503 99.9829 99.7714
H-0	99.50511169433594	n += ( n ^ ( n - 1 ) ) ; count ++ ;
P-0	96.0384 99.4607 99.9053 99.4621 99.7858 99.934 99.9404 99.9876 99.9901 99.9646 99.9562 98.8198 99.8008 99.9885 99.3944
H-0	99.49807739257812	b = ( n ^ ( n - 1 ) ) ; count ++ ;
P-0	99.9303 99.6482 99.8517 99.4746 99.7822 99.9303 99.9008 99.9817 99.9891 99.9507 99.9166 98.9956 99.8034 99.9841 99.3818
H-0	99.4956766764323	n = ( n - 1 ) ; count ++ ;
P-0	99.9572 99.5686 99.9506 97.9474 99.8016 99.9684 99.4357 98.7492 99.7907 99.9845 99.1412
H-0	99.49276968149039	n += ( n ^ ( n - 1 ) ) ;
P-0	96.0384 99.4607 99.9053 99.4621 99.7858 99.934 99.9404 99.9876 99.9901 99.9646 99.9562 99.3279
H-0	99.49195274939903	n = ( n - ( n - 1 ) ) ;
P-0	99.9572 99.5686 99.9506 97.9474 98.1062 99.7375 99.8691 99.9467 99.9887 99.8607 99.8383 98.9713
H-0	99.49158393012152	n = ( n - 1 ) ;
P-0	99.9572 99.5686 99.9506 97.9474 99.8016 99.9684 99.4357 99.1417
H-0	99.49117606026786	n = n ^ ( n - 1 ) ; count -- ;
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 99.7791 99.9771 99.9899 99.9634 98.7262 97.2372 99.9829 99.4448
H-0	99.48677825927734	n = ( n + ( n - 1 ) ) ; count ++ ;
P-0	99.9572 99.5686 99.9506 95.5505 99.2859 99.8955 99.929 99.9797 99.9947 99.8574 99.8521 99.2552 99.8129 99.986 99.2602
H-0	99.48607635498047	n = ( n / ( n - 1 ) ) ; count ++ ;
P-0	99.9572 99.5686 99.9506 95.1975 99.7704 99.8515 99.9597 99.9842 99.9744 99.9469 99.839 99.0605 99.813 99.9854 99.2654
H-0	99.48594665527344	n = ( n ^ ( 1 - 1 ) ) ; count ++ ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 95.6975 99.7398 99.771 99.9784 99.9406 99.9072 99.0824 99.8168 99.9845 99.2821
H-0	99.48340657552083	n = ( n ^ ( n - 1 ) ) & 1 ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 99.9902 99.9657 94.8562 99.5093 99.8824 99.6395
H-0	99.48264567057292	return ( n ^ ( n - 1 ) ) ;
P-0	98.6653 99.871 99.6899 99.7848 99.9416 99.8662 99.9821 99.9846 99.9487 99.9666 99.7312
H-0	99.48238699776786	n = n ^ ( n - 1 ) ; n ++ ;
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 99.7791 99.9771 99.9899 99.9634 96.83 99.2542 99.9805 99.2034
H-0	99.48131385216347	i = ( n ^ ( n - 1 ) ) ;
P-0	99.9117 99.5767 99.9473 99.5597 99.8163 99.9394 99.9067 99.9844 99.9894 99.9558 99.9128 99.1826
H-0	99.47744954427084	n = ( n ^ ( n - 1 ) & 1 ) ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 99.9902 94.8923 99.6645 99.8654 99.8371 99.5044
H-0	99.47480010986328	n = ( n ^ ( n - 1 ) ) ; ++ count ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 99.9902 99.9657 99.91 94.9039 99.1719 99.9965 99.2508
H-0	99.47440338134766	n = ( n ^ ( n - 1 ) ) ; return count ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 99.9902 99.9657 99.91 94.8066 99.36 99.774 99.3763
H-0	99.47329711914062	n = ( n ^ ( n + 1 ) ) ; count ++ ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 94.9543 99.9463 99.9959 99.9665 99.9181 99.1421 99.8162 99.9863 99.3409
H-0	99.47168840680804	n = n & ( n - 1 ) ; count ++ ;
P-0	99.9572 98.7713 97.1499 99.6788 99.9086 99.835 99.983 99.9845 99.9518 98.6714 99.8092 99.985 99.2651
H-0	99.47142537434895	n = n ^ ( n - 1 ) ; }
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 99.7791 99.9771 99.9899 99.9634 98.0176 98.1542
H-0	99.47129720052084	n = ( n ^ ( n - 1 ) - 1 ) ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 99.9902 94.7712 99.7632 99.9865 99.8716 99.2791
H-0	99.46961263020833	n = ( n & ( n - 1 ) ) + 1 ;
P-0	99.9572 99.5686 99.9506 97.4592 99.6913 99.8301 99.8767 99.9837 99.9708 99.9827 97.1092 99.5452 99.9866 99.4794
H-0	99.46870930989583	n = n ^ ( n - 1 ) ; } return n ;
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 99.7791 99.9771 99.9899 99.9634 98.0176 99.4067 97.4212 99.8262 99.8737
H-0	99.46732330322266	n = ( n & ( n - 1 ) ) ; count -- ;
P-0	99.9572 99.5686 99.9506 97.4592 99.6913 99.8301 99.8767 99.9837 99.9708 99.9827 99.8006 99.1318 97.2082 99.9757 99.4371
H-0	99.46663041548295	n = n & ( n - 1 ) ;
P-0	99.9572 98.7713 97.1499 99.6788 99.9086 99.835 99.983 99.9845 99.9518 99.2599
H-0	99.46625225360577	b = ( n ^ ( n - 1 ) ) ;
P-0	99.9303 99.6482 99.8517 99.4746 99.7822 99.9303 99.9008 99.9817 99.9891 99.9507 99.9166 99.2569
H-0	99.46369171142578	tmp = ( n ^ ( n - 1 ) ) ; count ++ ;
P-0	99.9368 99.617 99.8869 99.5004 99.7919 99.9298 99.9055 99.9826 99.9906 99.9582 99.9258 98.9821 99.7964 99.9848 99.4294
H-0	99.46148681640625	c = ( n ^ ( n - 1 ) ) ; count ++ ;
P-0	99.9557 99.6221 99.8322 99.5534 99.7796 99.9317 99.9036 99.9815 99.9905 99.9535 99.8971 99.1603 99.8208 99.9837 99.3361
H-0	99.45792061941964	{ n = ( n ^ ( n - 1 ) ) ;
P-0	98.9712 99.9607 99.5348 99.9553 99.6518 99.8549 99.9351 99.9179 99.9844 99.9881 99.9647 99.9063 98.9247
H-0	99.45712716238839	int n = ( n ^ ( n - 1 ) ) ;
P-0	98.6751 99.9712 99.2095 99.9408 99.5443 99.7981 99.93 99.9375 99.9857 99.9887 99.9585 99.9214 99.2768
H-0	99.45266927083334	n = n ^ ( n - 1 ) ; count += n ;
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 99.7791 99.9771 99.9899 99.9634 98.7262 97.3978 98.8975 99.7385 99.5448
H-0	99.45033365885416	n = ( n ^ ( n - 1 ) ) + $NUMBER$ ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 99.9902 99.9657 96.4916 97.5134 99.9517 99.4347
H-0	99.44569749098558	n = ( n - 1 ) ; } return count ;
P-0	99.9572 99.5686 99.9506 97.9474 99.8016 99.9684 99.4357 97.9706 99.3628 99.4921 99.8112 99.8749
H-0	99.44565054086539	n = ( n / ( n - 1 ) ) ;
P-0	99.9572 99.5686 99.9506 95.1975 99.7704 99.8515 99.9597 99.9842 99.9744 99.9469 99.839 99.1404
H-0	99.44480794270834	n = n ^ ( n - ( n - 1 ) ) ;
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 99.7791 95.4667 99.6922 99.9571 99.9763 99.9895 99.8993 99.9792 99.157
H-0	99.44365985576923	n = ( n ^ ( 1 - 1 ) ) ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 95.6975 99.7398 99.771 99.9784 99.9406 99.9072 99.1582
H-0	99.4427001953125	n = n & ( n - 1 ) ; } return count ;
P-0	99.9572 98.7713 97.1499 99.6788 99.9086 99.835 99.983 99.9845 99.9518 98.1137 99.4346 99.5139 99.8269 99.8784
H-0	99.43865559895833	n = ( n - 1 ) - ( n - 1 ) ;
P-0	99.9572 99.5686 99.9506 97.9474 99.8016 99.9684 97.7832 98.0008 99.8997 99.8782 99.9838 99.9959 99.9614 99.23
H-0	99.43574741908482	n = n ^ ( n ^ 1 ) ; count ++ ;
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 98.2374 98.3063 99.9686 99.9769 98.661 99.8117 99.9869 99.3757
H-0	99.43490397135416	n = ( n ^ ( ( n - 1 ) ) ) ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 95.3632 99.8733 99.4916 99.9829 99.9946 99.2248 99.9575 99.9238 99.137
H-0	99.43285319010417	n = n & ( n ^ ( n - 1 ) ) ;
P-0	99.9572 98.7713 97.1499 99.6788 99.9086 97.9228 99.3952 99.906 99.9725 99.988 99.9856 99.9656 99.9865 99.252
H-0	99.432373046875	n = ( n ^ ( n - 1 - 1 ) ) ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 99.9175 99.9841 94.256 99.7541 99.9922 99.9675 99.9025 99.2057
H-0	99.43021647135417	n = ( n - 1 ) + ( n - 1 ) ;
P-0	99.9572 99.5686 99.9506 97.9474 99.8016 99.9684 96.6884 98.9653 99.9281 99.9081 99.9852 99.9961 99.9512 99.1838
H-0	99.42621404474431	n = ( n - 1 ) - 1 ;
P-0	99.9572 99.5686 99.9506 97.9474 99.8016 99.9684 97.7832 99.7589 99.9823 99.3171
H-0	99.42451695033482	n = ( n - 1 ) - 1 ; count ++ ;
P-0	99.9572 99.5686 99.9506 97.9474 99.8016 99.9684 97.7832 99.7589 99.9823 98.5894 99.7943 99.9807 99.2076
H-0	99.42164024939903	tmp = ( n ^ ( n - 1 ) ) ;
P-0	99.9368 99.617 99.8869 99.5004 99.7919 99.9298 99.9055 99.9826 99.9906 99.9582 99.9258 99.2548
H-0	99.42005504261364	n = n ^ ( n ^ 1 ) ;
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 98.2374 98.3063 99.9686 99.9769 99.3557
H-0	99.4199969951923	n = ( n + ( n - 1 ) ) ;
P-0	99.9572 99.5686 99.9506 95.5505 99.2859 99.8955 99.929 99.9797 99.9947 99.8574 99.8521 98.9858
H-0	99.4165790264423	n = ( n ^ ( n + 1 ) ) ;
P-0	99.9572 99.5686 99.9506 99.6092 99.8363 99.9312 94.9543 99.9463 99.9959 99.9665 99.9181 99.1283
H-0	99.41563063401442	n = ( n ^ - 1 ) ; count ++ ;
P-0	99.9572 99.5686 99.9506 99.6092 96.1458 99.9464 99.9764 99.6574 98.8729 99.7999 99.9834 99.2822
H-0	99.4128662109375	return n ^ ( n - 1 ) ;
P-0	99.2735 99.6871 99.7558 99.9451 99.4916 99.9788 99.9821 99.9521 99.7031
H-0	99.40183668870192	c = ( n ^ ( n - 1 ) ) ;
P-0	99.9557 99.6221 99.8322 99.5534 99.7796 99.9317 99.9036 99.9815 99.9905 99.9535 99.8971 99.1409
H-0	99.4003155048077	n = ( n & ( n ^ 1 ) ) ;
P-0	99.9572 99.5686 99.9506 97.4592 99.6913 99.8301 97.5618 99.4798 99.9728 99.98 99.8265 99.2731
H-0	99.39759239783653	n = ( n & ( 1 - 1 ) ) ;
P-0	99.9572 99.5686 99.9506 97.4592 99.6913 97.3296 99.7244 99.9387 99.9699 99.9728 99.8017 99.1517
H-0	99.3890380859375	result = ( n ^ ( n - 1 ) ) ;
P-0	99.9455 99.5756 99.9142 99.5587 99.7886 99.9372 99.9021 99.9823 99.9903 99.9512 99.9322 99.4721
H-0	99.38376089242789	n = ( n | ( n - 1 ) ) ;
P-0	99.9572 99.5686 99.9506 94.2981 99.8414 99.8993 99.9303 99.9854 99.9873 99.9615 99.8812 99.0751
H-0	99.37872314453125	n = ( n ^ n ) ; count ++ ;
P-0	99.9572 99.5686 99.9506 99.6092 96.3244 99.8104 99.7458 98.8719 99.8166 99.9857 99.2512
H-0	99.36654052734374	n = ( n ^ - 1 ) ;
P-0	99.9572 99.5686 99.9506 99.6092 96.1458 99.9464 99.9764 99.6574 99.2007
H-0	99.35941938920455	n = n - ( n - 1 ) ;
P-0	99.9572 98.7713 97.9347 98.0785 99.8676 99.754 99.8959 99.9912 99.8904 99.16
H-0	99.34818522135417	int n = n ^ ( n - 1 ) ;
P-0	98.6751 99.9712 99.1998 99.5929 99.793 99.9401 99.8094 99.9795 99.9903 99.9622 99.0024
H-0	99.33094371448864	n = n - 1 ; } return count ;
P-0	99.9572 98.7713 97.9347 99.7739 99.973 98.2393 99.2464 99.4379 99.7881 99.8655
H-0	99.32630411783855	n = ( n ^ 1 ) ; count ++ ;
P-0	99.9572 99.5686 99.9506 99.6092 95.7391 99.9074 99.7065 98.7878 99.8101 99.9835 99.2426
H-0	99.3171719637784	if ( n ^ ( n - 1 ) )
P-0	99.9934 99.6312 98.975 99.6255 99.9342 99.828 99.9859 99.9767 99.4427 98.9637
H-0	99.31511896306819	i = n ^ ( n - 1 ) ;
P-0	99.9117 98.6311 99.6484 99.7501 99.9423 99.7204 99.9784 99.9889 99.9564 99.3641
H-0	99.31198459201389	n = ( n ^ n ) ;
P-0	99.9572 99.5686 99.9506 99.6092 96.3244 99.8104 99.7458 99.1887
H-0	99.3023681640625	n = ( n - 1 ) ^ n ;
P-0	99.9572 99.5686 99.9506 97.9474 99.8016 99.9684 98.219 98.4534 99.8201 98.9868
H-0	99.29637562144886	n = n ^ ( n ^ n ) ;
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 98.2374 97.1554 99.784 99.9787 99.329
H-0	99.28432395241477	n = n ^ ( n + 1 ) ;
P-0	99.9572 98.7713 99.6483 99.8197 99.9262 95.1956 99.9086 99.9924 99.9651 99.2902
H-0	99.28245239257812	n = n - 1 ; count ++ ;
P-0	99.9572 98.7713 97.9347 99.7739 99.973 97.8026 99.724 99.9827 99.2523
H-0	99.25838216145833	n = ( n ^ 1 ) ;
P-0	99.9572 99.5686 99.9506 99.6092 95.7391 99.9074 99.7065 99.2338
H-0	99.24942016601562	n = ( n - 1 ) ; }
P-0	99.9572 99.5686 99.9506 97.9474 99.8016 99.9684 99.4357 97.9706 98.241
H-0	99.24867553710938	n = n ^ n ; count ++ ;
P-0	99.9572 98.7713 99.6483 97.2121 99.3899 98.7789 99.7932 99.9855 99.2974
H-0	99.24546305338542	n = n ^ n - 1 ;
P-0	99.9572 98.7713 99.6483 97.2121 98.6385 99.959 99.9716 99.3981
H-0	99.20356580946181	n += ( n - 1 ) ;
P-0	96.0384 99.4607 99.9053 98.7181 99.8504 99.9871 99.8588 99.3604
H-0	99.15858289930556	n = ( n + 1 ) ;
P-0	99.9572 99.5686 99.9506 95.5505 99.0788 99.979 99.5385 99.151
H-0	99.14133029513889	n = ( n ^ $NUMBER$ ) ;
P-0	99.9572 99.5686 99.9506 99.6092 94.699 99.922 99.6559 99.2565
H-0	98.91913713727679	n = n - 1 ;
P-0	99.9572 98.7713 97.9347 99.7739 99.973 96.371
S-1	while ( true ) {
T-1	while ( ! queue . is CaMeL Empty ( ) ) {
H-1	100.02664005055146	while ( true ) { Node node = queue . remove CaMeL First ( ) ;
P-1	99.9954 99.6808 99.9784 99.9595 99.4842 99.6739 99.9955 99.8074 99.9892 99.9109 99.9921 99.9583 99.9297 99.9963 99.9986 102.6013
H-1	99.85971248851104	while ( false ) { Node node = queue . remove CaMeL First ( ) ;
P-1	99.9954 96.8574 99.9682 99.9566 99.4878 99.6728 99.9955 99.804 99.9891 99.9096 99.9921 99.958 99.9305 99.9962 99.9987 102.602
H-1	99.79090073529412	while ( true ) { Node node = queue . get CaMeL First ( ) ;
P-1	99.9954 99.6808 99.9784 99.9595 99.4842 99.6739 99.9955 99.8074 99.9892 96.1934 99.9922 99.9667 99.6542 99.9977 99.9979 102.5775
H-1	99.79087727864584	for ( Node node : queue . get CaMeL Successors ( ) ) {
P-1	99.9935 99.9244 99.628 99.1586 99.6187 99.4035 99.7799 99.9972 99.8329 99.9967 99.985 99.9984 99.9076 102.4593
H-1	99.78587431066177	while ( true ) { int node = queue . remove CaMeL First ( ) ;
P-1	99.9954 99.6808 99.9784 99.9595 95.7773 99.5057 99.9495 99.8061 99.989 99.8977 99.9863 99.952 99.9033 99.9935 99.9946 102.4894
H-1	99.75414321001838	while ( true ) { Node node = queue . remove CaMeL Last ( ) ;
P-1	99.9954 99.6808 99.9784 99.9595 99.4842 99.6739 99.9955 99.8074 99.9892 99.9109 99.9921 95.296 99.9691 99.9931 99.9983 102.5951
H-1	99.75108337402344	while ( true ) { node = queue . remove CaMeL First ( ) ;
P-1	99.9954 99.6808 99.9784 99.9595 94.8954 99.9911 99.7598 99.9902 99.8834 99.9827 99.949 99.9859 99.9941 99.9984 102.4716
H-1	99.74793198529412	while ( true ) { Node node = node . remove CaMeL First ( ) ;
P-1	99.9954 99.6808 99.9784 99.9595 99.4842 99.6739 99.9955 95.7059 99.9566 99.7037 99.9849 99.9602 99.5528 99.9985 99.998 102.5849
H-1	99.73701028262867	Vector < Node > queue = new Array CaMeL Deque < Node > ( ) ;
P-1	99.9708 99.9449 99.9222 99.9115 99.93 99.9168 99.7946 99.9979 99.9514 99.9761 99.4922 99.9479 99.998 99.9654 99.9998 103.2385
H-1	99.7231804342831	while ( true ) { Object node = queue . remove CaMeL First ( ) ;
P-1	99.9954 99.6808 99.9784 99.9595 94.5009 99.6819 99.9964 99.7973 99.989 99.8708 99.9498 99.9161 99.9713 99.9961 99.9988 102.5102
H-1	99.71503448486328	Vector < Node > queue = new Array CaMeL Deque < > ( ) ;
P-1	99.9708 99.9449 99.9222 99.9115 99.93 99.9168 99.7946 99.9979 99.9514 99.9761 99.0576 99.997 99.9654 99.9997 103.5333
H-1	99.69629669189453	if ( true ) { node@@ s@@ visited . add ( star@@ tnode ) ;
P-1	99.9974 97.9131 99.9414 99.723 98.153 99.9889 99.9584 99.9955 99.9627 99.8642 99.9648 99.9841 99.9967 99.9992 102.1321
H-1	99.69501495361328	for ( Node node : star@@ tnode . get CaMeL Successors ( ) ) {
P-1	99.9935 99.9244 99.628 99.1586 97.258 99.965 99.9539 99.8042 99.997 99.9192 99.9963 99.9903 99.9977 99.9028 102.4519
H-1	99.6782470703125	for ( Node node : node . get CaMeL Successors ( ) ) {
P-1	99.9935 99.9244 99.628 99.1586 97.0598 99.9881 99.9696 99.9984 99.9178 99.998 99.9944 99.9983 99.9087 102.4567
H-1	99.67689615885416	for ( Node node : queue . remove CaMeL First ( ) ) {
P-1	99.9935 99.9244 99.628 99.1586 99.6187 99.4035 97.9052 99.9811 99.9324 99.9529 99.9972 99.9991 99.8416 102.6379
H-1	99.67507934570312	for ( Node star@@ tnode : queue . get CaMeL Successors ( ) ) {
P-1	99.9935 99.9244 97.6929 99.8576 99.5026 99.1971 99.4309 99.8114 99.9974 99.8892 99.9959 99.987 99.9981 99.8876 102.4563
H-1	99.65998186383929	while ( true ) { Node star@@ tnode = go@@ al@@ node ;
P-1	99.9954 99.6808 99.9784 99.9595 99.4842 97.8958 99.8541 99.9117 97.4728 99.8122 99.9902 99.4209 102.2822
H-1	99.65673828125	synchronized ( queue ) { node@@ s@@ visited . add ( star@@ tnode ) ;
P-1	99.9908 98.1058 99.9146 99.9697 97.9124 99.9935 99.9686 99.996 99.9747 99.8141 99.9621 99.9887 99.9974 99.9992 102.0044
H-1	99.65375518798828	while ( ! ! node@@ s@@ visited . contains ( star@@ tnode ) ) {
P-1	99.9954 97.2016 96.9943 98.9198 99.9441 99.9712 99.9952 99.9797 99.9366 99.8979 99.9848 99.9931 99.9404 99.8408 102.3638
H-1	99.64854329427084	while ( true ) { Node node = queue . remove ( ) ;
P-1	99.9954 99.6808 99.9784 99.9595 99.4842 99.6739 99.9955 99.8074 99.9892 99.9109 94.6753 99.4825 99.9986 102.5949
H-1	99.64850616455078	synchronized ( queue ) { queue . add CaMeL Last ( star@@ tnode ) ;
P-1	99.9908 98.1058 99.9146 99.9697 98.0558 99.9942 99.9747 99.7867 99.7187 99.9988 99.9392 99.9947 99.9952 99.9995 102.0222
H-1	99.64310455322266	if ( go@@ al@@ node == go@@ al@@ node ) { return true ; }
P-1	99.9974 98.1726 99.9022 99.9922 99.5914 99.9236 99.9668 99.9957 99.9524 99.9335 98.8125 99.8598 99.9992 99.8654 100.7587
H-1	99.63756306966145	while ( true ) {
P-1	99.9954 99.6808 99.9784 99.9595 98.7097
H-1	99.6341064453125	if ( go@@ al@@ node == go@@ al@@ node ) { return true ;
P-1	99.9974 98.1726 99.9022 99.9922 99.5914 99.9236 99.9668 99.9957 99.9524 99.9335 98.8125 99.8598 99.9992 100.846
H-1	99.61136881510417	while ( ! node@@ s@@ visited . contains ( star@@ tnode ) ) {
P-1	99.9954 97.2016 98.729 99.9621 99.9731 99.9945 99.9718 99.918 99.8909 99.9804 99.994 99.9466 99.8519 99.2598
H-1	99.60311185396634	while ( true ) { Node star@@ tnode = star@@ tnode ;
P-1	99.9954 99.6808 99.9784 99.9595 99.4842 97.8958 99.8541 99.9117 98.6992 99.9813 97.5959 102.3028
H-1	99.5988525390625	if ( star@@ tnode == go@@ al@@ node ) { return true ; }
P-1	99.9974 98.8701 99.9614 98.7288 99.7278 99.9629 99.9931 99.9544 99.9281 98.706 99.799 99.9991 99.8733 100.9149
H-1	99.58141150841347	synchronized ( node@@ s@@ visited ) { while ( true ) {
P-1	99.9908 98.5583 99.959 99.9462 99.9862 99.9557 98.1807 99.9963 99.656 99.9874 99.9674 101.4586
H-1	99.57575334821429	if ( node@@ s@@ visited . contains ( star@@ tnode ) ) {
P-1	99.9974 98.3354 99.954 99.9517 99.7325 99.7513 99.8657 99.8877 99.9795 99.9951 99.9366 99.8419 99.2652
H-1	99.57014683314732	if ( star@@ tnode == go@@ al@@ node ) { return true ;
P-1	99.9974 98.8701 99.9614 98.7288 99.7278 99.9629 99.9931 99.9544 99.9281 98.706 99.799 99.9991 100.7874
H-1	99.56822916666667	while ( true ) { Node go@@ al@@ node = go@@ al@@ node ;
P-1	99.9954 99.6808 99.9784 99.9595 99.4842 96.2386 99.8868 99.9837 99.9436 97.5959 99.9745 99.9933 99.186 102.1213
H-1	99.5611572265625	while ( node@@ s@@ visited . contains ( star@@ tnode ) ) {
P-1	99.9954 96.2594 99.8939 99.9466 99.9825 99.8119 99.8048 99.8814 99.9805 99.9946 99.9521 99.8603 98.991
H-1	99.55817205255681	while ( true ) { if ( true ) {
P-1	99.9954 99.6808 99.9784 99.9595 95.2958 99.9962 98.6144 99.9474 99.8253 102.3451
H-1	99.54857381184895	while ( true ) { Node node = star@@ tnode ;
P-1	99.9954 99.6808 99.9784 99.9595 99.4842 99.6739 99.9955 96.8626 99.9837 97.3818 102.0856
H-1	99.53223765980114	try { for ( Node node : queue ) {
P-1	99.9926 98.9943 99.9949 99.9335 99.4742 99.2265 99.7302 98.8491 99.9331 102.4392
H-1	99.531005859375	if ( go@@ al@@ node == go@@ al@@ node ) {
P-1	99.9974 98.1726 99.9022 99.9922 99.5914 99.9236 99.9668 99.9957 99.9524 99.9335 99.3779
H-1	99.53059387207031	try { for ( Node node : queue . get CaMeL Successors ( ) )
P-1	99.9926 98.9943 99.9949 99.9335 99.4742 99.2265 99.7302 99.6074 99.7833 99.9972 99.8369 99.9966 99.9864 99.9986 99.6498
H-1	99.52582550048828	if ( go@@ al@@ node == go@@ al@@ node ) { return false ; }
P-1	99.9974 98.1726 99.9022 99.9922 99.5914 99.9236 99.9668 99.9957 99.9524 99.9335 98.8125 97.5611 99.9994 99.8733 101.1728
H-1	99.50304236778847	while ( true ) { Node node = go@@ al@@ node ;
P-1	99.9954 99.6808 99.9784 99.9595 99.4842 99.6739 99.9955 94.9099 99.9489 99.9871 98.3538 102.0706
H-1	99.48558756510417	for ( Node node = queue . remove CaMeL First ( ) ; node
P-1	99.9935 99.9244 99.628 98.1832 99.6829 99.9792 99.8924 99.9828 99.971 99.8778 99.9976 99.9973 99.9231 98.0709
H-1	99.48381696428571	while ( ! node@@ s@@ visited . contains ( star@@ tnode ) )
P-1	99.9954 97.2016 98.729 99.9621 99.9731 99.9945 99.9718 99.918 99.8909 99.9804 99.994 99.9466 97.7145
H-1	99.48320978338069	while ( true ) { while ( true ) {
P-1	99.9954 99.6808 99.9784 99.9595 94.0638 99.9963 99.7032 99.982 99.9674 101.4868
H-1	99.48122336647727	synchronized ( queue ) { while ( true ) {
P-1	99.9908 98.1058 99.9146 99.9697 98.2411 99.9958 99.7566 99.9874 99.9698 101.4463
H-1	99.47687174479167	if ( go@@ al@@ node == go@@ al@@ node ) { return false ;
P-1	99.9974 98.1726 99.9022 99.9922 99.5914 99.9236 99.9668 99.9957 99.9524 99.9335 98.8125 97.5611 99.9994 100.7859
H-1	99.47661590576172	while ( ! node@@ s@@ visited . contains ( go@@ al@@ node ) ) {
P-1	99.9954 97.2016 98.729 99.9621 99.9731 99.9945 99.9718 99.918 97.3089 99.8663 99.992 99.9932 99.9681 99.8965 99.3536
H-1	99.4678067294034	if ( true ) { while ( true ) {
P-1	99.9974 97.9131 99.9414 99.723 97.9153 99.9966 99.7181 99.9864 99.9747 101.4135
H-1	99.46194458007812	if ( star@@ tnode == go@@ al@@ node ) { return true ; } else
P-1	99.9974 98.8701 99.9614 98.7288 99.7278 99.9629 99.9931 99.9544 99.9281 98.706 99.799 99.9991 99.8733 99.6959 98.6273
H-1	99.461181640625	if ( star@@ tnode == go@@ al@@ node ) {
P-1	99.9974 98.8701 99.9614 98.7288 99.7278 99.9629 99.9931 99.9544 99.9281 99.3825
H-1	99.45516967773438	synchronized ( star@@ tnode ) { while ( true ) {
P-1	99.9908 97.3895 99.9696 99.9557 99.9575 98.2207 99.9964 99.5911 99.9823 99.9626 101.5304
H-1	99.4538345336914	while ( true ) { if ( go@@ al@@ node == go@@ al@@ node )
P-1	99.9954 99.6808 99.9784 99.9595 95.2958 99.9962 98.0741 99.9608 99.9929 99.7654 99.9638 99.9779 99.9958 99.9647 99.1582
H-1	99.45191301618304	try { Node node = queue . remove CaMeL First ( ) ;
P-1	99.9926 97.5275 99.6152 99.9964 99.7643 99.9913 99.8833 99.9814 99.9569 99.9753 99.9887 99.9962 99.3708
H-1	99.44833608774039	try { node@@ s@@ visited . add ( star@@ tnode ) ;
P-1	99.9926 97.9556 99.9934 99.9699 99.996 99.9741 99.8047 99.9642 99.9871 99.9953 99.9994 98.9089
H-1	99.44650065104166	if ( ! node@@ s@@ visited . contains ( star@@ tnode ) ) {
P-1	99.9974 95.7001 99.6088 99.9675 99.9783 99.9944 99.9818 99.933 99.9131 99.9799 99.9945 99.9443 99.8405 99.2975
H-1	99.4428955078125	if ( true ) node@@ s@@ visited . add ( star@@ tnode ) ;
P-1	99.9974 97.9131 99.9414 96.9999 99.9861 99.9568 99.9955 99.9516 99.831 99.9586 99.9818 99.996 99.999 99.5688
H-1	99.44095052083334	if ( node@@ s@@ visited . contains ( go@@ al@@ node ) ) {
P-1	99.9974 98.3354 99.954 99.9517 99.7325 99.7513 99.8657 97.2814 99.9176 99.9905 99.9892 99.9573 99.8993 99.4244
H-1	99.43778170072116	while ( node@@ s@@ visited . contains ( star@@ tnode ) )
P-1	99.9954 96.2594 99.8939 99.9466 99.9825 99.8119 99.8048 99.8814 99.9805 99.9946 99.9521 97.6862
H-1	99.41844831194196	for ( Node node : queue . get CaMeL Successors ( ) )
P-1	99.9935 99.9244 99.628 99.1586 99.6187 99.4035 99.7799 99.9972 99.8329 99.9967 99.985 99.9984 97.362
H-1	99.40821184430804	while ( queue . breadth _ first _ search ( ) ) {
P-1	99.9954 96.5074 99.9405 98.2589 99.4997 99.6069 99.9926 99.7317 99.9513 99.7991 99.9553 99.8815 99.093
H-1	99.40256173270089	while ( true ) { Iterator < Node > node = queue .
P-1	99.9954 99.6808 99.9784 99.9595 95.2822 99.8776 99.9539 99.9444 98.9205 99.5123 99.6257 99.9937 99.41
H-1	99.39728252704327	if ( node@@ s@@ visited . contains ( star@@ tnode ) )
P-1	99.9974 98.3354 99.954 99.9517 99.7325 99.7513 99.8657 99.8877 99.9795 99.9951 99.9366 97.2113
H-1	99.37216186523438	synchronized ( node . get CaMeL Successors ( ) ) {
P-1	99.9908 97.6317 99.412 99.8453 99.9971 99.4708 99.9955 99.994 99.9993 99.9615 99.2522
H-1	99.36391977163461	while ( ! queue . contains ( star@@ tnode ) ) {
P-1	99.9954 97.2016 97.6094 99.996 99.0462 99.5938 99.7768 99.9878 99.9939 99.9599 99.8285 99.2401
H-1	99.36388050426136	if ( star@@ tnode != go@@ al@@ node ) {
P-1	99.9974 98.8701 99.9614 99.2155 98.4868 99.9651 99.9926 99.9477 99.897 99.1027
H-1	99.35361735026042	for ( Node node : queue ) {
P-1	99.9935 99.9244 99.628 99.1586 99.6187 99.1814 99.8811 99.6173
H-1	99.34522501627605	return node@@ s@@ visited . contains ( star@@ tnode ) ;
P-1	98.3796 99.9874 99.9711 99.4928 99.1785 99.6981 99.9311 99.9846 99.9963 99.9698 99.7924
H-1	99.33864339192708	while ( go@@ al@@ node == go@@ al@@ node ) {
P-1	99.9954 93.7007 99.8735 99.9913 99.7387 99.917 99.9694 99.9959 99.9409 99.9525 99.4867
H-1	99.33838829627403	try { queue . add CaMeL Last ( star@@ tnode ) ;
P-1	99.9926 96.665 99.9913 99.9677 99.7957 99.7674 99.999 99.939 99.9937 99.9913 99.9996 99.0098
H-1	99.31142171223958	while ( queue . equals ( star@@ tnode ) ) {
P-1	99.9954 96.5074 99.9405 96.901 99.9428 99.5751 99.9795 99.9905 99.9527 99.7986 99.6519
H-1	99.28620910644531	synchronized ( node@@ s@@ visited ) {
P-1	99.9908 98.5583 99.959 99.9462 99.9862 99.9557 98.9777
H-1	99.22286987304688	if ( node == go@@ al@@ node ) {
P-1	99.9974 95.7645 99.751 99.8967 99.968 99.994 99.9659 99.919 99.4058
H-1	99.21582709418402	if ( star@@ tnode != null ) {
P-1	99.9974 98.8701 99.9614 99.2155 99.4573 99.8831 99.4768 98.5144
H-1	99.20005493164062	for ( Node star@@ tnode : queue ) {
P-1	99.9935 99.9244 97.6929 99.8576 99.5026 99.1971 99.1481 99.8509 99.654
H-1	99.19463348388672	while ( true && true ) {
P-1	99.9954 99.6808 95.8638 99.5253 99.9357 99.9462 99.1083
H-1	99.16382853190105	while ( false ) {
P-1	99.9954 96.8574 99.9682 99.9566 98.7039
H-1	99.16286010742188	while ( true ) { Iterator < Node >
P-1	99.9954 99.6808 99.9784 99.9595 95.2822 99.8776 99.9539 99.9444 97.4549
H-1	99.13085327148437	while ( true )
P-1	99.9954 99.6808 99.9784 96.4981
H-1	99.1231689453125	while ( ! true ) {
P-1	99.9954 97.2016 98.5251 99.9432 99.9362 98.7591
H-1	99.08975982666016	if ( node@@ s@@ visited ) {
P-1	99.9974 98.3354 99.954 99.9517 98.1375 99.7373 99.0383
H-1	99.08467864990234	if ( go@@ al@@ node ) {
P-1	99.9974 98.1726 99.9022 99.9922 97.8954 99.9278 99.2233
H-1	99.04901885986328	if ( star@@ tnode != null )
P-1	99.9974 98.8701 99.9614 99.2155 99.4573 99.8831 97.4409
H-1	99.03897094726562	for ( Node node : queue )
P-1	99.9935 99.9244 99.628 99.1586 99.6187 99.1814 97.6277
H-1	99.02688598632812	if ( true ) {
P-1	99.9974 97.9131 99.9414 99.723 99.02
H-1	99.02437046595982	synchronized ( star@@ tnode ) {
P-1	99.9908 97.3895 99.9696 99.9557 99.9575 98.9919
H-1	98.97866821289062	synchronized ( queue ) {
P-1	99.9908 98.1058 99.9146 99.9697 98.9754
H-1	98.81451416015625	return node@@ s@@ visited ;
P-1	98.3796 99.9874 99.9711 99.0689 99.7191
H-1	98.773681640625	synchronized ( true ) {
P-1	99.9908 96.6462 99.9951 99.9756 99.1188
H-1	98.5767333984375	while ( false )
P-1	99.9954 96.8574 99.9682 96.5611
H-1	98.5115966796875	if ( true )
P-1	99.9974 97.9131 99.9414 97.1397
H-1	98.48753051757812	if ( star@@ tnode
P-1	99.9974 98.8701 99.9614 96.0423
H-1	98.3984130859375	result = true ;
P-1	99.9223 98.4023 99.9978 99.5714
H-1	98.38914794921875	Iterator < Node >
P-1	99.9471 99.957 99.9107 96.9111
H-1	98.37659454345703	return true ;
P-1	97.9921 99.9991 99.7542
H-1	98.34095764160156	return queue ;
P-1	97.8591 99.9425 99.8012
H-1	98.26639811197917	try {
P-1	99.9926 98.5196
H-1	98.18122863769531	return false ;
P-1	97.2506 99.9993 99.714
H-1	97.97499084472656	assert true ;
P-1	98.5445 99.9172 99.6448
H-1	97.45790608723958	for (
P-1	99.9935 95.2008
H-1	97.35317993164062	finally {
P-1	99.9942 99.0866
H-1	97.35286458333333	/ *
P-1	99.4262 98.1372
H-1	96.38223266601562	}
P-1	98.5776
S-2	for ( Integer count : arr ) {
T-2	for ( Integer count : counts ) {
H-2	99.89191351996527	for ( Integer count : arr ) {
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 99.8777
H-2	99.65658133370536	int i = 0 ; for ( Integer count : arr ) {
P-2	98.9252 99.9622 99.8125 99.9897 99.5072 99.9753 99.8871 99.5289 99.9693 99.9189 99.9861 99.8997 102.8465
H-2	99.64420318603516	for ( Integer count : arr ) for ( Integer count : arr ) {
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 93.2506 99.9806 99.894 99.4317 99.8432 99.7736 99.9851 99.8718 103.0333
H-2	99.62158203125	for ( Integer count : arr ) { counts . add ( i ) ;
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 96.7528 99.9956 98.5512 99.9316 97.7876 99.2208 99.9988 102.5572
H-2	99.59957449776786	int count = 0 ; for ( Integer count : arr ) {
P-2	98.4594 99.9504 99.6206 99.994 99.4001 99.9775 99.8849 99.525 99.967 99.9201 99.989 99.8921 102.8304
H-2	99.58163452148438	for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {
P-2	99.9817 97.0262 98.9328 99.9272 99.7769 99.9852 99.6074 99.9434 96.059 99.9887 99.8881 99.5319 99.9844 99.874 102.8663
H-2	99.57835388183594	for ( Integer count : arr ) { counts . add ( count ) ;
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 96.7528 99.9956 98.5512 99.9316 96.9742 99.3204 99.9983 102.58
H-2	99.56976318359375	for ( int i = 0 ; i < count ; i ++ ) {
P-2	99.9817 97.0262 98.9328 99.9272 99.7769 99.9852 99.6074 99.9434 95.9794 99.9534 99.8752 99.5065 99.9865 99.8817 102.8198
H-2	99.55604553222656	for ( int i = 0 ; i < arr . length ; i {
P-2	99.9817 97.0262 98.9328 99.9272 99.7769 99.9852 99.6074 99.9434 99.6925 99.9956 99.2625 99.9865 99.9013 96.5693 102.3752
H-2	99.55048963758681	for ( Integer i : arr ) {
P-2	99.9817 99.8979 96.4838 99.9658 99.9017 99.9891 99.9193 99.8821
H-2	99.52766418457031	for ( Integer count : arr ) { for ( Integer count : arr )
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 94.7013 99.9839 99.9026 99.2457 99.9772 99.7155 99.9828 99.784
H-2	99.52394104003906	for ( Integer count : arr ) { if ( count > 0 ) {
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 93.9386 99.9905 97.9235 99.5336 99.3757 99.9561 99.7375 102.778
H-2	99.49161202566964	for ( Integer count : arr ) { int i = 0 ;
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 94.2968 98.5387 99.9575 99.1597 99.9777 101.8028
H-2	99.4908447265625	for ( Integer count : arr ) { int count = 0 ;
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 94.2968 98.5292 99.8793 99.1646 99.9847 101.8677
H-2	99.48820495605469	for ( Integer count : arr )
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 96.6625
H-2	99.4632568359375	for ( int i = 0 ; i < arr . length ; i )
P-2	99.9817 97.0262 98.9328 99.9272 99.7769 99.9852 99.6074 99.9434 99.6925 99.9956 99.2625 99.9865 99.9013 97.8436 99.6163
H-2	99.44492594401042	for ( Integer counts : arr ) {
P-2	99.9817 99.8979 95.601 99.9076 99.8889 99.9894 99.9229 99.8819
H-2	99.43262532552083	for ( Integer count : arr ) counts . add ( i ) ;
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 95.8477 99.9928 99.2208 99.7432 98.4006 99.543 99.999 99.4992
H-2	99.43142700195312	for ( int i = 0 ; i < arr . size ( ) ;
P-2	99.9817 97.0262 98.9328 99.9272 99.7769 99.9852 99.6074 99.9434 99.6925 99.9956 98.5529 99.9974 99.9982 99.994 97.5584
H-2	99.42259803185097	for < arr . size ( ) ; i ++ ) {
P-2	95.0608 99.6368 99.9936 98.9202 99.997 99.998 99.9177 99.8848 99.6918 99.9764 99.9068 99.5768
H-2	99.42012532552083	for ( Integer count : arr ) for ( Integer count : arr )
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 93.2506 99.9806 99.894 99.4317 99.8432 99.7736 99.9851 99.8997
H-2	99.41480509440105	for ( Integer count : arr ) { / * /
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 97.0892 99.5228 97.7705 99.4456
H-2	99.40596147017045	for ( Integer count : sorted _ arr ) {
P-2	99.9817 99.8979 99.5591 99.9678 94.5584 99.9149 99.8745 99.9845 99.913 99.881
H-2	99.38918728298611	for ( int count : arr ) {
P-2	99.9817 97.0262 98.5302 99.4236 99.8953 99.9631 99.9053 99.8443
H-2	99.37827962239584	for ( int i = 0 ; i < arr . ] ) {
P-2	99.9817 97.0262 98.9328 99.9272 99.7769 99.9852 99.6074 99.9434 99.6925 99.9956 97.4112 98.7874 99.9092 99.7646
H-2	99.37734985351562	if ( arr . size ( ) > 0 ) {
P-2	99.9833 98.6604 99.9855 99.3124 99.9938 99.9977 99.9446 99.6833 99.9786 99.7414 99.2687
H-2	99.36079915364583	for ( int i = 0 ; i < $NUMBER$ ; i ++ )
P-2	99.9817 97.0262 98.9328 99.9272 99.7769 99.9852 99.6074 99.9434 96.059 99.9887 99.8881 99.5319 99.9844 99.846
H-2	99.34859212239583	for ( Iterator < Integer > count : arr ) {
P-2	99.9817 94.8939 99.9251 99.8312 99.9867 98.9965 99.0233 99.8802 99.9622 99.8953 99.8741
H-2	99.34795735677083	for ( int i = 0 ; i < count ; i ++ )
P-2	99.9817 97.0262 98.9328 99.9272 99.7769 99.9852 99.6074 99.9434 95.9794 99.9534 99.8752 99.5065 99.9865 99.8046
H-2	99.342578125	for ( Integer count : arr ) counts . add ( count ) ;
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 95.8477 99.9928 99.2208 99.7432 97.0511 99.5173 99.9981 99.5247
H-2	99.34105767144098	for ( Long count : arr ) {
P-2	99.9817 95.0948 99.3987 99.9687 99.9196 99.9873 99.9053 99.8803
H-2	99.33892415364583	if ( Collections . n CaMeL Copies ( count , i ) ) {
P-2	99.9833 97.7261 99.9982 99.7655 99.9964 99.9859 99.9967 99.3277 99.986 98.9299 99.5383 99.5317 99.7355 99.6041
H-2	99.332080078125	for ( int i = 0 ; i < arr . length ; i
P-2	99.9817 97.0262 98.9328 99.9272 99.7769 99.9852 99.6074 99.9434 99.6925 99.9956 99.2625 99.9865 99.9013 96.029
H-2	99.3271484375	for < arr . length ; i ++ ) {
P-2	95.0608 99.6368 99.9936 99.0913 99.9789 99.9175 99.5255 99.9896 99.8729 99.5987
H-2	99.31901411576705	for ( Integer count : arr ) { / *
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 97.0892 99.5228 96.7477
H-2	99.30472412109376	for ( Integer count ] : arr ) {
P-2	99.9817 99.8979 99.5591 94.1093 99.8353 99.9283 99.991 99.9097 99.9019
H-2	99.29622977120536	if ( sorted _ arr . size ( ) > 0 ) {
P-2	99.9833 96.7696 99.9318 99.8206 99.8999 99.0643 99.9959 99.9977 99.9369 99.7009 99.9803 99.7528 99.3349
H-2	99.29515491832386	for ( Integer count > count : arr ) {
P-2	99.9817 99.8979 99.5591 94.6316 98.7184 99.8678 99.9041 99.9811 99.9007 99.871
H-2	99.2852783203125	for ( Integer < Integer > count : arr ) {
P-2	99.9817 99.8979 93.1678 99.4462 99.9666 99.4209 99.9379 99.9059 99.9872 99.8938 99.8844
H-2	99.28426106770833	for ( Integer count : $NUMBER$ ) {
P-2	99.9817 99.8979 99.5591 99.9678 94.4579 99.9762 99.9155 99.8693
H-2	99.26882102272727	for ( Integer count - 1 : arr ) {
P-2	99.9817 99.8979 99.5591 93.8246 99.1982 99.9368 99.8989 99.9633 99.9057 99.8578
H-2	99.26666259765625	if ( counts . size ( ) > 0 ) {
P-2	99.9833 97.1131 99.9856 99.4977 99.9962 99.9976 99.9486 99.7022 99.9746 99.7563 99.2663
H-2	99.26537407769098	for ( Integer k : arr ) {
P-2	99.9817 99.8979 93.9067 99.9741 99.9106 99.9887 99.9132 99.8824
H-2	99.2643330891927	for ( Integer count : arr ) { / * }
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 97.0892 99.5228 96.0852 99.3253
H-2	99.26427544487848	for ( Integer 1 : arr ) {
P-2	99.9817 99.8979 94.3279 99.5434 99.9048 99.9903 99.9074 99.8921
H-2	99.25944010416667	for ( Integer count >= 0 ; i ++ ) {
P-2	99.9817 99.8979 99.5591 94.2222 99.6659 99.8103 98.7484 99.7145 99.9878 99.86 99.7323
H-2	99.25755004882812	for ( final Integer count : arr ) {
P-2	99.9817 93.4559 99.9202 99.5708 99.9681 99.9279 99.9872 99.9114 99.9192
H-2	99.25442504882812	if ( arr . size ( ) > 1 ) {
P-2	99.9833 98.6604 99.9855 99.3124 99.9938 99.9977 99.9446 98.1235 99.9787 99.7341 99.3607
H-2	99.2521084872159	for ( Integer count : arr ) + 1 ;
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 93.7269 99.2455 99.8939 99.6639
H-2	99.24786846454327	Iterator < Integer > count = arr . iterator ( ) ;
P-2	99.9208 99.8712 99.987 98.6748 99.971 99.7854 99.9946 99.3013 99.9983 99.9916 99.9951 99.3067
H-2	99.2425028483073	for ( Integer count : arr [ i ] ) {
P-2	99.9817 99.8979 99.5591 99.9678 99.916 93.1001 99.3556 99.5002 99.9865 99.9118 99.8004
H-2	99.23421902126736	for ( Integer count : counts ) {
P-2	99.9817 99.8979 99.5591 99.9678 93.9959 99.9884 99.9138 99.8702
H-2	99.23404634915866	for ( Integer count : arr ) { counts . set (
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 96.7528 99.9956 99.6619 99.9734 94.5093
H-2	99.23157755533855	for ( Integer count : arr ) { / / }
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 97.0892 98.4033 96.9424 99.1946
H-2	99.22398885091145	for ( int i = 0 ; ++ i ) {
P-2	99.9817 97.0262 98.9328 99.9272 99.7769 99.9852 96.1041 99.7756 99.6957 99.9201 99.6294
H-2	99.22257486979167	for ( Integer count >= 0 ; count ++ ) {
P-2	99.9817 99.8979 99.5591 94.2222 99.6659 99.8103 98.4492 99.6267 99.9763 99.8485 99.7
H-2	99.21917724609375	for ( String count : arr ) {
P-2	99.9817 94.5501 98.8413 99.9678 99.925 99.9861 99.9168 99.8708
H-2	99.21674138849431	for ( Integer count > i : arr ) {
P-2	99.9817 99.8979 99.5591 94.6316 97.9313 99.7736 99.9085 99.9859 99.9085 99.873
H-2	99.21458604600694	for ( Integer arr : arr ) {
P-2	99.9817 99.8979 93.4735 99.9544 99.9028 99.9921 99.9098 99.8861
H-2	99.21400960286458	for ( Integer count : arr ) { / * ;
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 97.0892 99.5228 95.225 99.5817
H-2	99.21381170099431	for ( Integer count > arr : arr ) {
P-2	99.9817 99.8979 99.5591 94.6316 97.9965 99.6936 99.8963 99.9905 99.9011 99.8705
H-2	99.21043812144886	for ( Integer count : arr + 1 ) {
P-2	99.9817 99.8979 99.5591 99.9678 99.916 93.0603 99.2271 99.9918 99.9111 99.869
H-2	99.208740234375	for ( Integer count : arr ) { / /
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 97.0892 98.4033 96.6541
H-2	99.20842895507812	} for ( Integer count : arr ) {
P-2	99.9044 99.9808 99.8927 99.5495 99.9608 99.9091 99.9885 99.9286 99.8872
H-2	99.1924560546875	for ( Integer count 1 : arr ) {
P-2	99.9817 99.8979 99.5591 92.9923 99.8417 99.9199 99.9858 99.9138 99.8993
H-2	99.190869140625	for ( Integer 1 count : arr ) {
P-2	99.9817 99.8979 94.3279 98.1476 99.9381 99.9126 99.9811 99.8989 99.8899
H-2	99.17306857638889	for ( Integer count : count ) {
P-2	99.9817 99.8979 99.5591 99.9678 93.4711 99.9901 99.8977 99.8593
H-2	99.16949462890625	for ( Integer max : arr ) {
P-2	99.9817 99.8979 93.0611 99.9588 99.9126 99.986 99.9089 99.8853
H-2	99.16615804036458	for ( Integer count : arr ) ;
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 93.4667 99.7856
H-2	99.15375366210938	for ( Integer count : arr ) continue ;
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 93.0022 99.9749 99.3173
H-2	99.152587890625	for ( Object count : arr ) {
P-2	99.9817 94.0827 98.7309 99.9655 99.9143 99.9906 99.9152 99.8593
H-2	99.14914957682292	for ( Integer count : 0 ) {
P-2	99.9817 99.8979 99.5591 99.9678 93.2481 99.9764 99.9119 99.8663
H-2	99.14571380615234	for ( int i = 0 ;
P-2	99.9817 97.0262 98.9328 99.9272 99.7769 99.9852 97.6027
H-2	99.14562377929687	for ( Integer count : arr ) { {
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 99.9064 92.4917 99.815
H-2	99.14180908203124	for ( Integer Integer count : arr ) {
P-2	99.9817 99.8979 92.3618 99.5789 99.9555 99.9152 99.9841 99.9051 99.9049
H-2	99.13720703125	for ( int i : arr ) {
P-2	99.9817 97.0262 98.9328 96.7287 99.8868 99.9756 99.9171 99.8529
H-2	99.12822808159723	for ( Integer count : arr ) ++
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 93.7324 99.1785
H-2	99.12814331054688	for ( Integer count ++ : arr ) {
P-2	99.9817 99.8979 99.5591 92.7255 99.537 99.8967 99.9579 99.9023 99.8902
H-2	99.12590196397569	for ( Integer iterator : arr ) {
P-2	99.9817 99.8979 92.6856 99.9606 99.8978 99.9799 99.9206 99.876
H-2	99.11702880859374	if ( arr . length > 0 ) {
P-2	99.9833 98.6604 99.9855 98.3729 99.695 99.6451 99.9716 99.7142 99.1638
H-2	99.113330078125	for < arr . length ; i ) {
P-2	95.0608 99.6368 99.9936 99.0913 99.9789 99.9175 98.0461 99.8747 99.6005
H-2	99.113232421875	for ( int i = 0 ; ) {
P-2	99.9817 97.0262 98.9328 99.9272 99.7769 99.9852 95.979 99.9321 99.6581
H-2	99.09575737847223	for ( Integer count : 1 ) {
P-2	99.9817 99.8979 99.5591 99.9678 92.7612 99.9791 99.9137 99.8682
H-2	99.09013536241319	for ( Integer count : list ) {
P-2	99.9817 99.8979 99.5591 99.9678 92.7094 99.9888 99.9082 99.8654
H-2	99.08936225043402	for ( int counts : arr ) {
P-2	99.9817 97.0262 95.5866 99.653 99.8666 99.9812 99.921 99.8548
H-2	99.08476426866319	for ( float count : arr ) {
P-2	99.9817 93.0137 99.2433 99.9305 99.899 99.9814 99.9124 99.8681
H-2	99.08333587646484	for ( Integer i : arr )
P-2	99.9817 99.8979 96.4838 99.9658 99.9017 99.9891 96.5137
H-2	99.08111572265625	for ( Integer count : arr ) * /
P-2	99.9817 99.8979 99.5591 99.9678 99.916 99.9877 93.0041 99.0215 99.5425
H-2	99.07703993055556	for ( Integer version : arr ) {
P-2	99.9817 99.8979 92.2045 99.9721 99.9207 99.9898 99.9115 99.882
H-2	99.07179090711806	for ( Integer min : arr ) {
P-2	99.9817 99.8979 92.1766 99.9643 99.9115 99.9878 99.909 99.8842
H-2	99.05289713541667	for ( Integer count : i ) {
P-2	99.9817 99.8979 99.5591 99.9678 92.4326 99.9434 99.9091 99.8514
H-2	99.05277506510417	for ( Integer [ : arr ) {
P-2	99.9817 99.8979 93.5319 98.4843 99.8895 99.9856 99.9006 99.8704
H-2	99.052490234375	for ( Integer 0 : arr ) {
P-2	99.9817 99.8979 92.2021 99.7804 99.8912 99.9806 99.9155 99.8899
H-2	98.96885681152344	for ( Integer : arr ) {
P-2	99.9817 99.8979 92.2709 99.9048 99.9889 99.9132 99.8605
H-2	98.96174621582031	for ( Integer counts : arr )
P-2	99.9817 99.8979 95.601 99.9076 99.8889 99.9894 96.4944
H-2	98.88792928059895	for ( int ) {
P-2	99.9817 97.0262 96.7602 99.9389 99.6875
H-2	98.76171003069196	for ( Iterator < Integer >
P-2	99.9817 94.8939 99.9251 99.8312 99.9867 96.7804
H-2	98.75940958658855	int i = 0 ;
P-2	98.9252 99.9622 99.8125 99.9897 98.8833
H-2	98.67173258463542	int count = 0 ;
P-2	98.4594 99.9504 99.6206 99.994 99.0225
H-2	98.34956665039063	for ( int }
P-2	99.9817 97.0262 95.9799 98.827
S-3	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) {
T-3	node@@ s@@ visited . add ( node ) ; for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) {
H-3	99.90005313648896	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 99.0423
H-3	99.86208984375	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { if ( search ( node ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 99.4413 99.9979 99.892 99.9996 95.4356 99.5409 99.9131 99.9814 103.092
H-3	99.86091796875	for ( Node success@@ or@@ nodes : get CaMeL Successors ( ) ) { if ( search ( success@@ or@@ nodes ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 95.3127 99.9928 99.8964 99.9934 99.9385 99.9986 99.9781 99.4465 99.9979 99.8908 99.9994 99.863 99.9963 99.9974 99.9075 99.8447 99.987 103.0033
H-3	99.84731038411458	if ( node == go@@ al@@ node ) { return true ; } else if ( node == go@@ al@@ node ) {
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 99.6111 99.9995 99.8779 99.8585 99.0597 99.9972 99.9021 99.9167 99.9608 99.9736 99.9933 99.9838 99.9874 102.1894
H-3	99.8176981608073	if ( node == go@@ al@@ node ) { return false ; } else if ( node == go@@ al@@ node ) {
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 98.8458 99.9996 99.8702 99.8925 99.0951 99.9968 99.9021 99.9192 99.9618 99.9743 99.9933 99.9841 99.9887 102.1766
H-3	99.81531778971355	for ( Node node : node . get CaMeL Successors ( ) ) { if ( node == go@@ al@@ node ) {
P-3	99.9969 99.9383 96.4401 99.565 99.4523 99.9925 99.9769 99.9958 99.937 99.9979 99.9907 99.9983 99.9818 99.4392 99.998 99.0827 99.918 99.9633 99.9721 99.9927 99.9666 99.9857 102.1558
H-3	99.7822265625	for ( Node node : node . get CaMeL Successors ( ) ) { if ( search ( node ) ) {
P-3	99.9969 99.9383 96.4401 99.565 99.4523 99.9925 99.9769 99.9958 99.937 99.9979 99.9907 99.9983 99.9818 99.4392 99.998 99.1019 99.9995 98.8297 99.4768 99.9254 99.9818 103.1458
H-3	99.77974609375	for ( Node success@@ or@@ nodes : list ) { if ( search ( success@@ or@@ nodes ) ) { return true ; }
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 94.2434 99.8058 99.9747 99.4189 99.9974 99.889 99.9995 99.8112 99.9966 99.9974 99.8959 99.8774 99.9839 99.3484 99.8995 99.9995 99.8335 103.0431
H-3	99.773271484375	for ( Node success@@ or@@ nodes : node . size ( ) ) { if ( search ( success@@ or@@ nodes ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 93.363 99.9926 99.9995 99.9991 99.9874 99.2247 99.9977 99.8946 99.9995 99.8684 99.9958 99.9973 99.8907 99.8004 99.9843 102.9565
H-3	99.76365234375	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { if ( search ( Node ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 99.4413 99.9979 99.892 99.9996 95.3292 97.4905 99.5921 99.9872 103.1034
H-3	99.7465234375	for ( Node node : node . get CaMeL Successors ( ) ) { if ( search ( success@@ or@@ nodes ) ) {
P-3	99.9969 99.9383 96.4401 99.565 99.4523 99.9925 99.9769 99.9958 99.937 99.9979 99.9907 99.9983 99.9818 99.4392 99.998 99.1019 99.9995 99.3125 98.0319 99.9321 99.876 99.8044 99.9866 103.0877
H-3	99.744912109375	if ( node == go@@ al@@ node ) { return true ; } } else if ( node == go@@ al@@ node ) {
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 99.6111 99.9995 99.8779 97.4468 98.8537 99.4455 99.9978 99.8958 99.9164 99.9611 99.9732 99.9927 99.98 99.9897 102.6572
H-3	99.741845703125	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { if ( search ( null ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 99.4413 99.9979 99.892 99.9996 93.5806 98.7261 99.7941 99.9846 102.8712
H-3	99.7405017671131	for ( Node success@@ or@@ nodes : list ) { if ( search ( success@@ or@@ nodes ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 94.2434 99.8058 99.9747 99.4189 99.9974 99.889 99.9995 99.8112 99.9966 99.9974 99.8959 99.8774 99.9839 102.1809
H-3	99.7385009765625	if ( node == go@@ al@@ node ) { return true ; } else { return false ; }
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 99.6111 99.9995 99.8779 99.8585 99.4838 97.9433 99.5509 99.9995 99.9295 102.4916
H-3	99.72948201497395	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { if ( search ( ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 99.4413 99.9979 99.892 99.9996 92.8032 99.745 99.9831 102.3869
H-3	99.72845703125	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { boolean search ( success@@ or@@ nodes ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 93.3248 99.3085 99.9792 99.7432 99.9967 99.9959 99.8753 99.7476 101.9817
H-3	99.72620210193452	if ( node == go@@ al@@ node ) { return true ; } else { return false ; } }
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 99.6111 99.9995 99.8779 99.8585 99.4838 97.9433 99.5509 99.9995 99.9295 99.1347 102.8371
H-3	99.71678670247395	for ( Object node : node . get CaMeL Successors ( ) ) { if ( node == go@@ al@@ node ) {
P-3	99.9969 94.472 99.1584 99.8336 99.3452 99.9911 99.9784 99.9956 99.927 99.9981 99.9909 99.9988 99.9833 99.4436 99.9981 99.3102 99.9105 99.9625 99.9722 99.993 99.9707 99.9861 102.157
H-3	99.71615600585938	for ( Node success@@ or@@ nodes : list ) { if ( search ( success@@ or@@ nodes ) ) { return true ;
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 94.2434 99.8058 99.9747 99.4189 99.9974 99.889 99.9995 99.8112 99.9966 99.9974 99.8959 99.8774 99.9839 99.3484 99.8995 99.9995 101.5705
H-3	99.715283203125	for ( Node node : node@@ s@@ visited ) { if ( node == go@@ al@@ node ) {
P-3	99.9969 99.9383 96.4401 99.565 98.6163 99.9463 99.9759 99.4873 99.9812 99.4161 99.9975 99.3327 99.9323 99.9642 99.9806 99.993 99.9801 99.9843 101.9478
H-3	99.7121484375	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { String search ( success@@ or@@ nodes ) ;
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 95.2895 97.0775 99.8176 99.6203 99.9961 99.9965 99.8525 99.8316 102.0636
H-3	99.7092815896739	for ( Node node : node@@ s@@ visited ) { if ( node == go@@ al@@ node ) { return true ;
P-3	99.9969 99.9383 96.4401 99.565 98.6163 99.9463 99.9759 99.4873 99.9812 99.4161 99.9975 99.3327 99.9323 99.9642 99.9806 99.993 99.9801 99.9843 99.4887 99.6503 99.9995 101.8171
H-3	99.705322265625	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { return true ; } }
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 93.8432 99.8 99.999 99.743 98.9378 101.9352
H-3	99.70416259765625	for ( Node node : node@@ s@@ visited ) { if ( node == go@@ al@@ node ) { return true ; }
P-3	99.9969 99.9383 96.4401 99.565 98.6163 99.9463 99.9759 99.4873 99.9812 99.4161 99.9975 99.3327 99.9323 99.9642 99.9806 99.993 99.9801 99.9843 99.4887 99.6503 99.9995 99.8441 101.5593
H-3	99.70228271484375	for ( Node < Node > success@@ or@@ nodes : node . get CaMeL Successors ( ) ) {
P-3	99.9969 99.9383 96.0731 99.8686 99.9557 99.5603 99.9719 99.9763 99.9774 99.9165 99.9952 99.9825 99.9959 99.9358 99.997 99.9892 99.9985 99.9777 99.109
H-3	99.69513494318181	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { if ( true ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 99.4413 99.9979 93.0237 99.8347 99.9735 101.7631
H-3	99.68700408935547	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) )
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 95.7133
H-3	99.68237915039063	if ( node == go@@ al@@ node ) { return true ; } else { return true ; }
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 99.6111 99.9995 99.8779 99.8585 99.4838 97.9433 98.4944 99.9994 99.9347 102.4205
H-3	99.6797265625	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { if ( search ( success@@ or@@ nodes )
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 99.4413 99.9979 99.892 99.9996 99.8731 99.9969 99.9971 99.9145 93.6223
H-3	99.66724694293478	if ( node == go@@ al@@ node ) { return true ; } else if ( node == go@@ al@@ node )
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 99.6111 99.9995 99.8779 99.8585 99.0597 99.9972 99.9021 99.9167 99.9608 99.9736 99.9933 99.9838 98.1879
H-3	99.665673828125	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { if ( search ( success@@ or@@ nodes ,
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 99.4413 99.9979 99.892 99.9996 99.8731 99.9969 99.9971 97.3222 95.8634
H-3	99.66481711647727	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { if ( false ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 99.4413 99.9979 92.533 99.764 99.977 101.6544
H-3	99.66189575195312	Array CaMeL List < Node > node@@ s@@ visited = new Hash CaMeL Set < Node > ( ) ; class Search {
P-3	99.931 99.6325 99.9806 99.9305 99.9882 99.9038 99.9813 99.9682 99.9926 99.9677 99.7932 99.9944 99.9546 99.9725 99.3304 99.9832 99.9982 99.9521 99.9998 98.4146 99.9426 99.8577 101.169
H-3	99.65852864583333	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { if ( search ( node ) )
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 99.4413 99.9979 99.892 99.9996 95.4356 99.5409 99.9131 98.326
H-3	99.6495361328125	for ( Node success@@ or@@ nodes : get CaMeL Successors ( ) ) { if ( search ( success@@ or@@ nodes ) )
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 95.3127 99.9928 99.8964 99.9934 99.9385 99.9986 99.9781 99.4465 99.9979 99.8908 99.9994 99.863 99.9963 99.9974 99.9075 99.8447 98.0562
H-3	99.645615234375	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { if ( node == go@@ al@@ node )
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 99.4413 99.9979 94.6914 99.9141 99.9609 99.9787 99.9931 99.9702 97.934
H-3	99.64066569010417	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { if ( search ( success@@ or@@ nodes
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 99.4413 99.9979 99.892 99.9996 99.8731 99.9969 99.9971 92.9196
H-3	99.63545558763587	if ( node == go@@ al@@ node ) { return false ; } else if ( node == go@@ al@@ node )
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 98.8458 99.9996 99.8702 99.8925 99.0951 99.9968 99.9021 99.9192 99.9618 99.9743 99.9933 99.9841 98.1561
H-3	99.63148564877717	Array CaMeL List < Node > node@@ s@@ visited = new Hash CaMeL Set < > ( ) ; class Search {
P-3	99.931 99.6325 99.9806 99.9305 99.9882 99.9038 99.9813 99.9682 99.9926 99.9677 99.7932 99.9944 99.9546 99.9725 99.2198 99.9981 99.9567 99.9997 98.3574 99.9488 99.8311 100.9745
H-3	99.62359328497024	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { return true ; }
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 93.8432 99.8 99.999 99.743 99.4514
H-3	99.62281436011905	Array CaMeL List < Node > node@@ s@@ visited = new Hash CaMeL Set < Node > ( ) ;
P-3	99.931 99.6325 99.9806 99.9305 99.9882 99.9038 99.9813 99.9682 99.9926 99.9677 99.7932 99.9944 99.9546 99.9725 99.3304 99.9832 99.9982 99.9521 99.9998 99.5774
H-3	99.62057362432066	for ( Node node : node . get CaMeL Successors ( ) ) { if ( node == go@@ al@@ node )
P-3	99.9969 99.9383 96.4401 99.565 99.4523 99.9925 99.9769 99.9958 99.937 99.9979 99.9907 99.9983 99.9818 99.4392 99.998 99.0827 99.918 99.9633 99.9721 99.9927 99.9666 97.8471
H-3	99.61116750616776	if ( node == go@@ al@@ node ) { return true ; } else { return false ;
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 99.6111 99.9995 99.8779 99.8585 99.4838 97.9433 99.5509 99.9995 100.2632
H-3	99.6091552734375	for ( Node node : node . get CaMeL Successors ( ) ) {
P-3	99.9969 99.9383 96.4401 99.565 99.4523 99.9925 99.9769 99.9958 99.937 99.9979 99.9907 99.9983 99.9818 99.0441
H-3	99.59953002929687	Array CaMeL List < Node > node@@ s@@ visited = new Hash CaMeL Set < > ( ) ;
P-3	99.931 99.6325 99.9806 99.9305 99.9882 99.9038 99.9813 99.9682 99.9926 99.9677 99.7932 99.9944 99.9546 99.9725 99.2198 99.9981 99.9567 99.9997 99.5782
H-3	99.59902556046195	for ( Node success@@ or@@ nodes < Node > success@@ or@@ nodes : node . get CaMeL Successors ( ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 93.5085 99.8108 99.8373 99.313 99.9908 99.9805 99.9307 99.8986 99.9953 99.9819 99.9961 99.9287 99.9964 99.9878 99.9984 99.9748 99.1163
H-3	99.5984219637784	for ( Node success@@ or@@ nodes . Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 93.8549 99.5758 99.4363 99.993 99.9773 99.968 99.9046 99.9957 99.9798 99.9961 99.9242 99.9963 99.9922 99.9982 99.9767 99.0647
H-3	99.59693444293478	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { if ( search ( Node .
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 99.4413 99.9979 99.892 99.9996 95.3292 98.989 97.8221
H-3	99.59527909128289	for ( Node success@@ or@@ nodes : new Hash CaMeL Set < Node > ( ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 94.5726 99.5173 99.9966 99.9563 99.9821 99.7627 99.9857 99.9989 99.8982 99.9941 99.9777 99.1892
H-3	99.59287623355263	List < Node > node@@ s@@ visited = new Hash CaMeL Set < Node > ( ) ;
P-3	99.9857 99.9322 99.9901 99.8955 99.9836 99.9782 99.9935 99.9013 99.8021 99.9936 99.9499 99.9737 99.3705 99.9833 99.9983 99.9556 99.9998 99.6115
H-3	99.5791015625	Hash CaMeL Set < Node > node@@ s@@ visited = new Hash CaMeL Set < Node > ( ) ;
P-3	99.9498 99.965 99.9828 99.8955 99.989 99.9173 99.9836 99.9728 99.9925 99.9655 99.82 99.9959 99.9543 99.9691 99.4832 99.9856 99.9982 99.9493 99.9998 99.5044
H-3	99.57766723632812	for ( Iterator < Node > success@@ or@@ nodes : node . get CaMeL Successors ( ) ) {
P-3	99.9969 95.1521 99.7725 99.9265 99.9898 98.163 99.9755 99.9696 99.9127 99.902 99.9924 99.9771 99.9952 99.9272 99.9973 99.9882 99.998 99.9782 99.1094
H-3	99.57572428385417	for ( Node < Node > node : node . get CaMeL Successors ( ) ) {
P-3	99.9969 99.9383 96.0731 99.8686 99.9557 98.5298 99.6484 99.5625 99.9935 99.9795 99.9959 99.941 99.9979 99.9904 99.9976 99.9782 99.086
H-3	99.57470703125	for ( Node success@@ or@@ nodes : get CaMeL Successors ( ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 95.3127 99.9928 99.8964 99.9934 99.9385 99.9986 99.9781 99.0313
H-3	99.56779174804687	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) { return true ;
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 99.9799 93.8432 99.8 99.999 98.455
H-3	99.56483218544408	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( star@@ tnode ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 93.643 99.9617 99.8002 99.9978 99.9793 99.0585
H-3	99.56094520970395	for ( Node [ ] success@@ or@@ nodes : node . get CaMeL Successors ( ) ) {
P-3	99.9969 99.9383 94.1261 99.9745 99.1165 99.9372 99.9453 99.9764 99.8859 99.9947 99.9805 99.9943 99.9337 99.9975 99.9839 99.9982 99.9769 99.0712
H-3	99.56006469726563	for ( List < Node > success@@ or@@ nodes : node . get CaMeL Successors ( ) ) {
P-3	99.9969 93.142 99.9005 99.9317 99.9891 99.5916 99.9809 99.9776 99.975 99.9085 99.9947 99.9817 99.9949 99.9259 99.9975 99.9884 99.9986 99.9788 99.1171
H-3	99.56005859375	List < Node > node@@ s@@ visited = new Hash CaMeL Set < > ( ) ;
P-3	99.9857 99.9322 99.9901 99.8955 99.9836 99.9782 99.9935 99.9013 99.8021 99.9936 99.9499 99.9737 99.1706 99.9981 99.961 99.9998 99.6059
H-3	99.55160361842105	if ( node == go@@ al@@ node ) { return true ; } else { return true ;
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 99.6111 99.9995 99.8779 99.8585 99.4838 97.9433 98.4944 99.9994 100.1882
H-3	99.54963764391448	try { for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) {
P-3	99.9966 99.2067 99.9959 99.941 99.84 99.9811 99.9715 99.9569 99.9152 99.9958 99.983 99.9961 99.9372 99.9974 99.9818 99.9982 99.9846 98.8593
H-3	99.54784545898437	for ( Node success@@ or@@ nodes ( node ) : node . get CaMeL Successors ( ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 94.6481 99.8495 99.6617 98.5713 99.7948 99.9963 99.9703 99.9961 99.9308 99.9973 99.9881 99.9987 99.9786 99.0437
H-3	99.54719623766448	Vector < Node > node@@ s@@ visited = new Hash CaMeL Set < Node > ( ) ;
P-3	99.9237 99.9257 99.9906 99.9379 99.986 99.9774 99.9919 99.9552 99.7543 99.9955 99.967 99.9703 99.4203 99.987 99.9986 99.9532 99.9998 99.5561
H-3	99.54470343338816	if ( node == go@@ al@@ node ) { return false ; } else { return false ;
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 98.8458 99.9996 99.8702 99.8925 99.4629 97.8536 99.0775 99.9994 100.3235
H-3	99.54415554470486	for ( final Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) {
P-3	99.9969 93.2218 99.9655 99.8548 99.9894 99.9781 99.9636 99.9165 99.9965 99.9848 99.9964 99.9377 99.9976 99.9918 99.9985 99.9799 99.195
H-3	99.53695678710938	if ( node == go@@ al@@ node ) { return true ; } else {
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 99.6111 99.9995 99.8779 99.8585 99.4838 97.736
H-3	99.52788229549633	for ( Object success@@ or@@ nodes : node . get CaMeL Successors ( ) ) {
P-3	99.9969 94.472 98.9821 99.9748 99.9717 99.946 99.8969 99.9959 99.9852 99.996 99.9171 99.9979 99.9886 99.9991 99.9821 99.0419
H-3	99.5185546875	for ( Node star@@ tnode : node . get CaMeL Successors ( ) ) {
P-3	99.9969 99.9383 95.077 98.8666 99.8029 99.8892 99.9955 99.9769 99.9959 99.9313 99.9968 99.9922 99.9982 99.9769 99.0322
H-3	99.51708984375	if ( node == go@@ al@@ node ) {
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 98.7529
H-3	99.5143683938419	for ( Node node : node@@ s@@ visited . get CaMeL Successors ( ) ) {
P-3	99.9969 99.9383 96.4401 99.565 98.6163 99.9463 99.9759 99.075 99.7499 99.7668 99.8863 99.9964 99.9295 99.9982 99.9813 99.0522
H-3	99.50729709201389	for ( Node success@@ or@@ nodes -- : node . get CaMeL Successors ( ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 92.951 99.9016 99.8647 99.9951 99.9792 99.9962 99.9357 99.997 99.9904 99.9969 99.9783 99.0138
H-3	99.5070441750919	for ( Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ) ;
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 99.9886 99.9987 92.7629 99.5782
H-3	99.50339084201389	Vector < Node > node@@ s@@ visited = new Hash CaMeL Set < > ( ) ;
P-3	99.9237 99.9257 99.9906 99.9379 99.986 99.9774 99.9919 99.9552 99.7543 99.9955 99.967 99.9703 99.0767 99.9985 99.9581 99.9998 99.5461
H-3	99.4923565204327	if ( node == go@@ al@@ node ) { return true ;
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 99.6111 99.9995 97.7655
H-3	99.4885482788086	if ( node == go@@ al@@ node ) { return false ; } else {
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 98.8458 99.9996 99.8702 99.8925 99.4629 97.7213
H-3	99.48545485276442	if ( node@@ s@@ visited . contains ( node ) ) {
P-3	99.9977 97.6711 99.9794 99.977 99.9514 99.9868 99.9993 99.9464 99.9989 99.9865 99.9813 98.9032
H-3	99.47564338235294	for ( Node success@@ or@@ nodes : this . get CaMeL Successors ( ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 93.3392 99.9858 99.3975 99.9958 99.9287 99.9966 99.9746 99.9987 99.9816 99.0088
H-3	99.47334558823529	for ( Node success@@ or@@ nodes : map . get CaMeL Successors ( ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 92.8692 99.9769 99.9585 99.9384 99.888 99.9965 99.8918 99.9984 99.9774 99.0727
H-3	99.45772298177083	final Node success@@ or@@ nodes : node . get CaMeL Successors ( ) ;
P-3	99.7731 99.2174 99.945 99.952 99.9489 99.7095 99.4437 99.984 99.9968 99.9365 99.9919 99.94 99.979 99.4617
H-3	99.44995880126953	if ( node@@ s@@ visited . contains ( node ) ) { return true ;
P-3	99.9977 97.6711 99.9794 99.977 99.9514 99.9868 99.9993 99.9464 99.9989 99.9865 99.9813 99.5438 99.5264 99.9995 97.7221
H-3	99.44388834635417	for ( Node success@@ or@@ nodes : node . size ( ) ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 93.363 99.9926 99.9995 99.9991 99.9874 98.9368
H-3	99.44098307291667	if ( node == go@@ al@@ node ) { return true ; } }
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 99.6111 99.9995 99.8779 97.4468 98.6549
H-3	99.43811974158653	if ( node == go@@ al@@ node ) { return false ;
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 98.8458 99.9996 97.8257
H-3	99.43582356770834	for ( Object node : node . get CaMeL Successors ( ) ) {
P-3	99.9969 94.472 99.1584 99.8336 99.3452 99.9911 99.9784 99.9956 99.927 99.9981 99.9909 99.9988 99.9833 99.0381
H-3	99.42827497209821	if ( node == go@@ al@@ node ) { return true ; }
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 99.6111 99.9995 99.8779 96.4828
H-3	99.41652134486607	for ( Node success@@ or@@ nodes : node . get CaMeL Successors (
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 99.9962 99.983 99.9958 99.935 99.9976 92.5401
H-3	99.3831298828125	for ( Node success@@ or@@ nodes : node != go@@ al@@ node ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 99.9051 93.4485 99.1471 99.9621 99.9915 99.8703 99.9855 98.9581
H-3	99.3719951923077	while ( node@@ s@@ visited . contains ( node ) ) {
P-3	99.9973 98.1562 99.9627 99.9763 99.9458 99.9852 99.9991 99.9341 99.9989 99.9876 99.978 99.2388
H-3	99.36711774553571	if ( node == go@@ al@@ node ) { return false ; }
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 99.9771 99.6065 98.8458 99.9996 99.8702 96.3995
H-3	99.3490323153409	for ( Node node : node@@ s@@ visited ) {
P-3	99.9969 99.9383 96.4401 99.565 98.6163 99.9463 99.9759 99.4873 99.9812 99.0624
H-3	99.33624267578125	for ( Node node : node . get CaMeL Successors ( ) )
P-3	99.9969 99.9383 96.4401 99.565 99.4523 99.9925 99.9769 99.9958 99.937 99.9979 99.9907 99.9983 95.5959
H-3	99.32837853064903	list = new Hash CaMeL Set < Node > ( ) ;
P-3	99.7277 99.4951 99.7452 99.9964 99.9606 99.9765 99.6939 99.9862 99.9981 99.9144 99.9998 99.2814
H-3	99.32464044744319	for ( Node success@@ or@@ nodes : list ) {
P-3	99.9969 99.9383 99.8142 99.9808 99.9714 99.9471 94.2434 99.8058 99.9747 99.0684
H-3	99.25454711914062	} else if ( node == go@@ al@@ node ) {
P-3	98.8925 99.7684 99.9979 99.844 99.9139 99.9724 99.9735 99.9929 99.9777 99.988 98.8784
H-3	99.25218709309895	synchronized ( node . get CaMeL Successors ( ) ) {
P-3	99.9947 99.5386 99.85 99.9621 99.9936 99.8683 99.9954 99.991 99.9995 99.9883 98.562
H-3	99.24263305664063	while ( node == go@@ al@@ node ) {
P-3	99.9973 99.0953 99.7606 99.939 99.9621 99.9936 99.9714 99.9693 99.0618
H-3	99.14367065429687	if ( node != go@@ al@@ node ) {
P-3	99.9977 99.686 96.3866 99.9361 99.9688 99.9941 99.9735 99.9765 98.5854
H-3	99.03972032335069	if ( node == go@@ al@@ node )
P-3	99.9977 99.686 99.9113 99.9668 99.9716 99.9944 99.9812 94.9165
H-3	98.75179617745536	for ( Iterator < Node >
P-3	99.9969 95.1521 99.7725 99.9265 99.9898 96.5948
S-4	if ( h@@ are . get CaMeL Successor ( ) == null )
T-4	if ( null == h@@ are || h@@ are . get CaMeL Successor ( ) == null )
H-4	99.85754925271739	if ( h@@ are . get CaMeL Successor ( ) == null ) return false ; tor@@ to@@ ise = node ;
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 99.4364 99.9621 99.9996 99.5532 99.9931 99.9887 99.9916 97.1785 99.7186 102.3038
H-4	99.84170692845395	if ( h@@ are . get CaMeL Successor ( ) == null ) { return false ; }
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 97.5334 99.0568 99.9482 99.9996 99.9636 101.8927
H-4	99.81037248883929	if ( h@@ are . get CaMeL Successor ( ) == null )
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 98.7471
H-4	99.7941535500919	if ( h@@ are . get CaMeL Successor ( ) == null ) return false ;
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 99.4364 99.9621 99.9996 98.5045
H-4	99.77799849076705	if ( true ) { if ( h@@ are . get CaMeL Successor ( ) == null ) return false ;
P-4	99.9932 96.6212 99.9011 99.3826 98.8655 99.9926 99.7235 99.9466 99.7596 99.8827 99.9868 99.8262 99.9983 99.9532 99.9057 99.9758 99.9653 99.616 99.9635 99.9997 101.9673
H-4	99.77625621448864	if ( true ) return false ; tor@@ to@@ ise = tor@@ to@@ ise . get CaMeL Successor ( ) ;
P-4	99.9932 96.6212 99.9011 97.9249 99.8897 99.9994 99.4417 99.9871 99.9895 99.9892 99.7312 99.9726 99.9942 99.9904 99.9722 99.9948 99.9336 99.9983 99.9602 99.5492 102.3547
H-4	99.77518894361413	if ( h@@ are . get CaMeL Successor ( ) . get CaMeL Successor ( ) == null ) return false ;
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 95.7812 99.7437 99.9907 99.7547 99.9989 99.9924 99.8767 99.9754 99.9587 99.439 99.9551 99.9995 101.578
H-4	99.74429481907895	if ( h@@ are == tor@@ to@@ ise ) return false ; tor@@ to@@ ise = node ;
P-4	99.9932 99.7305 99.95 98.6842 99.5159 99.9722 99.9978 99.9519 99.0944 99.6241 99.9995 99.5572 99.9913 99.9914 99.991 97.3548 99.786 102.0668
H-4	99.73627672697368	if ( true ) { if ( h@@ are . get CaMeL Successor ( ) == null )
P-4	99.9932 96.6212 99.9011 99.3826 98.8655 99.9926 99.7235 99.9466 99.7596 99.8827 99.9868 99.8262 99.9983 99.9532 99.9057 99.9758 99.9653 101.4198
H-4	99.73239003057066	if ( h@@ are . get CaMeL Successor ( ) == null ) return false ; tor@@ to@@ ise = true ;
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 99.4364 99.9621 99.9996 99.5532 99.9931 99.9887 99.9916 94.0517 99.9947 102.2759
H-4	99.73200334821429	if ( h@@ are . get CaMeL Successor ( ) == null ) return false ; return false ; }
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 99.4364 99.9621 99.9996 94.3734 99.736 99.999 99.5187 102.7488
H-4	99.72982124660327	if ( h@@ are . get CaMeL Successor ( ) != null ) return false ; tor@@ to@@ ise = node ;
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 97.2804 99.9718 99.9187 99.3533 99.9682 99.9991 99.5126 99.9939 99.9899 99.9916 97.1147 99.5968 102.3096
H-4	99.72911487926136	if ( h@@ are != null ) { if ( h@@ are . get CaMeL Successor ( ) == null )
P-4	99.9932 99.7305 99.95 97.2416 98.4839 99.7727 99.3006 98.8839 99.9909 99.8363 99.951 99.9341 99.8934 99.9866 99.8222 99.9987 99.9584 99.8928 99.9782 99.9667 101.5854
H-4	99.7255328634511	if ( h@@ are . get CaMeL Successor ( ) == null ) return false ; tor@@ to@@ ise = null ;
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 99.4364 99.9621 99.9996 99.5532 99.9931 99.9887 99.9916 93.8074 99.9892 102.3677
H-4	99.72449261209239	if ( h@@ are != null ) { tor@@ to@@ ise = tor@@ to@@ ise . get CaMeL Successor ( ) ;
P-4	99.9932 99.7305 99.95 97.2416 98.4839 99.7727 99.3006 98.2148 99.9809 99.9873 99.9926 99.8712 99.9802 99.9959 99.9914 99.9692 99.9958 99.9232 99.9985 99.9361 99.6682 101.7962
H-4	99.71740191915761	if ( h@@ are . get CaMeL Successor ( ) == null ) return true ; tor@@ to@@ ise = node ;
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 99.4364 96.6053 99.9992 99.5277 99.9933 99.9889 99.9917 97.3251 99.7335 102.3012
H-4	99.71309988839286	if ( h@@ are . get CaMeL Successor ( ) == null ) return false ; tor@@ to@@ ise =
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 99.4364 99.9621 99.9996 99.5532 99.9931 99.9887 99.9916 96.4522
H-4	99.71295166015625	if ( tor@@ to@@ ise . get CaMeL Successor ( ) == null ) { return false ; }
P-4	99.9932 97.4068 99.7615 99.9891 99.5649 99.8309 99.9867 99.8151 99.9973 99.9573 99.8438 99.9758 99.9427 97.5917 98.9273 99.9477 99.9996 99.9636 101.8744
H-4	99.71052689985795	if ( false ) { if ( h@@ are . get CaMeL Successor ( ) == null ) return false ;
P-4	99.9932 95.1168 99.8903 99.3678 98.8846 99.9924 99.7291 99.9436 99.7966 99.8807 99.9868 99.8232 99.9984 99.9522 99.9056 99.9758 99.965 99.6075 99.9637 99.9996 101.969
H-4	99.70880448190789	if ( h@@ are == tor@@ to@@ ise ) return true ; tor@@ to@@ ise = node ;
P-4	99.9932 99.7305 99.95 98.6842 99.5159 99.9722 99.9978 99.9519 99.0944 98.8185 99.9991 99.5402 99.9914 99.9918 99.991 97.4928 99.7978 102.0651
H-4	99.7069091796875	if ( h@@ are == null || h@@ are . get CaMeL Successor ( ) == null ) return false ;
P-4	99.9932 99.7305 99.95 98.6842 98.0379 97.1872 99.7425 99.9475 99.9408 99.8515 99.9837 99.8069 99.9985 99.9508 99.9184 99.9714 99.9697 99.3343 99.947 99.9996 101.7171
H-4	99.69860229492187	if ( h@@ are . get CaMeL Successor ( ) == null ) return false ; return false ;
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 99.4364 99.9621 99.9996 94.3734 99.736 99.999 101.8676
H-4	99.69817151521382	if ( h@@ are . get CaMeL Successor ( ) != null ) { return false ; }
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 97.2804 99.9718 99.9187 98.0356 98.4707 99.979 99.9992 99.9661 101.8583
H-4	99.69598943536931	if ( h@@ are != null && h@@ are . get CaMeL Successor ( ) == null ) return false ;
P-4	99.9932 99.7305 99.95 97.2416 98.4839 97.8406 99.8059 99.9433 99.9473 99.871 99.9874 99.8307 99.9987 99.949 99.906 99.9751 99.9676 99.3311 99.969 99.9995 101.7011
H-4	99.69539018110795	if ( h@@ are == null && h@@ are . get CaMeL Successor ( ) == null ) return false ;
P-4	99.9932 99.7305 99.95 98.6842 98.0379 97.0525 99.5645 99.9408 99.9268 99.8757 99.9868 99.8282 99.9985 99.9597 99.9116 99.9731 99.975 99.3557 99.952 99.9996 101.713
H-4	99.692919921875	if ( h@@ are . get CaMeL Successor ( ) == null ) {
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 97.5334 99.2624
H-4	99.69003777754934	if ( ( h@@ are . get CaMeL Successor ( ) == null ) ) return false ;
P-4	99.9932 95.0458 99.7135 99.9362 99.7794 99.9063 99.9836 99.8496 99.9983 99.9511 99.8972 99.9751 99.9641 99.5162 99.3584 99.966 99.9996 101.3875
H-4	99.6854248046875	if ( h@@ are . get CaMeL Successor ( ) == null ) { return true ; }
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 97.5334 99.0568 96.9665 99.9994 99.9651 101.9038
H-4	99.6796142578125	if ( ! ( h@@ are . get CaMeL Successor ( ) == null ) ) return false ;
P-4	99.9932 96.6256 97.5984 99.5917 99.937 99.7766 99.8928 99.985 99.8235 99.9987 99.9522 99.8914 99.9719 99.9451 99.9654 99.3664 99.9438 99.9995 101.4443
H-4	99.66127522786458	if ( tor@@ to@@ ise . get CaMeL Successor ( ) == null ) return false ;
P-4	99.9932 97.4068 99.7615 99.9891 99.5649 99.8309 99.9867 99.8151 99.9973 99.9573 99.8438 99.9758 99.9427 99.4181 99.9613 99.9996 98.5692
H-4	99.65935958059211	if ( false ) { if ( h@@ are . get CaMeL Successor ( ) == null )
P-4	99.9932 95.1168 99.8903 99.3678 98.8846 99.9924 99.7291 99.9436 99.7966 99.8807 99.9868 99.8232 99.9984 99.9522 99.9056 99.9758 99.965 101.4361
H-4	99.65551147460937	if ( h@@ are == tor@@ to@@ ise )
P-4	99.9932 99.7305 99.95 98.6842 99.5159 99.9722 99.9978 99.9519 98.87
H-4	99.65299718520221	if ( h@@ are == null ) return false ; tor@@ to@@ ise = node ;
P-4	99.9932 99.7305 99.95 98.6842 98.0379 99.879 99.4574 99.8888 99.9995 99.5922 99.9912 99.9878 99.992 97.2147 99.7686 102.0445
H-4	99.6519775390625	if ( true && h@@ are . get CaMeL Successor ( ) == null ) return false ;
P-4	99.9932 96.6212 97.0848 99.7009 99.9357 99.7489 99.8725 99.9865 99.8348 99.9987 99.9517 99.9129 99.9737 99.961 99.3718 99.9616 99.9996 101.5888
H-4	99.64806315104167	if ( tor@@ to@@ ise . get CaMeL Successor ( ) == null )
P-4	99.9932 97.4068 99.7615 99.9891 99.5649 99.8309 99.9867 99.8151 99.9973 99.9573 99.8438 99.9758 99.9427 98.7662
H-4	99.64705403645833	if ( ) { if ( h@@ are . get CaMeL Successor ( ) == null ) return false ;
P-4	99.9932 94.6533 99.4249 98.8534 99.9909 99.764 99.9493 99.7033 99.8884 99.9864 99.8346 99.9982 99.955 99.9042 99.9758 99.9679 99.6207 99.9644 99.9997 101.2709
H-4	99.6353759765625	if ( h@@ are . get CaMeL Successor ( ) != null ) return false ;
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 97.2804 99.9718 99.9187 99.3533 99.9682 99.9991 98.5244
H-4	99.6314453125	if ( h@@ are . get CaMeL Successor ( ) . get CaMeL Successor ( ) == null )
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 95.7812 99.7437 99.9907 99.7547 99.9989 99.9924 99.8767 99.9754 99.9587 98.7709
H-4	99.61709755345395	try { if ( h@@ are . get CaMeL Successor ( ) == null ) return false ;
P-4	99.9617 98.9838 99.9929 99.7793 99.9507 99.6273 99.8884 99.9871 99.8454 99.9987 99.9522 99.9107 99.9745 99.9568 99.5325 99.9706 99.9996 101.0179
H-4	99.61527797154018	if ( h@@ are . get CaMeL Successor ( ) != null )
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 97.2804 99.9718 99.9187 98.6575
H-4	99.60999644886364	if ( tor@@ to@@ ise . get CaMeL Successor ( ) == null ) return false ; tor@@ to@@ ise =
P-4	99.9932 97.4068 99.7615 99.9891 99.5649 99.8309 99.9867 99.8151 99.9973 99.9573 99.8438 99.9758 99.9427 99.4181 99.9613 99.9996 99.527 99.9925 99.9888 99.989 96.5889
H-4	99.60114203559027	if ( ! h@@ are . get CaMeL Successor ( ) == null ) return false ;
P-4	99.9932 96.6256 99.1504 99.9328 99.9572 99.8531 99.9869 99.8056 99.9986 99.9379 99.8712 99.9697 99.9519 99.4507 99.9476 99.9996 98.4993
H-4	99.5999286358173	if ( h@@ are == tor@@ to@@ ise ) return false ;
P-4	99.9932 99.7305 99.95 98.6842 99.5159 99.9722 99.9978 99.9519 99.0944 99.6241 99.9995 98.3959
H-4	99.59919289981617	if ( h@@ are . get CaMeL Successor ( ) == null ) return true ;
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 99.4364 96.6053 99.9992 98.5474
H-4	99.59085518973214	if ( h@@ are == tor@@ to@@ ise || h@@ are . get CaMeL Successor ( ) == null )
P-4	99.9932 99.7305 99.95 98.6842 99.5159 99.9722 99.9978 95.7409 99.7288 99.9387 99.9049 99.8483 99.9825 99.7869 99.9984 99.9577 99.9123 99.9736 99.9618 98.94
H-4	99.58983696831598	if ( h@@ are . get CaMeL Successor ( ) == null ) return false ; }
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 99.4364 99.9621 99.9996 95.2105 99.4106
H-4	99.589599609375	if ( h@@ are == tor@@ to@@ ise ) {
P-4	99.9932 99.7305 99.95 98.6842 99.5159 99.9722 99.9978 99.9519 98.4958 99.3047
H-4	99.587646484375	if ( true ) tor@@ to@@ ise = tor@@ to@@ ise . get CaMeL Successor ( ) ;
P-4	99.9932 96.6212 99.9011 97.2688 99.9051 99.9933 99.9657 99.6293 99.9593 99.9957 99.9814 99.9658 99.9948 99.9131 99.9982 99.9599 99.7282 99.502
H-4	99.58011881510417	if ( ! h@@ are . get CaMeL Successor ( ) == null )
P-4	99.9932 96.6256 99.1504 99.9328 99.9572 99.8531 99.9869 99.8056 99.9986 99.9379 99.8712 99.9697 99.9519 98.7783
H-4	99.57586059570312	if ( true ) { tor@@ to@@ ise = tor@@ to@@ ise . get CaMeL Successor ( ) ;
P-4	99.9932 96.6212 99.9011 99.3826 97.7762 99.9447 99.9922 99.9884 99.7239 99.9584 99.9942 99.9844 99.9695 99.9953 99.9142 99.9985 99.9654 99.6312 98.8931
H-4	99.56744063527961	if ( ! tor@@ to@@ ise . get CaMeL Successor ( ) == null ) return false ;
P-4	99.9932 96.6256 98.2866 99.7778 99.9943 99.9819 99.7784 99.9905 99.7851 99.9981 99.9578 99.8713 99.9742 99.9482 99.4236 99.947 99.9996 98.5588
H-4	99.56582845052084	if ( h@@ are == tor@@ to@@ ise ) { return false ; }
P-4	99.9932 99.7305 99.95 98.6842 99.5159 99.9722 99.9978 99.9519 98.4958 98.7774 99.7114 99.9995 99.9601 98.858
H-4	99.55563354492188	if ( tor@@ to@@ ise . get CaMeL Successor ( ) == null ) {
P-4	99.9932 97.4068 99.7615 99.9891 99.5649 99.8309 99.9867 99.8151 99.9973 99.9573 99.8438 99.9758 99.9427 97.5917 99.3437
H-4	99.55403645833333	if ( h@@ are . get CaMeL Successor ( ) != null ) {
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 97.2804 99.9718 99.9187 98.0356 99.3186
H-4	99.55283717105263	if ( h@@ are == null || h@@ are . get CaMeL Successor ( ) == null )
P-4	99.9932 99.7305 99.95 98.6842 98.0379 97.1872 99.7425 99.9475 99.9408 99.8515 99.9837 99.8069 99.9985 99.9508 99.9184 99.9714 99.9697 98.9498
H-4	99.54175567626953	if ( ! tor@@ to@@ ise . get CaMeL Successor ( ) == null )
P-4	99.9932 96.6256 98.2866 99.7778 99.9943 99.9819 99.7784 99.9905 99.7851 99.9981 99.9578 99.8713 99.9742 99.9482 98.8156
H-4	99.53977614182692	if ( h@@ are == tor@@ to@@ ise ) return true ;
P-4	99.9932 99.7305 99.95 98.6842 99.5159 99.9722 99.9978 99.9519 99.0944 98.8185 99.9991 98.4199
H-4	99.5380859375	if ( h@@ are . get CaMeL Successor ( ) == null ) { return false ;
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 97.5334 99.0568 99.9482 99.9996 96.5495
H-4	99.53278266059027	if ( tor@@ to@@ ise . get CaMeL Successor ( ) != null ) return false ;
P-4	99.9932 97.4068 99.7615 99.9891 99.5649 99.8309 99.9867 99.8151 99.9973 99.9573 97.6062 99.9728 99.9126 99.3471 99.9555 99.9993 98.6041
H-4	99.51762390136719	if ( ( h@@ are . get CaMeL Successor ( ) == null ) )
P-4	99.9932 95.0458 99.7135 99.9362 99.7794 99.9063 99.9836 99.8496 99.9983 99.9511 99.8972 99.9751 99.9641 99.5162 98.8828
H-4	99.51666618795956	if ( ! ( h@@ are . get CaMeL Successor ( ) == null ) )
P-4	99.9932 96.6256 97.5984 99.5917 99.937 99.7766 99.8928 99.985 99.8235 99.9987 99.9522 99.8914 99.9719 99.9451 99.9654 98.9452
H-4	99.51507568359375	if ( h@@ are . get CaMeL Successor ( ) == null ) true ;
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 94.569 99.8805 99.1935
H-4	99.51296997070312	if ( h@@ are . get CaMeL Successor ( ) == null ) break ;
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 95.04 99.9861 98.5832
H-4	99.49357096354167	if ( h@@ are == tor@@ to@@ ise ) { return true ; }
P-4	99.9932 99.7305 99.95 98.6842 99.5159 99.9722 99.9978 99.9519 98.4958 98.7774 98.6009 99.9993 99.9609 98.8841
H-4	99.4907470703125	if ( tor@@ to@@ ise . get CaMeL Successor ( ) != null )
P-4	99.9932 97.4068 99.7615 99.9891 99.5649 99.8309 99.9867 99.8151 99.9973 99.9573 97.6062 99.9728 99.9126 98.6773
H-4	99.48198699951172	if ( h@@ are . get CaMeL Successor ( ) == null ) false ;
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 99.9736 99.95 94.3617 99.6232 99.1288
H-4	99.47318725585937	if ( h@@ are != tor@@ to@@ ise )
P-4	99.9932 99.7305 99.95 97.2416 99.3125 99.9652 99.998 99.9562 98.6953
H-4	99.47005521334134	if ( h@@ are != tor@@ to@@ ise ) return false ;
P-4	99.9932 99.7305 99.95 97.2416 99.3125 99.9652 99.998 99.9562 98.8576 99.7951 99.9991 98.4221
H-4	99.45133833451705	if ( h@@ are != tor@@ to@@ ise ) {
P-4	99.9932 99.7305 99.95 97.2416 99.3125 99.9652 99.998 99.9562 98.8153 99.1129
H-4	99.44597516741071	return h@@ are . get CaMeL Successor ( ) == null ) ;
P-4	99.1859 99.9339 99.7641 99.9336 99.9868 99.8843 99.9991 99.9112 99.686 99.9762 98.6768 99.9378 99.5695
H-4	99.44467397836539	return h@@ are . get CaMeL Successor ( ) == null ;
P-4	99.1859 99.9339 99.7641 99.9336 99.9868 99.8843 99.9991 99.9112 99.686 99.9762 99.1453 99.576
H-4	99.44248268821023	if ( h@@ are == null ) return false ;
P-4	99.9932 99.7305 99.95 98.6842 98.0379 99.879 99.4574 99.8888 99.9995 98.3575
H-4	99.43759591238839	if ( h@@ are . get CaMeL Successor ( ) > null )
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 94.7935 99.9445 99.9384 98.6644
H-4	99.42192731584821	return tor@@ to@@ ise . get CaMeL Successor ( ) == null ;
P-4	98.4656 99.8663 99.992 99.8096 99.9221 99.9893 99.8376 99.9983 99.9384 99.5876 99.9741 99.2186 99.5093
H-4	99.42006429036458	if ( tor@@ to@@ ise == null ) return false ;
P-4	99.9932 97.4068 99.7615 99.9891 98.6748 99.6587 99.8819 99.5058 99.8709 99.9995 98.409
H-4	99.3988506610577	if ( node . get CaMeL Successor ( ) == null )
P-4	99.9932 95.0352 99.3263 99.832 99.9883 99.6626 99.9976 99.9653 99.8184 99.9766 99.9397 98.7605
H-4	99.35592651367188	if ( h@@ are == null )
P-4	99.9932 99.7305 99.95 98.6842 98.0379 99.879 98.6832
H-4	99.3274258700284	if ( tor@@ to@@ ise == tor@@ to@@ ise )
P-4	99.9932 97.4068 99.7615 99.9891 98.6748 98.2692 99.9088 99.9978 99.8878 98.8232
H-4	99.31715901692708	if ( tor@@ to@@ ise == null )
P-4	99.9932 97.4068 99.7615 99.9891 98.6748 99.6587 99.8819 98.5989
H-4	99.3148701985677	if ( h@@ are . get CaMeL Successor ( ) ==
P-4	99.9932 99.7305 99.95 99.5748 99.885 99.9843 99.8306 99.9985 99.9491 99.8891 93.1039
H-4	99.2586669921875	if ( h@@ are == node ) return false ;
P-4	99.9932 99.7305 99.95 98.6842 96.0622 99.9202 99.3131 99.9115 99.9994 98.3916
H-4	99.23916965060764	if ( h@@ are != null ) {
P-4	99.9932 99.7305 99.95 97.2416 98.4839 99.7727 99.3006 98.7906
H-4	99.18627166748047	if ( h@@ are != null )
P-4	99.9932 99.7305 99.95 97.2416 98.4839 99.7727 98.4288
H-4	99.179638671875	if ( tor@@ to@@ ise != null ) {
P-4	99.9932 97.4068 99.7615 99.9891 97.2872 99.7187 99.792 99.1386 98.8197
H-4	99.16384548611111	if ( h@@ are == null ) {
P-4	99.9932 99.7305 99.95 98.6842 98.0379 99.879 97.3181 98.9923
H-4	99.1583760579427	if ( true ) {
P-4	99.9932 96.6212 99.9011 99.3826 99.1626
H-4	99.13930257161458	if ( tor@@ to@@ ise != null )
P-4	99.9932 97.4068 99.7615 99.9891 97.2872 99.7187 99.792 98.4157
H-4	99.13248443603516	if ( h@@ are == node )
P-4	99.9932 99.7305 99.95 98.6842 96.0622 99.9202 98.8302
H-4	99.08155822753906	if ( true ) return false ;
P-4	99.9932 96.6212 99.9011 97.9249 99.8897 99.9994 98.4336
H-4	99.057373046875	if ( h@@ are == false )
P-4	99.9932 99.7305 99.95 98.6842 95.5343 99.9185 98.7588
H-4	99.00798034667969	if ( h@@ are == true )
P-4	99.9932 99.7305 99.95 98.6842 95.1171 99.9216 98.7778
H-4	98.97568969726562	if ( true )
P-4	99.9932 96.6212 99.9011 98.4735
H-4	98.894287109375	if ( false ) {
P-4	99.9932 95.1168 99.8903 99.3678 99.1082
H-4	98.88025774274554	if ( node == null )
P-4	99.9932 95.0352 98.8119 99.8184 99.9157 98.6979
H-4	98.77189127604167	if ( h@@ are ==
P-4	99.9932 99.7305 99.95 98.6842 94.384
H-4	98.67214965820312	if ( false )
P-4	99.9932 95.1168 99.8903 98.471
H-4	98.6201171875	if ( h@@ are !=
P-4	99.9932 99.7305 99.95 97.2416 94.916
H-4	98.59130249023437	if ( ) {
P-4	99.9932 94.6533 99.4249 98.9956
H-4	98.52311401367187	return false ; }
P-4	97.5308 99.9967 99.6244 99.6653
H-4	98.494384765625	return true ; }
P-4	97.4022 99.9926 99.576 99.7028
S-5	while ( lo <= hi ) {
T-5	while ( lo < hi ) {
H-5	99.76232147216797	while ( lo <= hi ) {
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 98.7393
H-5	99.70769500732422	while ( ( lo <= hi ) || ( lo == hi ) ) {
P-5	99.9961 95.4794 99.8843 99.6729 99.9573 99.9729 98.8818 99.9905 99.4682 99.7689 99.241 99.9694 99.9601 99.7239 103.5165
H-5	99.66057942708333	int hi = arr . length ; while ( lo <= hi ) {
P-5	98.8262 99.9803 99.3401 99.6263 99.9615 99.8885 99.2228 99.9882 99.8974 99.8133 99.9805 99.9649 99.8666 101.7395
H-5	99.64959309895833	while ( lo <= hi ) { while ( lo <= hi ) {
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 93.9928 99.9965 99.8715 99.6959 99.9306 99.9486 99.8533 102.0957
H-5	99.64126586914062	while ( ( lo <= hi ) || ( lo == 0 ) ) {
P-5	99.9961 95.4794 99.8843 99.6729 99.9573 99.9729 98.8818 99.9905 99.4682 99.7689 98.6483 99.52 99.9282 99.7182 103.5331
H-5	99.63290405273438	while ( ( lo <= hi ) && ( lo == hi ) ) {
P-5	99.9961 95.4794 99.8843 99.6729 99.9573 99.9729 98.8482 99.9886 98.9822 99.8108 98.6003 99.9601 99.9679 99.742 103.4233
H-5	99.59749930245536	while ( lo <= hi )
P-5	99.9961 99.9173 99.8062 99.972 99.942 97.7088
H-5	99.59640299479166	while ( lo <= hi ) { if ( lo <= hi ) {
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 94.978 99.9965 98.7097 98.8548 99.6329 99.937 99.7245 102.7533
H-5	99.58435872395833	while ( ( lo <= hi ) || ( lo == hi ) )
P-5	99.9961 95.4794 99.8843 99.6729 99.9573 99.9729 98.8818 99.9905 99.4682 99.7689 99.241 99.9694 99.9601 101.6826
H-5	99.5609375	int lo = arr . length ; while ( lo <= hi ) {
P-5	97.7868 99.9754 99.1026 99.5195 99.9602 99.89 99.0831 99.9887 99.9107 99.8129 99.9784 99.9637 99.8688 101.7607
H-5	99.55603841145833	while ( lo <= hi ) { if ( lo == hi ) {
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 94.978 99.9965 98.7097 99.4752 98.4196 99.9049 99.7219 102.7754
H-5	99.55242919921875	while ( lo <= hi ) { while ( lo <= hi )
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 93.9928 99.9965 99.8715 99.6959 99.9306 99.9486 100.9391
H-5	99.55144856770833	while ( lo <= hi ) { int lo = lo + hi ;
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 99.5843 96.2678 99.9839 96.5425 99.6352 99.5524 99.6788 102.6675
H-5	99.52853190104166	while ( lo <= hi ) { while ( lo == hi ) {
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 93.9928 99.9965 99.8715 98.1941 99.596 99.9247 99.8444 102.1489
H-5	99.52450997488839	while ( lo <= hi && ( lo <= hi ) ) {
P-5	99.9961 99.9173 99.8062 99.972 96.4115 97.913 99.5278 98.3602 99.6511 99.9367 99.9468 99.7816 102.2827
H-5	99.51376577524039	while ( lo == arr [ hi - 1 ] ) {
P-5	99.9961 99.9173 97.0567 98.4213 99.8995 98.2552 98.6026 99.9651 99.9946 99.5834 99.8994 102.2477
H-5	99.51375325520833	while ( ( lo <= hi ) || ( lo == 0 ) )
P-5	99.9961 95.4794 99.8843 99.6729 99.9573 99.9729 98.8818 99.9905 99.4682 99.7689 98.6483 99.52 99.9282 101.6974
H-5	99.50574544270833	while ( ( lo <= hi ) && ( lo == hi ) )
P-5	99.9961 95.4794 99.8843 99.6729 99.9573 99.9729 98.8482 99.9886 98.9822 99.8108 98.6003 99.9601 99.9679 101.625
H-5	99.50359700520833	while ( lo <= hi ) { int hi = arr . length ;
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 99.5843 95.8489 99.9869 97.6975 98.1096 99.952 99.7876 102.228
H-5	99.5019775390625	while ( ( lo <= hi ) || ( lo <= hi ) )
P-5	99.9961 95.4794 99.8843 99.6729 99.9573 99.9729 98.8818 99.9905 99.4682 97.956 99.8821 99.9791 99.9562 101.6128
H-5	99.489892578125	while ( lo <= hi ) { int lo = arr . length ;
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 99.5843 96.2678 99.9839 97.1285 97.9975 99.9491 99.7766 102.3015
H-5	99.48948451450893	while ( lo <= hi && ( lo == hi ) ) {
P-5	99.9961 99.9173 99.8062 99.972 96.4115 97.913 99.5278 99.6103 97.8814 99.9001 99.9363 99.7747 102.3659
H-5	99.4842529296875	while ( lo <= hi && ( lo == 0 ) ) {
P-5	99.9961 99.9173 99.8062 99.972 96.4115 97.913 99.5278 99.6103 99.4218 98.3006 99.8831 99.7772 102.4027
H-5	99.480126953125	if ( lo <= hi ) { int hi = arr . length ;
P-5	99.9971 99.8326 99.384 99.8847 99.897 99.7513 99.4858 97.6236 99.9795 98.722 99.5604 99.9653 99.8868 101.9504
H-5	99.477099609375	int hi = arr . length ; while ( lo < hi ) {
P-5	98.8262 99.9803 99.3401 99.6263 99.9615 99.8885 99.2228 99.9882 99.8974 97.1496 99.9767 99.9688 99.8753 101.6419
H-5	99.47646484375	if ( lo <= hi ) { int lo = arr . length ;
P-5	99.9971 99.8326 99.384 99.8847 99.897 99.7513 99.4858 97.9866 99.9752 98.2185 99.4965 99.9646 99.8894 102.1025
H-5	99.47533365885417	int hi = arr . length ; while ( lo == hi ) {
P-5	98.8262 99.9803 99.3401 99.6263 99.9615 99.8885 99.2228 99.9882 99.8974 97.1773 99.8075 99.9195 99.8648 101.8168
H-5	99.47141810825893	while ( lo <= hi ) { if ( lo <= hi )
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 94.978 99.9965 98.7097 98.8548 99.6329 99.937 101.1315
H-5	99.46975911458334	while ( ( lo <= hi ) && ( lo == 0 ) )
P-5	99.9961 95.4794 99.8843 99.6729 99.9573 99.9729 98.8482 99.9886 98.9822 99.8108 99.2539 98.7933 99.9407 101.6256
H-5	99.46931966145833	while ( lo <= hi ) { int hi = lo + hi ;
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 99.5843 95.8489 99.9869 95.8092 99.6313 99.5464 99.6565 102.617
H-5	99.46431790865384	while ( lo == arr [ lo - 1 ] ) {
P-5	99.9961 99.9173 97.0567 98.4213 99.8995 98.2591 98.0757 99.9454 99.9937 99.4639 99.8869 102.2808
H-5	99.45016479492188	while ( lo <= hi && lo <= hi ) {
P-5	99.9961 99.9173 99.8062 99.972 96.4115 99.2141 99.4815 99.9338 99.939 99.7926 99.0978
H-5	99.44122314453125	while ( lo < hi ) {
P-5	99.9961 99.9173 97.3248 99.9576 99.9471 99.8924 98.6544
H-5	99.43332926432292	while ( lo <= hi || lo <= hi ) {
P-5	99.9961 99.9173 99.8062 99.972 96.2463 99.1711 99.4144 99.9342 99.9587 99.7514 99.1922
H-5	99.42857947716347	while ( lo <= hi && ( lo <= hi ) )
P-5	99.9961 99.9173 99.8062 99.972 96.4115 97.913 99.5278 98.3602 99.6511 99.9367 99.9468 101.2928
H-5	99.42264229910714	while ( lo <= hi ) { while ( lo == hi )
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 93.9928 99.9965 99.8715 98.1941 99.596 99.9247 100.9823
H-5	99.42152622767857	while ( lo <= hi ) { if ( lo == hi )
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 94.978 99.9965 98.7097 99.4752 98.4196 99.9049 101.0581
H-5	99.41963704427083	while ( lo <= hi || hi <= hi ) {
P-5	99.9961 99.9173 99.8062 99.972 96.2463 99.0099 99.4807 99.857 99.9581 99.7637 99.1882
H-5	99.38723520132211	while ( lo <= hi && ( lo == hi ) )
P-5	99.9961 99.9173 99.8062 99.972 96.4115 97.913 99.5278 99.6103 97.8814 99.9001 99.9363 101.3219
H-5	99.37759164663461	while ( lo <= hi && ( lo == 0 ) )
P-5	99.9961 99.9173 99.8062 99.972 96.4115 97.913 99.5278 99.6103 99.4218 98.3006 99.8831 101.3091
H-5	99.36807686941964	int hi = arr . length ; while ( lo <= hi )
P-5	98.8262 99.9803 99.3401 99.6263 99.9615 99.8885 99.2228 99.9882 99.8974 99.8133 99.9805 99.9649 97.8505
H-5	99.35677083333333	int hi = ( lo + hi ) / $NUMBER$ ;
P-5	98.8262 99.9803 98.1137 99.7399 99.6917 99.8273 99.9807 99.9536 99.7565 99.9963 99.6021
H-5	99.35347493489583	while ( lo <= hi && lo == hi ) {
P-5	99.9961 99.9173 99.8062 99.972 96.4115 99.2141 98.6371 99.591 99.9253 99.7741 99.1568
H-5	99.3511734008789	while ( lo == hi ) {
P-5	99.9961 99.9173 97.0567 99.425 99.8937 99.8821 98.7984
H-5	99.35010782877605	while ( lo <= hi || lo == hi ) {
P-5	99.9961 99.9173 99.8062 99.972 96.2463 99.1711 98.6847 99.6788 99.9315 99.7397 99.2175
H-5	99.34536743164062	while ( lo <= hi && hi <= hi ) {
P-5	99.9961 99.9173 99.8062 99.972 96.4115 97.9135 99.5574 99.8832 99.9524 99.804 99.0905
H-5	99.34208540482955	while ( lo <= hi && lo <= hi )
P-5	99.9961 99.9173 99.8062 99.972 96.4115 99.2141 99.4815 99.9338 99.939 98.2513
H-5	99.33864182692308	while ( lo <= hi ) { int lo = lo ;
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 99.5843 96.2678 99.9839 96.5425 98.5861 101.0785
H-5	99.33265269886364	while ( lo <= hi || lo <= hi )
P-5	99.9961 99.9173 99.8062 99.972 96.2463 99.1711 99.4144 99.9342 99.9587 98.4028
H-5	99.31728108723958	int lo = ( lo + hi ) / $NUMBER$ ;
P-5	97.7868 99.9754 98.5262 99.8658 99.7265 99.8401 99.9831 99.9532 99.7545 99.9965 99.5864
H-5	99.3131436434659	while ( lo <= hi || hi <= hi )
P-5	99.9961 99.9173 99.8062 99.972 96.2463 99.0099 99.4807 99.857 99.9581 98.3608
H-5	99.30031331380208	while ( lo <= hi || hi == hi ) {
P-5	99.9961 99.9173 99.8062 99.972 96.2463 99.0099 98.6022 99.3212 99.9242 99.751 99.2172
H-5	99.2959872159091	for ( int [ ] arr : arr ) {
P-5	99.9961 99.7994 98.2474 99.9978 99.3841 99.528 99.8068 99.8009 99.782 99.4477
H-5	99.29353841145833	while ( lo <= hi ) { int [ ] arr = ( int
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 99.5843 94.6469 99.9937 99.0848 99.9446 97.8515 99.8025 99.1356
H-5	99.28866373697916	while ( lo <= hi ) { if ( arr [ hi ] ==
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 94.978 99.9965 98.4306 99.9419 98.1151 99.8591 99.5276 99.122
H-5	99.28240966796875	int x = ( lo + hi ) / $NUMBER$ ;
P-5	97.326 99.9702 98.5623 99.844 99.8062 99.8395 99.9863 99.9341 99.7594 99.9945 99.5537
H-5	99.25839669363839	int lo = arr . length ; while ( lo <= hi )
P-5	97.7868 99.9754 99.1026 99.5195 99.9602 99.89 99.0831 99.9887 99.9107 99.8129 99.9784 99.9637 97.833
H-5	99.25518798828125	while ( lo <= hi || hi == arr . length ) {
P-5	99.9961 99.9173 99.8062 99.972 96.2463 99.0099 98.6022 97.9641 99.3421 99.9303 99.8909 99.7967 99.2585
H-5	99.25344848632812	while ( lo >= hi ) {
P-5	99.9961 99.9173 96.0656 99.7523 99.9332 99.9136 98.6095
H-5	99.25292205810547	while ( lo > hi ) {
P-5	99.9961 99.9173 96.1015 99.6728 99.9292 99.9082 98.6583
H-5	99.24474080403645	while ( lo <= hi || lo != hi ) {
P-5	99.9961 99.9173 99.8062 99.972 96.2463 99.1711 97.7675 99.3246 99.9412 99.7967 99.1578
H-5	99.24311967329545	while ( lo <= hi || lo == hi )
P-5	99.9961 99.9173 99.8062 99.972 96.2463 99.1711 98.6847 99.6788 99.9315 98.4303
H-5	99.2413330078125	while ( ( lo <= hi ) ) {
P-5	99.9961 95.4794 99.8843 99.6729 99.9573 99.9729 98.8288 99.8863 98.8952
H-5	99.23949085582386	while ( lo <= hi && lo == hi )
P-5	99.9961 99.9173 99.8062 99.972 96.4115 99.2141 98.6371 99.591 99.9253 98.3237
H-5	99.23297991071429	while ( lo < hi )
P-5	99.9961 99.9173 97.3248 99.9576 99.9471 97.6479
H-5	99.23024495442708	while ( lo < hi && lo <= hi ) {
P-5	99.9961 99.9173 97.3248 99.9576 96.2348 99.3074 99.4408 99.9279 99.9495 99.7981 99.0687
H-5	99.22764078776042	while ( lo == hi && lo <= hi ) {
P-5	99.9961 99.9173 97.0567 99.425 97.2292 99.0894 99.4005 99.9109 99.9402 99.7815 99.1448
H-5	99.22655487060547	if ( lo <= hi ) {
P-5	99.9971 99.8326 99.384 99.8847 99.897 99.7513 98.7843
H-5	99.2228670987216	while ( lo <= hi && hi <= hi )
P-5	99.9961 99.9173 99.8062 99.972 96.4115 97.9135 99.5574 99.8832 99.9524 98.2018
H-5	99.22172037760417	while ( lo < hi || lo <= hi ) {
P-5	99.9961 99.9173 97.3248 99.9576 96.2482 99.2234 99.3401 99.927 99.965 99.7537 99.1675
H-5	99.2164306640625	while ( lo <= hi && x <= hi ) {
P-5	99.9961 99.9173 99.8062 99.972 96.4115 97.4145 98.8164 99.5913 99.9242 99.8013 99.1064
H-5	99.2135009765625	while ( lo <= hi && hi == hi ) {
P-5	99.9961 99.9173 99.8062 99.972 96.4115 97.9135 98.5215 99.3153 99.9344 99.7836 99.1504
H-5	99.21339925130208	while ( lo == 0 || lo <= hi ) {
P-5	99.9961 99.9173 97.0567 97.2817 99.2821 99.3004 99.3226 99.6358 99.9483 99.7621 99.2177
H-5	99.21117401123047	int hi = arr . length ;
P-5	98.8262 99.9803 99.3401 99.6263 99.9615 99.8885 99.2537
H-5	99.20500044389205	while ( lo == arr [ lo ] ) {
P-5	99.9961 99.9173 97.0567 98.4213 99.8995 98.2591 99.822 99.0428 99.8625 99.1378
H-5	99.20450533353366	while ( lo <= hi ) { int [ ] arr =
P-5	99.9961 99.9173 99.8062 99.972 99.942 99.8855 99.5843 94.6469 99.9937 99.0848 99.9446 97.045
H-5	99.2030029296875	while ( lo == arr [ hi ] ) {
P-5	99.9961 99.9173 97.0567 98.4213 99.8995 98.2552 99.6921 99.1564 99.8768 99.1216
H-5	99.18464799360795	while ( lo <= hi || hi == hi )
P-5	99.9961 99.9173 99.8062 99.972 96.2463 99.0099 98.6022 99.3212 99.9242 98.3956
H-5	99.13040771484376	while ( lo + hi <= hi ) {
P-5	99.9961 99.9173 93.5513 99.8295 99.4623 99.9317 99.9701 99.8561 98.9497
H-5	99.1251220703125	for ( int [ ] arr : arr )
P-5	99.9961 99.7994 98.2474 99.9978 99.3841 99.528 99.8068 99.8009 98.225
H-5	99.12346540178571	while ( lo == hi )
P-5	99.9961 99.9173 97.0567 99.425 99.8937 97.7354
H-5	99.12174072265626	while ( lo == arr . length ) {
P-5	99.9961 99.9173 97.0567 98.4213 97.5776 99.9461 99.857 99.8946 98.7106
H-5	99.11390991210938	int hi = arr . length - 1 ;
P-5	98.8262 99.9803 99.3401 99.6263 99.9615 97.4299 99.8246 99.992 99.3455
H-5	99.10051879882812	while ( lo <= hi + 1 ) {
P-5	99.9961 99.9173 99.8062 99.972 93.083 99.5167 99.9568 99.8557 99.0612
H-5	99.08998413085938	while ( lo & hi <= hi ) {
P-5	99.9961 99.9173 93.6712 99.774 99.1425 99.868 99.9702 99.8398 98.8807
H-5	99.0840576171875	while ( lo <= hi - 1 ) {
P-5	99.9961 99.9173 99.8062 99.972 92.8014 99.7933 99.9524 99.8736 98.8882
H-5	99.07151576450893	if ( lo <= hi )
P-5	99.9971 99.8326 99.384 99.8847 99.897 98.2238
H-5	99.05375162760417	int hi = arr [ lo ] ;
P-5	98.8262 99.9803 99.3401 98.7884 98.5423 99.7943 99.8563 99.5429
H-5	99.04166412353516	int lo = arr . length ;
P-5	97.7868 99.9754 99.1026 99.5195 99.9602 99.89 99.2862
H-5	99.03822835286458	while ( ( lo <= hi ) )
P-5	99.9961 95.4794 99.8843 99.6729 99.9573 99.9729 98.8288 97.7122
H-5	99.03419494628906	while ( hi <= hi ) {
P-5	99.9961 94.0807 99.8476 99.9604 99.9348 99.8915 98.7224
H-5	99.00157165527344	while ( lo == 0 ) {
P-5	99.9961 99.9173 97.0567 97.2817 99.2392 99.8785 98.803
H-5	98.992919921875	while ( lo > hi )
P-5	99.9961 99.9173 96.1015 99.6728 99.9292 97.4935
H-5	98.9908447265625	while ( lo >= hi )
P-5	99.9961 99.9173 96.0656 99.7523 99.9332 97.4314
H-5	98.97406005859375	while ( 1 <= hi ) {
P-5	99.9961 93.6124 99.8092 99.9553 99.9527 99.8948 98.732
H-5	98.96893310546875	if ( lo == hi ) {
P-5	99.9971 99.8326 99.0018 98.1746 99.8486 99.7306 98.8848
H-5	98.63365681966145	int hi = 0 ;
P-5	98.8262 99.9803 96.9015 99.9944 99.2868
H-5	98.4395751953125	return - 1 ;
P-5	98.7928 99.8043 99.8006 99.8652
H-5	98.32918701171874	for ( int }
P-5	99.9961 99.7994 96.5627 98.822
H-5	98.17002868652344	for ( int
P-5	99.9961 99.7994 96.4188
S-6	return bin@@ search ( arr , x , mid , end ) ;
T-6	return bin@@ search ( arr , x , mid + 1 , end ) ;
H-6	99.8900634765625	return bin@@ search ( arr , x , mid , end ) ; } else { return mid ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 99.8914 99.996 98.6254 99.855 99.2901 99.8253 99.1612 99.9317 102.4003
H-6	99.88656180245536	return bin@@ search ( arr , x , mid , end ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 99.8914 99.996 99.6999
H-6	99.7843246459961	return bin@@ search ( arr , x , 0 , arr . length ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9528 99.9933 99.9361 99.9585 99.9923 99.7744 99.9976 99.6554
H-6	99.76739180715461	return bin@@ search ( arr , x , mid , end - arr [ mid ] ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 96.9353 98.0787 99.4545 99.8825 99.9744 99.7299 99.998 102.7024
H-6	99.76435932360198	return arr [ mid ] ; } else if ( x > arr [ mid ] ) {
P-6	96.6673 99.8505 99.8623 99.9646 99.9249 99.1733 99.8398 99.2941 99.9958 99.9588 99.8035 99.8566 99.9638 99.9172 99.9717 99.8152 99.9936 101.8313
H-6	99.7387631064967	return bin@@ search ( arr , x , mid , end ) ; } else return mid ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 99.8914 99.996 98.6254 99.855 95.521 99.4543 99.9541 102.9146
H-6	99.73677280970982	return bin@@ search ( arr , x , start , mid ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9516 99.9813 99.88 99.523 99.9939 99.6961
H-6	99.72970581054688	return bin@@ search ( arr , x , start , mid , end ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9516 99.9813 99.88 99.0061 99.9269 99.9298 99.9968 99.714
H-6	99.69287109375	return bin@@ search ( arr , x , start , mid , end ) ; } else {
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9516 99.9813 99.88 99.0061 99.9269 99.9298 99.9968 98.5814 99.831 99.2694 100.5213
H-6	99.68890059621711	return bin@@ search ( new int [ ] { x , start , mid , end ) ;
P-6	99.691 99.9813 99.9981 95.3043 99.4754 99.9417 99.9988 99.985 99.7532 99.9159 98.8462 99.8932 99.8833 99.5864 99.8932 99.6699 99.9962 102.4373
H-6	99.68729440789474	return mid ; } else if ( x > arr [ mid ] ) { return mid ;
P-6	96.7689 99.9057 99.3105 99.6907 99.3927 99.995 99.962 99.7998 99.8595 99.9611 99.9118 99.9706 99.8037 99.9926 99.5595 98.294 99.9629 102.079
H-6	99.67861938476562	return bin@@ search ( arr , x , mid , arr . length ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 96.7112 99.8874 99.9876 99.6978 99.9977 99.6645
H-6	99.66658742804276	return bin@@ search ( arr , x , mid ) ; } else { return mid ; }
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 96.0788 99.9925 98.6685 99.824 99.3138 99.8233 99.1076 99.9274 99.1992 102.7921
H-6	99.65341668379934	synchronized ( arr ) { return bin@@ search ( arr , x , mid , end ) ;
P-6	99.9905 99.3467 99.55 99.9875 99.3993 99.6488 99.9856 99.9985 99.838 99.9943 99.9697 99.9964 99.5633 99.9807 99.8534 99.8995 99.9978 102.0941
H-6	99.6469367532169	return bin@@ search ( arr , x , mid , end ) ; } else {
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 99.8914 99.996 98.6254 99.855 99.2901 97.5154
H-6	99.6324691772461	return bin@@ search ( arr , x , mid , end - start ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 96.9353 98.7639 99.8893 99.9933 99.713
H-6	99.623974609375	return bin@@ search ( arr , x , mid , end ) ; }
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 99.8914 99.996 98.6254 97.0223
H-6	99.61362818667763	return bin@@ search ( arr , x , mid , end - start ) ; } else {
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 96.9353 98.7639 99.8893 99.9933 98.5848 99.7649 99.2796 100.6232
H-6	99.611572265625	return bin@@ search ( arr , x , 0 , arr . length , x ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9528 99.9933 99.9361 99.9585 99.9923 97.8211 99.0134 99.314 99.9965 99.7416
H-6	99.60995483398438	return bin@@ search ( arr , x , mid , end , end ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 96.3303 98.9409 99.9144 99.9967 99.7523
H-6	99.6009521484375	return bin@@ search ( arr , x , mid , end ) ; } return mid ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 99.8914 99.996 98.6254 96.2714 99.2974 99.9649 99.946
H-6	99.59962222450658	return bin@@ search ( arr , x , 0 , arr . length ) ; } else {
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9528 99.9933 99.9361 99.9585 99.9923 99.7744 99.9976 98.7468 99.7941 99.3903 97.5677
H-6	99.58657657398896	return bin@@ search ( arr , x , 0 , arr [ mid ] ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9528 99.9933 99.9361 96.5474 99.8763 99.9773 99.7115 99.9978 99.6904
H-6	99.58509018841912	return bin@@ search ( arr , x , 0 , arr . length ) ; }
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9528 99.9933 99.9361 99.9585 99.9923 99.7744 99.9976 98.7468 97.3059
H-6	99.58262875205592	return bin@@ search ( arr , x , mid , end , end ) ; } else {
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 96.3303 98.9409 99.9144 99.9967 98.4498 99.803 99.277 100.5331
H-6	99.57590738932292	return bin@@ search ( arr , x , mid , end - arr . length ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 96.9353 98.0787 99.0691 99.9545 99.8212 99.9978 99.6849
H-6	99.5638656616211	return mid ; } else if ( x > arr [ mid ] ) {
P-6	96.7689 99.9057 99.3105 99.6907 99.3927 99.995 99.962 99.7998 99.8595 99.9611 99.9118 99.9706 99.8037 99.9926 98.8587
H-6	99.55965750558036	return bin@@ search ( arr , x , start , end ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9516 99.9813 97.0719 99.8728 99.9955 99.6734
H-6	99.55780029296875	return bin@@ search ( arr , x , mid ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 96.0788 99.9925 99.6846
H-6	99.55598718979779	return ( int ) bin@@ search ( arr , x , mid , end ) ;
P-6	95.6551 98.4158 99.9912 99.6668 99.979 99.9978 99.7871 99.9911 99.9705 99.995 99.6486 99.972 99.9032 99.8926 99.994 99.7534
H-6	99.5538101196289	return bin@@ search ( this , arr , x , mid , end ) ;
P-6	99.691 99.9813 99.9981 94.6326 99.9481 99.6842 99.9874 99.9592 99.9955 99.6318 99.949 99.9235 99.9085 99.9963 99.736
H-6	99.55017852783203	return bin@@ search ( arr , x , 1 , arr . length ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 94.3395 99.988 99.7942 99.942 99.9922 99.7847 99.9977 99.6758
H-6	99.54424370659723	return bin@@ search ( arr , x , mid , end , arr . length ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 96.3303 97.5484 99.5521 99.9406 99.8668 99.9984 99.7351
H-6	99.5441958778783	return bin@@ search ( this , arr , x , mid , end ) ; } else {
P-6	99.691 99.9813 99.9981 94.6326 99.9481 99.6842 99.9874 99.9592 99.9955 99.6318 99.949 99.9235 99.9085 99.9963 98.5106 99.8507 99.3135 100.54
H-6	99.5396728515625	return bin@@ search ( arr , x , mid , arr [ mid ] ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 96.7112 97.2162 99.8772 99.9742 99.7809 99.9981 99.705
H-6	99.5382080078125	return bin@@ search ( arr , x , mid , end - end ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 96.9353 97.2144 99.9238 99.9957 99.7175
H-6	99.5374755859375	return bin@@ search ( arr , x , 0 , arr . length - start ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9528 99.9933 99.9361 99.9585 99.9923 96.6065 98.4675 99.822 99.9949 99.6619
H-6	99.53388807508681	return bin@@ search ( arr , x , 0 , arr . length - x ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9528 99.9933 99.9361 99.9585 99.9923 96.6065 98.7301 99.4483 99.9967 99.7066
H-6	99.53211805555556	return bin@@ search ( arr , x , mid , arr . length , x ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 96.7112 99.8874 99.9876 98.3103 98.9518 99.0792 99.9962 99.7427
H-6	99.53070746527777	return bin@@ search ( arr , x , 0 , arr . length , end ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9528 99.9933 99.9361 99.9585 99.9923 97.8211 97.0133 99.9093 99.9968 99.6905
H-6	99.52820587158203	return bin@@ search ( arr , x , mid , end - 1 ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 96.9353 97.0184 99.9389 99.9958 99.7381
H-6	99.52629538143383	return bin@@ search ( arr , x , start , mid ) ; } else {
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9516 99.9813 99.88 99.523 99.9939 98.6357 99.8425 99.2735 97.5766
H-6	99.525146484375	return bin@@ search ( arr , x , mid , end ) ; } else
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 99.8914 99.996 98.6254 99.855 95.2099
H-6	99.52349090576172	return bin@@ search ( arr , x , mid , end - x ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 96.9353 97.1698 99.7039 99.9946 99.7475
H-6	99.52135512408088	return - 1 ; } else if ( x > arr [ mid ] ) {
P-6	95.5848 99.8255 99.9881 99.4342 99.7235 99.3316 99.9955 99.958 99.804 99.8576 99.9614 99.9145 99.9703 99.8076 99.9921 98.8757
H-6	99.52114868164062	return bin@@ search ( arr , x , mid , end + 1 ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 95.0508 98.7935 99.9349 99.9965 99.7382
H-6	99.51759338378906	return bin@@ search ( arr , x , mid , end - mid ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 96.9353 96.8446 99.9514 99.9948 99.7308
H-6	99.51722627527573	return bin@@ search ( arr , x , mid , end , - 1 ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 96.3303 97.5166 99.3971 99.946 99.997 99.7812
H-6	99.51271685431985	return bin@@ search ( arr , x , start , mid , end ) ; }
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9516 99.9813 99.88 99.0061 99.9269 99.9298 99.9968 98.5814 97.1735
H-6	99.51227678571429	return bin@@ search ( arr , 0 , arr . length ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 94.9038 99.9978 99.8542 99.9497 99.9869 99.5239 99.9968 99.6375
H-6	99.51039751838235	return bin@@ search ( arr , x , mid , end ) ; } * /
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 99.8914 99.996 98.6254 95.8567 99.2073 99.2753
H-6	99.51019287109375	return ( bin@@ search ( arr , x , mid , end ) ) ;
P-6	95.6551 98.0644 99.9795 99.989 99.8256 99.9888 99.9645 99.9948 99.5413 99.9689 99.9056 99.8704 99.9366 99.9843 99.6558
H-6	99.50782877604166	result = bin@@ search ( arr , x , mid , end ) ;
P-6	99.7633 99.7691 99.9853 99.9976 99.8309 99.99 99.967 99.9952 99.6312 99.97 99.9267 99.9112 99.9935 99.6946
H-6	99.50374348958333	return bin@@ search ( arr , x , mid ) ; } else { return mid ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 96.0788 99.9925 98.6685 99.824 99.3138 99.8233 99.1076 99.9274 99.3936
H-6	99.50328233506944	return bin@@ search ( arr , x , 0 , arr . length - 1 ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9528 99.9933 99.9361 99.9585 99.9923 96.6065 97.7362 99.8979 99.9971 99.6996
H-6	99.50153266059027	return bin@@ search ( this , arr , x , 0 , arr . length ) ;
P-6	99.691 99.9813 99.9981 94.6326 99.9481 99.6842 99.9874 99.9592 99.9955 97.8998 99.9844 99.9281 99.9694 99.9918 99.8148 99.9978 99.7256
H-6	99.50108337402344	return bin@@ search ( arr , x , mid , start , mid ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 94.6143 99.2502 99.6294 99.8794 99.9958 99.7365
H-6	99.50041198730469	return bin@@ search ( arr , x , mid , end + $NUMBER$ ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 95.0508 98.4365 99.9453 99.9968 99.7524
H-6	99.49989149305556	return bin@@ search ( arr , x , 0 , arr . length + 1 ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9528 99.9933 99.9361 99.9585 99.9923 96.1439 98.2019 99.8336 99.997 99.6997
H-6	99.49913872612848	return arr [ mid ] ; } else if ( x > arr [ mid ] )
P-6	96.6673 99.8505 99.8623 99.9646 99.9249 99.1733 99.8398 99.2941 99.9958 99.9588 99.8035 99.8566 99.9638 99.9172 99.9717 99.8152 97.2865
H-6	99.49877251519098	return bin@@ search ( arr , x , start , mid , end - start ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9516 99.9813 99.88 99.0061 99.9269 96.6555 98.6622 99.898 99.9953 99.7321
H-6	99.49580891927083	return bin@@ search ( arr , x , start , mid , arr . length ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9516 99.9813 99.88 99.0061 95.4102 99.8747 99.988 99.834 99.9982 99.7117
H-6	99.49263000488281	return bin@@ search ( arr , x , mid , mid , end ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 94.1343 99.2431 99.9257 99.9286 99.9969 99.7415
H-6	99.48556315104166	return bin@@ search ( arr , x , start , mid ) ; }
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9516 99.9813 99.88 99.523 99.9939 98.6357 97.0291
H-6	99.48030090332031	return bin@@ search ( arr , x , mid , end ) ; } }
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 99.8914 99.996 98.6254 94.703 99.6444
H-6	99.48011690027573	return bin@@ search ( arr , x , mid , arr . length ) ; }
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 96.7112 99.8874 99.9876 99.6978 99.9977 98.7233 97.2453
H-6	99.47821044921875	return bin@@ search ( arr , x , x , mid , end ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 93.7265 99.9916 99.3815 99.6951 99.9378 99.9156 99.9964 99.7182
H-6	99.4772216796875	{ return bin@@ search ( arr , x , mid , end ) ;
P-6	99.5846 99.7507 99.9865 99.9981 99.8222 99.9912 99.9687 99.9956 99.6124 99.9772 99.8929 99.8882 99.9958 99.4924
H-6	99.47598470052084	return bin@@ search ( arr , x , mid , - start ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 94.7173 99.1459 99.6601 99.9931 99.7116
H-6	99.47562408447266	return bin@@ search ( $STRING$ , arr , x , mid , end ) ;
P-6	99.691 99.9813 99.9981 93.4316 99.919 99.7491 99.9747 99.9563 99.9961 99.5944 99.8961 99.9219 99.9217 99.9968 99.7435
H-6	99.46749877929688	return bin@@ search ( name , arr , x , mid , end ) ;
P-6	99.691 99.9813 99.9981 94.1015 99.9837 98.939 99.9767 99.9453 99.9955 99.5745 99.8685 99.9228 99.923 99.9967 99.7436
H-6	99.4630355834961	return bin@@ search ( arr , x , mid , end * $NUMBER$ ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 94.2993 98.5806 99.9434 99.9968 99.7639
H-6	99.461669921875	return bin@@ search ( 0 , arr , x , mid , end ) ;
P-6	99.691 99.9813 99.9981 93.1248 99.9973 99.8166 99.961 99.9564 99.9955 99.548 99.9284 99.9116 99.9146 99.9966 99.7267
H-6	99.46084594726562	return true ; } else if ( x > arr [ mid ] ) {
P-6	94.808 99.998 99.6501 99.5982 99.3318 99.995 99.9597 99.7916 99.8598 99.9608 99.9091 99.9705 99.8086 99.9912 98.9026
H-6	99.46016148158482	return bin@@ search ( arr , x , 0 , end ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 97.9528 99.9933 95.6428 99.8632 99.9954 99.706
H-6	99.45932442801339	return bin@@ search ( arr , x , mid , start ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 94.6143 99.1957 99.9942 99.7145
H-6	99.4584228515625	return bin@@ search ( arr , x , mid , end true ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 93.3898 99.9474 99.9976 99.717
H-6	99.45820617675781	return bin@@ search ( arr , x , mid , end - $NUMBER$ ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 99.9129 96.9353 95.8629 99.9603 99.9963 99.752
H-6	99.45179850260416	ret = bin@@ search ( arr , x , mid , end ) ;
P-6	99.7994 99.7135 99.9845 99.9978 99.8323 99.9903 99.9662 99.9956 99.6393 99.9679 99.9251 99.9107 99.9926 99.5405
H-6	99.44090924944196	return bin@@ search ( arr , x , mid , length ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 93.7096 99.8872 99.9972 99.667
H-6	99.43494524274554	return bin@@ search ( arr , x , mid , mid ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 94.1343 99.3167 99.9952 99.731
H-6	99.43292236328125	return arr [ mid ] ; } else { return mid ; }
P-6	96.6673 99.8505 99.8623 99.9646 99.9249 99.1733 99.8398 99.2583 99.8347 98.9307 99.9106 99.1777 99.8278
H-6	99.43256022135417	return bin@@ search ( arr , x , mid , - end ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 94.7173 98.2383 99.9224 99.9958 99.7028
H-6	99.43136160714286	return bin@@ search ( arr , 1 , arr . length ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 93.8623 99.9973 99.7045 99.9228 99.9798 99.5995 99.997 99.6546
H-6	99.43068150111607	return bin@@ search ( name , x , mid , end ) ;
P-6	99.691 99.9813 99.9981 94.1015 99.9837 99.4258 99.9959 99.56 99.9553 99.9183 99.8862 99.9958 99.698
H-6	99.42046649639423	return arr [ mid ] ; } else { return mid ;
P-6	96.6673 99.8505 99.8623 99.9646 99.9249 99.1733 99.8398 99.2583 99.8347 98.9307 99.9106 99.4106
H-6	99.404541015625	int mid = start + ( end - start ) / $NUMBER$ ;
P-6	98.8479 99.9893 98.9116 99.875 99.9479 99.9122 99.9512 99.5853 99.9876 99.7396 99.8235 99.995 99.1304
H-6	99.40216064453125	return bin@@ search ( arr , x , end , end ) ;
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 93.4765 99.4727 99.804 99.8788 99.9957 99.7138
H-6	99.399658203125	if ( arr [ mid ] < arr [ mid ] ) {
P-6	99.9957 99.0121 99.9042 99.859 99.97 98.502 99.7662 99.8798 99.8532 99.9738 99.9339 99.9774 98.7082
H-6	99.35863318810097	return read ( arr , x , mid , end ) ;
P-6	93.8799 99.1321 99.864 99.9907 99.9554 99.9959 99.5121 99.9397 99.9065 99.905 99.9965 99.7459
H-6	99.32013494318181	if ( x > arr [ mid ] ) {
P-6	99.9957 98.6647 99.477 99.8594 99.9202 99.8864 99.9705 99.8488 99.9736 98.6656
H-6	99.3164950284091	return mid ; } else { return mid ; }
P-6	96.7689 99.9057 99.3105 99.6907 99.1376 99.8081 99.0764 99.8974 99.2242 99.8234
H-6	99.3033447265625	return bin@@ search ( arr , x , mid ,
P-6	99.691 99.9813 99.9981 99.822 99.9904 99.9715 99.996 99.649 99.974 93.425
H-6	99.28062133789062	return mid ; } else { return mid ;
P-6	96.7689 99.9057 99.3105 99.6907 99.1376 99.8081 99.0764 99.8974 99.3724
H-6	99.23891379616477	if ( x < arr [ mid ] ) {
P-6	99.9957 98.6647 98.6651 99.8384 99.9168 99.8713 99.9671 99.8733 99.977 98.599
H-6	99.18568115234375	return arr [ mid ] ; } else {
P-6	96.6673 99.8505 99.8623 99.9646 99.9249 99.1733 99.8398 99.2583 97.4772
H-6	99.11627875434027	return ( arr [ mid ] ) ;
P-6	95.6551 98.6802 99.7109 99.8502 99.974 99.0575 99.9799 99.3003
H-6	99.06985812717014	if ( arr [ mid ] ) {
P-6	99.9957 99.0121 99.9042 99.859 99.97 97.896 99.9768 98.7554
H-6	98.93052455357143	return arr [ mid ] ;
P-6	96.6673 99.8505 99.8623 99.9646 99.9249 96.4054
H-6	98.06871795654297	return mid ;
P-6	96.7689 99.9057 95.7617
S-7	result . add ( flatten ( x ) ) ; } } return result ; } else { return flatten ( arr ) ; }
T-7	result . add ( ( x ) ) ; } } return result ; } else { return arr ; }
H-7	99.84340122767857	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; } }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 99.8479 99.9952 99.9932 99.9302 99.7159 99.9992 99.8987 99.9043 99.9988 99.9993 99.3996 98.6677 101.7524
H-7	99.81644112723214	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , x ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 98.5823 98.6063 99.7028 99.9991 99.9997 99.6174 99.8642 99.9544 99.8442 99.9953 99.9934 99.9242 99.7236 99.9992 99.9031 99.4686 99.9982 99.9993 102.1842
H-7	99.81608312270221	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 99.8479 99.9952 99.9932 99.9302 99.7159 99.9992 99.8987 99.9043 99.9988 99.9993 99.3996 99.648
H-7	99.81489701704545	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 99.8479 99.9952 99.9932 99.9302 99.7159 99.9992 99.8987 99.9043 99.9988 99.9993 99.1925
H-7	99.80622632575758	if ( flatten ( x ) ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }
P-7	99.9977 97.3051 99.995 99.8044 99.7943 99.9896 99.7829 99.5542 99.9929 99.9882 99.7627 99.606 99.999 99.8772 99.8834 99.9989 99.9992 99.4872 99.6844 99.96 99.8158 99.995 99.9926 99.9344 99.6707 99.9995 99.9001 99.9086 99.999 99.9994 99.3976 102.6773
H-7	99.78758370535714	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x , x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 99.8479 99.9952 99.9932 99.9302 99.7159 99.9992 99.8987 97.5727 98.2812 99.7473 99.9989 99.9996 102.1688
H-7	99.77511160714286	if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 98.5451 99.9819 99.9995 99.3557 99.9991 99.9218 99.7738 99.9989 99.9996 99.5729 99.8813 99.9577 99.8496 99.9952 99.993 99.8234 99.7124 99.9992 99.8984 99.8917 99.9988 99.9993 99.193
H-7	99.77147042410714	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } } else { result . add ( flatten ( x ) ) ; }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 96.7842 98.8892 99.9069 99.7657 99.9931 99.9913 99.9142 99.7041 99.9992 99.8829 99.8741 99.9985 99.9993 99.0341 102.6868
H-7	99.76963588169643	if ( flatten ( x ) ) { result . add CaMeL All ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }
P-7	99.9977 97.3051 99.995 99.8044 99.7943 99.9896 99.7829 99.5542 99.9929 99.9882 98.4383 99.9848 99.9993 99.5501 99.9993 99.8976 99.9025 99.9991 99.9996 99.4101 99.6953 99.9612 99.8158 99.9952 99.9928 99.8099 99.6619 99.9995 99.8872 99.8883 99.9989 99.9992 99.3045 102.6897
H-7	99.76509486607142	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , arr ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 98.5823 96.7246 99.9575 99.9992 99.9997 99.6184 99.8415 99.9389 99.8417 99.9952 99.9931 99.923 99.7134 99.9992 99.8919 99.3483 99.9979 99.9993 102.1967
H-7	99.75741489955357	if ( x instanceof Array CaMeL List ) { return ( Array CaMeL List ) flatten ( x ) ; } else { result . add ( flatten ( x ) ) ; }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 95.7073 98.8649 99.7828 99.9962 99.9919 99.999 99.8073 99.9984 99.8895 99.864 99.9962 99.7515 99.9077 99.954 99.8074 99.9934 99.9902 99.8381 99.6146 99.9988 99.8785 99.9021 99.9982 99.999 99.1617 102.6666
H-7	99.75287388392857	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x , arr ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 99.8479 99.9952 99.9932 99.9302 99.7159 99.9992 99.8987 97.5727 96.8217 99.9421 99.9991 99.9997 102.2182
H-7	99.745556640625	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add CaMeL All ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 99.8479 99.9952 99.9932 97.2895 99.9873 99.9994 99.5008 99.9992 99.9158 99.8929 99.9988 99.9996 99.2584
H-7	99.74265423943015	if ( flatten ( x ) ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; } }
P-7	99.9977 97.3051 99.995 99.8044 99.7943 99.9896 99.7829 99.5542 99.9929 99.9882 99.7627 99.606 99.999 99.8772 99.8834 99.9989 99.9992 99.4872 99.6844 99.96 99.8158 99.995 99.9926 99.9344 99.6707 99.9995 99.9001 99.9086 99.999 99.9994 99.3976 98.5504 101.7715
H-7	99.73346819196429	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( new flatten ( x ) ) ; }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 99.8479 99.9952 99.9932 99.9302 96.9664 96.7894 99.9984 99.8938 99.8446 99.999 99.9992 99.3719 102.626
H-7	99.730908203125	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , result ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 98.5823 95.6124 99.8531 99.9995 99.9997 99.6346 99.8395 99.9432 99.8403 99.9951 99.993 99.9213 99.7109 99.9992 99.8966 99.341 99.998 99.9993 102.2064
H-7	99.725634765625	if ( arr instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; } }
P-7	99.9977 95.7281 99.8564 99.7864 99.9963 99.9758 99.9801 99.9709 99.6222 99.995 99.9919 99.7278 99.7494 99.999 99.883 99.7036 99.9989 99.9992 99.6483 99.8836 99.9576 99.8488 99.9951 99.9933 99.9218 99.7022 99.9991 99.9005 99.9012 99.9988 99.9992 99.4009 98.6756 101.7569
H-7	99.72002650669643	if ( x instanceof Hash CaMeL Set ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; } }
P-7	99.9977 99.605 99.9195 95.8334 99.9931 99.7074 99.9578 99.9651 99.7443 99.9953 99.9901 99.6539 99.7641 99.9991 99.9117 99.7538 99.9991 99.9991 99.6632 99.868 99.9609 99.8397 99.9954 99.993 99.9076 99.7141 99.9992 99.8937 99.9068 99.9989 99.9993 99.4169 98.667 101.7346
H-7	99.71087472098215	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( arr ) ) ; } }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 99.8479 99.9952 99.9932 99.9302 99.7159 99.9992 95.2523 99.8431 99.9987 99.9995 99.3425 98.6725 101.8735
H-7	99.71015930175781	if ( flatten ( x ) ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 97.3051 99.995 99.8044 99.7943 99.9896 99.7829 99.5542 99.9929 99.9882 99.7627 99.606 99.999 99.8772 99.8834 99.9989 99.9992 99.4872 99.6844 99.96 99.8158 99.995 99.9926 99.9344 99.6707 99.9995 99.9001 99.9086 99.999 99.9994 99.1947
H-7	99.6996711282169	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 96.7842 98.8892 99.9069 99.7657 99.9931 99.9913 99.9142 99.7041 99.9992 99.8829 99.8741 99.9985 99.9993 99.5082
H-7	99.69440774356617	if ( arr instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }
P-7	99.9977 95.7281 99.8564 99.7864 99.9963 99.9758 99.9801 99.9709 99.6222 99.995 99.9919 99.7278 99.7494 99.999 99.883 99.7036 99.9989 99.9992 99.6483 99.8836 99.9576 99.8488 99.9951 99.9933 99.9218 99.7022 99.9991 99.9005 99.9012 99.9988 99.9992 99.4009 99.645
H-7	99.68956801470588	if ( x instanceof Hash CaMeL Set ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }
P-7	99.9977 99.605 99.9195 95.8334 99.9931 99.7074 99.9578 99.9651 99.7443 99.9953 99.9901 99.6539 99.7641 99.9991 99.9117 99.7538 99.9991 99.9991 99.6632 99.868 99.9609 99.8397 99.9954 99.993 99.9076 99.7141 99.9992 99.8937 99.9068 99.9989 99.9993 99.4169 99.6459
H-7	99.6895419034091	if ( arr instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 95.7281 99.8564 99.7864 99.9963 99.9758 99.9801 99.9709 99.6222 99.995 99.9919 99.7278 99.7494 99.999 99.883 99.7036 99.9989 99.9992 99.6483 99.8836 99.9576 99.8488 99.9951 99.9933 99.9218 99.7022 99.9991 99.9005 99.9012 99.9988 99.9992 99.1909
H-7	99.68353630514706	if ( flatten ( x ) ) { result . add CaMeL All ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 97.3051 99.995 99.8044 99.7943 99.9896 99.7829 99.5542 99.9929 99.9882 98.4383 99.9848 99.9993 99.5501 99.9993 99.8976 99.9025 99.9991 99.9996 99.4101 99.6953 99.9612 99.8158 99.9952 99.9928 99.8099 99.6619 99.9995 99.8872 99.8883 99.9989 99.9992 99.2971
H-7	99.6834383877841	if ( x instanceof Hash CaMeL Set ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 95.8334 99.9931 99.7074 99.9578 99.9651 99.7443 99.9953 99.9901 99.6539 99.7641 99.9991 99.9117 99.7538 99.9991 99.9991 99.6632 99.868 99.9609 99.8397 99.9954 99.993 99.9076 99.7141 99.9992 99.8937 99.9068 99.9989 99.9993 99.1712
H-7	99.67949362362133	if ( x instanceof Array CaMeL List ) { return ( Array CaMeL List ) flatten ( x ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 95.7073 98.8649 99.7828 99.9962 99.9919 99.999 99.8073 99.9984 99.8895 99.864 99.9962 99.7515 99.9077 99.954 99.8074 99.9934 99.9902 99.8381 99.6146 99.9988 99.8785 99.9021 99.9982 99.999 99.4215
H-7	99.67783490349265	if ( 0 instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }
P-7	99.9977 95.3916 99.4835 99.7846 99.9963 99.9824 99.9832 99.9689 99.6236 99.9951 99.9921 99.7471 99.7582 99.999 99.9136 99.7373 99.999 99.9992 99.6621 99.8946 99.9563 99.8503 99.9952 99.9932 99.9277 99.6992 99.9992 99.8969 99.9063 99.9988 99.9993 99.4192 99.6429
H-7	99.67687536168981	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , ( Array CaMeL List ) x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 98.5823 97.9132 99.9057 99.9956 99.9922 99.998 99.7994 99.9503 99.9991 99.9997 98.9241
H-7	99.67596076516544	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( arr ) ) ; }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 99.8479 99.9952 99.9932 99.9302 99.7159 99.9992 95.2523 99.8431 99.9987 99.9995 99.3425 99.6482
H-7	99.67568072150735	if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( ( Array CaMeL List ) flatten ( x , ( Array CaMeL List ) x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 98.5451 99.9819 99.9995 98.937 99.9397 99.9949 99.99 99.9988 99.5457 99.9994 99.9127 98.2538 98.416 99.8989 99.9963 99.9921 99.9986 99.7451 99.9057 99.9988 99.9996 99.1352
H-7	99.67423502604167	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( arr ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 99.8479 99.9952 99.9932 99.9302 99.7159 99.9992 95.2523 99.8431 99.9987 99.9995 99.2579
H-7	99.67285874310662	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( 0 ) ) ; }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 99.8479 99.9952 99.9932 99.9302 99.7159 99.9992 95.2444 99.7136 99.9971 99.9989 99.402 99.6229
H-7	99.67129054214016	if ( 0 instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 95.3916 99.4835 99.7846 99.9963 99.9824 99.9832 99.9689 99.6236 99.9951 99.9921 99.7471 99.7582 99.999 99.9136 99.7373 99.999 99.9992 99.6621 99.8946 99.9563 99.8503 99.9952 99.9932 99.9277 99.6992 99.9992 99.8969 99.9063 99.9988 99.9993 99.1682
H-7	99.67026654411765	if ( x instanceof Array CaMeL List ) { n@@ arr . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 95.327 99.9814 99.6349 99.9757 99.4747 99.6779 99.9989 99.9235 99.7859 99.9983 99.9992 99.5679 99.8878 99.9644 99.8475 99.9952 99.9922 99.9022 99.6746 99.9991 99.8868 99.8647 99.9985 99.9992 99.2812
H-7	99.6686652688419	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( arr ) ) ; } else { result . add ( flatten ( arr ) ) ; }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 95.5619 99.8257 99.9989 99.9995 99.646 99.8649 99.9503 99.8409 99.9951 99.9929 99.9281 99.7106 99.9992 99.1881 99.9369 99.9989 99.9996 99.362 99.6363
H-7	99.66790956439394	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( 0 ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 99.8479 99.9952 99.9932 99.9302 99.7159 99.9992 95.2444 99.7136 99.9971 99.9989 99.1888
H-7	99.66777801513672	if ( x instanceof Array CaMeL List ) { Array CaMeL List result = new Array CaMeL List ( $NUMBER$ ) ; for ( Object x : n@@ arr ) {
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 96.9261 99.9789 99.997 98.6993 99.9856 99.6099 99.887 99.9966 99.9852 99.9734 99.716 99.985 99.9999 99.4965 99.996 99.8383 99.7471 99.7934 99.8567 99.9943 99.9975 99.947 98.8115
H-7	99.66583806818181	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( arr ) ) ; } else { result . add ( flatten ( arr ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 95.5619 99.8257 99.9989 99.9995 99.646 99.8649 99.9503 99.8409 99.9951 99.9929 99.9281 99.7106 99.9992 99.1881 99.9369 99.9989 99.9996 99.2364
H-7	99.66490071614584	if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( ( Array CaMeL List ) flatten ( x ) ) ; } else {
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 98.5451 99.9819 99.9995 98.937 99.9397 99.9949 99.99 99.9988 99.5457 99.9994 99.9127 99.8042 99.9986 99.9995 99.505 99.891 99.958 97.1578
H-7	99.66437398976294	for ( Object x : n@@ arr ) { if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ;
P-7	99.9941 99.8117 99.5966 99.7503 99.9355 99.9953 99.9972 99.964 99.0061 99.9981 99.8929 99.9557 99.8731 99.9967 99.9731 99.9892 99.961 99.7949 99.996 99.9932 99.7234 99.7323 99.9983 99.9122 99.6281 99.9987 99.9989 98.7206
H-7	99.663818359375	if ( x != null ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }
P-7	99.9977 99.605 96.2007 99.7687 99.7898 99.7656 99.7989 99.995 99.9913 99.7707 99.6032 99.9984 99.8857 99.8095 99.9988 99.9992 99.5735 99.5931 99.9683 99.817 99.995 99.993 99.9256 99.6936 99.9994 99.8923 99.8731 99.9989 99.9994 99.4157 99.673
H-7	99.66258190524194	if ( x instanceof Array CaMeL List ) { result . add ( x ) ; } else { result . add ( flatten ( x ) ) ; }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 95.242 99.9605 99.9993 99.7995 99.8675 99.9531 99.8525 99.9946 99.9935 99.9289 99.6437 99.9987 99.8996 99.8168 99.9988 99.9994 99.4525 99.6186
H-7	99.66217400045956	if ( value instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }
P-7	99.9977 94.5141 99.9105 99.8018 99.9966 99.9708 99.9847 99.9692 99.6661 99.9952 99.9921 99.7388 99.7611 99.999 99.9136 99.7015 99.9989 99.9992 99.6372 99.8737 99.9551 99.8449 99.9953 99.9934 99.9272 99.6751 99.9992 99.8959 99.9009 99.9988 99.9993 99.3938 99.6599
H-7	99.66167135799633	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( arr ) ) ; } else { result . add ( flatten ( x ) ) ; }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 95.5619 99.8257 99.9989 99.9995 99.646 99.8649 99.9503 99.8409 99.9951 99.9929 99.9281 99.7106 99.9992 98.9597 99.8855 99.9987 99.9993 99.4098 99.6309
H-7	99.66075942095588	if ( x instanceof Array CaMeL List ) { Array CaMeL List n@@ arr = ( Array CaMeL List ) x ; result . add ( flatten ( n@@ arr ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 96.9261 99.9789 99.997 98.9133 99.9801 99.991 99.9579 99.917 99.9905 99.9877 99.9987 98.9166 99.9974 99.424 99.9933 99.9874 99.7258 99.1731 99.9987 99.0658 99.9916 99.8425 99.998 99.9995 99.5637
H-7	99.65635357481061	if ( value instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 94.5141 99.9105 99.8018 99.9966 99.9708 99.9847 99.9692 99.6661 99.9952 99.9921 99.7388 99.7611 99.999 99.9136 99.7015 99.9989 99.9992 99.6372 99.8737 99.9551 99.8449 99.9953 99.9934 99.9272 99.6751 99.9992 99.8959 99.9009 99.9988 99.9993 99.1994
H-7	99.65595073084677	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 94.8482 99.984 99.9881 99.9264 99.6201 99.9994 99.8747 99.8475 99.999 99.9995 99.67
H-7	99.65567508820564	if ( x != null ) { result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 96.2007 99.7687 99.7898 99.7656 99.7989 99.995 99.9913 99.7707 99.6032 99.9984 99.8857 99.8095 99.9988 99.9992 99.5735 99.5931 99.9683 99.817 99.995 99.993 99.9256 99.6936 99.9994 99.8923 99.8731 99.9989 99.9994 99.1724
H-7	99.65562855113636	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( arr ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 95.5619 99.8257 99.9989 99.9995 99.646 99.8649 99.9503 99.8409 99.9951 99.9929 99.9281 99.7106 99.9992 98.9597 99.8855 99.9987 99.9993 99.1797
H-7	99.65417874243951	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else if ( x instanceof Array CaMeL List ) {
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 96.2536 99.9978 99.8165 99.9265 99.8441 99.9973 99.9825 99.9889 99.9811 98.0333
H-7	99.65396484375	result . add ( flatten ( x ) ) ; } } return result ; } else { return flatten ( arr ) ;
P-7	99.9944 99.9888 99.6976 99.4733 99.9985 99.8638 99.7867 99.9985 99.9994 98.7892 98.1631 99.5645 99.8234 99.8429 98.6599 99.619 99.9013 99.6478 99.6084 99.9949 99.8487 99.8988 99.9866 99.86
H-7	99.65311686197917	if ( x instanceof Array CaMeL List ) { result . add ( x ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 95.242 99.9605 99.9993 99.7995 99.8675 99.9531 99.8525 99.9946 99.9935 99.9289 99.6437 99.9987 99.8996 99.8168 99.9988 99.9994 99.1244
H-7	99.65228678385417	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { return flatten ( x ) ; }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 95.8807 99.375 99.9954 99.8305 99.8867 99.9963 99.619 99.5684
H-7	99.649716796875	result . add ( flatten ( x ) ) ; } } else { result . add ( flatten ( x ) ) ;
P-7	99.9944 99.9888 99.6976 99.4733 99.9985 99.8638 99.7867 99.9985 99.9994 98.7892 98.1631 97.8607 99.8913 99.5205 99.9897 99.9856 99.8994 99.6717 99.9993 99.7135 99.8352 99.9984 99.9994 99.7849
H-7	99.64911941002156	if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( flatten ( x , ( Array CaMeL List ) x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 98.5451 99.9819 99.9995 99.3557 99.9991 99.9218 98.382 98.1793 99.9054 99.9952 99.9921 99.9982 99.8094 99.9536 99.9991 99.9997 99.0195
H-7	99.647197265625	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , flatten ( x ) ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 98.5823 98.0527 99.999 99.8764 99.3231 99.9888 99.9992 99.9996 99.1432
H-7	99.64155635127315	result . add CaMeL All ( flatten ( x ) ) ; } } return result ; } else { return flatten ( arr ) ;
P-7	99.9944 99.9888 98.6501 99.9674 99.9992 99.7385 99.9989 99.8827 99.8136 99.9989 99.9996 98.7041 98.1249 99.5427 99.8263 99.8364 98.5699 99.6194 99.9019 99.651 99.5985 99.9945 99.8466 99.8924 99.9889 99.8531
H-7	99.64008331298828	if ( x instanceof Array CaMeL List ) result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 95.1062 99.9935 99.9905 99.717 99.75 99.9987 99.9182 99.7618 99.999 99.9993 98.7991 99.7241 99.9299 99.7703 99.9938 99.9905 99.9241 99.7121 99.9991 99.8995 99.8634 99.9988 99.9993 99.4641
H-7	99.63970736799568	if ( x instanceof Array CaMeL List ) { return flatten ( x ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 95.7073 99.0646 99.9968 99.8432 99.7777 99.9961 99.732 99.876 99.9485 99.7947 99.9934 99.9903 99.8262 99.6396 99.9987 99.8898 99.9381 99.9984 99.9993 99.3906
H-7	99.63919165826613	for ( Object x : n@@ arr ) { if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( flatten ( x ) ) ;
P-7	99.9941 99.8117 99.5966 99.7503 99.9355 99.9953 99.9972 99.964 99.0061 99.9981 99.8929 99.9557 99.8731 99.9967 99.9731 99.9892 99.961 99.7949 99.996 99.9932 98.5754 99.9858 99.9994 99.4723 99.9989 99.9071 99.5282 99.9989 99.9994 98.7955
H-7	99.63688151041667	result . add CaMeL All ( flatten ( x ) ) ; } } else { result . add ( flatten ( x ) ) ;
P-7	99.9944 99.9888 98.6501 99.9674 99.9992 99.7385 99.9989 99.8827 99.8136 99.9989 99.9996 98.7041 98.1249 97.8953 99.895 99.5226 99.9898 99.9854 99.7896 99.6208 99.9989 99.7124 99.8011 99.9981 99.9993 99.7872
H-7	99.6341552734375	if ( x instanceof Array CaMeL List ) { return flatten ( x ) ; } else { result . add ( flatten ( x ) ) ; }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 95.7073 99.0646 99.9968 99.8432 99.7777 99.9961 99.732 99.876 99.9485 99.7947 99.9934 99.9903 99.8262 99.6396 99.9987 99.8898 99.9381 99.9984 99.9993 99.2009 99.6628
H-7	99.63226725260417	if ( x instanceof Array CaMeL List ) result . add ( flatten ( x ) ) ; else result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 95.1062 99.9935 99.9905 99.717 99.75 99.9987 99.9182 99.7618 99.999 99.9993 99.3075 99.3615 99.9926 99.9914 99.9381 99.6623 99.9992 99.8984 99.8667 99.9989 99.9993 99.5372
H-7	99.63193044354838	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { result . add ( this ) ; }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 99.8479 99.9952 99.9932 99.9302 94.2044 99.9162 99.9987 99.7972 99.4903
H-7	99.63141276041667	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , ( Array CaMeL List ) flatten ( x ) ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 98.5823 97.9132 99.9057 99.9956 99.9922 99.998 97.6449 99.9994 99.8867 99.6286 99.9884 99.9991 99.9996 99.193
H-7	99.6305440266927	result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9944 99.9888 99.6976 99.4733 99.9985 99.8638 99.7867 99.9985 99.9994 98.7892 95.5686 99.954 99.7528 99.9934 99.9898 99.9155 99.6682 99.9994 99.8708 99.8505 99.9987 99.9994 99.642
H-7	99.63052571614584	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , ( Array CaMeL List ) x ) ) ; } else {
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 98.5823 97.9132 99.9057 99.9956 99.9922 99.998 99.7994 99.9503 99.9991 99.9997 99.5725 99.8639 99.9562 97.1714
H-7	99.62828327047414	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else { return flatten ( x ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 95.8807 99.375 99.9954 99.8305 99.8867 99.9963 98.839
H-7	99.62400599888393	if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( ( Array CaMeL List ) flatten ( x ) ) ; }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 98.5451 99.9819 99.9995 98.937 99.9397 99.9949 99.99 99.9988 99.5457 99.9994 99.9127 99.8042 99.9986 99.9995 99.505 96.532
H-7	99.62286166487068	if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( ( Array CaMeL List ) flatten ( x , x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 98.5451 99.9819 99.9995 98.937 99.9397 99.9949 99.99 99.9988 99.5457 99.9994 99.9127 98.2538 98.4514 99.7012 99.9991 99.9997 99.025
H-7	99.62076542295259	if ( x instanceof Array CaMeL List ) { if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 95.5758 99.9968 99.4216 99.9489 99.8408 99.9966 99.9857 99.9905 99.9595 99.4443 99.9948 99.9927 99.7531 99.7955 99.999 99.9141 99.8014 99.9991 99.999 98.4432
H-7	99.61879319411058	result . add CaMeL All ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9944 99.9888 98.6501 99.9674 99.9992 99.7385 99.9989 99.8827 99.8136 99.9989 99.9996 98.7041 95.5157 99.956 99.749 99.9935 99.9894 99.7919 99.6381 99.9993 99.8523 99.8668 99.9987 99.9993 99.6632
H-7	99.61727792245371	if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( flatten ( x , flatten ( x ) ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 98.5451 99.9819 99.9995 99.3557 99.9991 99.9218 98.382 98.0967 99.9988 99.8431 99.5401 99.9871 99.9992 99.9997 99.2292
H-7	99.6141357421875	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , new Array CaMeL List ( $NUMBER$ ) ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 98.5823 96.532 99.7537 99.9969 99.9914 99.8923 99.3718 99.9752 99.996 99.9993 99.9997 98.8895
H-7	99.61100260416667	if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( ( Array CaMeL List ) flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 98.5451 99.9819 99.9995 98.937 99.9397 99.9949 99.99 99.9988 99.5457 99.9994 99.9127 99.8042 99.9986 99.9995 96.062
H-7	99.6090234375	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } return result ; }
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 96.211 99.7614 99.814 99.8079 99.0535
H-7	99.602646484375	result . add ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }
P-7	99.9944 99.9888 99.6976 99.4733 99.9985 99.8638 99.7867 99.9985 99.9994 98.7892 95.5686 99.954 99.7528 99.9934 99.9898 99.9155 99.6682 99.9994 99.8708 99.8505 99.9987 99.9994 98.7714 99.8036
H-7	99.59469839242789	result . add ( flatten ( x ) ) ; } } else { result . add ( flatten ( x ) ) ; }
P-7	99.9944 99.9888 99.6976 99.4733 99.9985 99.8638 99.7867 99.9985 99.9994 98.7892 98.1631 97.8607 99.8913 99.5205 99.9897 99.9856 99.8994 99.6717 99.9993 99.7135 99.8352 99.9984 99.9994 98.2978 99.7063
H-7	99.59090169270833	result . add CaMeL All ( flatten ( x ) ) ; } else { result . add ( flatten ( x ) ) ; }
P-7	99.9944 99.9888 98.6501 99.9674 99.9992 99.7385 99.9989 99.8827 99.8136 99.9989 99.9996 98.7041 95.5157 99.956 99.749 99.9935 99.9894 99.7919 99.6381 99.9993 99.8523 99.8668 99.9987 99.9993 98.7184 99.8106
H-7	99.59022352430556	result . add ( new Array CaMeL List ( $NUMBER$ ) ) ; } else { result . add ( flatten ( x ) ) ;
P-7	99.9944 99.9888 99.6976 97.3225 99.7426 99.9964 99.9851 99.9647 99.0952 99.9567 99.9993 99.9996 99.0666 96.2656 99.93 99.7619 99.9932 99.9908 99.914 99.656 99.9986 99.8134 99.789 99.9984 99.9992 99.6771
H-7	99.58916766826923	if ( x instanceof Array CaMeL List ) { result . add ( new Array CaMeL List ( flatten ( x ) ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 96.6338 99.716 99.9972 99.9873 99.9446 97.9351 99.9993 99.9105 99.7536 99.9394 99.9995 99.9996 98.9822
H-7	99.587412109375	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x , x ) ) ; } else {
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 98.5823 98.6063 99.7028 99.9991 99.9997 99.6174 99.8642 99.9544 97.1431
H-7	99.5852520282452	result . add ( flatten ( x ) ) ; } } return result ; } else { return flatten ( arr ) ; }
P-7	99.9944 99.9888 99.6976 99.4733 99.9985 99.8638 99.7867 99.9985 99.9994 98.7892 98.1631 99.5645 99.8234 99.8429 98.6599 99.619 99.9013 99.6478 99.6084 99.9949 99.8487 99.8988 99.9866 97.8688 99.8584
H-7	99.584736328125	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } } return result ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 96.7842 98.7855 99.8377 99.7636 98.8699
H-7	99.58326134314903	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } } } return result ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 96.7842 98.0638 99.5554 99.8045 99.8204 99.5589
H-7	99.581416015625	result . add ( flatten ( x ) ) ; } } else { result . add ( flatten ( arr ) ) ;
P-7	99.9944 99.9888 99.6976 99.4733 99.9985 99.8638 99.7867 99.9985 99.9994 98.7892 98.1631 97.8607 99.8913 99.5205 99.9897 99.9856 99.8994 99.6717 99.9993 97.9907 99.8316 99.9987 99.9995 99.8036
H-7	99.56800426136364	result . add ( x ) ; } } return result ; } else { return flatten ( arr ) ;
P-7	99.9944 99.9888 99.6976 97.4537 99.9651 99.9989 99.4389 98.4662 99.4426 99.8365 99.8454 98.7346 99.6082 99.8977 99.642 99.5934 99.9932 99.8533 99.8646 99.9864 99.8553
H-7	99.56627400716145	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } return result ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 96.211 99.7614 99.814 98.2264
H-7	99.5463230298913	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ; } else {
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 99.6483 99.8806 99.9583 94.1488
H-7	99.54290771484375	if ( x instanceof Array CaMeL List ) { result . add ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 99.7326 99.7796 99.999 99.9173 99.7152 99.9989 99.9992 94.9287
H-7	99.54115361752717	result . add ( flatten ( x ) ) ; } } return result ; } return flatten ( arr ) ;
P-7	99.9944 99.9888 99.6976 99.4733 99.9985 99.8638 99.7867 99.9985 99.9994 98.7892 98.1631 99.5645 99.8234 99.8429 98.6599 98.1566 98.7977 99.9939 99.7267 99.8669 99.9922 99.9289
H-7	99.52637828480114	if ( flatten ( x ) ) { result . add ( flatten ( x ) ) ; } else {
P-7	99.9977 97.3051 99.995 99.8044 99.7943 99.9896 99.7829 99.5542 99.9929 99.9882 99.7627 99.606 99.999 99.8772 99.8834 99.9989 99.9992 99.4872 99.6844 99.96 97.265
H-7	99.52056329900569	if ( x instanceof Array CaMeL List ) { result . add CaMeL All ( flatten ( x ) ) ;
P-7	99.9977 99.605 99.9195 99.8423 99.9968 99.9781 99.9881 99.9697 99.6505 99.9951 99.9921 98.5451 99.9819 99.9995 99.3557 99.9991 99.9218 99.7738 99.9989 99.9996 95.0894
H-7	99.51078869047619	return flatten ( x ) ; } } return result ; } else { return flatten ( arr ) ;
P-7	99.2227 99.9937 99.6579 99.7515 99.9951 99.1918 98.2598 99.2919 99.742 99.838 98.5184 99.6106 99.8946 99.6813 99.6035 99.9946 99.844 99.8902 99.9907 99.8542
H-7	99.42099233774039	result . add CaMeL All ( flatten ( x ) ) ;
P-7	99.9944 99.9888 98.6501 99.9674 99.9992 99.7385 99.9989 99.8827 99.8136 99.9989 99.9996 95.1015
H-7	99.38822937011719	result . add ( flatten ( x ) ) ; } } return result ;
P-7	99.9944 99.9888 99.6976 99.4733 99.9985 99.8638 99.7867 99.9985 99.9994 98.7892 98.1631 99.5645 99.8234 99.8429 95.8879
H-7	99.38676234654018	result . add CaMeL All ( flatten ( x ) ) ; }
P-7	99.9944 99.9888 98.6501 99.9674 99.9992 99.7385 99.9989 99.8827 99.8136 99.9989 99.9996 98.7041 95.3391
H-7	99.38255726207386	result . add ( flatten ( x ) ) ;
P-7	99.9944 99.9888 99.6976 99.4733 99.9985 99.8638 99.7867 99.9985 99.9994 95.0676
H-7	99.3551025390625	result . add ( flatten ( x ) ) ; }
P-7	99.9944 99.9888 99.6976 99.4733 99.9985 99.8638 99.7867 99.9985 99.9994 98.7892 95.3314
S-8	return gcd ( a % b , b ) ;
T-8	return gcd ( b , a % b ) ;
H-8	99.71779563210227	return gcd ( a % b , b ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 99.7461 99.399 99.9948 99.565
H-8	99.65940348307292	return gcd ( a % b , b ) ; }
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 99.7461 99.399 99.9948 98.9254 99.6567
H-8	99.63849346454327	return gcd ( a % b , b , b ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 99.7461 98.8477 99.2351 99.6641 99.9956 99.621
H-8	99.56895094651442	return gcd ( a % b , b ) ; } }
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 99.7461 99.399 99.9948 98.9254 98.6288 99.5114
H-8	99.49843343098958	return gcd ( a , b ) ;
P-8	99.3762 99.9885 99.6676 97.9405 99.8199 99.3282 99.9934 99.4626
H-8	99.49570534446023	return gcd ( a , b , b ) ;
P-8	99.3762 99.9885 99.6676 97.9405 99.8199 99.0632 99.4372 99.7376 99.9951 99.518
H-8	99.49112642728366	return gcd ( a % b % b , b ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 97.1656 99.8283 99.3663 99.6073 99.4611 99.995 99.6211
H-8	99.48046875	return gcd ( a % b , b , 0 ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 99.7461 98.8477 97.1977 99.6839 99.9931 99.5868
H-8	99.47821655273438	return gcd ( a , b ) ; }
P-8	99.3762 99.9885 99.6676 97.9405 99.8199 99.3282 99.9934 99.0971 99.6617
H-8	99.47215687144886	return gcd ( a - b , b ) ;
P-8	99.3762 99.9885 99.6676 97.077 99.65 99.7591 99.7709 99.5045 99.9944 99.4966
H-8	99.47074381510417	return gcd ( a , b , b ) ; }
P-8	99.3762 99.9885 99.6676 97.9405 99.8199 99.0632 99.4372 99.7376 99.9951 99.0089 99.7052
H-8	99.4565762606534	return gcd ( b % b , b ) ;
P-8	99.3762 99.9885 97.1909 99.4548 99.7655 99.7599 99.6991 99.3253 99.9949 99.5583
H-8	99.45058186848958	return gcd ( a - b , b ) ; }
P-8	99.3762 99.9885 99.6676 97.077 99.65 99.7591 99.7709 99.5045 99.9944 99.045 99.6649
H-8	99.44463556463069	return gcd ( a % b % b ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 97.1656 99.8283 99.0121 99.9919 99.5531
H-8	99.43993201622597	return gcd ( a % b , b , 1 ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 99.7461 98.8477 96.5969 99.7252 99.9919 99.6204
H-8	99.437744140625	return gcd ( a + b , b ) ;
P-8	99.3762 99.9885 99.6676 96.6093 99.6565 99.7774 99.7493 99.5794 99.9948 99.5072
H-8	99.43604454627403	return gcd ( a % b , b - 1 ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 99.7461 96.8577 98.6692 99.6321 99.9914 99.5813
H-8	99.42963324652777	return gcd ( a % b ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 97.0397 99.9894 99.4976
H-8	99.42369588216145	return gcd ( b % b , b ) ; }
P-8	99.3762 99.9885 97.1909 99.4548 99.7655 99.7599 99.6991 99.3253 99.9949 98.9379 99.6824
H-8	99.422607421875	return gcd ( a % 1 , b ) ;
P-8	99.3762 99.9885 99.6676 99.5896 96.4937 99.8581 99.8489 99.3649 99.9946 99.5573
H-8	99.42139610877403	return gcd ( a % b , b , $NUMBER$ ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 99.7461 98.8477 96.2998 99.7699 99.993 99.631
H-8	99.42064490685097	return gcd ( a % b , b % b ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 99.7461 95.7793 99.7491 99.4192 99.9945 99.5895
H-8	99.41416422526042	return gcd ( a + b , b ) ; }
P-8	99.3762 99.9885 99.6676 96.6093 99.6565 99.7774 99.7493 99.5794 99.9948 99.0278 99.6341
H-8	99.41378079927884	return gcd ( a % b , b , a ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 99.7461 98.8477 96.6527 99.3242 99.993 99.6247
H-8	99.40707397460938	return gcd ( a % b % b ) ; }
P-8	99.3762 99.9885 99.6676 99.5896 99.809 97.1656 99.8283 99.0121 99.9919 98.9488 99.5983
H-8	99.40227716619319	return gcd ( a % a , b ) ;
P-8	99.3762 99.9885 99.6676 99.5896 96.4857 99.6361 99.8217 99.4072 99.9935 99.5498
H-8	99.3993408203125	return gcd ( a % b ) ; }
P-8	99.3762 99.9885 99.6676 99.5896 99.809 97.0397 99.9894 99.0448 99.5796
H-8	99.39865347055289	return gcd ( a % b , a , b ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 95.726 99.1353 99.7232 99.8108 99.9951 99.6013
H-8	99.39771446814903	return gcd ( a - b , b , b ) ;
P-8	99.3762 99.9885 99.6676 97.077 99.65 99.7591 99.7709 98.6412 99.1621 99.6161 99.9953 99.5571
H-8	99.39670973557692	return gcd ( a % b , 0 , b ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 95.8036 99.3572 99.6159 99.6069 99.9955 99.5874
H-8	99.3943583170573	return gcd ( ( int ) b , b ) ;
P-8	99.3762 99.9885 97.2978 99.3303 99.9212 98.6605 99.3751 99.7286 99.6561 99.9959 99.4931
H-8	99.3895263671875	return gcd ( a , b ) ; } }
P-8	99.3762 99.9885 99.6676 97.9405 99.8199 99.3282 99.9934 99.0971 98.6193 99.5451
H-8	99.38878377278645	return gcd ( a % 1 , b ) ; }
P-8	99.3762 99.9885 99.6676 99.5896 96.4937 99.8581 99.8489 99.3649 99.9946 98.9396 99.6345
H-8	99.38644409179688	return gcd ( ( int ) a , b ) ;
P-8	99.3762 99.9885 97.2978 99.3303 99.9212 98.9195 99.0045 99.6122 99.8024 99.9955 99.4801
H-8	99.37877308238636	return gcd ( a * b , b ) ;
P-8	99.3762 99.9885 99.6676 95.9942 99.7868 99.7291 99.7705 99.4648 99.9939 99.4858
H-8	99.37073771158855	return gcd ( a % a , b ) ; }
P-8	99.3762 99.9885 99.6676 99.5896 96.4857 99.6361 99.8217 99.4072 99.9935 98.954 99.6196
H-8	99.36629231770833	return gcd ( a * b , b ) ; }
P-8	99.3762 99.9885 99.6676 95.9942 99.7868 99.7291 99.7705 99.4648 99.9939 99.0622 99.6526
H-8	99.36012776692708	return gcd ( a % b , b , ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 99.7461 98.8477 95.9247 99.9944 99.6178
H-8	99.35992986505681	return gcd ( a % $NUMBER$ , b ) ;
P-8	99.3762 99.9885 99.6676 99.5896 95.7987 99.858 99.8404 99.3694 99.9951 99.5666
H-8	99.3578768643466	return gcd ( a >> b , b ) ;
P-8	99.3762 99.9885 99.6676 95.408 99.7655 99.7339 99.8789 99.7516 99.9942 99.4632
H-8	99.35184733072917	return gcd ( a >> b , b ) ; }
P-8	99.3762 99.9885 99.6676 95.408 99.7655 99.7339 99.8789 99.7516 99.9942 99.0954 99.6533
H-8	99.33989923650569	return gcd ( b , b , b ) ;
P-8	99.3762 99.9885 97.1909 98.7627 99.7202 99.1884 99.407 99.6463 99.9952 99.5544
H-8	99.33549360795455	return gcd ( a % b ) ; } }
P-8	99.3762 99.9885 99.6676 99.5896 99.809 97.0397 99.9894 99.0448 98.8227 99.4539
H-8	99.33518288352273	return gcd ( a / b , b ) ;
P-8	99.3762 99.9885 99.6676 95.5434 99.7665 99.7198 99.7521 99.3634 99.9939 99.6066
H-8	99.32926432291667	return gcd ( a % $NUMBER$ , b ) ; }
P-8	99.3762 99.9885 99.6676 99.5896 95.7987 99.858 99.8404 99.3694 99.9951 98.9218 99.6367
H-8	99.32120768229167	return gcd ( b , b , b ) ; }
P-8	99.3762 99.9885 97.1909 98.7627 99.7202 99.1884 99.407 99.6463 99.9952 98.9441 99.726
H-8	99.31791178385417	return gcd ( ( int ) a % b ) ;
P-8	99.3762 99.9885 97.2978 99.3303 99.9212 98.9195 99.3245 99.6938 98.552 99.9923 99.5098
H-8	99.31316583806819	return gcd ( a % b , 0 ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 95.8036 98.9211 99.9899 99.5394
H-8	99.3122891512784	return gcd ( a , a , b ) ;
P-8	99.3762 99.9885 99.6676 97.9405 96.899 99.5809 99.7048 99.8687 99.9948 99.5052
H-8	99.30787242542614	return gcd ( a % 0 , b ) ;
P-8	99.3762 99.9885 99.6676 99.5896 95.4924 99.672 99.804 99.3452 99.9943 99.5478
H-8	99.30279541015625	return gcd ( a , a , b ) ; }
P-8	99.3762 99.9885 99.6676 97.9405 96.899 99.5809 99.7048 99.8687 99.9948 99.0308 99.6728
H-8	99.29944864908855	return gcd ( a / b , b ) ; }
P-8	99.3762 99.9885 99.6676 95.5434 99.7665 99.7198 99.7521 99.3634 99.9939 98.84 99.673
H-8	99.2931416829427	return gcd ( a % b , 0 ) ; }
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 95.8036 98.9211 99.9899 98.9728 99.6395
H-8	99.29249064127605	return gcd ( a % b , b $NUMBER$ ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 99.7461 94.5653 99.4225 99.9932 99.592
H-8	99.2909647623698	return ( gcd ( a % b ) ) ; }
P-8	97.4845 97.0456 99.9194 99.6766 99.537 99.7324 99.5713 99.9027 99.9603 99.1604 99.5923
H-8	99.29021661931819	return gcd ( 0 % b , b ) ;
P-8	99.3762 99.9885 95.9914 98.9965 99.5025 99.7553 99.7379 99.3906 99.995 99.5495
H-8	99.28679865056819	return ( gcd ( a % b ) ) ;
P-8	97.4845 97.0456 99.9194 99.6766 99.537 99.7324 99.5713 99.9027 99.9603 99.4159
H-8	99.28614298502605	return gcd ( a % 0 , b ) ; }
P-8	99.3762 99.9885 99.6676 99.5896 95.4924 99.672 99.804 99.3452 99.9943 98.9568 99.638
H-8	99.28221978081598	return gcd ( b , b ) ;
P-8	99.3762 99.9885 97.1909 98.7627 99.7202 99.1058 99.9942 99.4924
H-8	99.27964477539062	return gcd ( b , b ) ; }
P-8	99.3762 99.9885 97.1909 98.7627 99.7202 99.1058 99.9942 99.052 99.6969
H-8	99.2776766690341	return gcd ( a % b , a ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 95.726 98.5651 99.991 99.5816
H-8	99.27654474431819	return gcd ( a & b , b ) ;
P-8	99.3762 99.9885 99.6676 95.0194 99.5873 99.6087 99.6594 99.7174 99.9952 99.5134
H-8	99.2740987141927	return gcd ( a % b , - 1 ) ;
P-8	99.3762 99.9885 99.6676 99.5896 99.809 99.8508 94.9765 99.0524 99.4916 99.9887 99.5892
H-8	99.27354939778645	return gcd ( a ] % b , b ) ;
P-8	99.3762 99.9885 99.6676 94.8141 99.211 99.7647 99.7234 99.647 99.6473 99.9956 99.5382
H-8	99.27056884765625	return gcd ( 0 % b , b ) ; }
P-8	99.3762 99.9885 95.9914 98.9965 99.5025 99.7553 99.7379 99.3906 99.995 98.9545 99.6495
H-8	99.26218668619792	return gcd ( a & b , b ) ; }
P-8	99.3762 99.9885 99.6676 95.0194 99.5873 99.6087 99.6594 99.7174 99.9952 99.0171 99.6006
H-8	99.25743611653645	return gcd ( ( int ) b % b ) ;
P-8	99.3762 99.9885 97.2978 99.3303 99.9212 98.6605 98.805 99.6546 98.6652 99.9934 99.4876
H-8	99.25410600142045	return gcd ( a , b , 0 ) ;
P-8	99.3762 99.9885 99.6676 97.9405 99.8199 99.0632 96.9745 99.5677 99.9931 99.4951
H-8	99.25376198508523	return gcd ( a , b % b ) ;
P-8	99.3762 99.9885 99.6676 97.9405 99.8199 96.5698 99.6808 99.3473 99.9946 99.4972
H-8	99.24220969460227	return gcd ( b % b % b ) ;
P-8	99.3762 99.9885 97.1909 99.4548 99.7655 97.5675 99.8223 99.057 99.9924 99.5402
H-8	99.24186567826705	return gcd ( a % a % b ) ;
P-8	99.3762 99.9885 99.6676 99.5896 96.4857 98.5042 99.7948 98.7974 99.9891 99.5584
H-8	99.23829234730114	return gcd ( 0 , b , b ) ;
P-8	99.3762 99.9885 95.9914 99.0997 99.5106 98.9636 99.5303 99.7443 99.9955 99.5122
H-8	99.19802856445312	return gcd ( a ] , b ) ;
P-8	99.3762 99.9885 99.6676 94.8141 99.1252 99.8306 99.8089 99.9954 99.4649
H-8	99.1912841796875	return gcd ( a > b ) ; }
P-8	99.3762 99.9885 99.6676 95.5994 99.3605 99.4949 99.7326 99.1239 99.6602
H-8	99.18687744140625	return gcd ( b % b ) ; }
P-8	99.3762 99.9885 97.1909 99.4548 99.7655 97.5079 99.9919 99.067 99.6172
H-8	99.18533664279514	return gcd ( b % b ) ;
P-8	99.3762 99.9885 97.1909 99.4548 99.7655 97.5079 99.9919 99.4834
H-8	99.18006591796875	return gcd ( a - b ) ; }
P-8	99.3762 99.9885 99.6676 97.077 99.65 97.4372 99.9887 99.1052 99.6012
H-8	99.17473008897569	return gcd ( a > b ) ;
P-8	99.3762 99.9885 99.6676 95.5994 99.3605 99.4949 99.7326 99.4438
H-8	99.17468872070313	return gcd ( ( int ) b ) ;
P-8	99.3762 99.9885 97.2978 99.3303 99.9212 98.6605 97.8228 99.9939 99.4467
H-8	99.17327270507812	return gcd ( 0 , b ) ; }
P-8	99.3762 99.9885 95.9914 99.0997 99.5106 99.1016 99.994 99.1111 99.6508
H-8	99.17241753472223	return gcd ( a - b ) ;
P-8	99.3762 99.9885 99.6676 97.077 99.65 97.4372 99.9887 99.4575
H-8	99.17235107421875	return gcd ( a $NUMBER$ , b ) ;
P-8	99.3762 99.9885 99.6676 94.6187 99.1475 99.834 99.6841 99.9945 99.5034
H-8	99.16489083426339	return a % b ; }
P-8	97.4173 98.6992 99.3705 99.8244 99.3435 99.5903
H-8	99.15819634331598	return gcd ( 0 , b ) ;
P-8	99.3762 99.9885 95.9914 99.0997 99.5106 99.1016 99.994 99.4529
H-8	99.14255777994792	return gcd ( a + b ) ;
P-8	99.3762 99.9885 99.6676 96.6093 99.6565 97.5973 99.9893 99.4893
H-8	99.11520046657986	return ( a % b ) ; }
P-8	97.4845 98.1452 98.1416 99.6921 99.8222 99.8205 99.4248 99.5968
H-8	99.09881591796875	return a % b ; } }
P-8	97.4173 98.6992 99.3705 99.8244 99.3435 98.808 99.4186
H-8	99.09559849330357	return b % b ; }
P-8	97.1877 98.5198 99.2334 99.7783 99.4163 99.6245
H-8	99.06554412841797	if ( b == 0 ) {
P-8	99.9967 99.4852 99.7802 99.5509 99.5499 99.8545 98.5588
H-8	99.02951049804688	return b % b ; } }
P-8	97.1877 98.5198 99.2334 99.7783 99.4163 98.724 99.4675
H-8	99.0239028930664	return ( int ) b ; }
P-8	97.4845 97.8291 99.9818 98.102 99.8527 99.4628 99.5694
H-8	99.02125549316406	return ( a % b ) ;
P-8	97.4845 98.1452 98.1416 99.6921 99.8222 99.8205 99.1548
H-8	98.99237060546875	return ( b % b ) ;
P-8	97.4845 98.5243 97.6297 99.5853 99.8393 99.8483 99.1186
H-8	98.94965471540179	return gcd ( a ) ;
P-8	99.3762 99.9885 99.6676 94.2732 99.9755 99.4575
H-8	98.89448765345982	return ( int ) b ;
P-8	97.4845 97.8291 99.9818 98.102 99.8527 99.1024
H-8	98.87106759207589	return ( int ) a ;
P-8	97.4845 97.8291 99.9818 97.7135 99.828 99.3516
H-8	98.52133178710938	return a ; }
P-8	97.4173 99.2689 99.4434 96.568
H-8	98.51561889648437	return b ; }
P-8	97.1877 99.2859 99.5585 96.6369
H-8	98.13949584960938	return a ;
P-8	97.4173 99.2689 95.9627
H-8	98.04180908203125	return b ;
P-8	97.1877 99.2859 95.7846
S-9	return new Array CaMeL List < Integer > ( ) ;
T-9	return new Array CaMeL List < Integer > ( Arrays . as CaMeL List ( n ) ) ;
H-9	99.91443888346355	return new Array CaMeL List < Integer > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 99.7754 99.9932 99.683
H-9	99.80918532151442	return new Array CaMeL List < Integer > ( 0 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 98.3113 99.9521 99.9974 99.7371
H-9	99.77860201322116	return new Array CaMeL List < Integer > ( ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 99.7754 99.9932 98.683 99.1486
H-9	99.67930094401042	return new Array CaMeL List < Long > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 97.0399 99.9913 99.9968 99.7864 99.9926 99.712
H-9	99.67360142299107	return new Array CaMeL List < Integer > ( 0 ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 98.3113 99.9521 99.9974 98.5191 99.129
H-9	99.60563659667969	return new Array CaMeL List new Array CaMeL List < Integer > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 94.9434 99.7388 99.9907 99.9744 99.9433 99.9051 99.9823 99.9975 99.7611 99.9966 99.7638
H-9	99.5872051532452	return new Array CaMeL List < Long > ( 0 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 97.0399 99.9913 99.9968 98.2652 99.9466 99.9974 99.7639
H-9	99.55557955228366	return new Array CaMeL List < Long > ( ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 97.0399 99.9913 99.9968 99.7864 99.9926 98.5989 99.1841
H-9	99.55422973632812	return new Array CaMeL List < Integer >> ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 95.7576 99.9938 99.6861 99.9931 99.6798
H-9	99.54525553385416	return new Array CaMeL List < Integer > ( 0 . 1 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 98.3113 96.8406 98.9348 99.8545 99.9959 99.7199
H-9	99.5322265625	return new Array CaMeL List < Integer > ( 0 . 0 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 98.3113 96.8406 98.814 99.7884 99.9965 99.711
H-9	99.52413940429688	return new Array CaMeL List . Array CaMeL List < Integer > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 94.2421 99.2222 99.9383 99.9634 99.9662 99.9101 99.9831 99.997 99.7389 99.9958 99.7363
H-9	99.52214704241071	return Collections . new Array CaMeL List < Integer > ( ) ;
P-9	96.0489 99.9988 98.8655 99.3976 99.9918 99.9715 99.9462 99.9062 99.9832 99.9949 99.6594 99.9956 99.641
H-9	99.51461588541666	return new Array CaMeL List < Integer > < Integer > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 93.8745 99.9196 99.9816 99.9961 99.6155 99.9822 99.8254
H-9	99.504150390625	return new Array CaMeL List < Integer >> ( 0 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 95.7576 99.9938 98.5766 99.9516 99.9979 99.7359
H-9	99.50230305989584	return new Array CaMeL List < Integer > ( 0 . $NUMBER$ ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 98.3113 96.8406 98.3847 99.7475 99.9971 99.7316
H-9	99.494140625	return new Array CaMeL List < Integer > < Integer > ( 0 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 93.8745 99.9196 99.9816 99.9961 98.7911 99.976 99.9891 99.854
H-9	99.48560384114583	return Collections . new Array CaMeL List < Integer > ( 0 ) ;
P-9	96.0489 99.9988 98.8655 99.3976 99.9918 99.9715 99.9462 99.9062 99.9832 99.9949 98.6482 99.9346 99.9982 99.6891
H-9	99.48159790039062	return new Linked CaMeL List < Integer > ( ) ;
P-9	99.9145 94.6443 99.994 99.98 99.9435 99.91 99.9842 99.9978 99.8557 99.9949 99.6508
H-9	99.47838338216145	return new Array CaMeL List < String > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 94.5888 99.9875 99.9982 99.8501 99.9933 99.6899
H-9	99.46670532226562	return new Array CaMeL List extends Array CaMeL List < Integer > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 94.5239 97.9162 99.9895 99.9687 99.9532 99.9065 99.981 99.9976 99.7384 99.9925 99.8065
H-9	99.46320049579327	return new Array CaMeL List < Integer > ( 1 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 94.0365 99.6992 99.9974 99.7669
H-9	99.4609375	return new Array CaMeL List < Long > ( 0 ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 97.0399 99.9913 99.9968 98.2652 99.9466 99.9974 98.4221 99.1612
H-9	99.4503173828125	return new Array CaMeL List <= Integer > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 94.3774 99.9031 99.9858 99.9965 99.7566 99.988 99.7033
H-9	99.44806671142578	return new Array CaMeL List < Array CaMeL List < Integer > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 92.1529 99.9845 99.9777 99.9299 99.9239 99.957 99.9962 99.8033 99.9823 99.8285
H-9	99.44659893329327	return new Array CaMeL List < Integer >> ( ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 95.7576 99.9938 99.6861 99.9931 98.6912 99.1436
H-9	99.44603729248047	return new Array CaMeL List < Integer > ( 0 . 1 ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 98.3113 96.8406 98.9348 99.8545 99.9959 98.5708 99.107
H-9	99.44210052490234	return new Array CaMeL List < Hash CaMeL Set < Integer > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 93.0292 99.9371 99.0779 99.9361 99.917 99.951 99.9961 99.7977 99.9798 99.8193
H-9	99.4406982421875	return Collections . new Array CaMeL List < Integer > ( ) ; }
P-9	96.0489 99.9988 98.8655 99.3976 99.9918 99.9715 99.9462 99.9062 99.9832 99.9949 99.6594 99.9956 98.7892 99.1523
H-9	99.4381332397461	return new Array CaMeL List < Integer > ( 0 . 0 ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 98.3113 96.8406 98.814 99.7884 99.9965 98.599 99.1388
H-9	99.43753051757812	return new Hash CaMeL Set < Integer > ( ) ;
P-9	99.9145 97.0687 99.9896 97.0775 99.9273 99.8999 99.9801 99.9967 99.8091 99.991 99.6864
H-9	99.43409075055804	return new Array CaMeL List < Integer > ( ) + 1 ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 99.7754 93.5525 99.4895 99.9719 99.7664
H-9	99.42889811197917	return Array CaMeL List < Integer > get _ factors ( n ) ;
P-9	94.8162 99.9915 99.9735 99.925 99.9341 99.9848 97.9012 99.9746 99.882 99.976 99.6485 99.6967 99.995 99.8247
H-9	99.4246317545573	return new Array CaMeL List < ? > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 94.4154 99.5051 99.9979 99.8302 99.9769 99.7375
H-9	99.41536458333333	return new Array CaMeL List extends Integer > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 94.5239 99.598 99.9967 99.9982 99.5781 99.9956 99.6008
H-9	99.4140869140625	return new Array CaMeL List < Integer > ( ) ; } else {
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 99.7754 99.9932 98.683 95.4506 99.6754 98.1121
H-9	99.41310471754808	return new Array CaMeL List < Integer > ( true ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 93.1126 99.9883 99.9976 99.7503
H-9	99.41224016462054	return new Array CaMeL List < Integer > ( 0 . ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 98.3113 96.8406 97.3439 99.9949 99.759
H-9	99.4053203876202	return new Array CaMeL List extends Integer > ( 0 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 94.5239 99.598 99.9967 99.9982 98.8189 99.9542 99.9983 99.6877
H-9	99.3960693359375	return new Array CaMeL List > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 94.9141 99.9986 99.8694 99.9973 99.4882
H-9	99.39157540457589	return ( new Array CaMeL List < Integer > ( ) ) ;
P-9	94.6107 98.0897 99.8864 99.9923 99.9831 99.9491 99.8942 99.981 99.9967 99.7213 99.885 99.9902 99.5928
H-9	99.39036342075893	return new Array CaMeL List < Integer >> ( 0 ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 95.7576 99.9938 98.5766 99.9516 99.9979 98.5229 99.1242
H-9	99.38836200420673	return new Linked CaMeL List < Integer > ( ) ; }
P-9	99.9145 94.6443 99.994 99.98 99.9435 99.91 99.9842 99.9978 99.8557 99.9949 98.7657 99.1545
H-9	99.38792067307692	return new Array CaMeL List <= Integer > ( 0 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 94.3774 99.9031 99.9858 99.9965 98.3838 99.9627 99.9845 99.7558
H-9	99.3870849609375	return new Array CaMeL List < Integer > ( 1 . 0 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 94.0365 98.6246 99.024 99.8642 99.997 99.7382
H-9	99.38503793569711	return new Array CaMeL List < Integer > ( false ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 92.7583 99.9909 99.9974 99.7374
H-9	99.38373272235577	return new Array CaMeL List < Integer > ( $NUMBER$ ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 92.93 99.7648 99.9985 99.7736
H-9	99.37775127704327	return new Array CaMeL List < String > ( ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 94.5888 99.9875 99.9982 99.8501 99.9933 98.6639 99.1961
H-9	99.37098106971153	return new Linked CaMeL List < Integer > ( 0 ) ;
P-9	99.9145 94.6443 99.994 99.98 99.9435 99.91 99.9842 99.9978 97.8926 99.9362 99.9974 99.7186
H-9	99.37078387920673	return new Array CaMeL List < String > ( 0 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 94.5888 99.9875 99.9982 97.934 99.9468 99.9976 99.7347
H-9	99.36749267578125	return new Array CaMeL List < Object > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 93.2465 99.994 99.9969 99.8383 99.9927 99.7088
H-9	99.36650739397321	return new Array CaMeL List < Integer extends Integer > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 92.1537 99.925 99.9867 99.9973 99.729 99.9913 99.8077
H-9	99.3646991436298	return new Array CaMeL List < Integer > ( n ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 92.701 99.8419 99.9982 99.6783
H-9	99.35652982271634	{ return new Array CaMeL List < Integer > ( ) ;
P-9	99.4264 99.9281 99.8968 99.9954 99.9806 99.9439 99.9112 99.9855 99.9976 99.6939 99.9928 99.4434
H-9	99.35541240985577	return new Hash CaMeL Set < Integer > ( 0 ) ;
P-9	99.9145 97.0687 99.9896 97.0775 99.9273 99.8999 99.9801 99.9967 98.1625 99.9445 99.9953 99.7544
H-9	99.35526899857955	return new Array CaMeL List Integer > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 94.0382 99.9204 99.9983 99.7705 99.9971 99.4905
H-9	99.35385366586539	result = new Array CaMeL List < Integer > ( ) ;
P-9	99.8948 99.9418 99.8673 99.9954 99.9804 99.9464 99.8982 99.9815 99.9968 99.7635 99.995 99.8219
H-9	99.35021100725446	return new Array CaMeL List < Integer > ( ) ; break ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 99.7754 99.9932 92.3005 99.9829 99.3292
H-9	99.34375	return new Array CaMeL List <= Integer > ( ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 94.3774 99.9031 99.9858 99.9965 99.7566 99.988 98.6248 99.1435
H-9	99.34330240885417	return new Array CaMeL List < Boolean > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 92.9131 99.991 99.9968 99.8602 99.9927 99.7331
H-9	99.34302629743304	return new Hash CaMeL Map < Integer , Integer > ( ) ;
P-9	99.9145 97.0687 99.9896 94.9902 99.9239 99.8092 99.8146 99.7786 99.9659 99.9969 99.8862 99.994 99.7605
H-9	99.34107317243304	return new Array CaMeL List < Integer > ( 1 ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 94.0365 99.6992 99.9974 98.4098 99.1105
H-9	99.34026630108173	return new Hash CaMeL Set < Integer > ( ) ; }
P-9	99.9145 97.0687 99.9896 97.0775 99.9273 99.8999 99.9801 99.9967 99.8091 99.991 98.6733 99.1862
H-9	99.33960899939903	return new Array CaMeL List extends Integer > ( ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 94.5239 99.598 99.9967 99.9982 99.5781 99.9956 98.8781 99.1532
H-9	99.33935546875	return new Array CaMeL List > ( ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 94.9141 99.9986 99.8694 99.9973 99.0772 99.1832
H-9	99.33673095703125	return new Array CaMeL List >= Integer > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 93.81 99.3612 99.9725 99.9969 99.5898 99.9798 99.6374
H-9	99.33033165564903	return new Array CaMeL List >= Integer > ( 0 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 93.81 99.3612 99.9725 99.9969 98.8366 99.9697 99.9652 99.6891
H-9	99.33030348557692	return new Array CaMeL List < ? > ( 0 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 94.4154 99.5051 99.9979 98.0329 99.9586 99.9906 99.7606
H-9	99.32474772135417	return get _ factors ( n ) ;
P-9	95.3539 99.9432 99.9396 99.9694 99.7075 99.5122 99.99 99.5974
H-9	99.3177490234375	list = new Array CaMeL List < Integer > ( ) ;
P-9	99.78 99.9554 99.8016 99.9957 99.9783 99.9431 99.9034 99.982 99.9971 99.7309 99.997 99.8355
H-9	99.31357046274039	return new final Array CaMeL List < Integer > ( ) ;
P-9	99.9145 92.1752 99.6466 99.9939 99.9847 99.9461 99.9122 99.9831 99.9978 99.7883 99.9936 99.8308
H-9	99.31288655598958	return new Array CaMeL List < int > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 92.695 99.9918 99.9979 99.7799 99.994 99.6635
H-9	99.30545043945312	return new Array CaMeL List Integer > ( ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 94.0382 99.9204 99.9983 99.7705 99.9971 99.0728 99.175
H-9	99.28357950846355	return new Array CaMeL List Integer > ( 0 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 94.0382 99.9204 99.9983 98.2816 99.9398 99.9986 99.5329
H-9	99.28352864583333	return new Array CaMeL List < Double > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 92.2606 99.9932 99.9975 99.7907 99.9941 99.7337
H-9	99.28233846028645	return new Hashtable < Integer , Integer > ( ) ;
P-9	99.9145 92.6327 99.9418 99.8042 99.8533 99.7394 99.9625 99.9964 99.8388 99.994 99.801
H-9	99.2728780110677	return new Array CaMeL List < ? >> ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 94.4154 97.8409 99.9882 99.6887 99.9741 99.7346
H-9	99.26776123046875	return new Array CaMeL List < Long >> ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 97.0399 95.1488 99.9945 99.7022 99.9926 99.7026
H-9	99.26132202148438	return new Array CaMeL List == Integer > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 93.9722 98.1112 99.9801 99.9936 99.7968 99.9194 99.6696
H-9	99.25734641335227	return new Array CaMeL List Long > ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 93.0285 99.8016 99.9977 99.79 99.9966 99.5233
H-9	99.2572354403409	return new Array CaMeL List > ( 0 ) ;
P-9	99.9145 99.8947 99.9956 99.9789 94.9141 99.9986 97.7769 99.9416 99.9988 99.5065
H-9	99.25309244791667	return new Array CaMeL List < Integer > ( 0 .
P-9	99.9145 99.8947 99.9956 99.9789 99.9395 99.9077 99.984 99.9972 98.3113 96.8406 96.3635
H-9	99.23334350585938	return get _ factors ( n ) ; }
P-9	95.3539 99.9432 99.9396 99.9694 99.7075 99.5122 99.99 98.8813 99.1268
H-9	99.22324440696023	return super . get _ factors ( n ) ;
P-9	92.984 99.9144 99.8457 99.939 99.8496 99.9929 99.8071 99.8017 99.9947 99.417
H-9	99.18372192382813	return new List < Integer > ( ) ;
P-9	99.9145 92.8149 99.9543 99.9206 99.9875 99.9969 99.6881 99.9915 99.6596
H-9	99.16218397352431	return new Array CaMeL List ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 93.4511 99.9099 99.9959 99.4096
H-9	99.15755004882813	return new Vector < Integer > ( ) ;
P-9	99.9145 92.4782 99.8101 99.9358 99.9863 99.9971 99.8149 99.9928 99.7363
H-9	99.14600219726563	return new Array CaMeL List ( ) ; }
P-9	99.9145 99.8947 99.9956 99.9789 93.4511 99.9099 99.9959 99.1852 99.2248
H-9	99.14076538085938	return new Array CaMeL List >> ( ) ;
P-9	99.9145 99.8947 99.9956 99.9789 92.3963 99.9904 99.8147 99.9972 99.5161
H-9	99.1298828125	return Collections . empty CaMeL List ( ) ;
P-9	96.0489 99.9988 96.386 99.7341 99.9656 99.9982 99.9983 99.9971 99.2624
H-9	99.10470581054688	return get _ factors ( ) ;
P-9	95.3539 99.9432 99.9396 99.9694 98.096 99.9598 99.6663
H-9	99.06187608506944	return new Array CaMeL List - 1 ;
P-9	99.9145 99.8947 99.9956 99.9789 92.994 99.5501 99.948 99.3717
H-9	99.01561821831598	return get _ factors ( ) ; }
P-9	95.3539 99.9432 99.9396 99.9694 98.096 99.9598 98.7238 99.2454
H-9	99.0152587890625	return new Array CaMeL List null ; }
P-9	99.9145 99.8947 99.9956 99.9789 92.6536 99.9889 99.5085 99.2932
H-9	99.00570339626736	return get _ factors ( 0 ) ;
P-9	95.3539 99.9432 99.9396 99.9694 96.5381 99.7998 99.9805 99.6173
H-9	98.99163140190973	return Array CaMeL List < Integer > ;
P-9	94.8162 99.9915 99.9735 99.925 99.9341 99.9848 96.6933 99.6967
H-9	98.92247772216797	return new Array CaMeL List null ;
P-9	99.9145 99.8947 99.9956 99.9789 92.6536 99.9889 99.0441
H-9	98.48077392578125	throw new > 1 ;
P-9	99.8415 99.8791 99.5751 99.3419 99.5092
H-9	98.28426513671874	return null ; }
P-9	95.7085 99.9965 99.4406 96.3663
H-9	97.93611145019531	return null ;
P-9	95.7085 99.9965 96.1299
S-10	steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ;
T-10	steps . add ( new Pair < Integer , Integer > ( start , end ) ) ;
H-10	99.86861843532986	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 99.9611 99.9996 99.4699
H-10	99.84720458984376	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , end ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 99.8838 99.8971 99.9795 99.9996 99.5101
H-10	99.83824398643092	steps . add ( new Pair < Integer , Integer >> ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 99.776 99.4904 99.9876 99.916 99.9705 99.9501 99.9443 99.9708 99.9991 99.4586
H-10	99.81830797697368	steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 99.776 99.0749 99.9957 99.9245 99.9718 99.9545 99.9431 99.987 99.999 99.4581
H-10	99.8025634765625	steps . add CaMeL All ( han@@ oi ( height - 1 , start , helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 98.1439 99.7762 99.9267 99.8496 99.9521 99.9996 99.4892
H-10	99.80104282924107	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) , han@@ oi ( height - 1 , helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 96.6444 98.3729 99.9751 99.9741 99.855 99.9605 99.9952 99.8205 99.6407 99.5088 99.9189 99.9986 102.5601
H-10	99.79959309895834	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) , han@@ oi ( height - 1 , helper , end ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 96.6444 98.3729 99.9751 99.9741 99.855 99.9605 99.9952 99.8205 99.6407 99.0432 99.8293 99.9236 99.9738 99.9989 102.7758
H-10	99.78062337239584	steps . add CaMeL All ( han@@ oi ( height - 1 , start , helper ) , han@@ oi ( height - 1 , helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 98.1439 99.7762 99.9267 99.8496 96.8769 98.4413 99.974 99.9846 99.8719 99.9478 99.9951 99.7839 99.752 99.5193 99.9169 99.9984 102.7467
H-10	99.77498653017241	steps . add ( new Pair < Integer , Integer >> ( start , helper ) ) ; c@@ rap _ set . remove ( end ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 99.776 99.4904 99.9876 99.916 99.9705 99.9501 99.9443 99.9708 99.9991 94.6235 99.9594 99.9686 99.9271 99.9942 99.5992 99.9795 99.4735 99.9661 99.9935 102.5224
H-10	99.7646014873798	steps . add ( helper ) ; steps . add ( new Pair < Integer , Integer >> ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 96.7181 99.9319 99.9995 98.2598 99.9815 99.9514 99.2084 99.6849 99.8849 99.9892 99.7299 99.9883 99.7931 99.5454 99.9827 99.9124 99.9697 99.9475 99.9356 99.9546 99.9981 102.4121
H-10	99.76390759698276	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) ) ; steps . add ( height - 1 , helper ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 99.9611 99.9996 98.827 99.9801 99.973 99.2327 95.5704 99.7561 99.9836 99.9042 99.831 99.5236 99.9991 102.4073
H-10	99.72273763020833	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , end ) ) ; } return steps ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 99.8838 99.8971 99.9795 99.9996 97.2381 99.245 99.6498 99.9268 99.8517
H-10	99.71941583806819	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) ) ; } return steps ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 99.9611 99.9996 97.0395 99.2142 99.6166 99.9388 99.8528
H-10	99.71635298295455	steps . add CaMeL All ( han@@ oi ( height - 1 , start , helper , end ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 98.1439 99.7762 99.9267 97.9785 99.6112 99.9066 99.9802 99.9995 99.5229
H-10	99.71589006696429	steps . add ( new Pair < Pair < Integer , Integer >> ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 96.9154 99.9878 99.8118 99.9914 99.7224 99.7373 99.9926 99.9217 99.9679 99.9523 99.9439 99.9389 99.998 99.448
H-10	99.70133463541667	steps . add ( new Pair < Integer , Integer >> ( start , helper , end ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 99.776 99.4904 99.9876 99.916 99.9705 99.9501 97.0628 99.721 99.9054 99.9885 99.9993 99.4972
H-10	99.69676208496094	steps . add ( han@@ oi ( height - 1 , helper ) ) ;
P-10	99.9799 99.9683 99.2183 97.3171 99.9841 99.9944 99.9442 99.9795 99.9961 99.9083 99.7712 99.6657 99.98 99.9995 99.5072
H-10	99.69481360394022	steps . add ( new Pair < Integer , Integer >> ( start , helper ) ) ; } return steps ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 99.776 99.4904 99.9876 99.916 99.9705 99.9501 99.9443 99.9708 99.9991 96.8605 99.2612 99.5837 99.9455 99.8619
H-10	99.6947021484375	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) ) ; c@@ rap _ set . remove ( end ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 99.9611 99.9996 95.0652 99.9639 99.9677 99.918 99.9943 99.6306 99.9691 99.2727 99.9594 99.9885 99.5566
H-10	99.6945865028783	steps . add ( new Pair < Integer , String >> ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 96.8901 99.6407 99.996 99.9256 99.9716 99.9531 99.9415 99.9569 99.9989 99.4595
H-10	99.69449655633224	steps . add ( new Pair < Integer , Long >> ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 96.9686 99.5604 99.9883 99.9117 99.9705 99.9501 99.9475 99.972 99.9991 99.4638
H-10	99.69089762369792	steps . add CaMeL All ( han@@ oi ( height - 1 , start ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 98.1439 98.0921 99.8594 99.9993 99.4276
H-10	99.686015625	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) ) ; steps . add ( end ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 99.9611 99.9996 98.827 99.9801 99.973 99.2327 96.514 99.9297 99.997 99.5317
H-10	99.683740234375	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) ) ; steps . add ( helper ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 99.9611 99.9996 98.827 99.9801 99.973 99.2327 96.473 99.9368 99.9995 99.5063
H-10	99.68339611235119	steps . add ( new Pair < Integer , Integer > ( start , helper , end ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 99.776 99.0749 99.9957 99.9245 99.9718 99.9545 97.0837 99.7078 99.9029 99.9944 99.9992 99.5026
H-10	99.68100373641305	steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ; } return steps ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 99.776 99.0749 99.9957 99.9245 99.9718 99.9545 99.9431 99.987 99.999 96.9033 99.2672 99.5944 99.9465 99.8618
H-10	99.68010602678571	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , end ) ) ; }
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 99.8838 99.8971 99.9795 99.9996 97.2381 98.6101
H-10	99.67780504728618	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) ) ; }
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 99.9611 99.9996 97.0395 98.6736
H-10	99.67771629050925	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , end ) ) ; steps . add ( end ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 99.8838 99.8971 99.9795 99.9996 98.7132 99.9797 99.973 99.1729 96.5693 99.9253 99.9975 99.5335
H-10	99.6763916015625	steps . add CaMeL All ( han@@ oi ( height - 1 , start , helper ) ) ; } return steps ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 98.1439 99.7762 99.9267 99.8496 99.9521 99.9996 97.0688 99.2079 99.6163 99.9269 99.8517
H-10	99.6733065518466	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , end , helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 99.8838 96.8799 99.087 99.7378 99.9809 99.9996 99.5699
H-10	99.6690086082176	steps . add ( helper ) ; steps . add CaMeL All ( han@@ oi ( height - 1 , helper , end ) ) ;
P-10	99.9799 99.9683 99.2183 96.7181 99.9319 99.9995 98.2598 99.9815 99.9514 99.3925 99.9968 99.9999 99.7971 99.9843 99.9988 99.959 99.9798 99.9966 99.9223 99.7036 99.1419 99.8969 99.896 99.9752 99.9995 99.4795
H-10	99.66898148148148	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , end ) ) ; steps . add ( helper ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 99.8838 99.8971 99.9795 99.9996 98.7132 99.9797 99.973 99.1729 96.3518 99.9237 99.9994 99.5146
H-10	99.66687689887152	steps . add ( han@@ oi ( height - 1 , helper , end ) ) ;
P-10	99.9799 99.9683 99.2183 97.3171 99.9841 99.9944 99.9442 99.9795 99.9961 99.9083 99.7712 98.7213 99.8505 99.9079 99.9871 99.9995 99.5418
H-10	99.66478207236842	steps . add ( new Pair < Integer , Long > ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 96.9686 98.9604 99.9955 99.9189 99.9726 99.9542 99.9481 99.9885 99.9989 99.4618
H-10	99.66015625	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) ) ; c@@ rap _ set . remove ( start ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 99.9611 99.9996 95.0652 99.9639 99.9677 99.918 99.9943 99.6306 99.9691 98.4839 99.8279 99.9827 99.5156
H-10	99.66013671875	steps . add ( helper ) ; steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) ) ;
P-10	99.9799 99.9683 99.2183 96.7181 99.9319 99.9995 98.2598 99.9815 99.9514 99.3925 99.9968 99.9999 99.7971 99.9843 99.9988 99.959 99.9798 99.9966 99.9223 99.7036 99.4423 99.954 99.9995 99.4333
H-10	99.6562167080966	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , end - 1 ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 99.8838 96.28 99.6743 99.4708 99.9568 99.9995 99.4976
H-10	99.65497504340277	steps . add CaMeL All ( han@@ oi ( height - 1 , start , helper ) ) ; steps . add ( end ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 98.1439 99.7762 99.9267 99.8496 99.9521 99.9996 98.7918 99.9798 99.974 99.2028 96.7514 99.8961 99.997 99.5292
H-10	99.65146019345238	steps . add ( new Pair < Pair < Integer , Integer > ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 96.9154 99.9878 99.8118 99.9914 99.7224 98.5184 99.8442 99.9195 99.9699 99.9532 99.9451 99.9568 99.998 99.4424
H-10	99.65145070929276	steps . add ( new Pair < Integer , String > ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 96.8901 98.7933 99.9973 99.9231 99.9744 99.9563 99.9344 99.9823 99.9987 99.4642
H-10	99.64899236505681	steps . add CaMeL All ( han@@ oi ( height - 1 , start , helper , helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 98.1439 99.7762 99.9267 97.9785 98.2703 99.7563 99.9718 99.9996 99.5407
H-10	99.646845703125	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , end ) ) ; } return steps ; }
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 99.8838 99.8971 99.9795 99.9996 97.2381 99.245 99.6498 99.9268 97.7624 99.9148
H-10	99.64656982421874	steps . add ( new Pair < Integer , Integer >> ( start , helper ) ) ; }
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 99.776 99.4904 99.9876 99.916 99.9705 99.9501 99.9443 99.9708 99.9991 96.8605 98.6029
H-10	99.644033203125	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) ) ; steps . add ( $NUMBER$ ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 99.9611 99.9996 98.827 99.9801 99.973 99.2327 95.4857 99.9413 99.9918 99.504
H-10	99.64345481178977	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , start , helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 96.097 99.3516 99.8811 99.6707 99.9505 99.9995 99.5317
H-10	99.64144287109374	steps . add CaMeL All ( han@@ oi ( height - 1 , start + helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 98.1439 96.7913 99.7358 99.8694 99.8943 99.9995 99.481
H-10	99.63861328125	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) ) ; steps . add ( start ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 99.9611 99.9996 98.827 99.9801 99.973 99.2327 95.9133 99.5222 99.9952 99.3567
H-10	99.636962890625	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) ) ; } return steps ; }
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 99.9611 99.9996 97.0395 99.2142 99.6166 99.9388 97.7639 99.9118
H-10	99.63460286458333	steps . add CaMeL All ( han@@ oi ( height - 1 + helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 95.9914 99.3099 99.81 99.8829 99.9994 99.4531
H-10	99.63325427827381	steps . add CaMeL All ( han@@ oi ( height - 1 , start , helper ) ) ; }
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 98.1439 99.7762 99.9267 99.8496 99.9521 99.9996 97.0688 98.6677
H-10	99.63125465029762	steps . add ( new Pair < Integer , Integer >> ( height - 1 , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 99.776 99.4904 99.9876 95.9563 99.8632 99.9901 99.8832 99.5851 99.7934 99.9771 99.9989 99.4918
H-10	99.62966918945312	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , end , helper , end ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 99.8838 96.8799 99.087 98.4681 99.6156 99.9046 99.9905 99.9995 99.6091
H-10	99.62948608398438	steps . add ( new Pair < Integer , Integer > ( start , helper ) ) ; }
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 99.776 99.0749 99.9957 99.9245 99.9718 99.9545 99.9431 99.987 99.999 96.9033 98.5967
H-10	99.62866889105902	steps . add ( han@@ oi ( height - 1 , start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 97.3171 99.9841 99.9944 99.9442 99.9795 99.9961 99.9083 98.0552 99.7352 99.9249 99.8836 99.9734 99.9994 99.5199
H-10	99.62804066051136	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , helper , end ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 95.8412 99.1015 99.6993 99.9359 99.9885 99.9996 99.5772
H-10	99.62789481026786	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , end ++ ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 99.8838 95.2455 99.8897 99.9636 99.9995 99.5299
H-10	99.625146484375	steps . add CaMeL All ( han@@ oi ( height - 1 + start , helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 95.9914 98.9838 99.4045 99.8921 99.8516 99.9365 99.9996 99.4672
H-10	99.62300415039063	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 95.8412 99.4409 99.9719 99.9996 99.5325
H-10	99.61879475911458	steps . add CaMeL All ( han@@ oi ( height - 1 , end ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 95.0618 99.7667 99.9572 99.9996 99.4393
H-10	99.61860961914063	steps . add CaMeL All ( han@@ oi ( height + 1 , helper , end ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 95.5896 99.9936 99.826 99.7191 98.9642 99.8837 99.8943 99.9832 99.9996 99.5197
H-10	99.61803668478261	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , c@@ rap _ set ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 95.2817 99.9062 99.794 99.9147 99.1618 99.9848 99.9994 99.4983
H-10	99.61775008491848	steps . add ( new Pair < Integer , Integer > ( height - 1 , start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 99.776 99.0749 99.9957 96.2042 99.7868 99.9881 99.9348 98.9258 99.7383 99.9054 99.9043 99.9939 99.9991 99.5177
H-10	99.61773003472223	steps . add CaMeL All ( han@@ oi ( height + 1 , helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 95.5896 99.9936 99.826 99.7191 99.5521 99.9652 99.9996 99.4746
H-10	99.61588541666667	steps . add ( new Pair < Integer , Integer > ( height - 1 , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 99.776 99.0749 99.9957 96.2042 99.7868 99.9881 99.9348 99.4798 99.7504 99.9893 99.999 99.4911
H-10	99.61488037109375	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , start ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 96.097 99.1283 99.9073 99.9994 99.4918
H-10	99.6147228422619	steps . add CaMeL All ( new Pair < Integer , Integer >> ( start , helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 94.5078 99.8505 99.9823 99.801 99.9864 99.771 99.5812 99.9929 99.9128 99.9681 99.9472 99.945 99.9722 99.9994 99.4281
H-10	99.61331337376645	steps . add ( new Pair < String , Integer >> ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 95.5208 99.9873 99.7185 99.5197 99.9906 99.9199 99.9704 99.9511 99.9435 99.9622 99.9989 99.4658
H-10	99.61151444284539	steps . add ( new Pair < Integer , Object >> ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 95.3571 99.593 99.9938 99.9262 99.971 99.957 99.9291 99.9692 99.9989 99.46
H-10	99.60859375	steps . add CaMeL All ( han@@ oi ( height - 1 , helper , height ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.0021 95.3336 99.647 99.9777 99.9996 99.54
H-10	99.60708279079861	steps . remove CaMeL All ( han@@ oi ( height - 1 , helper ) ) ;
P-10	99.9799 95.4952 99.3445 99.994 99.9988 99.7685 99.9862 99.9928 99.9523 99.98 99.9962 99.8902 99.7405 99.6207 99.927 99.9994 99.3269
H-10	99.60688219572368	steps . add ( new Pair < Long , Integer >> ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 95.3884 99.9928 99.7425 99.4989 99.9877 99.9152 99.972 99.951 99.9438 99.9713 99.9991 99.4634
H-10	99.60566149259868	steps . add ( new Pair < Object , Integer >> ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 95.5283 99.9736 99.5891 99.5056 99.9922 99.9248 99.9701 99.9536 99.937 99.97 99.999 99.4604
H-10	99.60397338867188	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) , end ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 96.6444 97.8131 99.9205 99.997 99.4999
H-10	99.60062866210937	steps . remove CaMeL All ( han@@ oi ( height - 1 , helper , end ) ) ;
P-10	99.9799 95.4952 99.3445 99.994 99.9988 99.7685 99.9862 99.9928 99.9523 99.98 99.9962 99.8902 99.7405 98.8369 99.8728 99.908 99.9774 99.9993 99.3647
H-10	99.59287806919643	steps . add CaMeL All ( han@@ oi ( height - 1 , helper ) ) ; return steps ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 99.758 99.5326 99.9611 99.9996 94.1636 99.4666 99.9062 99.749
H-10	99.59248279389881	steps . add ( new Pair < Pair < Integer , String >> ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 96.9154 99.9878 99.8118 99.9914 97.1179 99.7635 99.9954 99.9251 99.9693 99.9537 99.9385 99.9199 99.9978 99.4507
H-10	99.58989025297619	steps . add ( new Pair < Pair < Integer , Long >> ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 96.9154 99.9878 99.8118 99.9914 97.0456 99.7603 99.9931 99.9224 99.9683 99.9526 99.9445 99.9405 99.9982 99.4518
H-10	99.58967028166118	steps . add ( new Pair < String , Integer > ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 95.5208 99.9873 99.7185 99.0271 99.9963 99.9265 99.9726 99.9553 99.941 99.9841 99.9988 99.4713
H-10	99.58958798363095	steps . add ( new Pair < Integer , Integer >> ( start + 1 , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 99.776 99.4904 99.9876 99.916 95.9178 99.0879 99.558 99.8419 99.8929 99.9731 99.9989 99.4775
H-10	99.58922119140625	steps . add CaMeL All ( han@@ oi ( height - 1 , 1 , helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 94.4489 99.4649 99.7619 99.7345 99.964 99.9996 99.4968
H-10	99.5879150390625	steps . add CaMeL All ( han@@ oi ( height - 1 , start ) , helper ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 99.9377 98.1439 98.0921 97.8151 99.5308 99.7717 99.9993 99.4916
H-10	99.58628443667763	steps . add ( new Pair < Integer , Number >> ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 94.9818 99.5278 99.9856 99.9082 99.9682 99.951 99.931 99.9607 99.999 99.4628
H-10	99.58571905838816	steps . add ( new Pair < Long , Integer > ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 95.3884 99.9928 99.7425 99.0614 99.9954 99.9224 99.9732 99.9549 99.943 99.9881 99.9989 99.4634
H-10	99.58375854492188	steps . add CaMeL All ( han@@ oi ( height - 1 ) , helper , end ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 96.7226 98.7634 98.9999 98.976 99.7749 99.9237 99.9974 99.541
H-10	99.58342895507812	steps . add CaMeL All ( han@@ oi ( height + 1 , start , helper ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 95.5896 99.9936 99.826 98.2789 99.7706 99.9224 99.8368 99.9553 99.9996 99.4967
H-10	99.5828793174342	steps . add ( new Pair < Object , Integer > ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 95.5283 99.9736 99.5891 99.0514 99.9961 99.9215 99.9708 99.9583 99.9345 99.9865 99.9988 99.462
H-10	99.58246527777777	steps . add CaMeL All ( han@@ oi ( height - 1 ) , helper ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 96.7226 98.7634 98.9999 99.546 99.999 99.4772
H-10	99.57870965254934	steps . add ( new Pair < Integer , Double >> ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 94.6856 99.6405 99.9908 99.9169 99.9721 99.9466 99.9377 99.9724 99.999 99.4704
H-10	99.57545872738487	steps . add ( new Pair < Integer , Integer >> ( 1 , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 99.776 99.4904 99.9876 95.3149 99.9132 99.6898 99.8529 99.9782 99.9991 99.4683
H-10	99.57479055304276	steps . add ( new Pair < Integer , Object > ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 99.9872 95.3571 98.8966 99.9965 99.9054 99.9746 99.9621 99.9184 99.9849 99.9987 99.4636
H-10	99.56987561677632	steps . remove ( new Pair < Integer , Integer >> ( start , helper ) ) ;
P-10	99.9799 95.4952 99.2639 99.0484 99.8309 99.9893 99.7465 99.9879 99.7747 99.6664 99.9763 99.9172 99.9705 99.9499 99.9479 99.9662 99.9985 99.3836
H-10	99.55862087673611	steps . add CaMeL All ( han@@ oi ( height - 1 + start ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 95.9914 98.9838 99.0662 99.6081 99.9991 99.4305
H-10	99.54704454210069	steps . add CaMeL All ( han@@ oi ( height - 1 ) , end ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 96.7226 98.7634 98.1056 99.834 99.9971 99.4479
H-10	99.54433306525735	steps . add ( new Pair < Integer > ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 99.9895 99.7719 94.6577 99.9909 99.8757 99.973 99.9607 99.9203 99.9825 99.9986 99.4182
H-10	99.4981460571289	steps . add ( han@@ oi ( height - 1 , start ) ) ;
P-10	99.9799 99.9683 99.2183 97.3171 99.9841 99.9944 99.9442 99.9795 99.9961 99.9083 98.0552 98.289 99.923 99.9991 99.4796
H-10	99.48246765136719	steps . add CaMeL All ( han@@ oi ( height - 1 ) ) ;
P-10	99.9799 99.9683 99.3848 99.9959 99.9999 99.7972 99.9879 99.9985 99.9524 99.9804 99.9965 96.7226 99.6271 99.9995 96.3941
H-10	99.4458984375	steps . add ( new Pair > ( start , helper ) ) ;
P-10	99.9799 99.9683 99.2183 99.7312 99.8824 94.4565 99.6303 99.7171 99.9764 99.9672 99.8349 99.9805 99.9983 99.4125
H-10	99.39493233816964	add ( han@@ oi ( height - 1 , helper ) ) ;
P-10	99.0988 98.6506 99.9906 99.9755 99.9406 99.9769 99.996 99.9442 99.7386 99.5389 99.926 99.9981 99.6006
H-10	98.90679931640625	steps . add ( helper ) ;
P-10	99.9799 99.9683 99.2183 96.7181 99.9319 99.9995 95.504
S-11	return true ;
T-11	return depth == 0 ;
H-11	99.73622131347656	return true ;
P-11	99.1668 99.9942 99.8685
H-11	99.71368408203125	return false ;
P-11	99.0792 99.9944 99.8658
H-11	99.41879611545139	return false ; } } return true ;
P-11	99.0792 99.9944 97.5928 97.6299 98.2972 99.4913 99.9964 102.7726
H-11	99.41634114583333	return true ; } } return true ;
P-11	99.1668 99.9942 97.5664 97.6277 98.2548 99.4534 99.9968 102.7716
H-11	99.37266710069444	return false ; } return true ; }
P-11	99.0792 99.9944 97.5928 97.6706 99.4774 99.9969 97.955 102.6725
H-11	99.37179904513889	return true ; } return true ; }
P-11	99.1668 99.9942 97.5664 97.6403 99.422 99.9973 97.967 102.677
H-11	99.36836751302083	else if ( depth < 0 ) {
P-11	98.4311 99.9977 99.8589 99.7644 99.9281 99.9659 99.9476 102.2295
H-11	99.36290825737848	return true ; } } return false ;
P-11	99.1668 99.9942 97.5664 97.6277 98.2548 98.9767 99.9966 102.7678
H-11	99.35428873697917	return false ; } } return false ;
P-11	99.0792 99.9944 97.5928 97.6299 98.2972 98.9152 99.9964 102.7683
H-11	99.2271728515625	return true ; }
P-11	99.1668 99.9942 97.5664 99.4932
H-11	99.22206115722656	if ( depth < 0 ) {
P-11	99.9977 99.7779 99.7718 99.8953 99.9691 99.9161 99.2353
H-11	99.21375732421875	return false ; }
P-11	99.0792 99.9944 97.5928 99.4871
H-11	99.1915283203125	return false ; } return true ;
P-11	99.0792 99.9944 97.5928 97.6706 99.4774 99.9969 99.8056
H-11	99.1882095336914	return true ; } return true ;
P-11	99.1668 99.9942 97.5664 97.6403 99.422 99.9973 99.8034
H-11	99.13722229003906	return true ; } return false ;
P-11	99.1668 99.9942 97.5664 97.6403 99.0192 99.997 99.7986
H-11	99.12103271484375	return false ; } return false ;
P-11	99.0792 99.9944 97.5928 97.6706 98.9184 99.9967 99.8008
H-11	99.06301443917411	return true ; } else {
P-11	99.1668 99.9942 97.5664 97.9999 99.8671 98.9314
H-11	99.05552455357143	return false ; } else {
P-11	99.0792 99.9944 97.5928 97.9975 99.8727 98.9367
H-11	99.04104178292411	return true ; return true ;
P-11	99.1668 99.9942 94.8765 99.5054 99.9962 99.833
H-11	99.03159005301339	return false ; return true ;
P-11	99.0792 99.9944 94.8814 99.5225 99.9953 99.833
H-11	98.9871317545573	return true ; break ;
P-11	99.1668 99.9942 95.4461 99.9093 99.491
H-11	98.97885131835938	return false ; break ;
P-11	99.0792 99.9944 95.4435 99.9145 99.5262
H-11	98.97740936279297	return ( depth < 0 ) ;
P-11	96.9293 96.0484 99.6764 99.8548 99.9541 99.5874 99.8537
H-11	98.97665841238839	return { return true ; }
P-11	95.2727 99.2283 99.5435 99.9939 99.474 99.4089
H-11	98.95533752441406	return { return true ; } }
P-11	95.2727 99.2283 99.5435 99.9939 99.474 98.7817 99.4333
H-11	98.95204380580357	return true ; return false ;
P-11	99.1668 99.9942 94.8765 98.8872 99.9962 99.828
H-11	98.94022369384766	return depth < parens . length ;
P-11	95.3046 99.8477 97.7032 99.975 99.9564 99.0331 99.7866
H-11	98.93943568638393	return true ; break ; }
P-11	99.1668 99.9942 95.4461 99.9093 98.8698 99.2745
H-11	98.93929290771484	return depth < 0 + 1 ;
P-11	95.3046 99.8477 99.8261 98.4968 98.5816 99.6993 99.843
H-11	98.9376220703125	return true ; } }
P-11	99.1668 99.9942 97.5664 97.6277 99.3553
H-11	98.93738664899554	return ( ! true ) ;
P-11	96.9293 97.6018 98.4972 99.9256 99.8723 99.8202
H-11	98.92729840959821	return false ; return false ;
P-11	99.0792 99.9944 94.8814 98.7969 99.9956 99.8282
H-11	98.92521158854167	return false ; } }
P-11	99.0792 99.9944 97.5928 97.6299 99.3396
H-11	98.92287772042411	return ( Boolean ) true ;
P-11	96.9293 96.8624 99.995 98.9741 99.9904 99.7936
H-11	98.91922433035714	return ( ! false ) ;
P-11	96.9293 97.6018 98.3652 99.9278 99.877 99.8182
H-11	98.91872732979911	return false ; break ; }
P-11	99.0792 99.9944 95.4435 99.9145 98.8449 99.2393
H-11	98.90873718261719	return true ; } } else {
P-11	99.1668 99.9942 97.5664 97.6277 97.9369 99.918 99.1446
H-11	98.90193176269531	return false ; } } else {
P-11	99.0792 99.9944 97.5928 97.6299 97.9156 99.9153 99.1728
H-11	98.8941879272461	throw new Exception ( $STRING$ ) ;
P-11	99.0554 97.1625 99.9797 99.9041 99.1819 99.9957 99.7919
H-11	98.89239501953125	return depth < 0 ) ;
P-11	95.3046 99.8477 99.8261 97.8614 99.6262 99.8656
H-11	98.88024139404297	if ( depth > 0 ) {
P-11	99.9977 99.7779 96.9086 99.763 99.9707 99.9314 99.4793
H-11	98.873291015625	return true ; return true ; }
P-11	99.1668 99.9942 94.8765 99.5054 99.9962 97.8604 99.6715
H-11	98.8631591796875	return ( true ) ;
P-11	96.9293 96.9852 99.5487 99.9638 99.8367
H-11	98.86273193359375	return false ; return true ; }
P-11	99.0792 99.9944 94.8814 99.5225 99.9953 97.8577 99.656
H-11	98.86064801897321	return { return false ; }
P-11	95.2727 99.2283 98.7088 99.9955 99.4922 99.4118
H-11	98.85777064732143	return ( Boolean ) false ;
P-11	96.9293 96.8624 99.995 98.5208 99.9896 99.7921
H-11	98.85303497314453	return { return false ; } }
P-11	95.2727 99.2283 98.7088 99.9955 99.4922 98.7778 99.4337
H-11	98.8450927734375	return depth < 0 ;
P-11	95.3046 99.8477 99.8261 98.3277 99.8492
H-11	98.84477996826172	return depth < 0 + 0 ;
P-11	95.3046 99.8477 99.8261 98.4968 98.2358 99.2917 99.8404
H-11	98.84303283691406	return true ; else return true ;
P-11	99.1668 99.9942 94.3853 97.9542 99.5334 99.997 99.798
H-11	98.83709716796875	return { return true ;
P-11	95.2727 99.2283 99.5435 99.9939 99.0688
H-11	98.83397674560547	return depth < 0 - 1 ;
P-11	95.3046 99.8477 99.8261 96.7679 99.8002 99.369 99.8411
H-11	98.83241271972656	if ( depth == 0 ) {
P-11	99.9977 99.7779 96.6173 99.8385 99.9672 99.9002 99.3471
H-11	98.82933807373047	if ( depth <= 0 ) {
P-11	99.9977 99.7779 96.5665 99.8968 99.971 99.9105 99.301
H-11	98.8215576171875	return return false ;
P-11	95.1379 99.1783 99.9964 99.8799
H-11	98.81208801269531	if ( depth < 1 ) {
P-11	99.9977 99.7779 99.7718 96.6172 99.9721 99.9149 99.2317
H-11	98.8104019165039	return false ; else return true ;
P-11	99.0792 99.9944 94.3985 97.7483 99.5559 99.9967 99.7949
H-11	98.80914306640625	return return true ;
P-11	95.1379 99.115 99.9955 99.882
H-11	98.80867004394531	if ( depth >= 0 ) {
P-11	99.9977 99.7779 96.8845 99.24 99.9725 99.9327 99.4507
H-11	98.80087280273438	return true ; return false ; }
P-11	99.1668 99.9942 94.8765 98.8872 99.9962 97.8956 99.6751
H-11	98.79595184326172	if ( depth != 0 ) {
P-11	99.9977 99.7779 96.435 99.6845 99.9611 99.8948 99.4031
H-11	98.79552459716797	return depth < 0 + depth ;
P-11	95.3046 99.8477 99.8261 98.4968 97.2667 99.8671 99.8399
H-11	98.78236389160156	state = false ; return true ;
P-11	99.5799 98.7358 99.9639 98.8017 99.5457 99.9869 99.7926
H-11	98.75530133928571	break ; } return true ;
P-11	99.79 99.0065 99.1548 99.5649 99.9972 99.7841
H-11	98.74657185872395	return ( false ) ;
P-11	96.9293 96.105 99.7329 99.9635 99.8335
H-11	98.7384033203125	return ; } return true ;
P-11	95.7751 98.2333 97.9136 99.5248 99.9958 99.8109
H-11	98.73493303571429	return ( return true ) ;
P-11	96.9293 96.4334 98.3869 99.6999 99.9563 99.8235
H-11	98.71260288783482	return true ; } break ;
P-11	99.1668 99.9942 97.5664 95.2041 99.7185 99.4229
H-11	98.70549665178571	return false ; } break ;
P-11	99.0792 99.9944 97.5928 95.1985 99.7082 99.4501
H-11	98.70059814453126	} return true ;
P-11	99.6498 99.2744 99.9954 99.8581
H-11	98.69371541341145	return { return false ;
P-11	95.2727 99.2283 98.7088 99.9955 99.0417
H-11	98.648583984375	} return false ;
P-11	99.6498 99.0184 99.9951 99.8543
H-11	98.631591796875	return Boolean . TRUE ;
P-11	94.0818 99.9348 98.0178 99.9917 99.8481
H-11	98.63025919596355	return Boolean . FALSE ;
P-11	94.0818 99.9348 98.0037 99.9946 99.8514
H-11	98.57515462239583	return true ; else {
P-11	99.1668 99.9942 94.3853 99.5577 98.4317
H-11	98.56768798828125	return false ; else {
P-11	99.0792 99.9944 94.3985 99.5805 98.4383
H-11	98.55257161458333	return return false ; }
P-11	95.1379 99.1783 99.9964 97.4968 99.5907
H-11	98.54478963216145	return true ; * /
P-11	99.1668 99.9942 93.0358 99.4269 99.7297
H-11	98.53826904296875	return return true ; }
P-11	95.1379 99.115 99.9955 97.4731 99.5929
H-11	98.52698771158855	return false ; * /
P-11	99.0792 99.9944 93.0368 99.4035 99.7327
H-11	98.50830841064453	return 0 ;
P-11	94.4029 99.8495 99.8655
H-11	98.50493774414062	result = true ;
P-11	99.8735 98.5132 99.9791 99.6294
H-11	98.50376383463542	return false + true ;
P-11	99.0792 93.4954 98.8275 99.8528 99.8524
H-11	98.4993184407552	return true + true ;
P-11	99.1668 93.4348 98.765 99.8574 99.8565
H-11	98.47831217447917	return ;
P-11	95.7751 99.7446
H-11	98.43777465820312	return null ;
P-11	93.9955 99.9894 99.8509
H-11	98.371142578125	return ( true ;
P-11	96.9293 96.9852 98.1965 99.8294
H-11	98.3526840209961	return ; }
P-11	95.7751 98.2333 99.4871
H-11	98.33623046875	result = false ;
P-11	99.8735 97.6844 99.9832 99.6106
H-11	98.30586547851563	return -- depth ;
P-11	92.8381 99.496 99.4053 99.8746
H-11	98.2625961303711	return parens ;
P-11	94.597 98.7118 99.8263
H-11	98.24185791015626	return 0 ; }
P-11	94.4029 99.8495 97.5938 99.4478
H-11	98.05545806884766	return depth ;
P-11	95.3046 97.1761 99.8259
H-11	97.93494415283203	return ) ;
P-11	91.9978 99.9576 99.8691
H-11	97.86876678466797	return $STRING$ ;
P-11	91.9887 99.7126 99.8585
H-11	97.74453735351562	break ;
P-11	99.79 99.454
H-11	97.53916422526042	return }
P-11	94.2863 98.4159
H-11	97.14599609375	finally {
P-11	99.9979 98.534
H-11	96.82730865478516	return
P-11	93.7393
H-11	95.92164611816406	}
P-11	97.118
S-12	for ( Integer x : arr ) {
T-12	for ( Integer x : arr . sub CaMeL List ( k , arr . size ( ) ) ) {
H-12	99.980712890625	for ( Integer x : arr . sub CaMeL List ( 0 , k ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 99.8894 99.989 99.8694 99.9779 99.9983 99.9222 102.3253
H-12	99.95563507080078	for ( Integer x : arr ) { heap . add ( x ) ;
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.7253 99.9958 99.9692 99.9995 99.7722 99.9842 99.9987 102.4665
H-12	99.91146087646484	for ( Integer x : arr ) { output . add ( x ) ;
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.0328 99.9905 99.9761 99.9996 99.7089 99.9753 99.9984 102.5227
H-12	99.82256002987133	for ( Integer x : arr ) { heap . add ( x ) ; }
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.7253 99.9958 99.9692 99.9995 99.7722 99.9842 99.9987 98.0685 102.0913
H-12	99.78548177083333	for ( int x : arr . sub CaMeL List ( 0 , k ) ) {
P-12	99.9949 97.1764 98.545 99.8712 99.8177 99.2176 99.7066 99.9994 99.9817 99.9998 99.9334 99.9892 99.8692 99.9667 99.998 99.9184 102.293
H-12	99.77922227647569	for ( Integer x : heap . sub CaMeL List ( 0 , k ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 95.8769 99.7327 99.4267 99.9994 99.9846 99.9999 99.9006 99.9879 99.8784 99.9768 99.9981 99.9207 102.3223
H-12	99.76580132378473	for ( Integer x : arr . sub CaMeL List ( k , k ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 97.1752 99.0214 99.7052 99.9781 99.9981 99.9123 102.3127
H-12	99.76228162977431	for ( Long x : arr . sub CaMeL List ( 0 , k ) ) {
P-12	99.9949 95.899 99.2635 99.9899 99.9222 99.0457 99.7668 99.9996 99.987 99.9999 99.8946 99.9888 99.8713 99.9762 99.9983 99.9187 102.3442
H-12	99.7510986328125	for ( Integer x : arr ) { output . add ( x ) ; }
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.0328 99.9905 99.9761 99.9996 99.7089 99.9753 99.9984 97.5644 102.1435
H-12	99.74431016710069	for ( int k : arr . sub CaMeL List ( 0 , k ) ) {
P-12	99.9949 97.1764 97.7035 99.8718 99.8286 99.3845 99.6771 99.9993 99.9779 99.9999 99.8871 99.9903 99.8783 99.9689 99.9982 99.917 102.2833
H-12	99.73969184027777	for ( Integer 1 : arr . sub CaMeL List ( 0 , k ) ) {
P-12	99.9949 99.8583 94.9346 99.9851 99.8982 99.1179 99.6882 99.9995 99.9848 99.9999 99.9161 99.9894 99.8664 99.9775 99.9983 99.922 102.3228
H-12	99.73828125	for ( Integer k : arr . sub CaMeL List ( 0 , k ) ) {
P-12	99.9949 99.8583 94.8847 99.9839 99.8928 99.2467 99.7314 99.9995 99.9824 99.9999 99.7724 99.9901 99.8763 99.9722 99.9984 99.9211 102.3235
H-12	99.73785400390625	for ( Integer x : arr ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 99.2618
H-12	99.73711081112133	List < Integer > output = new Array CaMeL List < Integer > ( ) ;
P-12	99.9811 99.9103 99.9828 99.7296 99.9952 99.963 99.8267 99.9975 99.9697 99.9655 99.9426 99.9686 99.997 99.9108 99.9996 102.4016
H-12	99.73193359375	Vector < Integer > output = new Array CaMeL List < Integer > ( ) ;
P-12	99.9634 99.9354 99.9783 99.7543 99.9933 99.9683 99.9521 99.9976 99.9725 99.964 99.9446 99.9659 99.9978 99.9133 99.9996 102.3342
H-12	99.73077392578125	for ( Integer x : arr . sub CaMeL List ( 0 , x ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 99.8894 99.989 95.4574 99.9092 99.998 99.9205 102.3092
H-12	99.73064108455883	for ( Integer x : new Array CaMeL List < Integer > ( ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 94.663 99.7463 99.9975 99.9648 99.9794 99.9107 99.9783 99.9984 99.8493 99.9915 99.9276 102.393
H-12	99.72437959558823	for ( Integer x : arr ) { for ( Integer x : arr ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 95.5905 99.9951 99.8611 99.4754 99.9927 99.5207 99.4415 99.9509 103.1076
H-12	99.72201538085938	for ( Integer x : arr ) { heap . add ( $STRING$ ) ;
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.7253 99.9958 99.9692 99.9995 96.1307 99.8852 99.9917 102.476
H-12	99.71571180555556	for ( Integer x : arr . sub CaMeL List ( 1 , k ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 95.1062 99.9938 99.8658 99.9845 99.9984 99.9232 102.3296
H-12	99.70454237196181	for ( Integer x : arr . sub CaMeL List ( 0 , 0 ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 99.8894 99.989 94.9979 99.9105 99.997 99.9197 102.297
H-12	99.70351155598958	for ( String x : arr . sub CaMeL List ( 0 , k ) ) {
P-12	99.9949 95.1656 99.0461 99.9916 99.9224 98.9915 99.7388 99.9995 99.9865 99.9999 99.8993 99.9878 99.8677 99.9781 99.9979 99.9207 102.3143
H-12	99.70162963867188	for ( Long x : arr ) { heap . add ( x ) ;
P-12	99.9949 95.899 99.2635 99.9899 99.9222 99.4926 99.9415 98.6864 99.9958 99.9686 99.9995 99.7614 99.9861 99.9988 102.4655
H-12	99.69060920266544	for < Integer > output = new Array CaMeL List < Integer > ( ) ;
P-12	93.3755 99.8476 99.9783 99.5991 99.9829 99.9581 99.9301 99.9978 99.9734 99.9655 99.9408 99.9753 99.9973 99.8823 99.999 102.4766
H-12	99.67985704210069	for ( Integer x : arr . sub CaMeL Set ( 0 , k ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 94.6467 99.9999 99.8016 99.9899 99.8697 99.9796 99.998 99.9191 102.3369
H-12	99.67972140842014	for ( Integer x : arr . sub CaMeL List ( 0 + k ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 99.8894 94.9235 99.7409 99.7782 99.9965 99.9198 102.3053
H-12	99.67694769965277	for ( Integer x : arr . sub CaMeL List ( $STRING$ , k ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 94.4498 99.9734 99.8563 99.9785 99.9983 99.9251 102.3223
H-12	99.6759033203125	for ( Integer x : arr . sub CaMeL List ( x , k ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 95.3899 99.1231 99.7579 99.9867 99.9981 99.9156 102.3137
H-12	99.67512512207031	for ( Integer x : output ) { heap . add ( x ) ;
P-12	99.9949 99.8583 99.3173 99.9902 95.1247 99.775 99.9517 98.7846 99.9958 99.9706 99.9995 99.7698 99.9813 99.9985 102.4293
H-12	99.67327880859375	for ( Integer arr : arr . sub CaMeL List ( 0 , k ) ) {
P-12	99.9949 99.8583 93.6867 99.984 99.8803 99.1501 99.7755 99.9995 99.9841 99.9999 99.8959 99.991 99.8322 99.979 99.9985 99.9224 102.3263
H-12	99.67289225260417	for ( Integer heap : arr . sub CaMeL List ( 0 , k ) ) {
P-12	99.9949 99.8583 93.7534 99.9593 99.8043 99.1539 99.7641 99.9994 99.9831 99.9999 99.9191 99.9897 99.8431 99.9788 99.9985 99.9228 102.3291
H-12	99.66697692871094	for ( Integer x : arr ) { heap . add ( heap ) ;
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.7253 99.9958 99.9692 99.9995 95.7572 99.3043 99.9986 102.543
H-12	99.66394761029412	for ( Integer x : arr . sub CaMeL List ( 0 , k ) )
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 99.8894 99.989 99.8694 99.9779 99.9983 96.8819
H-12	99.66134982638889	for ( Integer x : arr ) { heap . add ( 0 , x ) ;
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.7253 99.9958 99.9692 99.9995 94.9578 99.5853 99.5786 99.959 99.998 102.757
H-12	99.6606216430664	for ( Long x : arr ) { output . add ( x ) ;
P-12	99.9949 95.899 99.2635 99.9899 99.9222 99.4926 99.9415 98.0497 99.9905 99.9752 99.9996 99.6917 99.9763 99.9985 102.5247
H-12	99.65728759765625	for ( Integer x : arr . sub CaMeL List ( 0 , 1 ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 99.8894 99.989 94.0746 99.9726 99.9965 99.9201 102.3076
H-12	99.65537396599265	Iterator < Integer > output = new Array CaMeL List < Integer > ( ) ;
P-12	99.9177 99.9029 99.9834 98.9724 99.9337 99.382 99.8934 99.9977 99.9673 99.9669 99.9409 99.9815 99.9982 99.844 99.9941 102.4842
H-12	99.65260943244485	Collection < Integer > output = new Array CaMeL List < Integer > ( ) ;
P-12	99.9822 99.9066 99.9875 99.6893 99.9941 99.9556 99.7043 99.9976 99.9633 99.9673 99.9336 99.975 99.9975 99.9081 99.9995 102.356
H-12	99.65189615885417	for ( Integer x : output . sub CaMeL List ( 0 , k ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 95.1247 98.3463 99.3386 99.9991 99.986 99.9999 99.8662 99.9887 99.8639 99.9752 99.9983 99.9215 102.3046
H-12	99.65115356445312	for ( int x : arr ) { heap . add ( x ) ;
P-12	99.9949 97.1764 98.545 99.8712 99.8177 99.3535 99.9375 98.6933 99.9957 99.9701 99.9995 98.7574 99.9692 99.9986 102.4775
H-12	99.64947509765625	for ( String x : arr ) { heap . add ( x ) ;
P-12	99.9949 95.1656 99.0461 99.9916 99.9224 99.5167 99.9478 98.7426 99.9957 99.9709 99.9995 99.8153 99.9873 99.9983 102.4363
H-12	99.64704725477431	for ( float x : arr . sub CaMeL List ( 0 , k ) ) {
P-12	99.9949 93.9488 99.1528 99.9939 99.8838 99.0838 99.7426 99.9994 99.9877 99.9998 99.9254 99.9885 99.8676 99.9635 99.9981 99.919 102.3368
H-12	99.64539337158203	for ( Integer x : arr ) { output . add ( $STRING$ ) ;
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.0328 99.9905 99.9761 99.9996 95.6455 99.8843 99.9857 102.4328
H-12	99.64336480034723	for ( Integer x : arr . sub CaMeL List ( $NUMBER$ , k ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 93.8091 99.9865 99.8682 99.9863 99.9984 99.9205 102.3305
H-12	99.63773345947266	for ( int x : arr ) { output . add ( x ) ;
P-12	99.9949 97.1764 98.545 99.8712 99.8177 99.3535 99.9375 98.2912 99.9905 99.9737 99.9996 98.9054 99.9627 99.9981 102.5258
H-12	99.63558197021484	for ( Integer x : arr ) { output . add ( heap ) ;
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.0328 99.9905 99.9761 99.9996 96.9023 98.2993 99.9972 102.5925
H-12	99.6346206665039	for ( Integer x : heap ) { heap . add ( x ) ;
P-12	99.9949 99.8583 99.3173 99.9902 95.8769 98.5372 99.9463 98.63 99.9959 99.9681 99.9995 99.7548 99.9848 99.9986 102.4405
H-12	99.63420867919922	for ( Integer x : arr ) { heap . put ( x ) ;
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.7253 99.9958 95.2849 99.9997 99.7932 99.5077 99.99 102.4719
H-12	99.63397216796875	for ( Integer x : arr ) { heap . add ( x , x ) ;
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.7253 99.9958 99.9692 99.9995 99.7722 94.5432 99.3521 99.8728 99.9985 102.8039
H-12	99.6295166015625	for ( Integer x : output ) { output . add ( x ) ;
P-12	99.9949 99.8583 99.3173 99.9902 95.1247 99.775 99.9517 98.0983 99.9905 99.9767 99.9996 99.7075 99.9692 99.9983 102.4594
H-12	99.62480163574219	for ( Integer x : arr ) { heap . add ( k ) ;
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.7253 99.9958 99.9692 99.9995 94.3866 99.9914 99.9986 102.5517
H-12	99.62441677517361	for ( Integer x : arr . sub CaMeL List ( 0 , start ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 99.8894 99.989 93.7223 99.7667 99.9907 99.9201 102.2801
H-12	99.62063598632812	for ( Integer k : arr ) { heap . add ( x ) ;
P-12	99.9949 99.8583 94.8847 99.9839 99.8928 99.3439 99.9332 98.7065 99.9958 99.9688 99.9995 99.0495 99.9812 99.9985 102.4781
H-12	99.60372924804688	for ( Integer x : arr ) { out . add ( x ) ;
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 93.2483 99.9944 99.9593 99.9996 99.7311 99.9728 99.9983 102.3772
H-12	99.59444427490234	for ( Integer x : arr . sub CaMeL List ( k ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 97.1752 99.4833 99.9984 99.8975 99.2753
H-12	99.58310834099265	for ( Long x : arr ) { heap . add ( x ) ; }
P-12	99.9949 95.899 99.2635 99.9899 99.9222 99.4926 99.9415 98.6864 99.9958 99.9686 99.9995 99.7614 99.9861 99.9988 98.0551 102.0973
H-12	99.56859633501838	for ( Integer x : arr ) { heap . add ( $STRING$ ) ; }
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.7253 99.9958 99.9692 99.9995 96.1307 99.8852 99.9917 97.5486 102.0414
H-12	99.56102752685547	for ( Integer x : new Array CaMeL List < Integer > ( ) )
P-12	99.9949 99.8583 99.3173 99.9902 94.663 99.7463 99.9975 99.9648 99.9794 99.9107 99.9783 99.9984 99.8493 99.9915 99.8761
H-12	99.53852395450367	for ( Integer x : arr ) { heap . add ( x ) ; else
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.7253 99.9958 99.9692 99.9995 99.7722 99.9842 99.9987 95.1462 100.185
H-12	99.53761643629808	for ( Integer x : arr . values ( ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 96.8086 99.9997 99.9992 99.9965 99.8987 99.3289
H-12	99.53297776442308	if ( ! heap . is CaMeL Empty ( ) ) {
P-12	99.9966 99.4387 99.7452 99.9852 99.9663 99.9981 99.9726 99.9999 99.9982 99.927 99.6932 98.7465
H-12	99.52010904947916	for ( Integer x : arr ) heap . add ( x ) ;
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 95.2997 99.9963 99.8734 99.998 99.7141 99.9884 99.9989 99.496
H-12	99.5085808249081	for ( Integer x : arr ) { output . add ( x ) ; else
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.0328 99.9905 99.9761 99.9996 99.7089 99.9753 99.9984 95.2453 100.34
H-12	99.50303297776442	for ( Integer x : arr . size ( ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 96.6269 99.9993 99.9997 99.9992 99.884 99.0729
H-12	99.50271809895834	for ( Integer x : arr . to CaMeL Array ( ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 96.0587 99.9991 99.3536 99.9976 99.9468 99.9983 99.9273 99.3018
H-12	99.50223482572116	for ( Integer x : arr . iterator ( ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 96.4932 99.9998 99.9986 99.9927 99.8756 99.2116
H-12	99.4968017578125	for ( Integer x : arr ) output . add ( x ) ;
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 94.8432 99.9914 99.9815 99.999 99.6296 99.9822 99.9988 99.5897
H-12	99.48532104492188	for ( Integer x : arr ) { for ( Integer x : arr )
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 95.5905 99.9951 99.8611 99.4754 99.9927 99.5207 99.4415 99.5091
H-12	99.47456359863281	for ( Integer x : arr . sub CaMeL List ( x ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 95.3899 99.3509 99.9974 99.9028 99.2709
H-12	99.47313735064338	for ( Integer : arr . sub CaMeL List ( 0 , k ) ) {
P-12	99.9949 99.8583 93.6681 99.8503 99.0679 99.7481 99.9995 99.9864 99.9999 99.9044 99.9906 99.8687 99.9819 99.9978 99.9187 99.3476
H-12	99.46379538143383	for ( Integer x : arr ) { heap . add ( x ) ; return
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 99.9421 98.7253 99.9958 99.9692 99.9995 99.7722 99.9842 99.9987 94.0615 99.9993
H-12	99.42392985026042	if ( ! heap . is CaMeL Empty ( ) )
P-12	99.9966 99.4387 99.7452 99.9852 99.9663 99.9981 99.9726 99.9999 99.9982 99.927 97.5983
H-12	99.4197998046875	for ( Integer x : arr . sub CaMeL List ( k ) )
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 99.7393 99.9995 99.9851 99.9999 97.1752 99.4833 99.9984 96.9588
H-12	99.4131103515625	for ( Integer x : arr . as CaMeL List ( ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 94.3137 99.9995 99.7457 99.9993 99.9648 99.9954 99.9018 99.3189
H-12	99.3996073404948	if ( heap . is CaMeL Empty ( ) ) {
P-12	99.9966 98.093 99.9229 99.9519 99.9972 99.9733 99.9999 99.9988 99.8965 99.7208 98.7833
H-12	99.389306640625	for ( Integer x : arr . Linked CaMeL List ( ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 93.8423 99.9926 99.9512 99.9283 99.9713 99.9975 99.8944 99.3045
H-12	99.36544799804688	for ( Integer x : arr )
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.5049 96.4868
H-12	99.3605205829327	while ( ! heap . is CaMeL Empty ( ) ) {
P-12	99.9969 99.761 99.8687 99.9822 99.9704 99.9986 99.9727 99.9999 99.9988 99.9136 99.9074 98.7735
H-12	99.33945875901442	for ( Integer x : arr . list ( ) ) {
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 94.4477 99.9163 99.9123 99.9987 99.8626 99.318
H-12	99.31345621744792	for ( Integer x : arr . values ( ) )
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 96.8086 99.9997 99.9992 99.9965 97.0
H-12	99.30390082465277	for ( int x : arr ) {
P-12	99.9949 97.1764 98.545 99.8712 99.8177 99.3535 99.9375 99.1782
H-12	99.29338243272569	for ( Long x : arr ) {
P-12	99.9949 95.899 99.2635 99.9899 99.9222 99.4926 99.9415 99.2765
H-12	99.2861836751302	for ( Integer x : arr . iterator ( ) )
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 96.4932 99.9998 99.9986 99.9927 96.9924
H-12	99.27781168619792	for ( Integer x : arr . size ( ) )
P-12	99.9949 99.8583 99.3173 99.9902 99.9107 99.0256 96.6269 99.9993 99.9997 99.9992 96.7512
H-12	99.25978781960227	if ( heap . is CaMeL Empty ( ) )
P-12	99.9966 98.093 99.9229 99.9519 99.9972 99.9733 99.9999 99.9988 99.8965 97.5665
H-12	99.24159071180556	for ( Integer 1 : arr ) {
P-12	99.9949 99.8583 94.9346 99.9851 99.8982 99.4435 99.9401 99.259
H-12	99.23130967881944	for ( Integer x : output ) {
P-12	99.9949 99.8583 99.3173 99.9902 95.1247 99.775 99.9517 99.2092
H-12	99.22254096137152	for ( Integer k : arr ) {
P-12	99.9949 99.8583 94.8847 99.9839 99.8928 99.3439 99.9332 99.2507
H-12	99.19977361505681	for ( Integer [ ] x : arr ) {
P-12	99.9949 99.8583 94.8521 99.7336 98.5815 99.9839 99.884 99.2359 99.9483 99.2646
H-12	99.19115532769098	for ( int k : arr ) {
P-12	99.9949 97.1764 97.7035 99.8718 99.8286 99.194 99.9285 99.1621
H-12	99.18772379557292	for ( String x : arr ) {
P-12	99.9949 95.1656 99.0461 99.9916 99.9224 99.5167 99.9478 99.2438
H-12	99.18009440104167	for ( Integer x : heap ) {
P-12	99.9949 99.8583 99.3173 99.9902 95.8769 98.5372 99.9463 99.2392
H-12	99.16843872070312	for ( final Integer x : arr ) {
P-12	99.9949 93.845 99.903 99.3608 99.9921 99.934 99.4148 99.9536 99.4259
H-12	99.14981689453126	for ( Integer x ] : arr ) {
P-12	99.9949 99.8583 99.3173 93.952 99.9468 99.9248 99.408 99.9497 99.2857
H-12	99.12650756835937	} for ( Integer x : arr ) {
P-12	99.9335 99.997 99.8652 99.2305 99.9908 99.9353 99.509 99.9628 99.3053
H-12	99.10059950086806	for ( Integer arr : arr ) {
P-12	99.9949 99.8583 93.6867 99.984 99.8803 99.4281 99.9404 99.2722
H-12	99.09505208333333	for ( Integer heap : arr ) {
P-12	99.9949 99.8583 93.7534 99.9593 99.8043 99.4225 99.9381 99.2642
H-12	98.97975158691406	for ( Integer : arr ) {
P-12	99.9949 99.8583 93.6681 99.8503 99.4725 99.9404 99.193
H-12	98.80051676432292	for ( int ) {
P-12	99.9949 97.1764 96.9266 99.9379 98.9068
H-12	98.55703735351562	for ( int }
P-12	99.9949 97.1764 96.7996 98.9538
S-13	else if ( weight < j ) {
T-13	else if ( weight <= j ) {
H-13	99.97273334703948	else if ( weight < j ) { memo [ i ] [ j ] = 0 ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 99.9184 99.9838 99.9887 97.9717 99.9773 103.373
H-13	99.96811394942434	else if ( weight < j ) { memo [ i ] [ j ] = j ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 99.9184 99.9838 99.9887 97.9901 99.8599 103.3843
H-13	99.94984654017857	else if ( weight < j ) { memo [ i - 1 ] [ j ] = 0 ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 98.9844 99.9894 99.9929 99.5294 99.924 99.9734 99.9863 98.0924 99.979 103.7393
H-13	99.92510695684524	else { memo [ i ] [ j ] = memo [ i - 1 ] [ j ] ;
P-13	98.5148 99.879 99.9841 99.9623 98.7142 99.9943 99.9056 99.9795 99.9859 98.5485 99.9903 99.9765 99.5361 99.9839 99.9937 99.9194 99.9049 99.9246 99.9667 103.8558
H-13	99.91974748883929	else if ( weight < j ) { memo [ i - 1 ] [ j ] = j ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 98.9844 99.9894 99.9929 99.5294 99.924 99.9734 99.9863 97.6533 99.7745 103.7507
H-13	99.90589735243056	else if ( weight < j ) { memo [ i - 1 ] = j ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 98.9844 99.9894 99.9929 98.9987 98.6919 99.7696 103.123
H-13	99.90543212890626	else { memo [ i - 1 ] = memo [ i - 1 ] [ j ] ;
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 98.564 98.6632 99.9885 99.9771 99.6589 99.9869 99.9929 99.9132 99.8935 99.9315 99.9605 103.7184
H-13	99.9041683799342	else if ( weight < j ) { memo [ i ] [ j ] = 1 ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 99.9184 99.9838 99.9887 96.6391 99.97 103.4102
H-13	99.86830540707237	else if ( weight < j ) { memo [ i ] [ j ] = value ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 99.9184 99.9838 99.9887 96.334 99.6254 103.3785
H-13	99.86809895833333	else { memo [ i - 1 ] [ j ] = 0 ;
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 99.7171 99.9166 99.9773 99.9818 97.8292 99.9729 102.7665
H-13	99.86112895764802	else { memo [ i ] [ j ] = memo [ i ] [ j ] ;
P-13	98.5148 99.879 99.9841 99.9623 98.7142 99.9943 99.9056 99.9795 99.9859 98.5485 99.9903 99.9765 98.9381 99.8859 99.8163 99.9157 99.9648 103.4984
H-13	99.85301378038194	else if ( weight < j ) { memo [ i - 1 ] = 0 ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 98.9844 99.9894 99.9929 98.9987 97.5338 99.9772 103.1215
H-13	99.84189181857639	else if ( weight < j ) { memo [ i - 1 ] = 1 ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 98.9844 99.9894 99.9929 98.9987 97.3368 99.9662 103.1295
H-13	99.8407470703125	else if ( weight < j ) { memo [ i ] [ j ] = - 1 ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 99.9184 99.9838 99.9887 95.1982 99.8439 99.9819 103.6309
H-13	99.83865356445312	else { memo [ i - 1 ] [ j ] = memo [ i - 1 ] ;
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 99.7171 99.9166 99.9773 99.9818 98.3549 99.9895 99.9795 99.7155 99.9839 99.9936 97.5489 103.7545
H-13	99.83326416015625	else if ( weight < j ) { memo [ i ] [ j ] = j ; }
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 99.9184 99.9838 99.9887 97.9901 99.8599 98.7517 101.9037
H-13	99.82605590820313	else if ( weight < j ) { memo [ i ] [ j ] = 0 ; }
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 99.9184 99.9838 99.9887 97.9717 99.9773 98.7561 101.6561
H-13	99.8250668174342	else if ( weight <= j ) { memo [ i ] [ j ] = 0 ;
P-13	99.727 99.9974 99.8582 96.9202 99.9126 99.7777 99.995 99.8748 99.9952 99.9505 99.4868 99.9944 99.9177 99.9826 99.9878 98.033 99.9763 103.3823
H-13	99.82122481496711	else if ( weight < j ) { memo [ i ] [ j ] = $NUMBER$ ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 99.9184 99.9838 99.9887 95.0374 99.9664 103.4397
H-13	99.81618138363487	else if ( weight <= j ) { memo [ i ] [ j ] = j ;
P-13	99.727 99.9974 99.8582 96.9202 99.9126 99.7777 99.995 99.8748 99.9952 99.9505 99.4868 99.9944 99.9177 99.9826 99.9878 97.9621 99.8617 103.3989
H-13	99.81475830078125	else if ( weight < j ) { memo [ i ] [ j ] = j ] ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 99.9184 99.9838 99.9887 97.9901 96.6804 99.8184 103.6464
H-13	99.81343801398026	else if ( weight >= j ) { memo [ i ] [ j ] = 0 ;
P-13	99.727 99.9974 99.8582 96.7123 99.9 99.8233 99.9939 99.8827 99.9954 99.9471 99.4914 99.9943 99.9162 99.9846 99.9882 97.9477 99.9729 103.4159
H-13	99.8071044921875	else { memo [ i - 1 ] [ j ] = j ;
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 99.7171 99.9166 99.9773 99.9818 97.1349 99.7521 102.7668
H-13	99.80475174753289	else if ( weight == j ) { memo [ i ] [ j ] = 0 ;
P-13	99.727 99.9974 99.8582 96.6654 99.8301 99.7678 99.995 99.8737 99.9949 99.9466 99.4065 99.9937 99.9195 99.9821 99.9878 98.086 99.9777 103.374
H-13	99.804443359375	else if ( weight < j ) { memo [ i ] [ i ] = 0 ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 96.7177 99.9524 99.9857 98.0234 99.977 103.3593
H-13	99.80023871527777	else { memo [ i - 1 ] = memo [ i ] [ j ] ;
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 98.564 98.6632 99.9885 99.9771 98.6543 99.8652 99.779 99.8961 99.9569 103.2002
H-13	99.79740825452302	else if ( weight < j ) { memo [ i ] [ i ] = j ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 96.7177 99.9524 99.9857 98.0058 99.8476 103.3725
H-13	99.79563502261513	else if ( weight >= j ) { memo [ i ] [ j ] = j ;
P-13	99.727 99.9974 99.8582 96.7123 99.9 99.8233 99.9939 99.8827 99.9954 99.9471 99.4914 99.9943 99.9162 99.9846 99.9882 97.7317 99.8535 103.4129
H-13	99.79332817925348	else if ( weight < j ) { memo [ i - 1 ] = value ;
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 98.9844 99.9894 99.9929 98.9987 97.1478 99.2763 103.1343
H-13	99.79217170266544	else if ( weight < j ) { memo [ i ] [ j ] =
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 99.9184 99.9838 99.9887 98.307
H-13	99.79153442382812	else { memo [ i - 1 ] [ j ] = memo [ i - 1 ] [
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 99.7171 99.9166 99.9773 99.9818 98.3549 99.9895 99.9795 99.7155 99.9839 99.9936 99.9051 100.4559
H-13	99.79117024739584	else { memo [ i - 1 ] [ j ] = 1 ;
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 99.7171 99.9166 99.9773 99.9818 96.6675 99.9716 102.7755
H-13	99.78810119628906	else { memo [ i - 1 ] [ j ] = 0 ; }
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 99.7171 99.9166 99.9773 99.9818 97.8292 99.9729 98.2785 103.0761
H-13	99.78372353001645	else if ( weight == j ) { memo [ i ] [ j ] = j ;
P-13	99.727 99.9974 99.8582 96.6654 99.8301 99.7678 99.995 99.8737 99.9949 99.9466 99.4065 99.9937 99.9195 99.9821 99.9878 97.7885 99.8539 103.3958
H-13	99.7790283203125	else { memo [ i - 1 ] [ j ] = value ;
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 99.7171 99.9166 99.9773 99.9818 96.8281 99.6409 102.7636
H-13	99.77249948601974	else if ( weight < j ) { memo [ i - 1 ] [ j ] =
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 98.9844 99.9894 99.9929 99.5294 99.924 99.9734 99.9863 98.5414
H-13	99.75947651110198	else if ( weight < j ) { memo [ i - 1 ] = j ; }
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 98.9844 99.9894 99.9929 98.9987 98.6919 99.7696 98.7156 101.5313
H-13	99.752978515625	else if ( weight < j ) { memo [ i ] [ j ] = 1 ; }
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 99.9184 99.9838 99.9887 96.6391 99.97 98.654 101.6365
H-13	99.73717041015625	else if ( weight < j ) { memo [ i ] [ j ] = value ; }
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 99.9184 99.9838 99.9887 96.334 99.6254 98.7918 101.8322
H-13	99.73285675048828	else { memo [ i - 1 ] [ j ] = j ; }
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 99.7171 99.9166 99.9773 99.9818 97.1349 99.7521 98.3086 103.0773
H-13	99.71683502197266	else { memo [ i - 1 ] [ j ] = - 1 ;
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 99.7171 99.9166 99.9773 99.9818 95.231 99.926 99.9818 102.8778
H-13	99.71216583251953	else { memo [ i - 1 ] [ j ] = 1 ; }
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 99.7171 99.9166 99.9773 99.9818 96.6675 99.9716 98.2262 103.0764
H-13	99.71007537841797	else if ( weight < j ) { memo [ i - 1 ] [
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 98.9844 99.9894 99.9929 99.5294 98.1088
H-13	99.70464409722223	else { memo [ i ] [ j ] = memo [ i - 1 ] [
P-13	98.5148 99.879 99.9841 99.9623 98.7142 99.9943 99.9056 99.9795 99.9859 98.5485 99.9903 99.9765 99.5361 99.9839 99.9937 99.9194 99.9084
H-13	99.70028250558036	else { memo [ i ] [ j ] = 0 ; }
P-13	98.5148 99.879 99.9841 99.9623 98.7142 99.9943 99.9056 99.9795 99.9859 97.7922 99.9678 98.3206 102.8966
H-13	99.69926372327302	else if ( weight < j ) { memo [ i - 1 ] = 0 ; }
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 98.9844 99.9894 99.9929 98.9987 97.5338 99.9772 98.7417 101.3117
H-13	99.6856689453125	else { memo [ i - 1 ] [ j ] = $NUMBER$ ;
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 99.7171 99.9166 99.9773 99.9818 95.0839 99.9661 102.7822
H-13	99.68454461348684	else if ( weight < j ) { memo [ i - 1 ] = 1 ; }
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 98.9844 99.9894 99.9929 98.9987 97.3368 99.9662 98.677 101.3048
H-13	99.68247357536765	else { memo [ i - 1 ] = memo [ i - 1 ] [
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 98.564 98.6632 99.9885 99.9771 99.6589 99.9869 99.9929 99.9132 99.9974
H-13	99.6782470703125	else if ( i == 0 || j == 0 ) { memo [ i - 1 ] [
P-13	99.727 99.9974 97.4626 99.6586 99.9315 99.9457 99.9782 99.9489 99.9811 99.9644 99.9954 99.8499 99.9948 99.9615 98.661 99.9885 99.9938 99.3983 99.2192
H-13	99.67727225167411	else { memo [ i ] [ j ] = j ; }
P-13	98.5148 99.879 99.9841 99.9623 98.7142 99.9943 99.9056 99.9795 99.9859 97.5872 99.8004 98.3716 102.8959
H-13	99.67021942138672	else if ( weight < j ) { memo [ i - 1 ] =
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 98.9844 99.9894 99.9929 98.9987 98.0019
H-13	99.66120461856617	else if ( i == 0 || j == 0 || j == 0 ) {
P-13	99.727 99.9974 97.4626 99.6586 99.9315 99.9457 99.9782 99.9489 99.9811 96.1343 99.9147 99.9568 99.9801 99.965 99.9933 101.7585
H-13	99.65354410807292	else { memo [ i - 1 ] [ j ] = memo [ i ] [
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 99.7171 99.9166 99.9773 99.9818 98.3549 99.9895 99.9795 98.5125 99.8417 99.6329
H-13	99.65111083984375	else if ( weight < j || j == 0 ) { memo [ i - 1 ] [
P-13	99.727 99.9974 99.8582 99.8046 99.9235 98.4679 98.4965 99.9088 99.9715 99.9392 99.9957 99.8501 99.9947 99.9597 98.5565 99.9882 99.9931 99.5308 99.1517
H-13	99.63896484375	else if ( weight < j || memo < j ) { memo [ i - 1 ] [
P-13	99.727 99.9974 99.8582 99.8046 99.9235 98.4679 98.4595 99.6628 99.643 99.9186 99.9936 99.8318 99.9938 99.952 98.994 99.9881 99.9925 99.5182 99.1459
H-13	99.63466796875	else if ( i == 0 || j == 0 ) { memo [ i - 1 ] =
P-13	99.727 99.9974 97.4626 99.6586 99.9315 99.9457 99.9782 99.9489 99.9811 99.9644 99.9954 99.8499 99.9948 99.9615 98.661 99.9885 99.9938 99.1829 98.563
H-13	99.633935546875	else if ( weight < j || weight < j ) { memo [ i - 1 ] [
P-13	99.727 99.9974 99.8582 99.8046 99.9235 98.4679 98.9295 99.1028 99.6376 99.9567 99.9942 99.8462 99.9946 99.9593 99.0005 99.9885 99.9924 99.5261 99.0644
H-13	99.62713623046875	else if ( weight < j ) { memo [ i ] [
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 96.5107
H-13	99.62566174958882	else if ( weight <= j ) { memo [ i - 1 ] [ j ] =
P-13	99.727 99.9974 99.8582 96.9202 99.9126 99.7777 99.995 99.8748 99.9952 99.9505 99.0315 99.9893 99.9928 99.5245 99.9241 99.9704 99.9852 98.5542
H-13	99.62423706054688	else if ( weight < j || weight == j ) { memo [ i - 1 ] [
P-13	99.727 99.9974 99.8582 99.8046 99.9235 98.4679 98.9295 98.8943 99.6199 99.9344 99.9951 99.8385 99.9943 99.956 98.9703 99.9887 99.9928 99.5309 99.1547
H-13	99.6229248046875	else { memo [ i - 1 ] = Math . max ( memo [ i - 1 ]
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 98.564 98.8244 99.9981 99.9707 99.9996 99.9025 99.9139 99.9768 99.9457 99.9878 99.9951 97.5198
H-13	99.6221923828125	else if ( weight < j ) { memo [ i ] [ j ] = memo [
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 99.9184 99.9838 99.9887 98.5139 99.985 96.1628
H-13	99.62209185431985	else if ( weight <= j ) { memo [ i ] [ j ] =
P-13	99.727 99.9974 99.8582 96.9202 99.9126 99.7777 99.995 99.8748 99.9952 99.9505 99.4868 99.9944 99.9177 99.9826 99.9878 98.2909
H-13	99.6193359375	else if ( i - 1 >= 0 || j == 0 ) {
P-13	99.727 99.9974 97.4626 98.0778 99.8804 99.7684 99.7495 99.2152 99.9607 99.8058 99.9784 99.9554 99.9946 100.8098
H-13	99.61739951685855	else if ( weight >= j ) { memo [ i - 1 ] [ j ] =
P-13	99.727 99.9974 99.8582 96.7123 99.9 99.8233 99.9939 99.8827 99.9954 99.9471 99.0243 99.9894 99.9929 99.5782 99.9184 99.973 99.9856 98.5246
H-13	99.61254204644098	else if ( i == 0 || j == 0 ) { memo [ i ] [
P-13	99.727 99.9974 97.4626 99.6586 99.9315 99.9457 99.9782 99.9489 99.9811 99.9644 99.9954 99.8499 99.9948 99.9615 99.6678 99.9913 97.0625
H-13	99.61048081341912	else if ( weight >= j ) { memo [ i ] [ j ] =
P-13	99.727 99.9974 99.8582 96.7123 99.9 99.8233 99.9939 99.8827 99.9954 99.9471 99.4914 99.9943 99.9162 99.9846 99.9882 98.2592
H-13	99.60962677001953	for ( int j = 0 ; j <= capacity ; j ++ ) {
P-13	99.9957 99.9873 99.8343 99.9862 99.9595 99.9962 99.9856 99.9744 99.8027 99.9776 99.9423 99.9983 99.9995 99.9625 101.4426
H-13	99.5965576171875	else if ( weight < j ) { memo [ i ] [ i ] =
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 96.7177 99.9524 99.9857 98.2167
H-13	99.59268527560764	else if ( weight < j ) {
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 97.4089
H-13	99.59214872472427	else if ( weight == j ) { memo [ i ] [ j ] =
P-13	99.727 99.9974 99.8582 96.6654 99.8301 99.7678 99.995 99.8737 99.9949 99.9466 99.4065 99.9937 99.9195 99.9821 99.9878 98.2139
H-13	99.58808244977679	} else if ( i == 0 || j == 0 ) {
P-13	99.7505 99.7024 99.9972 98.2727 99.4196 99.9353 99.9344 99.9654 99.9337 99.978 99.9576 99.992 100.9847
H-13	99.57947540283203	else { memo [ i ] [ j ] = memo [ i ] [
P-13	98.5148 99.879 99.9841 99.9623 98.7142 99.9943 99.9056 99.9795 99.9859 98.5485 99.9903 99.9765 98.9381 99.8859 99.1053
H-13	99.57219381893383	else if ( weight > j ) { memo [ i ] [ j ] =
P-13	99.727 99.9974 99.8582 96.0967 99.876 99.8889 99.9936 99.8831 99.9955 99.9505 99.4627 99.995 99.916 99.9843 99.9882 98.2075
H-13	99.56388033353366	else { memo [ i ] [ j ] = 0 ;
P-13	98.5148 99.879 99.9841 99.9623 98.7142 99.9943 99.9056 99.9795 99.9859 97.7922 99.9678 99.7436
H-13	99.5584716796875	else if ( i == 0 || j == 0 ) {
P-13	99.727 99.9974 97.4626 99.6586 99.9315 99.9457 99.9782 99.9489 99.9811 99.9644 99.9954 97.7624
H-13	99.54852294921875	else if ( weight < j ) { memo [ i ] [ j ]
P-13	99.727 99.9974 99.8582 99.8046 99.9235 99.7125 99.9951 99.8862 99.9956 99.9491 99.5184 99.9945 99.9184 99.9838 94.6051
H-13	99.5391845703125	else if ( weight <= j ) { memo [ i - 1 ] [
P-13	99.727 99.9974 99.8582 96.9202 99.9126 99.7777 99.995 99.8748 99.9952 99.9505 99.0315 99.9893 99.9928 99.5245 98.1735
H-13	99.53501539963942	else { memo [ i ] [ j ] = j ;
P-13	98.5148 99.879 99.9841 99.9623 98.7142 99.9943 99.9056 99.9795 99.9859 97.5872 99.8004 99.7409
H-13	99.51700533353366	else if ( weight < j || j == 0 ) {
P-13	99.727 99.9974 99.8582 99.8046 99.9235 98.4679 98.4965 99.9088 99.9715 99.9392 99.9957 97.7237
H-13	99.49099496694711	else { memo [ i ] [ j ] = 1 ;
P-13	98.5148 99.879 99.9841 99.9623 98.7142 99.9943 99.9056 99.9795 99.9859 96.8333 99.9674 99.7555
H-13	99.4882100423177	else { memo [ i - 1 ] = j ;
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 98.564 97.9899 99.7179 99.7267
H-13	99.47352952223558	else if ( weight < j || memo < j ) {
P-13	99.727 99.9974 99.8582 99.8046 99.9235 98.4679 98.4595 99.6628 99.643 99.9186 99.9936 97.7928
H-13	99.47103881835938	else { memo [ i - 1 ] = 0 ;
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 98.564 97.5264 99.9654 99.7366
H-13	99.46968587239583	else { memo [ i - 1 ] = 1 ;
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 98.564 97.5012 99.9677 99.7432
H-13	99.46168870192308	else if ( weight < j || weight < j ) {
P-13	99.727 99.9974 99.8582 99.8046 99.9235 98.4679 98.9295 99.1028 99.6376 99.9567 99.9942 97.6955
H-13	99.4460918719952	else if ( weight < j || weight == j ) {
P-13	99.727 99.9974 99.8582 99.8046 99.9235 98.4679 98.9295 98.8943 99.6199 99.9344 99.9951 97.7405
H-13	99.43749060997597	else if ( j == 0 || j == 0 ) {
P-13	99.727 99.9974 96.0841 99.5823 99.9536 99.8647 99.9723 99.9539 99.9794 99.9598 99.9954 97.7103
H-13	99.38455200195312	else { memo [ i - 1 ] = value ;
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 98.564 97.0205 99.435 99.7351
H-13	99.28836398654514	else if ( weight <= j ) {
P-13	99.727 99.9974 99.8582 96.9202 99.9126 99.7777 99.995 97.5004
H-13	99.26992797851562	else { memo [ i - 1 ] [
P-13	98.5148 99.879 99.9841 99.9623 99.631 99.9889 99.993 99.7171 95.1221
H-13	99.26127115885417	else if ( weight >= j ) {
P-13	99.727 99.9974 99.8582 96.7123 99.9 99.8233 99.9939 97.4324
H-13	99.24766710069444	else if ( weight == j ) {
P-13	99.727 99.9974 99.8582 96.6654 99.8301 99.7678 99.995 97.4813
H-13	99.24310913085938	} else if ( weight < j ) {
P-13	99.7505 99.7024 99.9972 99.7442 99.7983 99.8815 99.6534 99.9929 97.5008
H-13	99.19514973958333	else if ( weight > j ) {
P-13	99.727 99.9974 99.8582 96.0967 99.876 99.8889 99.9936 97.4116
H-13	99.05020141601562	if ( weight < j ) {
P-13	99.9949 99.0595 99.7617 99.8936 99.807 99.9932 97.283
H-13	97.2241923014323	else {
P-13	98.5148 93.2508
H-13	95.30900573730469	}
P-13	94.2082
H-13	94.83198547363281	else
P-13	89.757
S-14	return kth ( above , k ) ;
T-14	return kth ( above , k - num _ less@@ o@@ req ) ;
H-14	99.87747395833334	return kth ( above , k ) ; } else { return pivot ;
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 99.9533 99.9947 98.62 99.822 99.4921 99.8431 99.5161 99.8525 102.115
H-14	99.84383816189236	return kth ( above , k ) ;
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 99.9533 99.9947 99.6932
H-14	99.71637369791667	return pivot ; } else { return kth ( above , k ) ;
P-14	97.3232 99.767 99.1955 99.7591 99.2528 99.7553 98.6338 99.9288 99.6702 99.9875 99.9105 99.9429 99.9918 102.7098
H-14	99.6962890625	return kth ( below , k ) ; } else { return pivot ;
P-14	99.4902 99.9676 97.084 99.9903 99.9012 99.9425 99.9942 98.5377 99.8219 99.481 99.84 99.4988 99.8522 102.1255
H-14	99.63194986979167	return below ; } else { return kth ( above , k ) ;
P-14	96.731 99.4635 98.8677 99.7702 99.2049 99.7462 98.5948 99.9515 99.6661 99.9875 99.9087 99.9398 99.9914 102.7386
H-14	99.62266322544643	return arr . size ( ) - above . size ( ) ;
P-14	97.0018 99.709 99.5819 100.0 99.995 99.1647 99.8651 99.9779 99.9893 99.9998 99.9972 99.9296 99.5886
H-14	99.6158203125	return kth ( above , k ) ; } else { return below ;
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 99.9533 99.9947 98.62 99.822 99.4921 99.8431 95.847 99.3797 102.3321
H-14	99.61477864583334	return above ; } else { return kth ( above , k ) ;
P-14	95.8376 99.631 99.2224 99.771 99.2291 99.7757 98.6382 99.9536 99.6769 99.9875 99.9092 99.9413 99.9919 102.7387
H-14	99.61382184709821	return kth ( above , k ) ; } else return pivot ;
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 99.9533 99.9947 98.62 99.822 95.053 99.5101 99.8039 102.883
H-14	99.55630154079861	return kth ( below , k ) ;
P-14	99.4902 99.9676 97.084 99.9903 99.9012 99.9425 99.9942 99.7193
H-14	99.53647286551339	return new Integer ( k ) ; } else { return pivot ;
P-14	96.0306 99.0994 99.9919 99.5743 99.9433 99.9945 98.8424 99.791 99.3584 99.8319 99.3258 99.6482 102.1616
H-14	99.51776994977679	return below . size ( ) - above . size ( ) ;
P-14	96.731 98.8865 99.3863 99.9995 99.9919 98.9602 99.8561 99.9776 99.9903 99.9998 99.997 99.9131 99.6424
H-14	99.50974731445312	return kth ( above , k ) ; }
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 99.9533 99.9947 98.62 97.5761
H-14	99.50418795072116	return new Array CaMeL List < Integer > ( arr ) ;
P-14	96.0306 99.2178 99.996 99.9838 99.9171 99.89 99.9702 99.9986 99.883 98.9794 99.9635 99.807
H-14	99.4843241373698	return kth ( above , k ) ; } else {
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 99.9533 99.9947 98.62 99.822 99.4921 96.9764
H-14	99.47992815290179	return num _ less@@ o@@ req ; } else { return pivot ;
P-14	96.8005 99.9174 99.5574 99.9572 99.9822 99.9736 99.1919 99.7535 99.5819 99.8181 99.3547 99.7114 99.2018
H-14	99.4596280184659	return kth ( above , k , k ) ;
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 96.5894 98.9194 99.8513 99.9965 99.7459
H-14	99.43067278180804	int num _ less@@ o@@ req = arr . size ( ) ;
P-14	99.522 99.9936 99.9292 99.9358 99.9859 99.946 99.7764 99.9645 99.9746 100.0 99.9949 99.2695 99.0675
H-14	99.42743791852679	return above . size ( ) - above . size ( ) ;
P-14	95.8376 98.6102 99.4131 99.9962 99.993 98.8988 99.8107 99.9836 99.9908 99.9998 99.9969 99.9263 99.6096
H-14	99.42635404146634	return kth ( above , k , num _ less ) ;
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 96.5894 97.9161 99.9612 99.6101 99.8104 99.9965 99.7055
H-14	99.42367989676339	return kth ( above , k , k ) ; } else {
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 96.5894 98.9194 99.8513 99.9965 98.4412 99.8025 99.3922 99.9857
H-14	99.39198303222656	return arr . size ( ) ;
P-14	97.0018 99.709 99.5819 100.0 99.995 99.4218 99.5091
H-14	99.38997977120536	return arr . size ( ) ; } else { return pivot ;
P-14	97.0018 99.709 99.5819 100.0 99.995 99.4218 99.0113 99.7559 99.358 99.7945 99.0689 99.7178 99.1264
H-14	99.38970269097223	return arr . get ( 0 ) ;
P-14	97.0018 99.709 98.8054 99.9997 99.4319 99.9854 99.971 99.6859
H-14	99.38428844105114	return pivot ; } else { return pivot ; }
P-14	97.3232 99.767 99.1955 99.7591 99.2528 99.7553 99.3875 99.9001 99.4368 99.5325
H-14	99.37997000558036	return kth ( above , k ) ; break ; } else {
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 99.9533 99.9947 94.8043 99.9662 99.1984 99.2363 99.3538 99.8591
H-14	99.36863014914773	return kth ( above , k ) ; break ;
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 99.9533 99.9947 94.8043 99.9662 99.3831
H-14	99.36327185997597	return kth ( new Integer ( k ) , k ) ;
P-14	99.4902 99.9676 94.8329 98.7466 99.9938 99.7034 99.962 99.6621 99.7546 99.9491 99.9977 99.7453
H-14	99.3594970703125	return kth ( above , below , k ) ;
P-14	99.4902 99.9676 99.6813 99.9899 94.7509 99.7003 99.7185 99.9576 99.9964 99.7844
H-14	99.35188123914931	return pivot ( above , k ) ;
P-14	97.3232 98.3077 99.1495 99.9699 99.8914 99.9665 99.9931 99.6483
H-14	99.35164018110795	return kth ( above , above , k ) ;
P-14	99.4902 99.9676 99.6813 99.9899 94.5081 99.8653 99.7154 99.9662 99.9966 99.7701
H-14	99.33964399857955	return ( Integer ) above . size ( ) ;
P-14	96.6926 98.9528 99.9493 99.0164 99.5893 99.2362 99.9999 99.9967 99.8358 99.5497
H-14	99.33937377929688	return pivot ; } else { return pivot ;
P-14	97.3232 99.767 99.1955 99.7591 99.2528 99.7553 99.3875 99.9001 99.1358
H-14	99.33434119591347	return num _ less ; } else { return pivot ; }
P-14	96.8005 99.9174 98.9604 99.9367 98.9776 99.6851 99.5168 99.7738 99.2891 99.7473 99.3133 99.5112
H-14	99.32904607599431	return kth ( above , k ) ; } else
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 99.9533 99.9947 98.62 99.822 95.2762
H-14	99.3269551595052	return ( Integer ) kth ( above , k ) ;
P-14	96.6926 98.9528 99.9493 97.3321 99.9491 99.5779 99.9783 99.8944 99.9679 99.9963 99.7153
H-14	99.3208516438802	return ( int ) kth ( above , k ) ;
P-14	96.6926 97.8069 99.9937 98.3937 99.9356 99.5477 99.9792 99.892 99.9629 99.9949 99.7336
H-14	99.31675211588542	return num _ less ; } else { return pivot ;
P-14	96.8005 99.9174 98.9604 99.9367 98.9776 99.6851 99.5168 99.7738 99.2891 99.7473 99.279
H-14	99.31197102864583	return kth ( $STRING$ , k ) ;
P-14	99.4902 99.9676 95.2819 99.7284 99.8285 99.9176 99.9957 99.6804
H-14	99.31155734592014	return kth ( arr , k ) ;
P-14	99.4902 99.9676 95.2784 99.7663 99.8298 99.8596 99.9948 99.7
H-14	99.29720052083333	return pivot ; } else { return pivot ; } }
P-14	97.3232 99.767 99.1955 99.7591 99.2528 99.7553 99.3875 99.9001 99.4368 98.7161 99.1557
H-14	99.2964111328125	{ return kth ( above , k ) ;
P-14	99.0191 99.4522 99.9719 99.6739 99.9884 99.9147 99.9553 99.9958 99.5417
H-14	99.2938944498698	return new Integer ( num _ less@@ o@@ req ) ;
P-14	96.0306 99.0994 99.9919 97.3763 99.9942 99.5913 99.9845 99.98 99.9387 99.9953 99.6272
H-14	99.29212535511364	return kth ( above , k , pivot ) ;
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 96.5894 97.038 99.9064 99.9958 99.7304
H-14	99.28956434461806	return kth ( 0 , k ) ;
P-14	99.4902 99.9676 95.0407 99.9593 99.778 99.8135 99.9944 99.645
H-14	99.28765314275569	return ( Integer ) below . size ( ) ;
P-14	96.6926 98.9528 99.9493 98.1918 99.9833 99.164 100.0 99.9966 99.7174 99.5988
H-14	99.27924940321181	return pivot ( below , k ) ;
P-14	97.3232 98.3077 98.4637 99.982 99.8894 99.9601 99.9924 99.6773
H-14	99.27538384331598	return arr . get ( k ) ;
P-14	97.0018 99.709 98.8054 99.9997 98.3865 99.9871 99.9794 99.6922
H-14	99.26956176757812	return new Integer ( k ) ;
P-14	96.0306 99.0994 99.9919 99.5743 99.9433 99.9945 99.6051
H-14	99.26922052556819	return kth ( above , k , below ) ;
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 96.5894 97.0571 99.5896 99.9956 99.7763
H-14	99.25814819335938	return below . size ( ) ;
P-14	96.731 98.8865 99.3863 99.9995 99.9919 99.5524 99.6003
H-14	99.25440562855114	return num _ less@@ o@@ req ; } else {
P-14	96.8005 99.9174 99.5574 99.9572 99.9822 99.9736 99.1919 99.7535 99.5819 97.1655
H-14	99.24648708767361	return kth ( 1 , k ) ;
P-14	99.4902 99.9676 94.4499 99.9712 99.8531 99.9066 99.9944 99.6682
H-14	99.2447842684659	return kth ( above , k , arr ) ;
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 96.5894 97.6915 98.6931 99.9936 99.7717
H-14	99.241943359375	return kth ( below , k ) ; }
P-14	99.4902 99.9676 97.084 99.9903 99.9012 99.9425 99.9942 98.5377 97.5943
H-14	99.24090021306819	return kth ( below , k , k ) ;
P-14	99.4902 99.9676 97.084 99.9903 99.9012 96.7835 98.917 99.8412 99.9961 99.7614
H-14	99.2405118075284	return kth ( above , k , kth ) ;
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 96.5894 97.4863 98.8641 99.9938 99.7586
H-14	99.23865855823864	return kth ( above , k ) ; } }
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 99.9533 99.9947 98.62 95.3626 98.7413
H-14	99.23288796164773	return kth ( above , k + k ) ;
P-14	99.4902 99.9676 99.6813 99.9899 99.9071 94.9971 98.1183 99.7654 99.9961 99.7316
H-14	99.22347005208333	return num _ less@@ o@@ req ; }
P-14	96.8005 99.9174 99.5574 99.9572 99.9822 99.9736 99.1919 97.7137
H-14	99.2144775390625	return kth ( above , 1 ) ;
P-14	99.4902 99.9676 99.6813 99.9899 94.5273 99.6691 99.9942 99.6933
H-14	99.20737033420139	return below ( above , k ) ;
P-14	96.731 97.1764 99.486 99.9663 99.8835 99.9597 99.9887 99.7574
H-14	99.19538031684027	return size ( below , k ) ;
P-14	95.3664 99.4649 98.5252 99.9826 99.8415 99.9368 99.9878 99.7358
H-14	99.19187418619792	return size ( above , k ) ;
P-14	95.3664 99.4649 98.5438 99.9666 99.8277 99.9492 99.9906 99.7004
H-14	99.18335639105902	return kth ( above , 0 ) ;
P-14	99.4902 99.9676 99.6813 99.9899 94.2102 99.7468 99.9949 99.6519
H-14	99.181396484375	return below ; } else { return pivot ;
P-14	96.731 99.4635 98.8677 99.7702 99.2049 99.7462 99.0674 99.843 99.2027
H-14	99.17998657226562	result = kth ( above , k ) ;
P-14	99.8271 99.457 99.9748 99.5746 99.9837 99.8986 99.9405 99.9849 99.7319
H-14	99.1798828125	return above ; } else { return pivot ;
P-14	95.8376 99.631 99.2224 99.771 99.2291 99.7757 99.3742 99.853 99.1873
H-14	99.179443359375	return arr . get ( 1 ) ;
P-14	97.0018 99.709 98.8054 99.9997 97.5312 99.989 99.963 99.6985
H-14	99.174755859375	return k ; } else { return pivot ;
P-14	95.5631 99.9758 99.1777 99.7537 99.2571 99.7571 99.2166 99.8587 99.2704
H-14	99.16797485351563	if ( k >= num _ less ) {
P-14	99.9997 99.2985 99.2217 99.8829 99.9971 99.5689 99.9154 99.8917 98.961
H-14	99.16760932074652	return kth ( kth , k ) ;
P-14	99.4902 99.9676 94.3444 99.3161 99.8527 99.9423 99.9942 99.6836
H-14	99.15839301215277	return kth ( above , $NUMBER$ ) ;
P-14	99.4902 99.9676 99.6813 99.9899 93.9752 99.7037 99.9947 99.7056
H-14	99.15193684895833	return arr . size ( ) ; }
P-14	97.0018 99.709 99.5819 100.0 99.995 99.4218 99.0113 97.7293
H-14	99.14814588758681	return kth ( k , k ) ;
P-14	99.4902 99.9676 94.729 99.2266 99.4114 99.9222 99.9951 99.674
H-14	99.13957383897569	return kth ( above + k ) ;
P-14	99.4902 99.9676 99.6813 94.6278 99.1913 99.6971 99.9883 99.6951
H-14	99.12468804253473	return size ( arr , k ) ;
P-14	95.3664 99.4649 98.5658 99.6581 99.63 99.8093 99.9878 99.7225
H-14	99.12178548177083	return kth ( above , below ) ;
P-14	99.4902 99.9676 99.6813 99.9899 94.7509 98.5559 99.9933 99.7495
H-14	99.10655975341797	return above . size ( ) ;
P-14	95.8376 98.6102 99.4131 99.9962 99.993 99.5819 99.5031
H-14	99.06473541259766	return num _ less@@ o@@ req ;
P-14	96.8005 99.9174 99.5574 99.9572 99.9822 99.9736 96.4122
H-14	99.00448172433036	return kth ( k ) ;
P-14	99.4902 99.9676 94.729 99.3461 99.9935 99.5877
H-14	98.99964250837054	return kth ( above ) ;
P-14	99.4902 99.9676 99.6813 94.3364 99.9948 99.6098
H-14	98.96098109654018	return ( Integer ) above ;
P-14	96.6926 98.9528 99.9493 99.0164 98.8129 99.3853
H-14	98.92994907924107	return ( int ) k ;
P-14	96.6926 97.8069 99.9937 98.5896 99.9838 99.5256
H-14	98.91952078683036	return kth ( $STRING$ ) ;
P-14	99.4902 99.9676 95.2819 98.1699 99.9933 99.6164
H-14	98.90640694754464	return num _ less ; }
P-14	96.8005 99.9174 98.9604 99.9367 98.9776 97.835
H-14	98.89712960379464	return pivot ( k ) ;
P-14	97.3232 98.3077 97.3767 99.7972 99.9913 99.5663
H-14	98.89573451450893	return pivot ; } else {
P-14	97.3232 99.767 99.1955 99.7591 99.2528 97.0551
H-14	98.763916015625	return pivot ; }
P-14	97.3232 99.767 99.1955 97.6164
H-14	98.68147786458333	return num _ less ;
P-14	96.8005 99.9174 98.9604 99.9367 96.5566
H-14	98.5199462890625	return kth ; }
P-14	99.4902 96.1547 99.2713 97.7661
H-14	98.519775390625	return below ; }
P-14	96.731 99.4635 98.8677 97.6193
H-14	98.45888671875	return k ; }
P-14	95.5631 99.9758 99.1777 97.6605
H-14	98.4574951171875	return arr ; }
P-14	97.0018 98.4848 99.1897 97.6938
H-14	98.440869140625	return above ; }
P-14	95.8376 99.631 99.2224 97.5959
H-14	98.41104125976562	return - 1 ;
P-14	93.4977 99.3962 99.973 99.2709
H-14	98.35414123535156	return pivot ;
P-14	97.3232 99.767 96.4089
H-14	98.18115234375	return below ;
P-14	96.731 99.4635 96.6127
H-14	97.97645568847656	return kth ;
P-14	99.4902 96.1547 96.3435
H-14	97.96979522705078	return k ;
P-14	95.5631 99.9758 96.4229
S-15	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;
T-15	if ( dp . contains CaMeL Key ( i - 1 ) && dp . get ( i - 1 ) . contains CaMeL Key ( j - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j - 1 ) + 1 ;
H-15	99.95598810369319	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 99.5411 99.9962 99.9979 99.9318 99.9815 99.9772 99.9851 99.9731 99.9234 99.9585 99.9926 99.7499 99.9928 99.9545 99.9959 99.9789 99.9992 99.65 99.9939 99.7051 99.9384 99.9926 99.9778 99.9998 102.2909
H-15	99.94045188210227	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( i , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 99.5411 99.9962 99.9979 99.9318 99.9815 99.9772 99.9851 99.9731 99.9234 99.9585 99.9926 99.7499 99.9928 99.9545 99.9959 99.9789 99.9992 98.6945 99.9791 99.615 99.9378 99.9927 99.9783 99.9998 102.3267
H-15	99.93783569335938	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 98.9596 99.6616 99.9808 99.935 99.9719 99.975 99.9231 99.9614 99.9932 99.7589 99.9931 99.9548 99.996 99.9788 99.9992 99.6452 99.9956 99.736 99.9493 99.9928 99.9803 99.9997 102.0633
H-15	99.9363680752841	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 99.5411 99.9962 99.9979 99.9318 99.9815 99.9772 99.9851 99.9731 99.9234 99.9585 99.9926 99.7499 99.9928 99.9545 99.9959 99.9789 99.9992 99.65 99.9939 98.0823 99.9927 99.9783 99.9664 99.9996 102.5904
H-15	99.93341884328358	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 99.6894 99.9905 98.8105 99.9764 99.9959 99.9915 99.9901 99.93 99.9985 99.9445 99.9975 99.9682 99.4818 99.9965 99.9979 99.9282 99.9827 99.9813 99.989 99.9747 99.9315 99.9599 99.9944 101.5715
H-15	99.93062650240384	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 99.5915 99.993 99.2733 99.9943 99.9802 99.9633 99.9997 98.9312 99.8743 99.9643 99.9396 99.9893 99.9725 99.9941 99.9332 99.9218 99.9128 99.9961 99.9818 99.9925 99.9444 99.9965 99.9548 99.991 99.9849 99.8546 99.9971 101.5207
H-15	99.92758641098484	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 99.5411 99.9962 99.9979 99.9318 99.9815 99.9772 99.9851 99.9731 99.9234 99.9585 99.9926 99.7499 99.9928 99.9545 99.9959 99.9789 99.9992 98.6945 99.9791 98.4327 99.9928 99.978 99.972 99.9996 102.6259
H-15	99.92225646972656	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( i , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 98.9596 99.6616 99.9808 99.935 99.9719 99.975 99.9231 99.9614 99.9932 99.7589 99.9931 99.9548 99.996 99.9788 99.9992 98.6989 99.9885 99.6593 99.95 99.993 99.9809 99.9997 102.0949
H-15	99.92192007211538	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 98.8524 99.986 99.4142 99.9946 99.9799 99.9721 99.9997 98.9423 99.8742 99.9672 99.9417 99.9891 99.9726 99.9941 99.9338 99.9232 99.9142 99.9961 99.9818 99.9927 99.9439 99.9965 99.9552 99.9911 99.9855 99.8565 99.997 101.5284
H-15	99.92167217548077	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 99.6894 99.9905 98.8105 99.9764 99.9959 99.9915 99.9901 99.93 99.9985 99.9445 99.9975 99.9682 99.0542 99.6982 99.9823 99.9497 99.9758 99.969 99.9403 99.9638 99.9945 101.631
H-15	99.91611180160984	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer >> internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 97.2184 99.8289 99.9936 99.9818 99.881 99.9227 99.9974 99.9606 99.9958 99.9716 99.6886 99.986 98.8217 99.9756 99.9951 99.9911 99.9898 99.9202 99.9984 99.9309 99.9956 99.9548 99.5602 99.9963 99.998 99.9206 99.9824 99.9808 99.9841 99.9726 99.9267 99.957 99.9927 99.7534 99.9932 99.9562 99.9956 99.9806 99.9992 99.6479 99.9936 99.7716 99.9377 99.9929 99.98 99.9998 102.2557
H-15	99.91498565673828	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( j , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 98.9596 99.6616 99.9808 99.935 99.9719 99.975 99.9231 99.9614 99.9932 99.7589 99.9931 99.9548 99.996 99.9788 99.9992 99.6452 99.9956 97.98 99.9939 99.9769 99.9622 99.9996 102.3462
H-15	99.91323390151516	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 98.4154 99.9958 99.9982 99.5443 98.7749 99.9517 99.9952 99.9911 99.9893 99.923 99.9985 99.9365 99.9963 99.9587 98.7093 99.7617 99.9811 99.9558 99.9701 99.946 99.9165 99.9604 99.9905 99.7549 99.9928 99.9536 99.996 99.9799 99.9991 99.6333 99.9932 99.7212 99.9412 99.9925 99.9764 99.9998 102.3058
H-15	99.91102600097656	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , 1 ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 99.5411 99.9962 99.9979 99.9318 99.9815 99.9772 99.9851 99.9731 99.9234 99.9585 99.9926 99.7499 99.9928 99.9545 99.9959 99.9789 99.9992 99.65 99.9939 96.9796 99.9813 99.9835 102.1708
H-15	99.90941569010417	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 97.6123 99.9933 99.9192 99.9982 99.9411 99.9995 99.9907 99.9997 99.9809 99.9196 99.9945 99.9987 99.9912 99.9884 99.8003 99.9883 99.9758 99.9902 99.9518 99.944 99.8186 99.9958 99.9755 99.9942 99.9117 99.9974 99.9569 99.9947 99.9808 99.6483 99.9903 101.0184
H-15	99.9083023071289	if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 97.7152 99.9769 99.9829 99.5265 99.9853 99.964 99.9946 99.9372 99.9261 99.7171 99.9953 99.9748 99.9925 99.9051 99.9975 99.9541 99.9898 99.9708 99.9438 99.9916 98.7317 99.9736 99.9952 99.9914 99.9905 99.9228 99.9985 99.9357 99.9948 99.9576 98.7739 99.9931 99.9975 99.9118 99.98 99.9712 99.9886 99.9875 99.9302 99.9589 99.9938 99.7704 99.993 99.9546 99.9958 99.978 99.9992 99.6392 99.996 99.7226 99.9498 99.9929 99.9803 99.9998 102.0532
H-15	99.9071974113806	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; dp . put ( i , internal _ map ) ; dp . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 99.5915 99.993 99.2733 99.9943 99.9802 99.9633 99.9997 98.4812 99.9921 99.976 99.9997 99.8705 99.9866 99.7604 99.994 99.9818 99.9962 99.9998 97.7616 99.9908 99.9794 99.9996 99.8926 99.9882 99.8005 99.9943 99.979 99.9975 99.9998 102.5166
H-15	99.90668402777777	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 1 ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 99.5915 99.993 98.3811 99.9912 99.9951 98.3658 99.8726 99.9602 99.9155 99.9894 99.9713 99.9952 99.932 99.9262 99.9012 99.9959 99.9813 99.9921 99.9442 99.9964 99.9531 99.9921 99.9835 99.8497 99.9965 101.6067
H-15	99.90621185302734	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 98.9596 99.6616 99.9808 99.935 99.9719 99.975 99.9231 99.9614 99.9932 99.7589 99.9931 99.9548 99.996 99.9788 99.9992 98.6989 99.9885 98.3297 99.994 99.9765 99.9694 99.9996 102.382
H-15	99.90472506009615	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 1 ) ; dp . put ( i , internal _ map ) ; dp . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 99.5915 99.993 98.3811 99.9912 99.9951 99.3055 99.9929 99.9734 99.9997 99.8481 99.9829 99.6641 99.9944 99.9798 99.9763 99.9998 98.0591 99.9916 99.9772 99.9996 99.8904 99.9847 99.7173 99.9944 99.977 99.9964 99.9998 102.5019
H-15	99.90466855177239	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 99.5915 99.993 99.2733 99.9943 99.9802 99.9633 99.9997 98.9312 99.8743 99.9643 99.9396 99.9893 99.9725 99.9941 99.9332 99.9218 99.9128 99.9961 99.9818 99.9925 99.9444 99.9965 99.9548 99.991 99.9849 97.8605 99.9964 99.9983 99.7586 101.8803
H-15	99.90096028645833	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer >> internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( i , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 97.2184 99.8289 99.9936 99.9818 99.881 99.9227 99.9974 99.9606 99.9958 99.9716 99.6886 99.986 98.8217 99.9756 99.9951 99.9911 99.9898 99.9202 99.9984 99.9309 99.9956 99.9548 99.5602 99.9963 99.998 99.9206 99.9824 99.9808 99.9841 99.9726 99.9267 99.957 99.9927 99.7534 99.9932 99.9562 99.9956 99.9806 99.9992 98.6861 99.9786 99.717 99.9367 99.9931 99.9805 99.9998 102.2877
H-15	99.90034412202381	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; dp . put ( i , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 96.7613 99.994 99.9746 99.9996 99.6677 99.9815 99.5904 99.9941 99.9798 99.9733 99.9997 98.8106 99.8826 99.9742 99.9086 99.989 99.9723 99.9948 99.9331 99.921 99.8922 99.996 99.9814 99.9926 99.9435 99.9963 99.9534 99.9904 99.985 99.8686 99.9967 101.7236
H-15	99.89952674278847	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 98.9596 98.1612 98.671 99.9237 99.9862 99.9874 99.9842 99.8718 99.9983 99.9374 99.9976 99.9242 99.6304 99.9961 99.9965 99.9506 99.9802 99.9872 99.9736 99.9643 99.9312 99.9534 99.9939 102.0912
H-15	99.8995015158582	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; internal _ map . put ( j , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 98.4154 99.9958 99.9982 99.5443 98.6402 99.995 99.9561 99.9948 99.9752 99.9995 99.611 99.9874 99.3077 99.9938 99.9813 99.9651 99.9997 98.9458 99.8708 99.9637 99.9391 99.9881 99.9746 99.9937 99.9313 99.9199 99.9081 99.9958 99.9823 99.9925 99.9481 99.9966 99.9536 99.9856 99.9843 99.7926 99.9973 101.4697
H-15	99.89877319335938	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) ; internal _ map . put ( j , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 99.5411 99.9962 99.9979 99.9318 99.9815 99.9772 99.9851 99.9731 97.0337 99.1191 99.9939 99.953 99.9961 99.9765 99.9993 99.6769 99.9944 99.731 99.9509 99.9931 99.9815 99.9997 102.1215
H-15	99.8983857125947	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( i , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 98.4154 99.9958 99.9982 99.5443 98.7749 99.9517 99.9952 99.9911 99.9893 99.923 99.9985 99.9365 99.9963 99.9587 98.7093 99.7617 99.9811 99.9558 99.9701 99.946 99.9165 99.9604 99.9905 99.7549 99.9928 99.9536 99.996 99.9799 99.9991 98.7263 99.9752 99.6288 99.941 99.9927 99.9773 99.9998 102.3425
H-15	99.89738077192165	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , internal _ map ) ; dp . put ( i , internal _ map ) ; dp . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 98.8524 99.986 99.4142 99.9946 99.9799 99.9721 99.9997 98.4255 99.9921 99.9759 99.9997 99.868 99.9869 99.762 99.9941 99.9818 99.996 99.9998 97.7527 99.9908 99.9793 99.9996 99.8959 99.9882 99.8022 99.9944 99.9787 99.9974 99.9998 102.5162
H-15	99.89726257324219	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( i , 1 ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 99.5411 99.9962 99.9979 99.9318 99.9815 99.9772 99.9851 99.9731 99.9234 99.9585 99.9926 99.7499 99.9928 99.9545 99.9959 99.9789 99.9992 98.6945 99.9791 97.0291 99.9734 99.99 102.2128
H-15	99.89693509615384	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , insert _ value ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 99.5915 99.993 98.4543 99.9884 98.7764 99.9722 99.9997 98.7189 99.8938 99.9624 99.9562 99.989 99.9717 99.9939 99.9308 99.9136 99.9049 99.9959 99.9807 99.993 99.9456 99.9965 99.9547 99.9921 99.9853 99.8478 99.9968 101.5534
H-15	99.8966796875	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 99.6894 99.9905 98.8105 99.9764 99.9959 99.9915 99.9901 99.93 99.9985 99.9445 99.9975 99.9682 99.4818 99.9965 99.9979 99.9282 99.9827 99.9813 99.989 99.9747 97.0129 102.1897
H-15	99.8959086403918	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 98.8524 99.986 99.4142 99.9946 99.9799 99.9721 99.9997 98.9423 99.8742 99.9672 99.9417 99.9891 99.9726 99.9941 99.9338 99.9232 99.9142 99.9961 99.9818 99.9927 99.9439 99.9965 99.9552 99.9911 99.9855 97.851 99.9964 99.9983 99.7528 101.8841
H-15	99.89588341346153	if ( dp . contains CaMeL Key ( i ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 97.7152 99.9769 99.9829 98.1439 99.995 99.9103 99.9984 99.9475 99.9998 99.9887 99.9997 99.987 99.7318 99.9923 99.9976 99.983 99.9848 99.7111 99.9873 99.9744 99.9895 99.9466 99.9429 99.8064 99.9956 99.9768 99.9935 99.9149 99.9973 99.9569 99.9923 99.978 99.7396 99.9916 98.7265 99.9764 99.9959 99.992 99.991 99.9299 99.9985 99.9373 99.9971 99.9667 99.4644 99.9965 99.9983 99.934 99.9824 99.9808 99.9903 99.9808 99.938 99.9647 99.9953 101.5778
H-15	99.89576770413306	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 97.6123 99.9933 99.9192 99.9982 99.9411 99.9995 99.9907 99.9997 99.9809 99.9196 99.9945 99.9987 99.9912 99.9884 99.8003 99.9883 99.9758 99.9902 99.9518 99.944 99.8186 99.9958 99.9755 99.9942 99.9117 99.9974 99.9569 99.9947 99.9808 98.6615 99.9967 99.9984 99.6301 101.343
H-15	99.89571380615234	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer >> internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 97.2184 99.8289 99.9936 99.9818 99.881 99.9227 99.9974 99.9606 99.9958 99.9716 99.6886 99.986 98.8217 99.9756 99.9951 99.9911 99.9898 99.9202 99.9984 99.9309 99.9956 99.9548 98.9219 99.6525 99.9823 99.9441 99.9706 99.9745 99.928 99.9596 99.9931 99.7634 99.9935 99.9566 99.9957 99.9806 99.9992 99.6384 99.9954 99.7887 99.9483 99.9932 99.9823 99.9998 102.0282
H-15	99.89526002798507	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ; }
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 99.5411 99.9962 99.9979 99.9318 99.9815 99.9772 99.9851 99.9731 99.9234 99.9585 99.9926 99.7499 99.9928 99.9545 99.9959 99.9789 99.9992 99.65 99.9939 99.7051 99.9384 99.9926 99.9778 99.9998 97.8192 100.3589
H-15	99.89491021455224	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 98.5487 99.9965 99.9981 99.618 98.7459 99.9576 99.9956 99.991 99.9899 99.9299 99.9984 99.939 99.9972 99.9669 98.7103 99.7881 99.9813 99.9558 99.9738 99.9532 99.9294 99.9619 99.9931 101.5741
H-15	99.8942367311508	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 99.6894 99.9905 95.6071 99.974 99.9739 99.9949 99.9325 99.8826 99.8377 99.9955 99.9808 99.9876 99.9035 99.9971 99.9553 99.9828 99.9753 99.7206 99.9867 102.5031
H-15	99.89307403564453	if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( i , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 97.7152 99.9769 99.9829 99.5265 99.9853 99.964 99.9946 99.9372 99.9261 99.7171 99.9953 99.9748 99.9925 99.9051 99.9975 99.9541 99.9898 99.9708 99.9438 99.9916 98.7317 99.9736 99.9952 99.9914 99.9905 99.9228 99.9985 99.9357 99.9948 99.9576 98.7739 99.9931 99.9975 99.9118 99.98 99.9712 99.9886 99.9875 99.9302 99.9589 99.9938 99.7704 99.993 99.9546 99.9958 99.978 99.9992 98.7215 99.9922 99.6415 99.9497 99.993 99.9803 99.9998 102.0807
H-15	99.89200846354167	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 98.4154 99.9958 99.9982 98.9627 99.8848 99.6875 99.8891 99.974 99.5038 98.5894 99.9625 99.9947 99.9909 99.9893 99.9212 99.9985 99.9383 99.9972 99.9538 99.7001 99.9964 99.9979 99.9664 99.9743 99.9948 99.9586 99.976 99.9146 99.9553 99.9923 101.0745
H-15	99.8916890158582	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer >> internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 97.0821 99.8409 99.9941 99.9833 99.9666 99.9328 99.9977 99.9675 99.9969 99.978 99.6659 99.9862 98.8426 99.9799 99.9959 99.9915 99.9907 99.9316 99.9985 99.9444 99.9979 99.9675 99.4942 99.9966 99.9981 99.9123 99.9836 99.9845 99.9889 99.9748 99.935 99.9595 99.9945 101.5429
H-15	99.8916248139881	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , 1 ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 98.8524 99.986 98.1268 99.9887 99.9967 98.3989 99.8747 99.9628 99.9163 99.9893 99.9713 99.9952 99.9327 99.9273 99.903 99.9959 99.9814 99.992 99.9438 99.9964 99.9537 99.9924 99.9843 99.851 99.9963 101.615
H-15	99.89137564132463	if ( s . char CaMeL At ( j ) == t . char CaMeL At ( j ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 96.4998 99.9933 99.8537 99.9966 99.9996 100.0 99.7464 99.9526 99.943 99.9571 99.9847 99.9926 99.9983 99.9997 100.0 99.8978 99.9742 99.9565 99.9803 98.9834 99.9969 99.9101 99.9979 99.9454 99.9988 99.9855 99.9997 99.9874 99.9195 99.9923 99.9977 99.9706 99.9837 97.8135 99.9928 99.9202 99.9985 99.9322 99.9997 99.9892 99.9995 99.9886 99.9223 99.994 99.9982 99.9874 99.9871 99.7987 99.9877 99.9789 99.9939 99.9502 99.9508 99.8086 99.9956 99.9752 99.9945 99.8976 99.9976 99.9567 99.988 99.9772 99.7005 99.9911 101.9068
H-15	99.89086538461538	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 98.5487 99.9965 99.9981 99.618 96.8679 99.9872 99.9732 99.9937 99.9346 99.8879 99.8402 99.9956 99.9803 99.9901 99.903 99.9972 99.9597 99.9906 99.9758 99.5919 99.9858 102.4246
H-15	99.89078776041667	if ( s . char CaMeL At ( j ) == t . char CaMeL At ( j ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ;
P-15	99.9986 96.4998 99.9933 99.8537 99.9966 99.9996 100.0 99.7464 99.9526 99.943 99.9571 99.9847 99.9926 99.9983 99.9997 100.0 99.8978 99.9742 99.9565 99.9803 98.9834 99.9969 99.9101 99.9979 99.9454 99.9988 99.9855 99.9997 99.9874 99.9195 99.9923 99.9977 99.9706 99.9837 99.6847 99.9867 99.9738 99.9948 99.9423 99.9359 99.7796 99.9956 99.9753 99.9938 99.8903 99.9977 99.9584 99.9774 99.9733 99.6999 99.9917 99.0728 99.9954 99.9658 99.9946 99.9745 99.9995 99.5811 99.9888 99.3024 99.9936 99.9816 99.9688 99.9996 101.8736
H-15	99.88959013526119	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; internal _ map . put ( i , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 98.4154 99.9958 99.9982 99.5443 98.6402 99.995 99.9561 99.9948 99.9752 99.9995 98.8078 99.9651 99.4403 99.9941 99.9809 99.9719 99.9997 98.9497 99.8703 99.966 99.9416 99.9879 99.9745 99.9937 99.932 99.9204 99.909 99.9958 99.9823 99.9926 99.9476 99.9965 99.954 99.9863 99.9849 99.7952 99.9972 101.4781
H-15	99.88939302884616	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; } else { Map < Integer , Integer >> internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 99.5915 99.993 99.2733 99.9943 99.9802 99.9633 99.9997 98.9312 99.8743 99.9643 99.9396 99.9893 99.9725 99.9941 99.9332 97.2648 99.93 99.9958 99.9854 99.9903 99.9437 99.9963 99.9595 99.9945 99.9842 99.8499 99.997 101.4773
H-15	99.88889723557692	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 97.203 99.9891 99.9838 99.695 99.9864 99.972 99.9919 99.9484 99.9445 99.8004 99.9955 99.9767 99.9935 99.9133 99.9973 99.9569 99.9907 99.9786 99.8166 99.9908 98.7248 99.9763 99.9959 99.9921 99.9908 99.9302 99.9985 99.9382 99.997 99.9673 99.3915 99.9965 99.9983 99.9347 99.9824 99.9802 99.9901 99.9816 99.9379 99.9647 99.9954 101.5746
H-15	99.88873291015625	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . add ( insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 99.5411 99.9962 99.9979 99.9318 99.9815 99.9772 99.9851 99.9731 99.9234 99.9585 99.9926 99.7499 99.9928 99.9545 99.9959 95.8139 99.9994 99.5484 99.9523 99.9931 99.9389 99.9996 102.065
H-15	99.88757717993951	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( j , 1 ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 98.9596 99.6616 99.9808 99.935 99.9719 99.975 99.9231 99.9614 99.9932 99.7589 99.9931 99.9548 99.996 99.9788 99.9992 99.6452 99.9956 96.8353 99.9821 99.9877 101.9242
H-15	99.88630676269531	if ( dp . contains CaMeL Key ( i - 1 ) && dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 96.4828 99.7253 99.9984 99.8546 99.999 99.9823 100.0 99.9812 99.9145 99.9926 99.9987 99.9771 99.9704 99.406 99.9828 99.9676 99.9888 99.931 99.9277 99.6982 99.9953 99.9727 99.9925 99.9195 99.9972 99.9543 99.9946 99.9747 99.6784 99.9909 98.594 99.9683 99.995 99.991 99.9899 99.9216 99.9986 99.9324 99.9961 99.9609 99.5391 99.9965 99.9979 99.9424 99.9811 99.984 99.9844 99.9619 99.9295 99.9614 99.993 101.2861
H-15	99.88510650058963	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 99.5411 99.9962 99.9979 99.9318 99.9815 99.9772 99.9851 99.9731 99.9234 99.9585 99.9926 98.0356
H-15	99.88486638144842	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 0 ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 99.5915 99.993 97.0431 99.9815 99.9968 98.3402 99.8729 99.9581 99.912 99.9893 99.9714 99.995 99.9317 99.9251 99.8957 99.9959 99.9814 99.992 99.9431 99.9964 99.9537 99.9912 99.9833 99.849 99.9962 101.618
H-15	99.88445953824628	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 97.6123 99.9933 99.9192 99.9982 99.9411 99.9995 99.9907 99.9997 99.9809 99.9196 99.9945 99.9987 99.9912 99.9884 99.8003 99.9883 99.9758 99.9902 99.9518 99.944 99.8186 99.9958 99.9755 99.9942 99.9117 99.9974 99.9569 99.9947 99.9808 98.6615 99.9967 99.9984 98.7823 99.8969 99.7591 99.8091 99.96 99.5567 101.9301
H-15	99.88388981894842	if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 97.7152 99.9769 99.9829 99.5265 99.9853 99.964 99.9946 99.9372 99.9261 99.7171 99.9953 99.9748 99.9925 99.9051 99.9975 99.9541 99.9898 99.9708 99.9438 99.9916 99.0605 99.9957 99.9631 99.9939 99.9742 99.9995 99.6004 99.9988 99.2121 99.9939 99.9806 99.9664 99.9997 98.9015 99.8818 99.9619 99.9182 99.9889 99.9721 99.9942 99.9335 99.92 99.9197 99.9958 99.9817 99.9925 99.9404 99.9962 99.9546 99.9899 99.9852 99.9585 99.9967 100.635
H-15	99.88286675347223	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; dp . put ( j , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 96.7613 99.994 99.9746 99.9996 98.6844 99.9904 99.5014 99.9938 99.9796 99.9675 99.9997 98.7972 99.8829 99.9725 99.9071 99.9892 99.9722 99.9948 99.9325 99.9206 99.891 99.996 99.9813 99.9924 99.944 99.9963 99.9527 99.9902 99.9831 99.867 99.9969 101.713
H-15	99.88043668376865	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( i , insert _ value ) ; }
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 99.5411 99.9962 99.9979 99.9318 99.9815 99.9772 99.9851 99.9731 99.9234 99.9585 99.9926 99.7499 99.9928 99.9545 99.9959 99.9789 99.9992 98.6945 99.9791 99.615 99.9378 99.9927 99.9783 99.9998 97.8652 100.3808
H-15	99.88033353365384	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , internal _ map ) ; } else { Map < Integer , Integer >> internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 98.8524 99.986 99.4142 99.9946 99.9799 99.9721 99.9997 98.9423 99.8742 99.9672 99.9417 99.9891 99.9726 99.9941 99.9338 97.2422 99.9328 99.9959 99.9854 99.9899 99.9431 99.9963 99.96 99.9946 99.9849 99.8528 99.9969 101.4851
H-15	99.87974434468283	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , internal _ map ) ; }
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 99.5411 99.9962 99.9979 99.9318 99.9815 99.9772 99.9851 99.9731 99.9234 99.9585 99.9926 99.7499 99.9928 99.9545 99.9959 99.9789 99.9992 99.65 99.9939 98.0823 99.9927 99.9783 99.9664 99.9996 98.2659 100.467
H-15	99.87957763671875	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; dp . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 99.5915 99.993 99.2733 99.9943 99.9802 99.9633 99.9997 98.4812 99.9921 99.976 99.9997 99.8705 99.9866 99.7604 99.994 99.9818 99.9962 99.9998 99.3746
H-15	99.87603449417372	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 99.6894 99.9905 99.1231 99.9955 99.9658 99.9952 99.9731 99.9996 99.563 99.9907 99.2782 99.9938 99.9817 99.9719 99.9997 98.7099
H-15	99.87568010602679	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = new Hash CaMeL Map < Integer , Integer >> ( ) ; for ( int j = 0 ; j < t . length ( ) ; j ++ ) {
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 96.5345 99.8217 99.9008 99.9723 99.9376 99.985 99.9953 99.9005 99.3175 99.9841 99.9792 99.9999 98.9427 99.9957 99.9799 99.6499 99.995 99.9791 99.9983 99.9868 99.9599 99.7722 99.9938 99.9959 99.9997 99.9999 99.9978 99.9838 99.9977 99.9993 99.9511 100.9865
H-15	99.87462506975446	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = new Hash CaMeL Map < Integer , Integer > ( ) ; for ( int j = 0 ; j < t . length ( ) ; j ++ ) {
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 96.5345 99.8217 99.9008 99.9723 99.9376 99.985 99.9953 99.9005 99.2874 99.9977 99.9661 99.9999 98.9187 99.9957 99.9799 99.6556 99.9949 99.9791 99.9982 99.9866 99.9605 99.7645 99.9939 99.9958 99.9996 99.9998 99.9978 99.9836 99.9977 99.9993 99.9482 100.9875
H-15	99.87433345734127	if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , internal _ map ) ; } else { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 97.7152 99.9769 99.9829 99.5265 99.9853 99.964 99.9946 99.9372 99.9261 99.7171 99.9953 99.9748 99.9925 99.9051 99.9975 99.9541 99.9898 99.9708 99.9438 99.9916 99.0605 99.9957 99.9631 99.9939 99.9742 99.9995 98.8358 99.999 99.3452 99.9942 99.9804 99.9727 99.9997 98.9035 99.8811 99.965 99.9224 99.9887 99.9723 99.9942 99.9341 99.9209 99.9209 99.9958 99.9818 99.9926 99.9397 99.9961 99.9552 99.9901 99.9858 99.9596 99.9966 100.6453
H-15	99.87210286458334	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 99.6894 99.9905 98.8105 99.9764 99.9959 99.9915 99.9901 99.93 99.9985 99.9445 99.9975 99.9682 99.0542 97.7815 99.9391 99.9924 100.8096
H-15	99.87105758101852	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 1 ) ; dp . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 99.5915 99.993 98.3811 99.9912 99.9951 99.3055 99.9929 99.9734 99.9997 99.8481 99.9829 99.6641 99.9944 99.9798 99.9763 99.9998 99.32
H-15	99.87012493799604	if ( dp . contains CaMeL Key ( i ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 97.7152 99.9769 99.9829 98.1439 99.995 99.9103 99.9984 99.9475 99.9998 99.9887 99.9997 99.987 99.7318 99.9923 99.9976 99.983 99.9848 99.7111 99.9873 99.9744 99.9895 99.9466 99.9429 99.8064 99.9956 99.9768 99.9935 99.9149 99.9973 99.9569 99.9923 99.978 99.7396 99.9916 98.7265 99.9764 99.9959 99.992 99.991 99.9299 99.9985 99.9373 99.9971 99.9667 99.0908 99.7893 99.9841 99.954 99.9765 99.9808 99.94 99.9654 99.9943 100.7143
H-15	99.86838751324153	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 99.6894 99.9905 99.1231 99.9955 99.9658 99.9952 99.9731 99.9996 98.9181 99.9786 99.4427 99.9942 99.9816 99.9793 99.9997 98.7434
H-15	99.86789376395089	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , internal _ map ) ; dp . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 98.8524 99.986 99.4142 99.9946 99.9799 99.9721 99.9997 98.4255 99.9921 99.9759 99.9997 99.868 99.9869 99.762 99.9941 99.9818 99.996 99.9998 99.3733
H-15	99.86751039566532	if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 97.7152 99.9769 99.9829 99.5265 99.9853 99.964 99.9946 99.9372 99.9261 99.7171 99.9953 99.9748 99.9925 99.9051 99.9975 99.9541 99.9898 99.9708 99.9438 99.9916 98.7317 99.9736 99.9952 99.9914 99.9905 99.9228 99.9985 99.9357 99.9948 99.9576 99.6489 99.6948 99.9814 99.9434 99.975 99.9967 99.9219 99.9597 99.993 99.7694 99.9931 99.9525 99.9959 99.9783 99.9992 99.6313 99.9985 99.7266 99.951 99.993 99.9826 99.9997 99.0787
H-15	99.86747101814517	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 99.6894 99.9905 98.8105 99.9764 99.9959 99.9915 99.9901 99.93 99.9985 99.9445 99.9975 99.9682 99.4818 99.9965 99.9979 96.6766 99.9511 99.9928 100.9365
H-15	99.86597067212301	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 97.203 99.9891 99.9838 99.695 99.9864 99.972 99.9919 99.9484 99.9445 99.8004 99.9955 99.9767 99.9935 99.9133 99.9973 99.9569 99.9907 99.9786 99.8166 99.9908 98.7248 99.9763 99.9959 99.9921 99.9908 99.9302 99.9985 99.9382 99.997 99.9673 99.1914 99.8088 99.9839 99.9523 99.9764 99.9833 99.9392 99.9654 99.9944 100.7111
H-15	99.86519681490384	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( j , insert _ value ) ; }
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 98.9596 99.6616 99.9808 99.935 99.9719 99.975 99.9231 99.9614 99.9932 99.7589 99.9931 99.9548 99.996 99.9788 99.9992 99.6452 99.9956 99.736 99.9493 99.9928 99.9803 99.9997 97.7398 99.5399
H-15	99.86232383578431	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 98.9596 99.6616 99.9808 99.935 99.9719 99.975 99.9231 99.9614 99.9932 98.0001
H-15	99.85940163352272	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 98.4154 99.9958 99.9982 99.5443 98.7749 99.9517 99.9952 99.9911 99.9893 99.923 99.9985 99.9365 99.9963 99.9587 99.6446 99.9966 99.9975 99.9492 99.9783 99.9838 99.9816 99.9616 99.921 99.9585 99.9927 98.0602
H-15	99.85396321614583	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 98.5487 99.9965 99.9981 99.618 98.3632
H-15	99.85243975105932	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) + 1 ; internal _ map . put ( j , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 98.9596 97.9002 99.936 99.992 99.7056 99.9931 99.9516 99.996 99.9748 99.9994 99.6748 99.9943 99.7396 99.9376 99.9924 99.975 99.9997 98.9553
H-15	99.85223979334677	if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ; internal _ map . put ( i , insert _ value ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 97.7152 99.9769 99.9829 99.5265 99.9853 99.964 99.9946 99.9372 99.9261 99.7171 99.9953 99.9748 99.9925 99.9051 99.9975 99.9541 99.9898 99.9708 99.9438 99.9916 98.7317 99.9736 99.9952 99.9914 99.9905 99.9228 99.9985 99.9357 99.9948 99.9576 99.6489 99.6948 99.9814 99.9434 99.975 99.9967 99.9219 99.9597 99.993 99.7694 99.9931 99.9525 99.9959 99.9783 99.9992 98.7383 99.9985 99.6499 99.9505 99.9931 99.9822 99.9997 99.1021
H-15	99.85110134548611	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( i , 1 ) ; dp . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 98.8524 99.986 98.1268 99.9887 99.9967 99.2874 99.9929 99.9734 99.9997 99.8462 99.9828 99.6125 99.9945 99.9793 99.9774 99.9998 99.3144
H-15	99.85083879743304	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , insert _ value ) ; dp . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 99.5915 99.993 98.4543 99.9884 98.7764 99.9722 99.9997 98.9253 99.9923 99.9764 99.9997 99.8855 99.9878 99.6688 99.9934 99.9787 99.9903 99.9998 99.4258
H-15	99.85001761014344	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; internal _ map . put ( j , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 98.5487 99.9965 99.9981 99.618 98.7912 99.995 99.9602 99.9946 99.9767 99.9995 99.5865 99.9832 99.298 99.9932 99.9835 99.9667 99.9997 98.6969
H-15	99.8471251370614	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 1 ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 99.6894 99.9905 99.1231 99.9955 99.9658 99.9952 99.9731 99.9996 99.563 99.9907 98.4237 99.9925 99.9958 98.1224
H-15	99.84647171585648	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 0 ) ; dp . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 99.5915 99.993 97.0431 99.9815 99.9968 99.3268 99.9932 99.9736 99.9997 99.8424 99.9824 99.7035 99.9941 99.9795 99.963 99.9998 99.2973
H-15	99.84579573006465	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) ; internal _ map . put ( j , internal _ map ) ; dp . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 98.4154 99.9958 99.9982 99.5443 98.6402 99.995 99.9561 99.9948 99.9752 99.9995 99.611 99.9874 99.3077 99.9938 99.9813 99.9651 99.9997 98.3838 99.9921 99.9757 99.9996 99.8559 99.9722 99.7451 99.9938 99.9815 99.9961 99.9998 99.4277
H-15	99.84564887152777	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; dp . put ( i , internal _ map ) ; dp . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 96.7613 99.994 99.9746 99.9996 99.6677 99.9815 99.5904 99.9941 99.9798 99.9733 99.9997 98.8147 99.9928 99.9794 99.9996 99.8593 99.9876 99.74 99.9945 99.9796 99.9964 99.9998 99.3039
H-15	99.84414785879629	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) + 1 ; internal _ map . put ( j , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 98.4154 99.9958 99.9982 98.9627 99.8848 99.6875 99.8891 99.974 99.0141 99.9465 99.9941 99.4191 99.9938 99.9573 99.9953 99.9778 99.9994 99.569 99.9944 99.331 99.9941 99.9807 99.9707 99.9997 99.2666
H-15	99.84058489118304	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; dp . put ( j , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 99.5915 99.993 99.2733 99.9943 99.9802 99.9633 99.9997 98.4812 99.9921 99.976 99.9997 97.7545 99.9943 99.6953 99.9937 99.9822 99.9956 99.9998 99.3651
H-15	99.83902380601415	if ( s . char CaMeL At ( j ) == t . char CaMeL At ( j ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 96.4998 99.9933 99.8537 99.9966 99.9996 100.0 99.7464 99.9526 99.943 99.9571 99.9847 99.9926 99.9983 99.9997 100.0 99.8978 99.9742 99.9565 99.9803 98.9834 99.9969 99.9101 99.9979 99.9454 99.9988 99.9855 99.9997 99.9874 99.9195 99.9923 99.9977 99.9706 99.9837 99.6847 99.9867 99.9738 99.9948 99.9423 99.9359 99.7796 99.9956 99.9753 99.9938 99.8903 99.9977 99.9584 99.9774 99.9733 99.6999 99.9917 98.3683
H-15	99.83776403356481	if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , internal _ map ) ; dp . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 97.7152 99.9769 99.9829 99.5265 99.9853 99.964 99.9946 99.9372 99.9261 99.7171 99.9953 99.9748 99.9925 99.9051 99.9975 99.9541 99.9898 99.9708 99.9438 99.9916 99.0605 99.9957 99.9631 99.9939 99.9742 99.9995 99.6004 99.9988 99.2121 99.9939 99.9806 99.9664 99.9997 98.4986 99.9921 99.9756 99.9996 99.8641 99.9981 99.7336 99.994 99.9808 99.9958 99.9998 99.3403
H-15	99.8351581280048	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ; internal _ map . put ( j , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 98.4154 99.9958 99.9982 98.9627 99.8848 99.6875 99.8891 99.974 99.5038 98.718 99.9949 99.9575 99.9953 99.9746 99.9995 99.5894 99.994 99.3037 99.9942 99.982 99.9726 99.9997 99.2691
H-15	99.83497051164215	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 98.7644 99.9725 99.995 99.9912 99.9895 99.9224 99.9985 99.9311 99.9947 99.9573 99.5411 99.9962 99.9979 99.9318 99.9815 99.9772 99.9851 99.9731 97.0337 98.5493
H-15	99.83448186910377	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer >> internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i - 1 ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 97.2184 99.8289 99.9936 99.9818 99.881 99.9227 99.9974 99.9606 99.9958 99.9716 99.6886 99.986 98.8217 99.9756 99.9951 99.9911 99.9898 99.9202 99.9984 99.9309 99.9956 99.9548 99.5602 99.9963 99.998 99.9206 99.9824 99.9808 99.9841 99.9726 99.9267 99.957 99.9927 98.0212
H-15	99.83234448702831	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i - 1 ) . get ( j ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 98.5487 99.9965 99.9981 98.8112 99.8939 99.7214 99.8534 99.9666 99.5269 98.332
H-15	99.83025653545673	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 1 ) ; dp . put ( i , 1 ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 99.0183 99.9954 99.9635 99.9948 99.9756 99.9996 99.5915 99.993 98.3811 99.9912 99.9951 99.3055 99.9929 99.9734 99.9997 99.8481 99.9829 98.1269 99.9954 99.9993 98.9489
H-15	99.82982900191327	if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; int insert _ value = dp . get ( i ) . get ( j ) + 1 ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 97.7152 99.9769 99.9829 99.5265 99.9853 99.964 99.9946 99.9372 99.9261 99.7171 99.9953 99.9748 99.9925 99.9051 99.9975 99.9541 99.9898 99.9708 99.9438 99.9916 98.7317 99.9736 99.9952 99.9914 99.9905 99.9228 99.9985 99.9357 99.9948 99.9576 99.6489 99.6948 99.9814 99.9434 99.975 99.9967 99.9219 99.9597 99.993 97.9261
H-15	99.8289043719952	if ( dp . contains CaMeL Key ( i ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; internal _ map . put ( j , 1 ) ; dp . put ( i , internal _ map ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 97.7152 99.9769 99.9829 99.5265 99.9853 99.964 99.9946 99.9372 99.9261 99.7171 99.9953 99.9748 99.9925 99.9051 99.9975 99.9541 99.9898 99.9708 99.9438 99.9916 99.0605 99.9957 99.9631 99.9939 99.9742 99.9995 99.6004 99.9988 98.3778 99.9922 99.9952 99.3218 99.9932 99.9775 99.9997 99.8462 99.9972 99.6509 99.9941 99.9797 99.9741 99.9998 99.2905
H-15	99.82494618941327	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ; Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 95.5411 99.9725 99.972 99.9962 99.9265 99.8673 99.8014 99.9953 99.9793 99.9862 99.9102 99.997 99.9547 99.9675 99.9685 99.7374 99.9831 98.7661
H-15	99.81224524456522	if ( dp . contains CaMeL Key ( i - 1 ) ) { if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 98.0747 99.9945 99.9142 99.9985 99.9465 99.9998 99.9891 99.9997 99.9874 99.9277 99.9939 99.9983 99.9844 99.9853 99.7452 99.9866 99.9718 99.9934 99.9438 99.9309 99.7868 99.9956 99.9744 99.993 99.9086 99.9977 99.9618 99.9929 99.9786 99.6894 99.9905 95.2178
H-15	99.75043487548828	if ( dp . contains CaMeL Key ( i - 1 ) ) { Map < Integer , Integer > internal _ map = dp . get ( i ) ;
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 99.5441 99.9865 99.9662 99.9945 99.9344 99.923 99.7225 99.9951 99.9744 99.9925 99.9138 99.9973 99.9542 99.9904 99.9737 99.7375 99.9904 93.9131
H-15	99.4829833984375	if ( dp . contains CaMeL Key ( i - 1 ) ) {
P-15	99.9986 99.8344 99.9974 99.935 99.9985 99.9832 99.9999 99.9839 99.8924 99.9915 99.9981 99.961 99.9802 92.7344
S-16	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;
T-16	return lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;
H-16	99.90426728219697	return 1 + Math . min ( lev@@ enshtein ( source , target . substring ( 1 ) ) , lev@@ enshtein ( source . substring ( 1 ) ) ) ;
P-16	98.6974 99.8946 98.5174 99.9989 99.9645 99.9963 98.9959 99.9908 99.8978 99.9204 99.6318 99.9526 99.9648 99.951 99.9966 99.9629 99.9476 99.6676 99.9484 99.5232 99.9895 99.9919 99.9808 99.9081 99.9851 99.9986 99.9885 99.9664 99.223 99.9636 99.9725 103.5749
H-16	99.90367126464844	return source . length ( ) ; } else { return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.4324 99.7857 99.5 99.9245 98.6998 99.983 99.8562 99.9132 99.7623 99.963 99.9984 99.9604 99.9361 99.9624 99.8553 99.7894 99.9527 99.9986 99.9826 99.9626 99.6413 99.9875 103.6022
H-16	99.87645089285714	return 1 + Math . min ( lev@@ enshtein ( source , target . substring ( 1 ) ) , lev@@ enshtein ( source . substring ( 1 ) , target ) ) ;
P-16	98.6974 99.8946 98.5174 99.9989 99.9645 99.9963 98.9959 99.9908 99.8978 99.9204 99.6318 99.9526 99.9648 99.951 99.9966 99.9629 99.9476 99.6676 99.9484 99.5232 99.9895 99.9919 99.9808 99.9081 99.9851 99.9986 99.9885 99.9664 99.3801 99.7517 99.0031 99.9764 99.9858 103.4717
H-16	99.87073863636364	return 1 + lev@@ enshtein ( source . substring ( 1 ) , lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 96.8112 99.9845 99.9819 99.9769 99.9647 99.9864 99.9968 99.9863 99.956 99.3969 99.6363 99.7214 99.9793 99.9991 99.983 99.9701 99.7319 99.9365 99.9915 103.5362
H-16	99.86900005918561	return source . length ( ) ; } else { return 1 + Math . min ( source . substring ( 1 ) , target . substring ( 1 ) ) ;
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.4324 99.7857 99.5 99.9245 99.351 99.999 99.9746 99.9974 97.8917 99.683 99.9416 99.9978 99.9522 99.8321 99.887 99.7683 99.955 99.9576 99.9995 99.9831 99.9534 99.8858 99.9571 103.5997
H-16	99.86783599853516	return source . substring ( 1 ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {
P-16	99.2336 99.9783 98.5904 99.9999 99.8094 99.826 99.3001 99.4962 99.8965 99.1263 99.9996 99.7967 99.9828 99.7338 99.9976 99.9995 99.9988 99.7175 99.9985 99.9686 99.835 99.9948 99.9744 99.9981 99.9998 99.9999 99.6242 99.9986 99.8905 99.9789 102.1497
H-16	99.86745954241071	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) , lev@@ enshtein ( source . substring ( 1 ) , target ) ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 99.8476 99.9395 99.9987 99.9827 99.9464 98.6558 97.8254 99.9848 99.9805 99.9739 99.9581 99.9857 99.998 99.9871 99.9483 99.5971 99.8802 99.4058 99.9535 99.9934 103.4408
H-16	99.86530618106617	return source . length ( ) ; } else { return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target ) ;
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.4324 99.7857 99.5 99.9245 98.6998 99.983 99.8562 99.9132 99.7623 99.963 99.9984 99.9604 99.9361 99.9624 99.8553 99.7894 99.9527 99.9986 99.9826 99.9626 98.7731 99.7792 99.6616 99.9876 103.5328
H-16	99.86309603987068	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target . substring ( 1 ) ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 99.8476 99.9395 99.9987 99.9827 99.9464 98.6558 99.7382 98.7633 99.9493 99.9989 99.9711 99.9595 99.5545 99.9941 102.6524
H-16	99.86062622070312	return target . length ( ) ; } else { return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;
P-16	97.6179 99.9025 99.5489 99.9998 99.9996 99.6279 99.6594 99.8653 99.4434 99.7826 99.5443 99.9247 98.641 99.9824 99.8527 99.9126 99.7631 99.9618 99.9984 99.9599 99.9331 99.9637 99.8532 99.7911 99.9496 99.9986 99.9827 99.9611 99.6388 99.9871 103.6154
H-16	99.85785097064394	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) , lev@@ enshtein ( source . substring ( 1 ) ) ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 99.8476 99.9395 99.9987 99.9827 99.9464 98.6558 97.8254 99.9848 99.9805 99.9739 99.9581 99.9857 99.998 99.9871 99.9483 98.8729 99.8029 99.9883 103.5544
H-16	99.85295336174242	return source . length ( ) ; } else { return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ; }
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.4324 99.7857 99.5 99.9245 98.6998 99.983 99.8562 99.9132 99.7623 99.963 99.9984 99.9604 99.9361 99.9624 99.8553 99.7894 99.9527 99.9986 99.9826 99.9626 99.6413 99.9875 98.3999 103.4323
H-16	99.85230210248162	return source . length ( ) ; } else { return 1 + Math . min ( lev@@ enshtein ( source , target . substring ( 1 ) ) , target ) ;
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.4324 99.7857 99.5 99.9245 99.351 99.999 99.9746 99.9974 99.3467 99.9908 99.9212 99.9382 99.8818 99.9708 99.9702 99.9749 99.9969 99.9668 99.9659 99.6711 99.9573 98.7303 98.7672 99.9304 103.5656
H-16	99.84971039870689	return 1 + Math . min ( lev@@ enshtein ( source , target . substring ( 1 ) ) , target . substring ( 1 ) ) ;
P-16	98.6974 99.8946 98.5174 99.9989 99.9645 99.9963 98.9959 99.9908 99.8978 99.9204 99.6318 99.9526 99.9648 99.951 99.9966 99.9629 99.9476 99.6676 99.9484 98.6942 99.6892 99.9793 99.9991 99.982 99.9674 99.8921 99.9848 102.6786
H-16	99.84883757560483	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target . substring ( 1 ) , target ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 99.8476 99.9395 99.9987 99.9827 99.9464 98.6558 99.7382 98.7633 99.9493 99.9989 99.9711 99.9595 98.9518 99.858 99.822 99.9939 102.8592
H-16	99.84724934895833	return source . substring ( 1 ) ; } else { return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;
P-16	99.2336 99.9783 98.5904 99.9999 99.8094 99.826 99.3001 99.4962 99.8965 99.3966 99.7882 99.5095 99.9182 98.6593 99.9891 99.9037 99.9141 99.6861 99.9576 99.9978 99.9666 99.943 99.944 99.8274 99.7559 99.9505 99.9989 99.9831 99.9681 99.6335 99.989 103.2711
H-16	99.84190368652344	return source . substring ( 1 ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 1 ) ) {
P-16	99.2336 99.9783 98.5904 99.9999 99.8094 99.826 99.3001 99.4962 99.8965 99.1263 99.9996 99.7967 99.9828 99.7338 99.9976 99.9995 99.9988 99.7175 99.9985 99.9686 99.835 99.9948 99.9744 99.9981 99.9998 99.9999 98.7806 99.998 99.8951 99.9776 102.1607
H-16	99.83936309814453	return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ; } else { return source . length ( ) ;
P-16	99.2336 99.9783 98.5328 99.9988 99.9895 99.9998 99.9991 99.9474 99.6935 99.9845 99.9091 99.9993 99.9997 99.9696 99.8038 99.9956 99.8705 99.9995 99.9993 99.9492 99.1889 99.8731 99.5463 99.7825 98.6611 99.9783 98.9109 99.9986 99.9989 99.8238 102.367
H-16	99.83726917613636	return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ; } else { return source . length ( ) ; }
P-16	99.2336 99.9783 98.5328 99.9988 99.9895 99.9998 99.9991 99.9474 99.6935 99.9845 99.9091 99.9993 99.9997 99.9696 99.8038 99.9956 99.8705 99.9995 99.9993 99.9492 99.1889 99.8731 99.5463 99.7825 98.6611 99.9783 98.9109 99.9986 99.9989 99.8238 99.2098 102.9274
H-16	99.83516570060483	return Math . min ( lev@@ enshtein ( source , target . substring ( 1 ) ) , lev@@ enshtein ( source . substring ( 1 ) ) ) ;
P-16	96.1331 99.9992 99.9761 99.998 99.0593 99.9885 99.9188 99.9181 99.5402 99.9343 99.9652 99.9444 99.9969 99.9615 99.9339 99.5772 99.9421 99.5691 99.9926 99.9868 99.9811 99.9258 99.9852 99.9986 99.9886 99.9698 99.2267 99.9592 99.9652 102.6771
H-16	99.83111213235294	return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ; } else { return 1 + source . length ( ) ;
P-16	99.2336 99.9783 98.5328 99.9988 99.9895 99.9998 99.9991 99.9474 99.6935 99.9845 99.9091 99.9993 99.9997 99.9696 99.8038 99.9956 99.8705 99.9995 99.9993 99.9492 99.1889 99.8731 99.5463 99.7825 99.5689 99.9024 97.6118 99.9597 99.5168 99.9995 99.9984 99.7626 102.8163
H-16	99.83008552320075	return 1 + source . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {
P-16	98.6974 99.8946 97.6991 99.9758 99.4795 99.9998 99.9994 99.6671 99.4408 99.8789 99.061 99.9996 99.8009 99.9827 99.7506 99.9975 99.9995 99.9987 99.7353 99.9987 99.9703 99.8457 99.9946 99.9787 99.9983 99.9998 99.9999 99.5926 99.9987 99.886 99.974 102.2199
H-16	99.82801055908203	return source . length ( ) ; } else { return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ;
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.4324 99.7857 98.7695 99.981 97.5139 99.9991 99.9907 99.9998 99.9987 99.926 99.7144 99.9805 99.8825 99.9986 99.9996 99.9602 99.7648 99.9949 99.8209 99.9995 99.9992 99.908 102.6087
H-16	99.8245620727539	return source . substring ( 1 ) ; } else if ( source . char CaMeL At ( 1 ) == target . char CaMeL At ( 0 ) ) {
P-16	99.2336 99.9783 98.5904 99.9999 99.8094 99.826 99.3001 99.4962 99.8965 99.1263 99.9996 99.7967 99.9828 99.7338 99.9976 99.9995 99.9988 98.5276 99.9984 99.9706 99.8355 99.995 99.9721 99.9981 99.9998 99.9999 99.4189 99.9986 99.8905 99.9789 102.1593
H-16	99.82429643110795	return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ;
P-16	99.2336 99.9783 98.5328 99.9988 99.9895 99.9998 99.9991 99.9474 99.6935 99.9845 99.9091 99.9993 99.9997 99.9696 99.8038 99.9956 99.8705 99.9995 99.9993 99.9492 99.4041
H-16	99.82405229048295	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 99.8476 99.9395 99.9987 99.9827 99.9464 99.6834 99.993 99.6597
H-16	99.8193780307112	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 , target . substring ( 1 ) ) ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 99.8476 99.9395 99.9987 99.9827 96.2646 99.6375 99.9772 99.9857 99.9983 99.9338 99.8826 99.6591 99.9479 99.9912 102.6371
H-16	99.81588179976852	return source . length ( ) ; } else { return 1 + lev@@ enshtein ( source . substring ( 1 ) , target ) ;
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.4324 99.7857 99.5 99.9245 98.6998 99.983 99.8562 99.9132 99.7623 99.963 99.9984 99.9604 99.9361 99.9624 99.8553 98.3149 99.9685 102.7448
H-16	99.81586456298828	return source . substring ( 1 ) ; } else if ( source . char CaMeL At ( 1 ) == target . char CaMeL At ( 1 ) ) {
P-16	99.2336 99.9783 98.5904 99.9999 99.8094 99.826 99.3001 99.4962 99.8965 99.1263 99.9996 99.7967 99.9828 99.7338 99.9976 99.9995 99.9988 98.5276 99.9984 99.9706 99.8355 99.995 99.9721 99.9981 99.9998 99.9999 99.1281 99.9979 99.8952 99.9776 102.1689
H-16	99.81409085181451	return source . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.0831 99.9996 99.785 99.9825 99.7482 99.9974 99.9995 99.9986 99.7315 99.9989 99.9716 99.8518 99.9943 99.9781 99.9982 99.9998 99.9998 99.5993 99.9987 99.8849 99.9766 99.1914
H-16	99.8095932006836	return target . substring ( 1 ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {
P-16	97.6179 99.9025 98.4117 99.9998 99.7626 99.8251 99.3668 99.4867 99.8939 99.1224 99.9996 99.798 99.9808 99.7343 99.9976 99.9995 99.9989 99.7156 99.9985 99.9689 99.8381 99.995 99.9728 99.9981 99.9998 99.9999 99.6176 99.9986 99.8909 99.9789 102.1589
H-16	99.80820904356061	return 1 + source . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 1 ) ) {
P-16	98.6974 99.8946 97.6991 99.9758 99.4795 99.9998 99.9994 99.6671 99.4408 99.8789 99.061 99.9996 99.8009 99.9827 99.7506 99.9975 99.9995 99.9987 99.7353 99.9987 99.9703 99.8457 99.9946 99.9787 99.9983 99.9998 99.9999 98.8546 99.9982 99.8919 99.9726 102.2324
H-16	99.80107116699219	return source . substring ( 1 ) ; } else if ( source . char CaMeL At ( 0 ) == source . char CaMeL At ( 0 ) ) {
P-16	99.2336 99.9783 98.5904 99.9999 99.8094 99.826 99.3001 99.4962 99.8965 99.1263 99.9996 99.7967 99.9828 99.7338 99.9976 99.9995 99.9988 99.7175 99.9985 99.9686 97.691 99.995 99.9745 99.998 99.9998 99.9999 99.6332 99.9986 99.8892 99.9778 102.1502
H-16	99.79882049560547	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target . substring ( 1 ) ) ; } else {
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 99.8476 99.9395 99.9987 99.9827 99.9464 98.6558 99.7382 98.7633 99.9493 99.9989 99.9711 99.9595 99.5545 99.9941 98.7063 99.8846 99.6343 101.9596
H-16	99.79367244944854	return source . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) { return 1 ;
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.0831 99.9996 99.785 99.9825 99.7482 99.9974 99.9995 99.9986 99.7315 99.9989 99.9716 99.8518 99.9943 99.9781 99.9982 99.9998 99.9998 99.5993 99.9987 99.8849 99.9766 99.3801 99.1425 97.8975 101.5192
H-16	99.79010206653226	return source . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 1 ) ) {
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.0831 99.9996 99.785 99.9825 99.7482 99.9974 99.9995 99.9986 99.7315 99.9989 99.9716 99.8518 99.9943 99.9781 99.9982 99.9998 99.9998 98.8425 99.9982 99.8891 99.9752 99.2025
H-16	99.782421875	return source . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) { return 1 ; }
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.0831 99.9996 99.785 99.9825 99.7482 99.9974 99.9995 99.9986 99.7315 99.9989 99.9716 99.8518 99.9943 99.9781 99.9982 99.9998 99.9998 99.5993 99.9987 99.8849 99.9766 99.3801 99.1425 97.8975 99.7837 101.1354
H-16	99.77957589285714	return 1 + Math . min ( Math . min ( lev@@ enshtein ( source , target . substring ( 1 ) ) , lev@@ enshtein ( source . substring ( 1 ) ,
P-16	98.6974 99.8946 98.5174 99.9989 99.9645 99.9963 98.9303 99.9977 99.9887 99.9955 99.4988 99.9912 99.902 99.9456 99.9073 99.9738 99.9815 99.9733 99.9958 99.9746 99.9721 99.8201 99.9396 99.4673 99.9911 99.9914 99.9793 99.9477 99.9875 99.9992 99.9881 99.9759 99.0769 99.1461
H-16	99.77693684895833	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target ) ; } else {
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 99.8476 99.9395 99.9987 99.9827 99.9464 98.6558 99.7382 99.6227 99.9919 98.6906 99.8515 99.5288 101.1047
H-16	99.77618049172794	return 1 + Math . min ( lev@@ enshtein ( source , target . substring ( 1 ) ) , lev@@ enshtein ( source . substring ( 1 ) ) ) ; }
P-16	98.6974 99.8946 98.5174 99.9989 99.9645 99.9963 98.9959 99.9908 99.8978 99.9204 99.6318 99.9526 99.9648 99.951 99.9966 99.9629 99.9476 99.6676 99.9484 99.5232 99.9895 99.9919 99.9808 99.9081 99.9851 99.9986 99.9885 99.9664 99.223 99.9636 99.9725 98.5 100.6244
H-16	99.77466692243304	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ; } else { return 1 ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 99.8476 99.9395 99.9987 99.9827 99.9464 99.6834 99.993 98.7399 99.8957 99.6124 99.771 99.788 97.3207 102.0937
H-16	99.77001953125	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 99.8476 99.9395 99.9987 99.9827 99.9464 98.6558 99.7382 99.6227 99.9919 99.679
H-16	99.76932648689517	return target . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {
P-16	97.6179 99.9025 99.5489 99.9998 99.9996 99.6279 99.6594 99.8653 99.0642 99.9996 99.7845 99.9808 99.7435 99.9975 99.9995 99.9987 99.731 99.9988 99.972 99.8553 99.9945 99.9775 99.9983 99.9998 99.9998 99.5929 99.9987 99.8857 99.9765 99.2014
H-16	99.76921735491071	return source . substring ( 1 ) . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) )
P-16	99.2336 99.9783 98.5904 99.9999 99.8094 99.826 99.0206 99.6008 99.9989 99.9988 99.863 99.5773 99.873 99.0062 99.9996 99.8051 99.9845 99.7237 99.9976 99.9995 99.9984 99.7279 99.9987 99.9693 99.8171 99.9946 99.9731 99.998 99.9998 99.9998 99.6275 99.9987 99.8716 99.1838
H-16	99.76794782366072	return source . length ( ) ; } else { return 1 + Math . min ( Math . min ( lev@@ enshtein ( source , target . substring ( 1 ) ) ,
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.4324 99.7857 99.5 99.9245 99.351 99.999 99.9746 99.9974 98.7501 99.9975 99.9883 99.9959 99.6122 99.9917 99.876 99.9466 99.9461 99.9786 99.9842 99.9797 99.9963 99.9747 99.9779 99.8256 99.9528 98.6717
H-16	99.76671181955645	return source . length ( ) ; } else if ( source . char CaMeL At ( 1 ) == target . char CaMeL At ( 0 ) ) {
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.0831 99.9996 99.785 99.9825 99.7482 99.9974 99.9995 99.9986 98.4814 99.9985 99.9725 99.8458 99.9945 99.9763 99.9983 99.9998 99.9998 99.3791 99.9987 99.8841 99.9768 99.2008
H-16	99.76177978515625	return lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;
P-16	96.9737 99.9822 99.9679 99.9056 99.7048 99.9735 99.9987 99.9617 99.9115 99.9742 99.9019 99.926 99.9399 99.9988 99.9811 99.9465 99.769 99.9958 99.5453
H-16	99.76089969758064	return source . length ( ) ; } else if ( source . char CaMeL At ( 1 ) == target . char CaMeL At ( 1 ) ) {
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.0831 99.9996 99.785 99.9825 99.7482 99.9974 99.9995 99.9986 98.4814 99.9985 99.9725 99.8458 99.9945 99.9763 99.9983 99.9998 99.9998 99.1869 99.9981 99.8883 99.9753 99.2104
H-16	99.75743447580645	return source . length ( ) ; } else { return 1 + Math . min ( lev@@ enshtein ( source , target . substring ( 1 ) ) ,
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.4324 99.7857 99.5 99.9245 99.351 99.999 99.9746 99.9974 99.3467 99.9908 99.9212 99.9382 99.8818 99.9708 99.9702 99.9749 99.9969 99.9668 99.9659 99.6711 99.9573 98.4956
H-16	99.75307025331439	return 1 + Math . min ( Math . min ( lev@@ enshtein ( source , target . substring ( 1 ) ) , target . substring ( 1 ) ) ,
P-16	98.6974 99.8946 98.5174 99.9989 99.9645 99.9963 98.9303 99.9977 99.9887 99.9955 99.4988 99.9912 99.902 99.9456 99.9073 99.9738 99.9815 99.9733 99.9958 99.9746 99.9721 99.8201 99.9396 98.8487 99.9115 99.9846 99.9993 99.9854 99.9775 99.8969 99.8186 98.6942
H-16	99.74845640120968	return 1 + Math . min ( lev@@ enshtein ( source , target . substring ( 1 ) ) , lev@@ enshtein ( source . substring ( 1 ) ,
P-16	98.6974 99.8946 98.5174 99.9989 99.9645 99.9963 98.9959 99.9908 99.8978 99.9204 99.6318 99.9526 99.9648 99.951 99.9966 99.9629 99.9476 99.6676 99.9484 99.5232 99.9895 99.9919 99.9808 99.9081 99.9851 99.9986 99.9885 99.9664 99.3801 98.7153
H-16	99.74750114889706	return 1 + lev@@ enshtein ( source . substring ( 1 ) , lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ) ; }
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 96.8112 99.9845 99.9819 99.9769 99.9647 99.9864 99.9968 99.9863 99.956 99.3969 99.6363 99.7214 99.9793 99.9991 99.983 99.9701 99.7319 99.9365 99.9915 98.624 100.5927
H-16	99.74720348011364	return source . is CaMeL Empty ( ) ? source . length ( ) : source . length ( ) ;
P-16	99.2336 99.9783 98.5328 99.9988 99.9895 99.9998 99.9991 99.9474 98.0353 99.9836 99.888 99.9987 99.9997 99.9681 99.8093 99.9957 99.8625 99.9994 99.9994 99.9478 99.394
H-16	99.74598349294355	return target . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 1 ) ) {
P-16	97.6179 99.9025 99.5489 99.9998 99.9996 99.6279 99.6594 99.8653 99.0642 99.9996 99.7845 99.9808 99.7435 99.9975 99.9995 99.9987 99.731 99.9988 99.972 99.8553 99.9945 99.9775 99.9983 99.9998 99.9998 98.856 99.9981 99.8899 99.9751 99.2128
H-16	99.74095153808594	return source . substring ( 1 ) ; } else { return 1 + Math . min ( lev@@ enshtein ( source , target . substring ( 1 ) ) ,
P-16	99.2336 99.9783 98.5904 99.9999 99.8094 99.826 99.3001 99.4962 99.8965 99.3966 99.7882 99.5095 99.9182 99.4098 99.999 99.9737 99.9975 99.3463 99.9925 99.8883 99.9408 99.9125 99.9729 99.9734 99.9773 99.9961 99.9777 99.9717 99.6797 99.9554 99.1254
H-16	99.73997448336694	return source . length ( ) ; } else if ( target . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.0831 99.9996 97.5209 99.9842 99.6891 99.9965 99.9995 99.9983 99.7532 99.9988 99.973 99.8454 99.9943 99.9804 99.9983 99.9998 99.9998 99.6089 99.9987 99.8837 99.9773 99.1891
H-16	99.73861202116936	return source . length ( ) ; } else if ( source . char CaMeL At ( 0 ) == source . char CaMeL At ( 0 ) ) {
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.0831 99.9996 99.785 99.9825 99.7482 99.9974 99.9995 99.9986 99.7315 99.9989 99.9716 97.5119 99.9943 99.9752 99.9983 99.9998 99.9999 99.6044 99.9988 99.8824 99.9751 99.1935
H-16	99.735458984375	return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ; } else {
P-16	99.2336 99.9783 98.5328 99.9988 99.9895 99.9998 99.9991 99.9474 99.6935 99.9845 99.9091 99.9993 99.9997 99.9696 99.8038 99.9956 99.8705 99.9995 99.9993 99.9492 99.1889 99.8731 99.5463 98.0476
H-16	99.73455403645833	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target . substring ( 1 ) ) ; }
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 99.8476 99.9395 99.9987 99.9827 99.9464 98.6558 99.7382 98.7633 99.9493 99.9989 99.9711 99.9595 99.5545 99.9941 98.7063 99.9529
H-16	99.73367442255434	return 1 + Math . min ( source . substring ( 1 ) , target . substring ( 1 ) ) ;
P-16	98.6974 99.8946 98.5174 99.9989 99.9645 99.9963 98.3938 99.8826 99.948 99.9968 99.9532 99.7688 99.8687 99.7963 99.973 99.9494 99.9993 99.9838 99.9474 99.8611 99.9848 99.6205
H-16	99.73304578993056	return 1 ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {
P-16	98.6974 97.6467 99.6679 99.8362 99.3649 99.9995 99.7961 99.9761 99.7291 99.9977 99.9995 99.9991 99.743 99.9988 99.9725 99.8678 99.9947 99.9759 99.9984 99.9998 99.9999 99.5988 99.9987 99.8915 99.9773 99.1873
H-16	99.7189697265625	return 1 + Math . min ( lev@@ enshtein ( source , target . substring ( 1 ) ) , target . substring ( 1 ) ) ; }
P-16	98.6974 99.8946 98.5174 99.9989 99.9645 99.9963 98.9959 99.9908 99.8978 99.9204 99.6318 99.9526 99.9648 99.951 99.9966 99.9629 99.9476 99.6676 99.9484 98.6942 99.6892 99.9793 99.9991 99.982 99.9674 99.8921 99.9848 98.6337 99.9723
H-16	99.717529296875	return source . length ( ) ? target . length ( ) : source . length ( ) ;
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 98.4218 99.1281 99.9814 99.6554 99.9994 99.9997 99.9663 99.7901 99.9947 99.7827 99.9995 99.9993 99.9489 99.3693
H-16	99.71302208533653	return 1 + lev@@ enshtein ( source . substring ( 1 ) , lev@@ enshtein ( source . substring ( 1 ) ) ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 96.8112 99.9845 99.9819 99.9769 99.9647 99.9864 99.9968 99.9863 99.956 99.1869 99.8082 99.9881 99.7036
H-16	99.71270197088069	return target . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ;
P-16	97.6179 99.9025 97.7081 99.9989 99.9904 99.9998 99.9989 99.9495 99.7163 99.9864 99.9342 99.9993 99.9997 99.9695 99.7928 99.9945 99.8648 99.9996 99.9993 99.9478 99.4315
H-16	99.7123828125	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ; } else {
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 99.8476 99.9395 99.9987 99.9827 99.9464 99.6834 99.993 98.7399 99.8957 99.6124 98.092
H-16	99.7119140625	return source . is CaMeL Empty ( ) ? target . length ( ) : target . length ( ) ;
P-16	99.2336 99.9783 98.5328 99.9988 99.9895 99.9998 99.9991 99.9474 99.6935 99.9845 99.9091 99.9993 99.9997 99.9696 97.3808 99.9899 99.8489 99.9999 99.9994 99.9497 99.3812
H-16	99.71189722521552	return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ; } else { return 1 ; }
P-16	99.2336 99.9783 98.5328 99.9988 99.9895 99.9998 99.9991 99.9474 99.6935 99.9845 99.9091 99.9993 99.9997 99.9696 99.8038 99.9956 99.8705 99.9995 99.9993 99.9492 99.1889 99.8731 99.5463 99.7825 99.5689 97.5874 99.4894 99.8778
H-16	99.70924974524456	return source . is CaMeL Empty ( ) ? target . length ( ) : source . substring ( 1 ) ;
P-16	99.2336 99.9783 98.5328 99.9988 99.9895 99.9998 99.9991 99.9474 99.6935 99.9845 99.9091 99.9993 99.9997 99.9696 99.8038 99.9956 97.5648 99.9999 99.8408 99.7782 99.7951 99.422
H-16	99.70544885706019	return 1 ; } else if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 1 ) ) {
P-16	98.6974 97.6467 99.6679 99.8362 99.3649 99.9995 99.7961 99.9761 99.7291 99.9977 99.9995 99.9991 99.743 99.9988 99.9725 99.8678 99.9947 99.9759 99.9984 99.9998 99.9999 98.8417 99.9981 99.8959 99.9761 99.1969
H-16	99.70232543945312	return source . length ( ) ? source . length ( ) : source . length ( ) ;
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 98.4218 98.8687 99.9842 99.6115 99.9991 99.9997 99.9659 99.7903 99.9946 99.7846 99.9994 99.9993 99.9466 99.3667
H-16	99.69769965277777	return lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target . substring ( 1 ) ) ;
P-16	96.9737 99.9822 99.9679 99.9056 99.7048 99.9735 99.9987 99.9617 99.9115 99.9742 99.9019 99.926 99.9399 99.9988 99.9811 99.9465 98.3537 99.6722 98.9117 99.9352 99.999 99.969 99.9447 99.5441 99.9964 99.5868
H-16	99.695556640625	return source . substring ( 1 ) . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ;
P-16	99.2336 99.9783 98.5904 99.9999 99.8094 99.826 99.0206 97.3476 99.9983 99.9722 99.9997 99.9988 99.9477 99.5919 99.9849 99.7745 99.9998 99.9997 99.9673 99.7866 99.9922 99.7004 99.9999 99.9993 99.9546 99.429
H-16	99.68946748621323	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 98.0121 99.9789 99.6519
H-16	99.68799889605978	return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ; }
P-16	99.2336 99.9783 98.5328 99.9988 99.9895 99.9998 99.9991 99.9474 99.6935 99.9845 99.9091 99.9993 99.9997 99.9696 99.8038 99.9956 99.8705 99.9995 99.9993 99.9492 99.1889 96.9045
H-16	99.68675740559895	return 1 + 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;
P-16	98.6974 99.8946 96.8238 99.6628 99.2971 99.9849 99.8987 99.9136 99.8596 99.9659 99.998 99.9619 99.9296 99.9252 99.8321 99.7158 99.9384 99.9985 99.9824 99.937 99.6708 99.9907 99.7259
H-16	99.68663441051136	return lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) , target ) ;
P-16	96.9737 99.9822 99.9679 99.9056 99.7048 99.9735 99.9987 99.9617 99.9115 99.9742 99.9019 99.926 99.9399 99.9988 99.9811 99.9465 98.3537 99.6722 99.5547 99.9951 99.605
H-16	99.67960981889205	return lev@@ enshtein ( source , target . substring ( 1 ) , target . substring ( 1 ) ) ;
P-16	96.9737 99.9822 99.9679 99.9056 98.498 99.7914 99.831 99.8432 99.9974 99.9348 99.935 99.8323 99.7546 99.6919 99.9499 99.9987 99.9794 99.9442 99.6684 99.9963 99.5979
H-16	99.67642066592262	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . length ( ) ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 99.8476 96.7884 99.9999 99.9987 99.9231 99.9867 99.5824
H-16	99.67496744791667	return 1 + lev@@ enshtein ( source , target . substring ( 1 ) , target . substring ( 1 ) ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 97.5571 99.8294 99.7551 99.8587 99.9972 99.9465 99.946 99.5272 99.691 99.4215 99.9529 99.9986 99.978 99.9345 99.6023 99.9937 99.6872
H-16	99.66857421875	return source . is CaMeL Empty ( ) ? source . length ( ) : source . length ( ) ; } else {
P-16	99.2336 99.9783 98.5328 99.9988 99.9895 99.9998 99.9991 99.9474 98.0353 99.9836 99.888 99.9987 99.9997 99.9681 99.8093 99.9957 99.8625 99.9994 99.9994 99.9478 99.2014 99.8744 99.5504 98.044
H-16	99.66595458984375	return source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ; } else
P-16	99.2336 99.9783 98.5328 99.9988 99.9895 99.9998 99.9991 99.9474 99.6935 99.9845 99.9091 99.9993 99.9997 99.9696 99.8038 99.9956 99.8705 99.9995 99.9993 99.9492 99.1889 99.8731 96.1905
H-16	99.6655782063802	return 1 + source . is CaMeL Empty ( ) ? target . length ( ) : source . length ( ) ;
P-16	98.6974 99.8946 97.6991 99.9758 97.3815 99.9978 99.985 99.9998 99.9991 99.9286 99.6324 99.9837 99.8653 99.9993 99.9997 99.9668 99.7832 99.9942 99.8459 99.9994 99.9993 99.9435 99.5249
H-16	99.66373046875	return source . is CaMeL Empty ( ) ? target . length ( ) : source . char CaMeL At ( 0 ) ;
P-16	99.2336 99.9783 98.5328 99.9988 99.9895 99.9998 99.9991 99.9474 99.6935 99.9845 99.9091 99.9993 99.9997 99.9696 99.8038 99.9956 95.7801 99.9993 99.9995 99.9999 99.6217 99.9981 99.8212 99.4617
H-16	99.66162109375	return lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ; } else {
P-16	96.9737 99.9822 99.9679 99.9056 99.7048 99.9735 99.9987 99.9617 99.9115 99.9742 99.9019 99.926 99.9399 99.9988 99.9811 99.9465 99.769 99.9958 98.9814 99.8931 99.5985 98.0539
H-16	99.65929645040761	return source . is CaMeL Empty ( ) ? target . substring ( 1 ) : source . length ( ) ;
P-16	99.2336 99.9783 98.5328 99.9988 99.9895 99.9998 99.9991 99.9474 99.6935 99.9845 97.0605 99.9998 99.7161 99.8521 99.864 99.4991 99.9936 99.6066 99.9998 99.999 99.9503 99.3879
H-16	99.65825452302632	return source . length ( ) ; } else { return source . length ( ) ; }
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.4324 99.7857 98.7695 99.981 99.1093 99.9991 99.9993 99.7424 99.3097 99.9105
H-16	99.65496271306819	if ( source . char CaMeL At ( 0 ) == target . char CaMeL At ( 0 ) ) {
P-16	99.9995 99.3898 99.9481 99.4671 99.9984 99.9996 99.9995 99.7203 99.9979 99.9747 99.8867 99.9918 99.9571 99.9987 99.9998 99.9999 99.5937 99.9984 99.9112 99.9411 98.7805
H-16	99.65474269701087	return 1 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ; }
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 99.8708 99.8476 99.9395 99.9987 99.9827 99.9464 99.6834 99.993 98.7399 96.8496
H-16	99.65434126420455	return 1 + lev@@ enshtein ( source . substring ( 1 ) , source . substring ( 1 ) ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 99.8813 99.9689 99.9982 99.9615 99.9135 99.9613 96.0639 99.9251 99.9402 99.9988 99.979 99.9453 99.673 99.9921 99.6711
H-16	99.652587890625	return target . length ( ) ? target . length ( ) : source . length ( ) ;
P-16	97.6179 99.9025 99.5489 99.9998 99.9996 98.3811 99.1899 99.9842 99.6591 99.9995 99.9997 99.9659 99.782 99.9936 99.8052 99.9996 99.9993 99.9489 99.3976
H-16	99.65242143110795	return 0 + lev@@ enshtein ( source . substring ( 1 ) , target . substring ( 1 ) ) ;
P-16	95.4865 99.7203 98.9396 99.9857 99.8324 99.9123 99.8794 99.9684 99.9982 99.961 99.9105 99.964 99.8723 99.8643 99.9368 99.9987 99.9828 99.9458 99.6771 99.9905 99.6491
H-16	99.64347330729167	return source . length ( ) ; } else { return source . length ( ) ;
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.4324 99.7857 98.7695 99.981 99.1093 99.9991 99.9993 99.7424 99.2959
H-16	99.63812546502976	return Math . min ( source . substring ( 1 ) , target . substring ( 1 ) ) ;
P-16	96.1331 99.9992 99.9761 99.998 98.0457 99.881 99.9532 99.9971 99.9544 99.7011 99.8645 99.8016 99.9729 99.9406 99.9992 99.9823 99.9477 99.8722 99.9865 99.5169
H-16	99.63262648809524	return source . length ( ) ? target . length ( ) : source . substring ( 1 ) ;
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 98.4218 99.1281 99.9814 99.6554 99.9994 99.9997 99.9663 99.7901 99.9947 98.1426 99.9999 99.8737 99.8132 99.773 99.4317
H-16	99.6318603515625	return target . length ( ) ? source . length ( ) : source . length ( ) ;
P-16	97.6179 99.9025 99.5489 99.9998 99.9996 98.3811 98.772 99.9799 99.6621 99.9991 99.9997 99.9657 99.7882 99.994 99.8036 99.9995 99.9993 99.9484 99.3987
H-16	99.61734619140626	return source . length ( ) ; } else { return 1 + source . length ( ) ;
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.4324 99.7857 99.5 99.9245 97.7061 99.9645 99.3172 99.9997 99.9989 99.6719 99.5784
H-16	99.60268040707237	return 1 + lev@@ enshtein ( source , target . substring ( 1 ) , target ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 97.5571 99.8294 99.7551 99.8587 99.9972 99.9465 99.946 99.5272 99.691 99.1515 99.9866 99.6821
H-16	99.59205537683823	return 1 + lev@@ enshtein ( source , target . substring ( 1 ) ) ;
P-16	98.6974 99.8946 99.3082 99.986 99.842 99.9166 97.5571 99.8294 99.7551 99.8587 99.9972 99.9465 99.946 98.9982 99.9882 99.6663
H-16	99.5291259765625	return source . length ( ) ; } else { return 1 ; }
P-16	99.2336 99.9783 99.2256 99.9995 99.9995 99.6062 99.6758 99.8717 99.4324 99.7857 99.5 97.3284 99.5507 99.8718
S-17	longest = length + 1 ;
T-17	longest = Math . max ( longest , length + 1 ) ;
H-17	99.87896728515625	longest = length + 1 ;
P-17	99.9202 99.809 99.9436 99.9706 99.9946 99.7006
H-17	99.73384602864583	longest = length + 1 ; } i ++ ; }
P-17	99.9202 99.809 99.9436 99.9706 99.9946 98.4823 98.8581 99.8689 99.9946 98.9626 101.1874
H-17	99.67630004882812	longest = length + 1 ; } } i ++ ;
P-17	99.9202 99.809 99.9436 99.9706 99.9946 98.4823 97.6645 98.2229 99.8754 99.9947 102.4235
H-17	99.64198996803977	longest = length + 1 ; } i ++ ;
P-17	99.9202 99.809 99.9436 99.9706 99.9946 98.4823 98.8581 99.8689 99.9946 99.4056
H-17	99.63536580403645	longest = length + 1 ; } } return longest ;
P-17	99.9202 99.809 99.9436 99.9706 99.9946 98.4823 97.6645 98.5173 99.2118 99.527 102.7695
H-17	99.60477701822917	longest = length + 1 ; } } return length ;
P-17	99.9202 99.809 99.9436 99.9706 99.9946 98.4823 97.6645 98.5173 98.8343 99.5758 102.731
H-17	99.5893783569336	longest = length + 1 ; }
P-17	99.9202 99.809 99.9436 99.9706 99.9946 98.4823 98.7805
H-17	99.41544966264205	longest = length + 1 ; } i -- ;
P-17	99.9202 99.809 99.9436 99.9706 99.9946 98.4823 98.8581 97.3447 99.994 99.4386
H-17	99.32776988636364	longest = length + 1 ; } return longest ;
P-17	99.9202 99.809 99.9436 99.9706 99.9946 98.4823 96.3836 98.945 99.5856 99.7567
H-17	99.32156032986111	longest = length + 1 ; } }
P-17	99.9202 99.809 99.9436 99.9706 99.9946 98.4823 97.6645 98.295
H-17	99.31553955078125	longest = length + 1 ; } else {
P-17	99.9202 99.809 99.9436 99.9706 99.9946 98.4823 97.7829 99.631 97.807
H-17	99.31211159446023	longest = length + 1 ; } return length ;
P-17	99.9202 99.809 99.9436 99.9706 99.9946 98.4823 96.3836 99.007 99.4905 99.6176
H-17	99.30862862723214	longest = length - 1 ;
P-17	99.9202 99.809 96.0521 99.9729 99.9755 99.6164
H-17	99.30678488991477	longest = length - 1 ; } i ++ ;
P-17	99.9202 99.809 96.0521 99.9729 99.9755 98.7182 98.8597 99.8752 99.9941 99.3835
H-17	99.29290771484375	longest = longest + 1 ;
P-17	99.9202 95.7875 99.8434 99.9684 99.9958 99.7209
H-17	99.27372436523437	longest = length + 1 ; } break ;
P-17	99.9202 99.809 99.9436 99.9706 99.9946 98.4823 95.3639 99.9598 99.479
H-17	99.27277221679688	longest ++ ; longest = length + 1 ;
P-17	96.8842 99.9834 96.7018 99.8534 99.8045 99.9601 99.9727 99.9937 99.7599
H-17	99.253076171875	longest = length + 1 ; i ++ ;
P-17	99.9202 99.809 99.9436 99.9706 99.9946 93.9064 99.8472 99.9932 99.3317
H-17	99.25203450520833	longest = length + 1 + 1 ;
P-17	99.9202 99.809 99.9436 99.9706 94.3061 99.7732 99.9963 99.7351
H-17	99.2444180575284	longest = longest + 1 ; } i ++ ;
P-17	99.9202 95.7875 99.8434 99.9684 99.9958 98.4288 98.6462 99.8706 99.995 99.4187
H-17	99.22884521484374	longest = length + 1 ; break ; }
P-17	99.9202 99.809 99.9436 99.9706 99.9946 94.2713 99.9891 99.3921 99.1838
H-17	99.21689675071023	longest = length ; longest = length + 1 ;
P-17	99.9202 99.809 95.8314 96.9265 99.8516 99.6025 99.9344 99.9676 99.9932 99.7352
H-17	99.20991654829545	longest = length + 1 ; i ++ ; }
P-17	99.9202 99.809 99.9436 99.9706 99.9946 93.9064 99.8472 99.9932 99.1651 98.9449
H-17	99.20871310763889	longest = length + 1 ; break ;
P-17	99.9202 99.809 99.9436 99.9706 99.9946 94.2713 99.9891 99.1658
H-17	99.1978759765625	longest = + 1 ;
P-17	99.9202 95.8267 99.9459 99.9971 99.683
H-17	99.1953857421875	longest = + 1 ; } i ++ ;
P-17	99.9202 95.8267 99.9459 99.9971 98.468 98.6977 99.8703 99.9954 99.4181
H-17	99.17149135044643	longest = i + 1 ;
P-17	99.9202 95.1567 99.6458 99.9727 99.995 99.6958
H-17	99.16527099609375	longest = - 1 ; } i ++ ;
P-17	99.9202 95.3641 99.9557 99.9924 98.6425 98.6864 99.8787 99.9956 99.4029
H-17	99.16047886439732	longest = last + 1 ;
P-17	99.9202 95.0836 99.6173 99.9762 99.9955 99.7163
H-17	99.14100477430556	longest = length + 1 ; } else
P-17	99.9202 99.809 99.9436 99.9706 99.9946 98.4823 97.7829 96.5516
H-17	99.13680594308036	longest = size + 1 ;
P-17	99.9202 94.5815 99.9759 99.962 99.9941 99.7097
H-17	99.13050842285156	longest = = length + 1 ;
P-17	99.9202 94.1365 99.623 99.8945 99.972 99.997 99.6867
H-17	99.12955474853516	longest = length - 1 ; }
P-17	99.9202 99.809 96.0521 99.9729 99.9755 98.7182 98.7743
H-17	99.11374240451389	longest = length + 1 - 1 ;
P-17	99.9202 99.809 99.9436 99.9706 93.01 99.8831 99.9956 99.6774
H-17	99.11138916015625	longest = length + - 1 ;
P-17	99.9202 99.809 99.9436 93.744 99.9661 99.9963 99.6976
H-17	99.1104736328125	longest = - 1 ;
P-17	99.9202 95.3641 99.9557 99.9924 99.6162
H-17	99.09636688232422	longest = longest + 1 ; }
P-17	99.9202 95.7875 99.8434 99.9684 99.9958 98.4288 99.0126
H-17	99.08304850260417	longest = length + longest + 1 ;
P-17	99.9202 99.809 99.9436 94.3384 98.2352 99.9211 99.9961 99.7696
H-17	99.07831573486328	longest ++ ;
P-17	96.8842 99.9834 99.6315
H-17	99.07489691840277	longest = length ; } i ++ ;
P-17	99.9202 99.809 95.8314 98.7002 98.3425 99.8681 99.9943 99.3941
H-17	99.07262311662946	longest = length + $NUMBER$ ;
P-17	99.9202 99.809 99.9436 94.3366 99.9821 99.7026
H-17	99.0557861328125	this . longest = length + 1 ;
P-17	99.9805 99.0764 99.9357 99.6995 99.9059 99.9637 99.9941 99.6421
H-17	99.05426025390625	longest += length + 1 ;
P-17	95.9284 98.8809 99.168 99.9462 99.9958 99.6463
H-17	99.05321502685547	longest ++ ; } i ++ ;
P-17	96.8842 99.9834 98.5349 97.9237 99.9011 99.9965 99.3878
H-17	99.04012625558036	longest = length + longest ;
P-17	99.9202 99.809 99.9436 94.3384 99.7136 99.7419
H-17	98.99812316894531	longest = i + 1 ; }
P-17	99.9202 95.1567 99.6458 99.9727 99.995 98.5106 98.9697
H-17	98.99107142857143	longest = val + 1 ;
P-17	99.9202 93.8791 99.7955 99.843 99.9931 99.6924
H-17	98.98758370535714	longest = + 1 ; }
P-17	99.9202 95.8267 99.9459 99.9971 98.468 98.9408
H-17	98.9805908203125	longest = length ;
P-17	99.9202 99.809 95.8314 99.528
H-17	98.97899518694196	max = length + 1 ;
P-17	99.8343 99.3647 99.9306 99.9614 99.9957 99.6494
H-17	98.97498321533203	longest = last + 1 ; }
P-17	99.9202 95.0836 99.6173 99.9762 99.9955 98.4384 98.9544
H-17	98.96592494419643	next = length + 1 ;
P-17	99.7795 99.3192 99.8875 99.9721 99.9938 99.702
H-17	98.95944649832589	last = length + 1 ;
P-17	99.5011 99.5953 99.9257 99.9761 99.9948 99.6837
H-17	98.94842529296875	longest = - 1 ; }
P-17	99.9202 95.3641 99.9557 99.9924 98.6425 98.9498
H-17	98.94662039620536	longest = length + 0 ;
P-17	99.9202 99.809 99.9436 93.5031 99.9931 99.6431
H-17	98.9391098022461	longest = size + 1 ; }
P-17	99.9202 94.5815 99.9759 99.962 99.9941 98.4663 98.7987
H-17	98.92546081542969	longest = length + 1 ; else
P-17	99.9202 99.809 99.9436 99.9706 99.9946 94.0888 97.8627
H-17	98.92398507254464	longest += longest + 1 ;
P-17	95.9284 97.6605 99.4012 99.9441 99.9952 99.7243
H-17	98.90592738560268	longest = start + 1 ;
P-17	99.9202 93.3034 99.7197 99.8725 99.9941 99.7174
H-17	98.905615234375	longest ++ ; }
P-17	96.8842 99.9834 98.5349 99.3114
H-17	98.89395577566964	longest = length + val ;
P-17	99.9202 99.809 99.9436 93.1249 99.9234 99.7224
H-17	98.8897705078125	longest = max + 1 ;
P-17	99.9202 93.3177 99.5629 99.9029 99.9895 99.7209
H-17	98.86886160714286	longest = min + 1 ;
P-17	99.9202 92.9482 99.7619 99.9008 99.987 99.7498
H-17	98.86441040039062	longest = length ; }
P-17	99.9202 99.809 95.8314 98.7002 99.1114
H-17	98.84458705357143	prev = length + 1 ;
P-17	99.8316 99.7766 99.9296 99.9687 99.9948 99.7004
H-17	98.78980364118304	min = length + 1 ;
P-17	99.8732 99.521 99.9392 99.9681 99.995 99.7256
H-17	98.78926304408482	longest = length + length ;
P-17	99.9202 99.809 99.9436 92.5125 99.8176 99.7076
H-17	98.72807006835937	longest += length ;
P-17	95.9284 98.8809 99.4023 99.6145
H-17	98.70591430664062	longest = 0 ;
P-17	99.9202 94.3435 99.9804 99.4713
H-17	98.69967651367188	longest += 1 ;
P-17	95.9284 98.1469 99.991 99.6179
H-17	98.6830342610677	return length + 1 ;
P-17	99.1391 98.9909 99.6951 99.9963 99.1154
H-17	98.64827473958333	longest = 0 ; }
P-17	99.9202 94.3435 99.9804 98.8119 99.0195
H-17	98.64015706380208	longest += length ; }
P-17	95.9284 98.8809 99.4023 98.5883 99.2268
H-17	98.6334940592448	longest = length ] ;
P-17	99.9202 99.809 92.7323 99.9074 99.6177
H-17	98.63250732421875	longest = i ;
P-17	99.9202 95.1567 98.728 99.5434
H-17	98.62804158528645	longest ++ + 1 ;
P-17	96.8842 95.4778 99.9197 99.9856 99.6867
H-17	98.62310791015625	longest += 1 ; }
P-17	95.9284 98.1469 99.991 98.6297 99.2284
H-17	98.58411661783855	longest = i ; }
P-17	99.9202 95.1567 98.728 98.6968 99.1888
H-17	98.58124389648438	longest = longest ;
P-17	99.9202 95.7875 97.7398 99.6445
H-17	98.58102416992188	longest ++ ; } }
P-17	96.8842 99.9834 98.5349 97.8991 98.3704
H-17	98.5555908203125	return length ; }
P-17	99.1391 99.499 99.6378 99.3406
H-17	98.53560791015624	longest = 1 ;
P-17	99.9202 93.493 99.8722 99.5783
H-17	98.4473876953125	longest += longest ;
P-17	95.9284 97.6605 99.0934 99.7404
H-17	98.442138671875	longest = true ;
P-17	99.9202 93.0754 99.9779 99.4229
H-17	98.43182373046875	} i ++ ;
P-17	98.5654 99.8966 99.9949 99.5126
H-17	98.41514892578125	longest -= 1 ;
P-17	94.0342 98.6104 99.9951 99.6218
H-17	98.40296020507813	longest -= length ;
P-17	94.0342 98.8423 99.7148 99.6092
H-17	98.38958129882812	i ++ ; }
P-17	99.8738 99.994 98.9178 99.1916
H-17	98.37833862304687	longest = last ;
P-17	99.9202 95.0836 97.4689 99.6048
H-17	98.35838623046875	longest = false ;
P-17	99.9202 92.6488 99.9817 99.427
H-17	98.32290649414062	i ++ ;
P-17	99.8738 99.994 99.4531
H-17	98.18330383300781	longest -- ;
P-17	93.2888 99.9743 99.6558
H-17	98.17530059814453	longest = ;
P-17	99.9202 93.6502 99.3166
H-17	98.14203643798828	return length ;
P-17	99.1391 99.499 98.7686
H-17	98.12731170654297	return longest ;
P-17	98.261 99.676 99.4107
H-17	98.12487030029297	last ++ ;
P-17	98.9031 99.9712 99.5857
H-17	98.01351165771484	pos ++ ;
P-17	99.5135 99.9935 99.4597
H-17	97.94170379638672	num ++ ;
P-17	98.709 99.9461 99.5311
H-17	97.38404337565105	longest =
P-17	99.9202 92.4177
H-17	97.33763631184895	break ;
P-17	99.9828 99.3722
S-18	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
T-18	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b . substring ( 1 ) ) ;
H-18	99.85731336805556	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 99.6021 99.9713 99.9953 99.9651 99.9497 99.8278 99.827 99.8082 99.9975 99.7604
H-18	99.8072998046875	return longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 99.9244 99.9944 99.9407 99.9413 99.7497 99.8125 99.7747 99.9983 99.7705
H-18	99.79522494612068	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 98.8602 99.8089 99.4887 99.9275 99.9925 99.9626 99.9376 99.3193 99.7719 99.7605 99.9981 99.7911
H-18	99.78890878182871	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b . substring ( 1 ) ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 98.8602 99.8089 99.4887 99.9275 99.9925 99.9626 99.9376 99.276 99.9853 99.6186
H-18	99.78789605034723	return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 97.9869 99.9965 99.955 99.7883 99.9995 99.9814 99.9994 99.9851 99.9497 99.9803 99.5616 99.9701 99.995 99.9707 99.9495 99.823 99.8254 99.8153 99.9974 99.7684
H-18	99.78158203125	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 99.6021 99.9713 99.9953 99.9651 99.9497 98.0802 99.9684 99.5646
H-18	99.76847891971983	return $STRING$ + a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
P-18	98.1761 99.2914 99.3037 99.4337 99.6442 99.9986 99.9995 99.9988 99.7891 99.9969 99.9022 99.6664 99.9989 99.9858 99.9994 99.9815 99.9414 99.9801 99.5845 99.9718 99.9939 99.9716 99.956 99.7743 99.8253 99.8119 99.9966 99.792
H-18	99.76470392400569	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 98.8602 99.8089 98.9902 99.992 99.7298
H-18	99.75736942997685	return $STRING$ ; } else if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 0 ) ) {
P-18	98.1761 99.2679 99.6077 99.8766 99.2968 99.9985 99.8499 99.9841 99.7031 99.9956 99.9992 99.9919 99.6956 99.9988 99.9275 99.6909 99.986 99.9709 99.9983 99.9997 99.9992 99.7385 99.9988 99.8885 99.9831 99.3057
H-18	99.75699869791667	return a ; } else if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 0 ) ) {
P-18	99.1345 98.2842 99.506 99.9001 99.3942 99.9986 99.8271 99.9824 99.6897 99.9954 99.9991 99.9906 99.7086 99.9987 99.9283 99.6869 99.9868 99.9718 99.9983 99.9997 99.9992 99.7451 99.9988 99.8772 99.9794 99.3383
H-18	99.74782799030173	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b , 1 ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 99.6021 99.9713 99.9953 99.9651 99.9497 99.8278 99.827 97.5663 98.8414 99.9577 99.9908 99.7495
H-18	99.73552835398706	return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 97.9869 99.9965 99.955 99.7883 99.9995 99.9814 99.9994 99.9851 99.9497 99.9803 98.9408 99.8142 99.501 99.9323 99.9919 99.9704 99.9383 99.3098 99.7738 99.7649 99.9981 99.7978
H-18	99.7314453125	return a + longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ;
P-18	99.1345 98.2748 99.6429 99.9978 99.9829 99.9973 99.978 99.9336 99.9786 99.548 99.8098 99.5575 99.9236 99.9938 99.9443 99.9337 99.6136 99.7814 99.7729 99.998 99.7746
H-18	99.73020777209052	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b , 0 ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 99.6021 99.9713 99.9953 99.9651 99.9497 99.8278 99.827 97.5663 98.5231 99.7833 99.9908 99.7317
H-18	99.72775268554688	return a + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
P-18	99.1345 98.2748 99.6429 99.9978 99.9829 99.9973 99.978 99.9336 99.9786 98.9726 99.9691 99.996 99.9553 99.9538 99.8994 99.847 99.783 99.9973 99.7406
H-18	99.72535988136575	return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a , b . substring ( 1 ) ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 97.9869 99.9965 99.955 99.7883 99.9995 99.9814 99.9994 99.9851 99.9497 99.9803 98.9408 99.8142 99.501 99.9323 99.9919 99.9704 99.9383 99.2857 99.9855 99.6278
H-18	99.723779296875	return a . substring ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
P-18	99.1345 99.5398 97.5054 99.9978 99.3256 99.8675 99.7916 99.7662 99.999 99.9841 99.9995 99.9821 99.9522 99.9798 99.6804 99.9634 99.993 99.9778 99.9629 99.7637 99.8201 99.797 99.9965 99.7942
H-18	99.72095568426724	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , a . substring ( 1 ) , b ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 98.8602 97.2004 99.7954 99.9392 99.9923 99.9633 99.9502 99.3909 99.7766 99.812 99.9981 99.7863
H-18	99.7190472146739	return longest _ common _ subsequence ( a . substring ( 1 ) , b . substring ( 1 ) ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 98.9234 99.972 99.9962 99.9524 99.9365 99.9366 99.87 97.868 99.6332 99.995 99.9365 99.9427 99.7643 99.9844 99.5745
H-18	99.71794782366071	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) ) ; } else {
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 99.6021 99.9713 99.9953 99.9651 99.9497 98.0802 99.9684 98.9506 99.8968 99.6099 98.6704
H-18	99.71352202316811	return $STRING$ + a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
P-18	98.1761 99.2914 99.3037 99.4337 99.6442 99.9986 99.9995 99.9988 98.2421 99.9974 99.8875 99.684 99.9989 99.9858 99.9994 99.9819 99.9418 99.9805 99.5292 99.9707 99.9937 99.977 99.955 99.7637 99.8224 99.818 99.9966 99.8001
H-18	99.71223958333333	return $STRING$ ; } else if ( a . char CaMeL At ( 1 ) == b . char CaMeL At ( 0 ) ) {
P-18	98.1761 99.2679 99.6077 99.8766 99.2968 99.9985 99.8499 99.9841 99.7031 99.9956 99.9992 99.9919 98.6074 99.9985 99.9313 99.6936 99.9841 99.9703 99.9983 99.9997 99.9991 99.6043 99.9989 99.8922 99.9832 99.3025
H-18	99.710205078125	return a ; } else if ( a . char CaMeL At ( 1 ) == b . char CaMeL At ( 0 ) ) {
P-18	99.1345 98.2842 99.506 99.9001 99.3942 99.9986 99.8271 99.9824 99.6897 99.9954 99.9991 99.9906 98.5669 99.9985 99.932 99.6899 99.9855 99.9713 99.9983 99.9997 99.9991 99.6161 99.9989 99.8813 99.9795 99.3368
H-18	99.7099609375	return $STRING$ ; } else if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 1 ) ) {
P-18	98.1761 99.2679 99.6077 99.8766 99.2968 99.9985 99.8499 99.9841 99.7031 99.9956 99.9992 99.9919 99.6956 99.9988 99.9275 99.6909 99.986 99.9709 99.9983 99.9997 99.9992 98.4641 99.9987 99.8908 99.9821 99.2986
H-18	99.7088623046875	if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 0 ) ) {
P-18	99.9989 99.5387 99.9684 99.6855 99.9958 99.9993 99.9952 99.7735 99.9971 99.941 99.685 99.9848 99.9668 99.9986 99.9997 99.9991 99.7884 99.998 99.9293 99.9651 99.2129
H-18	99.70857747395833	return a ; } else if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 1 ) ) {
P-18	99.1345 98.2842 99.506 99.9001 99.3942 99.9986 99.8271 99.9824 99.6897 99.9954 99.9991 99.9906 99.7086 99.9987 99.9283 99.6869 99.9868 99.9718 99.9983 99.9997 99.9992 98.4401 99.9988 99.8798 99.9783 99.3343
H-18	99.70828562769397	return $STRING$ + a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b . substring ( 1 ) ) ;
P-18	98.1761 99.2914 99.3037 99.4337 99.6442 99.9986 99.9995 99.9988 99.7891 99.9969 99.9022 99.6664 99.9989 99.9858 99.9994 99.9815 99.9414 99.9801 98.8945 99.8082 99.3936 99.9125 99.9926 99.9662 99.9336 99.3867 99.9862 99.6581
H-18	99.7081787109375	return longest _ common _ subsequence ( a , a . substring ( 1 ) , b ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 97.5592 99.7945 99.9384 99.9939 99.9398 99.9508 99.7761 99.8171 99.7986 99.9982 99.7688
H-18	99.707802734375	return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 ) ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 97.9869 99.9965 99.955 99.7883 99.9995 99.9814 99.9994 99.9851 99.9497 99.9803 99.5616 99.9701 99.995 99.9707 99.9495 98.107 99.9698 99.575
H-18	99.70625813802083	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) ,
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 99.6021 99.9713 99.9953 99.9651 99.9497 99.8278 96.196
H-18	99.70536586216518	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b , ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 99.6021 99.9713 99.9953 99.9651 99.9497 99.8278 99.827 97.5663 97.8679 99.9973 99.7375
H-18	99.70488823784723	return $STRING$ + a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) ) ;
P-18	98.1761 99.2914 99.3037 99.4337 99.6442 99.9986 99.9995 99.9988 99.7891 99.9969 99.9022 99.6664 99.9989 99.9858 99.9994 99.9815 99.9414 99.9801 99.5845 99.9718 99.9939 99.9716 99.956 98.3364 99.9747 99.6351
H-18	99.703125	return b . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
P-18	95.5248 99.2523 99.7433 99.9986 99.9993 99.9993 99.8394 99.9955 99.9618 99.7627 99.9995 99.9809 99.9994 99.9845 99.9477 99.9798 99.4164 99.9698 99.9953 99.9647 99.9538 99.8054 99.8234 99.8017 99.9973 99.7671
H-18	99.70161494502315	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , a . substring ( 1 ) ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 98.8602 97.2004 99.7954 99.9392 99.9923 99.9633 99.9502 99.1963 99.985 99.6183
H-18	99.69541015625	return longest _ common _ subsequence ( a , b . substring ( 1 ) , b . substring ( 1 ) ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 99.9244 99.9944 99.9407 99.9413 99.7497 99.8125 97.4763 98.9945 99.9927 99.9183 99.9312 99.8619 99.9876 99.6202
H-18	99.69498116629464	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ; }
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 99.6021 99.9713 99.9953 99.9651 99.9497 99.8278 99.827 99.8082 99.9975 98.4362 96.6361
H-18	99.69489998653017	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b , b ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 99.6021 99.9713 99.9953 99.9651 99.9497 99.8278 99.827 97.5663 97.4435 99.796 99.9977 99.7677
H-18	99.69334876019022	return longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ; } else {
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 99.9244 99.9944 99.9407 99.9413 99.7497 99.8125 99.7747 99.9983 98.3968 99.9195 99.6112 98.6439
H-18	99.6908846768466	return $STRING$ + longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ;
P-18	98.1761 99.2914 98.6821 99.9964 99.9802 99.997 99.98 99.9463 99.9753 99.4951 99.8313 99.5364 99.9209 99.9938 99.9594 99.9359 99.6335 99.7737 99.7877 99.9974 99.7896
H-18	99.68946184430804	{ return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
P-18	98.5469 99.2006 99.5845 99.7958 99.9983 99.9993 99.9991 99.8395 99.9938 99.9657 99.79 99.9993 99.9838 99.9993 99.9804 99.9505 99.9786 99.7348 99.9736 99.9951 99.9648 99.956 99.872 99.8282 99.7923 99.9975 99.6347
H-18	99.68806675502232	result = a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
P-18	99.7522 99.129 99.8222 99.7352 99.9983 99.9994 99.9991 99.8124 99.9973 99.9411 99.6593 99.9994 99.9799 99.9992 99.9734 99.9332 99.9732 99.6785 99.9721 99.9931 99.9652 99.9619 99.7997 99.799 99.8032 99.997 99.8437
H-18	99.68734741210938	return $STRING$ + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
P-18	98.1761 99.2914 98.6821 99.9964 99.9802 99.997 99.98 99.9463 99.9753 99.0619 99.9687 99.9961 99.9628 99.9568 99.8807 99.8162 99.8072 99.9963 99.7549
H-18	99.68547453703704	return longest _ common _ subsequence ( a , b . substring ( 1 ) , b . char CaMeL At ( 0 ) ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 99.9244 99.9944 99.9407 99.9413 99.7497 99.8125 97.4763 98.3652 99.9989 99.9989 99.9996 99.6451 99.9964 99.7571 99.99 99.6777
H-18	99.68538120814732	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence $NUMBER$ ( a . substring ( 1 ) , b ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 94.9617 99.9623 99.9709 99.7109 99.9782 99.9957 99.9542 99.9515 99.7972 99.8197 99.8051 99.9971 99.7732
H-18	99.68459250710227	return a . char CaMeL At ( 1 ) + longest _ common _ subsequence ( a , b ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 97.9869 99.9965 99.955 99.7883 99.9995 99.9814 99.9994 99.9851 99.9497 99.9803 98.9408 99.8142 98.9766 99.9916 99.7412
H-18	99.68313914331897	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b . char CaMeL At ( 0 ) ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 98.8602 99.8089 99.4887 96.8992 99.9983 99.9957 99.9987 99.462 99.9986 99.2219 99.9731 99.6632
H-18	99.68313259548611	return $STRING$ ; } else if ( a . char CaMeL At ( 1 ) == b . char CaMeL At ( 1 ) ) {
P-18	98.1761 99.2679 99.6077 99.8766 99.2968 99.9985 99.8499 99.9841 99.7031 99.9956 99.9992 99.9919 98.6074 99.9985 99.9313 99.6936 99.9841 99.9703 99.9983 99.9997 99.9991 98.8238 99.9988 99.894 99.9823 99.296
H-18	99.68310546875	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . char CaMeL At ( 0 ) , b ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 99.6021 95.0958 99.9976 99.9628 99.9991 99.5031 99.999 99.8572 99.8414 99.7618 99.9965 99.7509
H-18	99.68200262661638	return $STRING$ + a ; } else if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 0 ) ) {
P-18	98.1761 99.2914 99.3037 98.5162 99.364 99.88 99.1113 99.9988 99.826 99.9836 99.6809 99.9955 99.9991 99.9924 99.6835 99.9987 99.9244 99.6695 99.986 99.9732 99.9982 99.9997 99.9993 99.7266 99.9989 99.857 99.9771 99.347
H-18	99.68195211476294	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b , $NUMBER$ ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 99.6021 99.9713 99.9953 99.9651 99.9497 99.8278 99.827 97.5663 96.9124 99.9691 99.9931 99.7546
H-18	99.67985026041667	return a ; } else if ( a . char CaMeL At ( 1 ) == b . char CaMeL At ( 1 ) ) {
P-18	99.1345 98.2842 99.506 99.9001 99.3942 99.9986 99.8271 99.9824 99.6897 99.9954 99.9991 99.9906 98.5669 99.9985 99.932 99.6899 99.9855 99.9713 99.9983 99.9997 99.9991 98.7989 99.9988 99.8831 99.9785 99.3337
H-18	99.67975725446429	return longest _ common _ subsequence ( a . substring ( 1 ) , b ) ; } else {
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 98.9234 99.972 99.9962 99.9524 99.9365 99.9366 99.87 99.7604 99.9974 98.5314 99.9213 99.5983 98.6265
H-18	99.679736328125	return longest _ common _ subsequence ( a . substring ( 1 ) , b . char CaMeL At ( 0 ) ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 98.9234 99.972 99.9962 99.9524 99.9365 99.9366 99.87 97.868 98.5132 99.9989 99.9989 99.9996 99.5792 99.997 99.5933 99.9852 99.6206
H-18	99.67916015625	return longest _ common _ subsequence ( a . substring ( 1 ) , b . substring ( 1 ) , b ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 98.9234 99.972 99.9962 99.9524 99.9365 99.9366 99.87 97.868 99.6332 99.995 99.9365 99.9427 98.3986 99.7606 99.8257 99.9986 99.7803
H-18	99.67850296585648	return $STRING$ + a . substring ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
P-18	98.1761 99.2914 99.3037 99.4337 98.3633 99.9961 99.5473 99.8973 99.6194 99.6749 99.999 99.9819 99.9993 99.9825 99.9484 99.9791 99.5796 99.961 99.9949 99.9794 99.9633 99.6654 99.8206 99.8344 99.9962 99.8105
H-18	99.67835693359375	return a + longest _ common _ subsequence ( a , b . substring ( 1 ) ) ;
P-18	99.1345 98.2748 99.6429 99.9978 99.9829 99.9973 99.978 99.9336 99.9786 99.548 99.8098 99.5575 99.9236 99.9938 99.9443 99.9337 98.8391 99.979 99.5977
H-18	99.67831856863839	s = a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
P-18	99.7308 99.1525 99.8847 99.6136 99.9981 99.9996 99.9991 99.7917 99.998 99.9328 99.5923 99.9991 99.978 99.9992 99.9756 99.9493 99.9755 99.7068 99.9734 99.9932 99.9675 99.9596 99.7792 99.804 99.8061 99.9974 99.533
H-18	99.6768798828125	return longest _ common _ subsequence ( a , b . char CaMeL At ( 0 ) , b ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 97.0405 99.9982 99.9973 99.9991 99.6227 99.9981 99.7508 99.83 99.6697 99.9979 99.7478
H-18	99.67572699652777	return $STRING$ ; } else if ( a . char CaMeL At ( 0 ) == a . char CaMeL At ( 0 ) ) {
P-18	98.1761 99.2679 99.6077 99.8766 99.2968 99.9985 99.8499 99.9841 99.7031 99.9956 99.9992 99.9919 99.6956 99.9988 99.9275 97.5113 99.9925 99.9694 99.9978 99.9997 99.9991 99.7208 99.9989 99.8811 99.983 99.3019
H-18	99.675537109375	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 1 ) , b . ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 99.6021 99.9713 99.9953 99.9651 99.9497 99.8278 99.827 97.4772 97.1925 99.9963 99.668
H-18	99.67502170138889	return a ; } else if ( a . char CaMeL At ( 0 ) == a . char CaMeL At ( 0 ) ) {
P-18	99.1345 98.2842 99.506 99.9001 99.3942 99.9986 99.8271 99.9824 99.6897 99.9954 99.9991 99.9906 99.7086 99.9987 99.9283 97.4994 99.9925 99.9702 99.9978 99.9997 99.9991 99.7283 99.9989 99.8686 99.9795 99.334
H-18	99.67422485351562	return $STRING$ + a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b ) ;
P-18	98.1761 99.2914 99.3037 99.4337 99.6442 99.9986 99.9995 99.9988 99.7891 99.9969 99.9022 99.6664 99.9989 99.9858 99.9994 99.9815 99.9414 99.9801 98.8945 99.8082 99.1112 99.9884 99.7713
H-18	99.67314453125	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b ) ; } else {
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 98.8602 99.8089 98.9902 99.992 98.5449 99.91 99.5933 98.6869
H-18	99.67084295099431	return longest _ common _ subsequence ( a , b . substring ( 1 ) , b , 1 ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 99.9244 99.9944 99.9407 99.9413 99.7497 99.8125 97.8156 98.6077 99.9708 99.9936 99.7681
H-18	99.67025643807871	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a . substring ( 0 ) , b ) ;
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 99.6021 99.9713 99.9953 96.2301 98.6576 99.8336 99.8428 99.7827 99.9972 99.7416
H-18	99.66635131835938	return longest _ common _ subsequence ( a , b . substring ( 1 ) , b . length ( ) ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 99.9244 99.9944 99.9407 99.9413 99.7497 99.8125 97.4763 98.3834 99.9976 99.9998 99.9445 99.9894 99.599
H-18	99.66182084517045	return longest _ common _ subsequence ( a , b . substring ( 1 ) , b , 0 ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 99.9244 99.9944 99.9407 99.9413 99.7497 99.8125 97.8156 98.5464 99.8584 99.9929 99.7441
H-18	99.66130859375	return a + longest _ common _ subsequence ( a . substring ( 1 ) , b . substring ( 1 ) ) ;
P-18	99.1345 98.2748 99.6429 99.9978 99.9829 99.9973 99.978 99.9336 99.9786 98.9726 99.9691 99.996 99.9553 99.9538 99.8994 99.847 97.6153 99.613 99.9942 99.9433 99.9445 99.8155 99.9891 99.5838
H-18	99.6604755108173	return a . char CaMeL At ( 0 ) + longest _ common _ subsequence ( a , b . substring ( 1 ) ,
P-18	99.1345 99.5398 99.7836 99.9982 99.9993 99.9992 99.8353 99.9951 99.9617 99.7811 99.9995 99.9816 99.9994 99.9848 99.9492 99.9803 98.8602 99.8089 99.4887 99.9275 99.9925 99.9626 99.9376 99.3193 96.4323
H-18	99.6570575420673	return longest _ common _ subsequence ( a . substring ( 1 ) , b . substring ( 1 ) ) ; } else {
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 98.9234 99.972 99.9962 99.9524 99.9365 99.9366 99.87 97.868 99.6332 99.995 99.9365 99.9427 99.7643 99.9844 98.9318 99.9015 99.6439 98.6427
H-18	99.65689453125	return a . substring ( 1 ) + longest _ common _ subsequence ( a , b . substring ( 1 ) ) ;
P-18	99.1345 99.5398 97.5054 99.9978 99.3256 99.8675 99.7916 99.7662 99.999 99.9841 99.9995 99.9821 99.9522 99.9798 98.6683 99.7931 99.6084 99.9504 99.9926 99.975 99.9515 99.4921 99.9816 99.6637
H-18	99.65610914963942	return $STRING$ ; } else { return longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ;
P-18	98.1761 99.2679 99.6077 99.8766 99.2414 98.2402 98.8897 99.9993 99.9893 99.9995 99.9918 99.9675 99.9722 99.8035 99.8814 99.7049 99.9583 99.9939 99.9655 99.948 99.6328 99.8039 99.8192 99.9987 99.8092
H-18	99.654833984375	return longest _ common _ subsequence ( a . substring ( 1 ) , b . char CaMeL At ( 1 ) ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 98.9234 99.972 99.9962 99.9524 99.9365 99.9366 99.87 97.868 98.5132 99.9989 99.9989 99.9996 98.8816 99.9987 99.6502 99.9881 99.634
H-18	99.65121459960938	} else if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 0 ) ) {
P-18	99.899 99.8139 99.9986 99.762 99.9803 99.6964 99.9951 99.9992 99.9936 99.7258 99.9985 99.9289 99.66 99.9865 99.9699 99.9983 99.9997 99.9991 99.7625 99.9987 99.8891 99.972 99.3361
H-18	99.64708941915761	return a . substring ( 1 ) + longest _ common _ subsequence ( a . substring ( 1 ) ) ;
P-18	99.1345 99.5398 97.5054 99.9978 99.3256 99.8675 99.7916 99.7662 99.999 99.9841 99.9995 99.9821 99.9522 99.9798 99.6804 99.9634 99.993 99.9778 99.9629 98.3673 99.9677 99.6251
H-18	99.646748046875	return a ; } else if ( a . is CaMeL Empty ( ) || b . is CaMeL Empty ( ) ) {
P-18	99.1345 98.2842 99.506 99.9001 99.3942 99.9986 99.8271 99.9824 97.3556 99.9941 99.9851 99.9999 99.9995 99.2986 99.6861 99.9836 99.8233 99.9972 99.9961 100.0 99.9998 99.9246 99.9645 99.6137
H-18	99.6420166015625	return longest _ common _ subsequence ( a . substring ( 1 ) , b , 1 ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 98.9234 99.972 99.9962 99.9524 99.9365 99.9366 99.87 97.564 98.7881 99.9363 99.9861 99.7261
H-18	99.64198521205357	return longest _ common _ subsequence ( a , b . substring ( 1 ) ) ; } else {
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 99.9244 99.9944 99.9407 99.9413 98.4551 99.9698 98.9063 99.8982 99.5953 98.6168
H-18	99.64133522727273	return longest _ common _ subsequence ( a , b . char CaMeL At ( 1 ) , b ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 97.0405 99.9982 99.9973 99.9991 98.79 99.9987 99.7434 99.823 99.7246 99.9981 99.757
H-18	99.6412686434659	return $STRING$ + a + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
P-18	98.1761 99.2914 99.3037 98.2848 99.3385 99.9935 99.9807 99.9951 99.9738 99.9291 99.9782 99.2079 99.9667 99.9959 99.9565 99.9509 99.8414 99.836 99.8114 99.9963 99.7798
H-18	99.6405029296875	if ( b . char CaMeL At ( 0 ) == b . char CaMeL At ( 0 ) ) {
P-18	99.9989 98.2025 99.9404 99.5864 99.9979 99.9994 99.9973 99.7845 99.9966 99.9435 99.6215 99.989 99.9661 99.9985 99.9997 99.9991 99.8 99.9981 99.9346 99.9652 99.1981
H-18	99.63962624289773	if ( a . char CaMeL At ( 0 ) == b . char CaMeL At ( 1 ) ) {
P-18	99.9989 99.5387 99.9684 99.6855 99.9958 99.9993 99.9952 99.7735 99.9971 99.941 99.685 99.9848 99.9668 99.9986 99.9997 99.9991 98.2555 99.9982 99.928 99.9651 99.2236
H-18	99.63918235085227	if ( a . char CaMeL At ( 1 ) == b . char CaMeL At ( 0 ) ) {
P-18	99.9989 99.5387 99.9684 99.6855 99.9958 99.9993 99.9952 98.3177 99.9971 99.9429 99.6914 99.9817 99.9667 99.9987 99.9997 99.999 99.7017 99.9981 99.9308 99.9652 99.2157
H-18	99.63506525213069	return a + longest _ common _ subsequence ( a , a . substring ( 1 ) , b ) ;
P-18	99.1345 98.2748 99.6429 99.9978 99.9829 99.9973 99.978 99.9336 99.9786 99.548 97.4332 99.7019 99.9371 99.9934 99.9444 99.9443 99.6532 99.794 99.811 99.998 99.7722
H-18	99.63244098165761	return a + longest _ common _ subsequence ( a . substring ( 1 ) , b ) ; } else {
P-18	99.1345 98.2748 99.6429 99.9978 99.9829 99.9973 99.978 99.9336 99.9786 98.9726 99.9691 99.996 99.9553 99.9538 99.8994 99.847 99.783 99.9973 98.5077 99.9205 99.6118 98.6918
H-18	99.63063557942708	return longest _ common _ subsequence ( a . substring ( 1 ) , b ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 98.9234 99.972 99.9962 99.9524 99.9365 99.9366 99.87 99.7604 99.9974 96.754
H-18	99.63004760742187	return $STRING$ + longest _ common _ subsequence ( a , b . substring ( 1 ) ) ;
P-18	98.1761 99.2914 98.6821 99.9964 99.9802 99.997 99.98 99.9463 99.9753 99.4951 99.8313 99.5364 99.9209 99.9938 99.9594 99.9359 98.7885 99.9839 99.6109
H-18	99.62689499627976	return longest _ common _ subsequence ( a , b . substring ( 1 ) , b , ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 99.9244 99.9944 99.9407 99.9413 99.7497 99.8125 97.8156 97.9996 99.9977 99.7494
H-18	99.60737915039063	return longest _ common _ subsequence ( a . substring ( 1 ) , b , 0 ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 98.9234 99.972 99.9962 99.9524 99.9365 99.9366 99.87 97.564 98.3073 99.7485 99.9867 99.7014
H-18	99.5976806640625	return longest _ common _ subsequence ( a . substring ( 1 ) , b , b ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 98.9234 99.972 99.9962 99.9524 99.9365 99.9366 99.87 97.564 98.0793 99.7306 99.9974 99.7426
H-18	99.59100632440476	return longest _ common _ subsequence ( a , b . substring ( 1 ) , b ) ; }
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 99.9244 99.9944 99.9407 99.9413 99.7497 99.8125 99.7747 99.9983 98.3968 96.6388
H-18	99.590087890625	return longest _ common _ subsequence ( a , b . substring ( 0 ) , b ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 99.9244 99.9944 96.8729 98.6982 99.7433 99.828 99.7534 99.998 99.7496
H-18	99.58758835565476	return longest _ common _ subsequence ( a , b . substring ( 1 ) , b . ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 99.9244 99.9944 99.9407 99.9413 99.7497 99.8125 97.4763 97.5999 99.998 99.6628
H-18	99.58536376953126	return longest _ common _ subsequence ( a , b . substring ( 0 , b ) ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 99.9244 99.9944 96.8729 99.5856 99.5566 99.0789 99.779 99.9891 99.6868
H-18	99.5828921669408	return longest _ common _ subsequence ( a . substring ( 1 ) , b , ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 98.9234 99.972 99.9962 99.9524 99.9365 99.9366 99.87 97.564 97.9763 99.9957 99.6992
H-18	99.56499922902961	return longest _ common _ subsequence ( a . substring ( 1 ) , b ) ; }
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 98.9234 99.972 99.9962 99.9524 99.9365 99.9366 99.87 99.7604 99.9974 98.5314 96.6063
H-18	99.55962456597223	return longest _ common _ subsequence ( a , b . substring ( 1 ) ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 99.6136 99.9244 99.9944 99.9407 99.9413 98.4551 99.9698 96.6081
H-18	99.51630715762867	return $STRING$ + a + longest _ common _ subsequence ( a , b ) ;
P-18	98.1761 99.2914 99.3037 98.2848 99.3385 99.9935 99.9807 99.9951 99.9738 99.9291 99.9782 99.3846 99.8138 99.0876 99.9843 99.7417
H-18	99.39723557692308	return longest _ common _ subsequence ( a , b ) ;
P-18	98.8269 99.999 99.9886 99.998 99.99 99.9504 99.9793 99.5756 99.7978 98.6903 99.9905 95.8574
H-18	97.92349243164062	return a ;
P-18	99.1345 98.2842 94.755
S-19	max _ ending _ here = max _ ending _ here + x ;
T-19	max _ ending _ here = Math . max ( 0 , max _ ending _ here + x ) ;
H-19	99.853515625	max _ ending _ here = max _ ending _ here + x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 99.829 99.961 99.5347
H-19	99.72025756835937	synchronized ( arr ) { max _ ending _ here = max _ ending _ here + x ;
P-19	99.9887 99.0367 99.9948 99.9731 99.4445 99.993 99.7712 99.9882 99.9034 99.9669 99.6876 99.9892 99.8668 99.9918 99.9576 99.9771 99.8476 99.9712 102.3475
H-19	99.699609375	max _ so _ far = Math . max ( max _ so _ far , arr ) ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 99.6193 99.9989 99.9807 99.9983 99.8486 99.9788 99.8168 99.9932 99.9816 99.9866 98.3332 99.519 99.9882 99.6916
H-19	99.68172200520833	max _ ending _ here = max _ ending _ here + max _ ending _ here + x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 96.1009 99.9859 99.8213 99.9918 99.9721 99.6367 99.682 99.9697 99.6779
H-19	99.67700805664063	max _ ending _ here = Math . max ( max _ ending _ here , x ) ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 97.8815 99.9987 99.9787 99.9982 99.8293 99.9796 98.7429 99.9901 99.9427 99.9804 98.6248 99.8593 99.9806 99.6925
H-19	99.67637532552084	max _ ending _ here = max _ so _ far + x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 97.4972 99.9962 99.9264 99.9562 99.5465 99.9738 99.5687
H-19	99.65626220703125	max _ ending _ here = Math . max ( max _ so _ far , x ) ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 97.8815 99.9987 99.9787 99.9982 99.8293 99.9796 99.5986 99.9936 99.9752 99.984 97.3147 99.8504 99.983 99.6989
H-19	99.65411376953125	max _ so _ far = Math . max ( max _ so _ far , x ) ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 99.6193 99.9989 99.9807 99.9983 99.8486 99.9788 99.8168 99.9932 99.9816 99.9866 97.0516 99.8817 99.9825 99.7067
H-19	99.652099609375	max _ ending _ here = Math . max ( max _ so _ far , arr ) ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 97.8815 99.9987 99.9787 99.9982 99.8293 99.9796 99.5986 99.9936 99.9752 99.984 97.7964 99.2999 99.9885 99.6788
H-19	99.63584594726562	max _ ending _ here = Math . max ( max _ ending _ here , arr ) ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 97.8815 99.9987 99.9787 99.9982 99.8293 99.9796 98.7429 99.9901 99.9427 99.9804 97.9723 99.6904 99.9889 99.6824
H-19	99.6346923828125	max _ so _ far = Math . max ( max _ ending _ here , x ) ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 99.6193 99.9989 99.9807 99.9983 99.8486 99.9788 97.9924 99.9917 99.9396 99.9781 98.5745 99.8661 99.9798 99.6898
H-19	99.63209635416666	max _ so _ far = max _ ending _ here + x ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 98.4448 99.9893 99.6138 99.9935 99.9471 99.9758 99.793 99.9661 99.5007
H-19	99.62081106085526	max _ ending _ here = max _ ending _ here + max _ ending _ here ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 96.1009 99.9859 99.8213 99.9918 99.9721 98.7373 99.7084
H-19	99.61944580078125	max _ so _ far = Math . max ( max _ so _ far , 0 ) ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 99.6193 99.9989 99.9807 99.9983 99.8486 99.9788 99.8168 99.9932 99.9816 99.9866 96.3648 99.861 99.9862 99.7171
H-19	99.61717936197917	max _ ending _ here = max _ ending _ here + 1 ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 96.2686 99.966 99.545
H-19	99.60736083984375	max _ ending _ here = Math . max ( max _ ending _ here , 1 ) ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 97.8815 99.9987 99.9787 99.9982 99.8293 99.9796 98.7429 99.9901 99.9427 99.9804 97.1108 99.9545 99.9798 99.719
H-19	99.60693969726563	max _ so _ far = Math . max ( max _ ending _ here , arr ) ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 99.6193 99.9989 99.9807 99.9983 99.8486 99.9788 97.9924 99.9917 99.9396 99.9781 98.138 99.7452 99.9895 99.6827
H-19	99.60686178768383	max _ ending _ here = max _ ending _ here + x + x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 99.829 96.2531 99.3435 99.9353 99.4777
H-19	99.60467819940476	max _ ending _ here = max _ so _ far + max _ ending _ here + x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 97.4972 99.9962 99.9264 99.9562 96.882 99.9861 99.7974 99.9924 99.975 99.6941 99.6796 99.9747 99.6603
H-19	99.60333251953125	max _ ending _ here = Math . max ( max _ so _ far , 0 ) ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 97.8815 99.9987 99.9787 99.9982 99.8293 99.9796 99.5986 99.9936 99.9752 99.984 96.2268 99.8608 99.9882 99.7125
H-19	99.5909423828125	max _ ending _ here = Math . max ( max _ ending _ here , 0 ) ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 97.8815 99.9987 99.9787 99.9982 99.8293 99.9796 98.7429 99.9901 99.9427 99.9804 96.7932 99.9423 99.9861 99.7141
H-19	99.58829345703126	max _ so _ far = Math . max ( max _ so _ far , 1 ) ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 99.6193 99.9989 99.9807 99.9983 99.8486 99.9788 99.8168 99.9932 99.9816 99.9866 95.7416 99.8597 99.983 99.7217
H-19	99.57774135044643	if ( Math . max ( max _ so _ far , max _ ending _ here ) ) {
P-19	99.9972 97.1753 99.9976 99.9542 99.9938 99.7478 99.9803 99.5937 99.9936 99.9717 99.9861 99.3481 99.9792 99.9172 99.9915 99.9852 99.9615 99.443 99.793 99.329
H-19	99.57371690538194	max _ ending _ here = ( int ) max _ ending _ here + x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 96.3457 99.4153 99.9673 98.7773 99.9921 99.747 99.9919 99.9365 99.7807 99.747 99.9784 99.5868
H-19	99.57223510742188	max _ ending _ here = Math . max ( max _ so _ far , 1 ) ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 97.8815 99.9987 99.9787 99.9982 99.8293 99.9796 99.5986 99.9936 99.9752 99.984 95.609 99.8552 99.9835 99.7187
H-19	99.56707442434211	max _ ending _ here = max _ ending _ here + ( 1 + x ) ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 96.9425 98.0946 99.6062 99.3568 99.633 99.9663 99.6969
H-19	99.56546020507812	max _ ending _ here = max _ ending _ here + x ; }
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 99.829 99.961 97.1706 97.6087
H-19	99.56500244140625	max _ so _ far = Math . max ( max _ ending _ here , 1 ) ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 99.6193 99.9989 99.9807 99.9983 99.8486 99.9788 97.9924 99.9917 99.9396 99.9781 97.0739 99.9494 99.9789 99.7141
H-19	99.5630126953125	max _ ending _ here += max _ ending _ here + x ;
P-19	99.9924 99.753 99.9881 99.8541 95.86 99.3765 99.984 99.8388 99.9915 99.9541 99.9441 99.7973 99.9688 99.6301
H-19	99.55552271792763	max _ ending _ here = max _ ending _ here + ( x + x ) ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 96.9425 98.9079 99.0651 99.3232 99.1986 99.9642 99.6754
H-19	99.55513723273026	return Math . max ( max _ so _ far , max _ ending _ here ) ;
P-19	99.3119 99.9989 99.9868 99.9978 99.8631 99.9845 99.6502 99.9945 99.9809 99.9862 99.2892 99.9805 99.8813 99.9934 99.9807 99.8939 99.9043 99.835
H-19	99.55126342773437	max _ so _ far = Math . max ( max _ ending _ here , 0 ) ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 99.6193 99.9989 99.9807 99.9983 99.8486 99.9788 97.9924 99.9917 99.9396 99.9781 96.8064 99.9387 99.9846 99.7119
H-19	99.5509033203125	max _ ending _ here = Math . max ( max _ so _ far ,
P-19	99.9924 99.753 99.9881 99.8541 99.9608 97.8815 99.9987 99.9787 99.9982 99.8293 99.9796 99.5986 99.9936 99.9752 99.984 96.087
H-19	99.5437255859375	max _ so _ far = max _ so _ far + x ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 98.4448 99.9893 98.6529 99.9969 99.9451 99.9544 99.397 99.9775 99.5406
H-19	99.54077962239583	max _ ending _ here = max _ ending _ here + 0 ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 95.1366 99.9458 99.5513
H-19	99.5359130859375	max _ ending _ here = max _ so _ far + 1 ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 97.4972 99.9962 99.9264 99.9562 97.405 99.9755 99.6014
H-19	99.53352625229779	max _ ending _ here = max _ ending _ here + x + 1 ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 99.829 96.2531 98.0558 99.9694 99.4847
H-19	99.53205309416118	max _ ending _ here = max _ ending _ here + max _ so _ far ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 96.1009 99.9859 97.7615 99.9946 99.8941 99.1589 99.7352
H-19	99.52693899054276	max _ ending _ here = max _ so _ far + max _ ending _ here ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 97.4972 99.9962 99.9264 99.9562 96.882 99.9861 99.7974 99.9924 99.975 98.6248 99.6977
H-19	99.5250244140625	max _ so _ far = Math . max ( max _ so _ far ,
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 99.6193 99.9989 99.9807 99.9983 99.8486 99.9788 99.8168 99.9932 99.9816 99.9866 95.4654
H-19	99.52251838235294	try { max _ ending _ here = max _ ending _ here + x ;
P-19	99.9951 99.5924 99.9935 99.7465 99.9905 99.8697 99.9673 99.7262 99.9875 99.8813 99.9921 99.9469 99.9845 99.86 99.9682 99.184
H-19	99.5186767578125	int max _ ending _ here = max _ ending _ here + x ;
P-19	98.7388 99.9936 98.9329 99.9635 99.741 99.9621 99.3584 99.9892 99.8502 99.9909 99.9375 99.9707 99.7521 99.9521 98.9694
H-19	99.51636460248162	max _ ending _ here = max _ ending _ here + x - x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 99.829 94.8014 99.2786 99.947 99.4442
H-19	99.51260579427084	max _ ending _ here = max _ ending _ here + $NUMBER$ ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 94.7885 99.8402 99.5822
H-19	99.51156955295139	max _ ending _ here = max _ ending _ here + x ; } else {
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 99.829 99.961 97.1706 98.2495 99.9239 97.5961
H-19	99.50769805908203	max _ ending _ here = max _ ending _ here + - x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 94.5663 99.5847 99.978 99.5161
H-19	99.50559488932292	max _ so _ far = Math . max ( max _ so _ far , arr
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 99.6193 99.9989 99.9807 99.9983 99.8486 99.9788 99.8168 99.9932 99.9816 99.9866 98.3332 96.3075
H-19	99.5045525045956	max _ ending _ here = x ; max _ ending _ here = x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 96.5033 99.8443 98.8931 99.9902 99.3883 99.9915 99.8703 99.9586 98.6745 99.8843 99.5185
H-19	99.5020751953125	max _ ending _ here = = max _ ending _ here + x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 94.6568 99.301 99.9908 99.7814 99.9902 99.95 99.9704 99.8551 99.9631 99.5138
H-19	99.49859260110294	max _ ending _ here = max _ ending _ here + arr . length ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 94.4911 99.8435 99.5432 99.5523 99.5679
H-19	99.49327850341797	max _ ending _ here = max _ ending _ here + ( x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 96.9425 98.9079 98.1726 99.3915
H-19	99.49263822115384	max _ ending _ here = max _ ending _ here ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 95.452 99.4575
H-19	99.489892578125	max _ ending _ here = max _ ending _ here + $STRING$ ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 94.4666 99.8361 99.5677
H-19	99.48871612548828	max _ ending _ here = Math . max ( arr , x ) ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 97.8815 99.9987 99.9787 99.9982 97.0674 99.2201 99.5191 99.4424 99.9823 99.6701
H-19	99.4846923828125	max _ ending _ here -= max _ ending _ here + x ;
P-19	99.9924 99.753 99.9881 99.8541 95.0443 99.1495 99.984 99.8359 99.9924 99.9561 99.8556 99.7445 99.9713 99.6367
H-19	99.47388458251953	max _ so _ far = Math . max ( arr , x ) ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 99.6193 99.9989 99.9807 99.9983 96.6627 99.305 99.5357 99.5678 99.9797 99.677
H-19	99.47140299479166	max _ ending _ here = max _ ending _ here - x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 94.2345 99.8588 99.986 99.4968
H-19	99.44253976004464	max _ ending _ here = Math . max ( arr ) ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 97.8815 99.9987 99.9787 99.9982 97.0674 98.5967 99.9675 99.6461
H-19	99.43688151041667	max _ ending _ here = max _ so _ far + 0 ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 97.4972 99.9962 99.9264 99.9562 95.9668 99.9252 99.6047
H-19	99.42825520833334	max _ so _ far = max _ so _ far + 1 ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 98.4448 99.9893 98.6529 99.9969 99.9451 99.9544 97.6421 99.9687 99.5724
H-19	99.42366536458333	max _ ending _ here = max _ so _ far + $NUMBER$ ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 97.4972 99.9962 99.9264 99.9562 95.7736 99.9041 99.6205
H-19	99.41783989800348	max _ ending _ here = x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 96.5033 99.8443 99.3522
H-19	99.41136823381696	max _ so _ far = Math . max ( arr ) ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 99.6193 99.9989 99.9807 99.9983 96.6627 98.6439 99.9537 99.6445
H-19	99.37560096153847	max _ ending _ here = max _ so _ far ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 97.4972 99.9962 99.9264 96.2688 99.5135
H-19	99.35544996995192	max _ ending _ here = max _ ending _ here +
P-19	99.9924 99.753 99.9881 99.8541 99.9608 99.6325 99.9875 99.8685 99.9919 99.9537 99.9831 93.1429
H-19	99.35531616210938	max _ ending _ here = ( int ) x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 96.3457 99.4153 99.9673 98.0386 99.9868 99.4493
H-19	99.34366861979167	max _ ending _ here = 0 ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 95.7577 99.9305 99.344
H-19	99.31431070963542	max _ ending _ here = ( int ) 1 ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 96.3457 99.4153 99.9673 97.5386 99.9361 99.5081
H-19	99.30643920898437	if ( max _ ending _ here ) {
P-19	99.9972 99.0926 99.9934 99.465 99.9937 99.9086 98.71 99.7721 99.1382
H-19	99.26523166232639	for ( int x : arr ) {
P-19	99.9926 99.955 99.8706 99.9414 99.9117 99.9863 99.9234 99.1525
H-19	99.25634765625	max _ ending _ here = x + x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 96.5033 97.5535 99.4572 99.8915 99.3535
H-19	99.24708140980114	retval = max _ ending _ here + x ;
P-19	99.7536 99.2371 99.9931 99.5576 99.9894 99.9181 99.9801 99.7904 99.953 99.5616
H-19	99.23871404474431	if ( max _ ending _ here + x ;
P-19	99.9972 99.0926 99.9934 99.465 99.9937 99.9086 99.1907 99.6471 98.1265 99.2174
H-19	99.21666370738636	max _ ending _ here = Math . max (
P-19	99.9924 99.753 99.9881 99.8541 99.9608 97.8815 99.9987 99.9787 99.9982 94.4653
H-19	99.20872913707386	max _ so _ far = Math . max (
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 99.6193 99.9989 99.9807 99.9983 94.4417
H-19	99.20318048650569	max _ ending _ here = 1 + x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 94.558 98.9511 99.2997 99.9509 99.4146
H-19	99.18519176136364	result = max _ ending _ here + x ;
P-19	99.1946 99.2707 99.9939 99.4095 99.9913 99.9124 99.9702 99.7886 99.9557 99.6373
H-19	99.17665405273438	return max _ ending _ here + x ;
P-19	99.0792 99.9933 99.4135 99.9927 99.9111 99.9594 99.7353 99.9578 99.6896
H-19	99.16908094618056	max _ ending _ here = 1 ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 94.558 99.5396 99.3633
H-19	99.15838623046875	max _ ending _ here = - 1 ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 94.1544 99.0051 99.9761 99.3874
H-19	99.15637885199652	max _ ending _ here = false ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 94.0598 99.9424 99.3444
H-19	99.15150960286458	max _ so _ far = 0 ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 95.6955 99.943 99.468
H-19	99.15051947699652	max _ ending _ here += x ;
P-19	99.9924 99.753 99.9881 99.8541 95.86 98.0182 99.9439 99.4325
H-19	99.14312744140625	max _ ending _ here -= x ;
P-19	99.9924 99.753 99.9881 99.8541 95.0443 98.7816 99.9581 99.4041
H-19	99.1387451171875	max _ ending _ here = - x ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 94.1544 98.8871 99.9462 99.339
H-19	99.13389756944444	max _ ending _ here = true ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 93.8995 99.9088 99.336
H-19	99.12019653320313	int max _ ending _ here = 0 ;
P-19	98.7388 99.9936 98.9329 99.9635 99.741 99.9621 97.6372 99.9787 99.0576
H-19	99.11942138671876	if ( max _ so _ far ) {
P-19	99.9972 99.0926 99.9934 98.8984 99.9962 99.9067 97.7671 99.7429 98.8062
H-19	99.11201307508681	max _ so _ far = x ;
P-19	99.9924 97.9435 99.9956 99.8612 99.9519 95.5169 99.7542 99.4799
H-19	99.09219699435764	byte [ ] arr : arr ) {
P-19	99.8792 99.9881 99.1604 98.9373 99.7766 98.7636 99.9138 99.0539
H-19	99.05746120876736	max _ ending _ here = $STRING$ ;
P-19	99.9924 99.753 99.9881 99.8541 99.9608 93.4336 99.7085 99.3143
H-19	99.04569498697917	if ( max _ ending _ here )
P-19	99.9972 99.0926 99.9934 99.465 99.9937 99.9086 98.71 97.2572
H-19	99.04426792689732	max _ ending _ here =
P-19	99.9924 99.753 99.9881 99.8541 99.9608 94.2491
H-19	99.0289535522461	max _ ending _ here -- ;
P-19	99.9924 99.753 99.9881 99.8541 94.1997 99.4382 99.4937
H-19	98.97886657714844	max _ ending _ here ++ ;
P-19	99.9924 99.753 99.9881 99.8541 93.7635 99.4454 99.522
H-19	98.9460678100586	max _ ending _ here = {
P-19	99.9924 99.753 99.9881 99.8541 99.9608 93.4929 99.0148
H-19	98.74375406901042	synchronized ( arr ) {
P-19	99.9887 99.0367 99.9948 99.9731 98.7613
H-19	97.80675506591797	-- x ;
P-19	98.4708 99.9944 99.1834
H-19	97.50855509440105	try {
P-19	99.9951 98.3336
H-19	97.18400065104167	if (
P-19	99.9972 94.5612
S-20	if ( arr . size ( ) == 0 )
T-20	if ( arr . size ( ) <= 1 )
H-20	99.95806206597223	if ( arr . size ( ) == 0 ) { return arr ; } else {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 99.401 99.6572 99.9184 99.8339 99.6224 99.9135 101.638
H-20	99.93412780761719	if ( arr . size ( ) == 0 ) { return arr ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 99.401 99.6572 99.9184 99.8339 100.8749
H-20	99.85361735026042	if ( arr . size ( ) == 0 ) {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 98.9828
H-20	99.78228081597223	if ( arr . size ( ) != 0 ) { return arr ; } else {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 97.0522 99.7731 99.9253 99.8262 99.3436 99.7304 99.8177 99.8214 99.5863 99.9117 101.6501
H-20	99.7553466796875	if ( arr . size ( ) == 0 ) { return arr ;
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 99.401 99.6572 99.9184 98.093
H-20	99.75434027777777	if ( arr . size ( ) > 0 ) { return arr ; } else {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 96.4249 99.944 99.9597 99.8804 99.1476 99.7186 99.8031 99.8098 99.6985 99.8992 101.6492
H-20	99.74254653033088	if ( arr . size ( ) == 0 ) { return arr ; } else
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 99.401 99.6572 99.9184 99.8339 99.6224 97.9297
H-20	99.74150085449219	if ( arr . size ( ) != 0 ) { return arr ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 97.0522 99.7731 99.9253 99.8262 99.3436 99.7304 99.8177 99.8214 100.9309
H-20	99.73495144314236	if ( arr . is CaMeL Empty ( ) ) { return arr ; } else {
P-20	99.9996 99.8704 99.9596 96.4201 99.9965 99.9798 99.9999 99.998 99.8261 99.8567 99.112 99.6136 99.8624 99.8356 99.6773 99.9041 101.4496
H-20	99.73065863715277	if ( arr . size ( ) == 1 ) { return arr ; } else {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 95.9267 99.9331 99.8305 99.3163 99.6755 99.9163 99.8248 99.6573 99.8999 101.6419
H-20	99.71581268310547	if ( arr != null && arr . size ( ) == 0 ) {
P-20	99.9996 99.8704 95.6112 99.9593 98.6143 99.8574 99.959 99.9375 99.9997 99.9996 99.8831 99.8743 99.9647 99.8352 102.2193
H-20	99.71504429408482	if ( arr . size ( ) == 0 ) return arr ;
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 97.6964 99.4881 99.9537 99.4652
H-20	99.71186379825367	if ( arr . size ( ) == 0 ) return arr ; return arr ;
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 97.6964 99.4881 99.9537 96.9282 99.1462 99.7467 102.7351
H-20	99.7037353515625	if ( ! arr . size ( ) == 0 ) { return arr ; }
P-20	99.9996 96.4353 99.8347 99.9828 99.8857 99.9998 99.9996 99.0352 99.8836 99.9351 99.8342 99.3643 99.5557 99.9371 99.8435 101.569
H-20	99.67926788330078	if ( arr . size ( ) > 0 ) { return arr ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 96.4249 99.944 99.9597 99.8804 99.1476 99.7186 99.8031 99.8098 100.537
H-20	99.676513671875	if ( arr . size ( ) == 0 ) { return null ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 99.401 95.0729 99.998 99.8987 101.1931
H-20	99.6695327758789	if ( arr . size ( ) == 1 ) { return arr ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 95.9267 99.9331 99.8305 99.3163 99.6755 99.9163 99.8248 100.7598
H-20	99.66061401367188	if ( ! arr . size ( ) == 0 ) { return arr ;
P-20	99.9996 96.4353 99.8347 99.9828 99.8857 99.9998 99.9996 99.0352 99.8836 99.9351 99.8342 99.3643 99.5557 99.9371 101.0188
H-20	99.65522766113281	if ( arr . size ( ) == 0 ) { return false ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 99.401 94.626 99.9973 99.9356 101.2633
H-20	99.6431884765625	if ( ! arr . size ( ) ) { return arr ; } else {
P-20	99.9996 96.4353 99.8347 99.9828 99.8857 99.9998 99.9996 98.6227 99.8693 99.3435 99.553 99.9038 99.8083 99.433 99.9059 101.4891
H-20	99.6402359008789	if ( arr . size ( ) == $NUMBER$ ) { return arr ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 95.5794 99.8992 99.7867 99.3063 99.6745 99.9206 99.8269 100.7205
H-20	99.6292495727539	if ( arr != null || arr . size ( ) == 0 ) {
P-20	99.9996 99.8704 95.6112 99.9593 97.2212 99.8685 99.9607 99.934 99.9998 99.9997 99.8973 99.8908 99.9612 99.8344 102.1919
H-20	99.62505340576172	if ( arr . size ( ) <= 0 ) { return arr ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 95.1728 99.7588 99.9366 99.8255 99.3887 99.6274 99.9202 99.8125 100.9153
H-20	99.62136840820312	if ( arr . size ( ) == 0 ) return arr ; else {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 97.6964 99.4881 99.9537 97.1633 98.6488 101.5843
H-20	99.62108612060547	if ( arr == null && arr . size ( ) == 0 ) {
P-20	99.9996 99.8704 95.2959 99.9734 97.5597 99.8267 99.9538 99.9433 99.9997 99.9996 99.882 99.8922 99.9668 99.8452 102.061
H-20	99.61417388916016	if ( arr . size ( ) == 0 ) { return mergesort ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 99.401 94.8063 99.4049 99.8685 101.0856
H-20	99.60400390625	if ( arr . size ( ) == 0 ) { return $STRING$ ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 99.401 94.0566 99.9625 99.891 101.0926
H-20	99.60359191894531	if ( arr . size ( ) == 0 ) { return true ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 99.401 93.9729 99.9969 99.9365 101.0896
H-20	99.60207297585227	if ( arr . size ( ) == 0 )
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 96.2156
H-20	99.59827677408855	if ( arr . size ( ) != 0 ) {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 97.0522 99.7731 99.9253 99.8262 98.9593
H-20	99.58883666992188	if ( arr . size ( ) == 0 ) { return $NUMBER$ ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 99.401 93.9249 99.9696 99.9042 100.9611
H-20	99.58767700195312	if ( arr . length == 0 ) { return arr ; } else {
P-20	99.9996 99.8704 99.9596 94.734 99.809 99.8261 99.7974 99.7337 99.3825 99.6387 99.9571 99.8534 99.5785 99.901 101.494
H-20	99.58757781982422	if ( arr . size ( ) >= 0 ) { return arr ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 94.9661 99.6037 99.9454 99.8253 99.2705 99.6974 99.8238 99.7974 100.8284
H-20	99.5844217936198	if ( arr . size ( ) > 0 ) {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 96.4249 99.944 99.9597 99.8804 99.1609
H-20	99.58207702636719	if ( arr . size ( ) == arr . size ( ) ) {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 95.1904 99.9937 99.9589 99.9999 99.9998 99.773 99.7351 99.1328
H-20	99.5793098000919	if ( ( arr . size ( ) == 0 ) ) { return arr ;
P-20	99.9996 94.9269 99.8918 99.9367 99.9645 99.9999 99.9997 99.7175 99.9304 99.9783 99.1448 99.7986 99.0462 99.5469 99.9239 101.1746
H-20	99.5753173828125	if ( arr . is CaMeL Empty ( ) ) {
P-20	99.9996 99.8704 99.9596 96.4201 99.9965 99.9798 99.9999 99.998 99.8261 99.8567 99.1292
H-20	99.57370174632354	if ( arr . size ( ) == 0 ) { { return arr ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 94.1876 99.2451 99.575 99.847 99.8844 100.7532
H-20	99.57032775878906	if ( arr . size ( ) == null ) { return arr ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 93.9195 99.9051 99.7749 99.5112 99.5429 99.8932 99.8582 101.1906
H-20	99.56962316176471	if ( arr . size ( ) == - 1 ) { return arr ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 94.5814 99.4416 99.9256 99.7719 99.2023 99.5731 99.9103 99.8329 100.9147
H-20	99.56684112548828	if ( arr . size ( ) == 0 ) { return 0 ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 99.401 93.3313 99.9943 99.8984 101.1839
H-20	99.5633773803711	if ( arr . size ( ) == - 1 ) { return arr ;
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 94.5814 99.4416 99.9256 99.7719 99.2023 99.5731 99.9103 101.0779
H-20	99.55364990234375	if ( arr . size ( ) != arr . size ( ) ) {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 97.0522 97.4995 99.9956 99.9566 99.9999 99.9998 99.8713 99.7428 99.0977
H-20	99.55303192138672	if ( arr . size ( ) == 0 ) { { return arr ;
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 94.1876 99.2451 99.575 99.847 100.7331
H-20	99.55148111979166	if ( arr . size ( ) != 0 ) { return arr ;
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 97.0522 99.7731 99.9253 99.8262 99.3436 99.7304 99.8177 98.1606
H-20	99.54958926930146	if ( arr . size ( ) != 0 ) { return arr ; } else
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 97.0522 99.7731 99.9253 99.8262 99.3436 99.7304 99.8177 99.8214 99.5863 97.8236
H-20	99.52768841911765	if ( arr . size ( ) > 0 ) { return arr ; } else
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 96.4249 99.944 99.9597 99.8804 99.1476 99.7186 99.8031 99.8098 99.6985 97.9409
H-20	99.52592198988971	if ( ! arr . size ( ) . is CaMeL Empty ( ) ) {
P-20	99.9996 96.4353 99.8347 99.9828 99.8857 99.9998 99.9996 98.3281 98.8374 99.9978 99.9672 99.9999 99.9989 99.8541 99.8561 99.0953
H-20	99.52494303385417	if ( arr . size ( ) == 1 ) {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 95.9267 99.9331 99.8305 99.0793
H-20	99.52253723144531	if ( arr . size ( ) < 0 ) { return arr ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 95.117 98.1887 99.9425 99.8064 99.4373 99.6482 99.8945 99.84 100.8429
H-20	99.52233014787946	if ( arr . size ( ) != 0 ) return arr ;
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 97.0522 99.7731 99.9253 97.8307 99.6838 99.8982 99.5062
H-20	99.5159423828125	if ( arr . size ( ) > 0 ) { return arr ;
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 96.4249 99.944 99.9597 99.8804 99.1476 99.7186 99.8031 98.2177
H-20	99.51548414963942	if ( ! arr . size ( ) == 0 ) {
P-20	99.9996 96.4353 99.8347 99.9828 99.8857 99.9998 99.9996 99.0352 99.8836 99.9351 99.8342 99.0076
H-20	99.51406860351562	if ( arr . size ( ) < $NUMBER$ ) { return arr ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 95.117 98.3706 99.9048 99.743 99.3366 99.6542 99.893 99.835 100.728
H-20	99.51145935058594	if ( arr . size ( ) < arr . size ( ) ) {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 95.117 98.9844 99.9952 99.9562 99.9999 99.9998 99.7095 99.7398 99.0385
H-20	99.50726677389706	if ( arr . size ( ) == 1 ) { return arr ; } else
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 95.9267 99.9331 99.8305 99.3163 99.6755 99.9163 99.8248 99.6573 98.0134
H-20	99.49641927083333	if ( arr . is CaMeL Empty ( ) ) { return arr ;
P-20	99.9996 99.8704 99.9596 96.4201 99.9965 99.9798 99.9999 99.998 99.8261 99.8567 99.112 99.6136 99.8624 98.0836
H-20	99.49080403645833	if ( arr . size ( ) == $NUMBER$ ) {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 95.5794 99.8992 99.7867 99.0947
H-20	99.48467610677083	if ( arr . size ( ) == 1 ) { return arr ;
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 95.9267 99.9331 99.8305 99.3163 99.6755 99.9163 98.1423
H-20	99.4619140625	if ( arr . size ( ) > 0 ) return arr ;
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 96.4249 99.944 99.9597 97.439 99.6674 99.8901 99.4987
H-20	99.46150716145833	if ( arr . size ( ) == 0 ) { continue ; }
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 93.3443 99.9857 99.9296 99.4026
H-20	99.45732770647321	if ( ( arr . size ( ) == 0 ) ) {
P-20	99.9996 94.9269 99.8918 99.9367 99.9645 99.9999 99.9997 99.7175 99.9304 99.9783 99.1448 99.7986 99.2459
H-20	99.45516764322916	if ( arr . size ( ) == $NUMBER$ ) { return arr ;
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 95.5794 99.8992 99.7867 99.3063 99.6745 99.9206 98.1311
H-20	99.45306396484375	if ( arr . is CaMeL Empty ( ) ) return arr ;
P-20	99.9996 99.8704 99.9596 96.4201 99.9965 99.9798 99.9999 99.998 99.8261 97.5218 99.5653 99.898 99.4397
H-20	99.44478352864583	if ( arr . contains ( arr . size ( ) ) ) {
P-20	99.9996 99.8704 99.9596 95.3678 99.8717 99.5808 99.2749 98.8572 99.9998 99.9997 99.9218 99.9247 99.8535 99.3222
H-20	99.4425048828125	if ( arr . size ( ) <= 0 ) {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 95.1728 99.7588 99.9366 99.8255 98.9733
H-20	99.43975830078125	if ( arr . size ( ) == 1 ) return arr ;
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 95.9267 99.9331 97.825 99.5384 99.9543 99.4494
H-20	99.43898362379808	return new Array CaMeL List < Integer > ( $NUMBER$ ) ;
P-20	98.4012 99.9701 99.9986 99.9895 99.9515 99.9064 99.9366 99.9989 99.6446 99.9783 99.9959 99.7416
H-20	99.43414713541667	if ( arr . size ( ) == 0 ) return arr ; else
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 97.6964 99.4881 99.9537 97.1633 97.8035
H-20	99.42908586774554	if ( arr . size ( ) == $NUMBER$ ) return arr ;
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 95.5794 99.8992 98.0476 99.5378 99.9544 99.459
H-20	99.42792619977679	if ( arr . size ( ) == 0 ) return null ;
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 97.6964 95.3991 99.9974 99.4908
H-20	99.4172871907552	if ( arr . size ( ) >= 0 ) {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 94.9661 99.6037 99.9454 99.8253 99.0237
H-20	99.41592172475961	if ( arr . size ( ) == 0 ) { {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 99.938 99.9395 99.8534 94.1876 98.9589
H-20	99.41541466346153	if ( arr . size ( ) == - 1 ) {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 94.5814 99.4416 99.9256 99.7719 99.1501
H-20	99.410400390625	if ( ! arr . size ( ) ) {
P-20	99.9996 96.4353 99.8347 99.9828 99.8857 99.9998 99.9996 98.6227 99.8693 99.0169
H-20	99.38289701021634	if ( ! arr . is CaMeL Empty ( ) ) {
P-20	99.9996 96.4353 99.8347 99.9828 97.0997 99.9975 99.9685 99.9999 99.9979 99.8669 99.8376 99.0892
H-20	99.35692249644886	if ( arr . contains ( arr ) ) {
P-20	99.9996 99.8704 99.9596 95.3678 99.8717 99.5808 99.2755 99.953 99.82 99.3597
H-20	99.32722981770833	if ( arr . size ( ) == null ) {
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 93.9195 99.9051 99.7749 98.7976
H-20	99.32485129616477	if ( arr . size ( ) != 0 )
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 97.0522 99.7731 99.9253 96.1796
H-20	99.3021240234375	if ( is CaMeL Empty ( arr ) ) {
P-20	99.9996 94.6008 99.9827 99.3938 99.973 99.8401 99.7949 99.9237 99.7138 99.2329
H-20	99.28594415838069	if ( arr . is CaMeL Empty ( ) )
P-20	99.9996 99.8704 99.9596 96.4201 99.9965 99.9798 99.9999 99.998 99.8261 96.2274
H-20	99.26657936789773	if ( arr . size ( ) > 0 )
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 96.4249 99.944 99.9597 95.9608
H-20	99.25858154296876	if ( arr . length == 0 ) {
P-20	99.9996 99.8704 99.9596 94.734 99.809 99.8261 99.7974 99.7337 98.9881
H-20	99.25063254616477	if ( arr . size ( ) == 1 )
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 95.9267 99.9331 96.3674
H-20	99.23285466974431	if ( arr . size ( ) == $NUMBER$ )
P-20	99.9996 99.8704 99.9596 99.946 99.9999 99.9996 99.8866 95.5794 99.8992 96.5532
H-20	99.2012710571289	if ( arr != null ) {
P-20	99.9996 99.8704 95.6112 99.9593 99.5551 99.6879 99.0586
H-20	99.1958984375	if ( arr != null ) return arr ;
P-20	99.9996 99.8704 95.6112 99.9593 99.5551 98.0018 99.686 99.9553 99.4522
H-20	99.03250122070312	if ( arr == null ) {
P-20	99.9996 99.8704 95.2959 99.9734 99.8248 99.5266 97.9014
H-20	98.88914489746094	if ( arr <= 0 ) {
P-20	99.9996 99.8704 93.8625 98.8136 99.8634 99.8109 99.0247
H-20	98.85246276855469	super . mergesort ( arr ) ;
P-20	99.9465 99.5234 99.9978 99.6791 99.7281 99.9632 99.548
H-20	98.82852608816964	if ( arr == null )
P-20	99.9996 99.8704 95.2959 99.9734 99.8248 96.9676
H-20	98.80673217773438	if ( false ) {
P-20	99.9996 94.1616 99.7976 99.8689 99.1446
H-20	98.74609375	if ( arr ) {
P-20	99.9996 99.8704 93.6713 99.8455 99.2217
H-20	98.74439348493304	if ( arr != null )
P-20	99.9996 99.8704 95.6112 99.9593 99.5551 96.3471
H-20	98.70620291573661	return mergesort ( arr ) ;
P-20	97.6648 99.8765 99.1319 99.3639 99.9737 99.7388
H-20	98.6595458984375	synchronized ( arr ) {
P-20	99.9997 99.79 99.9516 99.9893 99.0741
H-20	98.65315755208333	if ( true ) {
P-20	99.9996 93.1822 99.8267 99.8599 99.1825
H-20	98.638916015625	boolean mergesort ( arr ) {
P-20	98.4195 99.1225 99.4602 99.0791 99.9342 99.4207
H-20	98.29559326171875	return arr ; }
P-20	99.0244 99.3942 98.8238 99.0416
H-20	98.17449951171875	if ( arr [
P-20	99.9996 99.8704 95.004 96.1305
S-21	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u ) ;
T-21	group CaMeL By CaMeL Node . put ( node , group CaMeL By CaMeL Node . get ( vertex _ u ) ) ;
H-21	99.85338245738636	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 99.5534 98.9808 99.9989 99.7304
H-21	99.85221724076705	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 98.9392 99.5821 99.9989 99.7175
H-21	99.84981595552884	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 99.5534 99.3963 99.6826 99.96 99.5627 99.6924 99.999 99.738
H-21	99.80804912860577	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , vertex _ u ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 99.5534 99.3963 99.6826 99.96 98.9215 99.2369 99.999 99.7488
H-21	99.8001239483173	group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < > ( vertex _ v ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.4662 99.9684 99.7735 99.9612 99.9993 99.9801 99.9942 99.5406 99.9979 99.1058 99.9459 99.4387 99.9918 99.9969 99.9992 99.6517
H-21	99.7955791766827	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ v , vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 98.9392 98.8905 99.4437 99.9591 99.5439 99.6679 99.999 99.7309
H-21	99.78660231370192	group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < > ( vertex _ u ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.4662 99.9684 99.7735 99.9612 99.9993 99.9801 99.9942 99.5406 99.9979 99.1058 99.9459 99.1239 99.9446 99.9957 99.9992 99.6631
H-21	99.78516564002403	group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < > ( vertex _ v ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.0877 99.9779 99.7828 99.9594 99.9993 99.981 99.9944 99.5449 99.998 99.0444 99.9471 99.4671 99.9911 99.9974 99.9992 99.6509
H-21	99.77694589120371	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , vertex _ v ) ; }
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 99.5534 99.3963 99.6826 99.96 99.5627 99.6924 99.999 98.2561 99.3642
H-21	99.77066703464673	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ v ) ; }
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 98.9392 99.5821 99.9989 98.3433 99.3507
H-21	99.7692234205163	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u ) ; }
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 99.5534 98.9808 99.9989 98.3012 99.347
H-21	99.76882699819711	group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < > ( vertex _ u ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.0877 99.9779 99.7828 99.9594 99.9993 99.981 99.9944 99.5449 99.998 99.0444 99.9471 99.0826 99.94 99.9965 99.9992 99.6626
H-21	99.7659403483073	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 97.7477 99.9745 99.6478 99.7151 99.6119 99.9702 99.4379 99.6036 99.9989 99.7001
H-21	99.762939453125	group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < Node >> ( vertex _ v ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.4662 99.9684 99.7735 99.9612 99.9993 99.9801 99.9942 98.9175 99.3056 99.9967 99.3292 99.9344 99.3533 99.9824 99.9949 99.9992 99.6515
H-21	99.76092059795673	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ v , vertex _ u ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 98.9392 98.8905 99.4437 99.9591 98.9564 99.345 99.999 99.7405
H-21	99.76058846932871	group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < Node > ( vertex _ v ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.4662 99.9684 99.7735 99.9612 99.9993 99.9801 99.9942 98.9175 99.2074 99.9963 99.3444 99.9373 99.362 99.9837 99.997 99.9993 99.6563
H-21	99.75637478298611	group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < Node >> ( vertex _ u ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.4662 99.9684 99.7735 99.9612 99.9993 99.9801 99.9942 98.9175 99.3056 99.9967 99.3292 99.9344 99.2375 99.9115 99.9918 99.9992 99.664
H-21	99.75420464409723	group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < Node > ( vertex _ u ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.4662 99.9684 99.7735 99.9612 99.9993 99.9801 99.9942 98.9175 99.2074 99.9963 99.3444 99.9373 99.2269 99.9355 99.9954 99.9993 99.669
H-21	99.75250244140625	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node , vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 97.4053 99.4669 99.8218 99.9732 99.1852 99.7369 99.9992 99.7364
H-21	99.74810112847223	group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < Node >> ( vertex _ v ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.0877 99.9779 99.7828 99.9594 99.9993 99.981 99.9944 98.9117 99.2927 99.9969 99.2703 99.9359 99.3903 99.9803 99.9959 99.9992 99.6509
H-21	99.74653682002315	group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < Node > ( vertex _ v ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.0877 99.9779 99.7828 99.9594 99.9993 99.981 99.9944 98.9117 99.2205 99.9966 99.295 99.9399 99.3843 99.9818 99.9975 99.9993 99.6554
H-21	99.74618530273438	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node , vertex _ u ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 97.4053 99.4669 99.8218 99.9732 99.39 99.3679 99.9992 99.7488
H-21	99.742919921875	group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < > ( vertex _ v ) ) ; }
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.4662 99.9684 99.7735 99.9612 99.9993 99.9801 99.9942 99.5406 99.9979 99.1058 99.9459 99.4387 99.9918 99.9969 99.9992 98.5494 99.358
H-21	99.74051339285714	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , vertex _ u , vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 97.7477 99.9745 99.6478 99.7151 99.6119 99.9702 99.1284 99.3495 99.649 99.9649 99.5494 99.7247 99.9989 99.7273
H-21	99.73840784143519	group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < Node >> ( vertex _ u ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.0877 99.9779 99.7828 99.9594 99.9993 99.981 99.9944 98.9117 99.2927 99.9969 99.2703 99.9359 99.1939 99.9049 99.9936 99.9992 99.6633
H-21	99.73819082754629	group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < Node > ( vertex _ u ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.0877 99.9779 99.7828 99.9594 99.9993 99.981 99.9944 98.9117 99.2205 99.9966 99.295 99.9399 99.2005 99.9291 99.9963 99.9993 99.6681
H-21	99.73479094328704	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , vertex _ u ) ; }
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 99.5534 99.3963 99.6826 99.96 98.9215 99.2369 99.999 98.2178 99.3612
H-21	99.73379080636161	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node , vertex _ u , vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 97.4053 99.4669 99.8218 99.9732 99.39 99.0513 99.6424 99.9683 99.5781 99.7615 99.999 99.7531
H-21	99.73256429036458	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , vertex _ u ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 97.7477 99.9745 99.6478 99.7151 99.6119 99.9702 99.1284 99.098 99.999 99.7139
H-21	99.72908528645833	group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < > ( vertex _ v ) ) ; }
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.0877 99.9779 99.7828 99.9594 99.9993 99.981 99.9944 99.5449 99.998 99.0444 99.9471 99.4671 99.9911 99.9974 99.9992 98.5631 99.3585
H-21	99.72888635706019	group CaMeL By CaMeL Node . put ( vertex _ u , new Hash CaMeL Set < > ( vertex _ u ) ) ; }
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.4662 99.9684 99.7735 99.9612 99.9993 99.9801 99.9942 99.5406 99.9979 99.1058 99.9459 99.1239 99.9446 99.9957 99.9992 98.5229 99.3684
H-21	99.72742716471355	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , node ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 99.5534 99.3963 97.1742 99.1041 99.9993 99.7202
H-21	99.72652587890624	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 97.4053 98.6813 99.9992 99.7095
H-21	99.72591145833333	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ v , vertex _ v ) ; }
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 98.9392 98.8905 99.4437 99.9591 99.5439 99.6679 99.999 98.2761 99.3693
H-21	99.72384033203124	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 97.7477 99.9745 99.6478 98.4436 99.9987 99.6895
H-21	99.72297886439732	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , vertex _ v , vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 97.7477 99.9745 99.6478 99.7151 99.6119 99.9702 99.4379 98.855 99.44 99.9626 99.5532 99.6315 99.9989 99.7217
H-21	99.72178297776442	group CaMeL By CaMeL Node = new Hash CaMeL Set < > ( Arrays . as CaMeL List ( vertex _ v ) ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 96.4961 99.8465 99.9991 99.9774 99.9958 99.3109 99.9977 99.3356 99.9979 99.9818 99.9971 99.9968 99.9951 99.739 99.9372 99.5366 99.9962 99.9848 99.9978 99.4454
H-21	99.71552385602679	group CaMeL By CaMeL Node = new Hash CaMeL Set < > ( group CaMeL By CaMeL Node . get ( vertex _ v ) ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 96.4961 99.8465 99.9991 99.9774 99.9958 99.3109 99.9977 98.6346 99.9975 99.9878 99.9986 99.9973 99.8582 99.9904 99.982 99.8781 99.9846 99.5788 99.9981 99.9672 99.9983 99.3578
H-21	99.7148193359375	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 97.7477 99.9745 98.749 99.1771 99.9984 99.6748
H-21	99.71225766782408	group CaMeL By CaMeL Node . put ( vertex _ v , new Hash CaMeL Set < > ( vertex _ u ) ) ; }
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.0877 99.9779 99.7828 99.9594 99.9993 99.981 99.9944 99.5449 99.998 99.0444 99.9471 99.0826 99.94 99.9965 99.9992 98.5356 99.3684
H-21	99.71181815011161	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u , node , vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 99.5534 99.3963 97.1742 98.6229 99.7741 99.9693 99.384 99.7885 99.9991 99.7584
H-21	99.71115451388889	group CaMeL By CaMeL Node . put ( vertex _ u , group CaMeL By CaMeL Node . get ( vertex _ v ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.4662 99.9684 95.8165 99.9541 99.9834 99.9993 99.997 99.8935 99.99 99.993 99.7848 99.9794 99.7927 99.9983 99.9877 99.9996 99.6051
H-21	99.70637116608796	group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , update ( group CaMeL By CaMeL Node , node ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 98.0734 99.8934 99.9839 99.9918 99.9985 99.841 99.0357 99.989 99.9041 99.9977 99.9865 99.9979 99.998 99.9125 99.8134 97.411 99.9958 99.9996 99.7282
H-21	99.7055155436198	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ v , vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 97.7477 99.9745 98.749 99.4054 99.4289 99.968 99.4338 99.5588 99.9989 99.6921
H-21	99.70501030815973	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 96.2862 99.9992 99.622
H-21	99.7020953634511	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node . get ( vertex _ v ) ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 95.5999 99.9785 99.9801 99.8449 99.9825 99.5954 99.9984 99.7276 99.9988 99.4508
H-21	99.69977276141827	group CaMeL By CaMeL Node = new Hash CaMeL Set < > ( Arrays . as CaMeL List ( vertex _ u ) ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 96.4961 99.8465 99.9991 99.9774 99.9958 99.3109 99.9977 99.3356 99.9979 99.9818 99.9971 99.9968 99.9951 99.739 99.9372 98.9672 99.9831 99.9802 99.9979 99.4602
H-21	99.69883219401042	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ v , node ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 98.9392 98.8905 97.4114 99.31 99.9993 99.7106
H-21	99.69643373842592	group CaMeL By CaMeL Node . put ( vertex _ v , group CaMeL By CaMeL Node . get ( vertex _ v ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.0877 99.9779 95.8082 99.9376 99.9829 99.9993 99.997 99.8852 99.9897 99.9934 99.7891 99.9795 99.7943 99.9983 99.9871 99.9996 99.6053
H-21	99.6961200420673	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , node , vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 97.7477 99.9745 99.6478 99.7151 98.1323 99.4941 99.8423 99.9688 99.1306 99.7269 99.9991 99.7451
H-21	99.69451171875	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , vertex _ v ) ; }
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 97.7477 99.9745 99.6478 99.7151 99.6119 99.9702 99.4379 99.6036 99.9989 98.3688 99.3114
H-21	99.69353515625	group CaMeL By CaMeL Node . add ( update ( group CaMeL By CaMeL Node , node , vertex _ u ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 97.6926 99.9394 98.1363 99.9762 99.8831 99.997 99.9893 99.9976 99.9983 99.9681 99.8605 99.9394 99.766 99.9795 99.526 99.3067 99.9937 99.9996 99.7335
H-21	99.6931621844952	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , node , vertex _ u ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 97.7477 99.9745 99.6478 99.7151 98.1323 99.4941 99.8423 99.9688 99.4269 99.3419 99.9991 99.7567
H-21	99.69100952148438	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ v ) ; } }
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 98.9392 99.5821 99.9989 98.3433 98.3562 98.8535
H-21	99.68899536132812	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u ) ; } }
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 99.5534 98.9808 99.9989 98.3012 98.35 98.8406
H-21	99.68662109375	group CaMeL By CaMeL Node . add ( update ( group CaMeL By CaMeL Node , node , vertex _ v ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 97.6926 99.9394 98.1363 99.9762 99.8831 99.997 99.9893 99.9976 99.9983 99.9681 99.8605 99.9394 99.766 99.9795 98.989 99.6803 99.9939 99.9996 99.7241
H-21	99.68284009850544	group CaMeL By CaMeL Node . add ( group CaMeL By CaMeL Node . get ( vertex _ v ) ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 97.6926 99.9394 98.572 99.9572 99.9895 99.999 99.9983 99.1846 99.8928 99.9318 99.7317 99.978 99.6593 99.998 99.989 99.9995 99.5368
H-21	99.680400390625	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node , vertex _ v ) ; }
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 97.4053 99.4669 99.8218 99.9732 99.1852 99.7369 99.9992 98.2873 99.3989
H-21	99.67857869466145	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ v , vertex _ u ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 97.7477 99.9745 98.749 99.4054 99.4289 99.968 99.1342 99.2003 99.999 99.7039
H-21	99.672021484375	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node , vertex _ u ) ; }
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 97.4053 99.4669 99.8218 99.9732 99.39 99.3679 99.9992 98.2441 99.3968
H-21	99.66480654761905	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , vertex _ u ,
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 99.8053 99.9704 99.5534 99.3963 95.5004
H-21	99.66225798233695	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node . get ( vertex _ u ) ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 95.5999 99.9785 99.9801 99.8449 99.9825 98.8321 99.998 99.5566 99.9988 99.4697
H-21	99.66080050998264	group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , node ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 98.0734 99.8934 99.9839 99.9918 99.9985 99.841 98.7402 99.2972 99.9997 99.5548
H-21	99.65699351917614	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u , node ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 97.7477 99.9745 99.6478 99.7151 98.1323 98.5736 99.9992 99.6884
H-21	99.64643787202381	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , node ) ; }
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 97.4053 98.6813 99.9992 98.3725 99.3819
H-21	99.64354359019886	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node . vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 95.7975 99.236 99.9629 99.0346 99.701 99.9983 99.6451
H-21	99.64341905381944	group CaMeL By CaMeL Node . put ( vertex _ u , vertex _ u ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.4662 99.9684 97.1836 99.9668 99.7338 99.6333 99.9993 99.638
H-21	99.64328835227273	group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , node , vertex _ u ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 98.0734 99.8934 99.9839 99.9918 99.9985 99.841 98.7402 99.2095 99.0128 99.9515 99.5289 99.7249 99.9995 99.6825
H-21	99.64100864955357	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ u ) ; }
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 97.7477 99.9745 99.6478 98.4436 99.9987 98.3919 99.2821
H-21	99.6395263671875	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node ,
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 95.1368
H-21	99.63568405877976	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , vertex _ v ) ; }
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 97.7477 99.9745 98.749 99.1771 99.9984 98.4387 99.2891
H-21	99.63195219494048	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node . node $NUMBER$ ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 95.7975 99.016 99.7905 99.2676 99.9988 99.618
H-21	99.62240439967105	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node ) ; }
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 96.2862 99.9992 98.5365 99.2211
H-21	99.61883544921875	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , null ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 94.3361 99.6253 99.9994 99.6808
H-21	99.61507839626736	group CaMeL By CaMeL Node . put ( vertex _ v , vertex _ u ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.0877 99.9779 97.1163 99.9623 99.724 99.5845 99.9994 99.6274
H-21	99.61224975585938	group CaMeL By CaMeL Node = group CaMeL By CaMeL Node . get ( vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 95.1852 99.9848 99.9819 99.9989 99.997 99.6017 99.884 99.9896 99.5176 99.9747 99.526 99.9976 99.9921 99.4124
H-21	99.60369262695312	group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , vertex _ u ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 98.0734 99.8934 99.9839 99.9918 99.9985 99.841 96.8835 99.9588 99.5889 99.7137 99.9994 99.6271
H-21	99.60333573190789	group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , node ) ; }
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 98.0734 99.8934 99.9839 99.9918 99.9985 99.841 98.7402 99.2972 99.9997 98.7527 99.3711
H-21	99.60189819335938	if ( ! group CaMeL By CaMeL Node . contains CaMeL Key ( vertex _ u ) ) {
P-21	99.9954 99.1409 99.8122 99.989 99.987 99.9973 99.9943 99.9928 99.6611 99.8611 99.9943 99.9985 99.7445 99.9731 99.2925 99.993 99.9665 99.9129 98.2829
H-21	99.60110473632812	if ( ! group CaMeL By CaMeL Node . contains CaMeL Key ( vertex _ v ) ) {
P-21	99.9954 99.1409 99.8122 99.989 99.987 99.9973 99.9943 99.9928 99.6611 99.8611 99.9943 99.9985 99.7445 99.9731 99.2857 99.9951 99.9712 99.9127 98.2673
H-21	99.60062866210937	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , node , true ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 99.8077 99.9524 93.7548 99.8199 99.9994 99.7035
H-21	99.58917914496527	group CaMeL By CaMeL Node . put ( vertex _ u , vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.4662 99.9684 97.1836 99.9668 98.4771 99.9312 99.9995 99.6204
H-21	99.58878580729167	group CaMeL By CaMeL Node . put ( group CaMeL By CaMeL Node , edge ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 98.0734 99.8934 99.9839 99.9918 99.9985 99.841 96.9725 99.8104 99.9994 99.5133
H-21	99.58672417534723	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , null ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 94.926 99.1004 99.9991 99.5604
H-21	99.58416748046875	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , false ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 94.3708 99.5657 99.9991 99.6043
H-21	99.57723838404605	group CaMeL By CaMeL Node . put ( vertex _ u , vertex _ u ) ; }
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.4662 99.9684 97.1836 99.9668 99.7338 99.6333 99.9993 98.6046 99.4195
H-21	99.57721910978618	add ( update ( group CaMeL By CaMeL Node , node , vertex _ v ) ) ;
P-21	99.0872 98.6168 99.9574 99.9019 99.9968 99.9895 99.998 99.9982 99.9845 99.8687 99.9562 99.7722 99.9754 99.0191 99.6332 99.9743 99.9996 99.7835
H-21	99.57278603001645	add ( update ( group CaMeL By CaMeL Node , node , vertex _ u ) ) ;
P-21	99.0872 98.6168 99.9574 99.9019 99.9968 99.9895 99.998 99.9982 99.9845 99.8687 99.9562 99.7722 99.9754 99.509 99.0583 99.9695 99.9996 99.7891
H-21	99.56915283203125	group CaMeL By CaMeL Node . put ( vertex _ u , edge ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.4662 99.9684 96.3126 99.8369 99.9993 99.531
H-21	99.56598578559027	group CaMeL By CaMeL Node . put ( vertex _ v , vertex _ v ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.0877 99.9779 97.1163 99.9623 98.5117 99.929 99.9995 99.6114
H-21	99.56336127387152	group CaMeL By CaMeL Node = update ( group CaMeL By CaMeL Node , true ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 99.9442 99.9979 99.9895 99.9982 99.9984 99.9841 94.0372 99.5229 99.9991 99.606
H-21	99.54840850830078	group CaMeL By CaMeL Node . put ( vertex _ v , edge ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.0877 99.9779 96.3097 99.8964 99.9993 99.5115
H-21	99.53639221191406	group CaMeL By CaMeL Node . put ( vertex _ u , node ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.4662 99.9684 96.0383 99.5482 99.9997 99.5694
H-21	99.52751159667969	add ( group CaMeL By CaMeL Node , node , vertex _ u ) ;
P-21	99.0872 98.8019 99.9798 99.9899 99.9986 99.9982 99.938 99.7275 99.9007 99.7764 99.9758 99.654 99.3924 99.9994 99.7658
H-21	99.5079116821289	group CaMeL By CaMeL Node . put ( vertex _ v , node ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 99.5809 99.8906 99.0877 99.9779 95.87 99.6484 99.9997 99.5512
H-21	99.41892787388393	group CaMeL By CaMeL Node . put ( edge , edge ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 96.9743 99.4437 97.4514 99.9598 99.9994 99.5159
H-21	99.41232735770089	group CaMeL By CaMeL Node . put ( edge , node ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 96.9743 99.4437 97.4522 99.8377 99.9997 99.5446
H-21	99.40140206473214	group CaMeL By CaMeL Node . put ( node , edge ) ;
P-21	99.997 99.9774 99.9983 99.993 98.9941 99.8668 99.998 96.2703 99.8182 97.5458 99.9489 99.9994 99.5166
H-21	99.38960774739583	group CaMeL By CaMeL Node = update ( edge ) ;
P-21	99.997 99.9774 99.9983 99.993 99.54 99.8623 99.9989 94.7962 99.2799 99.9968 99.5395
H-21	98.36260986328125	add ( edge ) ;
P-21	99.0872 98.2763 99.9195 99.9981 96.4399
S-22	otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;
T-22	otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length - 1 , 0 ) ) ;
H-22	99.86047894021739	otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;
P-22	99.9843 99.9784 98.8942 99.9896 99.9977 99.7105 99.9997 99.9419 99.9975 99.9898 99.9979 99.8936 99.9981 99.9868 99.9868 99.9588 99.9686 99.9427 99.9387 99.992 99.9998 99.3798
H-22	99.84857732599431	otherwise . add ( 1 ) ; otherwise . add ( 1 ) ; otherwise . add ( 1 ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 98.7685 99.9796 99.9802 99.5929 99.7803 99.992 99.9931 98.5085 99.9802 99.9854 99.6537 99.7821 99.9922 99.9929 102.3856
H-22	99.76729910714286	otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;
P-22	99.9843 99.9784 99.5945 97.4274 99.9996 99.871 99.9973 99.9887 99.9971 99.8595 99.9982 99.9869 99.9862 99.9524 99.9656 99.9369 99.9288 99.9929 99.9997 99.4037
H-22	99.75431315104167	List < Integer > otherwise = new Array CaMeL List < Integer > ( ) ; otherwise . add ( 1 ) ;
P-22	99.9452 99.858 99.9682 99.7476 99.9469 99.9028 99.8975 99.9973 99.9893 99.8103 99.8719 99.972 99.9967 99.8591 99.9994 99.0068 99.9862 99.9586 99.6928 99.5642 99.9951 99.9836 102.6327
H-22	99.7328592936198	if ( low _ mid != high _ mid ) { digit _ list [ high _ mid ] += 1 ; }
P-22	99.9941 98.9363 99.9971 99.9965 99.604 99.9372 99.9985 99.9969 99.9921 99.9392 99.0781 99.997 99.9605 99.958 99.4202 99.9971 99.9882 99.9892 99.6495 99.8599 99.9965 98.2014 101.7636
H-22	99.73109019886364	otherwise . add ( 1 ) ; otherwise . add ( 1 ) ; otherwise . add ( $NUMBER$ ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 98.7685 99.9796 99.9802 99.5929 99.7803 99.992 99.9931 98.5085 99.9802 99.9854 99.6537 97.1746 99.9958 99.9952 102.4025
H-22	99.7265625	otherwise . add ( digit _ list ) ; otherwise . add ( 1 ) ; otherwise . add ( 1 ) ;
P-22	99.9843 99.9784 99.5945 97.9663 99.9885 99.9857 99.9528 99.9982 98.6307 99.9847 99.9775 99.6603 98.7713 99.9926 99.996 98.3046 99.9786 99.9819 99.6809 99.3683 99.992 99.9922 102.4133
H-22	99.72480912642045	otherwise . add ( $NUMBER$ ) ; otherwise . add ( 1 ) ; otherwise . add ( 1 ) ;
P-22	99.9843 99.9784 99.5945 96.8292 99.9946 99.9954 98.6821 99.9803 99.979 99.6265 99.7667 99.9928 99.9931 98.4874 99.9802 99.9852 99.6579 99.7977 99.9928 99.9924 102.3917
H-22	99.72017045454545	otherwise . add ( 1 ) ; otherwise . add ( $NUMBER$ ) ; otherwise . add ( 1 ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 98.7685 99.9796 99.9802 99.5929 96.9891 99.9958 99.9955 98.4212 99.9808 99.9847 99.6803 99.7924 99.993 99.9931 102.395
H-22	99.71844075520833	otherwise . add ( 1 ) ; otherwise . add ( 1 ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 98.7685 99.9796 99.9802 99.5929 99.7803 99.992 99.9931 99.3886
H-22	99.71781589673913	otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 1 ) ) ;
P-22	99.9843 99.9784 98.8942 99.9896 99.9977 99.7105 99.9997 99.9419 99.9975 99.9898 99.9979 99.8936 99.9981 99.9868 99.9868 99.9588 99.9686 96.6662 99.9278 99.992 99.9998 99.3861
H-22	99.69756401909723	otherwise . add ( 1 ) ; return String . value CaMeL Of ( otherwise ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 97.6845 99.4154 99.9953 99.9122 99.9999 99.9992 99.9996 99.5204 99.9044 99.9886 99.8352
H-22	99.69101350203805	if ( low _ mid != high _ mid ) { digit _ list [ high _ mid ] += 1 ;
P-22	99.9941 98.9363 99.9971 99.9965 99.604 99.9372 99.9985 99.9969 99.9921 99.9392 99.0781 99.997 99.9605 99.958 99.4202 99.9971 99.9882 99.9892 99.6495 99.8599 99.9965 99.2698
H-22	99.69080171130952	add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;
P-22	99.4497 99.3736 99.95 99.2835 99.9995 99.9335 99.9977 99.99 99.9974 99.8647 99.9983 99.9872 99.9873 99.9529 99.9698 99.9435 99.9358 99.9694 99.9998 99.3947
H-22	99.68505859375	loop . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;
P-22	99.8539 99.9681 98.9063 99.9903 99.9953 99.6609 99.9995 99.9335 99.9973 99.9904 99.9979 99.8793 99.9981 99.9868 99.9873 99.9572 99.9695 99.9422 99.9407 99.9891 99.9998 99.469
H-22	99.68205460258152	otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , $NUMBER$ ) ) ;
P-22	99.9843 99.9784 98.8942 99.9896 99.9977 99.7105 99.9997 99.9419 99.9975 99.9898 99.9979 99.8936 99.9981 99.9868 99.9868 99.9588 99.9686 95.7825 99.9623 99.9936 99.9998 99.4112
H-22	99.68003778872283	if ( low _ mid != high _ mid ) { digit _ list [ low _ mid ] += 1 ;
P-22	99.9941 98.9363 99.9971 99.9965 99.604 99.9372 99.9985 99.9969 99.9921 99.9392 99.0781 99.997 99.9605 99.958 99.1077 99.997 99.99 99.9892 99.6522 99.8632 99.9964 99.3222
H-22	99.67758178710938	otherwise . add ( 1 ) ; return String . value CaMeL Of ( digit _ list ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 97.6845 99.4154 99.9953 99.9122 99.9999 99.9992 99.9996 98.494 99.9908 99.9759 99.8972 99.9846 99.9014
H-22	99.65531841077302	otherwise . add ( digit _ list ) ; otherwise . add ( digit _ list ) ;
P-22	99.9843 99.9784 99.5945 97.9663 99.9885 99.9857 99.9528 99.9982 98.6307 99.9847 99.9775 99.6603 99.0266 99.9955 99.9852 99.976 99.9975 99.5045
H-22	99.64798106317934	list . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;
P-22	99.8304 99.9723 98.9754 99.9824 99.9976 99.6726 99.9996 99.9353 99.9975 99.9928 99.9981 99.8946 99.998 99.9872 99.9866 99.9578 99.9655 99.9423 99.9408 99.9938 99.9999 99.4466
H-22	99.63709026834239	queue . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;
P-22	99.8394 99.985 98.658 99.9882 99.9978 99.6347 99.9996 99.9285 99.9971 99.989 99.9979 99.8921 99.9982 99.9878 99.9872 99.9576 99.9695 99.9428 99.9439 99.9926 99.9998 99.5207
H-22	99.63383152173913	otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . size , 0 ) ) ;
P-22	99.9843 99.9784 98.8942 99.9896 99.9977 99.7105 99.9997 99.9419 99.9975 99.9898 99.9979 99.8936 99.9981 99.9868 99.9868 96.0909 98.6981 99.8529 99.9593 99.9905 99.9998 99.376
H-22	99.62759399414062	otherwise . add ( digit _ list ) ; return String . value CaMeL Of ( otherwise ) ;
P-22	99.9843 99.9784 99.5945 97.9663 99.9885 99.9857 99.9528 99.9982 97.5095 99.1415 99.9953 99.8838 99.9999 99.9991 99.9996 99.5439 99.9322 99.99 99.8446
H-22	99.62628495065789	Array CaMeL List < Integer > otherwise = new Array CaMeL List < Integer > ( ) ;
P-22	99.9907 99.9895 99.9825 99.8552 99.9693 99.7 99.9706 99.9232 99.9367 99.9972 99.9882 99.7965 99.8701 99.968 99.9961 99.8384 99.9995 99.4727
H-22	99.62438383556548	otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length ) ) ;
P-22	99.9843 99.9784 98.8942 99.9896 99.9977 99.7105 99.9997 99.9419 99.9975 99.9898 99.9979 99.8936 99.9981 99.9868 99.9868 99.9588 95.2734 99.9263 99.9997 99.3432
H-22	99.62266474184783	otherwise . add CaMeL All ( digit _ list ) ; otherwise . add CaMeL All ( digit _ list ) ;
P-22	99.9843 99.9784 98.8942 99.9896 99.9977 97.3718 99.9973 99.9879 99.98 99.9994 98.8483 99.9837 99.977 98.9342 99.9802 99.998 98.7681 99.9981 99.9873 99.9878 99.9996 99.4146
H-22	99.6216351052989	otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length - 1 ) ) ;
P-22	99.9843 99.9784 98.8942 99.9896 99.9977 99.7105 99.9997 99.9419 99.9975 99.9898 99.9979 99.8936 99.9981 99.9868 99.9868 99.9588 95.3882 99.661 99.3181 99.9867 99.9997 99.3746
H-22	99.61886463994566	if ( low _ mid < high _ mid ) { digit _ list [ high _ mid ] += 1 ;
P-22	99.9941 98.9363 99.9971 99.9965 98.238 99.457 99.9981 99.9939 99.9805 99.9404 99.357 99.9966 99.9562 99.9604 99.4169 99.9968 99.9872 99.9887 99.6272 99.8595 99.9971 99.2214
H-22	99.61700760690789	otherwise . add ( 1 ) ; otherwise . add CaMeL All ( digit _ list ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 98.7685 99.9796 99.9802 98.8977 99.9931 99.9967 97.4757 99.9968 99.988 99.9786 99.999 99.3679
H-22	99.61637739701705	otherwise . add ( digit _ list ) ; return String . value CaMeL Of ( digit _ list ) ;
P-22	99.9843 99.9784 99.5945 97.9663 99.9885 99.9857 99.9528 99.9982 97.5095 99.1415 99.9953 99.8838 99.9999 99.9991 99.9996 98.5384 99.9902 99.9785 99.9309 99.9785 99.9027
H-22	99.61551036005434	if ( high _ mid != high _ mid ) { digit _ list [ high _ mid ] += 1 ;
P-22	99.9941 97.3288 99.9971 99.9954 99.5531 99.9291 99.9985 99.997 99.9923 99.9374 99.0116 99.997 99.9604 99.9565 99.4172 99.9972 99.9884 99.9892 99.652 99.852 99.9966 99.2784
H-22	99.6131591796875	synchronized ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) {
P-22	99.9884 98.7908 99.9996 99.9233 99.9982 99.9877 99.999 99.9101 99.9986 99.9846 99.9899 99.9642 99.9769 99.9468 99.961 99.9966 99.8626 98.7947
H-22	99.61297898065476	otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length , 1 ) ) ;
P-22	99.9843 99.9784 99.5945 97.4274 99.9996 99.871 99.9973 99.9887 99.9971 99.8595 99.9982 99.9869 99.9862 99.9524 99.9656 96.6857 99.9331 99.9929 99.9997 99.4102
H-22	99.60889733355978	q . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;
P-22	99.9313 99.973 99.0324 99.9867 99.9975 99.6611 99.9996 99.9358 99.9968 99.9918 99.9978 99.8904 99.998 99.9868 99.9864 99.959 99.9679 99.9433 99.9392 99.993 99.9998 99.4577
H-22	99.60887610394022	otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length , 0 , $NUMBER$ ) ) ;
P-22	99.9843 99.9784 99.5945 97.4274 99.9996 99.871 99.9973 99.9887 99.9971 99.8595 99.9982 99.9869 99.9862 99.9524 99.9656 99.9369 97.1345 98.621 99.9916 99.9943 99.9998 99.475
H-22	99.60827105978261	if ( low _ mid < high _ mid ) { digit _ list [ low _ mid ] += 1 ;
P-22	99.9941 98.9363 99.9971 99.9965 98.238 99.457 99.9981 99.9939 99.9805 99.9404 99.357 99.9966 99.9562 99.9604 99.113 99.9967 99.9894 99.9884 99.6292 99.8628 99.9969 99.2747
H-22	99.6064983865489	otherwise . add ( Collections . n CaMeL Copies ( digit _ list . size ( ) , 0 ) ) ;
P-22	99.9843 99.9784 99.5945 97.4274 99.9996 99.871 99.9973 99.9887 99.9971 99.8595 99.9982 99.9869 99.9862 96.229 99.7166 99.9966 99.9216 99.7575 99.948 99.9938 99.9998 99.4536
H-22	99.60457710597827	if ( high _ mid != high _ mid ) { digit _ list [ low _ mid ] += 1 ;
P-22	99.9941 97.3288 99.9971 99.9954 99.5531 99.9291 99.9985 99.997 99.9923 99.9374 99.0116 99.997 99.9604 99.9565 99.107 99.9971 99.9901 99.9892 99.6547 99.8557 99.9964 99.3295
H-22	99.60345137746711	add ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;
P-22	98.9628 98.114 99.9993 99.8227 99.9968 99.9892 99.9974 99.8799 99.998 99.9854 99.9858 99.957 99.9666 99.9394 99.9448 99.9838 99.9996 99.4146
H-22	99.6024169921875	otherwise . add CaMeL All ( digit _ list ) ; otherwise . add ( 1 ) ;
P-22	99.9843 99.9784 98.8942 99.9896 99.9977 97.3718 99.9973 99.9879 99.98 99.9994 98.8483 99.9837 99.977 99.5679 99.2493 99.9919 99.9952 99.388
H-22	99.60105202414773	otherwise . add CaMeL All ( digit _ list ) ; return String . value CaMeL Of ( otherwise ) ;
P-22	99.9843 99.9784 98.8942 99.9896 99.9977 97.3718 99.9973 99.9879 99.98 99.9994 97.2071 99.3052 99.994 99.9038 99.9999 99.9992 99.9996 99.6342 99.9182 99.987 99.8302
H-22	99.60093470982143	otherwise . add CaMeL All ( digit _ list ) ; otherwise . add ( digit _ list ) ;
P-22	99.9843 99.9784 98.8942 99.9896 99.9977 97.3718 99.9973 99.9879 99.98 99.9994 98.8483 99.9837 99.977 99.5679 98.3612 99.9938 99.9846 99.9889 99.9987 99.4711
H-22	99.5989406419837	if ( low _ mid != high _ mid ) { digit _ list [ high _ mid ] = 1 ;
P-22	99.9941 98.9363 99.9971 99.9965 99.604 99.9372 99.9985 99.9969 99.9921 99.9392 99.0781 99.997 99.9605 99.958 99.4202 99.9971 99.9882 99.9892 98.5159 99.2648 99.9924 98.8851
H-22	99.59884510869566	otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length + 0 ) ) ;
P-22	99.9843 99.9784 98.8942 99.9896 99.9977 99.7105 99.9997 99.9419 99.9975 99.9898 99.9979 99.8936 99.9981 99.9868 99.9868 99.9588 94.5799 99.415 99.8353 99.9886 99.9998 99.3855
H-22	99.59756290211396	otherwise . add ( digit _ list ) ; otherwise . add ( 1 ) ;
P-22	99.9843 99.9784 99.5945 97.9663 99.9885 99.9857 99.9528 99.9982 98.6307 99.9847 99.9775 99.6603 98.7713 99.9926 99.996 99.4328
H-22	99.59666907269022	otherwise . add CaMeL All ( Collections . n CaMeL Copies ( digit _ list . length - 0 ) ) ;
P-22	99.9843 99.9784 98.8942 99.9896 99.9977 99.7105 99.9997 99.9419 99.9975 99.9898 99.9979 99.8936 99.9981 99.9868 99.9868 99.9588 95.3882 98.7285 99.6779 99.9877 99.9997 99.3721
H-22	99.58474892064145	otherwise . add ( 1 ) ; return String . value CaMeL Of ( otherwise ) ; }
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 97.6845 99.4154 99.9953 99.9122 99.9999 99.9992 99.9996 99.5204 99.9044 99.9886 97.7374 99.6518
H-22	99.58115931919643	otherwise . add ( Collections . n CaMeL Copies ( digit _ list . length , $NUMBER$ ) ) ;
P-22	99.9843 99.9784 99.5945 97.4274 99.9996 99.871 99.9973 99.9887 99.9971 99.8595 99.9982 99.9869 99.9862 99.9524 99.9656 95.9575 99.9654 99.9939 99.9998 99.4367
H-22	99.57589901194854	otherwise . add ( 1 ) ; otherwise . add ( digit _ list ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 98.7685 99.9796 99.9802 99.5929 96.8237 99.9886 99.9831 99.932 99.9968 99.4435
H-22	99.57398623511905	loop . add ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) ) ;
P-22	99.8539 99.9681 99.5804 97.4009 99.9994 99.8614 99.9968 99.9886 99.9967 99.8293 99.9982 99.9869 99.9868 99.9504 99.9667 99.9379 99.9316 99.9887 99.9997 99.4873
H-22	99.57373046875	otherwise . add ( 1 ) ; return String . value CaMeL Of ( otherwise . size ( ) ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 97.6845 99.4154 99.9953 99.9122 99.9999 99.9992 99.9996 99.5204 97.3931 99.3042 99.9887 99.997 99.316 99.9774 99.8173
H-22	99.57355346679688	otherwise . add ( 1 ) ; return Arrays . to CaMeL String ( digit _ list ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 97.6845 96.7256 99.9995 99.9433 99.9994 99.7225 99.999 99.2498 99.9976 99.9774 99.9616 99.9963 99.9133
H-22	99.57188505284927	List < Integer > otherwise = new Array CaMeL List < Integer > ( ) ;
P-22	99.9452 99.858 99.9682 99.7476 99.9469 99.9028 99.8975 99.9973 99.9893 99.8103 99.8719 99.972 99.9967 99.8591 99.9994 99.4386
H-22	99.56746419270833	otherwise . add ( digit _ list ) ; otherwise . add CaMeL All ( digit _ list ) ;
P-22	99.9843 99.9784 99.5945 97.9663 99.9885 99.9857 99.9528 99.9982 98.6307 99.9847 99.9775 98.7496 99.9925 99.9971 97.4742 99.9976 99.9869 99.9864 99.9993 99.4276
H-22	99.56673990885416	otherwise . add ( String . value CaMeL Of ( otherwise ) ) ;
P-22	99.9843 99.9784 99.5945 96.0234 99.9933 99.919 99.9999 99.9994 99.9995 99.3758 99.8346 99.9933 99.9978 99.544
H-22	99.56532505580357	int high _ mid = Math . floor CaMeL Div ( digit _ list . length , 0 ) ;
P-22	99.1232 99.9928 99.9887 99.9413 99.4678 99.9995 99.9347 99.5292 99.989 99.9725 99.9328 99.9988 99.9819 99.5904 99.9628 98.9858 99.8196 99.9676 99.9921 99.6836
H-22	99.55313449435764	otherwise . add ( $NUMBER$ ) ; return String . value CaMeL Of ( otherwise ) ;
P-22	99.9843 99.9784 99.5945 96.8292 99.9946 99.9954 97.7395 99.4191 99.9948 99.9126 99.9999 99.9992 99.9996 99.5187 99.9078 99.9884 99.8364
H-22	99.54967543658088	otherwise . add ( String . value CaMeL Of ( digit _ list ) ) ;
P-22	99.9843 99.9784 99.5945 96.0234 99.9933 99.919 99.9999 99.9994 99.9995 98.6538 99.9948 99.9789 99.455 99.9912 99.9987 99.5162
H-22	99.54478759765625	otherwise . add ( 1 ) ; return String . value CaMeL Of ( low _ mid ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 97.6845 99.4154 99.9953 99.9122 99.9999 99.9992 99.9996 96.1162 99.9447 99.9954 99.6716 99.9829 99.8773
H-22	99.54399956597223	otherwise . add CaMeL All ( new Array CaMeL List < Integer > ( ) ) ;
P-22	99.9843 99.9784 98.8942 99.9896 99.9977 96.4064 98.74 99.9965 99.9825 99.8424 99.7982 99.9341 99.9972 99.5988 99.9673 99.9995 99.421
H-22	99.54150390625	if ( low _ mid != high _ mid ) {
P-22	99.9941 98.9363 99.9971 99.9965 99.604 99.9372 99.9985 99.9969 99.9921 99.9392 98.7688
H-22	99.53719075520833	otherwise . add ( $NUMBER$ ) ; otherwise . add ( 1 ) ;
P-22	99.9843 99.9784 99.5945 96.8292 99.9946 99.9954 98.6821 99.9803 99.979 99.6265 99.7667 99.9928 99.9931 99.3972
H-22	99.534130859375	otherwise . add ( 1 ) ; otherwise . add ( $NUMBER$ ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 98.7685 99.9796 99.9802 99.5929 96.9891 99.9958 99.9955 99.4089
H-22	99.53293328536184	otherwise . add ( digit _ list ) ; otherwise . add ( low _ mid ) ;
P-22	99.9843 99.9784 99.5945 97.9663 99.9885 99.9857 99.9528 99.9982 98.6307 99.9847 99.9775 99.6603 96.7938 99.9779 99.9946 99.9406 99.9983 99.4548
H-22	99.52964154411765	Collection < Integer > otherwise = new Array CaMeL List < Integer > ( ) ;
P-22	99.9588 99.8769 99.9747 99.7788 99.9702 99.8139 99.8537 99.997 99.9872 99.8101 99.8633 99.9706 99.9973 99.8602 99.9994 99.4205
H-22	99.51973230698529	otherwise . add ( digit _ list ) ; otherwise . add ( otherwise ) ;
P-22	99.9843 99.9784 99.5945 97.9663 99.9885 99.9857 99.9528 99.9982 98.6307 99.9847 99.9775 99.6603 97.4511 99.9423 99.9982 99.4781
H-22	99.51349954044117	otherwise . add ( Arrays . to CaMeL String ( digit _ list ) ) ;
P-22	99.9843 99.9784 99.5945 93.9893 99.9998 99.7768 99.9982 99.895 99.9982 99.8818 99.9983 99.9819 99.9206 99.9932 99.9996 99.4758
H-22	99.51202751608456	otherwise . add ( low _ mid ) ; otherwise . add ( 1 ) ;
P-22	99.9843 99.9784 99.5945 95.725 99.9602 99.9947 99.8506 99.9984 98.582 99.9837 99.9797 99.6642 99.7436 99.993 99.9954 99.413
H-22	99.51118299696181	if ( digit _ list . length && low _ mid != high _ mid ) {
P-22	99.9941 98.8396 99.9978 99.9742 99.7754 99.9585 97.7774 99.4526 99.995 99.993 99.1754 99.935 99.9981 99.995 99.9937 99.9354 99.0737
H-22	99.51055549172794	Vector < Integer > otherwise = new Array CaMeL List < Integer > ( ) ;
P-22	99.9453 99.8983 99.9619 99.7867 99.9674 99.9108 99.9566 99.9971 99.9905 99.8111 99.878 99.969 99.9976 99.8691 99.9995 99.3515
H-22	99.50453814338235	otherwise . add ( high _ mid ) ; otherwise . add ( 1 ) ;
P-22	99.9843 99.9784 99.5945 95.6197 99.9483 99.9928 99.903 99.9985 98.4914 99.9842 99.9791 99.6698 99.7672 99.9948 99.9952 99.4119
H-22	99.50413682725694	synchronized ( Collections . n CaMeL Copies ( digit _ list . length , 0 ) )
P-22	99.9884 98.7908 99.9996 99.9233 99.9982 99.9877 99.999 99.9101 99.9986 99.9846 99.9899 99.9642 99.9769 99.9468 99.961 99.9966 97.0818
H-22	99.49098115808823	otherwise . add ( String . value CaMeL Of ( low _ mid ) ) ;
P-22	99.9843 99.9784 99.5945 96.0234 99.9933 99.919 99.9999 99.9994 99.9995 97.3065 99.9666 99.9953 99.8745 99.9797 99.9961 99.4725
H-22	99.48963838465073	otherwise . add ( Collections . to CaMeL String ( digit _ list ) ) ;
P-22	99.9843 99.9784 99.5945 97.4274 99.9996 96.4807 99.9991 99.431 99.998 99.8128 99.9978 99.9807 99.9 99.9919 99.9997 99.484
H-22	99.48806583180146	otherwise . add ( 1 ) ; otherwise . add ( high _ mid ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 98.7685 99.9796 99.9802 99.5929 95.398 99.9339 99.9941 99.9256 99.9985 99.4243
H-22	99.48243623621323	int high _ mid = Math . floor CaMeL Div ( digit _ list ) ;
P-22	99.1232 99.9928 99.9887 99.9413 99.4678 99.9995 99.9347 99.5292 99.989 99.9725 99.9328 99.9988 99.9819 98.762 99.9294 99.6401
H-22	99.471337890625	otherwise . add ( 1 ) ; otherwise . add ( 0 ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 98.7685 99.9796 99.9802 99.5929 96.0837 99.9693 99.9958 99.3987
H-22	99.47027180989583	otherwise . add ( 0 ) ; otherwise . add ( 1 ) ;
P-22	99.9843 99.9784 99.5945 96.0208 99.9633 99.9966 98.702 99.979 99.9799 99.5841 99.6359 99.9905 99.9925 99.3884
H-22	99.437451171875	if ( digit _ list [ high _ mid ] == $NUMBER$ ) {
P-22	99.9941 98.8396 99.9978 99.9742 98.2067 99.646 99.9964 99.9869 99.9906 99.6655 99.1893 99.9944 99.9623 98.7806
H-22	99.43246694711539	return String . value CaMeL Of ( digit _ list ) ;
P-22	99.2979 99.9936 99.9139 99.9999 99.9993 99.9996 98.5886 99.9905 99.978 99.9051 99.9795 99.9103
H-22	99.43003743489584	otherwise . add ( otherwise ) ; otherwise . add ( 1 ) ;
P-22	99.9843 99.9784 99.5945 95.8087 99.9139 99.9986 98.5057 99.9773 99.9773 99.5882 99.477 99.9934 99.9943 99.3947
H-22	99.4108553799716	return String . value CaMeL Of ( otherwise ) ;
P-22	99.2979 99.9936 99.9139 99.9999 99.9993 99.9996 99.5044 99.9121 99.9773 99.8555
H-22	99.40559895833333	if ( high _ mid != high _ mid ) {
P-22	99.9941 97.3288 99.9971 99.9954 99.5531 99.9291 99.9985 99.997 99.9923 99.9374 98.8072
H-22	99.39717320033482	otherwise . add ( digit _ list . length - 1 ) ;
P-22	99.9843 99.9784 99.5945 97.9663 99.9885 99.9857 96.6013 99.9089 99.4988 99.9515 99.4587 99.9951 99.3845
H-22	99.373046875	otherwise . add ( 1 ) . add ( 1 ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 94.8758 99.885 99.7915 99.6749 99.9846 99.9837 99.3462
H-22	99.362060546875	if ( low _ mid < high _ mid ) {
P-22	99.9941 98.9363 99.9971 99.9965 98.238 99.457 99.9981 99.9939 99.9805 99.9404 98.4756
H-22	99.35440767728366	add ( 1 ) ; otherwise . add ( 1 ) ;
P-22	98.9628 98.8289 99.9653 99.9862 98.5912 99.9835 99.9788 99.6395 99.748 99.9898 99.9921 99.4128
H-22	99.3534405048077	add ( String . value CaMeL Of ( otherwise ) ) ;
P-22	98.9628 97.4418 99.9872 99.9123 99.9999 99.9993 99.9996 99.4283 99.8085 99.9906 99.9982 99.5378
H-22	99.34015362079327	otherwise . add ( digit _ list ) ; return otherwise ;
P-22	99.9843 99.9784 99.5945 97.9663 99.9885 99.9857 99.9528 99.9982 97.5095 97.7939 99.5646 99.8415
H-22	99.33097839355469	otherwise . add ( 1 ) ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 96.3465
H-22	99.31658935546875	otherwise . add CaMeL All ( digit _ list ) ;
P-22	99.9843 99.9784 98.8942 99.9896 99.9977 97.3718 99.9973 99.9879 99.98 99.9994 96.3545
H-22	99.31317138671875	otherwise . add ( digit _ list ) ;
P-22	99.9843 99.9784 99.5945 97.9663 99.9885 99.9857 99.9528 99.9982 96.4192
H-22	99.31162331321023	otherwise . add ( 1 ) ; return otherwise ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 97.6845 97.3332 99.2788 99.83
H-22	99.30746459960938	if ( low _ mid >= high _ mid ) {
P-22	99.9941 98.9363 99.9971 99.9965 97.393 99.3783 99.9985 99.9927 99.9831 99.9324 98.7503
H-22	99.28728693181819	if ( low _ mid != high _ mid )
P-22	99.9941 98.9363 99.9971 99.9965 99.604 99.9372 99.9985 99.9969 99.9921 96.3701
H-22	99.27407004616477	otherwise . add ( 1 ) ; return $STRING$ ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 97.6845 96.2715 99.943 99.8144
H-22	99.2278164950284	otherwise . add ( 1 ) ; break ; }
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 94.5167 99.9747 99.2291 99.4841
H-22	99.18768310546875	otherwise . add ( 1 ) ; break ;
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 94.5167 99.9747 99.0841
H-22	99.14798990885417	otherwise . add ( 1 ) ; }
P-22	99.9843 99.9784 99.5945 99.4957 99.9913 99.9933 94.4385 99.5921
H-22	99.00218963623047	otherwise . add ( $NUMBER$ ) ;
P-22	99.9843 99.9784 99.5945 96.8292 99.9946 99.9954 96.3773
S-23	if ( perm . get ( j ) < perm . get ( i ) ) {
T-23	if ( perm . get ( j ) > perm . get ( i ) ) {
H-23	99.8635771780303	if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = perm . size ( ) - 1 ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.0885 99.9643 99.9909 99.9595 99.8656 98.9328 99.994 99.9261 99.7432 99.9943 99.7474 99.9489 99.826 99.9999 99.9998 99.9841 99.8817 99.9973 99.9102
H-23	99.85305786132812	if ( perm . get ( j ) < perm . get ( i ) && perm . get ( i ) < perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 95.8098 99.6742 99.9828 99.9767 99.9994 99.6581 99.7163 99.8127 99.9022 99.9976 99.9804 99.9998 99.9701 99.7272 99.9821 99.8535 103.0423
H-23	99.84772283380681	if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm ; j != i ; j -- ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.5949 99.9944 99.8856 99.7356 99.9948 99.744 96.8876 99.9539 99.9649 99.9063 99.9732 99.9445 99.9539 99.9997 99.9561 102.4167
H-23	99.84389175907258	if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm . size ( ) - 1 ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.5949 99.9944 99.8856 99.7356 99.9948 99.744 99.9469 99.7694 99.9999 99.9997 99.9844 99.8853 99.9972 99.5598
H-23	99.83892637310606	if ( perm . get ( j ) < perm . get ( i ) ) { Array CaMeL List < Integer > next = perm . get ( j ) ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.8566 99.9904 99.9974 99.9935 99.9479 99.9918 99.4748 98.5113 98.7217 99.3003 99.9116 99.9996 99.5396 99.8513 99.9845 102.5437
H-23	99.83805338541667	if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = 1 ; j != i ; j -- ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.5949 99.9944 99.8856 99.7356 99.9948 96.3239 99.988 99.9451 99.9722 99.9452 99.9878 99.9302 99.9479 99.9997 99.9533 102.3882
H-23	99.83704291449652	if ( perm . get ( j ) < perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.998
H-23	99.83475378787878	if ( perm . get ( j + 1 ) < perm . get ( i ) ) { for ( int j = perm . size ( ) - 1 ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 99.8556 99.5535 99.9839 99.8792 98.5687 99.9946 99.8837 99.7225 99.9932 99.7365 99.9512 99.8136 99.9999 99.9997 99.9843 99.8787 99.997 99.8983
H-23	99.83145751953126	if ( perm . get ( j ) < perm . get ( i + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.0885 99.9643 99.9909 99.9595 99.8656 99.0168
H-23	99.83015210700758	if ( perm . get ( j ) < perm . get ( i + 1 ) && perm . get ( i ) < perm . get ( i ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.0885 99.9643 99.9909 96.2691 99.5338 99.9828 99.9771 99.9993 99.6849 99.7347 99.7731 99.8991 99.9975 99.9816 99.9998 99.9663 99.7558 99.9845 102.068
H-23	99.82410539899554	if ( perm . get ( j ) < perm . get ( i ) ) { Array CaMeL List < Integer > next = perm ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.8566 99.9904 99.9974 99.9935 99.9479 99.9918 99.4748 98.5113 98.7217 99.2789 102.2419
H-23	99.81653201941288	if ( perm . get ( j ) < perm . get ( i ) ) { Array CaMeL List < Integer > next = perm . get ( i ) ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.8566 99.9904 99.9974 99.9935 99.9479 99.9918 99.4748 98.5113 98.7217 99.3003 99.9116 99.9996 98.8835 99.819 99.963 102.5146
H-23	99.81636925899622	if ( perm . get ( j ) < perm . get ( i + 1 ) || perm . get ( i ) < perm . get ( i ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.0885 99.9643 99.9909 95.7163 99.6246 99.9851 99.9762 99.9993 99.695 99.7231 99.73 99.9175 99.9974 99.9806 99.9998 99.9616 99.7565 99.9824 102.1074
H-23	99.81613991477273	if ( perm . get ( i ) < perm . get ( i + 1 ) ) { for ( int j = perm . size ( ) - 1 ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 98.0845 99.5413 99.85 99.8881 99.9978 99.9835 99.9998 99.9343 99.2012 99.9632 99.9921 99.9655 99.8641 98.9204 99.9942 99.9279 99.7529 99.9951 99.7496 99.95 99.828 99.9999 99.9997 99.9839 99.8789 99.9972 99.9779
H-23	99.80814245975378	if ( perm . get ( j ) < perm . get ( j + 1 ) ) { for ( int j = perm . size ( ) - 1 ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 97.9348 99.2163 99.9625 99.9853 99.9598 99.8637 98.9248 99.9938 99.9249 99.7301 99.9933 99.7412 99.9487 99.8161 99.9999 99.9997 99.984 99.8831 99.9971 99.9132
H-23	99.80812377929688	if ( perm . get ( j + 1 ) < perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 99.8556 99.5535 99.9839 99.8792 99.0374
H-23	99.8031517767137	if ( perm . get ( j ) < perm . get ( i ) && perm . get ( i ) < perm . get ( i ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 95.8098 99.6742 99.9828 99.9767 99.9994 99.6581 99.7163 99.8127 99.9022 99.9976 99.9804 99.9998 99.9701 99.7272 99.9821 101.4956
H-23	99.80217742919922	if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm ; j != i ; j -- )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.5949 99.9944 99.8856 99.7356 99.9948 99.744 96.8876 99.9539 99.9649 99.9063 99.9732 99.9445 99.9539 99.9997 101.0675
H-23	99.79686020359848	if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = perm . size ( ) - $NUMBER$ ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.0885 99.9643 99.9909 99.9595 99.8656 98.9328 99.994 99.9261 99.7432 99.9943 99.7474 99.9489 99.826 99.9999 99.9998 99.9841 97.693 99.9964 99.8979
H-23	99.79454040527344	if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = 1 ; j != i ; j -- )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.5949 99.9944 99.8856 99.7356 99.9948 96.3239 99.988 99.9451 99.9722 99.9452 99.9878 99.9302 99.9479 99.9997 101.1112
H-23	99.79451127485795	if ( perm . get ( j + 1 ) < perm . get ( i + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 99.8556 98.929 99.9633 99.9913 99.9719 99.8666 99.0489
H-23	99.79363458806819	if ( perm . get ( i + 1 ) < perm . get ( i ) ) { for ( int j = perm . size ( ) - 1 ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 98.0845 98.9697 99.9541 99.9914 99.7522 99.8493 99.9977 99.9824 99.9998 99.9513 99.5321 99.9848 99.8779 98.6037 99.9947 99.8901 99.7345 99.9951 99.7416 99.9517 99.8215 99.9999 99.9997 99.9841 99.8789 99.997 99.9585
H-23	99.789892578125	if ( perm . get ( j ) < perm . get ( i + 1 ) ) { Array CaMeL List < Integer > next = perm ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.0885 99.9643 99.9909 99.9595 99.8656 98.5276 99.9915 99.9972 99.9934 99.9485 99.9914 99.4476 98.4085 98.3951 99.2018 102.1818
H-23	99.7888419858871	if ( perm . get ( i ) < perm . get ( i ) ) { for ( int j = perm . size ( ) - 1 ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 98.0845 99.5413 99.85 99.8881 99.9978 99.9835 99.9998 99.9343 99.3878 99.9811 99.8765 98.6269 99.9946 99.8917 99.7467 99.9955 99.7457 99.9482 99.7785 99.9999 99.9997 99.9843 99.8847 99.9971 99.6244
H-23	99.77679246471774	if ( perm . get ( j ) < perm . get ( j ) ) { for ( int j = perm . size ( ) - 1 ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 97.9348 99.3836 99.9789 99.8731 98.5453 99.9942 99.8799 99.7168 99.9947 99.7429 99.9453 99.7581 99.9999 99.9997 99.9845 99.8877 99.997 99.5683
H-23	99.77187647964016	if ( perm . get ( j + 1 ) < perm . get ( j ) ) { for ( int j = perm . size ( ) - 1 ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 97.8857 99.4879 99.9849 99.8755 98.5486 99.9943 99.8783 99.7081 99.9932 99.7334 99.95 99.8084 99.9999 99.9997 99.9844 99.882 99.9968 99.9076
H-23	99.77152375252017	if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm . size ( ) - $NUMBER$ ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.5949 99.9944 99.8856 99.7356 99.9948 99.744 99.9469 99.7694 99.9999 99.9997 99.9844 97.6598 99.9961 99.5428
H-23	99.77016129032258	if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = perm ; j != i ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.0885 99.9643 99.9909 99.9595 99.8656 98.9328 99.994 99.9261 99.7432 99.9943 99.7474 96.85 99.9519 99.9651 99.8931 99.9628 100.3016
H-23	99.76967259457237	if ( perm . get ( j ) < perm . get ( i + 1 ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.0885 99.9643 99.9909 99.9595 97.8769
H-23	99.76902077414773	if ( perm . get ( j + 1 ) < perm . get ( i ) ) { for ( int j = perm . size ( ) - $NUMBER$ ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 99.8556 99.5535 99.9839 99.8792 98.5687 99.9946 99.8837 99.7225 99.9932 99.7365 99.9512 99.8136 99.9999 99.9997 99.9843 97.7215 99.996 99.8873
H-23	99.76776885986328	if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = perm . get ( j ) ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.0885 99.9643 99.9909 99.9595 99.8656 98.9328 99.994 99.9261 99.7432 99.9943 99.7474 99.9489 98.1171 99.9995 99.3753 99.7316 99.9709 99.4752
H-23	99.76624716481855	if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = 1 ; j != i ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.0885 99.9643 99.9909 99.9595 99.8656 98.9328 99.994 99.9261 99.7432 99.9943 96.2848 99.9896 99.9409 99.9732 99.9304 99.982 100.4498
H-23	99.76314051011029	if ( perm . get ( j ) < perm . get ( i ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 97.7826
H-23	99.75830078125	if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = perm . get ( i ) ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.0885 99.9643 99.9909 99.9595 99.8656 98.9328 99.994 99.9261 99.7432 99.9943 99.7474 99.9489 98.1171 99.9995 99.159 99.6552 99.9718 99.4641
H-23	99.75506776751894	if ( perm . get ( j ) == perm . get ( i + 1 ) ) { for ( int j = perm . size ( ) - 1 ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 96.3479 99.9121 99.9982 99.9868 99.9999 99.8082 99.1346 99.965 99.991 99.9671 99.8772 98.8246 99.9941 99.9256 99.7435 99.9949 99.7212 99.9513 99.8338 99.9999 99.9998 99.9837 99.8752 99.9972 99.9322
H-23	99.75494939630681	if ( perm . get ( j ) <= perm . get ( i + 1 ) ) { for ( int j = perm . size ( ) - 1 ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 96.2722 99.926 99.9983 99.9853 99.9998 99.7965 99.1501 99.9649 99.9906 99.9649 99.8574 98.878 99.9942 99.9249 99.7415 99.995 99.7285 99.9491 99.8395 99.9999 99.9998 99.984 99.8767 99.9972 99.9464
H-23	99.75003051757812	if ( perm . get ( i ) < perm . get ( i + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 98.0845 99.5413 99.85 99.8881 99.9978 99.9835 99.9998 99.9343 99.2012 99.9632 99.9921 99.9655 99.8641 99.0239
H-23	99.7496109008789	if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm . get ( j + 1 ) ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.5949 99.9944 99.8856 99.7356 99.9948 99.744 99.9469 98.3882 99.9996 99.4175 98.7382 99.9389 99.9913 99.9747 99.574
H-23	99.7475341796875	if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm . get ( j ) ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.5949 99.9944 99.8856 99.7356 99.9948 99.744 99.9469 98.3882 99.9996 99.4175 99.661 99.9739 99.0207
H-23	99.74559020996094	if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm . get ( i + 1 ) ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.5949 99.9944 99.8856 99.7356 99.9948 99.744 99.9469 98.3882 99.9996 99.0993 98.8981 99.9284 99.9932 99.9745 99.6122
H-23	99.74553811961206	if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm ; j != i ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.5949 99.9944 99.8856 99.7356 99.9948 99.744 96.8876 99.9539 99.9649 99.9063 99.9732 99.9167
H-23	99.74225463867188	if ( perm . get ( j ) < perm . get ( j + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 97.9348 99.2163 99.9625 99.9853 99.9598 99.8637 99.0268
H-23	99.74193494073276	if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = 1 ; j != i ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.5949 99.9944 99.8856 99.7356 99.9948 96.3239 99.988 99.9451 99.9722 99.9452 99.9878 100.0795
H-23	99.74182522681451	if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = i ; j != i ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.0885 99.9643 99.9909 99.9595 99.8656 98.9328 99.994 99.9261 99.7432 99.9943 96.2807 99.3199 99.9519 99.9685 99.9185 99.9838 100.3704
H-23	99.73992156982422	if ( perm . get ( j + 1 ) < perm . get ( i ) ) { for ( int j = perm . get ( j ) ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 99.8556 99.5535 99.9839 99.8792 98.5687 99.9946 99.8837 99.7225 99.9932 99.7365 99.9512 98.1852 99.9996 99.4005 99.6946 99.9744 99.4482
H-23	99.7392814390121	if ( perm . get ( j ) < perm . get ( i + 1 ) ) { for ( int j = 0 ; j != i ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.0885 99.9643 99.9909 99.9595 99.8656 98.9328 99.994 99.9261 99.7432 99.9943 95.9042 99.9908 99.9284 99.9657 99.4957 99.9191 100.5106
H-23	99.73855689264113	if ( perm . get ( j + 1 ) < perm . get ( i ) ) { for ( int j = perm ; j != i ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 99.8556 99.5535 99.9839 99.8792 98.5687 99.9946 99.8837 99.7225 99.9932 99.7365 96.801 99.9516 99.9625 99.8929 99.9667 100.2963
H-23	99.73812063116776	if ( perm . get ( j + 1 ) < perm . get ( i ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 99.8556 99.5535 99.9839 97.7786
H-23	99.73516555059524	if ( perm . get ( j + 1 ) < perm . get ( i + 1 ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 99.8556 98.929 99.9633 99.9913 99.9719 97.8747
H-23	99.73478868272569	if ( perm . get ( i ) < perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 98.0845 99.5413 99.85 99.8881 99.9978 99.9835 99.9998 99.9343 99.3878 99.9811 99.8765 98.9904
H-23	99.73404134114584	if ( perm . get ( j ) < perm . get ( i ) ) { for ( int j = perm . get ( i ) ;
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.4691 99.9781 99.8781 98.5949 99.9944 99.8856 99.7356 99.9948 99.744 99.9469 98.3882 99.9996 99.0993 99.5811 99.9731 99.0146
H-23	99.73353881835938	if ( perm . get ( i + 1 ) < perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 98.0845 98.9697 99.9541 99.9914 99.7522 99.8493 99.9977 99.9824 99.9998 99.9513 99.5321 99.9848 99.8779 99.0322
H-23	99.72969193892045	if ( perm . get ( i + 1 ) < perm . get ( i + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 98.0845 98.9697 99.9541 99.9914 99.7522 99.8493 99.9977 99.9824 99.9998 99.9513 98.9582 99.9612 99.9925 99.9734 99.8649 99.0593
H-23	99.727294921875	if ( perm . get ( j ) < perm . get ( j ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 97.9348 99.3836 99.9789 99.8731 99.0253
H-23	99.70969460227273	if ( perm . get ( j + 1 ) < perm . get ( j + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 97.8857 99.0345 99.9641 99.9847 99.9728 99.8644 99.0541
H-23	99.70720825195312	if ( perm . get ( j + 1 ) < perm . get ( j ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 97.8857 99.4879 99.9849 99.8755 99.0573
H-23	99.68423622532895	if ( perm . get ( i ) < perm . get ( i + 1 ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 98.0845 99.5413 99.85 99.8881 99.9978 99.9835 99.9998 99.9343 99.2012 99.9632 99.9921 99.9655 97.8879
H-23	99.67607036389802	if ( perm . get ( j ) < perm . get ( j + 1 ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 97.9348 99.2163 99.9625 99.9853 99.9598 97.8908
H-23	99.67301802201705	if ( perm . get ( j + 1 ) == perm . get ( i + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 97.0148 99.8938 99.9982 99.9872 99.9998 99.7995 98.9627 99.9633 99.9917 99.9705 99.8727 99.081
H-23	99.67239379882812	if ( perm . get ( j + 1 ) == perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 97.0148 99.8938 99.9982 99.9872 99.9998 99.7995 99.537 99.9825 99.8889 99.075
H-23	99.6702372233073	if ( perm . get ( j + 1 ) < perm . get ( i + 1 ) ) { for (
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 99.8556 98.929 99.9633 99.9913 99.9719 99.8666 98.8855 99.9943 96.7757
H-23	99.66945578835227	if ( perm . get ( j + 1 ) <= perm . get ( i + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 96.9294 99.8905 99.9983 99.9849 99.9998 99.7914 98.9864 99.964 99.9912 99.9734 99.856 99.0918
H-23	99.66743396577381	if ( perm . get ( i + 1 ) < perm . get ( i + 1 ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 98.0845 98.9697 99.9541 99.9914 99.7522 99.8493 99.9977 99.9824 99.9998 99.9513 98.9582 99.9612 99.9925 99.9734 97.8871
H-23	99.66666259765626	if ( perm . get ( j + 1 ) <= perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 96.9294 99.8905 99.9983 99.9849 99.9998 99.7914 99.5252 99.9825 99.8694 99.0911
H-23	99.66055458470395	if ( perm . get ( i + 1 ) < perm . get ( i ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 98.0845 98.9697 99.9541 99.9914 99.7522 99.8493 99.9977 99.9824 99.9998 99.9513 99.5321 99.9848 97.7899
H-23	99.65909423828126	if ( perm . get ( j ) == perm . get ( i + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 96.3479 99.9121 99.9982 99.9868 99.9999 99.8082 99.1346 99.965 99.991 99.9671 99.8772 99.0411
H-23	99.65614947150735	if ( perm . get ( i ) < perm . get ( i ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 98.0845 99.5413 99.85 99.8881 99.9978 99.9835 99.9998 99.9343 99.3878 99.9811 97.7952
H-23	99.6557861328125	if ( perm . get ( j ) <= perm . get ( i + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 96.2722 99.926 99.9983 99.9853 99.9998 99.7965 99.1501 99.9649 99.9906 99.9649 99.8574 99.0568
H-23	99.65385131835937	if ( perm . get ( j + 1 ) > perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 96.7177 99.8146 99.9979 99.9868 99.9998 99.8096 99.5734 99.9884 99.8941 99.0238
H-23	99.65226606889205	if ( perm . get ( j + 1 ) > perm . get ( i + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 96.7177 99.8146 99.9979 99.9868 99.9998 99.8096 98.8903 99.961 99.9918 99.9813 99.8781 99.0499
H-23	99.64777166193181	if ( perm . get ( j + 1 ) < perm . get ( i - 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 99.8556 95.762 99.9595 99.9868 99.9699 99.8743 98.9901
H-23	99.64768353630515	if ( perm . get ( j ) < perm . get ( j ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 97.9348 99.3836 99.9789 97.8176
H-23	99.64684477306548	if ( perm . get ( j + 1 ) < perm . get ( j + 1 ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 97.8857 99.0345 99.9641 99.9847 99.9728 97.889
H-23	99.64592895507812	if ( perm . get ( j ) < perm . get ( i + $NUMBER$ ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 99.0885 96.2534 99.9868 99.9587 99.8609 99.0265
H-23	99.6451748934659	if ( perm . get ( j + 1 ) >= perm . get ( i + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 96.489 99.8435 99.9976 99.9825 99.9998 99.789 98.9677 99.9623 99.9909 99.9725 99.8692 99.0585
H-23	99.64124213324652	if ( perm . get ( j ) == perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 96.3479 99.9121 99.9982 99.9868 99.9999 99.8082 99.4387 99.9819 99.8914 99.0245
H-23	99.64031982421875	if ( perm . get ( j + 1 ) >= perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 96.489 99.8435 99.9976 99.9825 99.9998 99.789 99.5348 99.9847 99.885 99.0295
H-23	99.63641357421875	if ( perm . get ( j ) <= perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 96.2722 99.926 99.9983 99.9853 99.9998 99.7965 99.4277 99.9775 99.8702 99.0491
H-23	99.63427124023437	if ( perm . get ( j ) >= perm . get ( i + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 95.9431 99.8964 99.9977 99.9843 99.9998 99.7837 99.1195 99.9638 99.9905 99.9666 99.8678 99.0193
H-23	99.633544921875	if ( perm . get ( j ) > perm . get ( i + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 95.9977 99.8745 99.9979 99.9881 99.9998 99.7784 99.0632 99.9626 99.991 99.9779 99.8805 99.0063
H-23	99.63323974609375	if ( perm . get ( j ) < perm . get ( i - 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 99.9834 99.9998 99.848 95.1943 99.9587 99.9884 99.9542 99.8726 98.9528
H-23	99.63249126233552	if ( perm . get ( j + 1 ) < perm . get ( j ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 99.8515 99.9977 99.9828 99.9998 97.8857 99.4879 99.9849 97.8059
H-23	99.63040161132812	if ( perm . get ( j + $NUMBER$ ) < perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 96.3669 99.981 99.7937 99.8476 99.9977 99.9818 99.9998 99.8481 99.5537 99.983 99.8792 99.0479
H-23	99.62001342773438	if ( perm . get ( j + 1 ) != perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 96.1703 99.773 99.997 99.9869 99.9999 99.7583 99.5649 99.988 99.8954 98.9955
H-23	99.61966552734376	if ( perm . get ( j ) & perm . get ( i + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 95.7984 99.7697 99.9943 99.9802 99.9998 99.8392 99.2076 99.9612 99.9915 99.6943 99.8192 99.1852
H-23	99.61830647786458	if ( perm . get ( j ) > perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 95.9977 99.8745 99.9979 99.9881 99.9998 99.7784 99.4866 99.9874 99.8967 98.9694
H-23	99.61421034071181	if ( perm . get ( j ) >= perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 95.9431 99.8964 99.9977 99.9843 99.9998 99.7837 99.4493 99.9816 99.8841 98.9829
H-23	99.60459391276042	if ( perm . get ( j ) & perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 95.7984 99.7697 99.9943 99.9802 99.9998 99.8392 99.3833 99.9256 99.8338 99.2056
H-23	99.59674393503289	if ( ! perm . get ( j ) < perm . get ( i ) ) {
P-23	99.9945 95.2601 99.8683 99.9769 99.9739 99.9996 99.7305 99.6403 99.8628 99.8757 99.9975 99.9805 99.9998 99.8817 99.5045 99.9761 99.8678 99.0467
H-23	99.59080103824013	if ( perm . get ( j + 1 ) <= perm . get ( i ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 96.9294 99.8905 99.9983 99.9849 99.9998 99.7914 99.5252 99.9825 97.8525
H-23	99.57799614800348	if ( perm . get ( j ) != perm . get ( i ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 95.4267 99.8141 99.9963 99.987 99.9999 99.7415 99.4678 99.9857 99.8966 98.9355
H-23	99.55166446461396	if ( perm . get ( j ) <= perm . get ( i ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 96.2722 99.926 99.9983 99.9853 99.9998 99.7965 99.4277 99.9775 97.8422
H-23	99.54722684972427	if ( perm . get ( j ) == perm . get ( i ) )
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 96.3479 99.9121 99.9982 99.9868 99.9999 99.8082 99.4387 99.9819 97.6762
H-23	99.54327751608456	if ( perm . get ( j ) < perm . size ( ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 99.8947 99.9977 94.8278 100.0 99.9997 99.9103 99.8846 98.7008
H-23	99.45291341145834	if ( perm . get ( j + 1 ) < i ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 99.7502 95.0956 99.8987 99.8883 98.8901
H-23	99.40313251201923	if ( perm . get ( j ) < i ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 94.5935 99.8718 99.8857 98.8695
H-23	99.39131986177884	if ( perm . get ( j ) < 1 ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 94.3423 99.9429 99.8762 98.9055
H-23	99.36648324819711	String perm = perm . get ( j + 1 ) ;
P-23	99.161 99.7579 99.8849 99.9662 99.9925 99.9994 99.6827 98.8426 99.9514 99.9925 99.9809 98.3624
H-23	99.34930889423077	if ( perm . get ( j + 1 ) ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 98.8051 99.9556 99.9876 94.3526 99.8848 99.0327
H-23	99.31759878305289	if ( perm . get ( j ) < 0 ) {
P-23	99.9945 99.8456 99.9842 99.9866 99.9995 99.8115 99.6301 99.8673 93.4105 99.9476 99.8857 98.8648
S-24	for ( int c = 0 ; c < r ; c ++ ) {
T-24	for ( int c = 0 ; c < r + 1 ; c ++ ) {
H-24	99.80484212239584	for ( int c = 0 ; c < r ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 99.9629 99.9768 99.9983 99.9985 98.6206
H-24	99.80128479003906	for ( int c = 0 ; c < r ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 99.9629 99.9768 99.9983 99.9985 99.6869 98.6816
H-24	99.77817946213942	for ( int c = 0 ; c < r ; c ++ ) { Array CaMeL List < Integer > row = null ;
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 99.9629 99.9768 99.9983 99.9985 99.6869 98.119 99.983 99.9964 99.9713 99.8115 99.7644 99.668 99.9818 95.6339 99.992 103.1726
H-24	99.75485568576389	int c = rows . get ( r - 1 ) . get ( c - 1 ) . get ( c - 1 ) ;
P-24	97.8699 99.9869 98.5731 99.9885 99.9319 99.998 99.7794 99.8955 99.9756 99.9945 99.8412 99.9555 99.995 99.9355 99.9321 99.9896 99.9918 99.1273 99.9728 99.9937 99.9522 99.8381 99.9893 99.9863 99.7256 102.3901
H-24	99.74758676382211	if ( c > 0 ) { Array CaMeL List < Integer > row = new Array CaMeL List < Integer > ( ) ;
P-24	99.9842 99.5396 99.7649 99.8985 99.8466 99.7895 97.8191 99.993 99.9926 99.9812 99.7863 99.7132 99.5874 99.984 99.9254 99.9151 99.9981 99.9801 99.9481 99.9228 99.5456 99.9981 99.8986 99.999 102.3031
H-24	99.73508933738425	int r = rows . get ( r - 1 ) . get ( c - 1 ) . get ( c - 1 ) ;
P-24	97.0671 99.9724 98.7737 99.9903 99.9249 99.998 99.8482 99.9002 99.9734 99.9942 99.8604 99.9607 99.9939 99.9294 99.9278 99.9888 99.9904 99.212 99.9778 99.9928 99.9537 99.8273 99.9888 99.984 99.6902 102.3555
H-24	99.7327734375	for ( int c = 0 ; c < r ; c ++ ) { row . add ( r - 1 ) ;
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 99.9629 99.9768 99.9983 99.9985 99.6869 95.4978 99.9868 99.8502 99.9972 98.5818 99.7612 99.155 99.9118 99.6313 102.8073
H-24	99.7294284986413	for ( int c = 0 ; c < r ; c ++ ) { if ( c > 0 ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 99.9629 99.9768 99.9983 99.9985 99.6869 94.9767 99.9918 99.7588 99.6284 99.847 99.9396 99.7143 101.7811
H-24	99.72633713942308	if ( c > 0 ) { Array CaMeL List < Integer > row = new Array CaMeL List < Integer >> ( ) ;
P-24	99.9842 99.5396 99.7649 99.8985 99.8466 99.7895 97.8191 99.993 99.9926 99.9812 99.7863 99.7132 99.5874 99.984 99.9254 99.9151 99.9981 99.9801 99.9481 99.9228 98.9881 99.9979 99.9263 99.9989 102.2809
H-24	99.719453125	for ( int c = 0 ; c < r ; c ++ ) { row . add ( r - c ) ;
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 99.9629 99.9768 99.9983 99.9985 99.6869 95.4978 99.9868 99.8502 99.9972 98.5818 99.7612 98.7518 99.6045 99.9563 102.86
H-24	99.71049360795455	for ( int c = 0 ; c < r ; c ++ ) { if ( c > 0 )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 99.9629 99.9768 99.9983 99.9985 99.6869 94.9767 99.9918 99.7588 99.6284 99.847 99.9396 101.3497
H-24	99.70472717285156	for ( int c = 0 ; c < n ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 98.0448 99.9584 99.9738 99.9984 99.9986 99.7074 98.6662
H-24	99.70371791294643	for ( int c = 0 ; c < r ; c ++ ) { int c = 0 ;
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 99.9629 99.9768 99.9983 99.9985 99.6869 99.3319 96.3848 99.9774 98.1679 99.9781 101.799
H-24	99.69908075747283	if ( c > 0 ) { for ( int c = 0 ; c < r ; c ++ ) {
P-24	99.9842 99.5396 99.7649 99.8985 99.8466 99.7895 97.8873 99.9884 99.9524 99.6391 99.9874 99.8526 99.9874 99.9752 99.9312 99.5676 99.9613 99.9792 99.9975 99.9982 99.7883 101.4393
H-24	99.69862365722656	for ( int c = 1 ; c < r ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 99.916 99.5849 99.9598 99.9746 99.9982 99.9984 99.6791 98.6948
H-24	99.69783528645833	for ( int c = 0 ; c < n ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 98.0448 99.9584 99.9738 99.9984 99.9986 98.5656
H-24	99.6963623046875	for ( int c = 1 ; c < r ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 99.916 99.5849 99.9598 99.9746 99.9982 99.9984 98.6414
H-24	99.68921959918478	for ( int c = 0 ; c < r ; c ++ ) { row . add ( r ) ;
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 99.9629 99.9768 99.9983 99.9985 99.6869 95.4978 99.9868 99.8502 99.9972 98.5818 98.2912 99.9716 102.5367
H-24	99.68675648082386	if ( c > 0 ) { for ( int c = 0 ; c < r ; c ++ )
P-24	99.9842 99.5396 99.7649 99.8985 99.8466 99.7895 97.8873 99.9884 99.9524 99.6391 99.9874 99.8526 99.9874 99.9752 99.9312 99.5676 99.9613 99.9792 99.9975 99.9982 101.2575
H-24	99.63805541992187	for ( int c = 0 ; c < rows . size ( ) ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 95.9483 99.9924 99.6207 99.9991 99.9995 99.9862 99.9393 99.9979 99.9982 99.7211 98.6301
H-24	99.63165283203125	for ( int r = 0 ; r < n ; r ++ ) {
P-24	99.9803 99.8507 97.6615 99.9796 99.3241 99.9922 99.9658 99.9447 99.2592 99.9586 99.9641 99.998 99.9985 99.7258 98.6982
H-24	99.62974330357143	for ( int c = 1 ; c < r ; c ++ ) { int c = 0 ;
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 99.916 99.5849 99.9598 99.9746 99.9982 99.9984 99.6791 99.3189 96.3818 99.9762 98.284 99.9697 101.8108
H-24	99.6278140419408	for ( int c = 0 ; c < rows . size ( ) ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 95.9483 99.9924 99.6207 99.9991 99.9995 99.9862 99.9393 99.9979 99.9982 98.5187
H-24	99.62760416666667	for ( int c = 0 ; c < n ; c ++ ) { int c = 0 ;
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 98.0448 99.9584 99.9738 99.9984 99.9986 99.7074 99.3015 96.4285 99.9775 98.0404 99.9783 101.844
H-24	99.61927795410156	for ( int r = 1 ; r < n ; r ++ ) {
P-24	99.9803 99.8507 97.6615 99.9796 99.2021 99.988 99.964 99.9157 99.218 99.95 99.9645 99.9977 99.9986 99.7199 98.7128
H-24	99.61660621279762	for ( Array CaMeL List < Integer > row = new Array CaMeL List < Integer >> ( ) ;
P-24	99.9803 95.8119 99.9881 99.9924 99.9711 99.8233 99.6974 99.7434 99.8655 99.6758 99.8766 99.9979 99.9809 99.9597 99.8381 99.0212 99.9956 99.8833 99.9918 99.0493
H-24	99.61215006510416	for ( int r = 0 ; r < n ; r ++ )
P-24	99.9803 99.8507 97.6615 99.9796 99.3241 99.9922 99.9658 99.9447 99.2592 99.9586 99.9641 99.998 99.9985 98.4999
H-24	99.61204528808594	for ( Integer c = 0 ; c < r ; c ++ ) {
P-24	99.9803 97.675 99.0916 99.8652 99.6238 99.9917 99.9655 99.9213 99.5821 99.9731 99.9749 99.9983 99.9987 99.6648 98.6814
H-24	99.61000061035156	for ( int r = 0 ; r < r ; r ++ ) {
P-24	99.9803 99.8507 97.6615 99.9796 99.3241 99.9922 99.9658 99.9447 98.9306 99.9648 99.9552 99.998 99.9983 99.7087 98.7003
H-24	99.608056640625	for ( Integer c = 0 ; c < r ; c ++ )
P-24	99.9803 97.675 99.0916 99.8652 99.6238 99.9917 99.9655 99.9213 99.5821 99.9731 99.9749 99.9983 99.9987 98.6743
H-24	99.60610961914062	for ( int c = 0 ; c < c ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 96.468 99.9757 99.9756 99.9984 99.9984 99.6674 98.6861
H-24	99.60333251953125	for ( int c = 1 ; c < n ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 99.916 98.0669 99.95 99.9714 99.9983 99.9985 99.7009 98.6792
H-24	99.60295867919922	for ( int r = 1 ; r < r ; r ++ ) {
P-24	99.9803 99.8507 97.6615 99.9796 99.2021 99.988 99.964 99.9157 98.9654 99.9628 99.9559 99.9978 99.9984 99.7049 98.715
H-24	99.60206240699405	for ( Array CaMeL List < Integer > row = new Array CaMeL List < Integer > ( ) ;
P-24	99.9803 95.8119 99.9881 99.9924 99.9711 99.8233 99.6974 99.7434 99.8655 99.6758 99.8766 99.9979 99.9809 99.9597 99.8381 99.5257 99.9963 99.8282 99.995 98.2906
H-24	99.60110677083334	for ( int c = 0 ; c < c ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 96.468 99.9757 99.9756 99.9984 99.9984 98.6724
H-24	99.59939778645834	for ( int r = 1 ; r < n ; r ++ )
P-24	99.9803 99.8507 97.6615 99.9796 99.2021 99.988 99.964 99.9157 99.218 99.95 99.9645 99.9977 99.9986 98.5152
H-24	99.59405517578125	for ( int c = 0 ; c < r ; c ++ ) { Array CaMeL List < Integer > row =
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 99.9629 99.9768 99.9983 99.9985 99.6869 98.119 99.983 99.9964 99.9713 99.8115 99.7644 99.668 99.9818 94.8231
H-24	99.59344889322917	for ( int r = 0 ; r < r ; r ++ )
P-24	99.9803 99.8507 97.6615 99.9796 99.3241 99.9922 99.9658 99.9447 98.9306 99.9648 99.9552 99.998 99.9983 98.5508
H-24	99.59251403808594	for ( int c = 0 ; c < 0 ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 96.2266 99.9574 99.9758 99.9977 99.9982 99.7205 98.6761
H-24	99.590478515625	for ( int c = 1 ; c < n ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 99.916 98.0669 99.95 99.9714 99.9983 99.9985 98.584
H-24	99.59024810791016	for ( int c = 0 ; c <= r ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 96.6143 99.5034 99.9772 99.973 99.9975 99.9982 99.6771 98.7208
H-24	99.58876255580357	for ( Array CaMeL List < Integer >> row = new Array CaMeL List < Integer > ( ) ;
P-24	99.9803 95.8119 99.9881 99.9924 99.9711 99.8233 98.6454 99.7692 99.9064 99.7797 99.883 99.9977 99.9811 99.9569 99.8539 99.5439 99.9961 99.8474 99.9941 98.8369
H-24	99.5857666015625	for ( int r = 1 ; r < r ; r ++ )
P-24	99.9803 99.8507 97.6615 99.9796 99.2021 99.988 99.964 99.9157 98.9654 99.9628 99.9559 99.9978 99.9984 98.5591
H-24	99.58241489955357	for ( Array CaMeL List < Integer >> row = new Array CaMeL List < Integer >> ( ) ;
P-24	99.9803 95.8119 99.9881 99.9924 99.9711 99.8233 98.6454 99.7692 99.9064 99.7797 99.883 99.9977 99.9811 99.9569 99.8539 98.9899 99.9954 99.8868 99.9902 99.223
H-24	99.57996136209239	for ( Iterator < Integer > c = rows . iterator ( ) ; c . < r ; c ++ )
P-24	99.9803 95.4029 99.6733 99.7557 99.7138 99.5336 99.9807 98.7523 99.9818 99.7184 99.999 99.9961 99.9979 99.9551 99.9785 99.8391 99.6357 99.9613 99.9736 99.9949 99.9983 98.7118
H-24	99.5796875	for ( int c = 0 ; c <= r ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 96.6143 99.5034 99.9772 99.973 99.9975 99.9982 98.6493
H-24	99.57320149739583	for ( int c = 0 ; c < 0 ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 96.2266 99.9574 99.9758 99.9977 99.9982 98.5143
H-24	99.56853637695312	for ( int c = 0 ; c < row . size ( ) ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 94.917 99.9756 99.2922 99.9978 99.9991 99.9871 99.9422 99.9979 99.9982 99.7033 98.6321
H-24	99.56540814568015	for < Integer > row = new Array CaMeL List < Integer > ( ) ;
P-24	95.4103 99.5946 99.6866 99.5196 99.9544 99.9007 99.899 99.9981 99.9839 99.9486 99.9106 99.6044 99.9978 99.8582 99.9978 99.5422
H-24	99.56491088867188	for ( int c = 0 ; c < r && c < r ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 95.171 99.8258 99.8692 99.564 99.9103 99.9735 99.9972 99.998 99.6394 98.8344
H-24	99.56487274169922	for ( int c = 0 ; c < 1 ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 95.7576 99.977 99.9755 99.9982 99.9985 99.7006 98.7026
H-24	99.5600341796875	int c = rows . get ( r - 1 ) . get ( c - 1 ) ;
P-24	97.8699 99.9869 98.5731 99.9885 99.9319 99.998 99.7794 99.8955 99.9756 99.9945 99.8412 99.9555 99.995 99.9355 99.9321 99.9896 99.9918 99.4286 99.3662
H-24	99.5582211143092	for ( int c = 0 ; c < row . size ( ) ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 94.917 99.9756 99.2922 99.9978 99.9991 99.9871 99.9422 99.9979 99.9982 98.5709
H-24	99.55759684244792	for ( int c = 0 ; c < r - 1 ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 95.3519 99.8445 99.9609 99.9724 99.9965 99.9986 99.6685 98.7279
H-24	99.55610737047698	for ( int c = 0 ; c < r && c < r ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 95.171 99.8258 99.8692 99.564 99.9103 99.9735 99.9972 99.998 98.7415
H-24	99.55572831003289	Array CaMeL List < Integer > row = new Array CaMeL List < Integer > ( ) ;
P-24	99.9925 99.9916 99.9804 99.8204 99.7304 99.5148 99.9781 99.9391 99.9201 99.9982 99.9815 99.9454 99.926 99.5594 99.9982 99.8738 99.9988 99.4449
H-24	99.54764811197917	for ( int c = 0 ; c < 1 ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 95.7576 99.977 99.9755 99.9982 99.9985 98.5798
H-24	99.54730583639706	for ( int c = 0 ; c < r - 1 ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 95.3519 99.8445 99.9609 99.9724 99.9965 99.9986 98.6638
H-24	99.53895399305556	for ( int c = 0 ; c < rows . length ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 95.9483 99.9924 98.512 99.9801 99.9544 99.998 99.9987 99.6979 98.6916
H-24	99.53661346435547	for ( int c = r ; c < r ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 95.7597 99.8369 99.9758 99.9272 99.536 99.9621 99.9723 99.9981 99.9984 99.6829 98.6975
H-24	99.53399047851562	for ( int c = 0 ; c < r || c < r ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 94.5672 99.9371 99.8083 99.5918 99.7225 99.9752 99.9973 99.998 99.6384 98.9284
H-24	99.52744140625	int r = rows . get ( r - 1 ) . get ( c - 1 ) ;
P-24	97.0671 99.9724 98.7737 99.9903 99.9249 99.998 99.8482 99.9002 99.9734 99.9942 99.8604 99.9607 99.9939 99.9294 99.9278 99.9888 99.9904 99.3657 99.3177
H-24	99.524658203125	Array CaMeL List < Integer > row = new Array CaMeL List < Integer >> ( ) ;
P-24	99.9925 99.9916 99.9804 99.8204 99.7304 99.5148 99.9781 99.9391 99.9201 99.9982 99.9815 99.9454 99.926 98.9636 99.9981 99.9067 99.9987 99.4177
H-24	99.5244873046875	for ( int c = 1 ; c < rows . size ( ) ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 99.916 95.2593 99.9924 99.6866 99.9991 99.9995 99.9884 99.9342 99.9978 99.9981 99.7128 98.6331
H-24	99.52272033691406	for ( int c = 0 ; c < $NUMBER$ ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 95.0595 99.9816 99.9769 99.998 99.9984 99.7048 98.7161
H-24	99.52255859375	for ( int c = r ; c < r ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 95.7597 99.8369 99.9758 99.9272 99.536 99.9621 99.9723 99.9981 99.9984 98.633
H-24	99.52253274356617	for < Integer > row = new Array CaMeL List < Integer >> ( ) ;
P-24	95.4103 99.5946 99.6866 99.5196 99.9544 99.9007 99.899 99.9981 99.9839 99.9486 99.9106 98.8764 99.9981 99.8962 99.9975 99.5031
H-24	99.52246811810662	for ( int c = 0 ; c < rows . length ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 95.9483 99.9924 98.512 99.9801 99.9544 99.998 99.9987 98.5702
H-24	99.52014770507813	for ( int r = 0 ; r < rows . size ( ) ; r ++ ) {
P-24	99.9803 99.8507 97.6615 99.9796 99.3241 99.9922 99.9658 99.9447 95.8995 99.9935 99.6671 99.9991 99.9996 99.9919 99.9601 99.9973 99.9972 99.7092 98.6846
H-24	99.51876027960526	for ( int c = 0 ; c < r || c < r ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 94.5672 99.9371 99.8083 99.5918 99.7225 99.9752 99.9973 99.998 98.7434
H-24	99.5147933959961	for ( int c = 1 ; c <= r ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 97.037 99.4798 99.9773 99.9709 99.9973 99.9981 99.6682 98.736
H-24	99.51260196461396	for ( int c = 0 ; c < - 1 ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 94.5226 99.9351 99.9725 99.9693 99.9972 99.9987 99.6806 98.7103
H-24	99.51056267233456	List < Integer > row = new Array CaMeL List < Integer > ( ) ;
P-24	99.9833 99.8431 99.6277 99.5441 99.9732 99.9186 99.8338 99.9981 99.9816 99.9495 99.9184 99.5586 99.998 99.8779 99.9988 99.5133
H-24	99.5098876953125	for ( int c = 1 ; c < rows . size ( ) ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 99.916 95.2593 99.9924 99.6866 99.9991 99.9995 99.9884 99.9342 99.9978 99.9981 98.5441
H-24	99.50947570800781	for ( int c = 1 ; c < c ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 99.916 96.5598 99.9767 99.9726 99.9983 99.9984 99.657 98.7007
H-24	99.50733778211806	for ( int c = 0 ; c < n - 1 ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 98.0448 96.0911 99.7471 99.9794 99.9706 99.9964 99.9988 99.6757 98.7001
H-24	99.50656307444854	for < Integer >> row = new Array CaMeL List < Integer > ( ) ;
P-24	95.4103 99.5946 98.6412 99.5388 99.9604 99.9197 99.8984 99.9979 99.9838 99.9455 99.9121 99.6189 99.9977 99.8585 99.9974 99.5313
H-24	99.50640869140625	for ( int c = 0 ; c >= 0 ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 95.0663 99.696 99.9311 99.9731 99.9899 99.9981 99.7368 98.729
H-24	99.50316097861842	for ( int r = 0 ; r < rows . size ( ) ; r ++ )
P-24	99.9803 99.8507 97.6615 99.9796 99.3241 99.9922 99.9658 99.9447 95.8995 99.9935 99.6671 99.9991 99.9996 99.9919 99.9601 99.9973 99.9972 98.5509
H-24	99.50061848958333	for ( int c = 0 ; c < $NUMBER$ ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 95.0595 99.9816 99.9769 99.998 99.9984 98.5668
H-24	99.50034993489584	for ( int c = 1 ; c <= r ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 97.037 99.4798 99.9773 99.9709 99.9973 99.9981 98.6727
H-24	99.49951985677083	for ( int c = 1 ; c < c ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 99.916 96.5598 99.9767 99.9726 99.9983 99.9984 98.6989
H-24	99.4970474243164	for ( int c = 0 ; c < - 1 ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 94.5226 99.9351 99.9725 99.9693 99.9972 99.9987 98.6294
H-24	99.49457146139706	for ( int c = 0 ; c < n - 1 ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 98.0448 96.0911 99.7471 99.9794 99.9706 99.9964 99.9988 98.6514
H-24	99.49186706542969	for ( Integer c = 1 ; c < r ; c ++ ) {
P-24	99.9803 97.675 99.0916 99.8652 97.7408 99.9915 99.9643 99.8825 99.5826 99.9695 99.9726 99.9981 99.9986 99.6563 98.6956
H-24	99.49073701746323	for ( int c = - 1 ; c < r ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 94.469 99.9291 99.9905 99.9662 99.8818 99.572 99.961 99.9743 99.9967 99.9982 99.6546 98.71
H-24	99.48863220214844	for ( int c = 1 ; c < 0 ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 99.916 96.2033 99.9595 99.9739 99.9974 99.9981 99.7126 98.6852
H-24	99.48092447916666	for ( Integer c = 1 ; c < r ; c ++ )
P-24	99.9803 97.675 99.0916 99.8652 97.7408 99.9915 99.9643 99.8825 99.5826 99.9695 99.9726 99.9981 99.9986 98.6959
H-24	99.47856588924633	Vector < Integer > row = new Array CaMeL List < Integer > ( ) ;
P-24	99.7665 99.8424 99.6931 99.5996 99.9585 99.9298 99.9216 99.9979 99.9831 99.948 99.9272 99.6067 99.9984 99.8849 99.9989 99.4285
H-24	99.4764763327206	List < Integer > row = new Array CaMeL List < Integer >> ( ) ;
P-24	99.9833 99.8431 99.6277 99.5441 99.9732 99.9186 99.8338 99.9981 99.9816 99.9495 99.9184 98.9647 99.9978 99.9112 99.9987 99.4949
H-24	99.47536214192708	for ( int c = 1 ; c < r - 1 ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 99.916 99.5849 95.5109 99.847 99.963 99.9705 99.9964 99.9985 99.6632 98.734
H-24	99.47373453776042	for ( int c = 0 - 1 ; c < r ; c ++ ) {
P-24	99.9803 99.8507 99.6148 99.988 99.7815 94.0335 99.8533 99.9869 99.9619 99.8809 99.5108 99.9633 99.975 99.9959 99.9981 99.6386 98.7081
H-24	99.47354329427084	for ( int c = 0 ; c >= 0 ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 95.0663 99.696 99.9311 99.9731 99.9899 99.9981 98.4664
H-24	99.47268497242646	for ( final int c = 0 ; c < r ; c ++ ) {
P-24	99.9803 93.9366 99.8054 99.5798 99.9912 99.8316 99.9905 99.9744 99.9509 99.6046 99.9664 99.9765 99.9984 99.9986 99.6628 98.9826
H-24	99.46617024739584	for ( int c = 0 ; c <= n ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 96.6143 97.8846 99.9585 99.9703 99.998 99.9983 98.5863
H-24	99.46581313189338	for ( int c = 0 - 1 ; c < r ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 99.7815 94.0335 99.8533 99.9869 99.9619 99.8809 99.5108 99.9633 99.975 99.9959 99.9981 98.7384
H-24	99.46392415364583	for ( int c = 1 ; c < 0 ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 99.916 96.2033 99.9595 99.9739 99.9974 99.9981 98.5385
H-24	99.46254069010416	for ( Integer c = 0 ; c < n ; c ++ )
P-24	99.9803 97.675 99.0916 99.8652 99.6238 99.9917 99.9655 99.9213 97.4871 99.9604 99.9657 99.9984 99.9988 98.6082
H-24	99.46096622242646	for ( int c = 1 ; c < r - 1 ; c ++ )
P-24	99.9803 99.8507 99.6148 99.988 98.1747 99.9878 99.9707 99.916 99.5849 95.5109 99.847 99.963 99.9705 99.9964 99.9985 98.6771
H-24	99.42525227864583	for ( int c = 0 ; c < r ;
P-24	99.9803 99.8507 99.6148 99.988 99.7815 99.9898 99.972 99.9459 99.5874 99.9629 94.6246
S-25	if ( total < 0 ) {
T-25	if ( total < 0 || coins . length == 0 ) {
H-25	99.78574044363839	if ( ( total < 0 ) ) { return 0 ; }
P-25	99.9904 98.2803 99.7169 99.5111 99.8543 99.9694 98.7187 99.9696 99.4865 99.3402 99.9896 99.8412 102.4195
H-25	99.75191824776786	if ( ( total < 0 ) ) { return 1 ; }
P-25	99.9904 98.2803 99.7169 99.5111 99.8543 99.9694 98.7187 99.9696 99.4865 98.9224 99.9895 99.8156 102.3895
H-25	99.72574869791667	if ( total < 0 ) { return 0 ; }
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 99.3593 99.9893 99.8219 99.4056
H-25	99.68302408854167	if ( total < 0 ) { return 1 ; }
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 98.8983 99.99 99.7986 99.3766
H-25	99.67347130408653	if ( ( total < 0 ) ) { return 0 ;
P-25	99.9904 98.2803 99.7169 99.5111 99.8543 99.9694 98.7187 99.9696 99.4865 99.3402 99.9896 101.0155
H-25	99.67095947265625	if ( total < 0 ) {
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 98.8133
H-25	99.66633823939732	if ( ( total == 0 ) ) { return 0 ; }
P-25	99.9904 98.2803 99.7169 97.9451 99.8409 99.945 98.7621 99.9717 99.4413 99.3069 99.9889 99.8283 102.3985
H-25	99.66280423677884	if ( total < 0 ) { return - 0 ; }
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 96.0185 99.2946 99.9848 99.8096 102.3761
H-25	99.65508563701923	} if ( total < 0 ) { return 0 ; }
P-25	99.6438 99.9902 99.7857 99.4878 99.8468 99.8909 99.9777 99.4484 99.3316 99.9888 99.7198 102.3593
H-25	99.6520244891827	if ( ( total < 0 ) ) { return 1 ;
P-25	99.9904 98.2803 99.7169 99.5111 99.8543 99.9694 98.7187 99.9696 99.4865 98.9224 99.9895 101.1545
H-25	99.65043422154018	if ( total < 0 ) { return coins [ 0 ] ;
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 96.2684 99.6858 99.5622 99.9945 99.9333 101.529
H-25	99.63641357421875	if ( ( total >= 0 ) ) { return 0 ; }
P-25	99.9904 98.2803 99.7169 97.5262 99.8263 99.9729 98.8265 99.9675 99.4333 99.2149 99.9846 99.8399 102.4177
H-25	99.63590785435268	if ( ( total == 0 ) ) { return 1 ; }
P-25	99.9904 98.2803 99.7169 97.9451 99.8409 99.945 98.7621 99.9717 99.4413 98.9382 99.991 99.8095 102.358
H-25	99.63397216796875	if ( total == 0 ) { return 0 ; }
P-25	99.9904 99.5618 98.4114 99.8212 99.8694 99.9773 99.5484 99.333 99.989 99.8116 99.3816
H-25	99.63275146484375	if ( ( total > 0 ) ) { return 0 ; }
P-25	99.9904 98.2803 99.7169 97.5826 99.852 99.9711 98.694 99.9719 99.4242 99.2156 99.9841 99.8358 102.4271
H-25	99.63214111328125	if ( total > 0 ) { return coins [ 0 ] ;
P-25	99.9904 99.5618 97.5848 99.8126 99.9108 99.9817 99.4928 97.6637 99.8679 99.6061 99.9947 99.9187 101.5514
H-25	99.63078090122768	if ( total >= 0 ) { return coins [ 0 ] ;
P-25	99.9904 99.5618 97.5981 99.7658 99.9165 99.9797 99.4873 97.6614 99.869 99.5892 99.9947 99.9213 101.583
H-25	99.62226213727679	if ( total < 0 ) { return 0 ; } else {
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 99.3593 99.9893 99.8219 96.4863 99.07 101.8521
H-25	99.62093411959134	if ( total < 0 ) { return - 1 ; }
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 96.0185 98.7742 99.991 99.8023 102.3531
H-25	99.61695274939903	} if ( total < 0 ) { return 1 ; }
P-25	99.6438 99.9902 99.7857 99.4878 99.8468 99.8909 99.9777 99.4484 98.9219 99.9888 99.6618 102.3311
H-25	99.60716029575893	if ( ( total >= 0 ) ) { return 1 ; }
P-25	99.9904 98.2803 99.7169 97.5262 99.8263 99.9729 98.8265 99.9675 99.4333 98.8615 99.9823 99.8134 102.3903
H-25	99.6064453125	else if ( total < 0 ) { return 0 ; }
P-25	99.6745 99.9906 99.7825 99.4914 99.8391 99.8913 99.97 99.5348 99.376 99.9891 99.8154 102.3561
H-25	99.60341099330357	if ( ( total > 0 ) ) { return 1 ; }
P-25	99.9904 98.2803 99.7169 97.5826 99.852 99.9711 98.694 99.9719 99.4242 98.8595 99.9825 99.8099 102.3999
H-25	99.60207297585227	if ( total < 0 ) { return 0 ;
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 99.3593 99.9893 98.1414
H-25	99.59647623697917	if ( total == 0 ) { return 1 ; }
P-25	99.9904 99.5618 98.4114 99.8212 99.8694 99.9773 99.5484 98.9304 99.9922 99.7994 99.3433
H-25	99.59157017299107	if ( total < 0 ) { return 1 ; } else {
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 98.8983 99.99 99.7986 96.55 99.0791 101.8331
H-25	99.58008684430804	if ( total == 0 ) { return coins [ 0 ] ;
P-25	99.9904 99.5618 98.4114 99.8212 99.8694 99.9773 99.5484 96.3381 99.5781 99.64 99.9947 99.9401 101.538
H-25	99.57054554332386	if ( total < 0 ) { return 1 ;
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 98.8983 99.99 98.2548
H-25	99.56697904146634	if ( total == 0 ) { return - 0 ; }
P-25	99.9904 99.5618 98.4114 99.8212 99.8694 99.9773 99.5484 95.8968 99.2419 99.9835 99.7987 102.3575
H-25	99.56165489783653	else if ( total < 0 ) { return 1 ; }
P-25	99.6745 99.9906 99.7825 99.4914 99.8391 99.8913 99.97 99.5348 98.8631 99.9898 99.7773 102.324
H-25	99.5576171875	if ( total == 0 ) { return 0 ; } else {
P-25	99.9904 99.5618 98.4114 99.8212 99.8694 99.9773 99.5484 99.333 99.989 99.8116 96.6975 99.0828 101.8003
H-25	99.5532735188802	if ( total > 0 ) { return 0 ; }
P-25	99.9904 99.5618 97.5848 99.8126 99.9108 99.9817 99.4928 99.1856 99.9835 99.8161 99.4066
H-25	99.5529033954327	if ( ( total == 0 ) ) { return 0 ;
P-25	99.9904 98.2803 99.7169 97.9451 99.8409 99.945 98.7621 99.9717 99.4413 99.3069 99.9889 101.0859
H-25	99.55233764648438	if ( total == 0 ) {
P-25	99.9904 99.5618 98.4114 99.8212 99.8694 99.9773 98.8747
H-25	99.55138142903645	if ( total >= 0 ) { return 0 ; }
P-25	99.9904 99.5618 97.5981 99.7658 99.9165 99.9797 99.4873 99.1965 99.9843 99.8203 99.4033
H-25	99.5373065655048	if ( total < 0 ) { return 0 ; } else
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 99.3593 99.9893 99.8219 96.4863 100.1953
H-25	99.53217022235577	if ( ( total == 0 ) ) { return 1 ;
P-25	99.9904 98.2803 99.7169 97.9451 99.8409 99.945 98.7621 99.9717 99.4413 98.9382 99.991 101.1829
H-25	99.51493326822917	if ( total > 0 ) { return 1 ; }
P-25	99.9904 99.5618 97.5848 99.8126 99.9108 99.9817 99.4928 98.7758 99.9828 99.7934 99.3799
H-25	99.51354041466347	if ( ( total >= 0 ) ) { return 0 ;
P-25	99.9904 98.2803 99.7169 97.5262 99.8263 99.9729 98.8265 99.9675 99.4333 99.2149 99.9846 101.0239
H-25	99.51242065429688	if ( total >= 0 ) { return 1 ; }
P-25	99.9904 99.5618 97.5981 99.7658 99.9165 99.9797 99.4873 98.7815 99.9827 99.7959 99.3768
H-25	99.51097693810097	if ( ( total > 0 ) ) { return 0 ;
P-25	99.9904 98.2803 99.7169 97.5826 99.852 99.9711 98.694 99.9719 99.4242 99.2156 99.9841 101.0471
H-25	99.5095547762784	if ( total == 0 ) { return 0 ;
P-25	99.9904 99.5618 98.4114 99.8212 99.8694 99.9773 99.5484 99.333 99.989 98.1907
H-25	99.50121131310097	if ( total < 0 ) { return 1 ; } else
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 98.8983 99.99 99.7986 96.55 100.146
H-25	99.5004170735677	if ( total < 1 ) { return 0 ; }
P-25	99.9904 99.5618 99.3966 97.1495 99.9036 99.9782 99.5613 99.3465 99.9883 99.8222 99.3941
H-25	99.49710787259616	if ( ( total >= 0 ) ) { return 1 ;
P-25	99.9904 98.2803 99.7169 97.5262 99.8263 99.9729 98.8265 99.9675 99.4333 98.8615 99.9823 101.166
H-25	99.49390587439903	if ( ( total > 0 ) ) { return 1 ;
P-25	99.9904 98.2803 99.7169 97.5826 99.852 99.9711 98.694 99.9719 99.4242 98.8595 99.9825 101.1828
H-25	99.4885498046875	if ( ( total < 0 ) ) {
P-25	99.9904 98.2803 99.7169 99.5111 99.8543 99.9694 98.7187 99.9696 98.9622
H-25	99.48484293619792	if ( total <= 0 ) { return 0 ; }
P-25	99.9904 99.5618 96.6 99.8231 99.8793 99.9771 99.541 99.3425 99.9887 99.8145 99.3872
H-25	99.47861550071023	if ( total == 0 ) { return 1 ;
P-25	99.9904 99.5618 98.4114 99.8212 99.8694 99.9773 99.5484 98.9304 99.9922 98.2497
H-25	99.47404261997768	if ( total < coins . length ) { return 0 ; }
P-25	99.9904 99.5618 99.3966 96.1793 99.7759 99.9402 99.9122 99.967 99.5294 99.2306 99.9913 99.8351 99.4144
H-25	99.4697735126202	if ( total == 0 ) { return 0 ; } else
P-25	99.9904 99.5618 98.4114 99.8212 99.8694 99.9773 99.5484 99.333 99.989 99.8116 96.6975 100.1834
H-25	99.45883178710938	if ( total < 1 ) { return 1 ; }
P-25	99.9904 99.5618 99.3966 97.1495 99.9036 99.9782 99.5613 98.8957 99.9892 99.8007 99.3664
H-25	99.45319366455078	if ( total > 0 ) {
P-25	99.9904 99.5618 97.5848 99.8126 99.9108 99.9817 98.8709
H-25	99.44895935058594	if ( total >= 0 ) {
P-25	99.9904 99.5618 97.5981 99.7658 99.9165 99.9797 98.8668
H-25	99.44631958007812	if ( total <= 0 ) { return 1 ; }
P-25	99.9904 99.5618 96.6 99.8231 99.8793 99.9771 99.541 98.9291 99.9905 99.7983 99.3528
H-25	99.44464111328125	if ( total < 0 ) { return 0 ; } for (
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 99.3593 99.9893 99.8219 95.1075 99.9843 99.8299
H-25	99.4442850748698	if ( total < 0 ) { return $NUMBER$ ; }
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 95.9955 99.9808 99.8307 99.3915
H-25	99.44259878305289	if ( total == 0 ) { return 1 ; } else
P-25	99.9904 99.5618 98.4114 99.8212 99.8694 99.9773 99.5484 98.9304 99.9922 99.7994 96.7916 100.1478
H-25	99.43895612444196	if ( total < coins . length ) { return 1 ; }
P-25	99.9904 99.5618 99.3966 96.1793 99.7759 99.9402 99.9122 99.967 99.5294 98.832 99.9879 99.7871 99.373
H-25	99.4273681640625	if ( total < 0 || total < 0 ) {
P-25	99.9904 99.5618 99.3966 99.8262 97.3429 99.2416 99.0722 99.7051 99.9117 99.9558 99.2117
H-25	99.4170809659091	if ( total > 0 ) { return 0 ;
P-25	99.9904 99.5618 97.5848 99.8126 99.9108 99.9817 99.4928 99.1856 99.9835 98.1713
H-25	99.41635567801339	if ( total >= coins . length ) { return 0 ; }
P-25	99.9904 99.5618 97.5981 97.286 99.771 99.9618 99.9587 99.9692 99.5117 99.0798 99.9883 99.8284 99.4111
H-25	99.41307484019886	if ( total >= 0 ) { return 0 ;
P-25	99.9904 99.5618 97.5981 99.7658 99.9165 99.9797 99.4873 99.1965 99.9843 98.1508
H-25	99.412841796875	if ( total == 1 ) { return 0 ; }
P-25	99.9904 99.5618 98.4114 97.2436 99.8514 99.9796 99.5237 99.3118 99.9881 99.812 99.368
H-25	99.3894930752841	if ( total > 0 ) { return 1 ;
P-25	99.9904 99.5618 97.5848 99.8126 99.9108 99.9817 99.4928 98.7758 99.9828 98.2785
H-25	99.3858309659091	if ( total >= 0 ) { return 1 ;
P-25	99.9904 99.5618 97.5981 99.7658 99.9165 99.9797 99.4873 98.7815 99.9827 98.2679
H-25	99.38553873697917	if ( total == 0 || total < 0 ) {
P-25	99.9904 99.5618 98.4114 99.8212 97.5426 99.3474 99.2384 99.7473 99.9142 99.9587 99.1805
H-25	99.37698364257812	if ( total == 1 ) { return 1 ; }
P-25	99.9904 99.5618 98.4114 97.2436 99.8514 99.9796 99.5237 98.9265 99.9914 99.802 99.3296
H-25	99.3571444424716	if ( total < 1 ) { return 0 ;
P-25	99.9904 99.5618 99.3966 97.1495 99.9036 99.9782 99.5613 99.3465 99.9883 98.1399
H-25	99.3558858235677	if ( total < 0 || total == 0 ) {
P-25	99.9904 99.5618 99.3966 99.8262 97.3429 99.2416 98.261 99.6719 99.8996 99.9589 99.2072
H-25	99.35244140625	if ( total < coins . length ) {
P-25	99.9904 99.5618 99.3966 96.1793 99.7759 99.9402 99.9122 99.967 98.8884
H-25	99.35098266601562	if ( total < 0 ) { return total ; }
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 94.9592 99.8741 99.881 99.3648
H-25	99.34491521661931	if ( total <= 0 ) { return 0 ;
P-25	99.9904 99.5618 96.6 99.8231 99.8793 99.9771 99.541 99.3425 99.9887 98.1778
H-25	99.34236145019531	if ( total < 1 ) {
P-25	99.9904 99.5618 99.3966 97.1495 99.9036 99.9782 98.8463
H-25	99.33919677734374	if ( ( total == 0 ) ) {
P-25	99.9904 98.2803 99.7169 97.9451 99.8409 99.945 98.7621 99.9717 99.0271
H-25	99.32872772216797	if ( total <= 0 ) {
P-25	99.9904 99.5618 96.6 99.8231 99.8793 99.9771 98.8857
H-25	99.3258389559659	if ( total < 1 ) { return 1 ;
P-25	99.9904 99.5618 99.3966 97.1495 99.9036 99.9782 99.5613 98.8957 99.9892 98.2453
H-25	99.31456409801136	if ( total <= 0 ) { return 1 ;
P-25	99.9904 99.5618 96.6 99.8231 99.8793 99.9771 99.541 98.9291 99.9905 98.2554
H-25	99.30001831054688	if ( ( total >= 0 ) ) {
P-25	99.9904 98.2803 99.7169 97.5262 99.8263 99.9729 98.8265 99.9675 98.9808
H-25	99.29779052734375	if ( ( total > 0 ) ) {
P-25	99.9904 98.2803 99.7169 97.5826 99.852 99.9711 98.694 99.9719 99.0062
H-25	99.29666476779514	} if ( total < 0 ) {
P-25	99.6438 99.9902 99.7857 99.4878 99.8468 99.8909 99.9777 99.0017
H-25	99.29150390625	if ( total < 0 ) { return $NUMBER$ ;
P-25	99.9904 99.5618 99.3966 99.8262 99.89 99.9769 99.5785 95.9955 99.9808 98.0973
H-25	99.28980712890625	if ( total >= coins . length ) {
P-25	99.9904 99.5618 97.5981 97.286 99.771 99.9618 99.9587 99.9692 98.8885
H-25	99.23333740234375	if ( total == 1 ) {
P-25	99.9904 99.5618 98.4114 97.2436 99.8514 99.9796 98.916
H-25	99.22959594726562	if ( total == coins . length ) {
P-25	99.9904 99.5618 98.4114 96.1054 99.6447 99.8763 99.8806 99.9629 98.9498
H-25	99.20887974330357	if ( total < 0 )
P-25	99.9904 99.5618 99.3966 99.8262 99.89 95.8847
H-25	99.18846299913194	else if ( total < 0 ) {
P-25	99.6745 99.9906 99.7825 99.4914 99.8391 99.8913 99.97 98.8838
H-25	99.1630630493164	if ( total != 0 ) {
P-25	99.9904 99.5618 95.3267 99.8139 99.894 99.9812 98.824
H-25	99.16140407986111	} if ( total == 0 ) {
P-25	99.6438 99.9902 99.7857 98.2365 99.8523 99.871 99.9766 99.0512
H-25	99.12715148925781	if ( total > 1 ) {
P-25	99.9904 99.5618 97.5848 97.1768 99.929 99.982 98.8799
H-25	99.11492919921875	if ( total >= 1 ) {
P-25	99.9904 99.5618 97.5981 97.0684 99.9289 99.9799 98.8795
H-25	99.06011962890625	if ( total < $NUMBER$ ) {
P-25	99.9904 99.5618 99.3966 94.869 99.916 99.9753 98.8593
H-25	99.05366734095982	if ( total == 0 )
P-25	99.9904 99.5618 98.4114 99.8212 99.8694 95.809
H-25	99.05137416294643	return coins [ 0 ] ;
P-25	98.6575 99.9117 99.4704 99.9953 99.809 99.8536
H-25	98.93738664899554	if ( total >= 0 )
P-25	99.9904 99.5618 97.5981 99.7658 99.9165 95.8166
H-25	98.92827497209821	if ( total > 0 )
P-25	99.9904 99.5618 97.5848 99.8126 99.9108 95.725
H-25	98.92213657924107	if ( ! total ) {
P-25	99.9904 96.1623 99.005 98.3792 99.9827 99.0228
H-25	98.78475952148438	if ( false ) {
P-25	99.9904 93.8462 99.8386 99.9835 99.1373
H-25	97.92613220214844	return 0 ;
P-25	96.3405 99.9018 99.8001
H-25	95.19609832763672	}
P-25	94.3468
S-26	} else if ( x > pivot ) {
T-26	} else if ( x >= pivot ) {
H-26	100.08708639705883	} else if ( x > pivot ) { greater . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 99.9509 99.9755 99.9818 99.9533 99.9948 99.9995 102.5653
H-26	99.96292453342014	} else if ( x > pivot ) { less@@ er . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 97.7909 99.9948 99.8139 99.9879 99.8809 99.8703 99.9943 99.9996 102.3878
H-26	99.94342041015625	} else if ( x > pivot ) { greater . add ( x ) ; }
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 99.9509 99.9755 99.9818 99.9533 99.9948 99.9995 98.837 101.2294
H-26	99.853515625	} else if ( x < pivot ) { greater . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 96.054 99.9762 99.9124 99.9893 99.3478 99.9689 99.9737 99.9881 99.955 99.9963 99.9994 102.5348
H-26	99.84960219439338	} else if ( x > pivot ) { greater . add ( pivot ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 99.9509 99.9755 99.9818 96.0712 99.9163 99.9995 102.4887
H-26	99.84089929917279	} else if ( x >= pivot ) { greater . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 95.7713 99.9767 99.895 99.9882 99.4102 99.9598 99.9751 99.9848 99.9509 99.9953 99.9995 102.575
H-26	99.83500366210937	} else if ( x > pivot ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 98.738
H-26	99.82249620225694	} else if ( x > pivot ) { less@@ er . add ( pivot ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 97.7909 99.9948 99.8139 99.9879 99.8809 97.5433 99.9753 99.9994 102.2066
H-26	99.81047506893383	} else if ( x <= pivot ) { greater . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 95.2636 99.9823 99.9443 99.9898 99.3571 99.9609 99.9743 99.9844 99.9557 99.9959 99.9995 102.5563
H-26	99.80347397748162	} else if ( x > pivot ) { greater . set ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 99.9509 95.1177 99.9424 99.9064 99.9636 99.9983 102.7205
H-26	99.80118815104167	} else if ( x > pivot ) { less@@ er = quicksort ( greater ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 97.7909 99.9948 98.2198 99.7022 99.9995 99.0797 99.8382 99.994 102.1904
H-26	99.7994025735294	} else if ( x > pivot ) { greater = quicksort ( greater ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 96.8966 98.7929 99.9991 99.2572 99.866 99.996 102.7228
H-26	99.78811465992646	} else if ( x == pivot ) { greater . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 94.9044 99.9766 99.9549 99.9907 99.3837 99.9554 99.9747 99.9821 99.9583 99.9951 99.9996 102.5083
H-26	99.78652615017361	} else if ( x < pivot ) { less@@ er . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 96.054 99.9762 99.9124 99.9893 98.3791 99.9944 99.8671 99.9876 99.9365 99.8878 99.9962 99.9996 102.3632
H-26	99.75932042738971	} else if ( x > pivot ) { greater = quicksort ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 96.8966 98.7929 99.9991 98.4793 99.8381 99.995 102.8481
H-26	99.75783404181985	} else if ( x > 1 ) { greater . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 94.398 99.9305 99.9861 99.4406 99.9662 99.9762 99.9849 99.958 99.9925 99.9995 102.5015
H-26	99.74727376302083	} else if ( x >= pivot ) { less@@ er . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 95.7713 99.9767 99.895 99.9882 97.9814 99.9946 99.8462 99.9881 99.9162 99.8698 99.9948 99.9996 102.4153
H-26	99.74215877757354	} else if ( x > pivot ) { greater . remove ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 99.9509 94.0303 99.9774 99.9299 99.9981 99.999 102.6717
H-26	99.74068874782986	} else if ( x > pivot ) { greater . add ( pivot ) ; }
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 99.9509 99.9755 99.9818 96.0712 99.9163 99.9995 98.9526 101.4254
H-26	99.72754584418402	} else if ( x <= pivot ) { less@@ er . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 95.2636 99.9823 99.9443 99.9898 98.0992 99.9945 99.8492 99.9873 99.9167 99.8896 99.9959 99.9997 102.3699
H-26	99.71173454733456	} else if ( x > pivot ) { greater . add ( 0 ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 99.9509 99.9755 99.9818 94.1505 99.4418 99.9987 102.541
H-26	99.70815700954861	} else if ( x < pivot ) { greater . add ( x ) ; }
P-26	99.9136 99.9804 99.9977 99.9827 96.054 99.9762 99.9124 99.9893 99.3478 99.9689 99.9737 99.9881 99.955 99.9963 99.9994 98.9003 100.8716
H-26	99.70661078559027	} else if ( x > pivot || x > pivot && x > pivot ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 96.5731 99.6581 99.9381 99.9404 96.5065 99.5302 99.9289 99.9235 99.9461 99.9774 103.069
H-26	99.70354147518383	} else if ( x != pivot ) { greater . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 93.4622 99.9513 99.9613 99.9887 99.4445 99.9558 99.9765 99.9818 99.9445 99.9935 99.9997 102.4866
H-26	99.70230441623264	} else if ( x >= pivot ) { greater . add ( x ) ; }
P-26	99.9136 99.9804 99.9977 99.9827 95.7713 99.9767 99.895 99.9882 99.4102 99.9598 99.9751 99.9848 99.9509 99.9953 99.9995 98.8209 101.1002
H-26	99.6991325827206	} else if ( x > pivot ) { greater = quicksort ( pivot ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 96.8966 98.7929 99.9991 97.6488 99.7778 99.9971 102.7139
H-26	99.69894070095486	} else if ( x == pivot ) { less@@ er . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 94.9044 99.9766 99.9549 99.9907 98.0209 99.9945 99.8401 99.9874 99.9074 99.9019 99.9964 99.9997 102.2917
H-26	99.69822862413194	} else if ( x > pivot $NUMBER$ ) { greater . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 93.171 99.9039 99.984 99.366 99.8959 99.9742 99.9827 99.956 99.9936 99.9995 102.6136
H-26	99.69670952690973	} else if ( x > pivot ) { greater = quicksort ( greater ) ; }
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 96.8966 98.7929 99.9991 99.2572 99.866 99.996 98.3988 102.2751
H-26	99.693115234375	} else if ( ( x > pivot ) || ( x > pivot ) ) {
P-26	99.9136 99.9804 99.9977 93.8165 99.9491 99.9397 99.9688 99.84 99.0411 99.8056 99.683 99.9273 99.9349 99.9381 99.9612 99.9534 102.886
H-26	99.69227430555556	} else if ( x > pivot ) { greater = quicksort ( less@@ er ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 96.8966 98.7929 99.9991 97.346 99.996 99.861 99.9961 102.514
H-26	99.69134521484375	} else if ( x > pivot && x > pivot && x > pivot ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 96.5795 99.3122 99.9176 99.9494 96.4431 99.6491 99.9321 99.936 99.954 99.9792 103.0642
H-26	99.68854437934027	} else if ( x > pivot || x > pivot || x > pivot ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 96.5731 99.6581 99.9381 99.9404 95.9925 99.7495 99.9392 99.9108 99.9371 99.9758 103.0514
H-26	99.68843347886029	} else if ( x > pivot ) { greater . add ( 1 ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 99.9509 99.9755 99.9818 93.3055 99.8541 99.9987 102.5776
H-26	99.68660242417279	} else if ( x > pivot ) { greater . contains ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 99.9509 93.1032 99.9691 99.9422 99.9956 99.9848 102.6673
H-26	99.68547227647569	} else if ( x > pivot ) { { greater . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 93.0484 99.4376 99.929 99.9735 99.9845 99.9358 99.9947 99.9995 102.4235
H-26	99.68380398220486	} else if ( x > pivot && arr . size ( ) > 1 ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 96.5795 98.0143 99.9761 99.7661 99.9998 99.9994 99.4704 98.9905 99.9622 99.9759 101.8466
H-26	99.68379480698529	} else if ( x > pivot ) { greater . put ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 99.9509 93.5212 99.9977 99.9563 99.4415 99.9954 102.7021
H-26	99.67192925347223	} else if ( x > 1 ) { less@@ er . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 94.398 99.9305 99.9861 98.0695 99.9946 99.8153 99.9886 99.9168 99.9241 99.9924 99.9996 102.3296
H-26	99.66695149739583	} else if ( x > pivot ) { less@@ er = quicksort ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 97.7909 99.9948 98.2198 99.7022 99.9995 96.6316 99.813 99.995 102.2465
H-26	99.66659725413604	} else if ( pivot > pivot ) { greater . add ( x ) ;
P-26	99.9136 99.9804 99.9977 93.4836 99.5156 99.8329 99.8994 99.9795 99.4274 99.918 99.9742 99.9783 99.918 99.9951 99.9995 102.5794
H-26	99.6598762063419	} else if ( x > pivot ) { if ( x > pivot ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 94.3553 99.9987 98.8471 99.946 99.9737 99.901 99.9799 101.6044
H-26	99.65828450520833	} else if ( x <= pivot ) { greater . add ( x ) ; }
P-26	99.9136 99.9804 99.9977 99.9827 95.2636 99.9823 99.9443 99.9898 99.3571 99.9609 99.9743 99.9844 99.9557 99.9959 99.9995 98.8532 100.7742
H-26	99.65711167279412	} else if ( x > pivot ) { greater . add ( $NUMBER$ ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 99.9509 99.9755 99.9818 92.6587 99.9644 99.9987 102.5816
H-26	99.65164523654514	} else if ( x > pivot ) { less@@ er = quicksort ( pivot ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 97.7909 99.9948 98.2198 99.7022 99.9995 96.4928 99.8401 99.9978 102.0799
H-26	99.64898681640625	} else { if ( x > pivot ) { greater . add ( x ) ;
P-26	99.9136 95.7758 96.851 99.9981 99.9737 99.9208 99.9768 99.8186 99.979 99.451 99.9716 99.9767 99.9848 99.965 99.9948 99.9995 102.1912
H-26	99.63791073069854	} else if ( x > greater ) { greater . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 92.8875 99.4229 99.9744 99.4146 99.9553 99.9747 99.9831 99.9447 99.9942 99.9994 102.5444
H-26	99.63048444475446	} else if ( x > pivot || x > pivot ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 96.5731 99.6581 99.9381 99.9404 99.9266 99.985 99.0776
H-26	99.61336023667279	else if ( x > pivot ) { greater . add ( x ) ; }
P-26	99.2822 99.9979 99.9564 99.9409 99.9723 99.8703 99.9471 99.3505 99.9759 99.9776 99.9885 99.9668 99.9943 99.9995 99.2209 100.6994
H-26	99.60686383928571	} else if ( x > pivot && x > pivot ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 96.5795 99.3122 99.9176 99.9494 99.9379 99.9855 99.0861
H-26	99.60544720818015	if ( x > pivot ) { greater . add ( x ) ; } }
P-26	99.9974 99.5255 99.9325 99.9639 99.8804 99.9433 99.2662 99.9695 99.9759 99.9873 99.9643 99.9937 99.9995 99.3204 98.0146 101.7088
H-26	99.56962076822917	} else if ( x > pivot ) { if ( greater ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 94.3553 99.9987 98.8716 99.444 99.9093 101.3534
H-26	99.56886919806985	} if ( x > pivot ) { greater . add ( x ) ; }
P-26	93.898 99.9958 99.3009 99.9333 99.9452 99.856 99.9719 99.4887 99.8988 99.9753 99.9717 99.9476 99.9939 99.9996 98.9473 101.607
H-26	99.56649576822916	if ( x > pivot ) { greater . add ( x ) ;
P-26	99.9974 99.5255 99.9325 99.9639 99.8804 99.9433 99.2662 99.9695 99.9759 99.9873 99.9643 99.9937 99.9995 99.2486
H-26	99.5606689453125	if ( x > pivot ) { less@@ er . add ( x ) ;
P-26	99.9974 99.5255 99.9325 99.9639 99.8804 99.9433 98.9181 99.9943 99.9297 99.9866 99.9515 99.944 99.9933 99.9996 99.1613
H-26	99.55633544921875	} else if ( x > pivot . size ( ) ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 96.1649 99.404 99.9979 99.9994 99.9291 99.9706 98.5949
H-26	99.55351257324219	else if ( x > pivot ) { greater . add ( x ) ;
P-26	99.2822 99.9979 99.9564 99.9409 99.9723 99.8703 99.9471 99.3505 99.9759 99.9776 99.9885 99.9668 99.9943 99.9995 99.3494
H-26	99.54371744791666	} else if ( x > pivot ) { greater = x ; }
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 96.8966 97.9382 99.6826 98.592 100.9871
H-26	99.53753255208333	} else if ( x > pivot ) { greater = pivot ; }
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 96.8966 97.564 99.85 98.7232 100.9698
H-26	99.53028106689453	} else if ( x > pivot ) greater . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 93.3592 99.855 99.9758 99.9582 99.9463 99.9944 99.9995 99.7725
H-26	99.52273380055146	} else if ( x > pivot ) less@@ er . add ( x ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 92.9623 99.9945 99.9061 99.9849 99.8185 99.9014 99.9945 99.9997 99.7011
H-26	99.52174287683823	else if ( x > pivot ) { less@@ er . add ( x ) ;
P-26	99.2822 99.9979 99.9564 99.9409 99.9723 99.8703 99.9471 98.5108 99.9943 99.9348 99.9866 99.9655 99.9465 99.9943 99.9997 99.2834
H-26	99.507568359375	} else if ( x > pivot ) { greater = x ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 96.8966 97.9382 99.6826 99.5292
H-26	99.50510475852273	} else { greater . add ( x ) ;
P-26	99.9136 95.7758 99.5369 99.9215 99.9725 99.9821 99.9284 99.9947 99.9992 99.5918
H-26	99.48876081194196	} else if ( x > pivot ) { greater = pivot ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 96.8966 97.564 99.85 99.4727
H-26	99.47837829589844	if ( x > pivot ) { greater . add ( x ) ; }
P-26	99.9974 99.5255 99.9325 99.9639 99.8804 99.9433 99.2662 99.9695 99.9759 99.9873 99.9643 99.9937 99.9995 99.3204 98.0848
H-26	99.47737884521484	} if ( x > pivot ) { greater . add ( x ) ;
P-26	93.898 99.9958 99.3009 99.9333 99.9452 99.856 99.9719 99.4887 99.8988 99.9753 99.9717 99.9476 99.9939 99.9996 99.5216
H-26	99.4496358235677	} else { greater . add ( x ) ; }
P-26	99.9136 95.7758 99.5369 99.9215 99.9725 99.9821 99.9284 99.9947 99.9992 98.8356 99.5957
H-26	99.438037109375	} else if ( x < pivot ) {
P-26	99.9136 99.9804 99.9977 99.9827 96.054 99.9762 99.9124 99.9893 98.6344
H-26	99.41815795898438	} else if ( x >= pivot ) {
P-26	99.9136 99.9804 99.9977 99.9827 95.7713 99.9767 99.895 99.9882 98.7366
H-26	99.40647670200893	} else if ( x > pivot ) { greater = ) ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 99.9885 99.4473 96.8966 96.5043 99.8116 99.4188
H-26	99.37684936523438	} else if ( x <= pivot ) {
P-26	99.9136 99.9804 99.9977 99.9827 95.2636 99.9823 99.9443 99.9898 98.7745
H-26	99.36891682942708	} else if ( x > pivot && pivot ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 96.5795 97.5683 99.4845 99.9847 99.0821
H-26	99.36805216471355	break ; } else if ( x > pivot ) {
P-26	99.9596 99.6343 99.6901 99.8758 99.9984 99.9873 99.9302 99.9745 99.8482 99.9791 98.7596
H-26	99.36525472005208	} else { less@@ er . add ( x ) ;
P-26	99.9136 95.7758 97.8519 99.9949 99.7093 99.9881 99.8336 99.8974 99.9961 99.9995 99.4831
H-26	99.34981282552083	} else if ( x > pivot || pivot ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 96.5731 97.3126 99.545 99.9846 99.0547
H-26	99.34689565805289	} else { greater . add ( x ) ; } }
P-26	99.9136 95.7758 99.5369 99.9215 99.9725 99.9821 99.9284 99.9947 99.9992 98.8356 98.4323 99.2774
H-26	99.34405048076923	} else { less@@ er . add ( x ) ; }
P-26	99.9136 95.7758 97.8519 99.9949 99.7093 99.9881 99.8336 99.8974 99.9961 99.9995 99.0062 99.5665
H-26	99.3402587890625	} else if ( x == pivot ) {
P-26	99.9136 99.9804 99.9977 99.9827 94.9044 99.9766 99.9549 99.9907 98.762
H-26	99.33994704026442	} * Integer pivot = arr . get ( 0 ) ;
P-26	96.0762 99.3362 98.6098 99.9489 99.2552 99.9794 99.8698 99.9992 99.2389 99.9867 99.9101 99.2694
H-26	99.3317401592548	} * Integer x : greater . add ( x ) ;
P-26	96.0762 99.3362 99.2679 99.6604 98.4675 99.7162 99.6576 99.9327 99.7277 99.9826 99.9957 99.5524
H-26	99.32127888997395	} else if ( x > pivot - 1 ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 94.0572 99.2587 99.9662 99.9799 98.8655
H-26	99.30513509114583	} else if ( x > pivot && greater ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 96.5795 97.3371 98.9626 99.9746 99.08
H-26	99.30428738064236	} else if ( x > pivot )
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 94.1151
H-26	99.27064208984375	} else if ( x > 1 ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 94.398 99.9305 99.9861 98.6425
H-26	99.26328531901042	else greater . add ( x ) ;
P-26	98.6051 99.9259 99.9774 99.9839 99.9443 99.9954 99.9993 99.6517
H-26	99.22509765625	} else if ( x > pivot $NUMBER$ ) {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 93.171 99.9039 99.984 98.6895
H-26	99.21898803710937	else less@@ er . add ( x ) ;
P-26	97.687 99.9939 99.8029 99.9877 99.8918 99.9492 99.9963 99.9996 99.5947
H-26	99.20478959517045	} else if ( x > pivot ) break ;
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 99.8956 92.4914 99.9886 99.1492
H-26	99.1996737393466	else { greater . add ( x ) ; }
P-26	97.753 99.5466 99.9588 99.9765 99.9861 99.9461 99.9954 99.9992 99.1156 99.6322
H-26	99.19823540581598	else if ( x > pivot ) {
P-26	99.2822 99.9979 99.9564 99.9409 99.9723 99.8703 99.9471 98.5303
H-26	99.18981323242187	} else if ( x != pivot ) {
P-26	99.9136 99.9804 99.9977 99.9827 93.4622 99.9513 99.9613 99.9887 98.7207
H-26	99.18826904296876	else { greater . add ( x ) ;
P-26	97.753 99.5466 99.9588 99.9765 99.9861 99.9461 99.9954 99.9992 99.4341
H-26	99.17200317382813	else greater . add ( x ) ; }
P-26	98.6051 99.9259 99.9774 99.9839 99.9443 99.9954 99.9993 98.7078 99.2944
H-26	99.171923828125	} else if ( x > pivot && {
P-26	99.9136 99.9804 99.9977 99.9827 99.9354 99.9785 96.5795 96.4397 98.9722
H-26	99.15978240966797	if ( x > pivot ) {
P-26	99.9974 99.5255 99.9325 99.9639 99.8804 99.9433 98.1859
H-26	99.04876708984375	} if ( x > pivot ) {
P-26	93.898 99.9958 99.3009 99.9333 99.9452 99.856 99.9719 98.5981
H-26	98.90152740478516	result = quicksort ( greater ) ;
P-26	99.8072 99.2683 99.9984 99.3878 99.6862 99.9954 99.4131
H-26	96.78737386067708	break ;
P-26	99.9596 95.6229
H-26	96.54609680175781	}
P-26	93.1525
S-27	node = nex@@ tnode ;
T-27	prev@@ node = node ; node = nex@@ tnode ;
H-27	99.76627604166667	node = nex@@ tnode ;
P-27	99.9283 99.7706 99.976 99.9136 99.5253
H-27	99.67699085582386	node = nex@@ tnode ; node = nex@@ tnode ;
P-27	99.9283 99.7706 99.976 99.9136 98.1804 99.8741 99.7948 99.9784 99.8912 99.6556
H-27	99.63380940755208	node = nex@@ tnode ; node = nex@@ tnode ; }
P-27	99.9283 99.7706 99.976 99.9136 98.1804 99.8741 99.7948 99.9784 99.8912 97.5941 101.2203
H-27	99.60721842447917	node = nex@@ tnode ; } return prev@@ node ; }
P-27	99.9283 99.7706 99.976 99.9136 97.4552 99.2298 98.9405 99.9463 99.9563 98.0773 102.6089
H-27	99.59171549479167	node = nex@@ tnode . get CaMeL Successor ( ) ;
P-27	99.9283 99.7706 99.976 97.2195 99.8414 99.9954 99.7537 99.9935 99.7198 99.9885 99.4299
H-27	99.572021484375	node = nex@@ tnode ; else node = nex@@ tnode ;
P-27	99.9283 99.7706 99.976 99.9136 94.5251 99.684 99.836 99.2133 99.975 99.9254 102.6333
H-27	99.54327947443181	node = node . get CaMeL Successor ( ) ;
P-27	99.9283 97.2938 99.2418 99.9142 99.9978 99.7269 99.9948 99.9918 99.993 99.4099
H-27	99.52156575520833	node = nex@@ tnode ; } node = nex@@ tnode ;
P-27	99.9283 99.7706 99.976 99.9136 97.4552 95.7412 99.8514 99.4585 99.98 99.9081 102.7919
H-27	99.51783243815105	node = nex@@ tnode ; if ( node != null )
P-27	99.9283 99.7706 99.976 99.9136 95.6312 99.9937 98.9662 99.5884 99.9657 99.8882 101.1083
H-27	99.50940958658855	node = nex@@ tnode ; break ; } return node ;
P-27	99.9283 99.7706 99.976 99.9136 96.0808 99.9945 99.5383 98.5089 98.1984 99.9807 102.7388
H-27	99.5076016512784	node = nex@@ tnode ; } return node ; }
P-27	99.9283 99.7706 99.976 99.9136 97.4552 99.2298 98.0628 99.983 98.1394 102.641
H-27	99.50687662760417	if ( node != null ) node = nex@@ tnode ;
P-27	99.9936 98.918 99.3521 99.9643 99.8956 98.9907 99.0652 99.4561 99.9798 99.8503 102.6677
H-27	99.49429321289062	Node node = nex@@ tnode ; node = nex@@ tnode ;
P-27	98.4276 99.9263 99.5765 99.9727 99.8345 98.2102 99.8596 99.7401 99.9772 99.8547 102.2777
H-27	99.49141438802083	node = nex@@ tnode ; } else node = null ;
P-27	99.9283 99.7706 99.976 99.9136 97.4552 97.3986 97.9912 99.8554 99.3676 99.995 102.7617
H-27	99.48750443892045	node = nex@@ tnode ; } return prev@@ node ;
P-27	99.9283 99.7706 99.976 99.9136 97.4552 99.2298 98.9405 99.9463 99.9563 99.762
H-27	99.47847123579545	node . set CaMeL Successor ( prev@@ node ) ;
P-27	97.1944 99.7697 99.9992 99.8215 99.9981 99.1408 99.9909 99.9941 99.9993 98.8712
H-27	99.36134643554688	node . set CaMeL Successor ( node ) ;
P-27	97.1944 99.7697 99.9992 99.8215 99.9981 98.5831 99.9658 99.9996 98.7981
H-27	99.3570223721591	node = nex@@ tnode ; node = prev@@ node ;
P-27	99.9283 99.7706 99.976 99.9136 98.1804 99.8741 96.777 99.8705 99.5046 99.6482
H-27	99.35471801757812	node = nex@@ tnode ; } return node ;
P-27	99.9283 99.7706 99.976 99.9136 97.4552 99.2298 98.0628 99.983 99.744
H-27	99.34572531960227	node = nex@@ tnode ; break ; } else {
P-27	99.9283 99.7706 99.976 99.9136 96.0808 99.9945 99.5383 97.1573 99.4232 101.5366
H-27	99.33290793678977	node = nex@@ tnode ; } return nex@@ tnode ;
P-27	99.9283 99.7706 99.976 99.9136 97.4552 99.2298 97.1753 99.9806 99.9819 99.7669
H-27	99.32122802734375	node = node ; node = nex@@ tnode ;
P-27	99.9283 97.2938 99.2971 98.1689 99.8677 99.6825 99.9771 99.8691 99.6439
H-27	99.31328667534723	node = nex@@ tnode ; break ; }
P-27	99.9283 99.7706 99.976 99.9136 96.0808 99.9945 99.5383 99.1335
H-27	99.3050870028409	node = node ; node = nex@@ tnode ; }
P-27	99.9283 97.2938 99.2971 98.1689 99.8677 99.6825 99.9771 99.8691 97.5141 101.2735
H-27	99.2928133877841	node . set CaMeL Successor ( nex@@ tnode ) ;
P-27	97.1944 99.7697 99.9992 99.8215 99.9981 97.4067 99.7804 99.9758 99.9994 98.7919
H-27	99.27968528053977	node = prev@@ node ; node = nex@@ tnode ;
P-27	99.9283 95.8311 99.893 99.5813 98.2334 99.8933 99.7166 99.9724 99.896 99.6473
H-27	99.26790771484374	node = nex@@ tnode ; node = node ;
P-27	99.9283 99.7706 99.976 99.9136 98.1804 99.8741 96.6251 99.3329 99.5941
H-27	99.26591273716518	node = nex@@ tnode ; }
P-27	99.9283 99.7706 99.976 99.9136 97.4552 98.3338
H-27	99.25787353515625	node = nex@@ tnode ; break ;
P-27	99.9283 99.7706 99.976 99.9136 96.0808 99.9945 98.9152
H-27	99.24449573863636	next = nex@@ tnode ; node = nex@@ tnode ;
P-27	99.8651 99.3876 99.9745 99.9213 98.4438 99.8957 99.7927 99.9786 99.8872 99.6378
H-27	99.23987926136364	prev = nex@@ tnode ; node = nex@@ tnode ;
P-27	99.8741 99.4842 99.9748 99.9295 98.5237 99.9162 99.7834 99.9793 99.8953 99.6234
H-27	99.2218017578125	node = get CaMeL Successor ( nex@@ tnode ) ;
P-27	99.9283 94.3018 99.9862 99.1594 99.9778 99.1299 99.9442 99.8813 99.9975 99.6495
H-27	99.21912730823864	node = nex@@ tnode ; nex@@ tnode = node ;
P-27	99.9283 99.7706 99.976 99.9136 94.8471 99.9606 99.7944 98.5769 99.583 99.5761
H-27	99.21629028320312	node = nex@@ tnode ; return nex@@ tnode ;
P-27	99.9283 99.7706 99.976 99.9136 94.9627 98.7109 99.9726 99.9909 99.4535
H-27	99.21239124644886	next = node . get CaMeL Successor ( ) ;
P-27	99.8651 98.5681 99.1541 99.8961 99.9968 99.6495 99.9941 99.9904 99.9844 99.3325
H-27	99.20435680042614	o = nex@@ tnode ; node = nex@@ tnode ;
P-27	99.8819 99.5622 99.9738 99.895 98.3048 99.8785 99.7794 99.9778 99.8831 99.6398
H-27	99.19896351207386	i = node . get CaMeL Successor ( ) ;
P-27	99.8663 98.2446 99.8193 99.8955 99.9969 99.677 99.9928 99.9924 99.9831 99.4865
H-27	99.18574662642045	o = node . get CaMeL Successor ( ) ;
P-27	99.8819 98.27 99.4609 99.8912 99.9967 99.6416 99.9944 99.9886 99.9884 99.4579
H-27	99.1712313565341	loop = node . get CaMeL Successor ( ) ;
P-27	99.6823 98.5697 99.4861 99.8552 99.9969 99.6079 99.9941 99.9864 99.987 99.4643
H-27	99.169921875	node = nex@@ tnode ; return nex@@ tnode ; }
P-27	99.9283 99.7706 99.976 99.9136 94.9627 98.7109 99.9726 99.9909 99.0442 99.1156
H-27	99.14207763671875	node = nex@@ tnode ; return prev@@ node ;
P-27	99.9283 99.7706 99.976 99.9136 94.9627 98.1494 99.8729 99.988 99.3754
H-27	99.13235473632812	node = nex@@ tnode ; } return null ;
P-27	99.9283 99.7706 99.976 99.9136 97.4552 99.2298 95.8499 99.9985 99.7178
H-27	99.12284342447917	node = nex@@ tnode . nex@@ tnode ;
P-27	99.9283 99.7706 99.976 97.2195 96.4268 99.8946 99.9385 99.4674
H-27	99.10968627929688	node = nex@@ tnode ; return node ; }
P-27	99.9283 99.7706 99.976 99.9136 94.9627 98.5659 99.9901 99.2246 99.2812
H-27	99.10498657226563	node = node ; } return prev@@ node ;
P-27	99.9283 97.2938 99.2971 97.3597 99.1177 98.9055 99.9308 99.9732 99.76
H-27	99.10062662760417	node = nex@@ tnode ; return node ;
P-27	99.9283 99.7706 99.976 99.9136 94.9627 98.5659 99.9901 99.3147
H-27	99.09490288628473	node = nex@@ tnode ; } else {
P-27	99.9283 99.7706 99.976 99.9136 97.4552 97.3986 99.5603 98.3675
H-27	99.09058837890625	node = node ;
P-27	99.9283 97.2938 99.2971 99.4499
H-27	99.05767822265625	node = nex@@ tnode ; continue ; }
P-27	99.9283 99.7706 99.976 99.9136 94.0518 99.9677 99.7158 98.7113
H-27	99.04991803850446	Node node = nex@@ tnode ;
P-27	98.4276 99.9263 99.5765 99.9727 99.8345 99.3374
H-27	99.03488159179688	Node nex@@ tnode = nex@@ tnode ;
P-27	98.6148 99.9198 99.7478 98.4427 99.978 99.8418 99.4599
H-27	99.03401692708333	node = prev@@ node ;
P-27	99.9283 95.8311 99.893 99.5813 99.4865
H-27	99.01877170138889	node = nex@@ tnode + nex@@ tnode ;
P-27	99.9283 99.7706 99.976 94.9837 97.6345 99.9505 99.844 99.5974
H-27	99.01153564453125	Node prev@@ node = nex@@ tnode ;
P-27	97.9545 99.8399 99.9469 98.9016 99.9617 99.8053 99.4079
H-27	98.98713684082031	node = node = nex@@ tnode ;
P-27	99.9283 97.2938 96.214 99.5433 99.9757 99.864 99.5941
H-27	98.96340942382812	try { node = nex@@ tnode ;
P-27	99.9899 99.0099 99.7887 99.8279 99.98 99.6068 99.2682
H-27	98.95655822753906	if ( nex@@ tnode != null )
P-27	99.9936 98.4928 99.9546 99.5383 99.9588 99.8608 97.9046
H-27	98.95315551757812	node = nex@@ tnode ; continue ;
P-27	99.9283 99.7706 99.976 99.9136 94.0518 99.9677 98.5334
H-27	98.95004272460938	if ( prev@@ node != null )
P-27	99.9936 98.2956 99.9255 99.5713 99.9562 99.9014 98.0077
H-27	98.91736602783203	node = nex@@ tnode + node ;
P-27	99.9283 99.7706 99.976 94.9837 98.9569 98.7156 99.5239
H-27	98.9128926595052	next = nex@@ tnode ;
P-27	99.8651 99.3876 99.9745 99.9213 99.4237
H-27	98.91065216064453	node = nex@@ tnode - node ;
P-27	99.9283 99.7706 99.976 94.2551 98.7907 99.5743 99.5062
H-27	98.8914794921875	{ node = nex@@ tnode ;
P-27	99.0336 99.891 99.7359 99.9757 99.8543 99.4411
H-27	98.88014729817708	prev = nex@@ tnode ;
P-27	99.8741 99.4842 99.9748 99.9295 99.3635
H-27	98.87689208984375	o = nex@@ tnode ;
P-27	99.8819 99.5622 99.9738 99.895 99.4769
H-27	98.87334333147321	if ( node != null )
P-27	99.9936 98.918 99.3521 99.9643 99.8956 98.0406
H-27	98.84846714564732	Node nex@@ tnode = node ;
P-27	98.6148 99.9198 99.7478 99.4607 98.5025 99.4193
H-27	98.81937662760417	i = nex@@ tnode ;
P-27	99.8663 99.4644 99.968 99.7063 99.6769
H-27	98.78026471819196	else node = nex@@ tnode ;
P-27	99.551 99.8249 99.4949 99.9736 99.9133 99.6495
H-27	98.77694702148438	result = nex@@ tnode ;
P-27	99.7954 99.5596 99.9769 99.9231 99.5589
H-27	98.76597377232143	node = node ; break ;
P-27	99.9283 97.2938 99.2971 96.3701 99.9945 98.9941
H-27	98.76217215401786	while ( node != null )
P-27	99.9934 99.0808 99.5036 99.9719 99.8798 97.903
H-27	98.76182250976562	return nex@@ tnode ;
P-27	99.0361 99.9786 99.9911 99.6453
H-27	98.7540791829427	ret = nex@@ tnode ;
P-27	99.8418 99.5096 99.9762 99.9126 99.4486
H-27	98.74913533528645	loop = nex@@ tnode ;
P-27	99.6823 99.2693 99.9689 99.8791 99.4415
H-27	98.73325602213542	c = nex@@ tnode ;
P-27	99.6657 99.7086 99.9738 99.8392 99.6231
H-27	98.72072347005208	state = nex@@ tnode ;
P-27	99.8666 99.5494 99.976 99.9127 99.5217
H-27	98.70022583007812	cur = nex@@ tnode ;
P-27	99.9054 99.5784 99.9758 99.8914 99.5586
H-27	98.6937764485677	rs = nex@@ tnode ;
P-27	99.8801 99.4533 99.9721 99.8522 99.5583
H-27	98.67032877604167	l = nex@@ tnode ;
P-27	99.759 99.3965 99.9665 99.8399 99.5339
H-27	98.66495768229167	p = nex@@ tnode ;
P-27	99.8093 99.5126 99.9708 99.8528 99.5717
H-27	98.65883382161458	res = nex@@ tnode ;
P-27	99.8525 99.5948 99.9752 99.8709 99.5145
H-27	98.6566874186198	parent = nex@@ tnode ;
P-27	99.919 99.5447 99.9751 99.9189 99.5957
H-27	98.64752197265625	tmp = nex@@ tnode ;
P-27	99.4093 99.3021 99.9685 99.8985 99.0409
H-27	98.6308085123698	node = node ; }
P-27	99.9283 97.2938 99.2971 97.3597 98.4221
H-27	98.6277567545573	return nex@@ tnode ; }
P-27	99.0361 99.9786 99.9911 98.6671 98.9356
H-27	98.62544759114583	tree = nex@@ tnode ;
P-27	99.2973 99.638 99.9759 99.8854 99.4689
H-27	98.62369791666667	group = nex@@ tnode ;
P-27	99.8073 99.1156 99.9645 99.8671 99.5018
H-27	98.60463460286458	retval = nex@@ tnode ;
P-27	99.9396 99.2125 99.9702 99.8128 99.5343
H-27	98.56809692382812	return prev@@ node ;
P-27	98.2304 99.9208 99.9829 99.5483
H-27	98.5235595703125	Node nex@@ tnode ;
P-27	98.6148 99.9198 98.4255 99.3833
H-27	98.51729736328124	node = null ;
P-27	99.9283 93.8229 99.9969 99.3545
H-27	98.37871704101562	next = node ;
P-27	99.8651 98.5681 99.3137 99.2415
H-27	98.34124755859375	return node ; }
P-27	98.3812 99.9842 99.0538 99.129
H-27	98.33089599609374	node = parent ;
P-27	99.9283 93.4369 99.3776 99.4279
H-27	98.24305725097656	return node ;
P-27	98.3812 99.9842 99.4488
H-27	97.60765584309895	break ;
P-27	99.9855 99.4249
H-27	97.31058756510417	try {
P-27	99.9899 97.706
H-27	96.14448547363281	{
P-27	97.9801
H-27	95.97701263427734	}
P-27	98.1854
S-28	c = bin _ op . apply ( a , b ) ;
T-28	c = bin _ op . apply ( b , a ) ;
H-28	100.01202101934524	c = bin _ op . apply ( a , b ) ; stack . push ( c ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 99.9288 99.9994 98.8587 99.9925 99.8785 99.9997 99.8923 99.9513 99.9998 102.6539
H-28	99.89937046595982	c = bin _ op . apply ( a , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 99.9288 99.9994 99.5656
H-28	99.86067708333333	c = bin _ op . apply ( a , b ) ; stack . add ( c ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 99.9288 99.9994 98.8587 99.9925 96.7474 99.9982 99.8051 99.9791 99.9998 102.6679
H-28	99.79191080729167	c = bin _ op . apply ( a , b ) ; stack . push ( a ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 99.9288 99.9994 98.8587 99.9925 99.8785 99.9997 95.4797 99.7401 99.9996 102.6558
H-28	99.7885974702381	c = bin _ op . apply ( a , b ) ; stack . push ( b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 99.9288 99.9994 98.8587 99.9925 99.8785 99.9997 95.1922 99.9642 99.9998 102.6493
H-28	99.7824474516369	c = bin _ op . get ( a , b ) ; stack . push ( c ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 96.7236 99.9989 98.6352 99.7772 99.8415 99.9693 99.9986 98.7322 99.9925 99.8877 99.9997 99.8798 99.9448 99.9998 102.6275
H-28	99.77776227678571	c = bin _ op . apply ( a , a ) ; stack . push ( c ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 95.6278 99.3297 99.9986 98.8388 99.9924 99.879 99.9997 99.8783 99.9517 99.9998 102.6473
H-28	99.7746349516369	c = bin _ op . apply ( a , c ) ; stack . push ( c ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 94.9452 99.9112 99.9995 98.8741 99.9925 99.876 99.9997 99.8902 99.9479 99.9998 102.6415
H-28	99.75153551603618	c = op . apply ( a , b ) ; stack . push ( c ) ;
P-28	99.9816 95.3685 99.9935 99.4063 99.9959 99.8937 99.9824 99.9053 99.9298 99.9994 98.8476 99.9924 99.87 99.9997 99.8809 99.946 99.9998 102.6522
H-28	99.74789574032738	c = bin _ op . apply ( a , b ) ; stack . append ( c ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 99.9288 99.9994 98.8587 99.9925 94.561 99.9988 99.6987 99.8707 99.999 102.7008
H-28	99.74705868675595	result = bin _ op . apply ( a , b ) ; stack . push ( c ) ;
P-28	99.9597 99.8836 99.9451 99.9942 99.9899 99.9058 99.9945 99.917 99.9852 99.9047 99.933 99.9992 98.8729 99.993 99.8747 99.9998 99.896 99.9572 99.9998 102.6597
H-28	99.7470470610119	c = bin _ op . do ( a , b ) ; stack . push ( c ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 94.5493 99.9134 99.8529 99.9823 99.9072 99.9083 99.9989 98.8132 99.9926 99.8683 99.9998 99.8889 99.9396 99.9999 102.65
H-28	99.74107142857143	tmp = bin _ op . apply ( a , b ) ; stack . push ( c ) ;
P-28	99.8853 99.7319 99.9502 99.9936 99.9882 99.8616 99.9949 99.9092 99.9848 99.9111 99.9319 99.9994 98.807 99.9929 99.887 99.9998 99.8733 99.955 99.9998 102.6651
H-28	99.72228393554687	if ( c != null ) c = bin _ op . apply ( a , b ) ;
P-28	99.9984 98.2338 99.0265 99.8554 99.7128 98.8782 99.9755 99.7675 99.9511 99.9945 99.9854 99.8527 99.9963 99.9319 99.986 99.9197 99.9193 99.9995 102.4762
H-28	99.71693420410156	c = bin _ op . apply ( a , b , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 97.2054 99.6778 99.8516 99.9995 99.6392
H-28	99.67648154810855	c = bin _ op . apply ( a , b ) ; if ( c ) {
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 99.9288 99.9994 95.1252 99.999 99.102 98.624 99.7653 102.2123
H-28	99.6697265625	c = op . apply ( a , b ) ; stack . push ( c ) ; }
P-28	99.9816 95.3685 99.9935 99.4063 99.9959 99.8937 99.9824 99.9053 99.9298 99.9994 98.8476 99.9924 99.87 99.9997 99.8809 99.946 99.9998 98.3313 102.4362
H-28	99.63691791735198	if ( c ) { c = bin _ op . apply ( a , b ) ;
P-28	99.9984 98.2338 97.9098 99.7478 98.9603 99.9864 99.8706 99.96 99.9942 99.9876 99.8725 99.9959 99.9362 99.9867 99.9263 99.9233 99.9995 101.827
H-28	99.62039987664474	c = bin _ op . apply ( a ) ; stack . push ( c ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 95.5347 99.9985 98.7343 99.9912 99.8734 99.9997 99.8505 99.9452 99.9998 99.6546
H-28	99.61134033203125	c = bin _ op . apply ( a , b ) ; if ( c != null )
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 99.9288 99.9994 95.1252 99.999 99.102 98.892 99.8686 99.7796 100.4352
H-28	99.59087456597223	c = bin _ op . apply ( a , b , b , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 97.2054 99.6778 97.7798 99.4111 99.7758 99.9994 99.6892
H-28	99.58094787597656	c = bin _ op . apply ( a , a , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 95.6278 99.0832 99.8664 99.9032 99.9993 99.6257
H-28	99.57275390625	c = bin _ op . apply ( a , b ) ; stack . pop ( ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 99.9288 99.9994 98.8587 99.9925 94.4794 99.9999 99.6041 99.9992 99.4957
H-28	99.56842041015625	c = bin _ op . get ( token ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 96.7236 99.9989 99.5823 99.9834 99.997 99.1128
H-28	99.56630987870066	c = bin _ op . get ( token ) ; stack . push ( c ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 96.7236 99.9989 99.5823 99.9834 99.997 96.7687 99.9897 99.8918 99.9997 99.8496 99.937 99.9998 99.6152
H-28	99.5643310546875	c = bin _ op . get ( a , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 96.7236 99.9989 98.6352 99.7772 99.8415 99.9693 99.9986 99.5332
H-28	99.55368041992188	c = bin _ op . apply ( a , b , a ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 97.2054 97.363 99.5667 99.999 99.6275
H-28	99.55361938476562	c = bin _ op ; c = bin _ op . apply ( a , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 94.8093 98.0837 99.972 99.758 99.95 99.9935 99.985 99.863 99.9954 99.9329 99.975 99.8978 99.9295 99.9995 99.4913
H-28	99.55076246995192	return bin _ op . apply ( a , b ) ;
P-28	99.668 99.9558 99.9947 99.9345 99.9161 99.9963 99.9268 99.967 99.9017 99.9479 99.9994 99.7643
H-28	99.55022321428571	c = bin _ op . apply ( a , a ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 95.6278 99.3297 99.9986 99.5575
H-28	99.54376220703125	c = bin _ op . apply ( a , b ) ; stack . clear ( ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 99.9288 99.9994 98.8587 99.9925 93.606 99.9997 99.9914 99.9995 99.4022
H-28	99.54249790736607	c = bin _ op . apply ( a , c ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 94.9452 99.9112 99.9995 99.5495
H-28	99.54159545898438	c = bin _ op . apply ( a ) ; stack . push ( c ) ; }
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 95.5347 99.9985 98.7343 99.9912 99.8734 99.9997 99.8505 99.9452 99.9998 98.2588 99.4401
H-28	99.54150390625	c = bin _ op . apply ( a , b ) ; stack . reset ( ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 99.9288 99.9994 98.8587 99.9925 93.8216 99.9997 99.7065 99.9996 99.426
H-28	99.5402099609375	int c = bin _ op . apply ( a , b ) ;
P-28	98.7912 99.9417 99.7582 99.9344 99.9926 99.9865 99.8479 99.9935 99.925 99.9864 99.9084 99.9281 99.9989 99.5913
H-28	99.53955688476563	if ( bin _ op ) c = bin _ op . apply ( a , b ) ;
P-28	99.9984 99.1664 99.9259 99.993 97.5251 98.535 99.9837 99.8618 99.9525 99.9944 99.978 99.8504 99.9947 99.9289 99.9856 99.9181 99.9239 99.9994 99.2909
H-28	99.53099822998047	c = bin _ op . apply ( a , b , c ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 97.2054 96.6398 99.9325 99.9996 99.6212
H-28	99.52553982204861	c = bin _ op = bin _ op . apply ( a , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 93.3958 99.5306 99.9527 99.9926 99.9892 99.8533 99.9955 99.9297 99.9845 99.91 99.9333 99.9991 99.5569
H-28	99.52397075452302	c = bin _ op . apply ( token ) ; stack . push ( c ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 94.6184 99.1705 99.9979 98.56 99.9913 99.8773 99.9997 99.8569 99.9422 99.9998 99.6588
H-28	99.52098592122395	c = bin _ op . apply ( a ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 95.5347 99.9985 99.513
H-28	99.51112365722656	try { c = bin _ op . apply ( a , b ) ;
P-28	99.9973 99.0232 99.9845 99.9332 99.96 99.9944 99.9924 99.9145 99.9968 99.9387 99.9874 99.9246 99.9239 99.9993 98.7988
H-28	99.50973849826389	c = bin _ op . apply ( a , b , a , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 97.2054 97.363 98.24 99.7395 99.8516 99.9993 99.6793
H-28	99.50782993861607	c = bin _ op . do ( a , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 94.5493 99.9134 99.8529 99.9823 99.9072 99.9083 99.9989 99.5741
H-28	99.49917166573661	result = bin _ op . apply ( a , b ) ;
P-28	99.9597 99.8836 99.9451 99.9942 99.9899 99.9058 99.9945 99.917 99.9852 99.9047 99.933 99.9992 99.5533
H-28	99.49867466517857	tmp = bin _ op . apply ( a , b ) ;
P-28	99.8853 99.7319 99.9502 99.9936 99.9882 99.8616 99.9949 99.9092 99.9848 99.9111 99.9319 99.9994 99.5987
H-28	99.4933723000919	c . apply ( a , b ) ; stack . push ( c ) ;
P-28	95.0745 99.208 99.9883 99.8504 99.9401 99.8864 99.9249 99.9996 98.5912 99.9934 99.8567 99.9998 99.8756 99.9128 99.9999 99.6522
H-28	99.49222140842014	c = bin _ op . apply ( a , b , b , a ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 97.2054 99.6778 97.7798 97.8148 99.603 99.9992 99.6826
H-28	99.49046495225694	c = bin _ op . apply ( a , b , b , c ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 97.2054 99.6778 97.7798 97.4669 99.9234 99.9996 99.678
H-28	99.48903982979911	b = bin _ op . apply ( a , b ) ;
P-28	99.9346 99.779 99.9451 99.9937 99.9868 99.8549 99.9952 99.9212 99.9829 99.9072 99.9242 99.9995 99.5609
H-28	99.48755696614583	if ( bin _ op . apply ( a , b ) ) {
P-28	99.9984 99.1664 99.9259 99.993 98.701 99.3549 99.9725 99.8989 99.9496 99.8751 99.9322 99.3912 99.6649 99.5043
H-28	99.48712921142578	c = new Binary CaMeL Operator < Double > ( a , b ) ;
P-28	99.9816 95.2769 99.8204 99.9995 99.9815 99.9725 99.5423 99.3897 99.9864 98.9223 99.892 99.8945 99.9561 99.998 99.5464
H-28	99.4862060546875	{ c = bin _ op . apply ( a , b ) ;
P-28	99.0996 99.9875 99.8931 99.959 99.9943 99.9901 99.8895 99.9965 99.9344 99.9869 99.9266 99.9313 99.9994 99.0437
H-28	99.48099093967014	c = bin _ op . apply ( a , b , bin _ op ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 97.2054 95.2314 99.6225 99.9843 99.8533 99.999 99.6647
H-28	99.47923278808594	c = bin _ op . apply ( a , bin _ op ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 93.393 99.654 99.99 99.837 99.9985 99.6057
H-28	99.47919108072917	c = bin _ op . apply ( a , b ) ; }
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 99.9077 99.9288 99.9994 93.6668 99.4955
H-28	99.47687844669117	c = bin _ op . apply ( a , ( Integer ) b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 95.052 98.4982 99.9855 98.8292 99.9187 99.9974 99.6365
H-28	99.4730583639706	int bin _ op = bin _ op . apply ( a , b ) ;
P-28	97.3984 99.9809 99.9885 99.986 99.0957 99.9307 99.9937 99.9787 99.8478 99.993 99.9211 99.9842 99.8985 99.9141 99.9989 99.6122
H-28	99.47201538085938	c = op . apply ( a , b ) ;
P-28	99.9816 95.3685 99.9935 99.4063 99.9959 99.8937 99.9824 99.9053 99.9298 99.9994 99.5737
H-28	99.47002096737133	c = bin _ op . apply ( a , ( Double ) b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 95.052 98.4781 99.99 98.716 99.939 99.9956 99.6301
H-28	99.4651123046875	double c = bin _ op . apply ( a , b ) ;
P-28	99.3403 99.9362 99.6755 99.9424 99.9923 99.9869 99.8285 99.994 99.924 99.986 99.9063 99.9287 99.9989 99.6059
H-28	99.46464320591518	c = bin _ op . apply ( token , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 94.6184 99.416 99.66 99.9437 99.9994 99.5851
H-28	99.46163504464286	c = bin _ op . run ( a , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 93.7232 99.9988 99.9587 99.9832 99.9164 99.9182 99.9995 99.5417
H-28	99.45669119698661	i = bin _ op . apply ( a , b ) ;
P-28	99.9582 99.8284 99.9438 99.9935 99.9892 99.8724 99.9958 99.9167 99.983 99.9056 99.9331 99.9993 99.5877
H-28	99.45444161551339	p = bin _ op . apply ( a , b ) ;
P-28	99.8391 99.8547 99.9431 99.9935 99.9873 99.8674 99.9957 99.9185 99.9844 99.9084 99.9303 99.9992 99.5426
H-28	99.45274353027344	c ; c = bin _ op . apply ( a , b ) ;
P-28	94.3533 98.3635 99.974 99.868 99.9455 99.9934 99.99 99.8513 99.9966 99.9311 99.9815 99.8994 99.9296 99.9995 99.5333
H-28	99.45149993896484	c = new Binary CaMeL Operator < Double >> ( a , b ) ;
P-28	99.9816 95.2769 99.8204 99.9995 99.9815 99.9725 99.5423 99.1513 99.8036 98.7911 99.8936 99.8707 99.9617 99.998 99.5454
H-28	99.44890950520833	int a = bin _ op . apply ( a , b ) ;
P-28	97.7128 99.8583 99.5642 99.9393 99.9927 99.9866 99.8258 99.9927 99.9198 99.9873 99.9113 99.923 99.9989 99.6016
H-28	99.44864327566964	retval = bin _ op . apply ( a , b ) ;
P-28	99.9787 99.8407 99.9374 99.9939 99.9896 99.8968 99.9943 99.9115 99.985 99.9074 99.9301 99.9992 99.5042
H-28	99.44043840680804	return bin _ op . apply ( a , b ) ; }
P-28	99.668 99.9558 99.9947 99.9345 99.9161 99.9963 99.9268 99.967 99.9017 99.9479 99.9994 98.3574 99.413
H-28	99.43955993652344	c = bin _ op . apply ( new Double ( b ) ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 94.1247 99.7314 99.9849 98.8283 99.5915 99.8927 99.9986 99.5984
H-28	99.43681640625	float c = bin _ op . apply ( a , b ) ;
P-28	99.2781 99.9303 99.7589 99.949 99.9926 99.9875 99.8397 99.9942 99.9244 99.9862 99.9076 99.9274 99.9991 99.621
H-28	99.43247767857143	c = bin _ op . set ( a , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 93.8831 99.9939 99.4457 99.9831 99.8845 99.9224 99.9991 99.5198
H-28	99.43233816964286	c = bin _ op ; stack . push ( c ) ;
P-28	99.9816 99.8807 99.9468 99.9934 94.8093 98.551 99.9908 99.8922 99.9996 99.8623 99.944 99.9998 99.5672
H-28	99.43154471261161	s = bin _ op . apply ( a , b ) ;
P-28	99.9279 99.8571 99.9379 99.9938 99.9878 99.8614 99.995 99.9204 99.9827 99.908 99.9302 99.9994 99.5324
H-28	99.4314956665039	c = bin _ op . apply ( new Double ( c ) ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 94.1247 99.7314 99.9849 98.7309 99.6033 99.8785 99.9985 99.5695
H-28	99.42778015136719	try { bin _ op = op . apply ( a , b ) ;
P-28	99.9973 98.9588 99.9831 99.9959 99.9824 99.7353 99.993 98.645 99.9967 99.9138 99.9873 99.9273 99.9264 99.9993 98.994
H-28	99.42722981770834	Integer c = bin _ op . apply ( a , b ) ;
P-28	99.2339 99.9246 99.7823 99.9314 99.9933 99.9883 99.8737 99.9948 99.926 99.9859 99.9127 99.938 99.9992 99.5692
H-28	99.42535400390625	c = bin _ op . apply ( a , null ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 93.2884 99.9135 99.9986 99.5647
H-28	99.41951497395833	int b = bin _ op . apply ( a , b ) ;
P-28	97.4174 99.944 99.3658 99.9393 99.9924 99.987 99.8357 99.9927 99.9245 99.9865 99.9146 99.895 99.9991 99.5795
H-28	99.41157749720982	buf = bin _ op . apply ( a , b ) ;
P-28	99.6312 99.557 99.9373 99.9933 99.9884 99.8497 99.9941 99.9147 99.9852 99.9076 99.924 99.9993 99.5629
H-28	99.40669468470982	c += bin _ op . apply ( a , b ) ;
P-28	93.2954 99.7144 99.9414 99.9925 99.9753 99.8289 99.9887 99.9164 99.9846 99.908 99.9325 99.9992 99.5825
H-28	99.4039794921875	Point c = bin _ op . apply ( a , b ) ;
P-28	99.3636 99.9533 99.8102 99.9456 99.9929 99.9894 99.8644 99.9967 99.9249 99.9868 99.9113 99.9247 99.9992 99.5642
H-28	99.40276227678571	try { bin _ op = op . get ( token ) ;
P-28	99.9973 98.9588 99.9831 99.9959 99.9824 99.7353 99.993 99.6378 99.9984 99.8566 99.9729 99.9931 98.7252
H-28	99.40097481863839	c = bin _ op . apply ( c , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 93.637 99.6486 99.5468 99.935 99.9995 99.5643
H-28	99.40050397600446	c = bin _ op . parse ( a , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 92.9836 99.9982 99.8963 99.9658 99.8956 99.9151 99.9992 99.53
H-28	99.39342389787946	c = bin _ op . apply ( a , true ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 92.8172 99.9248 99.9983 99.578
H-28	99.38973563058036	m = bin _ op . apply ( a , b ) ;
P-28	98.3107 99.8628 99.9473 99.9939 99.9834 99.8626 99.995 99.9143 99.9828 99.9021 99.9299 99.9993 99.5796
H-28	99.38960484095982	c = bin _ op . apply ( start , b ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 93.3514 99.9757 99.3904 99.9061 99.9992 99.5492
H-28	99.38874162946429	z = bin _ op . apply ( a , b ) ;
P-28	99.9587 99.8104 99.9358 99.9935 99.9876 99.8451 99.9944 99.9172 99.9834 99.9085 99.9269 99.9993 99.535
H-28	99.3823954264323	c = bin _ op . apply ( token ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 94.6184 99.1705 99.9979 99.5194
H-28	99.36414591471355	c = bin _ op . get ( a ) ;
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 96.7236 99.9989 98.6352 98.3656 99.9968 99.2264
H-28	99.36183860085227	c = bin _ op . apply ( a ,
P-28	99.9816 99.8807 99.9468 99.9934 99.9868 99.8635 99.9959 99.9232 99.9839 93.7907
H-28	99.35622151692708	c = ( Double ) stack . pop ( ) ;
P-28	99.9816 95.146 98.3735 99.9986 99.7631 99.996 99.9802 100.0 99.9889 99.9987 99.4143
H-28	99.312109375	c . apply ( a , b ) ;
P-28	95.0745 99.208 99.9883 99.8504 99.9401 99.8864 99.9249 99.9996 99.6152
H-28	99.29677327473958	c = c . apply ( a , b ) ;
P-28	99.9816 93.1028 99.962 99.5964 99.9958 99.8975 99.979 99.8988 99.933 99.9995 99.5811
H-28	99.28831176757812	c = op . get ( token ) ;
P-28	99.9816 95.3685 99.9935 99.0172 99.9975 99.898 99.9896 99.9968 99.0067
H-28	99.26025390625	return op . apply ( a , b ) ;
P-28	97.6413 99.9826 99.5839 99.9967 99.8951 99.9636 99.9107 99.9427 99.9993 99.7595
H-28	98.996826171875	if ( bin _ op ) {
P-28	99.9984 99.1664 99.9259 99.993 97.5251 99.3487 99.032
H-28	98.9613037109375	c . push ( c ) ;
P-28	95.0745 98.5156 99.9949 99.1508 99.8595 99.9997 99.4616
H-28	98.57183837890625	if ( c ) {
P-28	99.9984 98.2338 97.9098 99.7478 98.556
S-29	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
T-29	distance + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
H-29	99.92956194196428	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 99.8739 99.6982
H-29	99.87052408854167	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 97.7507 99.9391 99.6866
H-29	99.8627068014706	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 97.6716 99.5859
H-29	99.86220974392361	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ; }
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 99.8739 98.1456 99.0575
H-29	99.83635602678571	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; for ( Node nex@@ tnode : node . get CaMeL Successors ( ) ) { if ( visited CaMeL Nodes . contains ( nex@@ tnode ) ) {
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 94.473 99.991 99.8915 99.8682 99.9804 99.9623 99.854 99.9942 99.9876 99.9932 99.8658 99.9974 99.9797 99.9947 99.9649 99.3871 99.9969 99.3682 99.9975 99.9907 99.9935 99.1226 99.998 99.9307 99.9957 99.999 99.9665 99.9804 102.5097
H-29	99.82628173828125	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ; } } return distance ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 99.8739 98.1456 98.3 99.3222 96.665 99.9426 102.8392
H-29	99.81861542492378	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; un@@ visited CaMeL Nodes . put ( nex@@ tnode , Math . min ( un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 96.9616 99.9637 99.9958 99.9923 99.9982 99.5736 99.9997 99.924 99.9826 99.9963 99.7055 99.9989 99.9173 99.9981 99.9018 99.977 99.9985 99.9969 99.9949 99.9652 99.9984 99.9311 99.9916 99.9997 98.1845 99.9183 99.9862 99.6184
H-29	99.818212890625	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ; } return - 0 ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 99.8739 98.1456 98.0853 96.8448 99.0966 99.984 102.736
H-29	99.8180497332317	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } un@@ visited CaMeL Nodes . add ( nex@@ tnode ) ; for ( Node nex@@ tnode : node . get CaMeL Successors ( ) ) {
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.0454 99.9651 99.9967 99.9931 99.9979 99.1108 99.997 99.8326 99.9805 99.9823 99.9976 96.8212 99.9953 99.8697 99.8512 99.9893 99.9622 99.8866 99.9948 99.9877 99.9967 99.8953 99.9966 99.9917 99.9975 99.9683 102.0043
H-29	99.81643415178571	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 95.5233 99.8109 99.994 99.9937 99.983 99.9646 99.9918 99.9805 99.9937 99.9628 99.9979 99.968 99.9965 99.9979 99.9957 99.9499 99.9801 99.8939 99.9934 99.9995 99.9363 99.9788 99.8759 99.652
H-29	99.806640625	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ) ; }
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 97.7507 99.9391 98.1562 99.0372
H-29	99.80292711759868	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ; return distance ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 99.8739 96.1365 98.7419 99.9639 99.8325
H-29	99.80018833705357	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ; }
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 97.6716 98.1672 99.0933
H-29	99.79480310388513	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ; } }
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 99.8739 98.1456 98.3 98.1255
H-29	99.78294020432692	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ; } return distance ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 99.8739 98.1456 98.0853 97.6385 99.9619 99.867
H-29	99.77898297991071	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) - length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 93.8407 99.7684 99.9934 99.9903 99.9801 99.9696 99.9938 99.9793 99.9958 99.9606 99.9978 99.981 99.9944 99.998 99.9903 99.9762 99.9948 99.888 99.9918 99.9991 99.9251 99.9811 99.8837 99.8799 99.6954
H-29	99.77746252111487	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ; break ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 99.8739 94.4745 99.9931 99.4619
H-29	99.77339131123311	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , node , nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 94.5169 99.7862 99.8447 99.9932 99.9994 99.9559 99.9873 99.677 99.8595 99.7165
H-29	99.77309698807566	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) , nex@@ tnode ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 96.0739 97.8598 99.9875 99.9972 99.9818 99.8982 99.7819 99.6386
H-29	99.76871964738176	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 97.7507 96.1948 99.8773 99.6571
H-29	99.76736111111111	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + - length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 94.2097 99.8152 99.9905 99.9926 99.9808 99.9664 99.9947 99.9774 99.9955 99.9664 99.9975 99.9773 99.9935 99.998 99.9903 99.9731 99.9934 99.8939 99.9938 99.9994 99.8943 99.9783 99.9053 99.8637 99.6985
H-29	99.76349748883929	un@@ visited CaMeL Nodes . contains ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 93.7005 99.9972 99.9123 99.9927 99.9996 99.4635 99.8625 99.993 99.9932 99.9814 99.9741 99.9938 99.9833 99.9964 99.9661 99.9975 99.9791 99.9953 99.9981 99.9928 99.9784 99.9944 99.8964 99.992 99.9991 99.9461 99.9799 99.8792 99.8602 99.6997
H-29	99.76132541232639	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 95.5233 99.8109 99.994 99.9937 99.983 99.9646 99.9918 99.9805 99.9937 99.9628 99.9979 99.968 99.9965 99.9979 99.9957 99.9499 99.9801 99.8939 99.9934 99.9995 99.9363 99.9788 97.7457 99.9212 99.6938
H-29	99.7604462594697	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 94.6252 99.9868 99.998 99.7307 99.9583 99.9603 99.8629 99.6639
H-29	99.76034780649039	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } un@@ visited CaMeL Nodes . add ( nex@@ tnode ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.0454 99.9651 99.9967 99.9931 99.9979 99.1108 99.997 99.8326 99.9805 99.9823 99.9976 99.4373
H-29	99.75894082559121	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ; continue ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 99.8739 94.0841 99.9739 99.1866
H-29	99.75580658783784	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) + distance ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 94.7206 98.9392 99.7023 99.6405
H-29	99.75417678420608	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( ( node , nex@@ tnode ) ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 93.9495 99.8825 99.9885 99.9046 99.9951 99.9994 99.9213 99.9201 99.9815 99.4731 99.8922 99.6877
H-29	99.75383165147569	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ; ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 99.8739 93.6768 99.6247
H-29	99.7537742820946	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ; return distance ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 97.6716 96.367 98.9713 99.971 99.8344
H-29	99.75279998779297	list . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	99.7892 99.9705 99.9991 99.9111 99.9908 99.9998 98.7799 99.8762 99.9904 99.9924 99.9785 99.9696 99.9951 99.9795 99.9969 99.9437 99.9973 99.9694 99.9925 99.998 99.9898 99.9666 99.9929 99.878 99.9939 99.9994 99.9334 99.9808 99.8399 99.8897 99.7036
H-29	99.75196597450658	new Integer ( un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	99.3913 99.9979 99.5133 99.9681 99.9984 99.9955 99.9974 99.9717 99.999 99.8952 99.9946 99.9998 99.179 99.8948 99.9913 99.9925 99.9841 99.9718 99.9937 99.9793 99.9959 99.9418 99.9974 99.9793 99.9907 99.9977 99.9938 99.9835 99.9939 99.8973 99.9929 99.999 99.9505 99.9279 99.9823 99.4172 99.6682
H-29	99.75178358289931	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ; }
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 95.5233 99.8109 99.994 99.9937 99.983 99.9646 99.9918 99.9805 99.9937 99.9628 99.9979 99.968 99.9965 99.9979 99.9957 99.9499 99.9801 99.8939 99.9934 99.9995 99.9363 99.9788 99.8759 98.0615 99.0797
H-29	99.74982471955128	new Integer ( un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ) ;
P-29	99.3913 99.9979 99.5133 99.9681 99.9984 99.9955 99.9974 99.9717 99.999 99.8952 99.9946 99.9998 99.179 99.8948 99.9913 99.9925 99.9841 99.9718 99.9937 99.9793 99.9959 99.9418 99.9974 99.9793 99.9907 99.9977 99.9938 99.9835 99.9939 99.8973 99.9929 99.999 99.9505 99.9279 99.9823 99.1474 99.9121 99.6943
H-29	99.74842958192568	this . un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	99.6297 99.3749 99.9777 99.999 99.997 99.994 99.9782 99.9995 99.9184 99.9913 99.9998 98.9771 99.9012 99.9918 99.9915 99.9857 99.9694 99.9947 99.9797 99.9961 99.9496 99.9977 99.9793 99.9912 99.9979 99.9925 99.9694 99.9938 99.8887 99.9907 99.9996 99.9438 99.981 99.8862 99.8398 99.6907
H-29	99.74769351356908	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node . get ( nex@@ tnode ) ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 94.4023 99.7495 99.7178 99.2108 99.9953 99.9997 99.8664 99.8631 99.9743 99.8091 99.8736 99.666
H-29	99.7466571514423	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ) ; return distance ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 97.7507 99.9391 96.1823 98.4985 99.9686 99.8178
H-29	99.74557976973684	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ; break ; }
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 99.8739 94.4745 99.9931 99.0379 98.99
H-29	99.74373372395833	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 93.5953 99.5237 99.9926 99.994 99.9752 99.9667 99.9914 99.9822 99.989 99.9535 99.9982 99.9568 99.9969 99.998 99.9969 99.7635 99.9491 99.8992 99.9915 99.9996 99.9363 99.6125 99.9115 99.666
H-29	99.74358933971774	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; un@@ visited CaMeL Nodes . put ( nex@@ tnode , Integer . MAX _ VALUE ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 96.9616 99.9637 99.9958 99.9923 99.9982 99.5736 99.9997 99.924 99.9826 99.9963 97.0251 99.9987 99.8935 99.9986 99.985 99.9956 99.9982 99.6756
H-29	99.74087185329861	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , node , nex@@ tnode ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 94.5169 99.7862 99.8447 99.9932 99.9994 99.9559 99.9873 98.6818 99.6273
H-29	99.73853217230902	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) , ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 96.0739 97.0115 99.987 99.8431 99.8434 99.6696
H-29	99.73828803168402	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( ( node , nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 93.9495 99.8825 99.9885 99.9046 99.9951 99.9994 99.9213 99.9201 99.9815 99.0672 99.6599
H-29	99.73737335205078	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ,
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 96.0739 97.3636
H-29	99.73558872767858	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) - length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 93.0142 99.5298 99.9938 99.9909 99.9816 99.9587 99.9905 99.9777 99.992 99.9623 99.9981 99.9697 99.9969 99.998 99.9946 99.9468 99.9793 99.8951 99.9934 99.9995 99.9072 99.9754 99.8916 99.6477
H-29	99.7278060913086	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) +
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 96.7209 96.4102
H-29	99.72178206905242	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode )
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 93.2166
H-29	99.72097598805146	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + un@@ visited CaMeL Nodes . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 95.7002 99.9704 99.9962 99.9929 99.9971 99.9662 99.9992 97.1742 99.9982 99.9721 99.9956 99.9977 99.9932 99.9533 99.9921 99.8934 99.9937 99.9995 99.9352 99.9796 99.8208 99.8993 99.7075
H-29	99.72001008064517	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; un@@ visited CaMeL Nodes . put ( nex@@ tnode , Math . MAX _ VALUE ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 96.9616 99.9637 99.9958 99.9923 99.9982 99.5736 99.9997 99.924 99.9826 99.9963 99.7055 99.9989 96.4915 99.996 99.9833 99.9895 99.998 99.6762
H-29	99.71890079273896	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) )
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 99.8882 92.48
H-29	99.71858162715517	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; for ( Node nex@@ tnode : node . get CaMeL Successors ( ) ) {
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 94.473 99.991 99.8915 99.8682 99.9804 99.9623 99.854 99.9942 99.9876 99.9932 99.8658 99.9974 99.9797 99.9947 99.9649 98.9486
H-29	99.71331317608173	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } un@@ visited CaMeL Nodes . remove ( nex@@ tnode ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.0454 99.9651 99.9967 99.9931 99.9979 97.9172 99.9977 99.9128 99.9846 99.9989 99.9972 99.3064
H-29	99.70792388916016	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } un@@ visited CaMeL Nodes . put ( nex@@ tnode , Integer . MAX _ VALUE ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.0454 99.9651 99.9967 99.9931 99.9979 99.209 99.9996 99.9289 99.9836 99.9966 96.6957 99.9985 99.9137 99.9986 99.9776 99.9918 99.9963 99.5317
H-29	99.70431315104166	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) , Math . min ( un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 95.4949 97.9266 99.9987 99.9039 99.9972 99.8915 99.9719 99.9988 99.9961 99.9957 99.9686 99.9989 99.9185 99.9937 99.9998 99.4073 99.982 99.9232 99.6016
H-29	99.7040497750947	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) )
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 99.9613 99.9975 99.9798 99.9936 99.998 99.9923 99.9756 99.9946 99.8889 99.9917 99.999 99.9348 99.981 92.1593
H-29	99.6987540952621	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + node . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 93.4298 99.9558 99.9799 99.625 99.9201 99.9971 99.9649 99.9734 99.9975 99.981 99.9664 99.9884 99.8908 99.993 99.9993 99.9246 99.9723 99.9207 99.8909 99.7045
H-29	99.69723307291666	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } return Integer . MAX _ VALUE ; } return Integer . MAX _ VALUE ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 97.8425 98.9673 99.9986 99.959 99.998 99.9023 99.9938 98.6388 98.9054 99.6376 99.9985 99.9681 99.9986 99.8864 99.9937 99.7958
H-29	99.69437662760417	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; if ( un@@ visited CaMeL Nodes . get ( nex@@ tnode ) == null ) {
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 94.9216 99.9851 99.5911 99.9749 99.9957 99.9917 99.9906 99.7567 99.9974 99.9327 99.9894 99.9994 99.7814 99.9471 99.8912 99.9562 98.0362
H-29	99.69400227864584	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } for ( Node nex@@ tnode : node . get CaMeL Successors ( ) ) {
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 95.0552 99.993 99.881 99.8682 99.9797 99.9606 99.8697 99.9951 99.9876 99.9964 99.8896 99.9967 99.9847 99.9963 99.9672 98.9661
H-29	99.693916015625	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } visited CaMeL Nodes . add ( nex@@ tnode ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 96.2039 99.9938 99.9922 99.9968 99.5431 99.9976 99.7909 99.9808 99.9728 99.998 99.4451
H-29	99.6935402199074	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } return un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 97.8425 97.2099 99.9802 99.9982 99.9978 99.9948 99.8474 99.9959 99.9363 99.9906 99.9932 99.6836 99.8219
H-29	99.69241098257211	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; un@@ visited CaMeL Nodes . add ( nex@@ tnode ) ; }
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 96.9616 99.9637 99.9958 99.9923 99.9982 98.6204 99.9982 99.8302 99.9811 99.9255 99.9976 98.5815 99.0635
H-29	99.68710432381465	un@@ visited CaMeL Nodes + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 92.2662 99.7765 99.9919 99.9929 99.9846 99.9704 99.9954 99.9841 99.9963 99.9533 99.9976 99.9831 99.9957 99.998 99.9936 99.9762 99.995 99.8913 99.9914 99.9994 99.95 99.9678 99.9576 99.8961 99.6942
H-29	99.686279296875	list . get ( nex@@ tnode ) + length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ;
P-29	99.7892 99.9705 99.9991 99.9111 99.9908 99.9998 98.7799 99.8762 99.9904 99.9924 99.9785 99.9696 99.9951 99.9795 99.9969 99.9437 99.9973 99.9694 99.9925 99.998 99.9898 99.9666 99.9929 99.878 99.9939 99.9994 99.9334 99.9808 98.0304 99.588
H-29	99.68593924386161	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } } return un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.3666 99.2915 97.0586 99.9786 99.9986 99.998 99.9856 99.7381 99.9886 99.9287 99.9926 99.9975 99.5897 99.8602
H-29	99.68165637600806	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } un@@ visited CaMeL Nodes . put ( nex@@ tnode , un@@ visited CaMeL Nodes ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.0454 99.9651 99.9967 99.9931 99.9979 99.209 99.9996 99.9289 99.9836 99.9966 97.0436 99.9823 99.9997 99.9981 99.0415 99.9955 99.5211
H-29	99.67342122395833	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } un@@ visited CaMeL Nodes . add ( nex@@ tnode ) ; }
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.0454 99.9651 99.9967 99.9931 99.9979 99.1108 99.997 99.8326 99.9805 99.9823 99.9976 98.3038 98.5469
H-29	99.67103407118056	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } } un@@ visited CaMeL Nodes . add ( nex@@ tnode ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.3666 96.9418 99.9697 99.9954 99.9929 99.9974 99.3156 99.9939 99.7134 99.9816 99.9839 99.997 99.4356
H-29	99.66799692007211	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; return un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 96.4083 96.5975 99.9763 99.9984 99.9976 99.9973 99.8642 99.9987 99.9315 99.9894 99.9942 99.8126 99.7091
H-29	99.66680697737068	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 93.2119 99.8996 99.7672 98.6457 99.9983 99.9785 99.9971 99.9979 99.9864 99.9354 99.9883 99.8839 99.9913 99.9995 99.9535 99.9674 99.9625 99.8691 99.6872
H-29	99.66348266601562	un@@ visited CaMeL Nodes . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ; }
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 95.3509 99.9988 99.9795 99.9975 99.9978 99.9858 99.9354 99.9912 99.8899 99.992 99.9993 99.9532 99.9577 99.9343 99.928 98.2822 99.0463
H-29	99.65841238839286	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; if ( un@@ visited CaMeL Nodes . contains ( nex@@ tnode ) ) {
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 94.9216 99.9851 99.5911 99.9749 99.9957 99.9917 99.9906 98.2233 99.992 99.9279 99.9899 99.9989 99.9624 99.9704 98.8273
H-29	99.65187355324075	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ) ; } un@@ visited CaMeL Nodes . add ( nex@@ tnode ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 96.7017 99.9894 98.3738 98.102 99.9675 99.9955 99.9925 99.9979 99.1227 99.9965 99.8321 99.9797 99.9698 99.9973 99.4468
H-29	99.65017465444711	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + length _ by _ edge . get ( $STRING$ ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 99.8944 99.9918 99.9923 99.9789 99.9713 99.9946 99.9804 99.9965 95.0802 99.9982 99.9347 99.9712 97.9442 99.976 99.6143
H-29	99.64682006835938	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } } } return Integer . MAX _ VALUE ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.3666 97.4663 99.3328 99.3132 99.998 99.9684 99.9982 99.8555 99.9924 99.799
H-29	99.6468036358173	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; un@@ visited CaMeL Nodes . remove ( nex@@ tnode ) ; }
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 96.9616 99.9637 99.9958 99.9923 99.9982 97.5224 99.9988 99.9094 99.984 99.9974 99.9977 98.4014 99.001
H-29	99.646533203125	/ length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	98.6629 99.9919 99.9928 99.984 99.9694 99.993 99.9893 99.9941 99.9304 99.9974 99.9765 99.9942 99.998 99.9918 99.97 99.9953 99.8876 99.9934 99.9996 99.9364 99.9767 99.7763 99.9271 99.6988
H-29	99.64586385091145	un@@ visited CaMeL Nodes . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 95.3509 99.9988 99.9795 99.9975 99.9978 99.9858 99.9354 99.9912 99.8899 99.992 99.9993 99.9532 99.9577 99.9343 97.189 99.9698 99.675
H-29	99.64447490985577	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 93.0184 99.9962 99.9187 99.9927 99.9975 99.9947 99.9302 99.9469 99.8895 99.9841 99.9989 99.9563 99.9886 99.9057 99.6517
H-29	99.64138559194711	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 95.7002 99.9704 99.9962 99.9929 99.9971 99.9662 99.9992 99.8442 99.991 99.9998 99.3569 99.9751 97.6505 99.9815 99.6691
H-29	99.63925170898438	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } } return Integer . MAX _ VALUE ; }
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.3666 99.2915 99.2216 99.9983 99.9628 99.9981 99.8463 99.992 98.2198 99.0119
H-29	99.63818359375	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 95.8417
H-29	99.6374042217548	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) , un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ; }
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 95.4949 99.0673 99.9555 99.9992 99.9952 99.9823 99.9731 99.9994 99.9055 99.9855 99.9996 99.8274 99.9078 98.2597 99.0589
H-29	99.6373760516827	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } } visited CaMeL Nodes . add ( nex@@ tnode ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.3666 96.1136 99.9946 99.9931 99.9958 99.6115 99.9958 99.6688 99.9797 99.9906 99.9977 99.4313
H-29	99.63658728966347	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) + un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; }
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 95.7002 99.9704 99.9962 99.9929 99.9971 99.9662 99.9992 99.8442 99.991 99.9998 99.3569 99.9751 99.8934 98.2015 99.0816
H-29	99.6355859375	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } un@@ visited CaMeL Nodes . add ( node ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.0454 99.9651 99.9967 99.9931 99.9979 99.1108 99.997 97.044 99.9829 99.9987 99.3251
H-29	99.634697265625	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; un@@ visited CaMeL Nodes . add ( nex@@ tnode ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 96.9616 99.9637 99.9958 99.9923 99.9982 98.6204 99.9982 99.8302 99.9811 99.9255 99.9976 96.5098
H-29	99.632353515625	>> length _ by _ edge . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	99.2574 99.9941 99.9911 99.9801 99.9687 99.9955 99.988 99.9974 99.9387 99.9969 99.9783 99.9945 99.998 99.9922 99.9741 99.9953 99.8854 99.994 99.9996 99.9591 99.9738 99.9369 99.9164 99.6918
H-29	99.62458984375	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } visited CaMeL Nodes . remove ( nex@@ tnode ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 96.2039 99.9938 99.9922 99.9968 97.7989 99.9978 99.8954 99.9843 99.9987 99.9975 99.3222
H-29	99.62178371263587	un@@ visited CaMeL Nodes . get ( Arrays . as CaMeL List ( node , nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 95.3509 99.9988 99.9795 99.9975 99.9978 99.9858 99.9354 99.9912 99.8899 99.992 99.9993 99.9532 99.9577 99.9343 99.928 96.7059
H-29	99.61287434895833	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } return node . get CaMeL Value ( ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 97.8425 96.6846 99.7186 99.9317 99.955 99.848 99.9996 99.9966 99.503 99.7963
H-29	99.60946655273438	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ) ; } } return Integer . MAX _ VALUE ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 96.7017 99.9894 98.3738 98.2423 99.2462 99.3486 99.9984 99.9653 99.9981 99.8789 99.9915 99.7577
H-29	99.60304857336956	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } } return Integer . MAX _ VALUE ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.3666 99.2915 99.2216 99.9983 99.9628 99.9981 99.8463 99.992 96.7598
H-29	99.5782803622159	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } return Integer . MAX _ VALUE ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 97.8425 98.9673 99.9986 99.959 99.998 99.9023 99.9938 96.6277
H-29	99.5438720703125	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } } return - 0 ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.3666 99.2915 96.7149 99.2812 99.9782 99.8119
H-29	99.53089192708333	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; }
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 95.5303
H-29	99.5258056640625	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ; } } return - 1 ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 99.9578 98.3402 98.3666 99.2915 96.7149 98.907 99.9808 99.8223
H-29	99.46351725260416	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) ) ) ) ;
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 99.5445 99.9742 96.7017 99.9894 96.1266
H-29	99.22918701171875	un@@ visited CaMeL Nodes . get ( nex@@ tnode ) +
P-29	99.9719 99.9993 99.997 99.9972 99.9792 99.9996 99.9205 99.9927 99.9998 98.9694 92.1644
H-29	99.07924582741477	list . get ( nex@@ tnode ) ) ) ;
P-29	99.7892 99.9705 99.9991 99.9111 99.9908 99.9998 99.6388 99.9784 99.9628 95.8297
S-30	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;
T-30	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( k , j ) ) ) ;
H-30	99.91112219769022	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 99.9311 99.9249 99.9766 99.75 99.9834 99.9804 99.8583 99.9994 99.7638
H-30	99.902587890625	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.3306 99.996 99.9611 99.9803 99.984 99.5399 99.9942 99.2446
H-30	99.90215773809524	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.263 99.993 99.9619 99.9826 99.9855 99.5842 99.9943 99.2484
H-30	99.90139334542411	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) { for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) {
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 95.9022 99.99 99.9809 99.8623 99.9939 99.9622 99.9986 99.9929 99.9848 99.7294 99.9994 99.9762 99.9928 99.988 99.9984 99.9989 99.9277 98.9099 99.988 99.9869 99.9062 99.9954 99.9652 99.9989 99.995 99.9832 99.8664 99.9995 99.9743 99.9943 99.9897 99.9989 99.9983 99.947 102.662
H-30	99.89719556725544	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 99.2442 99.9846 99.9832 99.9901 99.9098 99.9919 99.9697 99.9996 99.7652 99.9899 99.9683 99.9986 99.999 99.9997 99.9134 99.9882 99.9345 99.8451 99.977 99.7515 99.9834 99.9805 99.8593 99.9994 99.7628
H-30	99.89174107142857	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) { for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) {
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 95.9415 99.99 99.9808 99.8624 99.9939 99.9608 99.9986 99.9929 99.9847 99.7248 99.9994 99.9761 99.9927 99.988 99.9984 99.9989 99.9272 98.9049 99.988 99.987 99.9057 99.9954 99.9645 99.9989 99.995 99.9832 99.8664 99.9995 99.9743 99.9943 99.9897 99.9989 99.9982 99.9469 102.6543
H-30	99.89080489309211	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( $STRING$ ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 95.1497 99.9843 99.9312 99.9816 98.9825 99.9844 99.9792 99.9869 99.9129 99.9883 99.9672 99.9995 99.7921 99.9896 99.9646 99.9983 99.9989 99.9996 99.9206 99.9895 99.9102 99.9017 99.9704 99.7444 99.9828 99.9816 99.8041 99.9994 102.9604
H-30	99.88888784555289	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , new Hash CaMeL Map < Integer > ( ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 99.9311 99.9249 99.9766 96.8565 98.4249 99.9945 99.9135 99.9975 99.7183 99.9779 99.9988 99.4678 99.6581 99.995 103.643
H-30	99.88810221354167	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.3206 99.9042 99.9868 99.9936 99.9916 99.9259 99.9877 99.9884 99.9998 99.8934 99.9872 99.9789 99.9974 99.999 99.9999 99.3914 99.9972 99.9621 99.9806 99.9862 99.5683 99.9941 99.249
H-30	99.88294566761364	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) { for ( int j = 0 ; j < num CaMeL Nodes ; j ++ )
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 95.9022 99.99 99.9809 99.8623 99.9939 99.9622 99.9986 99.9929 99.9848 99.7294 99.9994 99.9762 99.9928 99.988 99.9984 99.9989 99.9277 98.9099 99.988 99.9869 99.9062 99.9954 99.9652 99.9989 99.995 99.9832 99.8664 99.9995 99.9743 99.9943 99.9897 99.9989 99.9983 101.6927
H-30	99.88226609002976	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.3206 99.9042 99.9868 99.9936 99.9916 99.9259 99.9877 99.9884 99.9998 99.8934 99.9872 99.9789 99.9974 99.999 99.9999 99.1914 99.9969 99.9601 99.9788 99.9847 99.5326 99.9939 99.2454
H-30	99.87779651988636	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( $STRING$ , j ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.3306 99.996 99.9611 99.9803 99.984 99.5399 99.9942 99.1932 99.9834 99.9829 99.99 99.913 99.9901 99.9699 99.9996 95.6801 99.9659 99.1061 99.8625 99.9974 102.9807
H-30	99.87509765625	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , new Integer ( update _ length ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 99.9311 99.9249 99.9766 96.8565 98.5839 99.9897 99.4527 99.9841 99.972 99.6359 99.9268 99.9992 102.7784
H-30	99.87497336647728	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } } return length _ by _ path ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 99.9311 99.9249 99.9766 99.75 99.9834 99.9804 99.8583 99.9994 98.3301 99.0388 97.8816 99.792 99.9899 99.991 99.9913 99.9123 99.2319 102.8168
H-30	99.87327769886363	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) { for ( int j = 0 ; j < num CaMeL Nodes ; j ++ )
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 95.9415 99.99 99.9808 99.8624 99.9939 99.9608 99.9986 99.9929 99.9847 99.7248 99.9994 99.9761 99.9927 99.988 99.9984 99.9989 99.9272 98.9049 99.988 99.987 99.9057 99.9954 99.9645 99.9989 99.995 99.9832 99.8664 99.9995 99.9743 99.9943 99.9897 99.9989 99.9982 101.6937
H-30	99.86929009885205	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } } }
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 99.9311 99.9249 99.9766 99.75 99.9834 99.9804 99.8583 99.9994 98.3301 99.0388 98.6087 101.4697
H-30	99.8690544577206	length _ by _ path . get ( Arrays . as CaMeL List ( j , Arrays . as CaMeL List ( i , k ) ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 95.6408 99.9918 99.9782 99.9964 99.9988 99.9996 99.5568 99.9956 99.93 99.9808 99.9805 99.8807 99.3889 99.9207 99.9877 99.9942 99.991 99.9271 99.9851 99.9889 99.9997 99.9138 99.9881 99.9738 99.9986 99.9989 99.9999 99.4113 99.9968 99.8587 99.9846 99.9874 99.5894 99.9888 102.2234
H-30	99.8671251662234	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; }
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 99.9311 99.9249 99.9766 99.75 99.9834 99.9804 99.8583 99.9994 98.3301 99.277
H-30	99.86685583726415	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( $STRING$ ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.3306 99.996 99.9611 99.9803 99.984 98.9601 99.9025 99.9846 99.9915 99.9897 99.9341 99.9889 99.986 99.9997 94.9824 99.9783 99.9101 99.9763 102.2292
H-30	99.86585582386364	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( $STRING$ , j ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.263 99.993 99.9619 99.9826 99.9855 99.5842 99.9943 99.1886 99.9834 99.983 99.99 99.9128 99.9904 99.9703 99.9996 95.6806 99.9654 99.0989 99.2418 99.9975 102.9782
H-30	99.86527267156863	length _ by _ path . get ( Arrays . as CaMeL List ( j , Arrays . as CaMeL List ( i , k ) ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 95.6408 99.9918 99.9782 99.9964 99.9988 99.9996 99.5568 99.9956 99.93 99.9808 99.9805 99.8807 99.3889 99.9207 99.9877 99.9942 99.991 99.9271 99.9851 99.9889 99.9997 99.9138 99.9881 99.9738 99.9986 99.9989 99.9999 99.1646 99.9949 99.9328 99.9825 99.9857 99.579 99.9898 102.2177
H-30	99.86452498525944	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( $STRING$ ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.263 99.993 99.9619 99.9826 99.9855 98.8767 99.9053 99.9844 99.9915 99.9896 99.9337 99.989 99.986 99.9997 95.0045 99.9781 99.9102 99.9754 102.2325
H-30	99.86350145526961	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , Arrays . as CaMeL List ( i , k ) ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.263 99.993 95.2791 99.9921 99.9716 99.9969 99.9987 99.9996 99.4318 99.9964 99.9463 99.9758 99.9773 99.8807 99.136 99.9894 102.3339
H-30	99.8630859375	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } } return length _ by _ path ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 99.2442 99.9846 99.9832 99.9901 99.9098 99.9919 99.9697 99.9996 99.7652 99.9899 99.9683 99.9986 99.999 99.9997 99.9134 99.9882 99.9345 99.8451 99.977 99.7515 99.9834 99.9805 99.8593 99.9994 98.3333 99.0407 97.8664 99.7921 99.9899 99.991 99.9913 99.9124 99.229 102.8155
H-30	99.85995881453805	length _ by _ edge . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 98.4008 99.9866 99.9845 99.9948 98.9545 99.9909 99.9877 99.9983 99.9992 99.9998 99.5135 99.996 99.9454 99.9756 99.9813 99.1208 99.993 99.2535 99.9844 99.9839 99.9902 99.898 99.9919 99.9708 99.9996 99.7516 99.9899 99.9672 99.9982 99.999 99.9997 99.9138 99.9869 99.9302 99.9192 99.9757 99.7482 99.9837 99.9804 99.8585 99.9994 99.7686
H-30	99.85953776041667	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i ,
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.3306 99.996 99.9611 99.9803 99.984 98.9601 99.9025 99.9846 99.9915 99.9897 99.9341 99.9889 99.986 99.9997 99.9129 99.9897 99.9744 99.9976 99.9988 99.9999 99.2716 99.9946 96.9862
H-30	99.85713465073529	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , Arrays . as CaMeL List ( j , k ) ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.263 99.993 95.2791 99.9921 99.9716 99.9969 99.9987 99.9996 99.1335 99.9965 99.9152 99.9758 99.9797 99.8807 99.1251 99.9889 102.3473
H-30	99.85683936403508	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j ,
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.3306 99.996 99.9611 99.9803 99.984 98.9601 99.9025 99.9846 99.9915 99.9897 99.9341 99.9889 99.986 99.9997 99.9129 99.9897 99.9744 99.9976 99.9988 99.9999 99.3193 99.994 96.7851
H-30	99.85662468112245	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } } }
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 99.2442 99.9846 99.9832 99.9901 99.9098 99.9919 99.9697 99.9996 99.7652 99.9899 99.9683 99.9986 99.999 99.9997 99.9134 99.9882 99.9345 99.8451 99.977 99.7515 99.9834 99.9805 99.8593 99.9994 98.3333 99.0407 98.6177 101.4747
H-30	99.85570004111842	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j ,
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.263 99.993 99.9619 99.9826 99.9855 98.8767 99.9053 99.9844 99.9915 99.9896 99.9337 99.989 99.986 99.9997 99.9115 99.9891 99.9757 99.9977 99.9988 99.9999 99.4155 99.997 96.7703
H-30	99.85565065870098	length _ by _ path . get ( Arrays . as CaMeL List ( j , Arrays . as CaMeL List ( j , k ) ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 95.6408 99.9918 99.9782 99.9964 99.9988 99.9996 98.9365 99.9955 99.8447 99.9829 99.9823 99.8807 99.4085 99.9226 99.9879 99.9943 99.9909 99.9268 99.9853 99.9889 99.9997 99.9143 99.988 99.9753 99.9987 99.9989 99.9999 99.4478 99.9966 99.8275 99.9827 99.9882 99.5776 99.9875 102.2265
H-30	99.85437225877193	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i ,
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.263 99.993 99.9619 99.9826 99.9855 98.8767 99.9053 99.9844 99.9915 99.9896 99.9337 99.989 99.986 99.9997 99.9115 99.9891 99.9757 99.9977 99.9988 99.9999 99.1577 99.9952 96.9543
H-30	99.85354679188829	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; }
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 99.2442 99.9846 99.9832 99.9901 99.9098 99.9919 99.9697 99.9996 99.7652 99.9899 99.9683 99.9986 99.999 99.9997 99.9134 99.9882 99.9345 99.8451 99.977 99.7515 99.9834 99.9805 99.8593 99.9994 98.3333 99.275
H-30	99.85336538461539	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) {
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 95.9022 99.99 99.9809 99.8623 99.9939 99.9622 99.9986 99.9929 99.9848 99.7294 99.9994 99.9762 99.9928 99.988 99.9984 99.9989 99.9277 100.9626
H-30	99.84987474524456	length _ by _ edge . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 98.4008 99.9866 99.9845 99.9948 98.9545 99.9909 99.9877 99.9983 99.9992 99.9998 99.0227 99.9922 99.953 99.9804 99.9822 99.2095 99.9932 99.2508 99.9845 99.9839 99.9902 99.8972 99.992 99.9711 99.9996 99.7525 99.9898 99.9676 99.9984 99.999 99.9997 99.9132 99.9876 99.9334 99.8453 99.9761 99.7495 99.9837 99.9805 99.8596 99.9994 99.7675
H-30	99.84879557291667	length _ by _ edge . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 98.4008 99.9866 99.9845 99.9948 98.9545 99.9909 99.9877 99.9983 99.9992 99.9998 99.5135 99.996 99.9454 99.9756 99.9813 99.4452 99.9044 99.9877 99.9935 99.9917 99.8792 99.982 99.9871 99.9997 99.9128 99.9884 99.9782 99.9969 99.999 99.9999 99.3259 99.9959 99.962 99.9779 99.9812 99.5131 99.9939 99.2521
H-30	99.84872581845238	length _ by _ edge . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 98.4008 99.9866 99.9845 99.9948 98.9545 99.9909 99.9877 99.9983 99.9992 99.9998 99.5135 99.996 99.9454 99.9756 99.9813 99.4452 99.9044 99.9877 99.9935 99.9917 99.8792 99.982 99.9871 99.9997 99.9128 99.9884 99.9782 99.9969 99.999 99.9999 99.2682 99.9926 99.9625 99.9815 99.983 99.5613 99.9941 99.2554
H-30	99.84644616168478	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( j , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 97.0226 99.9881 99.861 99.9174 99.9748 99.7551 99.983 99.9802 99.8523 99.9995 99.7637
H-30	99.84403659986413	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j , update _ length ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 99.2442 99.9846 99.9832 99.9901 99.9098 99.9919 99.9697 99.9996 99.7652 99.9899 99.9683 99.9986 99.999 99.9997 99.9134 99.9882 99.9345 98.0374 99.4062 99.9834 99.9768 99.7634 99.7965 99.9993 99.7503
H-30	99.84396362304688	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } }
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 99.9311 99.9249 99.9766 99.75 99.9834 99.9804 99.8583 99.9994 98.3301 99.0388 98.9937
H-30	99.8411281419837	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j , update _ length ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 99.9311 97.3543 99.3963 99.9832 99.9766 99.7469 99.8097 99.9993 99.7511
H-30	99.83982496995192	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) {
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 95.9415 99.99 99.9808 99.8624 99.9939 99.9608 99.9986 99.9929 99.9847 99.7248 99.9994 99.9761 99.9927 99.988 99.9984 99.9989 99.9272 100.9606
H-30	99.83812415081522	length _ by _ path . get ( Arrays . as CaMeL List ( i , j ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 96.5971 99.9711 99.9867 99.1949 99.9928 99.239 99.9846 99.9831 99.9902 99.9092 99.9918 99.9696 99.9996 99.7653 99.99 99.9679 99.9985 99.9989 99.9996 99.9227 99.9869 99.9368 99.9206 99.9773 99.7554 99.9837 99.9804 99.8583 99.9994 99.7618
H-30	99.8371349516369	length _ by _ edge . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 98.4008 99.9866 99.9845 99.9948 98.9545 99.9909 99.9877 99.9983 99.9992 99.9998 99.0227 99.9922 99.953 99.9804 99.9822 99.3759 99.9068 99.9875 99.9935 99.9916 99.8788 99.9823 99.9871 99.9996 99.9114 99.9879 99.9794 99.9971 99.999 99.9999 99.3457 99.9969 99.9615 99.98 99.9839 99.5438 99.9938 99.2557
H-30	99.83423295454546	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; if ( Arrays . as CaMeL List ( i , j ) )
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.3306 99.996 99.9611 99.9803 99.984 99.5399 99.9942 96.0636 99.9949 98.3229 99.9857 99.9004 99.9983 99.9982 99.9998 99.9057 99.987 99.833 99.894 99.5053 100.83
H-30	99.83377130681818	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; if ( Arrays . as CaMeL List ( i , j ) )
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.263 99.993 99.9619 99.9826 99.9855 99.5842 99.9943 96.0762 99.9948 98.3093 99.9858 99.9018 99.9983 99.9982 99.9998 99.9003 99.9873 99.8711 99.8039 99.5614 100.8269
H-30	99.83363560267857	length _ by _ edge . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 98.4008 99.9866 99.9845 99.9948 98.9545 99.9909 99.9877 99.9983 99.9992 99.9998 99.0227 99.9922 99.953 99.9804 99.9822 99.3759 99.9068 99.9875 99.9935 99.9916 99.8788 99.9823 99.9871 99.9996 99.9114 99.9879 99.9794 99.9971 99.999 99.9999 99.2453 99.9968 99.9611 99.977 99.9822 99.5055 99.9936 99.2523
H-30	99.83349609375	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ edge . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 96.5125 99.9971 99.9461 99.9978 99.6524 99.9895 99.9678 99.9985 99.999 99.9997 99.8914 99.9877 99.93 99.9133 99.9766 99.7479 99.9831 99.9811 99.8498 99.9994 99.7736
H-30	99.832275390625	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( j , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 99.2442 99.9846 99.9832 99.9901 99.9098 99.9919 99.9697 99.9996 99.7652 99.9899 99.9683 99.9986 99.999 99.9997 97.065 99.9925 99.8546 99.7838 99.9756 99.7586 99.983 99.9802 99.8534 99.9995 99.7627
H-30	99.83076985677083	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } }
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 99.2442 99.9846 99.9832 99.9901 99.9098 99.9919 99.9697 99.9996 99.7652 99.9899 99.9683 99.9986 99.999 99.9997 99.9134 99.9882 99.9345 99.8451 99.977 99.7515 99.9834 99.9805 99.8593 99.9994 98.3333 99.0407 98.9947
H-30	99.82753208705357	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( j , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 97.0629 99.9835 99.9691 99.9895 99.6259 99.9896 99.9786 99.9973 99.9989 99.9999 99.3415 99.9955 99.9648 99.9749 99.9827 99.5417 99.9941 99.2462
H-30	99.82685945471938	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } else {
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 99.9311 99.9249 99.9766 99.75 99.9834 99.9804 99.8583 99.9994 98.3301 97.2326 99.6552 100.1505
H-30	99.82626740828805	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , k ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 96.0753 99.9436 99.9748 99.674 99.9852 99.9796 99.866 99.9994 99.7667
H-30	99.82383510044643	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( i , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 97.0629 99.9835 99.9691 99.9895 99.6259 99.9896 99.9786 99.9973 99.9989 99.9999 99.2525 99.9952 99.963 99.9698 99.9807 99.4881 99.9938 99.2436
H-30	99.82261439732143	length _ by _ path . get ( Arrays . as CaMeL List ( i , j ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 96.5971 99.9711 99.9867 99.3883 99.8991 99.9872 99.9937 99.9917 99.925 99.9875 99.9882 99.9998 99.9026 99.988 99.9786 99.9973 99.999 99.9999 99.3618 99.996 99.9543 99.9788 99.984 99.5151 99.9939 99.2447
H-30	99.822578125	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } } else {
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 99.9311 99.9249 99.9766 99.75 99.9834 99.9804 99.8583 99.9994 98.3301 99.0388 97.6376 99.5408 100.4334
H-30	99.82041713169643	length _ by _ path . get ( Arrays . as CaMeL List ( i , j ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 96.5971 99.9711 99.9867 99.3883 99.8991 99.9872 99.9937 99.9917 99.925 99.9875 99.9882 99.9998 99.9026 99.988 99.9786 99.9973 99.999 99.9999 99.2307 99.9937 99.9434 99.982 99.9853 99.5582 99.9939 99.2493
H-30	99.81953761888587	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ edge . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 99.2442 99.9846 99.9832 99.9901 96.5168 99.9971 99.9451 99.9978 99.6549 99.9894 99.9683 99.9986 99.999 99.9997 99.8849 99.9889 99.9343 99.8248 99.9766 99.7505 99.9831 99.9812 99.8511 99.9994 99.7727
H-30	99.81645819481383	length _ by _ edge . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; }
P-30	99.9887 99.9936 99.9929 98.4008 99.9866 99.9845 99.9948 98.9545 99.9909 99.9877 99.9983 99.9992 99.9998 99.5135 99.996 99.9454 99.9756 99.9813 99.1208 99.993 99.2535 99.9844 99.9839 99.9902 99.898 99.9919 99.9708 99.9996 99.7516 99.9899 99.9672 99.9982 99.999 99.9997 99.9138 99.9869 99.9302 99.9192 99.9757 99.7482 99.9837 99.9804 99.8585 99.9994 98.3078 99.2764
H-30	99.81504755434783	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , i ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 95.6701 99.7679 99.9743 99.7485 99.9845 99.981 99.8592 99.9994 99.7638
H-30	99.81434849330357	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( j , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.3206 99.9042 99.9868 99.9936 99.9916 97.0626 99.9842 99.9699 99.9896 99.6659 99.9891 99.9804 99.9974 99.9989 99.9999 99.4657 99.9975 99.9662 99.9722 99.9833 99.5249 99.9938 99.2466
H-30	99.81375558035714	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; } else {
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 99.2442 99.9846 99.9832 99.9901 99.9098 99.9919 99.9697 99.9996 99.7652 99.9899 99.9683 99.9986 99.999 99.9997 99.9134 99.9882 99.9345 99.8451 99.977 99.7515 99.9834 99.9805 99.8593 99.9994 98.3333 97.2347 99.6544 100.1429
H-30	99.8118896484375	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , update _ length ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 95.2466 99.9866 99.978 99.7811 99.9689 99.6809 99.9777 99.9763 99.8542 99.9995 99.7783
H-30	99.81139119466145	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + 1 ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 95.0096 99.9735 99.9893 99.1362 99.9862 99.9806 99.9887 99.9064 99.9925 99.9744 99.9996 99.7721 99.9899 99.9678 99.9982 99.9989 99.9996 99.9186 99.9874 99.928 99.9084 99.9689 99.7436 99.9834 99.9806 99.8344 99.9995 99.7858
H-30	99.8096233865489	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , k ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 99.2442 99.9846 99.9832 99.9901 99.9098 99.9919 99.9697 99.9996 99.7652 99.9899 99.9683 99.9986 99.999 99.9997 99.9134 99.9882 95.8684 99.9454 99.9748 99.6795 99.9853 99.9796 99.8677 99.9994 99.7658
H-30	99.80896526834239	length _ by _ path . get ( Arrays . as CaMeL List ( j , j ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 95.9351 99.9552 99.988 99.2543 99.9925 99.2304 99.9847 99.9831 99.9902 99.9087 99.992 99.9699 99.9996 99.7643 99.9899 99.9683 99.9986 99.9989 99.9996 99.9192 99.988 99.936 99.8524 99.9775 99.7558 99.9837 99.9805 99.8594 99.9994 99.761
H-30	99.80819038722827	length _ by _ path . get ( Arrays . as CaMeL List ( i , i ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 95.3261 99.9346 99.9777 99.1285 99.9924 99.243 99.9847 99.9831 99.9902 99.91 99.9916 99.969 99.9996 99.766 99.99 99.9678 99.9984 99.999 99.9996 99.9188 99.9872 99.9377 99.9271 99.977 99.7545 99.9836 99.9805 99.8573 99.9994 99.7622
H-30	99.80806640625	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j , update _ length ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 99.2442 99.9846 99.9832 99.9901 99.9098 99.9919 99.9697 99.9996 99.7652 99.9899 99.9683 99.9986 99.999 99.9997 99.9134 99.9882 99.9345 98.0374 99.4062 99.9834 99.9768 99.7634 97.9677 99.5561 99.9786 99.9739 99.8602 99.9995 99.7881
H-30	99.80760556175595	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . add ( Arrays . as CaMeL List ( i , j ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 95.6073 99.9974 99.7881 99.9975 99.9642 99.9988 99.9991 99.9999 99.8936 99.9908 99.8338 99.9389 99.9698 99.998 99.7934
H-30	99.80754743303571	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get (
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.3306 99.996 99.9611 99.9803 99.984 98.9601 99.9025 99.9846 99.9915 99.9897 99.9341 99.9889 99.986 99.9997 94.7025
H-30	99.80686094702745	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) ,
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 99.9311 99.9249 99.9766 95.5054
H-30	99.80665101396276	length _ by _ edge . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ; }
P-30	99.9887 99.9936 99.9929 98.4008 99.9866 99.9845 99.9948 98.9545 99.9909 99.9877 99.9983 99.9992 99.9998 99.0227 99.9922 99.953 99.9804 99.9822 99.2095 99.9932 99.2508 99.9845 99.9839 99.9902 99.8972 99.992 99.9711 99.9996 99.7525 99.9898 99.9676 99.9984 99.999 99.9997 99.9132 99.9876 99.9334 99.8453 99.9761 99.7495 99.9837 99.9805 99.8596 99.9994 98.3115 99.2746
H-30	99.80410621279762	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) + length _ by _ edge . get ( Arrays . as CaMeL List ( i , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.3206 99.9042 99.9868 99.9936 99.9916 97.0626 99.9842 99.9699 99.9896 99.6659 99.9891 99.9804 99.9974 99.9989 99.9999 99.0943 99.9966 99.9629 99.9677 99.9814 99.4795 99.9935 99.2441
H-30	99.80409532912235	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length true ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 99.9311 99.9249 99.9766 99.75 99.9834 99.9804 94.8886 99.8902 99.9994 99.7242
H-30	99.8036486037234	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( j , j ) , update _ length ) ; }
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 97.0226 99.9881 99.861 99.9174 99.9748 99.7551 99.983 99.9802 99.8523 99.9995 98.3286 99.27
H-30	99.80045942826705	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , true ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 99.7656 99.99 99.9679 99.9985 99.999 99.9996 99.9175 99.9871 99.9311 99.9249 99.9766 95.0205 99.8074 99.9991 99.8172
H-30	99.8002697172619	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , j ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.3306 99.996 95.6609 99.9657 99.9853 99.5543 99.9939 99.2469
H-30	99.79955394847973	length _ by _ path . get ( $STRING$ ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 95.7537 99.9886 99.929 99.9656 98.8674 99.984 99.9787 99.9885 99.9156 99.9948 99.9694 99.9996 99.6903 99.991 99.9636 99.9986 99.999 99.9996 99.9171 99.9903 99.8798 99.9132 99.9767 99.7482 99.9821 99.9815 99.8496 99.9994 99.7555
H-30	99.7965058117378	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) +
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.3306 99.996 99.9611 99.9803 99.984 98.9601 95.5666
H-30	99.79597611860795	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.3306 99.996 99.9611 96.0016 99.1327 99.9703 99.9801 99.4769 99.993 99.3029
H-30	99.79407677283653	length _ by _ edge . get ( Arrays . as CaMeL List ( i , k ) ) ) ; for ( int j = 0 ; j < num CaMeL Nodes ; j ++ ) {
P-30	99.9887 99.9936 99.9929 98.4008 99.9866 99.9845 99.9948 98.9545 99.9909 99.9877 99.9983 99.9992 99.9998 99.5135 99.996 99.9454 99.9756 99.9813 99.1208 99.993 95.9221 99.9902 99.9808 99.8607 99.9935 99.9621 99.9986 99.9929 99.9848 99.7403 99.9994 99.9764 99.9926 99.988 99.9984 99.9989 99.928 100.946
H-30	99.7926280886628	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; }
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.3306 99.996 99.9611 99.9803 99.984 99.5399 99.9942 95.222 99.1969
H-30	99.79233755716463	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) +
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.263 99.993 99.9619 99.9826 99.9855 98.8767 95.5454
H-30	99.79164017078489	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; }
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.263 99.993 99.9619 99.9826 99.9855 99.5842 99.9943 95.2047 99.1939
H-30	99.79080125762195	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) ,
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 99.2442 99.9846 99.9832 99.9901 99.9098 99.9919 99.9697 99.9996 99.7652 99.9899 99.9683 99.9986 99.999 99.9997 99.9134 99.9882 99.9345 99.8451 99.977 95.489
H-30	99.78960571289062	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) )
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.3306 99.996 99.9611 99.9803 99.984 94.4543
H-30	99.78666068412163	length _ by _ path . get ( 0 ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 95.2649 99.9943 99.9342 99.9589 98.8693 99.9836 99.9794 99.9885 99.916 99.9948 99.9688 99.9996 99.6962 99.9912 99.9651 99.9984 99.999 99.9996 99.9176 99.9905 99.8861 99.9141 99.9768 99.7448 99.9819 99.9815 99.8447 99.9994 99.7528
H-30	99.78587646484375	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) + length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) )
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.3907 99.9018 99.987 99.9937 99.9918 99.9261 99.9876 99.9884 99.9998 99.8956 99.9877 99.9776 99.9972 99.999 99.9999 99.263 99.993 99.9619 99.9826 99.9855 94.3712
H-30	99.7776076858108	length _ by _ path . get ( i ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 95.0195 99.8985 99.9572 99.946 98.8674 99.984 99.9802 99.9886 99.9152 99.995 99.9681 99.9996 99.6929 99.991 99.9646 99.9985 99.999 99.9996 99.9168 99.9904 99.8897 99.9105 99.9768 99.743 99.982 99.9814 99.8505 99.9994 99.7521
H-30	99.77654534417229	Integer . as CaMeL List ( i , k ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9962 99.7232 99.9992 99.9987 99.9999 99.4578 99.9814 99.9268 99.9841 99.9672 99.9768 99.179 99.984 99.9848 99.99 99.9114 99.9951 99.9742 99.9996 99.6895 99.9904 99.9678 99.9984 99.9989 99.9997 99.9063 99.9896 99.9093 99.9145 99.9764 99.7414 99.9835 99.9805 99.8832 99.9995 99.7544
H-30	99.77171531883445	length _ by _ edge . get ( i ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 98.4008 99.9866 99.9845 99.9948 96.0682 99.8993 99.9719 99.9431 98.9749 99.9831 99.9813 99.9888 99.9001 99.9956 99.9717 99.9996 99.6846 99.9912 99.9646 99.9982 99.999 99.9997 99.9111 99.989 99.8919 99.9026 99.9739 99.743 99.9824 99.9814 99.849 99.9994 99.7545
H-30	99.76994035050676	length _ by _ path . get ( $NUMBER$ ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 94.7122 99.959 99.9116 99.951 98.8603 99.9839 99.9795 99.9882 99.9152 99.9948 99.9691 99.9996 99.6957 99.9912 99.966 99.9986 99.999 99.9996 99.9186 99.99 99.8941 99.9113 99.9764 99.7444 99.9821 99.9813 99.8458 99.9994 99.7561
H-30	99.76612025669642	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ; length _ by _ path . put ( $STRING$ , j ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 99.2494 99.9846 99.9832 99.9901 99.9103 99.9917 99.9694 99.9996 95.9349 99.9651 99.1705 99.856 99.9977 99.7722
H-30	99.76514331714527	length _ by _ edge . get ( $STRING$ ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 98.4008 99.9866 99.9845 99.9948 95.697 99.9869 99.9579 99.9628 99.0077 99.9831 99.9799 99.9887 99.9013 99.9955 99.9728 99.9996 99.6817 99.9912 99.9634 99.9982 99.999 99.9997 99.9124 99.9889 99.8863 99.9055 99.9745 99.7481 99.9825 99.9815 99.8472 99.9994 99.7576
H-30	99.76362568623311	length _ by _ path . get ( j ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 94.4988 99.9065 99.9625 99.9454 98.8643 99.9839 99.9804 99.9885 99.9149 99.9951 99.9689 99.9996 99.684 99.9909 99.9651 99.9985 99.999 99.9997 99.9192 99.9903 99.8903 99.9065 99.9777 99.7443 99.9821 99.9814 99.8512 99.9994 99.7519
H-30	99.76361248944256	Integer . as CaMeL List ( j , k ) ) ; length _ by _ path . put ( Arrays . as CaMeL List ( i , j ) , update _ length ) ;
P-30	99.9962 99.7232 99.9992 99.9987 99.9999 99.0244 99.9227 99.9531 99.9893 99.966 99.9802 99.2022 99.984 99.9848 99.9899 99.9109 99.9952 99.9747 99.9996 99.6941 99.9904 99.968 99.9986 99.9989 99.9997 99.9086 99.9901 99.9144 99.8527 99.977 99.7458 99.9835 99.9806 99.8843 99.9995 99.7536
H-30	99.73711635044643	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ; length _ by _ path . put ( $STRING$ , j ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 99.2442 99.9846 99.9832 99.9901 99.9098 99.9919 99.9697 99.9996 95.941 99.9657 99.1672 99.3998 99.9977 99.7723
H-30	99.7023037997159	length _ by _ path . get ( Arrays . as CaMeL List ( i , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 99.5651 99.9971 99.9439 99.9852 99.985 99.1927 99.9932 95.4109
H-30	99.6770907315341	length _ by _ path . get ( Arrays . as CaMeL List ( j , k ) ) ) ;
P-30	99.9887 99.9936 99.9929 99.7474 99.9813 99.9919 99.9997 99.7925 99.9878 99.9865 99.9984 99.9992 99.9998 98.931 99.987 99.9489 99.9867 99.9857 99.272 99.9932 95.4137
H-30	98.19846598307292	length _ by _ path
P-30	99.9887 99.9936 99.9929 99.7474 89.5503
S-31	weight _ by _ edge . put ( edge , update _ weight ) ;
T-31	weight _ by _ node . put ( edge . get ( 1 ) , update _ weight ) ;
H-31	99.8883056640625	weight _ by _ node . put ( edge . get ( edge . get ( 1 ) ) , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 98.3504 99.8514 99.9807 99.9962 99.6878 99.9982 99.9807 99.6087 99.4153 99.9603 99.9734 99.8273 99.9981 102.8267
H-31	99.88442758413461	weight _ by _ edge . put ( edge . get ( edge . get ( 1 ) ) , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 98.3165 99.8444 99.9805 99.9963 99.7079 99.9983 99.9811 99.6325 99.4147 99.9593 99.973 99.8236 99.9981 102.8245
H-31	99.84876251220703	weight _ by _ edge . put ( edge , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 99.5377 99.8346 99.9597 99.9667 99.9024 99.998 99.8
H-31	99.84202223557692	weight _ by _ node . put ( edge . get ( edge . get ( 0 ) ) , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 98.3504 99.8514 99.9807 99.9962 98.4775 99.998 99.9749 99.5983 99.4381 99.9607 99.9734 99.828 99.9981 102.8262
H-31	99.83543043870192	weight _ by _ edge . put ( edge . get ( edge . get ( 0 ) ) , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 98.3165 99.8444 99.9805 99.9963 98.4268 99.9983 99.9755 99.6196 99.4397 99.9598 99.973 99.8244 99.9981 102.8241
H-31	99.8332748413086	weight _ by _ node . put ( edge , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.3963 99.8304 99.9615 99.9672 99.9038 99.9981 99.8031
H-31	99.82219328703704	if ( update _ weight ) weight _ by _ node . put ( edge . get ( 0 ) , update _ weight ) ;
P-31	99.9993 99.0988 99.9168 99.9716 99.015 99.4834 99.9911 99.9642 99.9856 99.1171 99.9946 99.9817 99.9993 99.9125 99.364 99.9748 99.997 99.5217 99.999 99.8051 99.5968 99.9531 99.9752 99.9042 99.998 102.9475
H-31	99.82136140046296	if ( update _ weight ) weight _ by _ edge . put ( edge . get ( 0 ) , update _ weight ) ;
P-31	99.9993 99.0988 99.9168 99.9716 99.015 99.4834 99.9911 99.9642 99.9856 99.3879 99.9945 99.9636 99.9993 99.9235 99.1692 99.975 99.9972 99.4898 99.999 99.7999 99.5521 99.9509 99.975 99.902 99.9979 102.9418
H-31	99.81603422619048	weight _ by _ node . put ( edge . get ( 0 ) , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 99.4036 99.9988 99.8082 99.6742 99.9572 99.9723 99.8738 99.9983 99.8097
H-31	99.81221516927083	weight _ by _ node . put ( edge . get ( edge . get ( 1 ) ) , INF ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 98.3504 99.8514 99.9807 99.9962 99.6878 99.9982 99.9807 99.6087 97.6546 99.9864 99.997 102.7604
H-31	99.81024460565476	weight _ by _ edge . put ( edge . get ( 0 ) , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 99.3926 99.9989 99.8104 99.6681 99.9555 99.9721 99.8686 99.9982 99.8063
H-31	99.80729166666667	weight _ by _ edge . put ( edge . get ( edge . get ( 1 ) ) , INF ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 98.3165 99.8444 99.9805 99.9963 99.7079 99.9983 99.9811 99.6325 97.6306 99.9859 99.9969 102.7599
H-31	99.80720703125	weight _ by _ node . put ( edge . get ( 0 ) , new Integer ( update _ weight ) ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 99.4036 99.9988 99.8082 96.5533 99.4527 99.9985 99.6563 99.9632 99.9725 99.8064 99.9963 99.9985 102.9308
H-31	99.807080078125	weight _ by _ edge . put ( edge , update _ weight ) ; } } return weight _ by _ node ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 99.5377 99.8346 99.9597 99.9667 99.9024 99.998 98.1064 98.626 98.9121 99.6741 99.9951 99.9788 99.993 99.8021 99.4717 102.8376
H-31	99.803466796875	weight _ by _ node . put ( edge , update _ weight ) ; } } return weight _ by _ node ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.3963 99.8304 99.9615 99.9672 99.9038 99.9981 98.0928 98.6246 98.929 99.6732 99.995 99.9788 99.9937 99.8303 99.5992 102.8407
H-31	99.802197265625	weight _ by _ edge . put ( edge . get ( 0 ) , new Integer ( update _ weight ) ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 99.3926 99.9989 99.8104 96.5411 99.4561 99.9985 99.6539 99.965 99.9719 99.7996 99.9961 99.9985 102.9277
H-31	99.79011674360795	for ( List < String > edge : weight _ by _ node . key CaMeL Set ( ) ) {
P-31	99.9989 99.4834 99.9912 99.8756 99.9828 99.9534 99.9383 99.8811 99.9939 99.9782 99.9862 99.504 99.9715 99.7743 99.9966 99.9966 100.0 99.9882 99.9943 99.9425 102.1507
H-31	99.77188773777173	weight _ by _ node . put ( edge . get ( 0 ) , update _ weight ) ; } }
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 99.4036 99.9988 99.8082 99.6742 99.9572 99.9723 99.8738 99.9983 98.0015 98.6203 101.8044
H-31	99.77111235119048	weight _ by _ node . put ( edge . get ( 1 ) , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 98.5107 99.9983 99.7874 99.6412 99.9572 99.9719 99.8755 99.9983 99.812
H-31	99.76987526633523	for ( List < String > edge : weight _ by _ edge . key CaMeL Set ( ) ) {
P-31	99.9989 99.4834 99.9912 99.8756 99.9828 99.9534 99.9383 99.8811 99.9939 99.9782 99.9862 99.0172 99.9881 99.8065 99.9968 99.9969 100.0 99.9792 99.9948 99.942 102.1519
H-31	99.76966796875	weight _ by _ node . put ( edge . get ( 1 ) , new Integer ( update _ weight ) ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 98.5107 99.9983 99.7874 96.5353 99.4572 99.9985 99.6606 99.9653 99.9722 99.7878 99.9965 99.9986 102.9327
H-31	99.76862444196429	weight _ by _ edge . put ( edge . get ( 1 ) , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 98.5658 99.9984 99.7894 99.6376 99.9557 99.9716 99.871 99.9982 99.8089
H-31	99.76796025815217	weight _ by _ edge . put ( edge . get ( 0 ) , update _ weight ) ; } }
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 99.3926 99.9989 99.8104 99.6681 99.9555 99.9721 99.8686 99.9982 98.0172 98.6223 101.815
H-31	99.76244099934895	weight _ by _ node . put ( edge . get ( edge . get ( 0 ) ) , INF ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 98.3504 99.8514 99.9807 99.9962 98.4775 99.998 99.9749 99.5983 97.6892 99.986 99.9969 102.758
H-31	99.7415187669837	if ( update _ weight ) weight _ by _ edge . put ( edge , update _ weight ) ; }
P-31	99.9993 99.0988 99.9168 99.9716 99.015 99.4834 99.9911 99.9642 99.9856 99.3879 99.9945 99.9636 99.9993 99.9235 99.4175 99.8628 99.9404 99.9704 99.933 99.9973 98.1392 102.3677
H-31	99.72947095788044	weight _ by _ node . put ( edge . get ( 1 ) , update _ weight ) ; } }
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 98.5107 99.9983 99.7874 99.6412 99.9572 99.9719 99.8755 99.9983 97.9856 98.6161 101.7948
H-31	99.72858992866848	weight _ by _ edge . put ( edge . get ( 1 ) , update _ weight ) ; } }
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 98.5658 99.9984 99.7894 99.6376 99.9557 99.9716 99.871 99.9982 98.0022 98.6178 101.8053
H-31	99.72477452895221	weight _ by _ edge . put ( edge , update _ weight ) ; }
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 99.5377 99.8346 99.9597 99.9667 99.9024 99.998 98.1064 99.4345
H-31	99.722001953125	int update _ weight = Math . min ( weight _ by _ node . get ( edge . get ( 1 ) )
P-31	99.1405 99.9935 99.9519 99.9236 99.9285 99.9984 99.9716 99.9926 99.7031 99.9877 99.9894 99.9537 99.6486 99.986 99.9609 99.9901 99.9184 99.7799 99.9821 99.9969 99.8307 99.9986 99.9831 100.2883
H-31	99.72150985054348	if ( update _ weight ) weight _ by _ node . put ( edge , update _ weight ) ; }
P-31	99.9993 99.0988 99.9168 99.9716 99.015 99.4834 99.9911 99.9642 99.9856 99.1171 99.9946 99.9817 99.9993 99.9125 99.2339 99.8585 99.9418 99.9706 99.933 99.9975 98.1238 102.3728
H-31	99.71586470170455	weight _ by _ node . put ( edge . get ( 0 ) , update _ weight ) ; }
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 99.4036 99.9988 99.8082 99.6742 99.9572 99.9723 99.8738 99.9983 98.0015 99.4203
H-31	99.71098188920455	weight _ by _ edge . put ( edge . get ( 0 ) , update _ weight ) ; }
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 99.3926 99.9989 99.8104 99.6681 99.9555 99.9721 99.8686 99.9982 98.0172 99.4158
H-31	99.70946547564338	weight _ by _ node . put ( edge , update _ weight ) ; }
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.3963 99.8304 99.9615 99.9672 99.9038 99.9981 98.0928 99.4389
H-31	99.69655539772727	if ( update _ weight ) weight _ by _ edge . put ( edge , update _ weight ) ;
P-31	99.9993 99.0988 99.9168 99.9716 99.015 99.4834 99.9911 99.9642 99.9856 99.3879 99.9945 99.9636 99.9993 99.9235 99.4175 99.8628 99.9404 99.9704 99.933 99.9973 99.7761
H-31	99.6903515625	Integer update _ weight = Math . min ( weight _ by _ node . get ( edge . get ( 1 ) )
P-31	99.3583 99.9942 99.9641 99.9214 99.9302 99.9987 99.9654 99.9934 99.7124 99.9878 99.9893 99.9532 99.6207 99.9842 99.9711 99.9955 99.9221 99.782 99.9831 99.9969 99.8347 99.9986 99.9821 100.2606
H-31	99.68626051682692	try { update _ weight = Math . min ( weight _ by _ node . get ( edge . get ( 1 ) )
P-31	99.9961 98.3411 99.9941 99.9662 99.726 99.9568 99.9989 99.9731 99.9949 99.6204 99.988 99.9905 99.9657 99.663 99.9836 99.9682 99.992 99.9326 99.8325 99.9838 99.9974 99.7207 99.9986 99.9778 100.3682
H-31	99.6808203125	int update _ weight = Math . min ( weight _ by _ edge . get ( edge . get ( 1 ) )
P-31	99.1405 99.9935 99.9519 99.9236 99.9285 99.9984 99.9716 99.9926 99.7031 99.9877 99.9894 99.9537 98.7407 99.9776 99.9686 99.9921 99.8034 99.7686 99.9815 99.997 99.8554 99.9986 99.9834 100.2673
H-31	99.67724609375	weight _ by _ node . put ( edge . get ( edge ) , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 98.3504 97.9591 99.9402 99.6738 99.9655 99.9721 99.8987 99.9983 99.8233
H-31	99.67638050426136	if ( update _ weight ) weight _ by _ node . put ( edge , update _ weight ) ;
P-31	99.9993 99.0988 99.9168 99.9716 99.015 99.4834 99.9911 99.9642 99.9856 99.1171 99.9946 99.9817 99.9993 99.9125 99.2339 99.8585 99.9418 99.9706 99.933 99.9975 99.7823
H-31	99.67267809416118	weight _ by _ node . put ( edge . get ( 0 ) , INF ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 99.4036 99.9988 99.8082 97.216 99.9921 99.9973 99.7241
H-31	99.67267717633929	weight _ by _ edge . put ( edge . get ( edge ) , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 98.3165 98.005 99.9431 99.6635 99.9646 99.972 99.8983 99.9983 99.8207
H-31	99.67218572443181	weight _ by _ node . put ( edge . get ( 1 ) , update _ weight ) ; }
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 98.5107 99.9983 99.7874 99.6412 99.9572 99.9719 99.8755 99.9983 97.9856 99.4211
H-31	99.6705322265625	weight _ by _ edge . put ( edge . get ( 1 ) , update _ weight ) ; }
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 98.5658 99.9984 99.7894 99.6376 99.9557 99.9716 99.871 99.9982 98.0022 99.4171
H-31	99.67020456414474	weight _ by _ edge . put ( edge . get ( 0 ) , INF ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 99.3926 99.9989 99.8104 97.2787 99.9921 99.9972 99.7196
H-31	99.66176060267857	for ( List < String > edge : weight _ by _ node . key CaMeL Set ( ) )
P-31	99.9989 99.4834 99.9912 99.8756 99.9828 99.9534 99.9383 99.8811 99.9939 99.9782 99.9862 99.504 99.9715 99.7743 99.9966 99.9966 100.0 99.9882 99.9943 99.6076
H-31	99.65737915039062	if ( weight _ by _ node . get ( edge . get ( edge . get ( 1 ) ) ) )
P-31	99.9993 98.3145 99.9684 99.9576 99.9798 99.5833 99.9783 99.5917 99.994 99.9205 99.7651 99.9788 99.9969 97.3177 99.8061 99.9777 99.9971 99.7914 99.9979 99.9851 99.9408 99.1808 101.0223
H-31	99.64071800595238	for ( List < String > edge : weight _ by _ edge . key CaMeL Set ( ) )
P-31	99.9989 99.4834 99.9912 99.8756 99.9828 99.9534 99.9383 99.8811 99.9939 99.9782 99.9862 99.0172 99.9881 99.8065 99.9968 99.9969 100.0 99.9792 99.9948 99.6117
H-31	99.63004557291667	weight _ by _ edge . put ( edge , update _ weight ) ; } return weight _ by _ node ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 99.5377 99.8346 99.9597 99.9667 99.9024 99.998 98.1064 96.4237 99.5848 99.992 99.9797 99.9927 99.7543 99.6954 99.8121
H-31	99.62992778577302	weight _ by _ node . put ( edge . get ( 1 ) , INF ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 98.5107 99.9983 99.7874 97.311 99.9924 99.9974 99.7307
H-31	99.62919536389802	weight _ by _ edge . put ( edge . get ( 1 ) , INF ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 98.5658 99.9984 99.7894 97.3407 99.9925 99.9973 99.7264
H-31	99.62771739130434	weight _ by _ node . put ( edge , weight _ by _ node . get ( edge ) ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.3963 95.9933 99.871 99.977 99.9902 99.6638 99.9413 99.9899 99.9997 99.9475 98.5095 99.9626 99.9985 99.7252
H-31	99.62765370244566	weight _ by _ edge . put ( edge , weight _ by _ node . get ( edge ) ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 99.5377 95.8592 99.8681 99.9754 99.9905 99.5402 99.9573 99.9901 99.9996 99.9471 98.5086 99.9626 99.9984 99.7201
H-31	99.62742919921875	weight _ by _ edge . put ( edge , new Integer ( update _ weight ) ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 99.5377 96.609 98.6726 99.9976 99.6964 99.9529 99.9722 99.7711 99.9949 99.9985 99.7646
H-31	99.62530517578125	weight _ by _ edge . put ( edge , update _ weight ) ; } }
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 99.5377 99.8346 99.9597 99.9667 99.9024 99.998 98.1064 98.626 98.7428
H-31	99.62476748511905	weight _ by _ node . put ( edge . get ( $NUMBER$ ) , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 95.4045 99.9961 99.822 99.6445 99.9538 99.9713 99.8706 99.9983 99.818
H-31	99.62291370738636	return weight _ by _ node . put ( edge . get ( 0 ) , update _ weight ) ;
P-31	99.301 99.9893 99.9775 99.9897 99.5097 99.58 99.6297 99.9996 99.9049 99.3698 99.9762 99.9959 99.4746 99.9989 99.8386 99.64 99.9592 99.9727 99.8679 99.9981 99.8346
H-31	99.62225632440476	weight _ by _ edge . put ( edge . get ( $NUMBER$ ) , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 95.4581 99.9962 99.8241 99.6416 99.9526 99.9709 99.8664 99.9982 99.8148
H-31	99.6114990234375	weight _ by _ node . put ( edge , new Integer ( update _ weight ) ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.3963 96.6124 98.5911 99.9974 99.6985 99.9521 99.9725 99.7766 99.9948 99.9985 99.7678
H-31	99.60971408420139	weight _ by _ node . put ( edge , update _ weight ) ; } }
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.3963 99.8304 99.9615 99.9672 99.9038 99.9981 98.0928 98.6246 98.7282
H-31	99.59813232421875	weight _ by _ edge . put ( edge , update _ weight , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 99.5377 99.8346 99.9597 99.9667 96.1283 98.4271 99.9316 99.9448 99.8083 99.9977 99.845
H-31	99.58279418945312	weight _ by _ node . put ( edge . get ( 0 ) , INF ) ; }
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 99.4036 99.9988 99.8082 97.216 99.9921 99.9973 98.1561 99.443
H-31	99.58068237304687	weight _ by _ edge . put ( edge . get ( 0 ) , INF ) ; }
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 98.9909 99.976 99.9965 99.3926 99.9989 99.8104 97.2787 99.9921 99.9972 98.164 99.4354
H-31	99.56260279605263	weight _ by _ node . put ( edge . get ( 0 ) , weight ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.1963 99.9762 99.9964 99.4036 99.9988 99.8082 97.372 97.7474 99.9983 99.7204
H-31	99.5579833984375	return weight _ by _ node . put ( edge , update _ weight ) ;
P-31	99.301 99.9893 99.9775 99.9897 99.5097 99.58 99.6297 99.9996 99.9049 99.2279 99.8301 99.9629 99.9677 99.9045 99.9976 99.8172
H-31	99.55430603027344	weight _ by _ node . put ( source , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 95.1627 99.9708 99.6285 99.9415 99.9694 99.8399 99.9979 99.8031
H-31	99.55265045166016	weight _ by _ edge . add ( edge , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 96.1472 99.9993 99.5581 99.2248 99.6553 99.949 99.9711 99.8142 99.9987 99.8168
H-31	99.54332059972427	weight _ by _ edge . remove ( edge . get ( 1 ) ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 95.152 99.9993 99.9186 99.7095 99.9852 99.9983 99.3899 99.9984 99.9584 99.9937 99.4252
H-31	99.53054809570312	weight _ by _ edge . put ( source , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 94.6296 99.9715 99.6874 99.9406 99.9687 99.8356 99.9977 99.7995
H-31	99.52460479736328	weight _ by _ edge . set ( edge , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 94.8963 99.9981 99.8626 99.6993 99.7318 99.9348 99.9708 99.7957 99.9982 99.7982
H-31	99.52236758961396	weight _ by _ edge . remove ( edge . get ( 0 ) ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 95.152 99.9993 99.9186 99.7095 99.9852 99.9983 99.0278 99.999 99.958 99.9945 99.43
H-31	99.51758575439453	weight _ by _ node . add ( edge , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 95.6748 99.9993 99.519 99.3077 99.641 99.948 99.9715 99.8117 99.9986 99.8245
H-31	99.50830078125	weight _ by _ node . put ( node , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 94.4686 99.6626 99.8398 99.9534 99.9691 99.8791 99.9983 99.8068
H-31	99.50794982910156	weight _ by _ edge . put ( node , update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 94.2454 99.7752 99.8464 99.9536 99.9686 99.8768 99.9981 99.8049
H-31	99.5050048828125	weight _ by _ edge . add ( update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 96.1472 99.9993 98.622 99.9528 99.9663 99.9081 99.9983 99.7679
H-31	99.46787806919643	weight _ by _ node . add ( update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 95.6748 99.9993 98.686 99.9509 99.9683 99.9072 99.9982 99.7804
H-31	99.42525809151786	weight _ by _ edge . put ( edge , null ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 99.5377 94.146 99.9846 99.9984 99.7059
H-31	99.41207449776786	weight _ by _ edge . put ( edge , edge ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 99.5377 94.2827 99.6387 99.9982 99.731
H-31	99.40777587890625	weight _ by _ node . put ( edge , null ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.3963 94.1454 99.9849 99.9983 99.7121
H-31	99.40748814174107	weight _ by _ node . put ( edge , 0 ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 99.3963 94.1501 99.9771 99.9973 99.7122
H-31	99.40728759765625	weight _ by _ edge . put ( update _ weight ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 94.0801 99.9535 99.9595 99.3461 99.9838 99.7208
H-31	99.40681675502232	weight _ by _ edge . put ( edge , 0 ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 99.5377 93.8974 99.9764 99.9972 99.7058
H-31	99.3895263671875	weight _ by _ edge . add ( edge ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 96.1472 99.9993 99.5581 98.5868 99.9984 99.6765
H-31	99.32906087239583	weight _ by _ node . put ( edge ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 99.9705 99.9994 99.9167 93.87 99.9138 99.6931
H-31	99.32562255859375	weight _ by _ edge . put ( edge ) ;
P-31	99.9962 99.9659 99.9882 99.3157 99.995 99.9509 99.9993 99.9225 93.8411 99.8074 99.678
H-31	99.3187255859375	weight _ by _ node . add ( edge ) ;
P-31	99.9962 99.9659 99.9882 99.1927 99.9951 95.6748 99.9993 99.519 98.3491 99.9985 99.6988
H-31	99.16454467773437	add ( edge , update _ weight ) ;
P-31	97.9895 99.039 99.6416 99.8464 99.9335 99.9713 99.8087 99.9972 99.8507
H-31	99.14447784423828	return weight _ by _ node ;
P-31	99.301 99.9893 99.9775 99.9897 99.5097 98.9122 99.5803
H-31	99.12294006347656	return weight _ by _ edge ;
P-31	99.301 99.9893 99.9775 99.9897 98.9456 99.3207 99.5636
H-31	99.10078938802083	return weight _ by _ node ; }
P-31	99.301 99.9893 99.9775 99.9897 99.5097 98.9122 98.841 99.4905
H-31	99.08873155381944	return weight _ by _ edge ; }
P-31	99.301 99.9893 99.9775 99.9897 98.9456 99.3207 98.883 99.4956
H-31	99.051025390625	if ( update _ weight )
P-31	99.9993 99.0988 99.9168 99.9716 99.015 97.6238
H-31	99.0380859375	add ( update _ weight ) ;
P-31	97.9895 99.2643 99.9423 99.9714 99.7571 99.9942 99.8183
H-31	99.02957916259766	if ( update _ weight ) {
P-31	99.9993 99.0988 99.9168 99.9716 99.015 98.1173 98.3859
H-31	98.96707916259766	result = update _ weight ) ;
P-31	99.7966 98.7022 99.9784 99.9631 98.8945 99.9445 99.8387
H-31	98.93122209821429	return update _ weight ) ;
P-31	98.3234 99.9741 99.9617 98.5821 99.9887 99.7924
H-31	98.82059733072917	return update _ weight ;
P-31	98.3234 99.9741 99.9617 99.0448 99.7234
H-31	97.84513854980469	i ++ ;
P-31	99.6989 99.7714 99.2296
H-31	97.76922607421875	if ( }
P-31	99.9993 94.1114 99.2342
H-31	97.76734924316406	if ( edge
P-31	99.9993 97.8564 95.4817
H-31	97.71122741699219	j ++ ;
P-31	99.622 99.9181 99.1899
S-32	}
T-32	op@@ stack . push ( token ) ; }
H-32	100.13479614257812	} else { String operator = ( String ) token ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 99.9481 99.9974 99.9118 99.9901 103.0249
H-32	100.01068522135417	} else { rp@@ ntokens . add ( ( Integer ) token ) ;
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 98.978 99.7194 99.9983 99.9287 99.9942 99.9837 103.456
H-32	99.97671508789062	} else { rp@@ ntokens . add ( token ) ;
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 98.8657 99.9916 99.9976 102.7636
H-32	99.95947265625	} else { rp@@ ntokens . add ( token ) ; }
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 98.8657 99.9916 99.9976 98.8517 103.6645
H-32	99.87340494791667	} else { rp@@ ntokens . add ( ( String ) token ) ;
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 98.978 97.624 99.9982 99.9282 99.9936 99.9952 103.4818
H-32	99.84159342447917	} else { rp@@ ntokens . add ( ( Long ) token ) ;
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 98.978 97.1683 99.9983 99.9271 99.9944 99.9901 103.4655
H-32	99.78379603794643	} else { rp@@ ntokens . add ( Integer ) token ) ;
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 96.2261 99.7885 99.8522 99.7648 99.9978 103.2417
H-32	99.75556098090277	} else { String operator = token ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 97.0238 99.4242 102.4535
H-32	99.75328650841347	} else { String operator = new String ( token ) ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 95.3076 99.9458 99.9354 99.5985 99.9574 99.9919 103.1574
H-32	99.74777221679688	} else { int operator = ( String ) token ;
P-32	99.8476 99.9016 95.0292 99.8005 99.9854 99.8314 99.7114 99.9961 99.9047 99.9908 103.0186
H-32	99.73363148082386	} * String operator = ( String ) token ;
P-32	96.4741 98.3317 99.8678 99.9835 99.585 99.9333 99.9963 99.895 99.9894 103.0578
H-32	99.72657877604166	} else { rp@@ ntokens . add ( Integer ) token ) ; }
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 96.2261 99.7885 99.8522 99.7648 99.9978 98.5572 103.61
H-32	99.72154889787946	} else { rp@@ ntokens . add ( token ) ; } }
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 98.8657 99.9916 99.9976 98.8517 97.7981 102.4949
H-32	99.71919759114583	} else { rp@@ ntokens . add ( ( int ) token ) ;
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 98.978 95.3367 99.9973 99.9052 99.9952 99.9958 103.4776
H-32	99.71677943638393	} else { rp@@ ntokens . add ( op@@ stack ) ; }
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 98.4166 99.902 97.0918 99.9996 98.888 103.6351
H-32	99.71197040264423	} else { rp@@ ntokens . add ( op@@ stack ) ;
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 98.4166 99.902 97.0918 99.9996 102.7437
H-32	99.70213216145834	} else { rp@@ ntokens . add ( ( Object ) token ) ;
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 98.978 95.0861 99.9625 99.934 99.9959 99.9964 103.477
H-32	99.68932088216145	} else { String operator = ( String ) $STRING$ ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 99.9481 99.9974 94.8407 99.7946 102.9459
H-32	99.689208984375	} else { String [ ] operator = ( String ) token ;
P-32	99.8476 99.9016 99.2901 94.2705 99.9729 99.6652 99.9874 99.5559 99.9632 99.919 99.8928 99.9899 103.4369
H-32	99.680419921875	} else { rp@@ ntokens . add ( $STRING$ ) ; }
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 95.3032 99.957 99.9813 98.9012 103.6009
H-32	99.67567661830357	} else { String operator = op@@ stack . pop ( ) ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 94.4554 99.905 99.9919 99.714 99.9813 99.9714 99.805 102.7368
H-32	99.675048828125	} else { String operator = ( String ) token + $STRING$ ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 99.9481 99.9974 99.9118 94.5681 99.4316 99.6918 103.1567
H-32	99.67273966471355	} else { rp@@ ntokens . add ( $STRING$ ) ;
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 95.3032 99.957 99.9813 102.7294
H-32	99.67233511117789	} else { String operator = ( String ) token ) ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 99.9481 99.9974 99.9118 93.9458 99.9591 103.2329
H-32	99.67145244891827	} else { rp@@ ntokens . add ( Integer ) token ;
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 96.2261 99.7885 99.8522 98.2599 103.5001
H-32	99.66319173177084	} else { String operator = ( String ) token ; while ( token
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 99.9481 99.9974 99.9118 99.9901 99.0067 99.9969 97.1031 100.2484
H-32	99.66025390625	} String operator = ( String ) token ;
P-32	93.9189 99.8893 99.988 99.7339 99.9355 99.9958 99.8924 99.988 103.3047
H-32	99.6602274576823	} else { String operator = ( Integer ) token ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 94.2753 99.9968 99.9023 99.9868 103.0165
H-32	99.65555826822917	} else { String name = ( String ) token ;
P-32	99.8476 99.9016 99.2901 94.3502 99.9862 99.7759 99.9425 99.9988 99.9087 99.9883 102.9207
H-32	99.644921875	} else { String operator = ( String ) ( Integer ) token ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 99.9481 99.9974 93.645 99.2225 99.9811 99.827 99.7885 103.5191
H-32	99.64191284179688	} else { String operator = token ) ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 97.0238 97.4288 99.9799 103.088
H-32	99.62907191685268	} else { else { String operator = ( String ) token ;
P-32	99.8476 99.9016 92.5997 99.9725 99.6846 99.9241 99.9875 99.8054 99.9475 99.9976 99.9188 99.9906 103.2733
H-32	99.62615966796875	} else { String operator = ( int ) token ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 93.9523 99.9962 99.8343 99.9905 102.9955
H-32	99.62159946986607	} else { String operator = ( String ) token + token ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 99.9481 99.9974 99.9118 94.5681 98.3291 99.9351 103.2675
H-32	99.61870783025569	} else { operator = ( Integer ) token ;
P-32	99.8476 99.9016 94.4813 99.7291 99.7122 99.1837 99.9967 99.892 99.988 103.1176
H-32	99.61043607271634	} else { rp@@ ntokens . add ( operator ) ; }
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 94.3323 99.9333 99.9981 98.913 103.6569
H-32	99.60544840494792	} else { String operator = ( Node ) token ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 93.6231 99.984 99.902 99.9908 103.0202
H-32	99.601318359375	} * else { String operator = ( String ) token ;
P-32	96.4741 96.3224 99.9898 99.2203 99.9139 99.9883 99.7788 99.9427 99.9976 99.9135 99.9918 103.3281
H-32	99.60062953404018	} else { String operator = precedence . get ( operator ) ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 93.1548 99.9939 99.9387 99.9936 99.4476 99.9959 99.9856 103.0001
H-32	99.59969075520833	} else { String operator = null ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 94.963 99.996 102.5395
H-32	99.59815562855114	} else { operator = ( String ) token ;
P-32	99.8476 99.9016 94.4813 99.7291 99.7122 99.0947 99.9976 99.9094 99.9907 102.9594
H-32	99.59164428710938	} else { rp@@ ntokens . add ( operator ) ;
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 94.3323 99.9333 99.9981 102.7339
H-32	99.5891864483173	} else { String operator = ( String ) token ; }
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 99.9481 99.9974 99.9118 99.9901 92.6652 103.4016
H-32	99.58743051382211	} else { String operator = token . pop ( ) ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 97.0238 98.9138 97.2876 99.9723 99.9953 99.8596 102.6855
H-32	99.58362833658855	} else { int operator = ( Integer ) token ;
P-32	99.8476 99.9016 95.0292 99.8005 99.9854 99.8314 97.7842 99.9967 99.8846 99.9856 103.0009
H-32	99.582275390625	} else { String operator = ( String ) element ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 99.9481 99.9974 93.4626 99.8247 103.0093
H-32	99.5798848470052	} else { String operator = ( byte ) token ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 93.5244 99.9867 99.7098 99.9708 103.0219
H-32	99.57789103190105	} * / rp@@ ntokens . add ( token ) ;
P-32	96.4741 97.8544 99.0811 99.836 99.9921 99.9781 99.9994 98.7101 99.9896 99.9977 103.0662
H-32	99.57522243923611	} else { String operator = $STRING$ ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 95.0438 99.8141 102.4204
H-32	99.57297770182292	} * / String operator = ( String ) token ;
P-32	96.4741 97.8544 97.7925 99.8769 99.9824 99.8353 99.9394 99.9957 99.8986 99.989 103.2814
H-32	99.57002766927083	} else { String token = ( String ) token ;
P-32	99.8476 99.9016 99.2901 93.3655 99.9798 99.7748 99.9524 99.999 99.9134 99.9917 102.8684
H-32	99.56756591796875	} else { String operator : ( String ) token ;
P-32	99.8476 99.9016 99.2901 99.9152 93.4047 99.528 99.9373 99.9947 99.8886 99.9882 103.1588
H-32	99.56635393415179	} else { rp@@ ntokens . add ( token ) ; break ;
P-32	99.8476 99.9016 98.5044 99.9087 99.9969 99.9874 99.9996 98.8657 99.9916 99.9976 94.6183 99.9868 102.3669
H-32	99.5653584798177	} else { op@@ stack . add ( token ) ;
P-32	99.8476 99.9016 93.3583 99.9445 99.9964 99.9401 99.9962 99.1054 99.9919 99.998 102.7482
H-32	99.56524103338069	} * int operator = ( String ) token ;
P-32	96.4741 98.2499 98.7604 99.9737 99.5643 99.2935 99.9929 99.8817 99.989 103.082
H-32	99.56344604492188	} else { char operator = ( String ) token ;
P-32	99.8476 99.9016 92.7512 99.741 99.9801 99.8124 99.7692 99.9969 99.9139 99.9907 103.1007
H-32	99.5618387858073	} else { String operator = ( Number ) token ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 93.1054 99.997 99.9094 99.9873 102.9979
H-32	99.56114959716797	} else {
P-32	99.8476 99.9016 98.5394
H-32	99.55897105823864	} else String operator = ( String ) token ;
P-32	99.8476 93.0292 99.8964 99.986 99.685 99.9413 99.9972 99.8993 99.9897 102.9211
H-32	99.54250863882211	} else { String operator = token . get ( ) ;
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 97.0238 98.9138 99.5917 97.9718 99.1811 99.7448 102.7269
H-32	99.53200857979911	} else while ( ! precedence . get ( operator ) ) {
P-32	99.8476 96.9302 99.9952 99.3192 97.0393 99.9942 99.4139 99.9947 99.4245 99.9878 99.4286 99.9718 102.1452
H-32	99.5045498934659	} else rp@@ ntokens . add ( token ) ;
P-32	99.8476 92.8545 99.9214 99.9963 99.982 99.9997 99.1675 99.991 99.9982 102.836
H-32	99.50120192307692	} else { String operator = ( String ) token ; rp@@
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 99.9481 99.9974 99.9118 99.9901 96.6972 98.2256
H-32	99.48219517299107	} else { String operator = ( String ) token ; try {
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 99.9481 99.9974 99.9118 99.9901 92.7213 99.9988 101.438
H-32	99.46983119419643	} else { String operator = ( String ) token ; while (
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 99.9481 99.9974 99.9118 99.9901 99.0067 99.9969 94.9813
H-32	99.41245680588942	} else { String operator = ( String ) token ; String
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 99.9481 99.9974 99.9118 99.9901 97.1923 96.577
H-32	99.40807233537946	} else { String operator ;
P-32	99.8476 99.9016 99.2901 99.9152 94.7508 102.1952
H-32	99.40169270833333	} else { String operator = token .
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 97.0238 98.9138 99.779
H-32	99.39546712239583	} else { add ( token ) ;
P-32	99.8476 99.9016 93.283 99.7252 99.099 99.9781 99.9979 102.771
H-32	99.39205932617188	} * String operator = token ;
P-32	96.4741 98.3317 99.8678 99.9835 98.3702 99.5955 102.5577
H-32	99.37163751775569	} else { String operator = token . get CaMeL
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 97.0238 98.9138 99.5917 99.8547 98.8054
H-32	99.35648803710937	} else if ( token != null ) {
P-32	99.8476 96.8069 99.9975 96.9335 98.6912 99.9526 99.5041 99.9795 101.896
H-32	99.3360087076823	} else { String operator = token ; while ( token
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 97.0238 99.4242 98.9581 99.9976 97.7709 99.959
H-32	99.29678344726562	} else { String operator = ( String )
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 99.8464 99.9481 99.9974 94.2772
H-32	99.2740966796875	} else if ( ( Integer ) token )
P-32	99.8476 96.8069 99.9975 96.3821 99.5044 99.9697 99.8255 99.9506 100.5007
H-32	99.27381896972656	} else { pop ( ) ;
P-32	99.8476 99.9016 92.77 99.803 99.456 99.9954 102.461
H-32	99.21306818181819	} else { String [ ] operator = ( String
P-32	99.8476 99.9016 99.2901 94.2705 99.9729 99.6652 99.9874 99.5559 99.9632 98.9335
H-32	99.20356968470982	} else { String operator =
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 95.5263
H-32	99.12248883928571	} else { continue ; }
P-32	99.8476 99.9016 91.7002 99.9281 99.9514 102.5725
H-32	99.107421875	} else { String operator = new String
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 95.3076 99.9458 97.8147
H-32	99.08022732204861	} else { String operator = get CaMeL
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 94.2348 99.9925 98.5961
H-32	98.94733428955078	} else { String operator = token
P-32	99.8476 99.9016 99.2901 99.9152 99.9881 97.0238 95.6562
H-32	98.75242309570312	} * ) ;
P-32	96.4741 97.8523 99.7062 99.7735
H-32	98.67031860351562	}
P-32	97.3847
H-32	98.56939697265625	} return rp@@ ntokens ;
P-32	93.2021 99.1099 99.8162 99.9048 99.4273
H-32	98.53287506103516	} ) ;
P-32	94.4101 99.9551 99.8102
H-32	98.43314819335937	} / ) ;
P-32	93.8437 98.7195 99.8889 99.7577
H-32	98.41396484375	} else { }
P-32	99.8476 99.9016 92.7074 99.6572
H-32	98.34942626953125	} else { rp@@
P-32	99.8476 99.9016 98.5044 93.5375
H-32	98.32013702392578	} * /
P-32	96.4741 97.8544 98.9961
H-32	98.25913696289062	} * else {
P-32	96.4741 96.3224 99.9898 98.5534
H-32	98.00117492675781	} break ;
P-32	92.41 99.978 99.6607
H-32	97.93689727783203	} / *
P-32	93.8437 98.7718 99.1761
H-32	97.93592834472656	break ; }
P-32	99.9084 99.4031 99.1184
H-32	97.90670776367188	} finally {
P-32	92.5224 99.9976 99.1508
H-32	97.81650797526042	} else
P-32	99.8476 93.646
H-32	97.76897430419922	} * }
P-32	96.4741 95.6591 98.9868
H-32	97.71230061848958	} }
P-32	94.6669 98.514
H-32	97.46561686197917	break ;
P-32	99.9084 99.1746
H-32	97.27494303385417	} *
P-32	96.4741 95.3947
S-33	if ( any ( list _ comp ( n , primes ) ) ) {
T-33	if ( all ( list _ comp ( n , primes ) ) ) {
H-33	100.00808848505434	if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( n ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 99.9803 99.9633 99.999 99.6895 99.8153 99.9967 102.6076
H-33	99.89006042480469	if ( any ( list _ comp ( n , primes ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.2859
H-33	99.7940090013587	if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( primes ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 99.9803 99.9633 99.999 95.3765 99.243 99.9943 102.5715
H-33	99.7813136888587	if ( any ( list _ comp ( n , primes ) ) ) { primes . remove ( n ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 99.9803 94.8107 99.9969 99.6668 99.8348 99.9969 102.5496
H-33	99.77284307065217	if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( value ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 99.9803 99.9633 99.999 94.3899 99.7206 99.998 102.5899
H-33	99.76561438519022	if ( any ( list _ comp ( n , primes ) ) ) { primes . set ( n ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 99.9803 95.1611 99.9726 99.7527 99.1898 99.9946 102.4239
H-33	99.7647121263587	if ( any ( list _ comp ( n , primes ) ) ) { primes . put ( n ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 99.9803 95.3955 99.999 99.6478 98.8344 99.9819 102.6152
H-33	99.7592242697011	if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( 1 ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 99.9803 99.9633 99.999 94.5209 99.2788 99.9885 102.5971
H-33	99.75449916294643	if ( any ( list _ comp ( n , primes ) ) && any ( primes ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 96.3584 99.2291 99.9617 98.1189 99.7808 99.9664 99.9458 102.4488
H-33	99.75266431725544	if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( true ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 99.9803 99.9633 99.999 93.8059 99.8398 99.9907 102.5979
H-33	99.74922511888587	if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( $NUMBER$ ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 99.9803 99.9633 99.999 94.3 99.2572 99.9905 102.6073
H-33	99.74661387567934	if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( $STRING$ ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 99.9803 99.9633 99.999 94.3935 99.1042 99.9831 102.6143
H-33	99.7462848165761	if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( 0 ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 99.9803 99.9633 99.999 95.0571 98.4762 99.9905 102.5639
H-33	99.74521272078805	if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( max ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 99.9803 99.9633 99.999 93.9581 99.4735 99.9945 102.6368
H-33	99.74190090013587	if ( any ( list _ comp ( n , false ) ) ) { primes . add ( n ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 93.7897 99.9437 99.9613 99.958 99.9612 99.1625 99.9769 99.9629 99.999 99.6918 99.8144 99.9966 102.6106
H-33	99.73527725883152	if ( any ( list _ comp ( n , 0 ) ) ) { primes . add ( n ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 94.1513 99.4246 99.9624 99.9572 99.9611 99.1658 99.9773 99.962 99.999 99.698 99.8149 99.9965 102.6064
H-33	99.72130816915761	if ( any ( list _ comp ( n , 1 ) ) ) { primes . add ( n ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 94.5035 98.7532 99.9551 99.9583 99.9617 99.16 99.9773 99.962 99.999 99.6989 99.8202 99.9966 102.6095
H-33	99.7182086447011	if ( any ( list _ comp ( n , primes ) ) ) { primes . add ( list ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 99.9803 99.9633 99.999 94.7548 98.1293 99.9972 102.5607
H-33	99.71628736413044	if ( any ( list _ comp ( n + primes ) ) ) { primes . add ( n ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 94.0671 99.4053 99.8621 99.8358 99.9491 99.9613 99.1604 99.9801 99.9621 99.999 99.6903 99.7657 99.9965 102.5958
H-33	99.7150242017663	if ( any ( list _ comp ( n , true ) ) ) { primes . add ( n ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 93.1662 99.9459 99.9621 99.958 99.9612 99.1634 99.9769 99.9631 99.999 99.6929 99.8134 99.9967 102.612
H-33	99.71292246942934	if ( any ( list _ comp ( n , null ) ) ) { primes . add ( n ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 93.3433 99.726 99.9535 99.9588 99.9615 99.1907 99.9761 99.9617 99.9991 99.681 99.8148 99.9964 102.5996
H-33	99.71290123980978	if ( any ( list _ comp ( n , list _ comp ( n , primes ) ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 93.1102 99.96 99.68 99.8938 99.8199 99.9471 99.6479 99.9607 99.9674 99.9896 99.9517 99.9554 102.2783
H-33	99.70042782738095	if ( any ( list _ comp ( n , primes ) ) || any ( primes ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 95.5252 98.8739 99.9528 98.1676 99.7812 99.958 99.9417 102.4742
H-33	99.69493001302084	if ( any ( list _ comp ( n , primes ) ) )
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 96.4314
H-33	99.69314914279514	if ( any ( list _ comp ( n , primes , primes ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 96.736 99.4914 99.8761 99.9772 99.9609 99.959 99.3727
H-33	99.67350260416667	if ( any ( list ( n , primes ) ) ) { primes . add ( n ) ;
P-33	99.9941 99.7571 99.987 99.8434 94.5452 98.3756 99.9637 99.8408 99.9638 99.977 99.9484 99.9635 99.2028 99.9732 99.962 99.9991 99.6653 99.811 99.9958 102.595
H-33	99.67076416015625	if ( list _ comp ( n , primes ) ) { primes . add ( n ) ;
P-33	99.9941 96.1544 99.8298 99.9563 99.9232 99.8917 99.9848 99.8553 99.9372 99.9077 99.9653 99.2299 99.9671 99.9643 99.999 99.6972 99.7939 99.9962 99.5886
H-33	99.67024739583333	if ( any ( list _ comp ( n , primes ) ) && any ( list ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 96.3584 99.2291 99.9617 99.3856 96.7715 99.9662 99.9504 102.4178
H-33	99.65484064275569	if ( any ( list _ comp ( n , primes ) ) ) primes . add ( n ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 94.3538 99.9764 99.961 99.9992 99.6137 99.8118 99.9978 99.7002
H-33	99.64751906622024	if ( any ( list _ comp ( primes ) ) ) { primes . add ( n ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 95.31 99.8574 99.9231 99.9335 99.9644 99.2522 99.9671 99.9623 99.999 99.6777 99.8292 99.9959 99.6258
H-33	99.63179524739583	if ( any ( list _ comp ( n , primes ) , primes ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 95.9385 99.2782 99.8762 99.9554 99.9542 99.3143
H-33	99.61490885416667	if ( any ( list _ comp ( n , n , primes ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 94.9865 99.8821 99.7542 99.9579 99.9798 99.9643 99.9609 99.3477
H-33	99.60944475446429	if ( list _ comp ( n , primes ) ) { primes . add ( n ) ; }
P-33	99.9941 96.1544 99.8298 99.9563 99.9232 99.8917 99.9848 99.8553 99.9372 99.9077 99.9653 99.2299 99.9671 99.9643 99.999 99.6972 99.7939 99.9962 98.8178 99.1539
H-33	99.60463579963235	if ( ! any ( list _ comp ( n , primes ) ) ) {
P-33	99.9941 95.6585 99.1827 99.9891 99.827 99.9872 99.953 99.9871 99.9389 99.9908 99.8564 99.9519 99.9788 99.9639 99.9613 99.2785
H-33	99.59402901785714	if ( any ( list _ comp ( list _ comp ( n , primes ) ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 93.6609 99.9259 99.8912 99.9811 99.8099 99.9856 99.8495 99.9641 99.9665 99.9787 99.9362 99.9564 99.2684
H-33	99.59205264136905	if ( any ( list _ comp ( n ) ) ) { primes . add ( n ) ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 94.2108 99.7386 99.9448 99.968 99.2709 99.9699 99.9642 99.999 99.6767 99.8281 99.9962 99.6224
H-33	99.59044300426136	if ( any ( list _ comp ( primes ) ) ) { primes . add ( n ) ; }
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 95.31 99.8574 99.9231 99.9335 99.9644 99.2522 99.9671 99.9623 99.999 99.6777 99.8292 99.9959 98.7351 99.2828
H-33	99.58773803710938	if ( any ( list _ comp ( n , primes ) ) ) { return false ; }
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 95.3771 98.5463 99.9981 99.8094 99.0688
H-33	99.58287464488636	if ( ( list _ comp ( n , primes ) ) ) { primes . add ( n ) ;
P-33	99.9941 95.1337 98.8556 99.8154 99.953 99.9441 99.8984 99.987 99.8538 99.9503 99.9659 99.4719 99.9634 99.2154 99.9733 99.9625 99.9991 99.7028 99.8106 99.9967 99.597
H-33	99.57689208984375	if ( any ( list _ comp ( n , primes ) ) ) { return true ; }
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 95.3771 98.2273 99.998 99.7928 99.1875
H-33	99.56582406850961	if ( list _ comp ( n , primes ) ) {
P-33	99.9941 96.1544 99.8298 99.9563 99.9232 99.8917 99.9848 99.8553 99.9372 99.9077 99.9653 99.1765
H-33	99.56341552734375	if ( any ( list _ comp ( n , 1 , primes ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 94.5035 99.6453 99.5511 99.9437 99.9804 99.959 99.9582 99.3653
H-33	99.56173706054688	if ( any ( list _ comp ( n , primes ) ) ) { primes . add (
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 99.9803 99.9633 99.999 93.1578
H-33	99.55698852539062	if ( any ( list _ comp ( n , primes ) ) ) { return primes ; }
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 95.3771 98.2187 99.7174 99.6152 99.2562
H-33	99.54917506167763	if ( any ( list _ comp ( n , primes ) ) ) { break ; }
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 93.4054 99.9174 99.6839 99.4726
H-33	99.54645096628289	if ( any ( list ( list _ comp ( n , primes ) ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 94.5452 99.1272 99.6064 99.954 99.9836 99.9282 99.9888 99.8404 99.968 99.9677 99.9767 99.93 99.9562 99.2491
H-33	99.54185084292763	if ( any ( list _ comp ( n , primes ) ) ) { continue ; }
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 93.2651 99.7259 99.8178 99.5312
H-33	99.53437151227679	if ( any ( list _ comp ( primes ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 95.31 99.8574 99.9231 99.9335 99.9644 99.1926
H-33	99.5340576171875	if ( ( any ( list _ comp ( n , primes ) ) ) ) {
P-33	99.9941 95.1337 99.0271 99.9534 99.8354 99.9767 99.9553 99.9893 99.9361 99.9919 99.8613 99.9556 99.9715 99.8026 99.2466 99.9582 99.2448
H-33	99.53230365953948	if ( any ( list _ comp ( n , primes ) ) ) { return primes ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 95.3771 98.2187 99.7174 98.8455
H-33	99.53205309416118	if ( any ( list _ comp ( n , primes ) ) ) { return false ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 95.3771 98.5463 99.9981 98.2325
H-33	99.528076171875	Array CaMeL List < Integer > primes = new Array CaMeL List < Integer > ( ) ;
P-33	99.9807 99.9864 99.9855 99.481 99.9828 99.6227 99.978 99.9253 99.8765 99.9977 99.974 99.9737 99.7213 99.9745 99.9931 99.9273 99.9991 99.1457
H-33	99.52753448486328	int n = any ( list _ comp ( n , primes ) ) ;
P-33	98.9631 99.9822 98.8234 99.8652 99.8745 99.9872 99.9606 99.9916 99.9457 99.9933 99.8636 99.9634 99.9759 99.7885 98.9909
H-33	99.52155219184027	if ( any ( n , primes ) ) { primes . add ( n ) ;
P-33	99.9941 99.7571 99.987 94.4163 99.7744 99.8056 99.8697 99.951 99.9632 99.1576 99.962 99.9606 99.9989 99.6875 99.7351 99.9957 99.5926
H-33	99.52016194661458	if ( any ( list _ comp ( n , 0 , primes ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 94.1513 99.1593 99.6257 99.9331 99.9811 99.958 99.958 99.3615
H-33	99.51920358758224	if ( any ( list _ comp ( n , primes ) ) ) { return true ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 95.3771 98.2273 99.998 98.3074
H-33	99.51531982421875	try { if ( any ( list _ comp ( n , primes ) ) ) {
P-33	99.9965 99.3914 99.9947 99.6897 99.9881 99.8508 99.9895 99.961 99.985 99.9509 99.9914 99.8724 99.9605 99.9805 99.9516 99.9663 98.9876
H-33	99.51219346788194	if ( any ( list _ comp ( n , max , primes ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 93.3377 99.8147 99.613 99.9463 99.9828 99.9614 99.9598 99.3687
H-33	99.5110222311581	if ( any ( list _ comp ( n , primes , primes ) ) )
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 96.736 99.4914 99.8761 99.9772 99.9609 96.5424
H-33	99.5077896118164	if ( any ( list _ comp ( n , false ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 93.7897 99.9437 99.9613 99.958 99.9612 99.2757
H-33	99.50222296463816	if ( any ( first ( list _ comp ( n , primes ) ) ) ) {
P-33	99.9941 99.7571 99.987 93.5213 99.5706 99.3205 99.9025 99.9427 99.9772 99.9326 99.9825 99.8448 99.9629 99.9633 99.9714 99.9203 99.9547 99.2578
H-33	99.49862331814236	if ( any ( list _ comp ( n , primes ) , 0 ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 95.9385 96.9356 99.8972 99.9507 99.9544 99.2435
H-33	99.49831136067708	if ( any ( list _ comp ( n , primes , 0 ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 96.736 96.0368 99.8369 99.9811 99.9598 99.9584 99.3571
H-33	99.49759250217014	if ( any ( list _ comp ( n , primes ) ) ) { break ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 93.4054 99.9174 98.6789
H-33	99.49748992919922	if ( any ( list _ comp ( n , 0 ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 94.1513 99.4246 99.9624 99.9572 99.9611 99.2685
H-33	99.49474334716797	if ( any ( primes ) ) { primes . add ( n ) ;
P-33	99.9941 99.7571 99.987 94.8871 99.5576 99.912 99.9648 99.1924 99.9649 99.9608 99.999 99.6488 99.7661 99.9952 99.5494
H-33	99.49318440755208	if ( this . any ( list _ comp ( n , primes ) ) ) {
P-33	99.9941 93.7571 99.7887 98.8099 99.9691 99.8828 99.9823 99.9491 99.9839 99.9502 99.9906 99.88 99.9591 99.9715 99.9495 99.9652 99.3144
H-33	99.49249267578125	while ( any ( list _ comp ( n , primes ) ) ) {
P-33	99.9932 99.7115 99.9837 99.8667 99.9921 99.9607 99.9922 99.9398 99.9919 99.8703 99.9504 99.9822 99.9588 99.9575 99.3441
H-33	99.49117238898026	if ( any ( any ( list _ comp ( n , primes ) ) ) ) {
P-33	99.9941 99.7571 99.987 92.4088 99.9335 99.728 99.9509 99.9589 99.9852 99.9393 99.9902 99.8532 99.9658 99.9672 99.9824 99.9271 99.9559 99.2682
H-33	99.48592122395833	if ( list _ comp ( list _ comp ( n , primes ) ) ) {
P-33	99.9941 96.1544 99.8298 99.9563 99.9232 96.4109 99.9496 99.9357 99.9884 99.8747 99.9866 99.8603 99.9595 99.9707 99.9281 99.9639 99.2809
H-33	99.48493109809027	if ( any ( list _ comp ( n , primes ) ) ) return false ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 93.3111 98.8778 99.9982 99.5493
H-33	99.48287160773026	if ( any ( list _ comp ( n , primes ) ) ) { primes ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 93.4619 99.7189 98.8595
H-33	99.48206244574652	if ( any ( list _ comp ( primes , n , primes ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 95.31 97.8718 99.3017 99.9047 99.7809 99.9429 99.9784 99.9643 99.9597 99.3624
H-33	99.48109944661458	if ( any ( list _ comp ( n , primes , n ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 96.736 96.274 99.2949 99.9807 99.9689 99.9619 99.34
H-33	99.47910563151042	if ( any ( list _ comp ( n , primes ) ) ) { primes ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 99.179 94.0203 98.4695
H-33	99.4779116981908	if ( any ( list _ comp ( n , primes ) ) ) { return ; }
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 95.3771 96.7276 99.7304 99.2903
H-33	99.4774169921875	if ( any ( list _ comp ( n , 1 ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 94.5035 98.7532 99.9551 99.9583 99.9617 99.272
H-33	99.47374725341797	if ( any ( list _ comp ( n + primes ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 94.0671 99.4053 99.8621 99.8358 99.9491 99.9613 99.2556
H-33	99.4724982766544	if ( any ( list _ comp ( n , primes ) ) ) { }
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 99.9626 93.5033 98.5741
H-33	99.46879577636719	if ( any ( list _ comp ( n , true ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 93.1662 99.9459 99.9621 99.958 99.9612 99.2724
H-33	99.46454216452206	if ( any ( list _ comp ( n , primes ] ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 92.7579 99.897 99.9806 99.9536 99.961 99.2438
H-33	99.46415710449219	if ( any ( list _ comp ( n , null ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 93.3433 99.726 99.9535 99.9588 99.9615 99.2484
H-33	99.45731847426471	if ( any ( list _ comp ( n , primes ) , primes ) )
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 95.9385 99.2782 99.8762 99.9554 96.6707
H-33	99.4567642211914	if ( list ( list _ comp ( n , primes ) ) ) {
P-33	99.9941 96.1544 97.7087 99.3349 99.6341 99.9558 99.9834 99.9059 99.9892 99.8518 99.9576 99.9775 99.8691 99.9653 99.2474
H-33	99.45504940257354	if ( any ( list _ comp ( n , primes ) ) ) break ;
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 99.9914 99.8683 99.9521 99.979 99.9582 92.2782 99.9395 99.5255
H-33	99.45450846354167	if ( ( list _ comp ( n , primes ) ) ) {
P-33	99.9941 95.1337 98.8556 99.8154 99.953 99.9441 99.8984 99.987 99.8538 99.9503 99.9659 99.4719 99.9634 99.2514
H-33	99.45355987548828	if ( any ( list _ comp ( 0 , primes ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 93.2676 99.9739 99.6133 99.9246 99.9718 99.9506 99.9598 99.2952
H-33	99.45337632123162	if ( any ( list _ comp ( - n , primes ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 93.395 99.2028 99.8427 99.8321 99.9419 99.9689 99.9495 99.9608 99.3134
H-33	99.44499860491071	if ( any ( list _ comp ( n ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 99.9875 99.9434 94.2108 99.7386 99.9448 99.968 99.1242
H-33	99.44358825683594	if ( all ( list _ comp ( n , primes ) ) ) {
P-33	99.9941 92.7107 99.9671 99.8035 99.9913 99.959 99.984 99.9388 99.9905 99.8669 99.9528 99.9746 99.9547 99.9634 99.2667
H-33	99.42904459635416	result = any ( list _ comp ( n , primes ) ) ;
P-33	99.469 98.9712 99.961 99.8444 99.9869 99.9602 99.99 99.9363 99.9917 99.8579 99.961 99.9743 99.9719 99.6291
H-33	99.42420247395833	if ( any ( list _ comp [ n , primes ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 93.6985 99.9174 99.7055 99.7658 99.8674 99.9586 99.9643 99.1727
H-33	99.39076334635416	if ( any ( list _ comp . n , primes ) ) {
P-33	99.9941 99.7571 99.987 99.8434 99.993 99.9586 93.8541 98.8721 99.9732 99.8261 99.9216 99.9436 99.963 99.1949
H-33	99.37152971540179	if ( any ( list ( n , primes ) ) ) {
P-33	99.9941 99.7571 99.987 99.8434 94.5452 98.3756 99.9637 99.8408 99.9638 99.977 99.9484 99.9635 99.2623
H-33	99.36872209821429	if ( ! value ) { primes . add ( n ) ;
P-33	99.9941 95.6585 98.1683 99.567 99.9547 99.2799 99.9486 99.9593 99.9992 99.6671 99.7019 99.9928 99.4911
H-33	99.36599496694711	int n = list _ comp ( n , primes ) ;
P-33	98.9631 99.9822 97.9652 99.7043 99.959 99.9763 99.8377 99.982 99.8369 99.9565 99.9658 99.1575
H-33	99.36306326729911	if ( ! list _ comp ( n , primes ) ) {
P-33	99.9941 95.6585 97.2038 99.9144 99.9435 99.9294 99.8414 99.979 99.8373 99.9408 99.9623 99.9628 99.1359
H-33	99.31465287642045	if ( any ( n , primes ) ) {
P-33	99.9941 99.7571 99.987 94.4163 99.7744 99.8056 99.8697 99.951 99.9632 99.1632
H-33	99.29702758789062	if ( list _ comp ( n , primes ) )
P-33	99.9941 96.1544 99.8298 99.9563 99.9232 99.8917 99.9848 99.8553 99.9372 99.9077 96.3505
H-33	99.2008944424716	if ( any ( max , primes ) ) {
P-33	99.9941 99.7571 99.987 93.8768 99.376 99.5873 99.7907 99.9518 99.9628 99.1467
S-34	while ( Math . abs ( x - approx ) > epsilon ) {
T-34	while ( Math . abs ( x - approx * approx ) > epsilon ) {
H-34	99.8589111328125	while ( Math . abs ( x - approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.1278
H-34	99.7902734375	while ( Math . abs ( x - approx ) > epsilon && Math . abs ( x - approx ) > epsilon )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 95.6629 99.7689 99.9954 99.9096 99.9998 99.7838 99.928 99.9584 99.9684 99.7282 99.7625 99.9878 101.4701
H-34	99.7812732514881	while ( Math . abs ( x - approx ) > epsilon ) { approx = x / approx ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 99.8108 97.7236 98.9929 102.6254
H-34	99.7396824048913	while ( Math . abs ( x - approx ) > epsilon ) { approx = x / approx + approx ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 99.8108 97.7236 99.2226 97.7914 99.7583 103.4521
H-34	99.73962890625	while ( Math . abs ( x - approx ) > epsilon ) { approx = x - approx + x / approx ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 97.4406 99.8378 99.5768 98.4845 99.9158 98.8189 99.7324 103.4301
H-34	99.738330078125	while ( Math . abs ( x - approx ) > epsilon ) { approx = x / approx + x / approx ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 99.8108 97.7236 99.2226 98.3607 99.8744 99.0777 99.7197 103.415
H-34	99.73723038383152	while ( Math . abs ( x - approx ) > epsilon ) { approx = x - approx + approx ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 97.4406 99.8378 99.5768 97.8967 99.5365 103.4143
H-34	99.7348046875	while ( Math . abs ( x - approx ) > epsilon || Math . abs ( x - approx ) > epsilon )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 94.4678 99.7725 99.9959 99.9116 99.9998 99.7819 99.9381 99.9583 99.9721 99.6454 99.6113 99.9887 101.4937
H-34	99.730224609375	while ( Math . abs ( ( Math . abs ( x - approx ) ) > epsilon ) ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 96.2125 97.8625 99.9963 99.9393 99.9995 99.8476 99.9578 99.966 99.9843 99.8826 99.0618 99.8827 99.9866 99.8533 99.9265 102.3573
H-34	99.7284923735119	while ( Math . abs ( x - approx ) > epsilon ) { approx = x - approx ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 97.4406 99.8378 98.3264 102.4397
H-34	99.70923913043478	while ( ( Math . abs ( x - approx ) ) > epsilon ) { approx = x / approx ;
P-34	99.9943 97.22 99.638 99.9955 99.887 99.9996 99.8443 99.975 99.9668 99.9767 99.6363 99.7893 99.9239 99.9854 99.9429 99.2789 99.9719 98.482 99.8179 97.6725 99.0893 103.4834
H-34	99.708173828125	while ( Math . abs ( x - approx ) > epsilon ) { approx = ( approx + x / approx ) ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 95.5205 98.0038 99.9323 99.2374 99.9771 99.1608 99.981 99.3294 103.5502
H-34	99.7071875	while ( Math . abs ( x - approx ) > epsilon ) { approx = x / approx ; } return approx ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 99.8108 97.7236 98.9929 98.215 99.5377 99.1611 99.4121 103.5724
H-34	99.7069091796875	while ( Math . abs ( Math . abs ( x - approx ) - approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 96.2269 99.9957 99.9448 99.9997 99.8455 99.962 99.9654 99.9734 97.2311 99.2186 99.976 99.8201 99.9176 99.9851 99.9263 102.215
H-34	99.705205078125	while ( Math . abs ( x - approx ) > epsilon && Math . abs ( x - approx ) >= epsilon )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 95.6629 99.7689 99.9954 99.9096 99.9998 99.7838 99.928 99.9584 99.9684 97.6736 99.6798 99.987 101.4818
H-34	99.70023890904018	while ( Math . abs ( x - approx ) > epsilon )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 96.9892
H-34	99.699267578125	while ( Math . abs ( x - approx ) > epsilon ) { approx = x / ( approx + $NUMBER$ ) ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 99.8108 95.7187 99.2837 99.7841 98.7815 99.5577 99.8224 103.4691
H-34	99.69757690429688	while ( Math . abs ( Math . abs ( x - approx ) ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 96.2269 99.9957 99.9448 99.9997 99.8455 99.962 99.9654 99.9734 99.7673 99.8539 99.9244 99.9854 99.9325 99.2261
H-34	99.695087890625	while ( Math . abs ( x - approx ) >= epsilon && Math . abs ( x - approx ) > epsilon )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 97.3687 99.9272 95.6997 99.783 99.9952 99.9254 99.9998 99.7887 99.9301 99.959 99.9664 99.7256 99.7666 99.987 101.4743
H-34	99.69380696614583	while ( Math . abs ( x - approx ) >= epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 97.3687 99.9272 99.9806 99.9415 99.1087
H-34	99.6904827615489	while ( Math . abs ( x - approx ) > epsilon ) { approx = x / $NUMBER$ . $NUMBER$ ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 99.8108 99.7846 97.1158 99.8925 97.3607 102.6625
H-34	99.688154296875	while ( Math . abs ( x - approx ) > epsilon && Math . abs ( x - approx ) <= epsilon )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 95.6629 99.7689 99.9954 99.9096 99.9998 99.7838 99.928 99.9584 99.9684 97.16 99.6702 99.9899 101.5755
H-34	99.68657370174633	while ( ( Math . abs ( x - approx ) ) > epsilon ) {
P-34	99.9943 97.22 99.638 99.9955 99.887 99.9996 99.8443 99.975 99.9668 99.9767 99.6363 99.7893 99.9239 99.9854 99.9429 99.1552
H-34	99.68276579483695	while ( Math . abs ( x - approx ) > epsilon ) { approx = x - approx + $NUMBER$ ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 97.4406 99.8378 99.5768 98.7844 97.4245 103.3857
H-34	99.68204345703126	while ( false ) { while ( Math . abs ( x - approx ) > epsilon ) {
P-34	99.9943 94.9867 99.968 99.9869 97.9664 99.9938 99.7772 99.9904 99.8467 99.9993 99.8342 99.9816 99.9682 99.94 99.8367 99.941 99.9816 99.9533 101.9533
H-34	99.678671875	while ( Math . abs ( x - approx ) > epsilon ) { approx = x - approx + $NUMBER$ . $NUMBER$ ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 97.4406 99.8378 99.5768 98.7844 98.2767 99.8544 98.428 103.5144
H-34	99.67748046875	while ( Math . abs ( x - approx ) > epsilon ) { approx = x / approx + $NUMBER$ . $NUMBER$ ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 99.8108 97.7236 99.2226 98.9384 98.041 99.8475 98.5783 103.5209
H-34	99.67313816236413	while ( ( Math . abs ( x - approx ) ) > epsilon ) { approx = x - approx ;
P-34	99.9943 97.22 99.638 99.9955 99.887 99.9996 99.8443 99.975 99.9668 99.9767 99.6363 99.7893 99.9239 99.9854 99.9429 99.2789 99.9719 98.482 97.441 99.753 98.7086 103.33
H-34	99.67060546875	while ( Math . abs ( x - approx ) > epsilon && Math . abs ( x - approx ) > $NUMBER$ )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 95.6629 99.7689 99.9954 99.9096 99.9998 99.7838 99.928 99.9584 99.9684 99.7282 96.8797 99.9336 101.4154
H-34	99.6705078125	while ( Math . abs ( x - approx ) > epsilon && Math . abs ( x - approx ) < epsilon )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 95.6629 99.7689 99.9954 99.9096 99.9998 99.7838 99.928 99.9584 99.9684 96.8143 99.6217 99.9874 101.5314
H-34	99.66963123139881	while ( Math . abs ( x - approx ) >= epsilon ) { approx = x / approx ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 97.3687 99.9272 99.9806 99.9415 99.298 99.9683 98.365 99.8167 97.7033 98.9986 102.6142
H-34	99.6689453125	while ( Math . abs ( x - approx ) > epsilon && Math . abs ( x - approx ) > approx )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 95.6629 99.7689 99.9954 99.9096 99.9998 99.7838 99.928 99.9584 99.9684 99.7282 96.7375 99.9782 101.4714
H-34	99.66532759232955	while ( Math . abs ( x - approx ) > epsilon ) { approx = x / approx ) ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 99.8108 97.7236 96.3104 99.7027 102.8359
H-34	99.6634521484375	while ( true ) { while ( Math . abs ( x - approx ) > epsilon ) {
P-34	99.9943 94.6343 99.9843 99.9868 97.9186 99.9934 99.7924 99.9902 99.8388 99.9992 99.8318 99.9822 99.9688 99.9398 99.8391 99.9422 99.9818 99.9546 101.9548
H-34	99.66251953125	while ( Math . abs ( x - approx ) > epsilon || Math . abs ( x - approx ) >= epsilon )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 94.4678 99.7725 99.9959 99.9116 99.9998 99.7819 99.9381 99.9583 99.9721 97.8957 99.5402 99.9865 101.5095
H-34	99.66175130208333	while ( Math . abs ( x - approx ) <= epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 96.8363 99.916 99.9855 99.9356 99.1727
H-34	99.6581522623698	while ( Math . abs ( x - approx ) > epsilon ) { approx = 0 . max ( approx ) ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 99.7106 99.993 93.966 99.9477 98.2144 99.32 99.8229 102.8092
H-34	99.65326334635417	if ( Math . abs ( x - approx ) > epsilon ) {
P-34	99.9968 99.6808 99.9919 99.6852 99.9995 99.8517 99.9697 99.9632 99.9303 99.7827 99.8974 99.9805 99.8204 98.982
H-34	99.65113467261905	while ( Math . abs ( x - approx ) > epsilon ) { approx = x / $NUMBER$ ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 99.8108 99.7846 94.2938 102.5306
H-34	99.64955832741477	while ( Math . abs ( x - approx ) > epsilon ) { double approx = x / approx ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 95.7092 99.7821 99.9817 99.5017 99.8412 97.3121 99.0236 102.3828
H-34	99.6476818266369	while ( Math . abs ( x - approx ) > epsilon ) { approx = x + approx ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 96.2776 98.8726 98.6525 102.5448
H-34	99.639892578125	while ( Math . abs ( x - approx ) > epsilon ) { approx = x / 0 . $NUMBER$ ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 99.8108 96.3997 99.8331 99.8623 96.9565 102.601
H-34	99.63072102864584	while ( Math . abs ( x - approx ) < epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 96.4549 99.8851 99.9765 99.9382 99.1259
H-34	99.6103848544034	while ( Math . abs ( x - approx ) > epsilon ) { approx = x / approx ; }
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 99.8108 97.7236 98.9929 98.215 100.4321
H-34	99.59268188476562	while ( Math . abs ( Math . abs ( x - approx ) > epsilon ) ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 96.2269 99.9957 99.9448 99.9997 99.8455 99.962 99.9654 99.9734 97.5618 99.8827 99.9822 99.9139 99.9336 99.3176
H-34	99.59103628305289	while ( Math . abs ( approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 97.1146 99.3551 99.8609 99.8946 99.9771 99.9479 99.1847
H-34	99.58788299560547	while ( ! Math . abs ( x - approx ) > epsilon ) {
P-34	99.9943 95.659 99.5186 99.9931 99.8447 99.9995 99.8236 99.983 99.9671 99.9549 99.9001 99.9355 99.9825 99.934 99.1744
H-34	99.58534869025735	while ( ( Math . abs ( x - approx ) > epsilon ) ) {
P-34	99.9943 97.22 99.638 99.9955 99.887 99.9996 99.8443 99.975 99.9668 99.9767 98.4056 99.904 99.9836 99.2259 99.9381 99.2549
H-34	99.58477376302083	while ( Math . abs ( x - approx ) == epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 95.7319 99.8476 99.9774 99.9369 99.1975
H-34	99.5751953125	while ( Math . abs ( x - approx ) > epsilon ) { approx = 0 . $NUMBER$ ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 99.7106 99.993 99.8666 94.0151 99.4824
H-34	99.57480340254934	while ( Math . abs ( Math . abs ( x - approx ) ) > epsilon )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 96.2269 99.9957 99.9448 99.9997 99.8455 99.962 99.9654 99.9734 99.7673 99.8539 99.9244 99.9854 97.1283
H-34	99.56781560724431	while ( Math . abs ( x - approx ) > epsilon ) { approx = x - approx ; }
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 97.4406 99.8378 98.3264 98.1631 100.4701
H-34	99.56772030101104	while ( Math . abs ( ( x - approx ) > epsilon ) ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 96.2125 99.2972 99.9053 99.9439 99.9789 99.1382 99.8845 99.9816 99.7494 99.935 99.2761
H-34	99.55959903492646	while ( Math . abs ( ( x - approx ) ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 96.2125 99.2972 99.9053 99.9439 99.9789 98.9805 99.8334 99.9269 99.9845 99.9375 99.1642
H-34	99.55733449835526	while ( ( Math . abs ( x - approx ) - approx ) > epsilon ) {
P-34	99.9943 97.22 99.638 99.9955 99.887 99.9996 99.8443 99.975 99.9668 99.9767 97.0705 99.5083 99.9606 99.7727 99.9075 99.9859 99.9339 99.2114
H-34	99.5556640625	while ( Math . abs ( Math . abs ( x - approx ) ) >= epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 96.2269 99.9957 99.9448 99.9997 99.8455 99.962 99.9654 99.9734 99.7673 97.0714 99.8921 99.9855 99.9312 99.2037
H-34	99.55325137867646	while ( Math . abs ( x - approx - approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 94.8025 99.6948 99.9486 99.8045 99.9256 99.9809 99.9401 99.1836
H-34	99.549169921875	while ( Math . abs ( approx + approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 97.1146 98.655 99.3046 99.8998 99.8367 99.907 99.9821 99.9431 99.2462
H-34	99.54054361979166	while ( Math . abs ( approx - approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 97.1146 98.1863 99.6279 99.9533 99.8411 99.9127 99.9793 99.9459 99.1985
H-34	99.54044835707721	while ( ( Math . abs ( x - approx ) ) >= epsilon ) {
P-34	99.9943 97.22 99.638 99.9955 99.887 99.9996 99.8443 99.975 99.9668 99.9767 99.6363 97.3774 99.8846 99.9839 99.9401 99.1266
H-34	99.53784897748162	while ( Math . Math . abs ( x - approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 94.1935 99.9937 99.8675 99.9995 99.8256 99.9697 99.9689 99.9567 99.8212 99.9399 99.9799 99.9443 99.138
H-34	99.5322265625	while ( ( Math . abs ( x - approx ) ) > epsilon )
P-34	99.9943 97.22 99.638 99.9955 99.887 99.9996 99.8443 99.975 99.9668 99.9767 99.6363 99.7893 99.9239 99.9854 96.9419
H-34	99.53200073242188	while ( Math . abs ( Math . abs ( x - approx ) ) <= epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 96.2269 99.9957 99.9448 99.9997 99.8455 99.962 99.9654 99.9734 99.7673 96.5536 99.8902 99.9878 99.9232 99.2558
H-34	99.53188688858695	while ( Math . abs ( x - approx ) > epsilon ) { approx = 0 . $NUMBER$ . $NUMBER$ ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 99.7106 99.993 99.8666 95.9362 99.8554 96.3344 99.5257
H-34	99.52999441964286	while ( Math . abs ( x - approx ) > epsilon ) { approx = 0 . x ;
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 99.7106 99.993 94.0066 98.8017 99.6066
H-34	99.52587890625	if ( Math . abs ( x - approx ) > epsilon )
P-34	99.9968 99.6808 99.9919 99.6852 99.9995 99.8517 99.9697 99.9632 99.9303 99.7827 99.8974 99.9805 97.3658
H-34	99.52503255208333	while ( Math . min ( x , approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 96.1658 99.9989 99.3486 99.3929 99.7971 99.8811 99.6728 99.8908 99.9845 99.9307 99.2674
H-34	99.52253069196429	while ( Math . abs ( x - approx ) >= epsilon )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 97.3687 99.9272 99.9806 96.9586
H-34	99.520751953125	while ( Math . abs ( Math . abs ( x - approx ) ) > epsilon ) { approx =
P-34	99.9943 99.8187 99.9904 99.804 99.9996 96.2269 99.9957 99.9448 99.9997 99.8455 99.962 99.9654 99.9734 99.7673 99.8539 99.9244 99.9854 99.9325 99.1999 99.9721 95.559
H-34	99.52015380859375	while ( Math . abs ( x - approx ) > epsilon ) { approx = x / $NUMBER$
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 98.2422 99.8108 99.7846 94.5537
H-34	99.51944173177084	while ( Math . abs ( x - $NUMBER$ ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 95.0089 99.8313 99.7663 99.9276 99.9812 99.9407 99.1777
H-34	99.51815456814236	while ( Math . abs ( abs ( x - approx ) ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 93.7957 99.9511 99.7009 99.9441 99.9654 99.9742 99.7577 99.8354 99.9288 99.9827 99.9321 99.21
H-34	99.51566808363971	while ( Math . abs ( x - approx + approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 94.5022 99.3258 99.9348 99.8156 99.9178 99.9828 99.937 99.2256
H-34	99.51536458333334	while ( Math . abs ( x / approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 95.2646 99.432 99.9453 99.8778 99.9297 99.9816 99.9408 99.1827
H-34	99.5150390625	while ( Math . ceil ( x - approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 94.5635 99.9986 99.7686 99.9778 99.9629 99.9671 99.8526 99.9328 99.9826 99.9441 99.2299
H-34	99.51301879882813	while ( Math . abs ( x - approx ) > epsilon ) { approx = 0 . MAX
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 99.9397 99.9814 99.9416 99.2876 99.9682 99.7106 99.993 94.4001 98.1451
H-34	99.51255170036765	while ( ( Math . abs ( x - approx ) ) <= epsilon ) {
P-34	99.9943 97.22 99.638 99.9955 99.887 99.9996 99.8443 99.975 99.9668 99.9767 99.6363 96.8362 99.8812 99.988 99.9356 99.1974
H-34	99.50736490885417	while ( Math . max ( x , approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 95.6946 99.9991 99.3073 99.427 99.8512 99.8859 99.8397 99.9009 99.9836 99.9326 99.2437
H-34	99.49974772135417	if ( Math . abs ( x - approx ) >= epsilon ) {
P-34	99.9968 99.6808 99.9919 99.6852 99.9995 99.8517 99.9697 99.9632 99.9303 97.5062 99.8812 99.9799 99.8027 98.9904
H-34	99.49662272135417	while ( Math . abs ( x - approx ) != epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 94.4323 99.8566 99.9731 99.9398 99.1671
H-34	99.49261474609375	while ( Math . abs ( x - approx ) <= epsilon )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 96.8363 99.916 99.9855 97.0786
H-34	99.4794921875	while ( Math . round ( x - approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 94.1651 99.9994 99.6915 99.9858 99.9643 99.9668 99.8223 99.9342 99.9833 99.9447 99.1899
H-34	99.46485188802083	while ( Math . abs ( x - approx >= epsilon ) ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 94.9457 98.9299 99.9595 99.8528 99.9402 99.22
H-34	99.46466471354167	while ( Math . abs ( x - approx ) > $NUMBER$ ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 94.0939 99.8983 99.9379 99.1466
H-34	99.46306966145833	if ( Math . abs ( x - approx ) <= epsilon ) {
P-34	99.9968 99.6808 99.9919 99.6852 99.9995 99.8517 99.9697 99.9632 99.9303 96.973 99.8926 99.9838 99.7854 98.9754
H-34	99.4598388671875	while ( Math . abs ( x - approx ) > approx ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 99.8129 94.021 99.9596 99.9386 99.0852
H-34	99.4598388671875	while ( Math . abs ( x - approx > epsilon ) ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 94.5252 99.2412 99.9548 99.863 99.9429 99.2458
H-34	99.45926920572917	while ( Math . Double ( x - approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 94.0415 99.9972 99.5704 99.9647 99.9634 99.9561 99.8157 99.9352 99.9859 99.9454 99.1684
H-34	99.45893205915179	while ( Math . abs ( x - approx ) < epsilon )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 96.4549 99.8851 99.9765 97.0283
H-34	99.45804036458334	while ( Math . min ( x - approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 96.1658 99.9989 99.3486 98.3285 99.9466 99.7545 99.7437 99.9304 99.9791 99.9408 99.1889
H-34	99.456201171875	while ( Math . abs ( epsilon - approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 93.9725 99.871 99.8183 99.9757 99.827 99.9155 99.9752 99.9443 99.1949
H-34	99.454345703125	while ( Math . abs ( x + approx ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 93.9 99.9431 99.9483 99.8194 99.9342 99.9841 99.9389 99.1712
H-34	99.43594360351562	while ( ( x - approx ) > epsilon ) {
P-34	99.9943 97.22 98.2126 99.5209 99.9361 99.9273 99.7668 99.8921 99.9813 99.9483 99.0901
H-34	99.40715680803571	while ( Math . abs ( x - approx ) == epsilon )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 95.7319 99.8476 99.9774 97.0629
H-34	99.38568584735577	while ( Math . min ( x , approx ) ) {
P-34	99.9943 99.8187 99.9904 96.1658 99.9989 99.3486 99.3929 99.7971 99.8811 98.5877 99.9596 99.3373
H-34	99.38377028245192	while ( Math . abs ( $NUMBER$ ) > epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 96.1413 97.6756 99.8292 99.8599 99.979 99.9483 99.2073
H-34	99.3770282451923	while ( Math . abs ( x - approx ) ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 99.8273 99.982 99.9667 99.9555 93.5529 99.969 99.2992
H-34	99.37019856770833	while ( Math . abs ( approx ) > epsilon )
P-34	99.9943 99.8187 99.9904 99.804 99.9996 97.1146 99.3551 99.8609 99.8946 99.9771 96.8914
H-34	99.3541729266827	while ( Math . abs ( approx ) >= epsilon ) {
P-34	99.9943 99.8187 99.9904 99.804 99.9996 97.1146 99.3551 96.847 99.8561 99.9746 99.9483 99.1599
H-34	99.31650797526042	if ( ( x - approx ) > epsilon ) {
P-34	99.9968 97.6346 99.2379 99.5977 99.9214 99.8688 99.7014 99.8038 99.9788 99.8357 98.9542
S-35	return new Array CaMeL List ( ) ;
T-35	Array CaMeL List empty _ set = new Array CaMeL List < Array CaMeL List > ( ) ; empty _ set . add ( new Array CaMeL List ( ) ) ; return empty _ set ;
H-35	99.98777940538194	return new Array CaMeL List < Array CaMeL List < Array CaMeL List > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 98.6002 99.9938 99.7 99.9715 102.7662
H-35	99.92892937911184	return new Array CaMeL List < Array CaMeL List < Array CaMeL List > ( $NUMBER$ ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 98.6002 99.9938 98.5321 99.9503 99.9942 102.8307
H-35	99.88499049136513	return new Array CaMeL List < Array CaMeL List < Array CaMeL List > ( ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 98.6002 99.9938 99.7 99.9715 98.3124 102.4886
H-35	99.83941040039062	return new Array CaMeL List < Array CaMeL List < Array CaMeL List < String > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 99.5353 95.8761 99.9785 99.9708 99.7925 99.8788 103.008
H-35	99.8309814453125	return new Array CaMeL List < Array CaMeL List < Array CaMeL List > ( $NUMBER$ ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 98.6002 99.9938 98.5321 99.9503 99.9942 98.1532 102.6474
H-35	99.8101806640625	return new Array CaMeL List < Array CaMeL List < Array CaMeL List < Long > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 99.5353 95.5284 99.808 99.9824 99.7208 99.8698 103.0106
H-35	99.80310821533203	return new Array CaMeL List < Array CaMeL List > ( $NUMBER$ ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 97.805 99.998 98.7844 99.957 99.9979 98.5762 102.4428
H-35	99.80036272321429	return new Array CaMeL List < Array CaMeL List < Array CaMeL List < String > ( $NUMBER$ ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 99.5353 95.8761 99.9785 99.9708 98.1373 99.9057 99.9617 103.6938
H-35	99.79993896484375	return new Array CaMeL List < Array CaMeL List < Array CaMeL List < ? > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 99.5353 96.8073 98.2538 99.9844 99.7166 99.9457 103.0074
H-35	99.7935791015625	return new Array CaMeL List < Array CaMeL List < ? > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 95.8262 99.4527 99.9961 99.6442 99.9735 102.7738
H-35	99.78958129882812	return new Array CaMeL List < Array CaMeL List < String > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 95.1683 99.9715 99.9968 99.7335 99.9643 102.768
H-35	99.76236979166667	return new Array CaMeL List < Array CaMeL List < Linked CaMeL List > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 95.551 99.9912 99.9798 98.7544 99.9937 99.6869 99.9771 102.7577
H-35	99.75724487304687	return new Array CaMeL List < Array CaMeL List < Array CaMeL List < Integer > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 99.5353 94.3313 99.9538 99.9835 99.6987 99.8843 103.0096
H-35	99.75703938802083	return new Array CaMeL List < Array CaMeL List < Array CaMeL List >> ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 94.605 99.9936 99.5395 99.9873 102.7529
H-35	99.75598907470703	return new Array CaMeL List < Array CaMeL List < Long > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 94.9834 99.7026 99.9978 99.6414 99.9632 102.7765
H-35	99.74872436523438	return new Array CaMeL List < Array CaMeL List < Array CaMeL List < Hashtable > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 99.5353 94.374 99.6576 99.9947 99.6977 99.9366 103.0304
H-35	99.7443488625919	return new Array CaMeL List < Array CaMeL List < ? > ( $NUMBER$ ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 95.8262 99.4527 99.9961 98.6629 99.8607 99.9944 102.8301
H-35	99.7423828125	return new Array CaMeL List < Array CaMeL List < Array CaMeL List < Object > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 99.5353 94.0053 99.9415 99.9525 99.7645 99.8942 103.0061
H-35	99.74028862847223	return new Array CaMeL List < Array CaMeL List < Array CaMeL List ( $NUMBER$ ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 97.8203 96.5413 99.8666 99.5646 102.7842
H-35	99.7399966591283	return new Array CaMeL List < Array CaMeL List < Array CaMeL List >> ( $NUMBER$ ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 94.605 99.9936 98.9187 99.9674 99.9965 102.8303
H-35	99.73961530412946	return new Array CaMeL List < Array CaMeL List > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 97.805 99.998 99.5995 99.9914 99.6723
H-35	99.7255923622533	return new Array CaMeL List < Array CaMeL List < Array CaMeL List ( ) + 1 ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 97.8203 97.9628 98.1659 99.5066 99.7717 102.8107
H-35	99.72492532169117	return new Array CaMeL List < Array CaMeL List < String > ( $NUMBER$ ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 95.1683 99.9715 99.9968 98.4114 99.927 99.9932 102.8246
H-35	99.72199164496527	return new Array CaMeL List < Linked CaMeL List < Array CaMeL List > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 95.1087 99.9923 99.9804 99.6852 99.6964 99.9881 99.9798 98.65 99.9944 99.7117 99.9768 102.7509
H-35	99.720458984375	return new Array CaMeL List < Array CaMeL List < Array CaMeL List < static > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 99.5353 93.9625 99.3856 99.9884 99.8059 99.9727 103.0105
H-35	99.71950812088816	return new Array CaMeL List < Array CaMeL List < Linked CaMeL List > ( $NUMBER$ ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 95.551 99.9912 99.9798 98.7544 99.9937 98.586 99.963 99.9951 102.8255
H-35	99.71809895833333	return new Linked CaMeL List < Array CaMeL List < Array CaMeL List > ( ) ;
P-35	99.9111 94.915 99.9962 99.9797 99.8041 99.832 99.9959 99.9804 99.7239 99.7472 99.9877 99.9814 98.6355 99.994 99.8194 99.9785 102.746
H-35	99.71734149639423	return new Array CaMeL List < Array CaMeL List ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 97.7874 99.6921 99.8625 99.6951
H-35	99.71486529181985	return new Array CaMeL List < Array CaMeL List < Long > ( $NUMBER$ ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 94.9834 99.7026 99.9978 98.675 99.9296 99.9929 102.8405
H-35	99.70791786595395	return new Array CaMeL List < Array CaMeL List < Array CaMeL List > ( 0 ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 98.6002 99.9938 94.7155 99.5884 99.9907 102.8135
H-35	99.70464324951172	return new Array CaMeL List < Array CaMeL List < Integer > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 93.9437 99.9404 99.9978 99.6264 99.9661 102.7692
H-35	99.70309244791666	return new Array CaMeL List < Array CaMeL List > ( $NUMBER$ ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 97.805 99.998 98.7844 99.957 99.9979 99.7157
H-35	99.6909243935033	return new Array CaMeL List < new Array CaMeL List < Array CaMeL List > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 94.8939 99.7722 99.9931 99.9805 99.8407 99.7326 99.9868 99.9815 98.2047 99.9983 99.4797 99.982 102.8004
H-35	99.68846130371094	return new Array CaMeL List < Array CaMeL List < class > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 93.9582 99.5549 99.9884 99.7509 99.9749 102.7572
H-35	99.68755026424633	return new Array CaMeL List < Array CaMeL List < String > ( ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 95.1683 99.9715 99.9968 99.7335 99.9643 98.3016 102.5214
H-35	99.68590023643092	return new Array CaMeL List < Array CaMeL List < Array CaMeL List > ( a ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 98.6002 99.9938 94.2133 99.6806 99.9882 102.8078
H-35	99.68567612591912	return new Array CaMeL List < Array CaMeL List < ? > ( ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 95.8262 99.4527 99.9961 99.6442 99.9735 98.2754 102.4577
H-35	99.68223063151042	return new Array CaMeL List < Array CaMeL List < Array CaMeL List ( ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 97.8203 97.9628 99.0863 98.2248 102.4377
H-35	99.67283871299342	return new Array CaMeL List < Array CaMeL List < Linked CaMeL List > ( ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 95.551 99.9912 99.9798 98.7544 99.9937 99.6869 99.9771 98.3493 102.4696
H-35	99.67015075683594	return new Array CaMeL List < Array CaMeL List < Hashtable > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 94.1229 99.1657 99.9987 99.6176 99.9759 102.8109
H-35	99.66899028577302	return new Array CaMeL List < Array CaMeL List < Array CaMeL List >> ( ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 94.605 99.9936 99.5395 99.9873 98.3691 102.4678
H-35	99.66841634114583	return new Array CaMeL List < Array CaMeL List < Array CaMeL List ( size ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 97.8203 95.9224 99.6867 99.112 102.7418
H-35	99.66203308105469	return new Array CaMeL List < Array CaMeL List < Object > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 93.2501 99.8895 99.9928 99.6944 99.9671 102.7679
H-35	99.6597900390625	return new Array CaMeL List < Array CaMeL List < void > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 93.0468 99.8927 99.9869 99.8581 99.954 102.7873
H-35	99.6587142944336	return new Array CaMeL List < Array CaMeL List < static > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 93.8752 99.1318 99.9956 99.7382 99.9837 102.7841
H-35	99.65693359375	return new Array CaMeL List < Array CaMeL List > ( ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 97.805 99.998 99.5995 99.9914 98.7013 99.4704
H-35	99.65234375	return new Array CaMeL List < Array CaMeL List < Long > ( ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 94.9834 99.7026 99.9978 99.6414 99.9632 98.2631 102.5075
H-35	99.64023844401042	return new Array CaMeL List < Array CaMeL List < ? > ( $NUMBER$ ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 95.8262 99.4527 99.9961 98.6629 99.8607 99.9944 98.1545 102.546
H-35	99.63335503472223	return new Array CaMeL List ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 97.9285 99.7118 99.9949 99.4222
H-35	99.63069370814732	return sub@@ sequences ( a , b , k - 1 ) ;
P-35	95.7267 99.9875 99.9015 98.587 99.7109 99.379 99.8009 99.8532 99.8526 99.9721 99.5684 99.9918 102.6007
H-35	99.62126813616071	return new Array CaMeL List < Array CaMeL List ( ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 97.7874 99.6921 99.8625 98.6379 99.4294
H-35	99.61846051897321	return new Array CaMeL List < Array CaMeL List ( $NUMBER$ ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 97.7874 97.9502 99.9328 99.9839 99.7159
H-35	99.61309455422794	return new Array CaMeL List < Array CaMeL List < Array CaMeL List ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 99.7424 99.747 99.9881 99.9822 97.8203 97.9628 99.0863 99.8049
H-35	99.58941040039062	return new Array CaMeL List ( ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 97.9285 99.7118 99.9949 99.1648 99.4513
H-35	99.53843383789062	return new Array CaMeL List ( $NUMBER$ ) ;
P-35	99.9111 99.8611 99.9964 99.9766 97.9285 98.4293 99.9427 99.9989 99.4422
H-35	99.53185221354167	return new Array CaMeL List < Array CaMeL List ( $NUMBER$ ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 97.7874 97.9502 99.9328 99.9839 98.5768 99.4584
H-35	99.50438343394886	return new Array CaMeL List ( $NUMBER$ ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 97.9285 98.4293 99.9427 99.9989 99.1386 99.4675
H-35	99.5031005859375	return new Array CaMeL List < Array CaMeL List ( ) + 1 ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 97.7874 99.6921 96.7244 99.4254 99.9032 99.7256
H-35	99.46415571732955	return new Array CaMeL List > ( $NUMBER$ ) ;
P-35	99.9111 99.8611 99.9964 99.9766 95.9246 99.9979 99.0607 99.9407 99.9985 99.5405
H-35	99.44434204101563	return new Array CaMeL List > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 95.9246 99.9979 99.4216 99.9963 99.4602
H-35	99.42018345424107	return new Array CaMeL List < Linked CaMeL List > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 95.1087 99.9923 99.9804 98.0684 99.998 99.6173 99.993 99.6434
H-35	99.41523881392045	return new Array CaMeL List > ( ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 95.9246 99.9979 99.4216 99.9963 99.1125 99.4719
H-35	99.41481526692708	return new Array CaMeL List > ( $NUMBER$ ) ; }
P-35	99.9111 99.8611 99.9964 99.9766 95.9246 99.9979 99.0607 99.9407 99.9985 98.9855 99.4271
H-35	99.40606689453125	return new Array CaMeL List < Array CaMeL List ( 0 ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 97.7874 95.3584 99.5914 99.98 99.6792
H-35	99.40049525669643	return new Linked CaMeL List < Array CaMeL List > ( ) ;
P-35	99.9111 94.915 99.9962 99.9797 99.8041 99.832 99.9959 99.9804 97.8939 99.9981 99.7709 99.9938 99.6384
H-35	99.39570835658482	return new Array CaMeL List < Array CaMeL List >> ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 99.8293 99.9958 99.9821 93.2304 99.9931 99.369 99.9924 99.6665
H-35	99.36024827223558	return new Array CaMeL List < Linked CaMeL List ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 95.1087 99.9923 99.9804 97.8516 99.7152 99.8997 99.6541
H-35	99.3425762469952	return new Linked CaMeL List < Array CaMeL List ( ) ;
P-35	99.9111 94.915 99.9962 99.9797 99.8041 99.832 99.9959 99.9804 97.8193 99.7775 99.881 99.6634
H-35	99.3330790201823	return new Array CaMeL List < String > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 93.3638 99.8703 99.999 99.6505 99.9892 99.6429
H-35	99.31521606445312	return new Array CaMeL List < class > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 94.2485 98.7896 99.9938 99.6257 99.9885 99.6551
H-35	99.2903544108073	return new Array CaMeL List < Long > ( ) ;
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 93.6846 99.1738 99.9989 99.4936 99.9878 99.6643
H-35	99.166064453125	return new Array CaMeL List ( 0 ) ;
P-35	99.9111 99.8611 99.9964 99.9766 97.9285 95.0649 99.6234 99.9987 99.4023
H-35	99.15122680664062	return Collections . empty CaMeL List ( ) ;
P-35	95.752 99.9919 96.6509 99.9287 99.9763 99.9959 99.9958 99.996 99.3272
H-35	99.1232666015625	return new Linked CaMeL List ( ) ; }
P-35	99.9111 94.915 99.9962 99.9797 98.0305 99.8447 99.9967 99.2409 99.4202
H-35	99.10348171657986	return new Linked CaMeL List ( ) ;
P-35	99.9111 94.915 99.9962 99.9797 98.0305 99.8447 99.9967 99.3597
H-35	99.04407416449652	List < Array CaMeL List ( ) ;
P-35	99.9023 99.7775 99.996 99.9859 97.9478 98.351 99.8341 99.372
H-35	98.95872497558594	return sub@@ sequences ( ) ; }
P-35	95.7267 99.9875 99.9015 97.6869 99.9325 99.0259 99.5114
H-35	98.94978550502232	return sub@@ sequences ( ) ;
P-35	95.7267 99.9875 99.9015 97.6869 99.9325 99.516
H-35	98.94367065429688	return null ; }
P-35	95.8656 99.9963 99.4377 99.5212
H-35	98.90637969970703	return sub@@ sequences ( a ) ;
P-35	95.7267 99.9875 99.9015 98.587 97.6821 99.9843 99.4844
H-35	98.89315032958984	return sub@@ sequences ( $NUMBER$ ) ;
P-35	95.7267 99.9875 99.9015 97.5027 98.693 99.9861 99.4501
H-35	98.86503601074219	if ( k == 0 ) {
P-35	99.9962 99.1251 99.7431 99.6655 99.8644 99.8357 98.5303
H-35	98.84858921595982	return new Array CaMeL List <
P-35	99.9111 99.8611 99.9964 99.9766 99.8385 92.4588
H-35	98.72614288330078	return null ;
P-35	95.8656 99.9963 99.1451
H-35	98.62679036458333	throw new > 1 ;
P-35	99.8669 99.8935 99.8025 99.8173 99.4025
H-35	98.59274291992188	return sub@@ sequences ; }
P-35	95.7267 99.9875 97.1986 99.2294 99.5168
H-35	98.53176879882812	return empty CaMeL List ;
P-35	92.7979 99.9411 99.9701 99.2066 99.3774
H-35	98.5249735514323	return Collections . null ;
P-35	95.752 99.9919 97.2409 99.0137 99.2538
H-35	98.4355224609375	return sub@@ sequences ;
P-35	95.7267 99.9875 97.1986 99.3673
H-35	98.40965576171875	return ) ; }
P-35	93.2257 99.9153 99.446 99.5637
H-35	98.40150146484375	return 0 ; }
P-35	93.1357 99.9889 99.4524 99.533
H-35	98.376318359375	return $NUMBER$ ; }
P-35	92.9846 99.982 99.4701 99.5474
H-35	98.325830078125	return false ; }
P-35	92.626 99.9981 99.5923 99.5153
H-35	98.13424072265624	return true ; }
P-35	91.681 99.998 99.5611 99.5336
H-35	98.120947265625	List ( ) ;
P-35	97.2177 98.1529 99.8592 99.145
H-35	98.04330444335938	return ) ;
P-35	93.2257 99.9153 99.1346
H-35	98.03683471679688	return 0 ;
P-35	93.1357 99.9889 99.1252
H-35	97.99120330810547	return $NUMBER$ ;
P-35	92.9846 99.982 99.1007
H-35	97.85372924804688	return false ;
P-35	92.626 99.9981 98.8933
H-35	97.67819213867188	return list ;
P-35	91.7232 99.7257 99.3663
S-36	result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;
T-36	result = String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) + result ;
H-36	99.92931547619048	result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 99.6648 99.9108 99.9776 99.9988 99.9997 99.9989 99.9812 99.9952 99.9952 99.9842 99.8662
H-36	99.80474532277961	result = String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;
P-36	99.9791 97.1432 99.9911 99.9514 99.9998 99.9989 99.9994 99.7535 99.8785 99.9724 99.9985 99.9998 99.9989 99.9779 99.995 99.9952 99.9814 99.8402
H-36	99.7539306640625	return result + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;
P-36	99.7589 99.673 99.4657 99.9806 99.938 99.9999 99.9987 99.9994 99.7478 99.8067 99.9717 99.9986 99.9998 99.9991 99.9815 99.9955 99.9941 99.9906 99.9067
H-36	99.72589111328125	result = result + String . value CaMeL Of ( b ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 97.2971 99.9246 99.9806 99.8173
H-36	99.72250802176339	result = result + String . value CaMeL Of ( alphabet ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 99.6648 97.5211 99.9797 99.8065
H-36	99.71013532366071	result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( 0 ) ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 99.6648 99.9108 99.9776 99.9988 99.9997 99.9989 95.381 99.9937 99.9904 99.9806 99.8738
H-36	99.70764741443452	result = alphabet + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;
P-36	99.9791 96.6609 98.8794 99.1363 99.9844 99.9385 99.9999 99.9988 99.9992 99.7489 99.9074 99.9699 99.9987 99.9998 99.9988 99.9821 99.9949 99.9956 99.9838 99.8683
H-36	99.64278738839286	result = result + String . value CaMeL Of ( String . value CaMeL Of ( b ) ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 94.8863 99.9924 99.9567 99.9999 99.9994 99.9996 98.7221 99.9636 99.9617 99.9883 99.8853
H-36	99.63760536595395	result += String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;
P-36	94.7909 99.2136 99.984 99.9386 99.9999 99.9986 99.9991 99.7134 99.8552 99.973 99.9985 99.9998 99.9989 99.981 99.9951 99.9957 99.9809 99.8625
H-36	99.63587297712054	result = result + alphabet . char CaMeL At ( i ) ;
P-36	99.9791 99.7818 99.8487 96.6588 99.2348 99.9215 99.9982 99.9976 99.9994 99.9708 99.9877 99.9573 99.7307
H-36	99.62569754464286	result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( num ) ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 99.6648 99.9108 99.9776 99.9988 99.9997 99.9989 93.6138 99.9839 99.9953 99.9834 99.87
H-36	99.62050083705357	result = result + String . value CaMeL Of ( alphabet . char CaMeL At ( b ) ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 99.6648 99.9108 99.9776 99.9988 99.9997 99.9989 93.4906 99.9869 99.9962 99.9865 99.8768
H-36	99.61879185267857	result = result + String . to CaMeL String ( alphabet . char CaMeL At ( i ) ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 95.7321 99.9976 99.0857 99.9996 98.5283 99.6733 99.9615 99.9979 99.9998 99.9989 99.977 99.995 99.9906 99.9899 99.8681
H-36	99.61163330078125	result = result + String . value CaMeL Of ( num ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 95.9365 99.7619 99.9721 99.7494
H-36	99.61112670898437	result = String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ; }
P-36	99.9791 97.1432 99.9911 99.9514 99.9998 99.9989 99.9994 99.7535 99.8785 99.9724 99.9985 99.9998 99.9989 99.9779 99.995 99.9952 99.9814 97.7284 98.0442
H-36	99.60971069335938	result = result + String . value CaMeL Of ( alphabet . to CaMeL String ( ) ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 99.6648 99.9108 94.6333 99.9935 99.0861 99.9988 99.9901 99.9288 99.9824 99.8627
H-36	99.58983090049342	result = result + String . value CaMeL Of ( alphabet . substring ( i ) ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 99.6648 99.9108 94.5246 99.9993 99.9067 99.279 99.9421 99.9787 99.8579
H-36	99.5895751953125	return alphabet + String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;
P-36	97.289 99.0395 99.2779 99.9837 99.9219 99.9999 99.999 99.9995 99.7856 99.7968 99.9663 99.9985 99.9998 99.999 99.9817 99.9951 99.9951 99.9901 99.9008
H-36	99.58840460526316	result = result + String . decode ( alphabet . char CaMeL At ( i ) ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 93.8612 99.9701 99.5446 99.8461 99.9493 99.9983 99.9997 99.9987 99.9766 99.9948 99.9839 99.9857 99.8717
H-36	99.58582414899554	result = result + String . value CaMeL Of ( result ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 95.3605 99.8969 99.9837 99.8175
H-36	99.57918972439236	result = result + String . value CaMeL Of ( b ) ; } return result ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 97.2971 99.9246 99.9806 97.3362 99.511 99.5864 99.7964 99.8502
H-36	99.577001953125	result = result + $STRING$ ; result = result + String . value CaMeL Of ( b ) ;
P-36	99.9791 99.7818 99.8487 96.8919 99.3908 98.103 99.9802 99.8189 99.7544 99.7416 99.9819 99.9323 99.9999 99.9982 99.9987 98.7133 99.9482 99.983 99.8583
H-36	99.57526991102431	result = result + String . value CaMeL Of ( alphabet ) ; } return result ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 99.6648 97.5211 99.9797 97.3195 99.5178 99.591 99.7702 99.8476
H-36	99.57522743626645	result = String . value CaMeL Of ( alphabet . char CaMeL At ( 0 ) ) ;
P-36	99.9791 97.1432 99.9911 99.9514 99.9998 99.9989 99.9994 99.7535 99.8785 99.9724 99.9985 99.9998 99.9989 95.6202 99.9938 99.9909 99.9772 99.8469
H-36	99.57177734375	result = result + String . value CaMeL Of ( value ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 95.2097 99.8719 99.975 99.8053
H-36	99.56002807617188	result = result . to CaMeL String ( ) + String . value CaMeL Of ( b ) ;
P-36	99.9791 99.7818 97.8091 99.3322 99.9164 99.2669 99.9984 99.9854 98.0399 99.4066 99.9797 99.9262 99.9999 99.9981 99.9991 98.2049 99.9429 99.975 99.8233
H-36	99.54041205512152	result = result + alphabet . char CaMeL At ( i ) ; } return result ;
P-36	99.9791 99.7818 99.8487 96.6588 99.2348 99.9215 99.9982 99.9976 99.9994 99.9708 99.9877 99.9573 97.767 99.5607 99.6375 99.7413 99.8494
H-36	99.53809356689453	result = result + result + String . value CaMeL Of ( b ) ;
P-36	99.9791 99.7818 99.8487 96.3343 99.0691 99.7638 99.9842 99.9326 99.9999 99.9983 99.9991 98.3242 99.9409 99.9805 99.8373
H-36	99.53087022569444	return String . value CaMeL Of ( alphabet . char CaMeL At ( i ) ) ;
P-36	95.361 99.9831 99.9549 99.9998 99.999 99.9997 99.7914 99.7786 99.9708 99.9986 99.9996 99.9992 99.9788 99.9951 99.9931 99.9915 99.8891
H-36	99.52320620888158	result = result + String . value CaMeL Of ( to _ base ( num ) ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 94.9413 99.874 99.1854 99.7863 99.0259 99.1949 99.9496 99.983 99.8574
H-36	99.51988002232143	result = result + String . value CaMeL Of ( i ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 94.5011 99.8967 99.9658 99.772
H-36	99.516650390625	return result + String . value CaMeL Of ( alphabet . char CaMeL At ( 0 ) ) ;
P-36	99.7589 99.673 99.4657 99.9806 99.938 99.9999 99.9987 99.9994 99.7478 99.8067 99.9717 99.9986 99.9998 99.9991 95.2405 99.993 99.99 99.9873 99.912
H-36	99.51620822482639	result = $STRING$ ; result = result + String . value CaMeL Of ( b ) ;
P-36	99.9791 96.0458 99.4046 98.4778 99.9808 99.8031 99.8748 99.7681 99.9838 99.9374 99.9999 99.9985 99.9988 98.4144 99.9483 99.9828 99.858
H-36	99.51212350945724	result = result + String . value CaMeL Of ( alphabet . char [ i ] ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 99.6648 99.9108 99.9776 92.4641 99.8626 99.8874 99.9835 99.9849 99.8518
H-36	99.50933516652961	result = result + String . value CaMeL Of ( to _ base ( b ) ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 94.9413 99.874 99.1854 99.7863 98.2029 99.8179 99.8649 99.9859 99.8757
H-36	99.50757553998162	result = result + String . value CaMeL Of ( ( int ) b ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 94.5949 99.3912 99.9888 98.7593 99.9255 99.9926 99.8334
H-36	99.50567626953125	result = result + result ; result = result + String . value CaMeL Of ( b ) ;
P-36	99.9791 99.7818 99.8487 96.3343 99.272 97.8827 99.9778 99.8073 99.7431 99.6752 99.9811 99.9255 99.9999 99.9982 99.9988 98.2878 99.9448 99.9846 99.855
H-36	99.50552188648896	result = result . append ( alphabet . char CaMeL At ( i ) ) ;
P-36	99.9791 99.7818 97.8091 96.2626 99.9978 98.2258 99.9609 99.949 99.9986 99.9997 99.9995 99.9802 99.9941 99.9882 99.992 99.8394
H-36	99.50447387695313	result = num / b ; result = result + String . value CaMeL Of ( alphabet ) ;
P-36	99.9791 95.5451 99.5034 99.8418 99.8651 98.878 99.9757 99.8344 99.8581 99.7689 99.9816 99.9444 99.9999 99.9984 99.999 99.6448 97.8089 99.9827 99.8442
H-36	99.50284517728366	return result + String . value CaMeL Of ( alphabet ) ;
P-36	99.7589 99.673 99.4657 99.9806 99.938 99.9999 99.9987 99.9994 99.7478 98.2377 99.9777 99.8874
H-36	99.50021362304688	result = alphabet . char CaMeL At ( i ) ; } return result ;
P-36	99.9791 96.6609 99.3971 99.731 99.9978 99.9929 99.999 99.9666 99.9816 99.9616 97.8488 99.5129 99.6455 99.6418 99.8511
H-36	99.49366590711806	result = result + String . value CaMeL Of ( num ) ; } return result ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 95.9365 99.7619 99.9721 97.3512 99.5112 99.5824 99.7736 99.8541
H-36	99.49181450737848	result = result + String . value CaMeL Of ( alphabet . length ( ) ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 99.6648 99.9108 92.5296 99.9146 99.996 99.8913 99.9817 99.8212
H-36	99.48908148871527	result = result + String . value CaMeL Of ( alphabet . trim ( ) ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 99.6648 99.9108 92.9526 99.9978 99.9921 99.3194 99.9835 99.8396
H-36	99.48719787597656	result = result + result + String . value CaMeL Of ( alphabet ) ;
P-36	99.9791 99.7818 99.8487 96.3343 99.0691 99.7638 99.9842 99.9326 99.9999 99.9983 99.9991 99.4203 98.0381 99.9829 99.8273
H-36	99.48563058035714	result = result + String . value CaMeL Of ( $STRING$ ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 94.2678 99.6297 99.9515 99.8069
H-36	99.48465728759766	result = result + String . value CaMeL Of ( num / b ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 95.9365 97.2728 99.7867 99.8409 99.9877 99.787
H-36	99.46792263454861	result = result + String . value CaMeL Of ( result ) ; } return result ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 95.3605 99.8969 99.9837 97.3364 99.4802 99.5778 99.795 99.849
H-36	99.461181640625	result = result + String . value CaMeL Of ( b ) ; result = result ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 97.2971 99.9246 99.9806 96.9288 99.9772 99.8348 97.6365 99.5788
H-36	99.45932006835938	result = result + String . value CaMeL Of ( b + 1 ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 97.2971 96.7634 98.3959 99.9558 99.9614 99.8326
H-36	99.45932006835938	result = result + $STRING$ + String . value CaMeL Of ( b ) ;
P-36	99.9791 99.7818 99.8487 96.8919 98.7169 97.8429 99.9835 99.9431 99.9999 99.9982 99.9992 98.7561 99.9483 99.9761 99.8478
H-36	99.45903015136719	result = result + String . value CaMeL Of ( num % b ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 95.9365 96.8088 99.7857 99.8882 99.9914 99.7909
H-36	99.45808919270833	result = result + String . value CaMeL Of ( value ) ; } return result ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 95.2097 99.8719 99.975 97.3291 99.4833 99.5766 99.8075 99.8495
H-36	99.4527099609375	result = result + String . value CaMeL Of ( b ) ; }
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 97.2971 99.9246 99.9806 97.3362 98.1092
H-36	99.45151192801339	result = result + String . to CaMeL String ( b ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 95.7321 99.9976 99.0857 99.9996 98.6607 99.8424 99.9813 99.8229
H-36	99.45109288832721	result = result . append ( String . value CaMeL Of ( alphabet ) ) ;
P-36	99.9791 99.7818 97.8091 96.2626 99.9978 99.1773 99.9931 99.9391 99.9999 99.999 99.9996 99.4948 98.6849 99.8734 99.9725 99.8685
H-36	99.4501724243164	result = result + String . value CaMeL Of ( num + b ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 95.9365 97.2329 99.2038 99.901 99.9907 99.7949
H-36	99.44905853271484	result = result . char CaMeL At ( i ) ; } return result ;
P-36	99.9791 99.7818 97.8091 97.36 99.9976 99.9653 99.9992 99.9408 99.9701 99.9613 97.8302 99.522 99.6301 99.7518 99.8505
H-36	99.44773763020834	result = result + String . value CaMeL Of ( alphabet ) ; }
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 99.6648 97.5211 99.9797 97.3195 98.0879
H-36	99.44642740885416	result = result . to CaMeL String ( ) ; } return result ;
P-36	99.9791 99.7818 97.8091 99.3322 99.9164 99.2669 99.9984 99.9854 99.8271 97.4189 99.3786 99.5785 99.7369 99.8513
H-36	99.44577026367188	result = result + String . value CaMeL Of ( b , i ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 97.2971 95.9552 99.1261 99.7952 99.9871 99.8288
H-36	99.43590545654297	result = result + String . value CaMeL Of ( b + $STRING$ ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 97.2971 96.7634 98.0952 99.8503 99.9811 99.8445
H-36	99.43304802389706	result = result + String . value CaMeL Of ( b ) ; return result ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 97.2971 99.9246 99.9806 95.2707 99.6285 99.616 99.5012
H-36	99.41870880126953	result = result = result + String . value CaMeL Of ( b ) ;
P-36	99.9791 99.7818 94.0284 99.7097 99.8743 99.8283 99.9851 99.942 99.9999 99.9987 99.9991 98.0041 99.9344 99.9776 99.821
H-36	99.41687774658203	result = result + result + String . value CaMeL Of ( num ) ;
P-36	99.9791 99.7818 99.8487 96.3343 99.0691 99.7638 99.9842 99.9326 99.9999 99.9983 99.9991 96.5576 99.8166 99.9765 99.7927
H-36	99.41574532645089	result = result + String . value CaMeL Of ( 1 ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 93.3595 99.6723 99.8676 99.7782
H-36	99.41322326660156	result = String . value CaMeL Of ( alphabet ) ; } return result ;
P-36	99.9791 97.1432 99.9911 99.9514 99.9998 99.9989 99.9994 99.7535 97.8128 99.9766 97.5609 99.4704 99.6027 99.6881 99.8478
H-36	99.39771321614583	result = result + alphabet . char CaMeL At ( i ) ; }
P-36	99.9791 99.7818 99.8487 96.6588 99.2348 99.9215 99.9982 99.9976 99.9994 99.9708 99.9877 99.9573 97.767 98.0272
H-36	99.39297921316964	result = alphabet + String . value CaMeL Of ( alphabet ) ;
P-36	99.9791 96.6609 98.8794 99.1363 99.9844 99.9385 99.9999 99.9988 99.9992 99.7489 97.5492 99.98 99.8112
H-36	99.38792067307692	result = result + $STRING$ . to CaMeL String ( ) ;
P-36	99.9791 99.7818 99.8487 96.8919 97.8768 99.0844 99.9348 99.2113 99.9993 99.9433 99.9012 99.7547
H-36	99.38706752232143	result = result + String . to CaMeL String ( num ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 95.7321 99.9976 99.0857 99.9996 98.3466 99.3786 99.961 99.7188
H-36	99.386962890625	return result + alphabet . char CaMeL At ( i ) ;
P-36	99.7589 99.673 97.5887 98.4378 99.884 99.9988 99.9964 99.9993 99.97 99.9843 99.9716 99.8951
H-36	99.38437124399039	result = result . to CaMeL String ( ) + $STRING$ ;
P-36	99.9791 99.7818 97.8091 99.3322 99.9164 99.2669 99.9984 99.9854 98.0399 98.6713 99.6315 99.749
H-36	99.37041364397321	result = result + String . value CaMeL Of ( last ) ;
P-36	99.9791 99.7818 99.8487 99.7712 99.9822 99.9465 99.9999 99.9986 99.9991 93.1184 99.2106 99.9718 99.7421
H-36	99.3702392578125	result = result + Integer . to CaMeL String ( b ) ;
P-36	99.9791 99.7818 99.8487 94.3096 99.9717 99.1297 99.9945 99.2235 99.9992 99.3522 99.9327 99.9869 99.8381
H-36	99.3697040264423	return result + String . value CaMeL Of ( b ) ;
P-36	99.7589 99.673 99.4657 99.9806 99.938 99.9999 99.9987 99.9994 96.3398 99.9103 99.9799 99.8896
H-36	99.34754435221355	result = alphabet . char CaMeL At ( i ) ;
P-36	99.9791 96.6609 99.3971 99.731 99.9978 99.9929 99.999 99.9666 99.9816 99.9616 96.6671
H-36	99.34219125600961	result = alphabet . char CaMeL At ( i ) ; }
P-36	99.9791 96.6609 99.3971 99.731 99.9978 99.9929 99.999 99.9666 99.9816 99.9616 97.8488 98.0962
H-36	99.32505446213942	result = result + result . to CaMeL String ( ) ;
P-36	99.9791 99.7818 99.8487 96.3343 97.5296 99.3219 99.7236 99.2293 99.9989 99.9935 99.8793 99.7699
H-36	99.32398399939903	return result + String . value CaMeL Of ( result ) ;
P-36	99.7589 99.673 99.4657 99.9806 99.938 99.9999 99.9987 99.9994 95.766 99.8893 99.981 99.889
H-36	99.31049138849431	result = result . to CaMeL String ( ) ;
P-36	99.9791 99.7818 97.8091 99.3322 99.9164 99.2669 99.9984 99.9854 99.8271 96.6832
H-36	99.30991617838542	result = result . substring ( 0 , i ) ;
P-36	99.9791 99.7818 97.8091 96.9794 99.9991 98.7035 99.8663 99.3229 99.7792 99.9725 99.6903
H-36	99.29945882161458	result = to _ base ( num / b ) ;
P-36	99.9791 95.8474 99.9901 98.818 99.7013 99.1608 99.0431 99.8394 99.6482 99.969 99.7612
H-36	99.26920572916667	result = result . char CaMeL At ( i ) ;
P-36	99.9791 99.7818 97.8091 97.36 99.9976 99.9653 99.9992 99.9408 99.9701 99.9613 96.6301
H-36	99.26767985026042	result = String . value CaMeL Of ( alphabet ) ;
P-36	99.9791 97.1432 99.9911 99.9514 99.9998 99.9989 99.9994 99.7535 97.8128 99.9766 96.7705
H-36	99.22779430042614	result = result + $STRING$ ; } return result ;
P-36	99.9791 99.7818 99.8487 96.8919 99.3908 97.4888 99.2729 99.5679 99.6023 99.8458
H-36	99.2211026278409	result = result + $STRING$ + num / b ;
P-36	99.9791 99.7818 99.8487 96.8919 98.7169 98.433 98.6076 99.7987 99.956 99.5826
H-36	99.2202481356534	result = result + ( num / b ) ;
P-36	99.9791 99.7818 99.8487 94.9447 98.5043 99.1921 99.8486 99.8295 99.945 99.7132
H-36	99.21348987926136	result = result + alphabet ; } return result ;
P-36	99.9791 99.7818 99.8487 96.6588 99.1395 97.7044 99.3922 99.5697 99.5915 99.8469
H-36	99.15957980685764	result = result + $STRING$ + num ;
P-36	99.9791 99.7818 99.8487 96.8919 98.7169 98.433 99.4625 99.4865
H-36	99.14874945746527	result = result + $STRING$ + b ;
P-36	99.9791 99.7818 99.8487 96.8919 98.7169 97.6636 99.9547 99.6663
H-36	99.1309814453125	result = result + $STRING$ + result ;
P-36	99.9791 99.7818 99.8487 96.8919 98.7169 97.6726 99.7941 99.658
H-36	99.12839762369792	String alphabet = $STRING$ ; int i ;
P-36	99.5934 99.9737 99.7157 99.8569 98.9967 99.2202 99.6138 99.2464
H-36	99.1156005859375	result = result + $STRING$ + alphabet ;
P-36	99.9791 99.7818 99.8487 96.8919 98.7169 97.7486 99.6102 99.6274
H-36	99.11048041449652	result = result + num / b ;
P-36	99.9791 99.7818 99.8487 94.2858 98.974 99.8551 99.9525 99.4814
H-36	99.10264756944444	result = result + alphabet + $STRING$ ;
P-36	99.9791 99.7818 99.8487 96.6588 97.5777 98.8523 99.6945 99.6952
H-36	99.09012858072917	result = result + $STRING$ + i ;
P-36	99.9791 99.7818 99.8487 96.8919 98.7169 97.309 99.8596 99.5884
H-36	99.05409071180556	result = result + result + $STRING$ ;
P-36	99.9791 99.7818 99.8487 96.3343 99.0691 97.3089 99.6389 99.6902
H-36	99.033203125	result = result + num % b ;
P-36	99.9791 99.7818 99.8487 94.2858 98.2806 99.844 99.9696 99.4734
H-36	98.89866420200893	result = result + $STRING$ ;
P-36	99.9791 99.7818 99.8487 96.8919 99.3908 96.5625
S-37	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
T-37	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Predecessors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
H-37	99.93218470982143	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 99.8397 99.9181 99.9496 99.9992 99.9978 99.9968 99.9943 99.9828 99.9467 99.9992 99.999 99.9496 99.9745 99.9481 99.1832
H-37	99.87032920435855	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; } } return ordered CaMeL Nodes ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 99.9643 99.9996 98.6353 99.9753 99.924 99.7692 99.9962 99.3304 98.8621 98.8472 99.714 99.9992 99.9952 99.9364 102.7914
H-37	99.85692641314338	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 97.9707 99.9321 99.5256 99.9992 99.9949 99.9975 99.9884 99.9572 99.9062 99.9993 99.9991 99.8361 99.9995 99.0814
H-37	99.85641659007354	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) )
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 99.8397 99.9181 99.9496 99.9992 99.9978 99.9968 99.9943 99.9828 99.9467 99.9992 99.999 99.9496 99.9745 96.6227
H-37	99.85560960036058	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 99.9643 99.9996 98.949
H-37	99.85401130445075	if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 98.3955 99.9933 99.9993 99.9309 99.9985 99.9972 99.9741 99.8405 99.9048 99.9494 99.9991 99.9977 99.9963 99.9945 99.9684 99.9542 99.9991 99.999 99.878 99.9715 99.9484 99.1717
H-37	99.85254810474537	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 99.9643 99.9996 99.0429 99.679
H-37	99.84909319196429	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 97.9707 99.9321 99.5256 99.9992 99.9949 99.9975 99.9884 99.9572 99.9062 99.9993 99.9991 99.8361 99.9995 98.9884 99.676
H-37	99.84134928385417	if ( ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 97.215 99.7309 99.998 99.9972 99.997 99.9948 99.1738 99.9955 99.9999 99.8966 99.9994 99.999 99.7883 99.992 99.9992 99.9547 99.9993 99.9985 99.9967 99.865 99.9442 99.95 99.9992 99.9977 99.9968 99.9952 99.9792 99.9481 99.9992 99.999 99.9353 99.9747 99.948 99.1507
H-37	99.83546357996323	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 99.8397 96.6816 99.9992 99.9971 99.9956 99.9959 99.9282 99.9424 99.9992 99.9987 99.9324 99.9737 99.9456 99.2285
H-37	99.83147872121711	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 97.8282 99.7364 99.9246 99.9992 99.9974 99.9964 99.9949 99.9697 99.9536 99.999 99.999 99.9938 99.9701 99.9494 99.3069 99.999 99.9935 99.9969 99.9883 99.9756 99.9224 99.9991 99.9991 99.9762 99.9996 99.0326
H-37	99.82820375504032	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 99.9643 99.9996 98.6353 99.9753 99.924 99.7692 99.9962 99.0771
H-37	99.82509940011161	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 97.7802 99.9026 99.9654 99.5425 99.9991 99.9951 99.9972 99.9887 99.9617 99.907 99.9993 99.999 99.9389 99.9997 99.0014
H-37	99.82363891601562	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 99.9643 99.9996 98.6353 99.9753 99.924 99.7692 99.9962 99.3304 99.4289
H-37	99.82032933728448	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 97.7802 99.9026 99.9654 99.5425 99.9991 99.9951 99.9972 99.9887 99.9617 99.907 99.9993 99.999 99.9389 99.9997 99.0203 99.6679
H-37	99.80884576612904	if ( next CaMeL Node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 97.0963 99.9984 99.9986 99.9725 99.9048 99.9991 99.8552 99.9983 99.9972 99.9577 99.3791 99.9954 99.9931 99.9994 99.9973 99.7581 99.9532 99.6574 99.9992 99.9945 99.9975 99.9885 99.9622 99.9042 99.9992 99.9991 99.8064 99.9996 99.0323
H-37	99.805908203125	if ( next CaMeL Node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }
P-37	99.9973 97.0963 99.9984 99.9986 99.9725 99.9048 99.9991 99.8552 99.9983 99.9972 99.9577 99.3791 99.9954 99.9931 99.9994 99.9973 99.7581 99.9532 99.6574 99.9992 99.9945 99.9975 99.9885 99.9622 99.9042 99.9992 99.9991 99.8064 99.9996 99.073 99.674
H-37	99.80436417863176	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 99.8397 99.9181 99.9496 99.9992 99.9978 99.9968 99.9943 95.7684 99.9925 99.9998 99.9248 99.999 99.999 99.3289 99.981 99.9507 99.1741
H-37	99.80085523200758	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 97.7802 99.9026 99.9654 99.5425 99.9991 99.9951 99.9972 99.9887 99.9617 99.907 99.9993 99.999 99.9389 99.9997 98.593 99.9757 99.9252 99.7694 99.9958 99.0678
H-37	99.80020718961148	if ( next CaMeL Node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ;
P-37	99.9973 97.0963 99.9984 99.9986 99.9725 99.9048 99.9991 99.8552 99.9983 99.9972 99.9577 99.3791 99.9954 99.9931 99.9994 99.9973 99.7581 99.9532 99.6574 99.9992 99.9945 99.9975 99.9885 99.9622 99.9042 99.9992 99.9991 98.2513 99.989 99.9993 99.9522 99.9984 99.9954 99.9323 99.9985 99.2555
H-37	99.79920789930556	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 97.8282 99.7364 99.9246 99.9992 99.9974 99.9964 99.9949 99.9697 99.9536 99.999 99.999 99.9938 99.9701 99.9494 99.1711
H-37	99.79754997702206	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 97.7802 99.9026 99.9654 99.5425 99.9991 99.9951 99.9972 99.9887 99.9617 99.907 99.9993 99.999 99.9389 99.9997 98.593 99.9757 99.9252 99.7694 99.9958 99.3355 99.421
H-37	99.79575327280405	if ( ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) ) {
P-37	99.9973 95.8832 99.4218 99.9983 99.9976 99.9898 99.9831 99.7029 99.9955 99.9998 99.9086 99.9993 99.999 99.6475 99.992 99.9992 99.9542 99.9994 99.9988 99.9922 99.7862 99.8423 99.9471 99.9991 99.9978 99.9965 99.9942 99.9791 99.9514 99.9991 99.999 99.9284 99.9811 99.5704 99.9566 99.1724
H-37	99.79222347861842	if ( next CaMeL Node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ; }
P-37	99.9973 97.0963 99.9984 99.9986 99.9725 99.9048 99.9991 99.8552 99.9983 99.9972 99.9577 99.3791 99.9954 99.9931 99.9994 99.9973 99.7581 99.9532 99.6574 99.9992 99.9945 99.9975 99.9885 99.9622 99.9042 99.9992 99.9991 98.2513 99.989 99.9993 99.9522 99.9984 99.9954 99.9323 99.9985 99.1285 99.624
H-37	99.7920280905331	if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 97.215 99.7309 99.998 99.9972 99.997 99.9948 99.4201 99.9432 99.9992 99.9991 98.2623 99.9932 99.9992 99.9387 99.9986 99.998 99.9834 99.8612 99.9334 99.9502 99.9992 99.9975 99.9967 99.9951 99.9707 99.9528 99.9991 99.999 99.8653 99.97 99.9494 99.141
H-37	99.79201438210227	if ( ordered CaMeL Nodes . contains CaMeL All ( node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 95.3924 99.9121 99.9912 99.9993 99.9464 99.999 99.9976 99.9941 99.8463 99.9191 99.9493 99.9991 99.9978 99.9965 99.994 99.9767 99.9459 99.9993 99.999 99.9428 99.9757 99.9461 99.1813
H-37	99.78485107421875	if ( next CaMeL Node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ;
P-37	99.9973 97.0963 99.9984 99.9986 99.9725 99.9048 99.9991 99.8552 99.9983 99.9972 99.9577 99.3791 99.9954 99.9931 99.9994 99.9973 99.7581 99.9532 99.6574 99.9992 99.9945 99.9975 99.9885 99.9622 99.9042 99.9992 99.9991 99.8064 99.9996 98.4542 99.9772 99.9269 99.7701 99.9957 99.0889
H-37	99.78215398015203	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 97.8282 98.0844 99.9989 99.9966 99.996 99.9961 99.8724 99.9492 99.999 99.9988 99.9928 99.9693 99.9465 99.2782 99.9989 99.9941 99.9969 99.9887 99.977 99.9229 99.9992 99.999 99.9791 99.9997 99.082
H-37	99.78212709780092	if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 97.215 99.7309 99.998 99.9972 99.997 99.9948 99.4201 99.9432 99.9992 99.9991 99.8057 99.8673 99.9562 99.5299 99.9991 99.9949 99.9972 99.9894 99.9717 99.9186 99.9992 99.999 99.9585 99.9996 98.9563
H-37	99.78108978271484	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 96.6263 99.9908 99.9994 99.9531 99.9984 99.9971 99.9288 99.9978 99.1706
H-37	99.78095967060811	if ( next CaMeL Node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; }
P-37	99.9973 97.0963 99.9984 99.9986 99.9725 99.9048 99.9991 99.8552 99.9983 99.9972 99.9577 99.3791 99.9954 99.9931 99.9994 99.9973 99.7581 99.9532 99.6574 99.9992 99.9945 99.9975 99.9885 99.9622 99.9042 99.9992 99.9991 99.8064 99.9996 98.4542 99.9772 99.9269 99.7701 99.9957 99.3357 99.394
H-37	99.7807099313447	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; } } return ordered CaMeL Nodes ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 99.9643 99.9996 99.0429 98.2151 98.8045 99.6802 99.9992 99.9956 99.9096 99.8194
H-37	99.78062220982143	if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }
P-37	99.9973 97.215 99.7309 99.998 99.9972 99.997 99.9948 99.4201 99.9432 99.9992 99.9991 99.8057 99.8673 99.9562 99.5299 99.9991 99.9949 99.9972 99.9894 99.9717 99.9186 99.9992 99.999 99.9585 99.9996 98.9907 99.7055
H-37	99.7779181985294	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 97.7802 99.9026 99.9654 99.5425 99.9991 99.9951 99.9972 99.9887 99.9617 99.907 99.9993 99.999 97.1611 99.9903 99.9994 99.9553 99.9986 99.996 99.9497 99.9982 99.2384
H-37	99.7770108309659	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ; }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 96.6263 99.9908 99.9994 99.9531 99.9984 99.9971 99.9288 99.9978 99.1816 99.6356
H-37	99.77549115349265	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 96.2935 99.9822 99.9998 99.8267 99.9992 99.9989 99.6455 99.9895 99.9992 99.9561 99.9991 99.9955 99.9931 99.9988 99.2426
H-37	99.77516004774306	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 99.8397 99.9181 94.3139 99.9526 99.9992 99.998 99.997 99.9942 99.9843 99.9485 99.9993 99.999 99.9358 99.9719 99.9494 99.1568
H-37	99.77507390202703	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 99.8397 99.9181 94.712 99.4863 99.9993 99.9982 99.9949 99.9961 99.8784 99.951 99.9991 99.9991 99.9328 99.965 99.915 99.9423 99.2028
H-37	99.77384185791016	if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 98.3955 99.9933 99.9993 99.9309 99.9985 99.9972 99.9741 97.8978 99.9317 99.5616 99.9992 99.9949 99.9974 99.9888 99.9685 99.9163 99.9992 99.9991 99.8354 99.9996 99.0638
H-37	99.77379608154297	if ( next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 97.0963 99.9984 99.9986 99.9725 99.9048 99.9991 99.8552 99.9983 99.9972 99.9577 99.1752 99.4492 99.8213 99.9991 99.9987 99.5048 99.8018 99.9647 99.5498 99.9992 99.9949 99.997 99.9887 99.97 99.9193 99.9993 99.9991 99.9455 99.9996 99.0259
H-37	99.77353922526042	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; list CaMeL Size ++ ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 99.9643 99.9996 98.6353 99.9753 99.924 99.7692 99.9962 97.3917 99.9855 99.9129 99.7718 99.997 99.1914
H-37	99.77294921875	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; } }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 97.9707 99.9321 99.5256 99.9992 99.9949 99.9975 99.9884 99.9572 99.9062 99.9993 99.9991 99.8361 99.9995 98.9884 98.1984 98.5854
H-37	99.77215897409539	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 97.8282 98.0844 99.9989 99.9966 99.996 99.9961 99.8724 99.9492 99.999 99.9988 99.9928 99.9693 99.9465 99.2782 99.9989 99.9941 99.9969 99.9887 99.977 99.9229 99.9992 99.999 99.9791 99.9997 98.8231 99.6613
H-37	99.77091979980469	if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) )
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 98.3955 99.9933 99.9993 99.9309 99.9985 99.9972 99.9741 99.8405 99.9048 99.9494 99.9991 99.9977 99.9963 99.9945 99.9684 99.9542 99.9991 99.999 99.878 99.9715 96.6071
H-37	99.77005440848214	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ; }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 97.7802 99.9026 99.9654 99.5425 99.9991 99.9951 99.9972 99.9887 99.9617 99.907 99.9993 99.999 97.1611 99.9903 99.9994 99.9553 99.9986 99.996 99.9497 99.9982 99.1134 99.6276
H-37	99.7698641690341	if ( next CaMeL Node . get CaMeL Successors ( ) . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }
P-37	99.9973 97.0963 99.9984 99.9986 99.9725 99.9048 99.9991 99.8552 99.9983 99.9972 99.9577 99.1752 99.4492 99.8213 99.9991 99.9987 99.5048 99.8018 99.9647 99.5498 99.9992 99.9949 99.997 99.9887 99.97 99.9193 99.9993 99.9991 99.9455 99.9996 98.9892 99.6806
H-37	99.76985909598214	if ( node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ;
P-37	99.9973 96.3792 99.9727 99.8488 99.9995 99.7168 99.9963 99.9968 99.9615 99.5588 99.9949 99.9933 99.9993 99.9978 99.7564 99.954 99.6528 99.9992 99.9947 99.9975 99.9887 99.9607 99.893 99.9991 99.999 98.3883 99.9894 99.9993 99.9535 99.9986 99.9969 99.9251 99.9985 99.2043
H-37	99.76973724365234	if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ;
P-37	99.9973 97.215 99.7309 99.998 99.9972 99.997 99.9948 99.4201 99.9432 99.9992 99.9991 99.8057 99.8673 99.9562 99.5299 99.9991 99.9949 99.9972 99.9894 99.9717 99.9186 99.9992 99.999 99.9585 99.9996 98.6974 99.9756 99.9253 99.7904 99.9958 99.0858
H-37	99.76863887392241	if ( node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 96.3792 99.9727 99.8488 99.9995 99.7168 99.9963 99.9968 99.9615 99.5588 99.9949 99.9933 99.9993 99.9978 99.7564 99.954 99.6528 99.9992 99.9947 99.9975 99.9887 99.9607 99.893 99.9991 99.999 99.7751 99.9995 99.0243
H-37	99.7686064749053	if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 98.3955 99.9933 99.9993 99.9309 99.9985 99.9972 99.9741 97.8978 99.9317 99.5616 99.9992 99.9949 99.9974 99.9888 99.9685 99.9163 99.9992 99.9991 99.8354 99.9996 98.983 99.6818
H-37	99.768310546875	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 97.9707 96.1034 99.9991 99.9936 99.9972 99.9884 99.9605 99.9092 99.9994 99.9991 99.8805 99.9996 99.6064
H-37	99.76814038825758	if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; }
P-37	99.9973 97.215 99.7309 99.998 99.9972 99.997 99.9948 99.4201 99.9432 99.9992 99.9991 99.8057 99.8673 99.9562 99.5299 99.9991 99.9949 99.9972 99.9894 99.9717 99.9186 99.9992 99.999 99.9585 99.9996 98.6974 99.9756 99.9253 99.7904 99.9958 99.311 99.492
H-37	99.76797572544643	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ; }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 96.2935 99.9822 99.9998 99.8267 99.9992 99.9989 99.6455 99.9895 99.9992 99.9561 99.9991 99.9955 99.9931 99.9988 99.1276 99.6271
H-37	99.76752115885417	if ( node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }
P-37	99.9973 96.3792 99.9727 99.8488 99.9995 99.7168 99.9963 99.9968 99.9615 99.5588 99.9949 99.9933 99.9993 99.9978 99.7564 99.954 99.6528 99.9992 99.9947 99.9975 99.9887 99.9607 99.893 99.9991 99.999 99.7751 99.9995 99.0698 99.6898
H-37	99.7657371727196	if ( node . get CaMeL Successors ( ) . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 96.3792 99.9727 99.8488 99.9995 99.7168 99.9963 99.9968 99.9615 98.8879 99.4233 99.8012 99.999 99.9986 99.1063 99.992 99.9993 99.9426 99.9991 99.999 99.9896 99.8392 99.8852 99.9052 99.999 99.9973 99.9968 99.9938 99.9633 99.9521 99.999 99.999 99.8447 99.9701 99.9506 99.1467
H-37	99.76563197544642	if ( ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) )
P-37	99.9973 97.215 99.7309 99.998 99.9972 99.997 99.9948 99.1738 99.9955 99.9999 99.8966 99.9994 99.999 99.7883 99.992 99.9992 99.9547 99.9993 99.9985 99.9967 99.865 99.9442 99.95 99.9992 99.9977 99.9968 99.9952 99.9792 99.9481 99.9992 99.999 99.9353 99.9747 96.6072
H-37	99.76561737060547	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; } list CaMeL Size ++ ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 99.9643 99.9996 99.0429 97.1266 99.9725 99.9264 99.7204 99.995 99.4187
H-37	99.76559787326389	if ( node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node . get CaMeL Successors ( ) ) ; }
P-37	99.9973 96.3792 99.9727 99.8488 99.9995 99.7168 99.9963 99.9968 99.9615 99.5588 99.9949 99.9933 99.9993 99.9978 99.7564 99.954 99.6528 99.9992 99.9947 99.9975 99.9887 99.9607 99.893 99.9991 99.999 98.3883 99.9894 99.9993 99.9535 99.9986 99.9969 99.9251 99.9985 99.1884 99.6323
H-37	99.76546223958333	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; } }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 99.9643 99.9996 98.6353 99.9753 99.924 99.7692 99.9962 99.3304 98.8621 98.4707
H-37	99.7646286423142	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ; list CaMeL Size ++ ; }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 99.9643 99.9996 98.6353 99.9753 99.924 99.7692 99.9962 97.3917 99.9855 99.9129 99.7718 99.997 99.2712 99.364
H-37	99.76434536637932	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 97.7802 97.5376 99.7841 99.9256 99.9989 99.9977 99.9966 99.9946 99.9786 99.9461 99.9992 99.999 99.9902 99.9743 99.9494 99.1889
H-37	99.76406680836396	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; } } } return ordered CaMeL Nodes ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 99.9643 99.9996 99.0429 98.2151 98.2933 99.6015 99.7273 99.9991 99.9947 99.9615 99.8462
H-37	99.76296037946429	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Name ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 94.1217 99.997 99.9995 99.9939 99.776 99.8859 99.9464 99.9991 99.9976 99.9967 99.9945 99.9826 99.9484 99.9992 99.999 99.9555 99.9724 99.946 99.1919
H-37	99.76255289713542	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) continue ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 99.8397 99.9181 99.9496 99.9992 99.9978 99.9968 99.9943 99.9828 99.9467 99.9992 99.999 99.9496 99.9745 93.8584 99.951 99.1473
H-37	99.76234266493056	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 97.7802 99.9026 99.9654 99.5425 99.9991 99.9951 99.9972 99.9887 96.5795 99.9589 99.9997 99.8573 99.9991 99.9988 99.6309 99.9901 99.9991 99.9559 99.9993 99.9975 99.9936 99.9991 99.1899
H-37	99.76220703125	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ( ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 99.8397 94.3822 99.2007 99.9495 99.9992 99.9979 99.9969 99.9945 99.9489 99.9535 99.999 99.9991 99.9416 99.9752 99.9137 99.9388 99.2237
H-37	99.75989815848214	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; } } return ordered CaMeL Nodes ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 97.7802 99.9026 99.9654 99.5425 99.9991 99.9951 99.9972 99.9887 99.9617 99.907 99.9993 99.999 99.9389 99.9997 99.0203 98.2519 98.7729 99.6878 99.9992 99.9958 99.9433 99.8237
H-37	99.75974527994792	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 99.8397 99.9181 99.9496 99.9992 99.9978 99.9968 99.9943 99.9828 99.9467 99.9992 99.999 99.9496 99.9745 99.9481 93.3491 99.5583
H-37	99.758837890625	if ( ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 97.215 99.7309 99.998 99.9972 99.997 99.9948 99.1738 99.9955 99.9999 99.8966 99.9994 99.999 99.7883 99.992 99.9992 99.9547 99.9993 99.9985 99.9967 97.7409 99.92 99.5355 99.9992 99.9952 99.9975 99.9883 99.9589 99.9102 99.9993 99.9991 99.8425 99.9995 99.0671
H-37	99.75789388020833	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 99.8397 99.9181 99.9496 99.9992 99.9978 99.9968 99.9943 99.9828 99.9467 99.9992 99.999 99.9496 99.9745 99.9481 93.7135 99.1272
H-37	99.75511955492425	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) )
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 99.8397 96.6816 99.9992 99.9971 99.9956 99.9959 99.9282 99.9424 99.9992 99.9987 99.9324 99.9737 96.6873
H-37	99.754638671875	if ( ordered CaMeL Nodes . contains ( next CaMeL Node . get CaMeL Successors ( ) ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 98.3955 99.9933 99.9993 99.9309 99.9985 99.9972 99.9741 99.8405 96.8539 99.9991 99.997 99.9959 99.9963 99.9115 99.9508 99.9989 99.9988 99.8473 99.9716 99.9467 99.23
H-37	99.7537841796875	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; } }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 99.9643 99.9996 99.0429 98.2151 98.5511
H-37	99.75375828598484	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( i ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 99.8397 99.9181 99.9496 99.9992 99.9978 99.9968 99.9943 99.9828 94.3117 99.9774 99.881 99.9398 99.1381
H-37	99.75254242995689	if ( ordered CaMeL Nodes . contains CaMeL All ( ordered CaMeL Nodes ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 95.8804 99.9995 99.9961 99.6369 99.454 99.738 99.9173 99.9987 99.9976 99.9966 99.9944 99.9773 99.9418 99.9993 99.999 99.9386 99.9791 99.9508 99.1934
H-37	99.7509765625	if ( next CaMeL Node . get CaMeL Successors ( ) . is CaMeL Empty ( ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 97.0963 99.9984 99.9986 99.9725 99.9048 99.9991 99.8552 99.9983 99.9972 99.9577 99.3791 99.9954 99.9931 99.9994 99.9973 98.1841 99.0773 99.883 99.9989 99.9973 99.9974 99.9921 99.8915 99.9496 99.9992 99.999 99.8899 99.961 99.9513 99.237
H-37	99.7495476217831	if ( node . get CaMeL Successors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size ++ ;
P-37	99.9973 96.3792 99.9727 99.8488 99.9995 99.7168 99.9963 99.9968 99.9615 99.5588 99.9949 99.9933 99.9993 99.9978 99.7564 99.954 99.6528 99.9992 99.9947 99.9975 99.9887 99.9607 99.893 99.9991 99.999 99.7751 99.9995 98.4746 99.9769 99.9264 99.774 99.9954 99.0716
H-37	99.74866832386364	if ( ordered CaMeL Nodes . contains CaMeL All ( element . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 94.0019 99.8723 99.9921 99.9996 99.9471 99.9992 99.9982 99.9953 99.845 99.914 99.9468 99.999 99.9978 99.9965 99.994 99.9768 99.944 99.9993 99.999 99.9421 99.9773 99.947 99.1863
H-37	99.74414825439453	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size -- ; }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 99.9643 99.9996 98.6353 99.9753 99.924 97.1687 99.9959 99.3593 99.4572
H-37	99.74275453629032	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; list CaMeL Size -- ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 99.9177 99.9992 99.9991 99.9643 99.9996 98.6353 99.9753 99.924 97.1687 99.9959 99.0294
H-37	99.73750945060483	if ( ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 95.8832 99.4218 99.9983 99.9976 99.9898 99.9831 99.7029 99.9955 99.9998 99.9086 99.9993 99.999 98.7851 99.9563 99.4807 99.9029 99.9506 99.9991 99.9974 99.9961 99.9946 99.9823 99.9467 99.9993 99.999 99.9915 99.979 99.951 99.1921
H-37	99.73569672683189	if ( ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 97.215 99.7309 99.998 99.9972 99.997 99.9948 99.1738 99.9955 99.9999 99.8966 99.9994 99.999 98.3421 99.89 99.9635 99.5183 99.9991 99.9946 99.9972 99.9886 99.9608 99.9105 99.9993 99.999 99.9215 99.9996 98.9738
H-37	99.7355224609375	if ( ! ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }
P-37	99.9973 97.215 99.7309 99.998 99.9972 99.997 99.9948 99.1738 99.9955 99.9999 99.8966 99.9994 99.999 98.3421 99.89 99.9635 99.5183 99.9991 99.9946 99.9972 99.9886 99.9608 99.9105 99.9993 99.999 99.9215 99.9996 98.9936 99.7106
H-37	99.731884765625	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; } }
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 97.7802 99.9026 99.9654 99.5425 99.9991 99.9951 99.9972 99.9887 99.9617 99.907 99.9993 99.999 99.9389 99.9997 99.0203 98.2519 98.583
H-37	99.73149762834821	if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 97.215 99.7309 99.998 99.9972 99.997 99.9948 99.4201 99.9432 99.9992 99.9991 99.8057 97.8011 99.7771 99.9257 99.9991 99.9973 99.9964 99.9955 99.9667 99.954 99.999 99.999 99.9936 99.9704 99.9478 99.1787
H-37	99.72894090221774	if ( next CaMeL Node . get CaMeL Predecessors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 97.0963 99.9984 99.9986 99.9725 99.9048 99.9991 97.3328 99.9972 99.9968 99.9552 99.4123 99.9946 99.9931 99.9996 99.9966 99.7521 99.9539 99.6676 99.9991 99.9944 99.9975 99.9885 99.9637 99.9045 99.999 99.9991 99.8315 99.9996 99.0181
H-37	99.72781137319711	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 97.8282 98.0844 99.9989 99.9966 99.996 99.9961 99.8724 99.9492 99.999 99.9988 99.9928 99.9693 99.9465 99.1992
H-37	99.71903483072917	if ( node . get CaMeL Predecessors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ; }
P-37	99.9973 96.3792 99.9727 99.8488 99.9995 98.2255 99.9934 99.9949 99.9524 99.5604 99.9935 99.9926 99.9996 99.9973 99.7674 99.9551 99.6645 99.9992 99.9946 99.9974 99.9888 99.9622 99.8934 99.9989 99.999 99.8048 99.9996 99.0705 99.6852
H-37	99.718017578125	if ( node . get CaMeL Predecessors ( ) . is CaMeL Empty ( ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 96.3792 99.9727 99.8488 99.9995 98.2255 99.9934 99.9949 99.9524 99.5604 99.9935 99.9926 99.9996 99.9973 99.7674 99.9551 99.6645 99.9992 99.9946 99.9974 99.9888 99.9622 99.8934 99.9989 99.999 99.8048 99.9996 99.0073
H-37	99.71670735677084	if ( node . get CaMeL Successors ( ) . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 96.3792 99.9727 99.8488 99.9995 99.7168 99.9963 99.9968 99.9615 98.8879 99.4233 99.8012 99.999 99.9986 99.4724 99.8114 99.9645 99.5393 99.9992 99.9953 99.9971 99.989 99.9707 99.9151 99.9992 99.9991 99.9501 99.9996 99.0374
H-37	99.71572770743535	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) && ! ordered CaMeL Nodes . contains (
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 99.8397 99.9181 99.9496 99.9992 99.9978 99.9968 99.9943 99.9828 93.1299
H-37	99.71125139508929	if ( ordered CaMeL Nodes . contains CaMeL All ( ordered CaMeL Nodes ) ) { ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 95.8804 99.9995 99.9961 99.6369 99.0902 99.9471 99.5007 99.9991 99.9951 99.9974 99.989 99.9605 99.8922 99.9993 99.999 99.7948 99.9996 99.003
H-37	99.69932725694444	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) || ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 95.3183 99.4966 99.9251 99.9992 99.9977 99.9963 99.9958 99.9656 99.9506 99.999 99.9992 99.9932 99.967 99.9465 99.236
H-37	99.69837890625	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) ordered CaMeL Nodes . add ( next CaMeL Node ) ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 95.066 99.999 99.9936 99.997 99.9885 99.9699 99.9238 99.9993 99.9991 99.9746 99.9996 99.5884
H-37	99.69276780348558	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) && ! ordered CaMeL Nodes . contains ( next CaMeL Node ) )
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 97.8282 99.7364 99.9246 99.9992 99.9974 99.9964 99.9949 99.9697 99.9536 99.999 99.999 99.9938 99.9701 96.5538
H-37	99.68274456521739	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node . get CaMeL Successors ( ) ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 99.8847 99.9916 99.9992 99.9535 99.9994 99.9981 99.9965 97.9707 99.9321 95.8526
H-37	99.63824462890625	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) { ordered CaMeL Nodes . add ( node ) ;
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 99.5463 99.9992 99.9945 99.9972 99.9893 99.9701 94.8836 99.9025 99.9995 99.1151
H-37	99.52870279947916	if ( ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 98.7916 99.9347 99.9992 99.9989 99.7746 99.865 99.9599 95.0099
H-37	99.51706830193015	if ( ordered CaMeL Nodes . contains CaMeL All ( next CaMeL Node ) ) {
P-37	99.9973 99.7342 99.9991 99.9976 99.9929 99.9926 99.6434 99.9951 99.9999 99.8915 99.9994 99.9989 97.7802 99.9026 99.9654 95.0171
H-37	99.46922302246094	if ( ! ordered CaMeL Nodes . contains ( next CaMeL Node ) ) {
P-37	99.9973 97.215 99.7309 99.998 99.9972 99.997 99.9948 99.4201 99.9432 99.9992 99.9991 99.8057 99.8673 99.9562 95.7035
S-38	return lines ;
T-38	lines . add ( text ) ; return lines ;
H-38	99.66089630126953	return lines ;
P-38	99.181 99.975 99.605
H-38	99.440673828125	return lines ; }
P-38	99.181 99.975 98.6041 99.5607
H-38	99.23502349853516	return lines ; } return lines ;
P-38	99.181 99.975 98.6041 96.8314 99.7129 99.9699 99.7233
H-38	99.15024239676339	return lines ; } ) ;
P-38	99.181 99.975 98.6041 96.6533 99.9924 99.7634
H-38	99.14763641357422	return lines ; else return lines ;
P-38	99.181 99.975 96.5219 98.4175 99.6458 99.9598 99.5974
H-38	99.1424331665039	return lines ; } } ) ;
P-38	99.181 99.975 98.6041 97.3262 98.3854 99.9919 99.7933
H-38	99.13131277901786	return lines ; return lines ;
P-38	99.181 99.975 95.5588 99.7183 99.9685 99.635
H-38	99.11786651611328	return text ;
P-38	97.0606 99.9184 99.6099
H-38	99.11769612630208	return lines ; } ;
P-38	99.181 99.975 98.6041 97.2803 99.7832
H-38	99.08315604073661	return wrap ( lines ) ;
P-38	95.7121 99.733 98.7642 99.794 99.992 99.7043
H-38	99.05618286132812	return lines ; return lines ; }
P-38	99.181 99.975 95.5588 99.7183 99.9685 98.474 99.6912
H-38	99.05520193917411	return lines ; } } ;
P-38	99.181 99.975 98.6041 97.3262 98.6349 99.7827
H-38	99.03498186383929	return lines ; } * /
P-38	99.181 99.975 98.6041 96.2508 99.658 99.6934
H-38	99.01229095458984	return lines ; } ) ; }
P-38	99.181 99.975 98.6041 96.6533 99.9924 98.0176 99.7923
H-38	98.99213518415179	return wrap ( text ) ;
P-38	95.7121 99.733 98.4766 99.4415 99.9971 99.7021
H-38	98.97831508091518	return { return lines ; }
P-38	95.7877 98.8129 99.6345 99.9681 99.597 99.1656
H-38	98.97632446289063	return text ; }
P-38	97.0606 99.9184 98.59 99.43
H-38	98.9748764038086	return text . length ( ) ;
P-38	97.0606 97.0907 98.4815 99.9908 99.9959 99.7397 99.5573
H-38	98.95997619628906	return wrap ( lines ) ; }
P-38	95.7121 99.733 98.7642 99.794 99.992 98.2708 99.5313
H-38	98.95599365234375	return line ;
P-38	96.328 99.9803 99.6331
H-38	98.933837890625	return lines ; } ; }
P-38	99.181 99.975 98.6041 97.2803 97.9005 99.7133
H-38	98.92831420898438	return text ; } return lines ;
P-38	97.0606 99.9184 98.59 96.6729 99.6174 99.9678 99.7169
H-38	98.92269461495536	return wrap ( cols ) ;
P-38	95.7121 99.733 97.6073 99.8423 99.9905 99.6911
H-38	98.9088134765625	return false ; } return lines ;
P-38	96.086 99.9979 98.8583 97.0703 99.6952 99.9615 99.7188
H-38	98.89331665039063	return return lines ;
P-38	95.6504 99.3535 99.9805 99.5997
H-38	98.87660725911458	return lines ; else {
P-38	99.181 99.975 96.5219 98.9385 98.7607
H-38	98.87588500976562	return text ; } } ) ;
P-38	97.0606 99.9184 98.59 97.3216 98.4535 99.9924 99.7879
H-38	98.87354278564453	return wrap ( text ) ; }
P-38	95.7121 99.733 98.4766 99.4415 99.9971 98.2795 99.466
H-38	98.86848449707031	return false ;
P-38	96.086 99.9979 99.5076
H-38	98.86091831752232	return text ; } ) ;
P-38	97.0606 99.9184 98.59 96.8228 99.9935 99.7586
H-38	98.86040496826172	return lines ; } } ; }
P-38	99.181 99.975 98.6041 97.3262 98.6349 97.6944 99.5851
H-38	98.85688781738281	return true ;
P-38	96.0156 99.998 99.5314
H-38	98.85688018798828	return lines ? lines : lines ;
P-38	99.181 94.0967 99.0004 99.9463 99.1671 99.9292 99.6518
H-38	98.8526382446289	return text ; else return lines ;
P-38	97.0606 99.9184 96.5231 98.5363 99.3502 99.9526 99.5973
H-38	98.84422810872395	return return lines ; }
P-38	95.6504 99.3535 99.9805 98.6356 99.5628
H-38	98.84269496372768	return lines ; break ; }
P-38	99.181 99.975 94.2325 99.956 99.3886 99.2832
H-38	98.83509521484375	return line ; }
P-38	96.328 99.9803 98.5178 99.4669
H-38	98.8333740234375	return lines ; } } } ;
P-38	99.181 99.975 98.6041 97.3262 96.8354 99.1363 99.7264
H-38	98.8323486328125	return false ; }
P-38	96.086 99.9979 98.8583 99.337
H-38	98.82354736328125	return text ; } * /
P-38	97.0606 99.9184 98.59 97.0086 99.6207 99.684
H-38	98.82145472935268	return false ; } ) ;
P-38	96.086 99.9979 98.8583 97.1681 99.9947 99.7627
H-38	98.81770542689732	return true ; } ) ;
P-38	96.0156 99.998 98.8026 97.2672 99.9951 99.763
H-38	98.81138102213542	return { return lines ;
P-38	95.7877 98.8129 99.6345 99.9681 98.7827
H-38	98.80788167317708	return text ; } ;
P-38	97.0606 99.9184 98.59 97.6088 99.7869
H-38	98.79641723632812	return lines + 1 ;
P-38	99.181 95.3828 98.6715 99.9877 99.673
H-38	98.78649030412946	return wrap ( line ) ;
P-38	95.7121 99.733 96.8096 99.6627 99.9935 99.712
H-38	98.78562709263393	return text ; return lines ;
P-38	97.0606 99.9184 95.5633 99.4868 99.9654 99.6223
H-38	98.77900913783482	return text ; } } ;
P-38	97.0606 99.9184 98.59 97.3216 98.8992 99.7806
H-38	98.76820068359375	return true ; }
P-38	96.0156 99.998 98.8026 99.1423
H-38	98.75667898995536	return true ; } * /
P-38	96.0156 99.998 98.8026 97.3052 99.6265 99.6663
H-38	98.7314961751302	return true ; } ;
P-38	96.0156 99.998 98.8026 97.9062 99.784
H-38	98.71260579427083	return lines - 1 ;
P-38	99.181 93.8282 99.7902 99.9534 99.6403
H-38	98.70699055989583	return false ; } ;
P-38	96.086 99.9979 98.8583 97.6321 99.7851
H-38	98.7052714029948	return wrap ( ) ;
P-38	95.7121 99.733 97.2637 99.98 99.6603
H-38	98.70333862304688	return lines ; break ;
P-38	99.181 99.975 94.2325 99.956 98.9929
H-38	98.6567891438802	return line ; } ;
P-38	96.328 99.9803 98.5178 97.4395 99.7926
H-38	98.63121541341145	return lines + $NUMBER$ ;
P-38	99.181 95.3828 97.7 99.972 99.669
H-38	98.61920166015625	return lines ; else
P-38	99.181 99.975 96.5219 97.5355
H-38	98.6156494140625	result = lines ;
P-38	99.7361 99.0292 99.6475 99.6531
H-38	98.6124979654948	return lines ; } {
P-38	99.181 99.975 98.6041 94.9935 99.0387
H-38	98.60544840494792	return { } } ;
P-38	95.7877 97.4965 99.4528 99.3323 99.6808
H-38	98.60030110677083	return lines + 0 ;
P-38	99.181 95.3828 97.5373 99.9772 99.6409
H-38	98.59192911783855	return empty CaMeL List ;
P-38	93.2084 99.2034 99.8079 99.7896 99.6597
H-38	98.5862325032552	return size ( ) ;
P-38	94.7139 97.4613 99.9206 99.9187 99.6203
H-38	98.58050537109375	return lines ; * /
P-38	99.181 99.975 93.221 99.5928 99.6307
H-38	98.57305908203125	return WRAP ;
P-38	95.3285 99.4432 99.6381
H-38	98.55079345703125	return 0 ; }
P-38	94.6526 99.9918 98.7456 99.4814
H-38	98.54383850097656	return list ;
P-38	94.6978 99.987 99.6081
H-38	98.53907470703125	return list ; }
P-38	94.6978 99.987 98.5908 99.5373
H-38	98.53761596679688	return WRAP ; }
P-38	95.3285 99.4432 98.4993 99.5346
H-38	98.53510131835938	return size ; }
P-38	94.7139 99.8652 98.6974 99.5164
H-38	98.52728271484375	return start ;
P-38	94.6572 99.9769 99.5926
H-38	98.52269897460937	return cols ; }
P-38	94.5318 99.9728 98.7111 99.5152
H-38	98.52053833007812	return 0 ;
P-38	94.6526 99.9918 99.5552
H-38	98.5090560913086	return size ;
P-38	94.7139 99.8652 99.5745
H-38	98.50590209960937	return start ; }
P-38	94.6572 99.9769 98.651 99.3619
H-38	98.48861694335938	return cols ;
P-38	94.5318 99.9728 99.5673
H-38	98.46658325195312	return - 1 ;
P-38	93.0767 99.7745 99.9871 99.6121
H-38	98.43168334960937	return null ; }
P-38	93.9456 99.9989 98.7878 99.5437
H-38	98.37383270263672	return wrap ;
P-38	95.7121 98.2875 99.6132
H-38	98.35411071777344	return main ;
P-38	94.6948 99.2251 99.614
H-38	98.34095764160156	return null ;
P-38	93.9456 99.9989 99.5369
H-38	98.29692077636719	return this ;
P-38	93.7786 99.9565 99.57
H-38	98.25532531738281	return length ;
P-38	93.6627 99.9326 99.5435
H-38	98.24198913574219	return first ;
P-38	94.013 99.5312 99.5412
H-38	98.2268295288086	return ) ;
P-38	93.4081 99.9939 99.6228
H-38	98.20081329345703	break ; }
P-38	99.9587 99.3827 99.2296
H-38	98.1753158569336	return } ;
P-38	94.1651 98.9132 99.7404
H-38	98.17437744140625	return 1 ;
P-38	93.2292 99.9646 99.6211
H-38	98.15349578857422	return out ;
P-38	93.1753 99.9493 99.6068
H-38	98.15167999267578	} ) ;
P-38	97.8847 99.9935 99.6049
H-38	98.09823608398438	return in ;
P-38	93.2813 99.5689 99.6602
H-38	98.08418273925781	} * /
P-38	98.095 99.4934 99.6246
H-38	98.07095336914062	return last ;
P-38	93.8385 98.9712 99.5916
H-38	97.95941162109375	return ;
P-38	94.499 99.4967
H-38	97.86313883463542	return {
P-38	95.7877 97.9192
H-38	97.7733154296875	finally {
P-38	99.9891 98.9086
H-38	97.71579996744792	break ;
P-38	99.9587 98.9564
H-38	96.5426025390625	return
P-38	93.2027
H-38	96.20454406738281	}
P-38	97.2854
