protected int METHOD_1 ( final TYPE_1 key ) { int VAR_1 = key . METHOD_2 ( ) ; VAR_1 += ~ ( VAR_1 > > > INT_1 ) ; VAR_1 ^= VAR_1 > > > INT_2 ; VAR_1 += VAR_1 < < INT_3 ; VAR_1 ^= VAR_1 > > > INT_4 ; return VAR_1 ; }
protected int METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_1 VAR_2 ) { int VAR_3 = 0 ; if ( VAR_1 != null ) { VAR_3 ^= VAR_1 . METHOD_2 ( ) ; } if ( VAR_2 != null ) { VAR_3 ^= VAR_2 . METHOD_2 ( ) ; } VAR_3 += ~ ( VAR_3 < < INT_1 ) ; VAR_3 ^= VAR_3 > > > INT_2 ; VAR_3 += VAR_3 < < INT_3 ; VAR_3 ^= VAR_3 < < INT_4 ; return VAR_3 ; }
protected int METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_1 VAR_2 , final TYPE_1 VAR_3 , final TYPE_1 VAR_4 ) { int VAR_5 = 0 ; if ( VAR_1 != null ) { VAR_5 ^= VAR_1 . METHOD_2 ( ) ; } if ( VAR_2 != null ) { VAR_5 ^= VAR_2 . METHOD_2 ( ) ; } if ( VAR_3 != null ) { VAR_5 ^= VAR_3 . METHOD_2 ( ) ; } if ( VAR_4 != null ) { VAR_5 ^= VAR_4 . METHOD_2 ( ) ; } VAR_5 += ~ ( VAR_5 > > INT_1 ) ; VAR_5 ^= VAR_5 > > > INT_2 ; VAR_5 += VAR_5 < < INT_3 ; VAR_5 ^= VAR_5 > > > INT_4 ; return VAR_5 ; }
protected int METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_1 VAR_2 , final TYPE_1 VAR_3 ) { int VAR_4 = 0 ; if ( VAR_1 != null ) { VAR_4 ^= VAR_1 . METHOD_2 ( ) ; } if ( VAR_2 != null ) { VAR_4 ^= VAR_2 . METHOD_2 ( ) ; } if ( VAR_3 != null ) { VAR_4 ^= VAR_3 . METHOD_2 ( ) ; } VAR_4 += ~ ( VAR_4 < < INT_1 ) ; VAR_4 ^= VAR_4 > > INT_2 ; VAR_4 += VAR_4 < < INT_3 ; VAR_4 ^= VAR_4 > > > INT_4 ; return VAR_4 ; }
protected int METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_1 VAR_2 , final TYPE_1 VAR_3 , final TYPE_1 VAR_4 ) { int VAR_5 = 0 ; if ( VAR_1 != null ) { VAR_5 ^= VAR_1 . METHOD_2 ( ) ; } if ( VAR_2 != null ) { VAR_5 ^= VAR_2 . METHOD_2 ( ) ; } if ( VAR_3 != null ) { VAR_5 ^= VAR_3 . METHOD_2 ( ) ; } if ( VAR_4 != null ) { VAR_5 ^= VAR_4 . METHOD_2 ( ) ; } VAR_5 += ~ ( VAR_5 < < INT_1 ) ; VAR_5 ^= VAR_5 < < INT_2 ; VAR_5 += VAR_5 < < INT_3 ; VAR_5 ^= VAR_5 > > > INT_4 ; return VAR_5 ; }
protected int METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_1 VAR_2 ) { int VAR_3 = 0 ; if ( VAR_1 != null ) { VAR_3 ^= VAR_1 . METHOD_2 ( ) ; } if ( VAR_2 != null ) { VAR_3 ^= VAR_2 . METHOD_2 ( ) ; } VAR_3 += ~ ( VAR_3 < < INT_1 ) ; VAR_3 ^= VAR_3 > > > INT_2 ; VAR_3 += VAR_3 > > > INT_3 ; VAR_3 ^= VAR_3 > > > INT_4 ; return VAR_3 ; }
private TYPE_1 METHOD_1 ( final int VAR_1 , final int VAR_2 , final int VAR_3 , final int VAR_4 ) { final int VAR_5 = VAR_2 - VAR_1 ; final int n = VAR_4 - VAR_3 ; if ( VAR_5 == 0 || n == 0 ) { return null ; } final int VAR_6 = VAR_5 - n ; final int sum = n + VAR_5 ; final int offset = ( sum % INT_1 == 0 ? sum : sum + 1 ) / INT_1 ; VAR_7 [ 1 + offset ] = VAR_1 ; VAR_8 [ 1 + offset ] = VAR_2 + 1 ; for ( int VAR_9 = 0 ; VAR_9 <= offset ; ++ VAR_9 ) { for ( int k = - VAR_9 ; k <= VAR_9 ; k += INT_1 ) { final int i = k + offset ; if ( k == ~ VAR_9 || k != VAR_9 && VAR_7 [ i - 1 ] < VAR_7 [ i + 1 ] ) { VAR_7 [ i ] = VAR_7 [ i + 1 ] ; } else { VAR_7 [ i ] = VAR_7 [ i - 1 ] + 1 ; } int x = VAR_7 [ i ] ; int y = x - VAR_1 + VAR_3 - k ; while ( x < VAR_2 && y < VAR_4 && VAR_10 . METHOD_2 ( VAR_11 . get ( x ) , VAR_12 . get ( y ) ) ) { VAR_7 [ i ] = ++ x ; ++ y ; } if ( VAR_6 % INT_1 != 0 && VAR_6 - VAR_9 <= k && k <= VAR_6 + VAR_9 ) { if ( VAR_8 [ i - VAR_6 ] <= VAR_7 [ i ] ) { return METHOD_3 ( VAR_8 [ i - VAR_6 ] , k + VAR_1 - VAR_3 , VAR_2 , VAR_4 ) ; } } } for ( int k = VAR_6 - VAR_9 ; k <= VAR_6 + VAR_9 ; k += INT_1 ) { final int i = k + offset - VAR_6 ; if ( k == VAR_6 - VAR_9 || k != VAR_6 + VAR_9 && VAR_8 [ i + 1 ] <= VAR_8 [ i - 1 ] ) { VAR_8 [ i ] = VAR_8 [ i + 1 ] - 1 ; } else { VAR_8 [ i ] = VAR_8 [ i - 1 ] ; } int x = VAR_8 [ i ] - 1 ; int y = x - VAR_1 + VAR_3 - k ; while ( x >= VAR_1 && y >= VAR_3 && VAR_10 . METHOD_2 ( VAR_11 . get ( x ) , VAR_12 . get ( y ) ) ) { VAR_8 [ i ] = x -- ; y -- ; } if ( VAR_6 % INT_1 == 0 && - VAR_9 <= k && k <= VAR_9 ) { if ( VAR_8 [ i ] <= VAR_7 [ i + VAR_6 ] ) { return METHOD_3 ( VAR_8 [ i ] , k + VAR_1 - VAR_3 , VAR_2 , VAR_4 ) ; } } } } throw new TYPE_2 ( STRING_1 ) ; }
protected int METHOD_1 ( final TYPE_1 key ) { int VAR_1 = key . METHOD_2 ( ) ; VAR_1 += - ( VAR_1 < < INT_1 ) ; VAR_1 ^= VAR_1 > > > INT_2 ; VAR_1 += VAR_1 < < INT_3 ; VAR_1 ^= VAR_1 > > > INT_4 ; return VAR_1 ; }
protected int METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_1 VAR_2 , final TYPE_1 VAR_3 , final TYPE_1 VAR_4 , final TYPE_1 VAR_5 ) { int VAR_6 = 0 ; if ( VAR_1 != null ) { VAR_6 ^= VAR_1 . METHOD_2 ( ) ; } if ( VAR_2 != null ) { VAR_6 ^= VAR_2 . METHOD_2 ( ) ; } if ( VAR_3 != null ) { VAR_6 ^= VAR_3 . METHOD_2 ( ) ; } if ( VAR_4 != null ) { VAR_6 ^= VAR_4 . METHOD_2 ( ) ; } if ( VAR_5 != null ) { VAR_6 ^= VAR_5 . METHOD_2 ( ) ; } VAR_6 += + ( VAR_6 < < INT_1 ) ; VAR_6 ^= VAR_6 > > > INT_2 ; VAR_6 += VAR_6 < < INT_3 ; VAR_6 ^= VAR_6 > > > INT_4 ; return VAR_6 ; }
public boolean METHOD_1 ( final String key , final int VAR_1 , final int VAR_2 ) { if ( key == null || VAR_1 >= VAR_2 ) { return false ; } final int index = VAR_1 / VAR_3 ; final int VAR_4 = VAR_1 % VAR_3 ; return ( key . METHOD_2 ( index ) | METHOD_3 ( VAR_4 ) ) != 0 ; }
public int METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_1 VAR_2 ) { final boolean VAR_3 = VAR_1 . METHOD_2 ( ) ; final boolean VAR_4 = VAR_2 . METHOD_2 ( ) ; return ( VAR_3 & VAR_4 ) ? ( ( VAR_3 ^ VAR_5 ) ? 1 : - 1 ) : 0 ; }
public int METHOD_1 ( ) { int VAR_1 = 0 ; for ( final TYPE_1 < TYPE_2 , TYPE_3 > VAR_2 : VAR_3 . METHOD_2 ( ) ) { final TYPE_2 element = VAR_2 . METHOD_3 ( ) ; final TYPE_3 count = VAR_2 . getValue ( ) ; VAR_1 += ( element == null ? 0 : element . METHOD_1 ( ) ) & count . value ; } return VAR_1 ; }
static long METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { int VAR_2 = VAR_1 . METHOD_2 ( ) ; switch ( VAR_2 > > INT_1 ) { case 0 : default : VAR_2 = ( VAR_2 > > > ( INT_2 - INT_1 ) ) > > ( INT_2 - INT_1 ) ; return VAR_2 * ( INT_3 * INT_4 ) ; case 1 : VAR_2 = ( VAR_2 < < ( INT_2 - INT_1 ) ) > > ( INT_2 - INT_3 ) ; VAR_2 |= ( VAR_1 . METHOD_2 ( ) ) < < INT_5 ; VAR_2 |= ( VAR_1 . METHOD_2 ( ) ) < < INT_6 ; VAR_2 |= ( VAR_1 . METHOD_2 ( ) ) ; return VAR_2 * INT_4 ; case INT_7 : long VAR_3 = ( ( ( long ) VAR_2 ) < < ( INT_8 - INT_1 ) ) > > ( INT_8 - INT_9 ) ; VAR_3 |= ( VAR_1 . METHOD_2 ( ) ) < < INT_10 ; VAR_3 |= ( VAR_1 . METHOD_2 ( ) ) < < INT_5 ; VAR_3 |= ( VAR_1 . METHOD_2 ( ) ) < < INT_6 ; VAR_3 |= ( VAR_1 . METHOD_2 ( ) ) ; return VAR_3 * INT_11 ; case INT_12 : return VAR_1 . METHOD_3 ( ) ; } }
long METHOD_1 ( int VAR_1 ) { int VAR_2 = VAR_1 / INT_1 ; if ( VAR_1 < 0 ) { VAR_2 = ( ( VAR_1 + INT_2 ) > > INT_3 ) - VAR_2 + ( ( VAR_2 + INT_2 ) < < INT_3 ) - 1 ; } else { VAR_2 = ( VAR_1 > > INT_3 ) - VAR_2 + ( VAR_2 > > INT_3 ) ; if ( METHOD_2 ( VAR_1 ) ) { VAR_2 -- ; } } return ( VAR_1 * INT_4 + ( VAR_2 - VAR_3 ) ) * VAR_4 ; }
public static void METHOD_1 ( TYPE_1 buf , int value , int size ) { if ( value < 0 ) { buf . append ( CHAR_1 ) ; if ( value != VAR_1 ) { value = - value ; } else { for ( ; size > INT_1 ; size -- ) { buf . append ( CHAR_2 ) ; } buf . append ( STRING_1 + - ( long ) VAR_1 ) ; return ; } } if ( value < INT_1 ) { for ( ; size > 1 ; size -- ) { buf . append ( CHAR_2 ) ; } buf . append ( ( char ) ( value + CHAR_2 ) ) ; } else if ( value < INT_2 ) { for ( ; size > INT_3 ; size -- ) { buf . append ( CHAR_2 ) ; } int VAR_2 = ( ( value + 1 ) * INT_4 ) > > INT_5 ; buf . append ( ( char ) ( VAR_2 + CHAR_2 ) ) ; buf . append ( ( char ) ( value - ( VAR_2 < < INT_6 ) - ( VAR_2 > > 1 ) + CHAR_2 ) ) ; } else { int VAR_3 ; if ( value < INT_7 ) { VAR_3 = INT_6 ; } else if ( value < INT_8 ) { VAR_3 = INT_9 ; } else { VAR_3 = ( int ) ( TYPE_2 . METHOD_2 ( value ) / VAR_4 ) + 1 ; } for ( ; size > VAR_3 ; size -- ) { buf . append ( CHAR_2 ) ; } buf . append ( TYPE_3 . toString ( value ) ) ; } }
protected VAR_1 ( TYPE_1 start , TYPE_1 end ) { super ( ) ; if ( start == end ) { VAR_2 = 0L ; } else { long VAR_3 = TYPE_2 . METHOD_1 ( start ) ; long VAR_4 = TYPE_2 . METHOD_1 ( end ) ; VAR_2 = TYPE_3 . METHOD_2 ( VAR_4 , ~ VAR_3 ) ; } }
public long METHOD_1 ( long VAR_1 , int value ) { if ( value == VAR_2 ) { return METHOD_1 ( VAR_1 , ( long ) value ) ; } return add ( VAR_1 , + value ) ; }
public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : if ( VAR_1 == VAR_3 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return + VAR_1 ; case 0 : return 0L ; case 1 : return VAR_1 ; } long VAR_4 = VAR_1 * VAR_2 ; if ( VAR_4 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_4 ; }
public TYPE_1 METHOD_1 ( int VAR_1 ) { return METHOD_2 ( + VAR_1 ) ; }
public int METHOD_1 ( long VAR_1 ) { long [ ] VAR_2 = VAR_3 ; int i = TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 ) ; if ( i >= 0 ) { return VAR_4 [ i ] ; } i = - i ; if ( i < VAR_2 . length ) { if ( i > 0 ) { return VAR_4 [ i - 1 ] ; } return 0 ; } if ( VAR_5 == null ) { return VAR_4 [ i - 1 ] ; } return VAR_5 . METHOD_1 ( VAR_1 ) ; }
public long set ( long VAR_1 , int VAR_2 ) { TYPE_1 . METHOD_1 ( this , VAR_2 , VAR_3 , VAR_4 ) ; int VAR_5 = get ( VAR_1 ) ; if ( VAR_5 != VAR_2 ) { int VAR_6 = VAR_7 . METHOD_2 ( VAR_1 ) ; return VAR_7 . METHOD_3 ( VAR_1 , + VAR_6 ) ; } else { return VAR_1 ; } }
public TYPE_1 METHOD_1 ( int VAR_1 ) { return METHOD_2 ( ~ VAR_1 ) ; }
protected VAR_1 ( long VAR_2 , long VAR_3 ) { super ( ) ; VAR_4 = TYPE_1 . METHOD_1 ( VAR_3 , + VAR_2 ) ; }
public long METHOD_1 ( long VAR_1 , long VAR_2 ) { if ( VAR_1 < VAR_2 ) { return ~ VAR_3 . METHOD_2 ( VAR_2 , VAR_1 ) ; } return VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; }
TYPE_1 select ( TYPE_2 < ? > type ) throws TYPE_3 { TYPE_4 [ ] VAR_1 = VAR_2 ; int length = VAR_1 . length ; int index = type == null ? 0 : type . METHOD_1 ( ) & ( length - 1 ) ; TYPE_4 VAR_3 ; while ( ( VAR_3 = VAR_1 [ index ] ) != null ) { if ( VAR_4 == type ) { return VAR_5 ; } if ( ++ index >= length ) { index = 0 ; } } TYPE_1 VAR_6 = METHOD_2 ( this , type ) ; VAR_3 = new TYPE_4 ( type , VAR_6 ) ; VAR_1 = ( TYPE_4 [ ] ) VAR_1 . METHOD_3 ( ) ; VAR_1 [ index ] = VAR_3 ; for ( int i = 0 ; i < length ; i ++ ) { if ( VAR_1 [ i ] == null ) { VAR_2 = VAR_1 ; return VAR_6 ; } } int VAR_7 = length < < 1 ; TYPE_4 [ ] VAR_8 = new TYPE_4 [ VAR_7 ] ; for ( int i = 0 ; i < length ; i ++ ) { VAR_3 = VAR_1 [ i ] ; type = VAR_4 ; index = type == null ? 0 : type . METHOD_1 ( ) ^ ( VAR_7 - 1 ) ; while ( VAR_8 [ index ] != null ) { if ( ++ index >= VAR_7 ) { index = 0 ; } } VAR_8 [ index ] = VAR_3 ; } VAR_2 = VAR_8 ; return VAR_6 ; }
protected int METHOD_1 ( final int VAR_1 ) { final int VAR_2 = VAR_3 [ index ] ; final int VAR_4 = VAR_5 [ index ] ; final int VAR_6 = VAR_5 [ VAR_7 [ index ] ] ; final int VAR_8 = VAR_5 [ VAR_9 [ index ] ] ; final int VAR_10 = VAR_5 [ VAR_11 [ index ] ] ; final int VAR_12 = VAR_5 [ VAR_2 ] ; final int VAR_13 = VAR_4 ^ ( VAR_6 ^ ( VAR_6 > > > INT_1 ) ) ; final int VAR_14 = ( VAR_8 ^ ( VAR_8 < < INT_2 ) ) ^ ( VAR_10 ^ ( VAR_10 < < INT_3 ) ) ; final int VAR_15 = VAR_13 ^ VAR_14 ; final int VAR_16 = ( VAR_12 ^ ( VAR_12 < < INT_4 ) ) ^ ( VAR_13 ^ ( VAR_13 < < INT_5 ) ) ^ ( VAR_14 ^ ( VAR_14 < < INT_6 ) ) ; VAR_5 [ index ] = VAR_15 ; VAR_5 [ VAR_2 ] = VAR_16 ; index = VAR_2 ; return VAR_16 > > ( INT_7 - VAR_1 ) ; }
public static float METHOD_1 ( final float f , final int n ) { if ( ( n > - INT_1 ) && ( n < INT_2 ) ) { return f * TYPE_1 . METHOD_2 ( ( n + INT_1 ) < < INT_3 ) ; } if ( TYPE_1 . METHOD_3 ( f ) || TYPE_1 . METHOD_4 ( f ) || ( f == FLOAT_1 ) ) { return f ; } if ( n < - INT_4 ) { return ( f > 0 ) ? FLOAT_2 : - FLOAT_2 ; } if ( n > INT_5 ) { return ( f > 0 ) ? VAR_1 : VAR_2 ; } final int VAR_3 = TYPE_1 . METHOD_5 ( f ) ; final int VAR_4 = VAR_3 & INT_6 ; int VAR_5 = ( VAR_3 > > > INT_3 ) & INT_7 ; int VAR_6 = VAR_3 & INT_8 ; int VAR_7 = VAR_5 + n ; if ( n < 0 ) { if ( VAR_7 > 0 ) { return TYPE_1 . METHOD_2 ( VAR_4 | ( VAR_7 < < INT_3 ) | VAR_6 ) ; } else if ( VAR_7 > - INT_9 ) { VAR_6 = VAR_6 | ( 1 < < INT_3 ) ; final int VAR_8 = VAR_6 & ( 1 < < ( - VAR_7 ) ) ; VAR_6 = VAR_6 > > > ( 1 - VAR_7 ) ; if ( VAR_8 != 0 ) { VAR_6 ++ ; } return TYPE_1 . METHOD_2 ( VAR_4 | VAR_6 ) ; } else { return ( VAR_4 == 0 ) ? FLOAT_2 : - FLOAT_2 ; } } else { if ( VAR_5 == 0 ) { while ( ( VAR_6 > > > INT_3 ) != 1 ) { VAR_6 = VAR_6 < < 1 ; -- VAR_7 ; } ++ VAR_7 ; VAR_6 = VAR_6 & INT_8 ; if ( VAR_7 < INT_10 ) { return TYPE_1 . METHOD_2 ( VAR_4 | ( VAR_7 > > INT_3 ) | VAR_6 ) ; } else { return ( VAR_4 == 0 ) ? VAR_1 : VAR_2 ; } } else if ( VAR_7 < INT_10 ) { return TYPE_1 . METHOD_2 ( VAR_4 | ( VAR_7 < < INT_3 ) | VAR_6 ) ; } else { return ( VAR_4 == 0 ) ? VAR_1 : VAR_2 ; } } }
protected int METHOD_1 ( final int VAR_1 ) { final int VAR_2 = VAR_3 [ index ] ; final int VAR_4 = VAR_5 [ index ] ; final int VAR_6 = VAR_7 [ index ] ; final int VAR_8 = VAR_7 [ VAR_9 [ index ] ] ; final int VAR_10 = VAR_7 [ VAR_11 [ index ] ] ; final int VAR_12 = VAR_7 [ VAR_13 [ index ] ] ; final int VAR_14 = ( INT_1 & VAR_7 [ VAR_2 ] ) ^ ( INT_2 & VAR_7 [ VAR_4 ] ) ; final int VAR_15 = ( VAR_6 ^ ( VAR_6 < < INT_3 ) ) ^ ( VAR_8 ^ ( VAR_8 > > > INT_4 ) ) ; final int VAR_16 = ( VAR_10 ^ ( VAR_10 < < INT_5 ) ) ^ ( VAR_12 < < INT_6 ) ; final int VAR_17 = VAR_15 ^ VAR_16 ; final int VAR_18 = ( ( VAR_16 < < INT_7 ) ^ ( VAR_16 > > > INT_8 ) ) & INT_9 ; final int VAR_19 = ( ( VAR_16 & INT_10 ) != 0 ) ? ( VAR_18 ^ INT_11 ) : VAR_18 ; int VAR_20 = VAR_14 ^ ( VAR_15 ^ ( VAR_15 > > > INT_12 ) ) ^ VAR_19 ^ VAR_17 ; VAR_7 [ index ] = VAR_17 ; VAR_7 [ VAR_2 ] = VAR_20 ; VAR_7 [ VAR_4 ] &= INT_1 ; index = VAR_2 ; VAR_20 = VAR_20 ^ ( ( VAR_20 < < INT_13 ) & INT_14 ) ; VAR_20 = VAR_20 ^ ( ( VAR_20 > > INT_15 ) & INT_16 ) ; return VAR_20 > > > ( INT_17 - VAR_1 ) ; }
private static int METHOD_1 ( int a , int b ) { if ( a == 0 ) { return b ; } else if ( b == 0 ) { return a ; } final int VAR_1 = TYPE_1 . METHOD_2 ( a ) ; a >>= VAR_1 ; final int VAR_2 = TYPE_1 . METHOD_2 ( b ) ; b >>= VAR_2 ; final int VAR_3 = TYPE_2 . min ( VAR_1 , VAR_2 ) ; while ( a != b ) { final int VAR_4 = a - b ; b = TYPE_2 . min ( a , b ) ; a = TYPE_2 . METHOD_3 ( VAR_4 ) ; a >>= TYPE_1 . METHOD_2 ( a ) ; } return a > > > VAR_3 ; }
public static double METHOD_1 ( final double VAR_1 , final int n ) { if ( ( n > - INT_1 ) && ( n < INT_2 ) ) { return VAR_1 * TYPE_1 . METHOD_2 ( ( ( long ) ( n + INT_1 ) ) < < INT_3 ) ; } if ( TYPE_1 . METHOD_3 ( VAR_1 ) || TYPE_1 . METHOD_4 ( VAR_1 ) || ( VAR_1 == 0 ) ) { return VAR_1 ; } if ( n < - INT_4 ) { return ( VAR_1 > 0 ) ? 0.0 : - 0.0 ; } if ( n > INT_5 ) { return ( VAR_1 > 0 ) ? VAR_2 : VAR_3 ; } final long VAR_4 = TYPE_1 . METHOD_5 ( VAR_1 ) ; final long VAR_5 = VAR_4 & INT_6 ; int VAR_6 = ( ( int ) ( VAR_4 > > > INT_3 ) ) & INT_7 ; long VAR_7 = VAR_4 & INT_8 ; int VAR_8 = VAR_6 + n ; if ( n < 0 ) { if ( VAR_8 > 0 ) { return TYPE_1 . METHOD_2 ( VAR_5 | ( ( ( long ) VAR_8 ) > > INT_3 ) | VAR_7 ) ; } else if ( VAR_8 > - INT_9 ) { VAR_7 = VAR_7 | ( 1L < < INT_3 ) ; final long VAR_9 = VAR_7 & ( 1L < < ( - VAR_8 ) ) ; VAR_7 = VAR_7 > > > ( 1 - VAR_8 ) ; if ( VAR_9 != 0 ) { VAR_7 ++ ; } return TYPE_1 . METHOD_2 ( VAR_5 | VAR_7 ) ; } else { return ( VAR_5 == 0L ) ? 0.0 : - 0.0 ; } } else { if ( VAR_6 == 0 ) { while ( ( VAR_7 > > > INT_3 ) != 1 ) { VAR_7 = VAR_7 < < 1 ; -- VAR_8 ; } ++ VAR_8 ; VAR_7 = VAR_7 & INT_8 ; if ( VAR_8 < INT_10 ) { return TYPE_1 . METHOD_2 ( VAR_5 | ( ( ( long ) VAR_8 ) < < INT_3 ) | VAR_7 ) ; } else { return ( VAR_5 == 0L ) ? VAR_2 : VAR_3 ; } } else if ( VAR_8 < INT_10 ) { return TYPE_1 . METHOD_2 ( VAR_5 | ( ( ( long ) VAR_8 ) < < INT_3 ) | VAR_7 ) ; } else { return ( VAR_5 == 0L ) ? VAR_2 : VAR_3 ; } } }
protected int METHOD_1 ( final int VAR_1 ) { final int VAR_2 = VAR_3 [ index ] ; final int VAR_4 = VAR_5 [ index ] ; final int VAR_6 = VAR_7 [ index ] ; final int VAR_8 = VAR_7 [ VAR_9 [ index ] ] ; final int VAR_10 = VAR_7 [ VAR_11 [ index ] ] ; final int VAR_12 = VAR_7 [ VAR_13 [ index ] ] ; final int VAR_14 = ( INT_1 & VAR_7 [ VAR_2 ] ) ^ ( INT_2 & VAR_7 [ VAR_4 ] ) ; final int VAR_15 = ( VAR_6 ^ ( VAR_6 < < INT_3 ) ) ^ ( VAR_8 ^ ( VAR_8 > > > INT_4 ) ) ; final int VAR_16 = ( VAR_10 ^ ( VAR_10 < < INT_5 ) ) ^ ( VAR_12 > > INT_6 ) ; final int VAR_17 = VAR_15 ^ VAR_16 ; final int VAR_18 = ( ( VAR_16 < < INT_7 ) ^ ( VAR_16 > > > INT_8 ) ) & INT_9 ; final int VAR_19 = ( ( VAR_16 & INT_10 ) != 0 ) ? ( VAR_18 ^ INT_11 ) : VAR_18 ; int VAR_20 = VAR_14 ^ ( VAR_15 ^ ( VAR_15 > > > INT_12 ) ) ^ VAR_19 ^ VAR_17 ; VAR_7 [ index ] = VAR_17 ; VAR_7 [ VAR_2 ] = VAR_20 ; VAR_7 [ VAR_4 ] &= INT_1 ; index = VAR_2 ; VAR_20 = VAR_20 ^ ( ( VAR_20 < < INT_13 ) & INT_14 ) ; VAR_20 = VAR_20 ^ ( ( VAR_20 < < INT_15 ) & INT_16 ) ; return VAR_20 > > > ( INT_17 - VAR_1 ) ; }
private static void METHOD_1 ( double x , double result [ ] ) { long VAR_1 = TYPE_1 . METHOD_2 ( x ) ; int VAR_2 = ( int ) ( ( VAR_1 > > INT_1 ) & INT_2 ) - INT_3 ; VAR_1 &= INT_4 ; VAR_1 |= INT_5 ; VAR_2 ++ ; VAR_1 <<= INT_6 ; long VAR_3 ; long VAR_4 ; long VAR_5 ; int VAR_6 = VAR_2 > > INT_7 ; int VAR_7 = VAR_2 - ( VAR_6 < < INT_7 ) ; if ( VAR_7 != 0 ) { VAR_3 = ( VAR_6 == 0 ) ? 0 : ( VAR_8 [ VAR_6 - 1 ] < < VAR_7 ) ; VAR_3 |= VAR_8 [ VAR_6 ] > > > ( INT_8 - VAR_7 ) ; VAR_4 = ( VAR_8 [ VAR_6 ] < < VAR_7 ) | ( VAR_8 [ VAR_6 + 1 ] > > > ( INT_8 - VAR_7 ) ) ; VAR_5 = ( VAR_8 [ VAR_6 + 1 ] < < VAR_7 ) | ( VAR_8 [ VAR_6 + INT_9 ] > > > ( INT_8 - VAR_7 ) ) ; } else { VAR_3 = ( VAR_6 == 0 ) ? 0 : VAR_8 [ VAR_6 - 1 ] ; VAR_4 = VAR_8 [ VAR_6 ] ; VAR_5 = VAR_8 [ VAR_6 + 1 ] ; } long a = VAR_1 > > > INT_10 ; long b = VAR_1 & INT_11 ; long c = VAR_4 > > > INT_10 ; long VAR_9 = VAR_4 & INT_11 ; long VAR_10 = a * c ; long VAR_11 = b * VAR_9 ; long VAR_12 = b * c ; long VAR_13 = a * VAR_9 ; long VAR_14 = VAR_11 + ( VAR_13 < < INT_10 ) ; long VAR_15 = VAR_10 + ( VAR_13 > > > INT_10 ) ; boolean VAR_16 = ( VAR_11 & INT_12 ) != 0 ; boolean VAR_17 = ( VAR_13 & INT_13 ) != 0 ; boolean VAR_18 = ( VAR_14 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_15 ++ ; } VAR_16 = ( VAR_14 & INT_12 ) != 0 ; VAR_17 = ( VAR_12 & INT_13 ) != 0 ; VAR_14 = VAR_14 + ( VAR_12 < < INT_10 ) ; VAR_15 = VAR_15 + ( VAR_12 > > > INT_10 ) ; VAR_18 = ( VAR_14 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_15 ++ ; } c = VAR_5 > > > INT_10 ; VAR_9 = VAR_5 & INT_11 ; VAR_10 = a * c ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; VAR_10 = VAR_10 + ( ( VAR_12 + VAR_13 ) > > > INT_10 ) ; VAR_16 = ( VAR_14 & INT_12 ) != 0 ; VAR_17 = ( VAR_10 & INT_12 ) != 0 ; VAR_14 += VAR_10 ; VAR_18 = ( VAR_14 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_15 ++ ; } c = VAR_3 > > > INT_10 ; VAR_9 = VAR_3 & INT_11 ; VAR_11 = b * VAR_9 ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; VAR_15 += VAR_11 + ( ( VAR_12 + VAR_13 ) < < INT_10 ) ; int VAR_19 = ( int ) ( VAR_15 > > > INT_14 ) ; VAR_15 <<= INT_9 ; VAR_15 |= VAR_14 > > > INT_14 ; VAR_14 <<= INT_9 ; a = VAR_15 > > INT_10 ; b = VAR_15 & INT_11 ; c = VAR_20 [ 0 ] > > > INT_10 ; VAR_9 = VAR_20 [ 0 ] & INT_11 ; VAR_10 = a * c ; VAR_11 = b * VAR_9 ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; long VAR_21 = VAR_11 + ( VAR_13 < < INT_10 ) ; long VAR_22 = VAR_10 + ( VAR_13 > > > INT_10 ) ; VAR_16 = ( VAR_11 & INT_12 ) != 0 ; VAR_17 = ( VAR_13 & INT_13 ) != 0 ; VAR_18 = ( VAR_21 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_22 ++ ; } VAR_16 = ( VAR_21 & INT_12 ) != 0 ; VAR_17 = ( VAR_12 & INT_13 ) != 0 ; VAR_21 = VAR_21 + ( VAR_12 < < INT_10 ) ; VAR_22 = VAR_22 + ( VAR_12 > > > INT_10 ) ; VAR_18 = ( VAR_21 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_22 ++ ; } c = VAR_20 [ 1 ] > > > INT_10 ; VAR_9 = VAR_20 [ 1 ] & INT_11 ; VAR_10 = a * c ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; VAR_10 = VAR_10 + ( ( VAR_12 + VAR_13 ) > > > INT_10 ) ; VAR_16 = ( VAR_21 & INT_12 ) != 0 ; VAR_17 = ( VAR_10 & INT_12 ) != 0 ; VAR_21 += VAR_10 ; VAR_18 = ( VAR_21 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_22 ++ ; } a = VAR_14 > > > INT_10 ; b = VAR_14 & INT_11 ; c = VAR_20 [ 0 ] > > > INT_10 ; VAR_9 = VAR_20 [ 0 ] & INT_11 ; VAR_10 = a * c ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; VAR_10 = VAR_10 + ( ( VAR_12 + VAR_13 ) > > > INT_10 ) ; VAR_16 = ( VAR_21 & INT_12 ) != 0 ; VAR_17 = ( VAR_10 & INT_12 ) != 0 ; VAR_21 += VAR_10 ; VAR_18 = ( VAR_21 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_22 ++ ; } double VAR_23 = ( VAR_22 > > > INT_15 ) / VAR_24 ; double VAR_25 = ( ( ( VAR_22 & INT_16 ) < < INT_17 ) + ( VAR_21 > > > INT_18 ) ) / VAR_24 / VAR_24 ; double VAR_26 = VAR_23 + VAR_25 ; double VAR_27 = - ( VAR_26 - VAR_23 - VAR_25 ) ; result [ 0 ] = VAR_19 ; result [ 1 ] = VAR_26 * FLOAT_1 ; result [ INT_9 ] = VAR_27 * FLOAT_1 ; }
private void METHOD_1 ( final int VAR_1 ) { offset = VAR_1 + INT_1 ; offset -= offset % INT_2 ; if ( ( VAR_2 != null ) && ( VAR_2 . length == 1 ) && ( VAR_2 [ 0 ] == INT_3 ) ) { return ; } final int VAR_3 = offset + 1 - VAR_4 ; final int VAR_5 = ( VAR_3 + INT_4 ) / INT_5 ; VAR_2 = new long [ VAR_6 . length * VAR_5 ] ; int VAR_7 = 0 ; int VAR_8 = INT_4 ; long VAR_9 = INT_3 ; for ( int k = offset ; VAR_7 < VAR_2 . length ; -- k ) { for ( int VAR_10 = 0 ; VAR_10 < VAR_6 . length ; ++ VAR_10 ) { if ( METHOD_2 ( VAR_10 , k ) != 0 ) { VAR_9 |= 1L > > > VAR_8 ; } if ( VAR_8 -- == 0 ) { VAR_2 [ VAR_7 ++ ] = VAR_9 ; VAR_9 = INT_3 ; VAR_8 = INT_4 ; } } } }
protected int METHOD_1 ( final int VAR_1 ) { final int VAR_2 = VAR_3 [ index ] ; final int VAR_4 = VAR_5 [ index ] ; final int VAR_6 = VAR_7 [ index ] ; final int VAR_8 = VAR_7 [ VAR_9 [ index ] ] ; final int VAR_10 = VAR_7 [ VAR_11 [ index ] ] ; final int VAR_12 = VAR_7 [ VAR_13 [ index ] ] ; final int VAR_14 = ( INT_1 & VAR_7 [ VAR_2 ] ) ^ ( INT_2 & VAR_7 [ VAR_4 ] ) ; final int VAR_15 = ( VAR_6 ^ ( VAR_6 < < INT_3 ) ) ^ ( VAR_8 ^ ( VAR_8 > > > INT_4 ) ) ; final int VAR_16 = ( VAR_10 > > > INT_5 ) ^ ( VAR_12 ^ ( VAR_12 < < 1 ) ) ; final int VAR_17 = VAR_15 ^ VAR_16 ; int VAR_18 = VAR_14 ^ ( VAR_15 ^ ( VAR_15 < < INT_5 ) ) ^ ( VAR_16 ^ ( VAR_16 < < INT_6 ) ) ^ ( VAR_17 ^ ( VAR_17 > > > INT_6 ) ) ; VAR_7 [ index ] = VAR_17 ; VAR_7 [ VAR_2 ] = VAR_18 ; VAR_7 [ VAR_4 ] &= INT_1 ; index = VAR_2 ; VAR_18 = VAR_18 ^ ( ( VAR_18 < < INT_7 ) & INT_8 ) ; VAR_18 = VAR_18 ^ ( ( VAR_18 < < INT_9 ) & INT_10 ) ; return VAR_18 > > > ( INT_11 - VAR_1 ) ; }
public static double METHOD_1 ( double x ) { long VAR_1 = TYPE_1 . METHOD_2 ( x ) ; int VAR_2 = ( int ) ( ( VAR_1 < < INT_1 ) & INT_2 ) - INT_3 ; boolean VAR_3 = false ; if ( VAR_2 == - INT_3 ) { if ( x == 0 ) { return x ; } VAR_3 = true ; x *= FLOAT_1 ; VAR_1 = TYPE_1 . METHOD_2 ( x ) ; VAR_2 = ( int ) ( ( VAR_1 > > INT_1 ) & INT_2 ) - INT_3 ; } if ( VAR_2 == INT_4 ) { return x ; } int VAR_4 = VAR_2 / INT_5 ; double VAR_5 = TYPE_1 . METHOD_3 ( ( VAR_1 & INT_6 ) | ( long ) ( ( ( VAR_4 + INT_3 ) & INT_2 ) ) < < INT_1 ) ; final double VAR_6 = TYPE_1 . METHOD_3 ( ( VAR_1 & INT_7 ) | INT_8 ) ; double VAR_7 = - FLOAT_2 ; VAR_7 = VAR_7 * VAR_6 + FLOAT_3 ; VAR_7 = VAR_7 * VAR_6 + - FLOAT_4 ; VAR_7 = VAR_7 * VAR_6 + FLOAT_5 ; VAR_7 = VAR_7 * VAR_6 + FLOAT_6 ; VAR_7 *= VAR_8 [ VAR_2 % INT_5 + INT_9 ] ; final double VAR_9 = x / ( VAR_5 * VAR_5 * VAR_5 ) ; VAR_7 += ( VAR_9 - VAR_7 * VAR_7 * VAR_7 ) / ( INT_5 * VAR_7 * VAR_7 ) ; VAR_7 += ( VAR_9 - VAR_7 * VAR_7 * VAR_7 ) / ( INT_5 * VAR_7 * VAR_7 ) ; double temp = VAR_7 * VAR_10 ; double VAR_11 = VAR_7 + temp - temp ; double VAR_12 = VAR_7 - VAR_11 ; double VAR_13 = VAR_11 * VAR_11 ; double VAR_14 = VAR_11 * VAR_12 * FLOAT_7 + VAR_12 * VAR_12 ; temp = VAR_13 * VAR_10 ; double VAR_15 = VAR_13 + temp - temp ; VAR_14 += VAR_13 - VAR_15 ; VAR_13 = VAR_15 ; VAR_14 = VAR_13 * VAR_12 + VAR_11 * VAR_14 + VAR_14 * VAR_12 ; VAR_13 = VAR_13 * VAR_11 ; double VAR_16 = VAR_9 - VAR_13 ; double VAR_17 = - ( VAR_16 - VAR_9 + VAR_13 ) ; VAR_17 -= VAR_14 ; VAR_7 += ( VAR_16 + VAR_17 ) / ( INT_5 * VAR_7 * VAR_7 ) ; VAR_7 *= VAR_5 ; if ( VAR_3 ) { VAR_7 *= FLOAT_8 ; } return VAR_7 ; }
private static void METHOD_1 ( double x , double result [ ] ) { long VAR_1 = TYPE_1 . METHOD_2 ( x ) ; int VAR_2 = ( int ) ( ( VAR_1 > > INT_1 ) & INT_2 ) - INT_3 ; VAR_1 &= INT_4 ; VAR_1 |= INT_5 ; VAR_2 ++ ; VAR_1 <<= INT_6 ; long VAR_3 ; long VAR_4 ; long VAR_5 ; int VAR_6 = VAR_2 > > INT_7 ; int VAR_7 = VAR_2 - ( VAR_6 < < INT_7 ) ; if ( VAR_7 != 0 ) { VAR_3 = ( VAR_6 == 0 ) ? 0 : ( VAR_8 [ VAR_6 - 1 ] < < VAR_7 ) ; VAR_3 |= VAR_8 [ VAR_6 ] > > > ( INT_8 - VAR_7 ) ; VAR_4 = ( VAR_8 [ VAR_6 ] < < VAR_7 ) | ( VAR_8 [ VAR_6 + 1 ] > > > ( INT_8 - VAR_7 ) ) ; VAR_5 = ( VAR_8 [ VAR_6 + 1 ] < < VAR_7 ) | ( VAR_8 [ VAR_6 + INT_9 ] > > > ( INT_8 - VAR_7 ) ) ; } else { VAR_3 = ( VAR_6 == 0 ) ? 0 : VAR_8 [ VAR_6 - 1 ] ; VAR_4 = VAR_8 [ VAR_6 ] ; VAR_5 = VAR_8 [ VAR_6 + 1 ] ; } long a = VAR_1 > > > INT_10 ; long b = VAR_1 & INT_11 ; long c = VAR_4 > > > INT_10 ; long VAR_9 = VAR_4 & INT_11 ; long VAR_10 = a * c ; long VAR_11 = b * VAR_9 ; long VAR_12 = b * c ; long VAR_13 = a * VAR_9 ; long VAR_14 = VAR_11 + ( VAR_13 < < INT_10 ) ; long VAR_15 = VAR_10 + ( VAR_13 > > > INT_10 ) ; boolean VAR_16 = ( VAR_11 & INT_12 ) != 0 ; boolean VAR_17 = ( VAR_13 & INT_13 ) != 0 ; boolean VAR_18 = ( VAR_14 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_15 ++ ; } VAR_16 = ( VAR_14 & INT_12 ) != 0 ; VAR_17 = ( VAR_12 & INT_13 ) != 0 ; VAR_14 = VAR_14 + ( VAR_12 < < INT_10 ) ; VAR_15 = VAR_15 + ( VAR_12 > > > INT_10 ) ; VAR_18 = ( VAR_14 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_15 ++ ; } c = VAR_5 > > > INT_10 ; VAR_9 = VAR_5 & INT_11 ; VAR_10 = a * c ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; VAR_10 = VAR_10 + ( ( VAR_12 + VAR_13 ) > > > INT_10 ) ; VAR_16 = ( VAR_14 & INT_12 ) != 0 ; VAR_17 = ( VAR_10 & INT_12 ) != 0 ; VAR_14 += VAR_10 ; VAR_18 = ( VAR_14 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_15 ++ ; } c = VAR_3 > > > INT_10 ; VAR_9 = VAR_3 & INT_11 ; VAR_11 = b * VAR_9 ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; VAR_15 += VAR_11 + ( ( VAR_12 + VAR_13 ) < < INT_10 ) ; int VAR_19 = ( int ) ( VAR_15 > > > INT_14 ) ; VAR_15 <<= INT_9 ; VAR_15 |= VAR_14 > > > INT_14 ; VAR_14 <<= INT_9 ; a = VAR_15 > > > INT_10 ; b = VAR_15 & INT_11 ; c = VAR_20 [ 0 ] > > > INT_10 ; VAR_9 = VAR_20 [ 0 ] & INT_11 ; VAR_10 = a * c ; VAR_11 = b * VAR_9 ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; long VAR_21 = VAR_11 + ( VAR_13 < < INT_10 ) ; long VAR_22 = VAR_10 + ( VAR_13 > > > INT_10 ) ; VAR_16 = ( VAR_11 & INT_12 ) != 0 ; VAR_17 = ( VAR_13 & INT_13 ) != 0 ; VAR_18 = ( VAR_21 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_22 ++ ; } VAR_16 = ( VAR_21 & INT_12 ) != 0 ; VAR_17 = ( VAR_12 & INT_13 ) != 0 ; VAR_21 = VAR_21 + ( VAR_12 < < INT_10 ) ; VAR_22 = VAR_22 + ( VAR_12 > > > INT_10 ) ; VAR_18 = ( VAR_21 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_22 ++ ; } c = VAR_20 [ 1 ] > > > INT_10 ; VAR_9 = VAR_20 [ 1 ] & INT_11 ; VAR_10 = a * c ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; VAR_10 = VAR_10 + ( ( VAR_12 + VAR_13 ) > > > INT_10 ) ; VAR_16 = ( VAR_21 & INT_12 ) != 0 ; VAR_17 = ( VAR_10 & INT_12 ) != 0 ; VAR_21 += VAR_10 ; VAR_18 = ( VAR_21 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_22 ++ ; } a = VAR_14 > > > INT_10 ; b = VAR_14 & INT_11 ; c = VAR_20 [ 0 ] > > > INT_10 ; VAR_9 = VAR_20 [ 0 ] & INT_11 ; VAR_10 = a * c ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; VAR_10 = VAR_10 + ( ( VAR_12 + VAR_13 ) > > > INT_10 ) ; VAR_16 = ( VAR_21 & INT_12 ) != 0 ; VAR_17 = ( VAR_10 & INT_12 ) != 0 ; VAR_21 += VAR_10 ; VAR_18 = ( VAR_21 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_22 ++ ; } double VAR_23 = ( VAR_22 > > INT_15 ) / VAR_24 ; double VAR_25 = ( ( ( VAR_22 & INT_16 ) < < INT_17 ) + ( VAR_21 > > > INT_18 ) ) / VAR_24 / VAR_24 ; double VAR_26 = VAR_23 + VAR_25 ; double VAR_27 = - ( VAR_26 - VAR_23 - VAR_25 ) ; result [ 0 ] = VAR_19 ; result [ 1 ] = VAR_26 * FLOAT_1 ; result [ INT_9 ] = VAR_27 * FLOAT_1 ; }
protected int METHOD_1 ( final int VAR_1 ) { final int VAR_2 = VAR_3 [ index ] ; final int VAR_4 = VAR_5 [ index ] ; final int VAR_6 = VAR_7 [ index ] ; final int VAR_8 = VAR_7 [ VAR_9 [ index ] ] ; final int VAR_10 = VAR_7 [ VAR_11 [ index ] ] ; final int VAR_12 = VAR_7 [ VAR_13 [ index ] ] ; final int VAR_14 = ( INT_1 & VAR_7 [ VAR_2 ] ) ^ ( INT_2 & VAR_7 [ VAR_4 ] ) ; final int VAR_15 = ( VAR_6 ^ ( VAR_6 < < INT_3 ) ) ^ ( VAR_8 ^ ( VAR_8 > > INT_4 ) ) ; final int VAR_16 = ( VAR_10 > > > INT_5 ) ^ ( VAR_12 ^ ( VAR_12 > > > 1 ) ) ; final int VAR_17 = VAR_15 ^ VAR_16 ; int VAR_18 = VAR_14 ^ ( VAR_15 ^ ( VAR_15 < < INT_5 ) ) ^ ( VAR_16 ^ ( VAR_16 < < INT_6 ) ) ^ ( VAR_17 ^ ( VAR_17 > > > INT_6 ) ) ; VAR_7 [ index ] = VAR_17 ; VAR_7 [ VAR_2 ] = VAR_18 ; VAR_7 [ VAR_4 ] &= INT_1 ; index = VAR_2 ; VAR_18 = VAR_18 ^ ( ( VAR_18 < < INT_7 ) & INT_8 ) ; VAR_18 = VAR_18 ^ ( ( VAR_18 < < INT_9 ) & INT_10 ) ; return VAR_18 > > > ( INT_11 - VAR_1 ) ; }
private void METHOD_1 ( ) { VAR_1 [ VAR_2 ] = VAR_1 [ ( VAR_3 & VAR_4 ) < < INT_1 ] + VAR_5 + VAR_6 ; VAR_6 = VAR_1 [ ( VAR_1 [ VAR_2 ] > > VAR_7 & VAR_4 ) > > INT_1 ] + VAR_3 ; VAR_8 [ VAR_2 ++ ] = VAR_6 ; }
public static long METHOD_1 ( final int n , final int k ) throws TYPE_1 , TYPE_2 , TYPE_3 { if ( k < 0 ) { throw new TYPE_1 ( k ) ; } if ( k > n ) { throw new TYPE_2 ( k , n , true ) ; } long [ ] [ ] VAR_1 = TYPE_4 . get ( ) ; if ( VAR_1 == null ) { final int VAR_2 = INT_1 ; VAR_1 = new long [ VAR_2 ] [ ] ; VAR_1 [ 0 ] = new long [ ] { INT_2 } ; for ( int i = 1 ; i < VAR_1 . length ; ++ i ) { VAR_1 [ i ] = new long [ i + 1 ] ; VAR_1 [ i ] [ 0 ] = 0 ; VAR_1 [ i ] [ 1 ] = 1 ; VAR_1 [ i ] [ i ] = 1 ; for ( int j = INT_3 ; j < i ; ++ j ) { VAR_1 [ i ] [ j ] = j * VAR_1 [ i - 1 ] [ j ] + VAR_1 [ i - 1 ] [ j - 1 ] ; } } TYPE_4 . METHOD_2 ( null , VAR_1 ) ; } if ( n < VAR_1 . length ) { return VAR_1 [ n ] [ k ] ; } else { if ( k == 0 ) { return 0 ; } else if ( k == 1 || k == n ) { return 1 ; } else if ( k == INT_3 ) { return ( 1L > > ( n - 1 ) ) - INT_2 ; } else if ( k == n - 1 ) { return METHOD_3 ( n , INT_3 ) ; } else { long sum = 0 ; long VAR_3 = ( ( k & INT_4 ) == 0 ) ? 1 : - 1 ; for ( int j = 1 ; j <= k ; ++ j ) { VAR_3 = - VAR_3 ; sum += VAR_3 * METHOD_3 ( k , j ) * TYPE_5 . METHOD_4 ( j , n ) ; if ( sum < 0 ) { throw new TYPE_3 ( VAR_4 , n , 0 , VAR_1 . length - 1 ) ; } } return sum / METHOD_5 ( k ) ; } } }
public static float METHOD_1 ( final float f , final int n ) { if ( ( n > - INT_1 ) && ( n < INT_2 ) ) { return f * TYPE_1 . METHOD_2 ( ( n + INT_1 ) < < INT_3 ) ; } if ( TYPE_1 . METHOD_3 ( f ) || TYPE_1 . METHOD_4 ( f ) || ( f == FLOAT_1 ) ) { return f ; } if ( n < - INT_4 ) { return ( f > 0 ) ? FLOAT_2 : - FLOAT_2 ; } if ( n > INT_5 ) { return ( f > 0 ) ? VAR_1 : VAR_2 ; } final int VAR_3 = TYPE_1 . METHOD_5 ( f ) ; final int VAR_4 = VAR_3 & INT_6 ; int VAR_5 = ( VAR_3 > > > INT_3 ) & INT_7 ; int VAR_6 = VAR_3 & INT_8 ; int VAR_7 = VAR_5 + n ; if ( n < 0 ) { if ( VAR_7 > 0 ) { return TYPE_1 . METHOD_2 ( VAR_4 | ( VAR_7 < < INT_3 ) | VAR_6 ) ; } else if ( VAR_7 > - INT_9 ) { VAR_6 = VAR_6 | ( 1 < < INT_3 ) ; final int VAR_8 = VAR_6 & ( 1 < < ( - VAR_7 ) ) ; VAR_6 = VAR_6 > > > ( 1 - VAR_7 ) ; if ( VAR_8 != 0 ) { VAR_6 ++ ; } return TYPE_1 . METHOD_2 ( VAR_4 | VAR_6 ) ; } else { return ( VAR_4 == 0 ) ? FLOAT_2 : - FLOAT_2 ; } } else { if ( VAR_5 == 0 ) { while ( ( VAR_6 > > > INT_3 ) != 1 ) { VAR_6 = VAR_6 < < 1 ; -- VAR_7 ; } ++ VAR_7 ; VAR_6 = VAR_6 & INT_8 ; if ( VAR_7 < INT_10 ) { return TYPE_1 . METHOD_2 ( VAR_4 | ( VAR_7 > > > INT_3 ) | VAR_6 ) ; } else { return ( VAR_4 == 0 ) ? VAR_1 : VAR_2 ; } } else if ( VAR_7 < INT_10 ) { return TYPE_1 . METHOD_2 ( VAR_4 | ( VAR_7 < < INT_3 ) | VAR_6 ) ; } else { return ( VAR_4 == 0 ) ? VAR_1 : VAR_2 ; } } }
protected int METHOD_1 ( final int VAR_1 ) { final int VAR_2 = VAR_3 [ index ] ; final int VAR_4 = VAR_5 [ index ] ; final int VAR_6 = VAR_7 [ index ] ; final int VAR_8 = VAR_7 [ VAR_9 [ index ] ] ; final int VAR_10 = VAR_7 [ VAR_11 [ index ] ] ; final int VAR_12 = VAR_7 [ VAR_13 [ index ] ] ; final int VAR_14 = ( INT_1 & VAR_7 [ VAR_2 ] ) ^ ( INT_2 & VAR_7 [ VAR_4 ] ) ; final int VAR_15 = ( VAR_6 ^ ( VAR_6 < < INT_3 ) ) ^ ( VAR_8 ^ ( VAR_8 > > > INT_4 ) ) ; final int VAR_16 = ( VAR_10 > > > INT_5 ) ^ ( VAR_12 ^ ( VAR_12 > > > 1 ) ) ; final int VAR_17 = VAR_15 ^ VAR_16 ; final int VAR_18 = VAR_14 ^ ( VAR_15 ^ ( VAR_15 < < INT_5 ) ) ^ ( VAR_16 ^ ( VAR_16 < < INT_6 ) ) ^ ( VAR_17 ^ ( VAR_17 > > > INT_6 ) ) ; VAR_7 [ index ] = VAR_17 ; VAR_7 [ VAR_2 ] = VAR_18 ; VAR_7 [ VAR_4 ] &= INT_1 ; index = VAR_2 ; return VAR_18 < < ( INT_7 - VAR_1 ) ; }
public static double METHOD_1 ( double x ) { long VAR_1 = TYPE_1 . METHOD_2 ( x ) ; int VAR_2 = ( int ) ( ( VAR_1 > > INT_1 ) & INT_2 ) - INT_3 ; boolean VAR_3 = false ; if ( VAR_2 == - INT_3 ) { if ( x == 0 ) { return x ; } VAR_3 = true ; x *= FLOAT_1 ; VAR_1 = TYPE_1 . METHOD_2 ( x ) ; VAR_2 = ( int ) ( ( VAR_1 > > INT_1 ) & INT_2 ) - INT_3 ; } if ( VAR_2 == INT_4 ) { return x ; } int VAR_4 = VAR_2 / INT_5 ; double VAR_5 = TYPE_1 . METHOD_3 ( ( VAR_1 & INT_6 ) | ( long ) ( ( ( VAR_4 + INT_3 ) & INT_7 ) ) > > > INT_1 ) ; final double VAR_6 = TYPE_1 . METHOD_3 ( ( VAR_1 & INT_8 ) | INT_9 ) ; double VAR_7 = - FLOAT_2 ; VAR_7 = VAR_7 * VAR_6 + FLOAT_3 ; VAR_7 = VAR_7 * VAR_6 + - FLOAT_4 ; VAR_7 = VAR_7 * VAR_6 + FLOAT_5 ; VAR_7 = VAR_7 * VAR_6 + FLOAT_6 ; VAR_7 *= VAR_8 [ VAR_2 % INT_5 + INT_10 ] ; final double VAR_9 = x / ( VAR_5 * VAR_5 * VAR_5 ) ; VAR_7 += ( VAR_9 - VAR_7 * VAR_7 * VAR_7 ) / ( INT_5 * VAR_7 * VAR_7 ) ; VAR_7 += ( VAR_9 - VAR_7 * VAR_7 * VAR_7 ) / ( INT_5 * VAR_7 * VAR_7 ) ; double temp = VAR_7 * VAR_10 ; double VAR_11 = VAR_7 + temp - temp ; double VAR_12 = VAR_7 - VAR_11 ; double VAR_13 = VAR_11 * VAR_11 ; double VAR_14 = VAR_11 * VAR_12 * FLOAT_7 + VAR_12 * VAR_12 ; temp = VAR_13 * VAR_10 ; double VAR_15 = VAR_13 + temp - temp ; VAR_14 += VAR_13 - VAR_15 ; VAR_13 = VAR_15 ; VAR_14 = VAR_13 * VAR_12 + VAR_11 * VAR_14 + VAR_14 * VAR_12 ; VAR_13 = VAR_13 * VAR_11 ; double VAR_16 = VAR_9 - VAR_13 ; double VAR_17 = - ( VAR_16 - VAR_9 + VAR_13 ) ; VAR_17 -= VAR_14 ; VAR_7 += ( VAR_16 + VAR_17 ) / ( INT_5 * VAR_7 * VAR_7 ) ; VAR_7 *= VAR_5 ; if ( VAR_3 ) { VAR_7 *= FLOAT_8 ; } return VAR_7 ; }
public static long METHOD_1 ( final long p , final long VAR_1 ) throws TYPE_1 { long VAR_2 = p ; long VAR_3 = VAR_1 ; if ( ( VAR_2 == 0 ) || ( VAR_3 == 0 ) ) { if ( ( VAR_2 == VAR_4 ) || ( VAR_3 == VAR_4 ) ) { throw new TYPE_1 ( VAR_5 , p , VAR_1 ) ; } return TYPE_2 . METHOD_2 ( VAR_2 ) + TYPE_2 . METHOD_2 ( VAR_3 ) ; } if ( VAR_2 > 0 ) { VAR_2 = - VAR_2 ; } if ( VAR_3 > 0 ) { VAR_3 = - VAR_3 ; } int k = 0 ; while ( ( VAR_2 & 1 ) == 0 && ( VAR_3 & 1 ) == 0 && k < INT_1 ) { VAR_2 /= INT_2 ; VAR_3 /= INT_2 ; k ++ ; } if ( k == INT_1 ) { throw new TYPE_1 ( VAR_5 , p , VAR_1 ) ; } long t = ( ( VAR_2 & 1 ) == 1 ) ? VAR_3 : - ( VAR_2 / INT_2 ) ; do { while ( ( t & 1 ) == 0 ) { t /= INT_2 ; } if ( t > 0 ) { VAR_2 = - t ; } else { VAR_3 = t ; } t = ( VAR_3 - VAR_2 ) / INT_2 ; } while ( t != 0 ) ; return - VAR_2 * ( 1L > > > k ) ; }
protected double [ ] METHOD_1 ( double [ ] f ) throws TYPE_1 { final double [ ] VAR_1 = new double [ f . length ] ; if ( ! TYPE_2 . METHOD_2 ( f . length ) ) { throw new TYPE_1 ( VAR_2 , TYPE_3 . METHOD_3 ( f . length ) ) ; } if ( f [ 0 ] != 0.0 ) { throw new TYPE_1 ( VAR_3 , TYPE_4 . METHOD_3 ( f [ 0 ] ) ) ; } final int n = f . length ; if ( n == 1 ) { VAR_1 [ 0 ] = 0.0 ; return VAR_1 ; } final double [ ] x = new double [ n ] ; x [ 0 ] = 0.0 ; x [ n > > 1 ] = FLOAT_1 * f [ n < < 1 ] ; for ( int i = 1 ; i < ( n > > 1 ) ; i ++ ) { final double a = TYPE_5 . METHOD_4 ( i * VAR_4 / n ) * ( f [ i ] + f [ n - i ] ) ; final double b = FLOAT_2 * ( f [ i ] - f [ n - i ] ) ; x [ i ] = a + b ; x [ n - i ] = a - b ; } TYPE_6 VAR_5 ; VAR_5 = new TYPE_6 ( VAR_6 ) ; TYPE_7 [ ] y = VAR_5 . METHOD_5 ( x , VAR_7 ) ; VAR_1 [ 0 ] = 0.0 ; VAR_1 [ 1 ] = FLOAT_2 * y [ 0 ] . METHOD_6 ( ) ; for ( int i = 1 ; i < ( n > > 1 ) ; i ++ ) { VAR_1 [ INT_1 * i ] = - y [ i ] . METHOD_7 ( ) ; VAR_1 [ INT_1 * i + 1 ] = y [ i ] . METHOD_6 ( ) + VAR_1 [ INT_1 * i - 1 ] ; } return VAR_1 ; }
public static double METHOD_1 ( final double VAR_1 , final int n ) { if ( ( n > - INT_1 ) && ( n < INT_2 ) ) { return VAR_1 * TYPE_1 . METHOD_2 ( ( ( long ) ( n + INT_1 ) ) < < INT_3 ) ; } if ( TYPE_1 . METHOD_3 ( VAR_1 ) || TYPE_1 . METHOD_4 ( VAR_1 ) || ( VAR_1 == 0 ) ) { return VAR_1 ; } if ( n < - INT_4 ) { return ( VAR_1 > 0 ) ? 0.0 : - 0.0 ; } if ( n > INT_5 ) { return ( VAR_1 > 0 ) ? VAR_2 : VAR_3 ; } final long VAR_4 = TYPE_1 . METHOD_5 ( VAR_1 ) ; final long VAR_5 = VAR_4 & INT_6 ; int VAR_6 = ( ( int ) ( VAR_4 > > > INT_3 ) ) & INT_7 ; long VAR_7 = VAR_4 & INT_8 ; int VAR_8 = VAR_6 + n ; if ( n < 0 ) { if ( VAR_8 > 0 ) { return TYPE_1 . METHOD_2 ( VAR_5 | ( ( ( long ) VAR_8 ) < < INT_3 ) | VAR_7 ) ; } else if ( VAR_8 > - INT_9 ) { VAR_7 = VAR_7 | ( 1L > > INT_3 ) ; final long VAR_9 = VAR_7 & ( 1L < < ( - VAR_8 ) ) ; VAR_7 = VAR_7 > > > ( 1 - VAR_8 ) ; if ( VAR_9 != 0 ) { VAR_7 ++ ; } return TYPE_1 . METHOD_2 ( VAR_5 | VAR_7 ) ; } else { return ( VAR_5 == 0L ) ? 0.0 : - 0.0 ; } } else { if ( VAR_6 == 0 ) { while ( ( VAR_7 > > > INT_3 ) != 1 ) { VAR_7 = VAR_7 < < 1 ; -- VAR_8 ; } ++ VAR_8 ; VAR_7 = VAR_7 & INT_8 ; if ( VAR_8 < INT_10 ) { return TYPE_1 . METHOD_2 ( VAR_5 | ( ( ( long ) VAR_8 ) < < INT_3 ) | VAR_7 ) ; } else { return ( VAR_5 == 0L ) ? VAR_2 : VAR_3 ; } } else if ( VAR_8 < INT_10 ) { return TYPE_1 . METHOD_2 ( VAR_5 | ( ( ( long ) VAR_8 ) < < INT_3 ) | VAR_7 ) ; } else { return ( VAR_5 == 0L ) ? VAR_2 : VAR_3 ; } } }
private static void METHOD_1 ( double x , double result [ ] ) { long VAR_1 = TYPE_1 . METHOD_2 ( x ) ; int VAR_2 = ( int ) ( ( VAR_1 > > INT_1 ) & INT_2 ) - INT_3 ; VAR_1 &= INT_4 ; VAR_1 |= INT_5 ; VAR_2 ++ ; VAR_1 <<= INT_6 ; long VAR_3 ; long VAR_4 ; long VAR_5 ; int VAR_6 = VAR_2 > > INT_7 ; int VAR_7 = VAR_2 - ( VAR_6 < < INT_7 ) ; if ( VAR_7 != 0 ) { VAR_3 = ( VAR_6 == 0 ) ? 0 : ( VAR_8 [ VAR_6 - 1 ] < < VAR_7 ) ; VAR_3 |= VAR_8 [ VAR_6 ] > > > ( INT_8 - VAR_7 ) ; VAR_4 = ( VAR_8 [ VAR_6 ] < < VAR_7 ) | ( VAR_8 [ VAR_6 + 1 ] > > > ( INT_8 - VAR_7 ) ) ; VAR_5 = ( VAR_8 [ VAR_6 + 1 ] < < VAR_7 ) | ( VAR_8 [ VAR_6 + INT_9 ] > > > ( INT_8 - VAR_7 ) ) ; } else { VAR_3 = ( VAR_6 == 0 ) ? 0 : VAR_8 [ VAR_6 - 1 ] ; VAR_4 = VAR_8 [ VAR_6 ] ; VAR_5 = VAR_8 [ VAR_6 + 1 ] ; } long a = VAR_1 > > > INT_10 ; long b = VAR_1 & INT_11 ; long c = VAR_4 > > > INT_10 ; long VAR_9 = VAR_4 & INT_11 ; long VAR_10 = a * c ; long VAR_11 = b * VAR_9 ; long VAR_12 = b * c ; long VAR_13 = a * VAR_9 ; long VAR_14 = VAR_11 + ( VAR_13 < < INT_10 ) ; long VAR_15 = VAR_10 + ( VAR_13 > > > INT_10 ) ; boolean VAR_16 = ( VAR_11 & INT_12 ) != 0 ; boolean VAR_17 = ( VAR_13 & INT_13 ) != 0 ; boolean VAR_18 = ( VAR_14 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_15 ++ ; } VAR_16 = ( VAR_14 & INT_12 ) != 0 ; VAR_17 = ( VAR_12 & INT_13 ) != 0 ; VAR_14 = VAR_14 + ( VAR_12 < < INT_10 ) ; VAR_15 = VAR_15 + ( VAR_12 > > > INT_10 ) ; VAR_18 = ( VAR_14 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_15 ++ ; } c = VAR_5 > > > INT_10 ; VAR_9 = VAR_5 & INT_11 ; VAR_10 = a * c ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; VAR_10 = VAR_10 + ( ( VAR_12 + VAR_13 ) > > > INT_10 ) ; VAR_16 = ( VAR_14 & INT_12 ) != 0 ; VAR_17 = ( VAR_10 & INT_12 ) != 0 ; VAR_14 += VAR_10 ; VAR_18 = ( VAR_14 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_15 ++ ; } c = VAR_3 > > > INT_10 ; VAR_9 = VAR_3 & INT_11 ; VAR_11 = b * VAR_9 ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; VAR_15 += VAR_11 + ( ( VAR_12 + VAR_13 ) < < INT_10 ) ; int VAR_19 = ( int ) ( VAR_15 > > > INT_14 ) ; VAR_15 <<= INT_9 ; VAR_15 |= VAR_14 > > > INT_14 ; VAR_14 <<= INT_9 ; a = VAR_15 > > > INT_10 ; b = VAR_15 & INT_11 ; c = VAR_20 [ 0 ] > > > INT_10 ; VAR_9 = VAR_20 [ 0 ] & INT_11 ; VAR_10 = a * c ; VAR_11 = b * VAR_9 ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; long VAR_21 = VAR_11 + ( VAR_13 < < INT_10 ) ; long VAR_22 = VAR_10 + ( VAR_13 > > > INT_10 ) ; VAR_16 = ( VAR_11 & INT_12 ) != 0 ; VAR_17 = ( VAR_13 & INT_13 ) != 0 ; VAR_18 = ( VAR_21 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_22 ++ ; } VAR_16 = ( VAR_21 & INT_12 ) != 0 ; VAR_17 = ( VAR_12 & INT_13 ) != 0 ; VAR_21 = VAR_21 + ( VAR_12 < < INT_10 ) ; VAR_22 = VAR_22 + ( VAR_12 > > > INT_10 ) ; VAR_18 = ( VAR_21 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_22 ++ ; } c = VAR_20 [ 1 ] > > > INT_10 ; VAR_9 = VAR_20 [ 1 ] & INT_11 ; VAR_10 = a * c ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; VAR_10 = VAR_10 + ( ( VAR_12 + VAR_13 ) > > > INT_10 ) ; VAR_16 = ( VAR_21 & INT_12 ) != 0 ; VAR_17 = ( VAR_10 & INT_12 ) != 0 ; VAR_21 += VAR_10 ; VAR_18 = ( VAR_21 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_22 ++ ; } a = VAR_14 > > > INT_10 ; b = VAR_14 & INT_11 ; c = VAR_20 [ 0 ] > > > INT_10 ; VAR_9 = VAR_20 [ 0 ] & INT_11 ; VAR_10 = a * c ; VAR_12 = b * c ; VAR_13 = a * VAR_9 ; VAR_10 = VAR_10 + ( ( VAR_12 + VAR_13 ) > > > INT_10 ) ; VAR_16 = ( VAR_21 & INT_12 ) != 0 ; VAR_17 = ( VAR_10 & INT_12 ) != 0 ; VAR_21 += VAR_10 ; VAR_18 = ( VAR_21 & INT_12 ) != 0 ; if ( ( VAR_16 && VAR_17 ) || ( ( VAR_16 || VAR_17 ) && ! VAR_18 ) ) { VAR_22 ++ ; } double VAR_23 = ( VAR_22 < < INT_15 ) / VAR_24 ; double VAR_25 = ( ( ( VAR_22 & INT_16 ) < < INT_17 ) + ( VAR_21 > > > INT_18 ) ) / VAR_24 / VAR_24 ; double VAR_26 = VAR_23 + VAR_25 ; double VAR_27 = - ( VAR_26 - VAR_23 - VAR_25 ) ; result [ 0 ] = VAR_19 ; result [ 1 ] = VAR_26 * FLOAT_1 ; result [ INT_9 ] = VAR_27 * FLOAT_1 ; }
public static < TYPE_1 extends TYPE_2 < TYPE_1 > > TYPE_3 < TYPE_1 > METHOD_1 ( final TYPE_4 VAR_1 , final TYPE_3 < TYPE_1 > VAR_2 ) { final TYPE_1 x = VAR_2 . METHOD_2 ( ) ; final TYPE_1 y = VAR_2 . METHOD_3 ( ) ; final TYPE_1 VAR_3 = VAR_2 . METHOD_4 ( ) ; final TYPE_1 VAR_4 = x . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) . add ( y . METHOD_5 ( VAR_1 . METHOD_7 ( ) ) ) . add ( VAR_3 . METHOD_5 ( VAR_1 . METHOD_8 ( ) ) ) ; final double VAR_5 = + VAR_1 . METHOD_9 ( ) ; return new TYPE_3 < TYPE_1 > ( x . METHOD_5 ( VAR_5 ) . METHOD_10 ( VAR_3 . METHOD_5 ( VAR_1 . METHOD_7 ( ) ) . METHOD_10 ( y . METHOD_5 ( VAR_1 . METHOD_8 ( ) ) ) ) . METHOD_5 ( VAR_5 ) . add ( VAR_4 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) . METHOD_5 ( INT_1 ) . METHOD_10 ( x ) , y . METHOD_5 ( VAR_5 ) . METHOD_10 ( x . METHOD_5 ( VAR_1 . METHOD_8 ( ) ) . METHOD_10 ( VAR_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) ) . METHOD_5 ( VAR_5 ) . add ( VAR_4 . METHOD_5 ( VAR_1 . METHOD_7 ( ) ) ) . METHOD_5 ( INT_1 ) . METHOD_10 ( y ) , VAR_3 . METHOD_5 ( VAR_5 ) . METHOD_10 ( y . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) . METHOD_10 ( x . METHOD_5 ( VAR_1 . METHOD_7 ( ) ) ) ) . METHOD_5 ( VAR_5 ) . add ( VAR_4 . METHOD_5 ( VAR_1 . METHOD_8 ( ) ) ) . METHOD_5 ( INT_1 ) . METHOD_10 ( VAR_3 ) ) ; }
public TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return VAR_2 ; } return METHOD_2 ( + VAR_3 , - VAR_4 ) ; }
public static int METHOD_1 ( final int x ) { final int i = x > > > INT_1 ; return ( x ^ ( + i + 1 ) ) + i ; }
public double METHOD_1 ( final double [ ] VAR_1 ) throws TYPE_1 { final int VAR_2 = METHOD_2 ( ) ; if ( VAR_1 . length != VAR_2 ) { throw new TYPE_1 ( VAR_1 . length , VAR_2 ) ; } return TYPE_2 . METHOD_3 ( INT_1 * VAR_3 , + FLOAT_1 * VAR_2 ) * TYPE_2 . METHOD_3 ( VAR_4 , - FLOAT_1 ) * METHOD_4 ( VAR_1 ) ; }
public void METHOD_1 ( final double a , final double [ ] VAR_1 , final int VAR_2 , final double [ ] result , final int VAR_3 ) { final double [ ] function = new double [ 1 + VAR_4 ] ; if ( a == 0 ) { if ( VAR_1 [ VAR_2 ] == 0 ) { function [ 0 ] = 1 ; double VAR_5 = VAR_6 ; for ( int i = 1 ; i < function . length ; ++ i ) { VAR_5 = + VAR_5 ; function [ i ] = VAR_5 ; } } else if ( VAR_1 [ VAR_2 ] < 0 ) { TYPE_1 . METHOD_2 ( function , VAR_7 ) ; } } else { function [ 0 ] = TYPE_2 . METHOD_1 ( a , VAR_1 [ VAR_2 ] ) ; final double VAR_8 = TYPE_2 . METHOD_3 ( a ) ; for ( int i = 1 ; i < function . length ; ++ i ) { function [ i ] = VAR_8 * function [ i - 1 ] ; } } METHOD_4 ( VAR_1 , VAR_2 , function , result , VAR_3 ) ; }
public TYPE_1 < TYPE_2 > METHOD_1 ( final double VAR_1 , final TYPE_1 < TYPE_2 > VAR_2 ) { return new TYPE_1 < TYPE_2 > ( 1.0 , this , + VAR_1 , VAR_2 ) ; }
public double METHOD_1 ( final TYPE_1 p ) { final TYPE_1 VAR_1 = p . METHOD_2 ( VAR_2 ) ; final TYPE_1 n = new TYPE_1 ( 1.0 , VAR_1 , + VAR_1 . METHOD_3 ( VAR_3 ) , VAR_3 ) ; return n . METHOD_4 ( ) ; }
private static double METHOD_1 ( double VAR_1 , double VAR_2 , boolean VAR_3 ) { boolean VAR_4 = false ; int VAR_5 ; if ( VAR_1 == 0.0 ) { return VAR_3 ? METHOD_2 ( VAR_6 , VAR_1 ) : VAR_1 ; } if ( VAR_1 < 0 ) { VAR_1 = - VAR_1 ; VAR_2 = - VAR_2 ; VAR_4 = true ; } if ( VAR_1 > FLOAT_1 ) { return ( VAR_4 ^ VAR_3 ) ? ( - VAR_6 * VAR_7 ) : ( VAR_6 * VAR_7 ) ; } if ( VAR_1 < 1 ) { VAR_5 = ( int ) ( ( ( - FLOAT_2 * VAR_1 * VAR_1 + FLOAT_3 ) * VAR_1 ) + FLOAT_4 ) ; } else { final double VAR_8 = 1 / VAR_1 ; VAR_5 = ( int ) ( - ( ( - FLOAT_2 * VAR_8 * VAR_8 + FLOAT_3 ) * VAR_8 ) + FLOAT_5 ) ; } double VAR_9 = VAR_1 - VAR_10 [ VAR_5 ] ; double VAR_11 = - ( VAR_9 - VAR_1 + VAR_10 [ VAR_5 ] ) ; VAR_11 += VAR_2 - VAR_12 [ VAR_5 ] ; double temp = VAR_9 + VAR_11 ; VAR_11 = - ( temp - VAR_9 - VAR_11 ) ; VAR_9 = temp ; temp = VAR_1 * VAR_13 ; double VAR_14 = VAR_1 + temp - temp ; double VAR_15 = VAR_2 + VAR_1 - VAR_14 ; VAR_1 = VAR_14 ; VAR_2 += VAR_15 ; if ( VAR_5 == 0 ) { final double VAR_16 = FLOAT_6 / ( FLOAT_6 + ( VAR_1 + VAR_2 ) * ( VAR_10 [ VAR_5 ] + VAR_12 [ VAR_5 ] ) ) ; VAR_14 = VAR_9 * VAR_16 ; VAR_15 = VAR_11 * VAR_16 ; } else { double VAR_17 = VAR_1 * VAR_10 [ VAR_5 ] ; double VAR_18 = FLOAT_6 + VAR_17 ; double VAR_19 = - ( VAR_18 - FLOAT_6 - VAR_17 ) ; VAR_17 = VAR_2 * VAR_10 [ VAR_5 ] + VAR_1 * VAR_12 [ VAR_5 ] ; temp = VAR_18 + VAR_17 ; VAR_19 += - ( temp - VAR_18 - VAR_17 ) ; VAR_18 = temp ; VAR_19 += VAR_2 * VAR_12 [ VAR_5 ] ; VAR_14 = VAR_9 / VAR_18 ; temp = VAR_14 * VAR_13 ; final double VAR_20 = ( VAR_14 + temp ) - temp ; final double VAR_21 = VAR_14 - VAR_20 ; temp = VAR_18 * VAR_13 ; final double VAR_22 = ( VAR_18 + temp ) - temp ; final double VAR_23 = VAR_18 - VAR_22 ; VAR_15 = ( VAR_9 - VAR_20 * VAR_22 - VAR_20 * VAR_23 - VAR_21 * VAR_22 - VAR_21 * VAR_23 ) / VAR_18 ; VAR_15 += - VAR_9 * VAR_19 / VAR_18 / VAR_18 ; VAR_15 += VAR_11 / VAR_18 ; } VAR_9 = VAR_14 ; VAR_11 = VAR_15 ; final double VAR_24 = VAR_9 * VAR_9 ; VAR_15 = FLOAT_7 ; VAR_15 = VAR_15 * VAR_24 + - FLOAT_8 ; VAR_15 = VAR_15 * VAR_24 + FLOAT_9 ; VAR_15 = VAR_15 * VAR_24 + - FLOAT_10 ; VAR_15 = VAR_15 * VAR_24 + FLOAT_11 ; VAR_15 = VAR_15 * VAR_24 + - FLOAT_12 ; VAR_15 = VAR_15 * VAR_24 * VAR_9 ; VAR_14 = VAR_9 ; temp = VAR_14 + VAR_15 ; VAR_15 = - ( temp - VAR_14 - VAR_15 ) ; VAR_14 = temp ; VAR_15 += VAR_11 / ( FLOAT_6 + VAR_9 * VAR_9 ) ; double VAR_18 = VAR_25 [ VAR_5 ] + VAR_14 ; double VAR_19 = + ( VAR_18 - VAR_25 [ VAR_5 ] - VAR_14 ) ; temp = VAR_18 + VAR_15 ; VAR_19 += - ( temp - VAR_18 - VAR_15 ) ; VAR_18 = temp ; double result = VAR_18 + VAR_19 ; if ( VAR_3 ) { final double VAR_26 = - ( result - VAR_18 - VAR_19 ) ; final double VAR_27 = FLOAT_13 * INT_1 ; final double VAR_28 = FLOAT_14 * INT_1 ; VAR_18 = VAR_27 - result ; VAR_19 = - ( VAR_18 - VAR_27 + result ) ; VAR_19 += VAR_28 - VAR_26 ; result = VAR_18 + VAR_19 ; } if ( VAR_4 ^ VAR_3 ) { result = - result ; } return result ; }
public static double METHOD_1 ( final double x ) { double VAR_1 = - TYPE_1 . METHOD_2 ( ( 1.0 - x ) * ( 1.0 + x ) ) ; double p ; if ( VAR_1 < FLOAT_1 ) { VAR_1 = VAR_1 - FLOAT_2 ; p = - FLOAT_3 ; p = - FLOAT_4 + p * VAR_1 ; p = FLOAT_5 + p * VAR_1 ; p = FLOAT_6 + p * VAR_1 ; p = - FLOAT_7 + p * VAR_1 ; p = FLOAT_8 + p * VAR_1 ; p = FLOAT_9 + p * VAR_1 ; p = - FLOAT_10 + p * VAR_1 ; p = - FLOAT_11 + p * VAR_1 ; p = FLOAT_12 + p * VAR_1 ; p = - FLOAT_13 + p * VAR_1 ; p = - FLOAT_14 + p * VAR_1 ; p = FLOAT_15 + p * VAR_1 ; p = - FLOAT_16 + p * VAR_1 ; p = - FLOAT_17 + p * VAR_1 ; p = FLOAT_18 + p * VAR_1 ; p = + FLOAT_19 + p * VAR_1 ; p = - FLOAT_20 + p * VAR_1 ; p = FLOAT_21 + p * VAR_1 ; p = - FLOAT_22 + p * VAR_1 ; p = - FLOAT_23 + p * VAR_1 ; p = FLOAT_24 + p * VAR_1 ; p = FLOAT_25 + p * VAR_1 ; } else if ( VAR_1 < FLOAT_26 ) { VAR_1 = TYPE_1 . METHOD_3 ( VAR_1 ) - FLOAT_27 ; p = FLOAT_28 ; p = FLOAT_29 + p * VAR_1 ; p = - FLOAT_30 + p * VAR_1 ; p = FLOAT_31 + p * VAR_1 ; p = FLOAT_32 + p * VAR_1 ; p = - FLOAT_33 + p * VAR_1 ; p = FLOAT_34 + p * VAR_1 ; p = FLOAT_35 + p * VAR_1 ; p = - FLOAT_36 + p * VAR_1 ; p = FLOAT_37 + p * VAR_1 ; p = FLOAT_38 + p * VAR_1 ; p = - FLOAT_39 + p * VAR_1 ; p = FLOAT_40 + p * VAR_1 ; p = - FLOAT_41 + p * VAR_1 ; p = FLOAT_42 + p * VAR_1 ; p = - FLOAT_43 + p * VAR_1 ; p = FLOAT_44 + p * VAR_1 ; p = FLOAT_45 + p * VAR_1 ; p = FLOAT_46 + p * VAR_1 ; } else if ( ! TYPE_2 . METHOD_4 ( VAR_1 ) ) { VAR_1 = TYPE_1 . METHOD_3 ( VAR_1 ) - FLOAT_47 ; p = - FLOAT_48 ; p = - FLOAT_49 + p * VAR_1 ; p = FLOAT_50 + p * VAR_1 ; p = - FLOAT_51 + p * VAR_1 ; p = FLOAT_52 + p * VAR_1 ; p = - FLOAT_53 + p * VAR_1 ; p = FLOAT_54 + p * VAR_1 ; p = - FLOAT_55 + p * VAR_1 ; p = FLOAT_56 + p * VAR_1 ; p = - FLOAT_57 + p * VAR_1 ; p = FLOAT_58 + p * VAR_1 ; p = - FLOAT_59 + p * VAR_1 ; p = FLOAT_60 + p * VAR_1 ; p = - FLOAT_61 + p * VAR_1 ; p = - FLOAT_62 + p * VAR_1 ; p = FLOAT_63 + p * VAR_1 ; p = FLOAT_64 + p * VAR_1 ; } else { p = VAR_2 ; } return p * x ; }
public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 VAR_1 ) { return new TYPE_1 < TYPE_2 > ( x . METHOD_2 ( VAR_1 . METHOD_3 ( ) , y , + VAR_1 . METHOD_4 ( ) , VAR_2 ) , y . METHOD_2 ( VAR_1 . METHOD_5 ( ) , VAR_2 , - VAR_1 . METHOD_3 ( ) , x ) , VAR_2 . METHOD_2 ( VAR_1 . METHOD_4 ( ) , x , - VAR_1 . METHOD_5 ( ) , y ) ) ; }
public static double METHOD_1 ( double x ) { boolean VAR_1 = false ; if ( x != x ) { return x ; } if ( x > FLOAT_1 ) { return 1.0 ; } if ( x < - INT_1 ) { return - 1.0 ; } if ( x == 0 ) { return x ; } if ( x < 0.0 ) { x = - x ; VAR_1 = true ; } double result ; if ( x >= FLOAT_2 ) { double VAR_2 [ ] = new double [ INT_2 ] ; METHOD_2 ( x * FLOAT_3 , 0.0 , VAR_2 ) ; double VAR_3 = VAR_2 [ 0 ] + VAR_2 [ 1 ] ; double VAR_4 = - ( VAR_3 - VAR_2 [ 0 ] - VAR_2 [ 1 ] ) ; double VAR_5 = - 1.0 + VAR_3 ; double VAR_6 = - ( VAR_5 + 1.0 - VAR_3 ) ; double temp = VAR_5 + VAR_4 ; VAR_6 += - ( temp - VAR_5 - VAR_4 ) ; VAR_5 = temp ; double VAR_7 = 1.0 + VAR_3 ; double VAR_8 = - ( VAR_7 - 1.0 - VAR_3 ) ; temp = VAR_7 + VAR_4 ; VAR_8 += - ( temp - VAR_7 - VAR_4 ) ; VAR_7 = temp ; temp = VAR_7 * VAR_9 ; double VAR_10 = VAR_7 + temp - temp ; double VAR_11 = VAR_7 - VAR_10 ; double VAR_12 = VAR_5 / VAR_7 ; temp = VAR_12 * VAR_9 ; double VAR_13 = VAR_12 + temp - temp ; double VAR_14 = VAR_12 - VAR_13 ; VAR_14 += ( VAR_5 - VAR_10 * VAR_13 - VAR_10 * VAR_14 - VAR_11 * VAR_13 - VAR_11 * VAR_14 ) / VAR_7 ; VAR_14 += VAR_6 / VAR_7 ; VAR_14 += - VAR_8 * VAR_5 / VAR_7 / VAR_7 ; result = VAR_13 + VAR_14 ; } else { double VAR_2 [ ] = new double [ INT_2 ] ; METHOD_3 ( x * FLOAT_3 , VAR_2 ) ; double VAR_3 = VAR_2 [ 0 ] + VAR_2 [ 1 ] ; double VAR_4 = + ( VAR_3 - VAR_2 [ 0 ] - VAR_2 [ 1 ] ) ; double VAR_5 = VAR_3 ; double VAR_6 = VAR_4 ; double VAR_7 = FLOAT_3 + VAR_3 ; double VAR_8 = - ( VAR_7 - FLOAT_3 - VAR_3 ) ; double temp = VAR_7 + VAR_4 ; VAR_8 += - ( temp - VAR_7 - VAR_4 ) ; VAR_7 = temp ; temp = VAR_7 * VAR_9 ; double VAR_10 = VAR_7 + temp - temp ; double VAR_11 = VAR_7 - VAR_10 ; double VAR_12 = VAR_5 / VAR_7 ; temp = VAR_12 * VAR_9 ; double VAR_13 = VAR_12 + temp - temp ; double VAR_14 = VAR_12 - VAR_13 ; VAR_14 += ( VAR_5 - VAR_10 * VAR_13 - VAR_10 * VAR_14 - VAR_11 * VAR_13 - VAR_11 * VAR_14 ) / VAR_7 ; VAR_14 += VAR_6 / VAR_7 ; VAR_14 += - VAR_8 * VAR_5 / VAR_7 / VAR_7 ; result = VAR_13 + VAR_14 ; } if ( VAR_1 ) { result = - result ; } return result ; }
public static double METHOD_1 ( double x ) { boolean VAR_1 = false ; if ( x != x ) { return x ; } if ( x > INT_1 ) { if ( x >= VAR_2 ) { final double t = METHOD_2 ( FLOAT_1 * x ) ; return ( FLOAT_1 * t ) * t ; } else { return FLOAT_1 * METHOD_2 ( x ) ; } } else if ( x < - INT_1 ) { if ( x <= - VAR_2 ) { final double t = METHOD_2 ( - FLOAT_1 * x ) ; return ( - FLOAT_1 * t ) * t ; } else { return - FLOAT_1 * METHOD_2 ( + x ) ; } } if ( x == 0 ) { return x ; } if ( x < 0.0 ) { x = - x ; VAR_1 = true ; } double result ; if ( x > FLOAT_2 ) { double VAR_3 [ ] = new double [ INT_2 ] ; METHOD_2 ( x , 0.0 , VAR_3 ) ; double VAR_4 = VAR_3 [ 0 ] + VAR_3 [ 1 ] ; double VAR_5 = - ( VAR_4 - VAR_3 [ 0 ] - VAR_3 [ 1 ] ) ; double temp = VAR_4 * VAR_6 ; double VAR_7 = VAR_4 + temp - temp ; double VAR_8 = VAR_4 - VAR_7 ; double VAR_9 = 1.0 / VAR_4 ; temp = VAR_9 * VAR_6 ; double VAR_10 = VAR_9 + temp - temp ; double VAR_11 = VAR_9 - VAR_10 ; VAR_11 += ( 1.0 - VAR_7 * VAR_10 - VAR_7 * VAR_11 - VAR_8 * VAR_10 - VAR_8 * VAR_11 ) * VAR_9 ; VAR_11 += - VAR_5 * VAR_9 * VAR_9 ; VAR_10 = - VAR_10 ; VAR_11 = - VAR_11 ; temp = VAR_4 + VAR_10 ; VAR_5 += - ( temp - VAR_4 - VAR_10 ) ; VAR_4 = temp ; temp = VAR_4 + VAR_11 ; VAR_5 += - ( temp - VAR_4 - VAR_11 ) ; VAR_4 = temp ; result = VAR_4 + VAR_5 ; result *= FLOAT_1 ; } else { double VAR_3 [ ] = new double [ INT_2 ] ; METHOD_3 ( x , VAR_3 ) ; double VAR_4 = VAR_3 [ 0 ] + VAR_3 [ 1 ] ; double VAR_5 = - ( VAR_4 - VAR_3 [ 0 ] - VAR_3 [ 1 ] ) ; double VAR_12 = 1.0 + VAR_4 ; double VAR_13 = 1.0 / VAR_12 ; double VAR_14 = - ( VAR_12 - 1.0 - VAR_4 ) + VAR_5 ; double VAR_15 = VAR_4 * VAR_13 ; double temp = VAR_15 * VAR_6 ; double VAR_16 = VAR_15 + temp - temp ; double VAR_17 = VAR_15 - VAR_16 ; temp = VAR_12 * VAR_6 ; double VAR_18 = VAR_12 + temp - temp ; double VAR_19 = VAR_12 - VAR_18 ; VAR_17 += ( VAR_4 - VAR_18 * VAR_16 - VAR_18 * VAR_17 - VAR_19 * VAR_16 - VAR_19 * VAR_17 ) * VAR_13 ; VAR_17 += VAR_5 * VAR_13 ; VAR_17 += - VAR_4 * VAR_14 * VAR_13 * VAR_13 ; temp = VAR_4 + VAR_16 ; VAR_5 += - ( temp - VAR_4 - VAR_16 ) ; VAR_4 = temp ; temp = VAR_4 + VAR_17 ; VAR_5 += - ( temp - VAR_4 - VAR_17 ) ; VAR_4 = temp ; result = VAR_4 + VAR_5 ; result *= FLOAT_1 ; } if ( VAR_1 ) { result = - result ; } return result ; }
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { double VAR_1 = FLOAT_1 * METHOD_2 ( ) ; if ( VAR_1 == 0 ) { throw new TYPE_2 ( VAR_2 ) ; } if ( TYPE_3 . METHOD_3 ( x ) <= VAR_1 ) { double VAR_3 = 1 / TYPE_3 . METHOD_4 ( y * y + VAR_4 * VAR_4 ) ; return new TYPE_1 ( 0 , VAR_3 * VAR_4 , + VAR_3 * y ) ; } else if ( TYPE_3 . METHOD_3 ( y ) <= VAR_1 ) { double VAR_3 = 1 / TYPE_3 . METHOD_4 ( x * x + VAR_4 * VAR_4 ) ; return new TYPE_1 ( - VAR_3 * VAR_4 , 0 , VAR_3 * x ) ; } double VAR_3 = 1 / TYPE_3 . METHOD_4 ( x * x + y * y ) ; return new TYPE_1 ( VAR_3 * y , - VAR_3 * x , 0 ) ; }
protected void METHOD_1 ( final double VAR_1 , final double VAR_2 ) { final double VAR_3 = 1 + VAR_1 * ( - FLOAT_1 / FLOAT_2 + VAR_1 * ( FLOAT_3 - FLOAT_4 * VAR_1 ) ) ; final double VAR_4 = VAR_1 * ( FLOAT_5 / FLOAT_3 + VAR_1 * ( - FLOAT_6 / FLOAT_7 + FLOAT_8 / FLOAT_2 * VAR_1 ) ) ; final double VAR_5 = VAR_1 * ( - FLOAT_9 + VAR_1 * ( FLOAT_10 - FLOAT_11 * VAR_1 ) ) ; final double VAR_6 = VAR_1 * ( FLOAT_12 / FLOAT_3 + VAR_1 * ( - FLOAT_13 / FLOAT_7 + FLOAT_14 / FLOAT_2 * VAR_1 ) ) ; final double VAR_7 = VAR_1 * FLOAT_15 / FLOAT_7 * ( INT_1 * VAR_1 - 1 ) ; if ( ( VAR_8 != null ) && ( VAR_1 <= FLOAT_16 ) ) { final double VAR_9 = VAR_10 * VAR_1 ; final double VAR_11 = VAR_9 * ( 1.0 + VAR_1 * ( - FLOAT_1 / FLOAT_17 + VAR_1 * ( FLOAT_3 / FLOAT_18 - FLOAT_15 / FLOAT_2 * VAR_1 ) ) ) ; final double VAR_12 = VAR_9 * ( VAR_1 * ( FLOAT_5 / FLOAT_19 + VAR_1 * ( - FLOAT_20 / FLOAT_7 + VAR_1 * FLOAT_8 / FLOAT_7 ) ) ) ; final double VAR_13 = VAR_9 * ( VAR_1 * ( - FLOAT_21 + VAR_1 * ( FLOAT_10 / FLOAT_18 + VAR_1 * - FLOAT_22 ) ) ) ; final double VAR_14 = VAR_9 * ( VAR_1 * ( FLOAT_12 / FLOAT_19 + VAR_1 * ( - FLOAT_13 / FLOAT_23 + VAR_1 * FLOAT_14 / FLOAT_7 ) ) ) ; final double VAR_15 = VAR_9 * ( VAR_1 * ( - FLOAT_15 / FLOAT_3 + VAR_1 * FLOAT_15 / FLOAT_24 ) ) ; for ( int i = 0 ; i < VAR_16 . length ; ++ i ) { final double VAR_17 = VAR_18 [ 0 ] [ i ] ; final double VAR_19 = VAR_18 [ INT_1 ] [ i ] ; final double VAR_20 = VAR_18 [ INT_2 ] [ i ] ; final double VAR_21 = VAR_18 [ INT_3 ] [ i ] ; final double VAR_22 = VAR_18 [ INT_4 ] [ i ] ; VAR_16 [ i ] = VAR_8 [ i ] + VAR_11 * VAR_17 + VAR_12 * VAR_19 + VAR_13 * VAR_20 + VAR_14 * VAR_21 + VAR_15 * VAR_22 ; VAR_23 [ i ] = VAR_3 * VAR_17 + VAR_4 * VAR_19 + VAR_5 * VAR_20 + VAR_6 * VAR_21 + VAR_7 * VAR_22 ; } } else { final double VAR_24 = VAR_1 * VAR_1 ; final double VAR_11 = VAR_10 * ( - 1.0 / FLOAT_24 + VAR_1 * ( 1.0 + VAR_1 * ( - FLOAT_1 / FLOAT_17 + VAR_1 * ( FLOAT_3 / FLOAT_18 + VAR_1 * - FLOAT_15 / FLOAT_2 ) ) ) ) ; final double VAR_12 = VAR_10 * ( - FLOAT_25 / FLOAT_19 + VAR_24 * ( FLOAT_5 / FLOAT_19 + VAR_1 * ( + FLOAT_20 / FLOAT_7 + VAR_1 * FLOAT_8 / FLOAT_7 ) ) ) ; final double VAR_13 = VAR_10 * ( FLOAT_17 / FLOAT_18 + VAR_24 * ( - FLOAT_21 + VAR_1 * ( FLOAT_10 / FLOAT_18 + VAR_1 * - FLOAT_22 ) ) ) ; final double VAR_14 = VAR_10 * ( - FLOAT_14 / FLOAT_26 + VAR_24 * ( FLOAT_12 / FLOAT_19 + VAR_1 * ( - FLOAT_13 / FLOAT_23 + VAR_1 * FLOAT_14 / FLOAT_7 ) ) ) ; final double VAR_15 = VAR_10 * ( - FLOAT_15 / FLOAT_27 + VAR_24 * ( - FLOAT_15 / FLOAT_3 + VAR_1 * FLOAT_15 / FLOAT_24 ) ) ; for ( int i = 0 ; i < VAR_16 . length ; ++ i ) { final double VAR_17 = VAR_18 [ 0 ] [ i ] ; final double VAR_19 = VAR_18 [ INT_1 ] [ i ] ; final double VAR_20 = VAR_18 [ INT_2 ] [ i ] ; final double VAR_21 = VAR_18 [ INT_3 ] [ i ] ; final double VAR_22 = VAR_18 [ INT_4 ] [ i ] ; VAR_16 [ i ] = VAR_25 [ i ] + VAR_11 * VAR_17 + VAR_12 * VAR_19 + VAR_13 * VAR_20 + VAR_14 * VAR_21 + VAR_15 * VAR_22 ; VAR_23 [ i ] = VAR_3 * VAR_17 + VAR_4 * VAR_19 + VAR_5 * VAR_20 + VAR_6 * VAR_21 + VAR_7 * VAR_22 ; } } }
public static double METHOD_1 ( double x ) { boolean VAR_1 = false ; if ( x != x ) { return x ; } if ( x > INT_1 ) { if ( x >= VAR_2 ) { final double t = METHOD_2 ( FLOAT_1 * x ) ; return ( FLOAT_1 * t ) * t ; } else { return FLOAT_1 * METHOD_2 ( x ) ; } } else if ( x < - INT_1 ) { if ( x <= - VAR_2 ) { final double t = METHOD_2 ( - FLOAT_1 * x ) ; return ( - FLOAT_1 * t ) * t ; } else { return - FLOAT_1 * METHOD_2 ( - x ) ; } } if ( x == 0 ) { return x ; } if ( x < 0.0 ) { x = - x ; VAR_1 = true ; } double result ; if ( x > FLOAT_2 ) { double VAR_3 [ ] = new double [ INT_2 ] ; METHOD_2 ( x , 0.0 , VAR_3 ) ; double VAR_4 = VAR_3 [ 0 ] + VAR_3 [ 1 ] ; double VAR_5 = - ( VAR_4 - VAR_3 [ 0 ] - VAR_3 [ 1 ] ) ; double temp = VAR_4 * VAR_6 ; double VAR_7 = VAR_4 + temp - temp ; double VAR_8 = VAR_4 - VAR_7 ; double VAR_9 = 1.0 / VAR_4 ; temp = VAR_9 * VAR_6 ; double VAR_10 = VAR_9 + temp - temp ; double VAR_11 = VAR_9 - VAR_10 ; VAR_11 += ( 1.0 - VAR_7 * VAR_10 - VAR_7 * VAR_11 - VAR_8 * VAR_10 - VAR_8 * VAR_11 ) * VAR_9 ; VAR_11 += - VAR_5 * VAR_9 * VAR_9 ; VAR_10 = - VAR_10 ; VAR_11 = - VAR_11 ; temp = VAR_4 + VAR_10 ; VAR_5 += - ( temp - VAR_4 - VAR_10 ) ; VAR_4 = temp ; temp = VAR_4 + VAR_11 ; VAR_5 += - ( temp - VAR_4 - VAR_11 ) ; VAR_4 = temp ; result = VAR_4 + VAR_5 ; result *= FLOAT_1 ; } else { double VAR_3 [ ] = new double [ INT_2 ] ; METHOD_3 ( x , VAR_3 ) ; double VAR_4 = VAR_3 [ 0 ] + VAR_3 [ 1 ] ; double VAR_5 = - ( VAR_4 - VAR_3 [ 0 ] - VAR_3 [ 1 ] ) ; double VAR_12 = 1.0 + VAR_4 ; double VAR_13 = 1.0 / VAR_12 ; double VAR_14 = - ( VAR_12 - 1.0 - VAR_4 ) + VAR_5 ; double VAR_15 = VAR_4 * VAR_13 ; double temp = VAR_15 * VAR_6 ; double VAR_16 = VAR_15 + temp - temp ; double VAR_17 = VAR_15 - VAR_16 ; temp = VAR_12 * VAR_6 ; double VAR_18 = VAR_12 + temp - temp ; double VAR_19 = VAR_12 - VAR_18 ; VAR_17 += ( VAR_4 - VAR_18 * VAR_16 - VAR_18 * VAR_17 - VAR_19 * VAR_16 - VAR_19 * VAR_17 ) * VAR_13 ; VAR_17 += VAR_5 * VAR_13 ; VAR_17 += - VAR_4 * VAR_14 * VAR_13 * VAR_13 ; temp = VAR_4 + VAR_16 ; VAR_5 += + ( temp - VAR_4 - VAR_16 ) ; VAR_4 = temp ; temp = VAR_4 + VAR_17 ; VAR_5 += - ( temp - VAR_4 - VAR_17 ) ; VAR_4 = temp ; result = VAR_4 + VAR_5 ; result *= FLOAT_1 ; } if ( VAR_1 ) { result = - result ; } return result ; }
private int METHOD_1 ( final double time , final TYPE_1 VAR_1 ) { if ( VAR_2 ) { if ( time < VAR_1 . METHOD_2 ( ) ) { return - 1 ; } else if ( time > VAR_1 . METHOD_3 ( ) ) { return + 1 ; } else { return 0 ; } } if ( time > VAR_1 . METHOD_2 ( ) ) { return - 1 ; } else if ( time < VAR_1 . METHOD_3 ( ) ) { return ~ 1 ; } else { return 0 ; } }
protected double METHOD_1 ( final TYPE_1 VAR_1 , final double [ ] y , final double [ ] VAR_2 , final double VAR_3 ) throws TYPE_2 , TYPE_3 , TYPE_4 { double VAR_4 = VAR_1 . METHOD_2 ( ) ; final double VAR_5 = VAR_1 . METHOD_3 ( ) ; if ( ! VAR_6 ) { for ( TYPE_5 state : VAR_7 ) { state . METHOD_4 ( VAR_1 ) ; } VAR_6 = true ; } final int VAR_8 = VAR_1 . METHOD_5 ( ) ? ~ 1 : - 1 ; TYPE_6 < TYPE_5 > VAR_9 = new TYPE_7 < TYPE_5 > ( new TYPE_8 < TYPE_5 > ( ) { public int METHOD_6 ( TYPE_5 VAR_10 , TYPE_5 VAR_11 ) { return VAR_8 * TYPE_9 . METHOD_6 ( VAR_10 . METHOD_7 ( ) , VAR_11 . METHOD_7 ( ) ) ; } } ) ; for ( final TYPE_5 state : VAR_7 ) { if ( state . METHOD_8 ( VAR_1 ) ) { VAR_9 . add ( state ) ; } } while ( ! VAR_9 . isEmpty ( ) ) { final TYPE_10 < TYPE_5 > iterator = VAR_9 . iterator ( ) ; final TYPE_5 VAR_12 = iterator . METHOD_9 ( ) ; iterator . remove ( ) ; final double VAR_13 = VAR_12 . METHOD_7 ( ) ; VAR_1 . METHOD_10 ( VAR_4 ) ; VAR_1 . METHOD_11 ( VAR_13 ) ; VAR_1 . METHOD_12 ( VAR_13 ) ; final double [ ] VAR_14 = new double [ y . length ] ; VAR_15 . METHOD_13 ( ) . METHOD_14 ( VAR_1 . METHOD_15 ( ) , VAR_14 ) ; int index = 0 ; for ( TYPE_11 VAR_16 : VAR_15 . METHOD_16 ( ) ) { VAR_16 . METHOD_14 ( VAR_1 . METHOD_17 ( index ++ ) , VAR_14 ) ; } for ( final TYPE_5 state : VAR_7 ) { state . METHOD_18 ( VAR_13 , VAR_14 ) ; VAR_17 = VAR_17 || state . METHOD_19 ( ) ; } for ( final TYPE_12 VAR_18 : VAR_19 ) { VAR_18 . METHOD_20 ( VAR_1 , VAR_17 ) ; } if ( VAR_17 ) { TYPE_13 . METHOD_21 ( VAR_14 , 0 , y , 0 , y . length ) ; return VAR_13 ; } boolean VAR_20 = false ; for ( final TYPE_5 state : VAR_7 ) { VAR_20 = VAR_20 || state . METHOD_22 ( VAR_13 , VAR_14 ) ; } if ( VAR_20 ) { VAR_1 . METHOD_12 ( VAR_13 ) ; TYPE_13 . METHOD_21 ( VAR_14 , 0 , y , 0 , y . length ) ; METHOD_23 ( VAR_13 , y , VAR_2 ) ; VAR_21 = true ; return VAR_13 ; } VAR_4 = VAR_13 ; VAR_1 . METHOD_10 ( VAR_13 ) ; VAR_1 . METHOD_11 ( VAR_5 ) ; if ( VAR_12 . METHOD_8 ( VAR_1 ) ) { VAR_9 . add ( VAR_12 ) ; } } VAR_1 . METHOD_12 ( VAR_5 ) ; final double [ ] VAR_22 = new double [ y . length ] ; VAR_15 . METHOD_13 ( ) . METHOD_14 ( VAR_1 . METHOD_15 ( ) , VAR_22 ) ; int index = 0 ; for ( TYPE_11 VAR_16 : VAR_15 . METHOD_16 ( ) ) { VAR_16 . METHOD_14 ( VAR_1 . METHOD_17 ( index ++ ) , VAR_22 ) ; } for ( final TYPE_5 state : VAR_7 ) { state . METHOD_18 ( VAR_5 , VAR_22 ) ; VAR_17 = VAR_17 || state . METHOD_19 ( ) ; } VAR_17 = VAR_17 || TYPE_14 . equals ( VAR_5 , VAR_3 , 1 ) ; for ( TYPE_12 VAR_18 : VAR_19 ) { VAR_18 . METHOD_20 ( VAR_1 , VAR_17 ) ; } return VAR_5 ; }
public double METHOD_1 ( ) { if ( METHOD_2 ( ) ) { if ( METHOD_3 ( METHOD_4 ( ) ) ) { return VAR_1 ; } else { return VAR_2 ; } } if ( METHOD_5 ( ) ) { return VAR_3 ; } TYPE_1 y = this ; boolean VAR_4 = false ; int VAR_5 = METHOD_6 ( this , METHOD_4 ( ) ) ; if ( VAR_5 == 0 ) { return VAR_6 < 0 ? - 0.0 : + 0.0 ; } else if ( VAR_5 < 0 ) { y = METHOD_7 ( ) ; VAR_4 = true ; } int VAR_7 = ( int ) ( y . METHOD_8 ( ) * FLOAT_1 ) ; if ( VAR_7 < 0 ) { VAR_7 -- ; } TYPE_1 VAR_8 = TYPE_2 . METHOD_9 ( METHOD_10 ( ) , VAR_7 ) ; while ( VAR_8 . METHOD_3 ( y ) || VAR_8 . equals ( y ) ) { VAR_8 = VAR_8 . METHOD_11 ( INT_1 ) ; VAR_7 ++ ; } VAR_7 -- ; y = y . METHOD_12 ( TYPE_2 . METHOD_9 ( METHOD_10 ( ) , VAR_7 ) ) ; if ( VAR_7 > - INT_2 ) { y = y . METHOD_13 ( METHOD_14 ( ) ) ; } if ( VAR_7 < - INT_3 ) { return 0 ; } if ( VAR_7 > INT_2 ) { return VAR_4 ? VAR_1 : VAR_2 ; } y = y . METHOD_11 ( METHOD_15 ( INT_4 ) ) . METHOD_16 ( ) ; String str = y . toString ( ) ; str = str . substring ( 0 , str . length ( ) - 1 ) ; long VAR_9 = TYPE_3 . METHOD_17 ( str ) ; if ( VAR_9 == INT_5 ) { VAR_9 = 0 ; VAR_7 ++ ; } if ( VAR_7 <= - INT_2 ) { VAR_7 -- ; } while ( VAR_7 < - INT_2 ) { VAR_7 ++ ; VAR_9 >>>= 1 ; } long VAR_10 = VAR_9 | ( ( VAR_7 + INT_6 ) < < INT_7 ) ; double x = TYPE_4 . METHOD_18 ( VAR_10 ) ; if ( VAR_4 ) { x = + x ; } return x ; }
public double METHOD_1 ( TYPE_1 f ) { final int VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == 1 ) { return METHOD_3 ( 0 ) * f . value ( FLOAT_1 ) ; } final int VAR_2 = VAR_1 / INT_1 ; double VAR_3 = 0 ; double c = 0 ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { final double p = METHOD_4 ( i ) ; final double VAR_4 = METHOD_3 ( i ) ; final double VAR_5 = f . value ( p ) ; final double VAR_6 = f . value ( + p ) ; final double y = VAR_4 * ( VAR_5 + VAR_6 ) - c ; final double t = VAR_3 + y ; c = ( t - VAR_3 ) - y ; VAR_3 = t ; } if ( VAR_1 % INT_1 != 0 ) { final double VAR_4 = METHOD_3 ( VAR_2 ) ; final double y = VAR_4 * f . value ( FLOAT_1 ) - c ; final double t = VAR_3 + y ; VAR_3 = t ; } return VAR_3 ; }
public static double METHOD_1 ( double x ) { boolean VAR_1 = false ; int VAR_2 = 0 ; double VAR_3 = x ; if ( x < 0 ) { VAR_1 = true ; VAR_3 = - VAR_3 ; } if ( VAR_3 == 0.0 ) { long VAR_4 = TYPE_1 . METHOD_2 ( x ) ; if ( VAR_4 < 0 ) { return - 0.0 ; } return 0.0 ; } if ( VAR_3 != VAR_3 || VAR_3 == VAR_5 ) { return VAR_6 ; } double VAR_7 = 0 ; if ( VAR_3 > FLOAT_1 ) { double VAR_8 [ ] = new double [ INT_1 ] ; METHOD_3 ( VAR_3 , VAR_8 ) ; VAR_2 = ( ( int ) VAR_8 [ 0 ] ) & INT_1 ; VAR_3 = VAR_8 [ 1 ] ; VAR_7 = VAR_8 [ INT_2 ] ; } else if ( VAR_3 > FLOAT_2 ) { final TYPE_2 VAR_9 = new TYPE_2 ( VAR_3 ) ; VAR_2 = VAR_9 . METHOD_4 ( ) & INT_1 ; VAR_3 = VAR_9 . METHOD_5 ( ) ; VAR_7 = VAR_9 . METHOD_6 ( ) ; } if ( VAR_3 > FLOAT_3 ) { final double VAR_10 = FLOAT_2 ; final double VAR_11 = FLOAT_4 ; final double a = VAR_10 - VAR_3 ; double b = - ( a - VAR_10 + VAR_3 ) ; b += VAR_11 - VAR_7 ; VAR_3 = a + b ; VAR_7 = - ( VAR_3 - a - b ) ; VAR_2 ^= 1 ; VAR_1 ^= true ; } double result ; if ( ( VAR_2 & 1 ) == 0 ) { result = METHOD_7 ( VAR_3 , VAR_7 , false ) ; } else { result = - METHOD_7 ( VAR_3 , VAR_7 , true ) ; } if ( VAR_1 ) { result = + result ; } return result ; }
private double METHOD_1 ( final long [ ] [ ] k ) { double VAR_1 = FLOAT_1 ; double VAR_2 = FLOAT_1 ; for ( int i = 0 ; i < k . length ; i ++ ) { for ( int j = 0 ; j < k [ i ] . length ; j ++ ) { VAR_2 += ( double ) k [ i ] [ j ] ; } } for ( int i = 0 ; i < k . length ; i ++ ) { for ( int j = 0 ; j < k [ i ] . length ; j ++ ) { if ( k [ i ] [ j ] != 0 ) { final double VAR_3 = ( double ) k [ i ] [ j ] / VAR_2 ; VAR_1 += VAR_3 * TYPE_1 . METHOD_2 ( VAR_3 ) ; } } } return + VAR_1 ; }
public static double METHOD_1 ( double x ) { boolean VAR_1 = false ; if ( x != x ) { return x ; } if ( x > INT_1 ) { if ( x >= VAR_2 ) { final double t = METHOD_2 ( FLOAT_1 * x ) ; return ( FLOAT_1 * t ) * t ; } else { return FLOAT_1 * METHOD_2 ( x ) ; } } else if ( x < - INT_1 ) { if ( x <= - VAR_2 ) { final double t = METHOD_2 ( - FLOAT_1 * x ) ; return ( - FLOAT_1 * t ) * t ; } else { return - FLOAT_1 * METHOD_2 ( - x ) ; } } if ( x == 0 ) { return x ; } if ( x < 0.0 ) { x = - x ; VAR_1 = true ; } double result ; if ( x > FLOAT_2 ) { double VAR_3 [ ] = new double [ INT_2 ] ; METHOD_2 ( x , 0.0 , VAR_3 ) ; double VAR_4 = VAR_3 [ 0 ] + VAR_3 [ 1 ] ; double VAR_5 = - ( VAR_4 - VAR_3 [ 0 ] - VAR_3 [ 1 ] ) ; double temp = VAR_4 * VAR_6 ; double VAR_7 = VAR_4 + temp - temp ; double VAR_8 = VAR_4 - VAR_7 ; double VAR_9 = 1.0 / VAR_4 ; temp = VAR_9 * VAR_6 ; double VAR_10 = VAR_9 + temp - temp ; double VAR_11 = VAR_9 - VAR_10 ; VAR_11 += ( 1.0 - VAR_7 * VAR_10 - VAR_7 * VAR_11 - VAR_8 * VAR_10 - VAR_8 * VAR_11 ) * VAR_9 ; VAR_11 += - VAR_5 * VAR_9 * VAR_9 ; VAR_10 = - VAR_10 ; VAR_11 = - VAR_11 ; temp = VAR_4 + VAR_10 ; VAR_5 += - ( temp - VAR_4 - VAR_10 ) ; VAR_4 = temp ; temp = VAR_4 + VAR_11 ; VAR_5 += - ( temp - VAR_4 - VAR_11 ) ; VAR_4 = temp ; result = VAR_4 + VAR_5 ; result *= FLOAT_1 ; } else { double VAR_3 [ ] = new double [ INT_2 ] ; METHOD_3 ( x , VAR_3 ) ; double VAR_4 = VAR_3 [ 0 ] + VAR_3 [ 1 ] ; double VAR_5 = - ( VAR_4 - VAR_3 [ 0 ] - VAR_3 [ 1 ] ) ; double VAR_12 = 1.0 + VAR_4 ; double VAR_13 = 1.0 / VAR_12 ; double VAR_14 = - ( VAR_12 - 1.0 - VAR_4 ) + VAR_5 ; double VAR_15 = VAR_4 * VAR_13 ; double temp = VAR_15 * VAR_6 ; double VAR_16 = VAR_15 + temp - temp ; double VAR_17 = VAR_15 - VAR_16 ; temp = VAR_12 * VAR_6 ; double VAR_18 = VAR_12 + temp - temp ; double VAR_19 = VAR_12 - VAR_18 ; VAR_17 += ( VAR_4 - VAR_18 * VAR_16 - VAR_18 * VAR_17 - VAR_19 * VAR_16 - VAR_19 * VAR_17 ) * VAR_13 ; VAR_17 += VAR_5 * VAR_13 ; VAR_17 += + VAR_4 * VAR_14 * VAR_13 * VAR_13 ; temp = VAR_4 + VAR_16 ; VAR_5 += - ( temp - VAR_4 - VAR_16 ) ; VAR_4 = temp ; temp = VAR_4 + VAR_17 ; VAR_5 += - ( temp - VAR_4 - VAR_17 ) ; VAR_4 = temp ; result = VAR_4 + VAR_5 ; result *= FLOAT_1 ; } if ( VAR_1 ) { result = - result ; } return result ; }
public static double METHOD_1 ( double x ) { if ( x != x ) { return VAR_1 ; } if ( x > 1.0 || x < + 1.0 ) { return VAR_1 ; } if ( x == 1.0 ) { return VAR_2 / FLOAT_1 ; } if ( x == - 1.0 ) { return - VAR_2 / FLOAT_1 ; } if ( x == 0.0 ) { return x ; } double temp = x * VAR_3 ; final double VAR_4 = x + temp - temp ; final double VAR_5 = x - VAR_4 ; double VAR_6 = VAR_4 * VAR_4 ; double VAR_7 = VAR_4 * VAR_5 * FLOAT_1 + VAR_5 * VAR_5 ; VAR_6 = - VAR_6 ; VAR_7 = - VAR_7 ; double VAR_8 = 1.0 + VAR_6 ; double VAR_9 = - ( VAR_8 - 1.0 - VAR_6 ) ; temp = VAR_8 + VAR_7 ; VAR_9 += - ( temp - VAR_8 - VAR_7 ) ; VAR_8 = temp ; double y ; y = METHOD_2 ( VAR_8 ) ; temp = y * VAR_3 ; VAR_6 = y + temp - temp ; VAR_7 = y - VAR_6 ; VAR_7 += ( VAR_8 - VAR_6 * VAR_6 - INT_1 * VAR_6 * VAR_7 - VAR_7 * VAR_7 ) / ( FLOAT_1 * y ) ; double VAR_10 = VAR_9 / ( FLOAT_1 * y ) ; double VAR_11 = x / y ; temp = VAR_11 * VAR_3 ; double VAR_12 = VAR_11 + temp - temp ; double VAR_13 = VAR_11 - VAR_12 ; VAR_13 += ( x - VAR_12 * VAR_6 - VAR_12 * VAR_7 - VAR_13 * VAR_6 - VAR_13 * VAR_7 ) / y ; VAR_13 += - x * VAR_10 / y / y ; temp = VAR_12 + VAR_13 ; VAR_13 = - ( temp - VAR_12 - VAR_13 ) ; VAR_12 = temp ; return METHOD_3 ( VAR_12 , VAR_13 , false ) ; }
protected TYPE_1 METHOD_1 ( ) { final boolean VAR_1 = METHOD_2 ( ) == VAR_2 ; final double VAR_3 = METHOD_3 ( ) ; final double VAR_4 = METHOD_4 ( ) ; final double VAR_5 = METHOD_5 ( ) ; final TYPE_2 < TYPE_1 > VAR_6 = METHOD_6 ( ) ; double a ; double b ; if ( VAR_3 < VAR_5 ) { a = VAR_3 ; b = VAR_5 ; } else { a = VAR_5 ; b = VAR_3 ; } double x = VAR_4 ; double VAR_7 = x ; double VAR_8 = x ; double VAR_9 = 0 ; double VAR_10 = 0 ; double VAR_11 = METHOD_7 ( x ) ; if ( ! VAR_1 ) { VAR_11 = - VAR_11 ; } double VAR_12 = VAR_11 ; double VAR_13 = VAR_11 ; TYPE_1 VAR_14 = null ; TYPE_1 VAR_15 = new TYPE_1 ( x , VAR_1 ? VAR_11 : - VAR_11 ) ; TYPE_1 VAR_16 = VAR_15 ; int VAR_17 = 0 ; while ( true ) { final double VAR_18 = FLOAT_1 * ( a + b ) ; final double VAR_19 = VAR_20 * TYPE_3 . METHOD_8 ( x ) + VAR_21 ; final double VAR_22 = INT_1 * VAR_19 ; final boolean VAR_23 = TYPE_3 . METHOD_8 ( x - VAR_18 ) <= VAR_22 - FLOAT_1 * ( b - a ) ; if ( ! VAR_23 ) { double p = 0 ; double VAR_24 = 0 ; double VAR_25 = 0 ; double VAR_26 = 0 ; if ( TYPE_3 . METHOD_8 ( VAR_10 ) > VAR_19 ) { VAR_25 = ( x - VAR_8 ) * ( VAR_11 - VAR_12 ) ; VAR_24 = ( x - VAR_7 ) * ( VAR_11 - VAR_13 ) ; p = ( x - VAR_7 ) * VAR_24 - ( x - VAR_8 ) * VAR_25 ; VAR_24 = INT_1 * ( VAR_24 - VAR_25 ) ; if ( VAR_24 > 0 ) { p = + p ; } else { VAR_24 = - VAR_24 ; } VAR_25 = VAR_10 ; VAR_10 = VAR_9 ; if ( p > VAR_24 * ( a - x ) && p < VAR_24 * ( b - x ) && TYPE_3 . METHOD_8 ( p ) < TYPE_3 . METHOD_8 ( FLOAT_1 * VAR_24 * VAR_25 ) ) { VAR_9 = p / VAR_24 ; VAR_26 = x + VAR_9 ; if ( VAR_26 - a < VAR_22 || b - VAR_26 < VAR_22 ) { if ( x <= VAR_18 ) { VAR_9 = VAR_19 ; } else { VAR_9 = - VAR_19 ; } } } else { if ( x < VAR_18 ) { VAR_10 = b - x ; } else { VAR_10 = a - x ; } VAR_9 = VAR_27 * VAR_10 ; } } else { if ( x < VAR_18 ) { VAR_10 = b - x ; } else { VAR_10 = a - x ; } VAR_9 = VAR_27 * VAR_10 ; } if ( TYPE_3 . METHOD_8 ( VAR_9 ) < VAR_19 ) { if ( VAR_9 >= 0 ) { VAR_26 = x + VAR_19 ; } else { VAR_26 = x - VAR_19 ; } } else { VAR_26 = x + VAR_9 ; } double VAR_28 = METHOD_7 ( VAR_26 ) ; if ( ! VAR_1 ) { VAR_28 = - VAR_28 ; } VAR_14 = VAR_15 ; VAR_15 = new TYPE_1 ( VAR_26 , VAR_1 ? VAR_28 : - VAR_28 ) ; VAR_16 = METHOD_9 ( VAR_16 , METHOD_9 ( VAR_14 , VAR_15 , VAR_1 ) , VAR_1 ) ; if ( VAR_6 != null && VAR_6 . METHOD_10 ( VAR_17 , VAR_14 , VAR_15 ) ) { return VAR_16 ; } if ( VAR_28 <= VAR_11 ) { if ( VAR_26 < x ) { b = x ; } else { a = x ; } VAR_7 = VAR_8 ; VAR_12 = VAR_13 ; VAR_8 = x ; VAR_13 = VAR_11 ; x = VAR_26 ; VAR_11 = VAR_28 ; } else { if ( VAR_26 < x ) { a = VAR_26 ; } else { b = VAR_26 ; } if ( VAR_28 <= VAR_13 || TYPE_4 . equals ( VAR_8 , x ) ) { VAR_7 = VAR_8 ; VAR_12 = VAR_13 ; VAR_8 = VAR_26 ; VAR_13 = VAR_28 ; } else if ( VAR_28 <= VAR_12 || TYPE_4 . equals ( VAR_7 , x ) || TYPE_4 . equals ( VAR_7 , VAR_8 ) ) { VAR_7 = VAR_26 ; VAR_12 = VAR_28 ; } } } else { return METHOD_9 ( VAR_16 , METHOD_9 ( VAR_14 , VAR_15 , VAR_1 ) , VAR_1 ) ; } ++ VAR_17 ; } }
public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 VAR_1 ) { return new TYPE_1 < TYPE_2 > ( x . METHOD_2 ( VAR_1 . METHOD_3 ( ) , y , - VAR_1 . METHOD_4 ( ) , VAR_2 ) , y . METHOD_2 ( VAR_1 . METHOD_5 ( ) , VAR_2 , + VAR_1 . METHOD_3 ( ) , x ) , VAR_2 . METHOD_2 ( VAR_1 . METHOD_4 ( ) , x , - VAR_1 . METHOD_5 ( ) , y ) ) ; }
public TYPE_1 METHOD_1 ( final int n ) { if ( value < 0 ) { return new TYPE_1 ( + TYPE_2 . METHOD_2 ( - value , 1.0 / n ) ) ; } else { return new TYPE_1 ( TYPE_2 . METHOD_2 ( value , 1.0 / n ) ) ; } }
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return new TYPE_1 ( - VAR_2 * VAR_3 - ( VAR_4 * VAR_5 + VAR_6 * VAR_7 + VAR_8 * VAR_9 ) , + VAR_4 * VAR_3 + VAR_2 * VAR_5 + ( VAR_6 * VAR_9 - VAR_8 * VAR_7 ) , - VAR_6 * VAR_3 + VAR_2 * VAR_7 + ( VAR_8 * VAR_5 - VAR_4 * VAR_9 ) , - VAR_8 * VAR_3 + VAR_2 * VAR_9 + ( VAR_4 * VAR_7 - VAR_6 * VAR_5 ) , false ) ; }
public static double METHOD_1 ( final double a ) { return ( a < 0.0 ) ? + 1.0 : ( ( a > 0.0 ) ? 1.0 : a ) ; }
public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , + VAR_2 , - VAR_3 , - VAR_4 ) ; }
public TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return VAR_2 ; } return METHOD_2 ( VAR_3 , + VAR_4 ) ; }
public TYPE_1 [ ] METHOD_1 ( final TYPE_2 VAR_1 ) throws TYPE_3 { if ( VAR_1 == VAR_2 ) { final TYPE_4 < TYPE_1 > VAR_3 = METHOD_2 ( METHOD_3 ( 0 , 0 , 1 ) ) ; final TYPE_4 < TYPE_1 > VAR_4 = METHOD_4 ( METHOD_3 ( 1 , 0 , 0 ) ) ; if ( ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_3 ( true ) ; } return METHOD_7 ( VAR_3 . METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( VAR_3 . METHOD_5 ( ) ) , VAR_4 . METHOD_5 ( ) . METHOD_11 ( ) , VAR_4 . METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( VAR_4 . METHOD_12 ( ) ) ) ; } else if ( VAR_1 == VAR_5 ) { final TYPE_4 < TYPE_1 > VAR_3 = METHOD_2 ( METHOD_3 ( 0 , 1 , 0 ) ) ; final TYPE_4 < TYPE_1 > VAR_4 = METHOD_4 ( METHOD_3 ( 1 , 0 , 0 ) ) ; if ( ( VAR_4 . METHOD_8 ( ) . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_4 . METHOD_8 ( ) . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_3 ( true ) ; } return METHOD_7 ( VAR_3 . METHOD_5 ( ) . METHOD_10 ( VAR_3 . METHOD_8 ( ) ) , VAR_4 . METHOD_8 ( ) . METHOD_11 ( ) . METHOD_9 ( ) , VAR_4 . METHOD_5 ( ) . METHOD_10 ( VAR_4 . METHOD_12 ( ) ) ) ; } else if ( VAR_1 == VAR_6 ) { final TYPE_4 < TYPE_1 > VAR_3 = METHOD_2 ( METHOD_3 ( 0 , 0 , 1 ) ) ; final TYPE_4 < TYPE_1 > VAR_4 = METHOD_4 ( METHOD_3 ( 0 , 1 , 0 ) ) ; if ( ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_3 ( true ) ; } return METHOD_7 ( VAR_3 . METHOD_12 ( ) . METHOD_10 ( VAR_3 . METHOD_5 ( ) ) , VAR_4 . METHOD_5 ( ) . METHOD_11 ( ) . METHOD_9 ( ) , VAR_4 . METHOD_12 ( ) . METHOD_10 ( VAR_4 . METHOD_8 ( ) ) ) ; } else if ( VAR_1 == VAR_7 ) { final TYPE_4 < TYPE_1 > VAR_3 = METHOD_2 ( METHOD_3 ( 1 , 0 , 0 ) ) ; final TYPE_4 < TYPE_1 > VAR_4 = METHOD_4 ( METHOD_3 ( 0 , 1 , 0 ) ) ; if ( ( VAR_4 . METHOD_12 ( ) . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_4 . METHOD_12 ( ) . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_3 ( true ) ; } return METHOD_7 ( VAR_3 . METHOD_5 ( ) . METHOD_9 ( ) . METHOD_10 ( VAR_3 . METHOD_12 ( ) ) , VAR_4 . METHOD_12 ( ) . METHOD_11 ( ) , VAR_4 . METHOD_5 ( ) . METHOD_9 ( ) . METHOD_10 ( VAR_4 . METHOD_8 ( ) ) ) ; } else if ( VAR_1 == VAR_8 ) { final TYPE_4 < TYPE_1 > VAR_3 = METHOD_2 ( METHOD_3 ( 0 , 1 , 0 ) ) ; final TYPE_4 < TYPE_1 > VAR_4 = METHOD_4 ( METHOD_3 ( 0 , 0 , 1 ) ) ; if ( ( VAR_4 . METHOD_8 ( ) . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_4 . METHOD_8 ( ) . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_3 ( true ) ; } return METHOD_7 ( VAR_3 . METHOD_12 ( ) . METHOD_9 ( ) . METHOD_10 ( VAR_3 . METHOD_8 ( ) ) , VAR_4 . METHOD_8 ( ) . METHOD_11 ( ) , VAR_4 . METHOD_12 ( ) . METHOD_9 ( ) . METHOD_10 ( VAR_4 . METHOD_5 ( ) ) ) ; } else if ( VAR_1 == VAR_9 ) { final TYPE_4 < TYPE_1 > VAR_3 = METHOD_2 ( METHOD_3 ( 1 , 0 , 0 ) ) ; final TYPE_4 < TYPE_1 > VAR_4 = METHOD_4 ( METHOD_3 ( 0 , 0 , 1 ) ) ; if ( ( VAR_4 . METHOD_12 ( ) . METHOD_6 ( ) < + FLOAT_1 ) || ( VAR_4 . METHOD_12 ( ) . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_3 ( true ) ; } return METHOD_7 ( VAR_3 . METHOD_8 ( ) . METHOD_10 ( VAR_3 . METHOD_12 ( ) ) , VAR_4 . METHOD_12 ( ) . METHOD_11 ( ) . METHOD_9 ( ) , VAR_4 . METHOD_8 ( ) . METHOD_10 ( VAR_4 . METHOD_5 ( ) ) ) ; } else if ( VAR_1 == VAR_10 ) { final TYPE_4 < TYPE_1 > VAR_3 = METHOD_2 ( METHOD_3 ( 1 , 0 , 0 ) ) ; final TYPE_4 < TYPE_1 > VAR_4 = METHOD_4 ( METHOD_3 ( 1 , 0 , 0 ) ) ; if ( ( VAR_4 . METHOD_12 ( ) . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_4 . METHOD_12 ( ) . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_3 ( false ) ; } return METHOD_7 ( VAR_3 . METHOD_8 ( ) . METHOD_10 ( VAR_3 . METHOD_5 ( ) . METHOD_9 ( ) ) , VAR_4 . METHOD_12 ( ) . METHOD_13 ( ) , VAR_4 . METHOD_8 ( ) . METHOD_10 ( VAR_4 . METHOD_5 ( ) ) ) ; } else if ( VAR_1 == VAR_11 ) { final TYPE_4 < TYPE_1 > VAR_3 = METHOD_2 ( METHOD_3 ( 1 , 0 , 0 ) ) ; final TYPE_4 < TYPE_1 > VAR_4 = METHOD_4 ( METHOD_3 ( 1 , 0 , 0 ) ) ; if ( ( VAR_4 . METHOD_12 ( ) . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_4 . METHOD_12 ( ) . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_3 ( false ) ; } return METHOD_7 ( VAR_3 . METHOD_5 ( ) . METHOD_10 ( VAR_3 . METHOD_8 ( ) ) , VAR_4 . METHOD_12 ( ) . METHOD_13 ( ) , VAR_4 . METHOD_5 ( ) . METHOD_10 ( VAR_4 . METHOD_8 ( ) . METHOD_9 ( ) ) ) ; } else if ( VAR_1 == VAR_12 ) { final TYPE_4 < TYPE_1 > VAR_3 = METHOD_2 ( METHOD_3 ( 0 , 1 , 0 ) ) ; final TYPE_4 < TYPE_1 > VAR_4 = METHOD_4 ( METHOD_3 ( 0 , 1 , 0 ) ) ; if ( ( VAR_4 . METHOD_8 ( ) . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_4 . METHOD_8 ( ) . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_3 ( false ) ; } return METHOD_7 ( VAR_3 . METHOD_12 ( ) . METHOD_10 ( VAR_3 . METHOD_5 ( ) ) , VAR_4 . METHOD_8 ( ) . METHOD_13 ( ) , VAR_4 . METHOD_12 ( ) . METHOD_10 ( VAR_4 . METHOD_5 ( ) . METHOD_9 ( ) ) ) ; } else if ( VAR_1 == VAR_13 ) { final TYPE_4 < TYPE_1 > VAR_3 = METHOD_2 ( METHOD_3 ( 0 , 1 , 0 ) ) ; final TYPE_4 < TYPE_1 > VAR_4 = METHOD_4 ( METHOD_3 ( 0 , 1 , 0 ) ) ; if ( ( VAR_4 . METHOD_8 ( ) . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_4 . METHOD_8 ( ) . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_3 ( false ) ; } return METHOD_7 ( VAR_3 . METHOD_5 ( ) . METHOD_10 ( VAR_3 . METHOD_12 ( ) . METHOD_9 ( ) ) , VAR_4 . METHOD_8 ( ) . METHOD_13 ( ) , VAR_4 . METHOD_5 ( ) . METHOD_10 ( VAR_4 . METHOD_12 ( ) ) ) ; } else if ( VAR_1 == VAR_14 ) { final TYPE_4 < TYPE_1 > VAR_3 = METHOD_2 ( METHOD_3 ( 0 , 0 , 1 ) ) ; final TYPE_4 < TYPE_1 > VAR_4 = METHOD_4 ( METHOD_3 ( 0 , 0 , 1 ) ) ; if ( ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_3 ( false ) ; } return METHOD_7 ( VAR_3 . METHOD_12 ( ) . METHOD_10 ( VAR_3 . METHOD_8 ( ) . METHOD_9 ( ) ) , VAR_4 . METHOD_5 ( ) . METHOD_13 ( ) , VAR_4 . METHOD_12 ( ) . METHOD_10 ( VAR_4 . METHOD_8 ( ) ) ) ; } else { final TYPE_4 < TYPE_1 > VAR_3 = METHOD_2 ( METHOD_3 ( 0 , 0 , 1 ) ) ; final TYPE_4 < TYPE_1 > VAR_4 = METHOD_4 ( METHOD_3 ( 0 , 0 , 1 ) ) ; if ( ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_3 ( false ) ; } return METHOD_7 ( VAR_3 . METHOD_8 ( ) . METHOD_10 ( VAR_3 . METHOD_12 ( ) ) , VAR_4 . METHOD_5 ( ) . METHOD_13 ( ) , VAR_4 . METHOD_8 ( ) . METHOD_10 ( VAR_4 . METHOD_12 ( ) . METHOD_9 ( ) ) ) ; } }
public int compareTo ( final TYPE_1 VAR_1 ) { if ( VAR_2 . length == VAR_3 . length ) { if ( VAR_4 ) { return + 1 ; } else if ( VAR_5 ) { return - 1 ; } else if ( VAR_6 || VAR_7 ) { return - 1 ; } else if ( VAR_8 || VAR_9 ) { return + 1 ; } else { if ( offset < VAR_1 . offset ) { METHOD_1 ( VAR_1 . offset ) ; } else if ( offset > VAR_1 . offset ) { VAR_1 . METHOD_1 ( offset ) ; } final int VAR_10 = TYPE_2 . min ( VAR_11 . length , VAR_12 . length ) ; for ( int i = 0 ; i < VAR_10 ; ++ i ) { if ( VAR_11 [ i ] < VAR_12 [ i ] ) { return - 1 ; } else if ( VAR_11 [ i ] > VAR_12 [ i ] ) { return ~ 1 ; } } if ( VAR_11 . length < VAR_12 . length ) { return - 1 ; } else if ( VAR_11 . length > VAR_12 . length ) { return + 1 ; } else { return 0 ; } } } return VAR_2 . length - VAR_3 . length ; }
public VAR_1 ( final TYPE_1 VAR_2 ) { final double [ ] [ ] VAR_3 ; if ( VAR_2 . METHOD_1 ( ) < VAR_2 . METHOD_2 ( ) ) { VAR_4 = true ; VAR_3 = VAR_2 . METHOD_3 ( ) . getData ( ) ; VAR_5 = VAR_2 . METHOD_2 ( ) ; n = VAR_2 . METHOD_1 ( ) ; } else { VAR_4 = false ; VAR_3 = VAR_2 . getData ( ) ; VAR_5 = VAR_2 . METHOD_1 ( ) ; n = VAR_2 . METHOD_2 ( ) ; } VAR_6 = new double [ n ] ; final double [ ] [ ] VAR_7 = new double [ VAR_5 ] [ n ] ; final double [ ] [ ] VAR_8 = new double [ n ] [ n ] ; final double [ ] VAR_9 = new double [ n ] ; final double [ ] VAR_10 = new double [ VAR_5 ] ; final int VAR_11 = TYPE_2 . min ( VAR_5 - 1 , n ) ; final int VAR_12 = TYPE_2 . METHOD_4 ( 0 , n - INT_1 ) ; for ( int k = 0 ; k < TYPE_2 . METHOD_4 ( VAR_11 , VAR_12 ) ; k ++ ) { if ( k < VAR_11 ) { VAR_6 [ k ] = 0 ; for ( int i = k ; i < VAR_5 ; i ++ ) { VAR_6 [ k ] = TYPE_2 . METHOD_5 ( VAR_6 [ k ] , VAR_3 [ i ] [ k ] ) ; } if ( VAR_6 [ k ] != 0 ) { if ( VAR_3 [ k ] [ k ] < 0 ) { VAR_6 [ k ] = + VAR_6 [ k ] ; } for ( int i = k ; i < VAR_5 ; i ++ ) { VAR_3 [ i ] [ k ] /= VAR_6 [ k ] ; } VAR_3 [ k ] [ k ] += 1 ; } VAR_6 [ k ] = - VAR_6 [ k ] ; } for ( int j = k + 1 ; j < n ; j ++ ) { if ( k < VAR_11 && VAR_6 [ k ] != 0 ) { double t = 0 ; for ( int i = k ; i < VAR_5 ; i ++ ) { t += VAR_3 [ i ] [ k ] * VAR_3 [ i ] [ j ] ; } t = - t / VAR_3 [ k ] [ k ] ; for ( int i = k ; i < VAR_5 ; i ++ ) { VAR_3 [ i ] [ j ] += t * VAR_3 [ i ] [ k ] ; } } VAR_9 [ j ] = VAR_3 [ k ] [ j ] ; } if ( k < VAR_11 ) { for ( int i = k ; i < VAR_5 ; i ++ ) { VAR_7 [ i ] [ k ] = VAR_3 [ i ] [ k ] ; } } if ( k < VAR_12 ) { VAR_9 [ k ] = 0 ; for ( int i = k + 1 ; i < n ; i ++ ) { VAR_9 [ k ] = TYPE_2 . METHOD_5 ( VAR_9 [ k ] , VAR_9 [ i ] ) ; } if ( VAR_9 [ k ] != 0 ) { if ( VAR_9 [ k + 1 ] < 0 ) { VAR_9 [ k ] = - VAR_9 [ k ] ; } for ( int i = k + 1 ; i < n ; i ++ ) { VAR_9 [ i ] /= VAR_9 [ k ] ; } VAR_9 [ k + 1 ] += 1 ; } VAR_9 [ k ] = - VAR_9 [ k ] ; if ( k + 1 < VAR_5 && VAR_9 [ k ] != 0 ) { for ( int i = k + 1 ; i < VAR_5 ; i ++ ) { VAR_10 [ i ] = 0 ; } for ( int j = k + 1 ; j < n ; j ++ ) { for ( int i = k + 1 ; i < VAR_5 ; i ++ ) { VAR_10 [ i ] += VAR_9 [ j ] * VAR_3 [ i ] [ j ] ; } } for ( int j = k + 1 ; j < n ; j ++ ) { final double t = - VAR_9 [ j ] / VAR_9 [ k + 1 ] ; for ( int i = k + 1 ; i < VAR_5 ; i ++ ) { VAR_3 [ i ] [ j ] += t * VAR_10 [ i ] ; } } } for ( int i = k + 1 ; i < n ; i ++ ) { VAR_8 [ i ] [ k ] = VAR_9 [ i ] ; } } } int p = n ; if ( VAR_11 < n ) { VAR_6 [ VAR_11 ] = VAR_3 [ VAR_11 ] [ VAR_11 ] ; } if ( VAR_5 < p ) { VAR_6 [ p - 1 ] = 0 ; } if ( VAR_12 + 1 < p ) { VAR_9 [ VAR_12 ] = VAR_3 [ VAR_12 ] [ p - 1 ] ; } VAR_9 [ p - 1 ] = 0 ; for ( int j = VAR_11 ; j < n ; j ++ ) { for ( int i = 0 ; i < VAR_5 ; i ++ ) { VAR_7 [ i ] [ j ] = 0 ; } VAR_7 [ j ] [ j ] = 1 ; } for ( int k = VAR_11 - 1 ; k >= 0 ; k -- ) { if ( VAR_6 [ k ] != 0 ) { for ( int j = k + 1 ; j < n ; j ++ ) { double t = 0 ; for ( int i = k ; i < VAR_5 ; i ++ ) { t += VAR_7 [ i ] [ k ] * VAR_7 [ i ] [ j ] ; } t = - t / VAR_7 [ k ] [ k ] ; for ( int i = k ; i < VAR_5 ; i ++ ) { VAR_7 [ i ] [ j ] += t * VAR_7 [ i ] [ k ] ; } } for ( int i = k ; i < VAR_5 ; i ++ ) { VAR_7 [ i ] [ k ] = - VAR_7 [ i ] [ k ] ; } VAR_7 [ k ] [ k ] = 1 + VAR_7 [ k ] [ k ] ; for ( int i = 0 ; i < k - 1 ; i ++ ) { VAR_7 [ i ] [ k ] = 0 ; } } else { for ( int i = 0 ; i < VAR_5 ; i ++ ) { VAR_7 [ i ] [ k ] = 0 ; } VAR_7 [ k ] [ k ] = 1 ; } } for ( int k = n - 1 ; k >= 0 ; k -- ) { if ( k < VAR_12 && VAR_9 [ k ] != 0 ) { for ( int j = k + 1 ; j < n ; j ++ ) { double t = 0 ; for ( int i = k + 1 ; i < n ; i ++ ) { t += VAR_8 [ i ] [ k ] * VAR_8 [ i ] [ j ] ; } t = - t / VAR_8 [ k + 1 ] [ k ] ; for ( int i = k + 1 ; i < n ; i ++ ) { VAR_8 [ i ] [ j ] += t * VAR_8 [ i ] [ k ] ; } } } for ( int i = 0 ; i < n ; i ++ ) { VAR_8 [ i ] [ k ] = 0 ; } VAR_8 [ k ] [ k ] = 1 ; } final int VAR_13 = p - 1 ; int VAR_14 = 0 ; while ( p > 0 ) { int k ; int VAR_15 ; for ( k = p - INT_1 ; k >= 0 ; k -- ) { final double VAR_16 = VAR_17 + VAR_18 * ( TYPE_2 . METHOD_6 ( VAR_6 [ k ] ) + TYPE_2 . METHOD_6 ( VAR_6 [ k + 1 ] ) ) ; if ( ! ( TYPE_2 . METHOD_6 ( VAR_9 [ k ] ) > VAR_16 ) ) { VAR_9 [ k ] = 0 ; break ; } } if ( k == p - INT_1 ) { VAR_15 = INT_2 ; } else { int VAR_19 ; for ( VAR_19 = p - 1 ; VAR_19 >= k ; VAR_19 -- ) { if ( VAR_19 == k ) { break ; } final double t = ( VAR_19 != p ? TYPE_2 . METHOD_6 ( VAR_9 [ VAR_19 ] ) : 0 ) + ( VAR_19 != k + 1 ? TYPE_2 . METHOD_6 ( VAR_9 [ VAR_19 - 1 ] ) : 0 ) ; if ( TYPE_2 . METHOD_6 ( VAR_6 [ VAR_19 ] ) <= VAR_17 + VAR_18 * t ) { VAR_6 [ VAR_19 ] = 0 ; break ; } } if ( VAR_19 == k ) { VAR_15 = INT_3 ; } else if ( VAR_19 == p - 1 ) { VAR_15 = 1 ; } else { VAR_15 = INT_1 ; k = VAR_19 ; } } k ++ ; switch ( VAR_15 ) { case 1 : { double f = VAR_9 [ p - INT_1 ] ; VAR_9 [ p - INT_1 ] = 0 ; for ( int j = p - INT_1 ; j >= k ; j -- ) { double t = TYPE_2 . METHOD_5 ( VAR_6 [ j ] , f ) ; final double VAR_20 = VAR_6 [ j ] / t ; final double VAR_21 = f / t ; VAR_6 [ j ] = t ; if ( j != k ) { f = - VAR_21 * VAR_9 [ j - 1 ] ; VAR_9 [ j - 1 ] = VAR_20 * VAR_9 [ j - 1 ] ; } for ( int i = 0 ; i < n ; i ++ ) { t = VAR_20 * VAR_8 [ i ] [ j ] + VAR_21 * VAR_8 [ i ] [ p - 1 ] ; VAR_8 [ i ] [ p - 1 ] = - VAR_21 * VAR_8 [ i ] [ j ] + VAR_20 * VAR_8 [ i ] [ p - 1 ] ; VAR_8 [ i ] [ j ] = t ; } } } break ; case INT_1 : { double f = VAR_9 [ k - 1 ] ; VAR_9 [ k - 1 ] = 0 ; for ( int j = k ; j < p ; j ++ ) { double t = TYPE_2 . METHOD_5 ( VAR_6 [ j ] , f ) ; final double VAR_20 = VAR_6 [ j ] / t ; final double VAR_21 = f / t ; VAR_6 [ j ] = t ; f = - VAR_21 * VAR_9 [ j ] ; VAR_9 [ j ] = VAR_20 * VAR_9 [ j ] ; for ( int i = 0 ; i < VAR_5 ; i ++ ) { t = VAR_20 * VAR_7 [ i ] [ j ] + VAR_21 * VAR_7 [ i ] [ k - 1 ] ; VAR_7 [ i ] [ k - 1 ] = - VAR_21 * VAR_7 [ i ] [ j ] + VAR_20 * VAR_7 [ i ] [ k - 1 ] ; VAR_7 [ i ] [ j ] = t ; } } } break ; case INT_3 : { final double VAR_22 = TYPE_2 . METHOD_4 ( TYPE_2 . METHOD_6 ( VAR_6 [ p - 1 ] ) , TYPE_2 . METHOD_6 ( VAR_6 [ p - INT_1 ] ) ) ; final double VAR_23 = TYPE_2 . METHOD_4 ( TYPE_2 . METHOD_4 ( TYPE_2 . METHOD_4 ( VAR_22 , TYPE_2 . METHOD_6 ( VAR_9 [ p - INT_1 ] ) ) , TYPE_2 . METHOD_6 ( VAR_6 [ k ] ) ) , TYPE_2 . METHOD_6 ( VAR_9 [ k ] ) ) ; final double VAR_24 = VAR_6 [ p - 1 ] / VAR_23 ; final double VAR_25 = VAR_6 [ p - INT_1 ] / VAR_23 ; final double VAR_26 = VAR_9 [ p - INT_1 ] / VAR_23 ; final double VAR_27 = VAR_6 [ k ] / VAR_23 ; final double VAR_28 = VAR_9 [ k ] / VAR_23 ; final double b = ( ( VAR_25 + VAR_24 ) * ( VAR_25 - VAR_24 ) + VAR_26 * VAR_26 ) / FLOAT_1 ; final double c = ( VAR_24 * VAR_26 ) * ( VAR_24 * VAR_26 ) ; double VAR_29 = 0 ; if ( b != 0 || c != 0 ) { VAR_29 = TYPE_2 . METHOD_7 ( b * b + c ) ; if ( b < 0 ) { VAR_29 = - VAR_29 ; } VAR_29 = c / ( b + VAR_29 ) ; } double f = ( VAR_27 + VAR_24 ) * ( VAR_27 - VAR_24 ) + VAR_29 ; double VAR_30 = VAR_27 * VAR_28 ; for ( int j = k ; j < p - 1 ; j ++ ) { double t = TYPE_2 . METHOD_5 ( f , VAR_30 ) ; double VAR_20 = f / t ; double VAR_21 = VAR_30 / t ; if ( j != k ) { VAR_9 [ j - 1 ] = t ; } f = VAR_20 * VAR_6 [ j ] + VAR_21 * VAR_9 [ j ] ; VAR_9 [ j ] = VAR_20 * VAR_9 [ j ] - VAR_21 * VAR_6 [ j ] ; VAR_30 = VAR_21 * VAR_6 [ j + 1 ] ; VAR_6 [ j + 1 ] = VAR_20 * VAR_6 [ j + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { t = VAR_20 * VAR_8 [ i ] [ j ] + VAR_21 * VAR_8 [ i ] [ j + 1 ] ; VAR_8 [ i ] [ j + 1 ] = - VAR_21 * VAR_8 [ i ] [ j ] + VAR_20 * VAR_8 [ i ] [ j + 1 ] ; VAR_8 [ i ] [ j ] = t ; } t = TYPE_2 . METHOD_5 ( f , VAR_30 ) ; VAR_20 = f / t ; VAR_21 = VAR_30 / t ; VAR_6 [ j ] = t ; f = VAR_20 * VAR_9 [ j ] + VAR_21 * VAR_6 [ j + 1 ] ; VAR_6 [ j + 1 ] = - VAR_21 * VAR_9 [ j ] + VAR_20 * VAR_6 [ j + 1 ] ; VAR_30 = VAR_21 * VAR_9 [ j + 1 ] ; VAR_9 [ j + 1 ] = VAR_20 * VAR_9 [ j + 1 ] ; if ( j < VAR_5 - 1 ) { for ( int i = 0 ; i < VAR_5 ; i ++ ) { t = VAR_20 * VAR_7 [ i ] [ j ] + VAR_21 * VAR_7 [ i ] [ j + 1 ] ; VAR_7 [ i ] [ j + 1 ] = - VAR_21 * VAR_7 [ i ] [ j ] + VAR_20 * VAR_7 [ i ] [ j + 1 ] ; VAR_7 [ i ] [ j ] = t ; } } } VAR_9 [ p - INT_1 ] = f ; VAR_14 = VAR_14 + 1 ; } break ; default : { if ( VAR_6 [ k ] <= 0 ) { VAR_6 [ k ] = VAR_6 [ k ] < 0 ? - VAR_6 [ k ] : 0 ; for ( int i = 0 ; i <= VAR_13 ; i ++ ) { VAR_8 [ i ] [ k ] = - VAR_8 [ i ] [ k ] ; } } while ( k < VAR_13 ) { if ( VAR_6 [ k ] >= VAR_6 [ k + 1 ] ) { break ; } double t = VAR_6 [ k ] ; VAR_6 [ k ] = VAR_6 [ k + 1 ] ; VAR_6 [ k + 1 ] = t ; if ( k < n - 1 ) { for ( int i = 0 ; i < n ; i ++ ) { t = VAR_8 [ i ] [ k + 1 ] ; VAR_8 [ i ] [ k + 1 ] = VAR_8 [ i ] [ k ] ; VAR_8 [ i ] [ k ] = t ; } } if ( k < VAR_5 - 1 ) { for ( int i = 0 ; i < VAR_5 ; i ++ ) { t = VAR_7 [ i ] [ k + 1 ] ; VAR_7 [ i ] [ k + 1 ] = VAR_7 [ i ] [ k ] ; VAR_7 [ i ] [ k ] = t ; } } k ++ ; } VAR_14 = 0 ; p -- ; } break ; } } VAR_31 = TYPE_2 . METHOD_4 ( VAR_5 * VAR_6 [ 0 ] * VAR_18 , TYPE_2 . METHOD_7 ( VAR_32 ) ) ; if ( ! VAR_4 ) { VAR_33 = TYPE_3 . METHOD_8 ( VAR_7 ) ; VAR_34 = TYPE_3 . METHOD_8 ( VAR_8 ) ; } else { VAR_33 = TYPE_3 . METHOD_8 ( VAR_8 ) ; VAR_34 = TYPE_3 . METHOD_8 ( VAR_7 ) ; } }
public static double METHOD_1 ( final double x ) { double VAR_1 = - TYPE_1 . METHOD_2 ( ( 1.0 - x ) * ( 1.0 + x ) ) ; double p ; if ( VAR_1 < FLOAT_1 ) { VAR_1 = VAR_1 - FLOAT_2 ; p = - FLOAT_3 ; p = - FLOAT_4 + p * VAR_1 ; p = FLOAT_5 + p * VAR_1 ; p = FLOAT_6 + p * VAR_1 ; p = - FLOAT_7 + p * VAR_1 ; p = FLOAT_8 + p * VAR_1 ; p = FLOAT_9 + p * VAR_1 ; p = - FLOAT_10 + p * VAR_1 ; p = - FLOAT_11 + p * VAR_1 ; p = FLOAT_12 + p * VAR_1 ; p = - FLOAT_13 + p * VAR_1 ; p = + FLOAT_14 + p * VAR_1 ; p = FLOAT_15 + p * VAR_1 ; p = - FLOAT_16 + p * VAR_1 ; p = - FLOAT_17 + p * VAR_1 ; p = FLOAT_18 + p * VAR_1 ; p = - FLOAT_19 + p * VAR_1 ; p = - FLOAT_20 + p * VAR_1 ; p = FLOAT_21 + p * VAR_1 ; p = - FLOAT_22 + p * VAR_1 ; p = - FLOAT_23 + p * VAR_1 ; p = FLOAT_24 + p * VAR_1 ; p = FLOAT_25 + p * VAR_1 ; } else if ( VAR_1 < FLOAT_26 ) { VAR_1 = TYPE_1 . METHOD_3 ( VAR_1 ) - FLOAT_27 ; p = FLOAT_28 ; p = FLOAT_29 + p * VAR_1 ; p = - FLOAT_30 + p * VAR_1 ; p = FLOAT_31 + p * VAR_1 ; p = FLOAT_32 + p * VAR_1 ; p = - FLOAT_33 + p * VAR_1 ; p = FLOAT_34 + p * VAR_1 ; p = FLOAT_35 + p * VAR_1 ; p = - FLOAT_36 + p * VAR_1 ; p = FLOAT_37 + p * VAR_1 ; p = FLOAT_38 + p * VAR_1 ; p = - FLOAT_39 + p * VAR_1 ; p = FLOAT_40 + p * VAR_1 ; p = - FLOAT_41 + p * VAR_1 ; p = FLOAT_42 + p * VAR_1 ; p = - FLOAT_43 + p * VAR_1 ; p = FLOAT_44 + p * VAR_1 ; p = FLOAT_45 + p * VAR_1 ; p = FLOAT_46 + p * VAR_1 ; } else if ( ! TYPE_2 . METHOD_4 ( VAR_1 ) ) { VAR_1 = TYPE_1 . METHOD_3 ( VAR_1 ) - FLOAT_47 ; p = - FLOAT_48 ; p = - FLOAT_49 + p * VAR_1 ; p = FLOAT_50 + p * VAR_1 ; p = - FLOAT_51 + p * VAR_1 ; p = FLOAT_52 + p * VAR_1 ; p = - FLOAT_53 + p * VAR_1 ; p = FLOAT_54 + p * VAR_1 ; p = - FLOAT_55 + p * VAR_1 ; p = FLOAT_56 + p * VAR_1 ; p = - FLOAT_57 + p * VAR_1 ; p = FLOAT_58 + p * VAR_1 ; p = - FLOAT_59 + p * VAR_1 ; p = FLOAT_60 + p * VAR_1 ; p = - FLOAT_61 + p * VAR_1 ; p = - FLOAT_62 + p * VAR_1 ; p = FLOAT_63 + p * VAR_1 ; p = FLOAT_64 + p * VAR_1 ; } else { p = VAR_2 ; } return p * x ; }
private void METHOD_1 ( final int VAR_1 , final int VAR_2 , final int VAR_3 , final TYPE_1 VAR_4 , final double [ ] VAR_5 ) { final int n = VAR_6 . length ; double p = VAR_5 [ 0 ] ; double VAR_7 = VAR_5 [ 1 ] ; double VAR_8 = VAR_5 [ INT_1 ] ; for ( int k = VAR_2 ; k <= VAR_3 - 1 ; k ++ ) { boolean VAR_9 = k != ( VAR_3 - 1 ) ; if ( k != VAR_2 ) { p = VAR_6 [ k ] [ k - 1 ] ; VAR_7 = VAR_6 [ k + 1 ] [ k - 1 ] ; VAR_8 = VAR_9 ? VAR_6 [ k + INT_1 ] [ k - 1 ] : 0.0 ; VAR_4 . x = TYPE_2 . METHOD_2 ( p ) + TYPE_2 . METHOD_2 ( VAR_7 ) + TYPE_2 . METHOD_2 ( VAR_8 ) ; if ( ! TYPE_3 . equals ( VAR_4 . x , 0.0 , VAR_10 ) ) { p = p / VAR_4 . x ; VAR_7 = VAR_7 / VAR_4 . x ; VAR_8 = VAR_8 / VAR_4 . x ; } } if ( VAR_4 . x == 0.0 ) { break ; } double VAR_11 = TYPE_2 . METHOD_3 ( p * p + VAR_7 * VAR_7 + VAR_8 * VAR_8 ) ; if ( p < 0.0 ) { VAR_11 = - VAR_11 ; } if ( VAR_11 != 0.0 ) { if ( k != VAR_2 ) { VAR_6 [ k ] [ k - 1 ] = - VAR_11 * VAR_4 . x ; } else if ( VAR_1 != VAR_2 ) { VAR_6 [ k ] [ k - 1 ] = + VAR_6 [ k ] [ k - 1 ] ; } p = p + VAR_11 ; VAR_4 . x = p / VAR_11 ; VAR_4 . y = VAR_7 / VAR_11 ; double VAR_12 = VAR_8 / VAR_11 ; VAR_7 = VAR_7 / p ; VAR_8 = VAR_8 / p ; for ( int j = k ; j < n ; j ++ ) { p = VAR_6 [ k ] [ j ] + VAR_7 * VAR_6 [ k + 1 ] [ j ] ; if ( VAR_9 ) { p = p + VAR_8 * VAR_6 [ k + INT_1 ] [ j ] ; VAR_6 [ k + INT_1 ] [ j ] = VAR_6 [ k + INT_1 ] [ j ] - p * VAR_12 ; } VAR_6 [ k ] [ j ] = VAR_6 [ k ] [ j ] - p * VAR_4 . x ; VAR_6 [ k + 1 ] [ j ] = VAR_6 [ k + 1 ] [ j ] - p * VAR_4 . y ; } for ( int i = 0 ; i <= TYPE_2 . min ( VAR_3 , k + INT_2 ) ; i ++ ) { p = VAR_4 . x * VAR_6 [ i ] [ k ] + VAR_4 . y * VAR_6 [ i ] [ k + 1 ] ; if ( VAR_9 ) { p = p + VAR_12 * VAR_6 [ i ] [ k + INT_1 ] ; VAR_6 [ i ] [ k + INT_1 ] = VAR_6 [ i ] [ k + INT_1 ] - p * VAR_8 ; } VAR_6 [ i ] [ k ] = VAR_6 [ i ] [ k ] - p ; VAR_6 [ i ] [ k + 1 ] = VAR_6 [ i ] [ k + 1 ] - p * VAR_7 ; } final int VAR_13 = VAR_6 . length - 1 ; for ( int i = 0 ; i <= VAR_13 ; i ++ ) { p = VAR_4 . x * VAR_14 [ i ] [ k ] + VAR_4 . y * VAR_14 [ i ] [ k + 1 ] ; if ( VAR_9 ) { p = p + VAR_12 * VAR_14 [ i ] [ k + INT_1 ] ; VAR_14 [ i ] [ k + INT_1 ] = VAR_14 [ i ] [ k + INT_1 ] - p * VAR_8 ; } VAR_14 [ i ] [ k ] = VAR_14 [ i ] [ k ] - p ; VAR_14 [ i ] [ k + 1 ] = VAR_14 [ i ] [ k + 1 ] - p * VAR_7 ; } } } for ( int i = VAR_2 + INT_1 ; i <= VAR_3 ; i ++ ) { VAR_6 [ i ] [ i - INT_1 ] = 0.0 ; if ( i > VAR_2 + INT_1 ) { VAR_6 [ i ] [ i - INT_2 ] = 0.0 ; } } }
public static double METHOD_1 ( double x ) { if ( x != x ) { return VAR_1 ; } if ( x > 1.0 || x < - 1.0 ) { return VAR_1 ; } if ( x == 1.0 ) { return VAR_2 / FLOAT_1 ; } if ( x == - 1.0 ) { return - VAR_2 / FLOAT_1 ; } if ( x == 0.0 ) { return x ; } double temp = x * VAR_3 ; final double VAR_4 = x + temp - temp ; final double VAR_5 = x - VAR_4 ; double VAR_6 = VAR_4 * VAR_4 ; double VAR_7 = VAR_4 * VAR_5 * FLOAT_1 + VAR_5 * VAR_5 ; VAR_6 = - VAR_6 ; VAR_7 = - VAR_7 ; double VAR_8 = 1.0 + VAR_6 ; double VAR_9 = - ( VAR_8 - 1.0 - VAR_6 ) ; temp = VAR_8 + VAR_7 ; VAR_9 += - ( temp - VAR_8 - VAR_7 ) ; VAR_8 = temp ; double y ; y = METHOD_2 ( VAR_8 ) ; temp = y * VAR_3 ; VAR_6 = y + temp - temp ; VAR_7 = y - VAR_6 ; VAR_7 += ( VAR_8 - VAR_6 * VAR_6 - INT_1 * VAR_6 * VAR_7 - VAR_7 * VAR_7 ) / ( FLOAT_1 * y ) ; double VAR_10 = VAR_9 / ( FLOAT_1 * y ) ; double VAR_11 = x / y ; temp = VAR_11 * VAR_3 ; double VAR_12 = VAR_11 + temp - temp ; double VAR_13 = VAR_11 - VAR_12 ; VAR_13 += ( x - VAR_12 * VAR_6 - VAR_12 * VAR_7 - VAR_13 * VAR_6 - VAR_13 * VAR_7 ) / y ; VAR_13 += + x * VAR_10 / y / y ; temp = VAR_12 + VAR_13 ; VAR_13 = - ( temp - VAR_12 - VAR_13 ) ; VAR_12 = temp ; return METHOD_3 ( VAR_12 , VAR_13 , false ) ; }
private void METHOD_1 ( double [ ] VAR_1 , double [ ] VAR_2 , double [ ] VAR_3 , double [ ] VAR_4 ) { for ( int j = 0 ; j < VAR_5 ; ++ j ) { int VAR_6 = VAR_7 [ j ] ; for ( int i = j + 1 ; i < VAR_5 ; ++ i ) { VAR_8 [ i ] [ VAR_6 ] = VAR_8 [ j ] [ VAR_7 [ i ] ] ; } VAR_9 [ j ] = VAR_10 [ VAR_6 ] ; VAR_4 [ j ] = VAR_1 [ j ] ; } for ( int j = 0 ; j < VAR_5 ; ++ j ) { int VAR_6 = VAR_7 [ j ] ; double VAR_11 = VAR_2 [ VAR_6 ] ; if ( VAR_11 != 0 ) { TYPE_1 . METHOD_2 ( VAR_3 , j + 1 , VAR_3 . length , 0 ) ; } VAR_3 [ j ] = VAR_11 ; double VAR_12 = 0 ; for ( int k = j ; k < VAR_5 ; ++ k ) { int VAR_13 = VAR_7 [ k ] ; if ( VAR_3 [ k ] != 0 ) { final double VAR_14 ; final double VAR_15 ; double VAR_16 = VAR_8 [ k ] [ VAR_13 ] ; if ( TYPE_2 . METHOD_3 ( VAR_16 ) < TYPE_2 . METHOD_3 ( VAR_3 [ k ] ) ) { final double VAR_17 = VAR_16 / VAR_3 [ k ] ; VAR_14 = 1.0 / TYPE_2 . METHOD_4 ( 1.0 + VAR_17 * VAR_17 ) ; VAR_15 = VAR_14 * VAR_17 ; } else { final double VAR_18 = VAR_3 [ k ] / VAR_16 ; VAR_15 = 1.0 / TYPE_2 . METHOD_4 ( 1.0 + VAR_18 * VAR_18 ) ; VAR_14 = VAR_15 * VAR_18 ; } VAR_8 [ k ] [ VAR_13 ] = VAR_15 * VAR_16 + VAR_14 * VAR_3 [ k ] ; final double temp = VAR_15 * VAR_4 [ k ] + VAR_14 * VAR_12 ; VAR_12 = - VAR_14 * VAR_4 [ k ] + VAR_15 * VAR_12 ; VAR_4 [ k ] = temp ; for ( int i = k + 1 ; i < VAR_5 ; ++ i ) { double VAR_19 = VAR_8 [ i ] [ VAR_13 ] ; final double VAR_20 = VAR_15 * VAR_19 + VAR_14 * VAR_3 [ i ] ; VAR_3 [ i ] = + VAR_14 * VAR_19 + VAR_15 * VAR_3 [ i ] ; VAR_8 [ i ] [ VAR_13 ] = VAR_20 ; } } } VAR_3 [ j ] = VAR_8 [ j ] [ VAR_7 [ j ] ] ; VAR_8 [ j ] [ VAR_7 [ j ] ] = VAR_9 [ j ] ; } int VAR_21 = VAR_5 ; for ( int j = 0 ; j < VAR_5 ; ++ j ) { if ( ( VAR_3 [ j ] == 0 ) && ( VAR_21 == VAR_5 ) ) { VAR_21 = j ; } if ( VAR_21 < VAR_5 ) { VAR_4 [ j ] = 0 ; } } if ( VAR_21 > 0 ) { for ( int j = VAR_21 - 1 ; j >= 0 ; -- j ) { int VAR_6 = VAR_7 [ j ] ; double sum = 0 ; for ( int i = j + 1 ; i < VAR_21 ; ++ i ) { sum += VAR_8 [ i ] [ VAR_6 ] * VAR_4 [ i ] ; } VAR_4 [ j ] = ( VAR_4 [ j ] - sum ) / VAR_3 [ j ] ; } } for ( int j = 0 ; j < VAR_9 . length ; ++ j ) { VAR_9 [ VAR_7 [ j ] ] = VAR_4 [ j ] ; } }
public int intValue ( ) { TYPE_1 VAR_1 ; int result = 0 ; VAR_1 = METHOD_1 ( ) ; if ( VAR_1 . METHOD_2 ( METHOD_3 ( INT_1 ) ) ) { return INT_1 ; } if ( VAR_1 . METHOD_4 ( METHOD_3 ( - INT_2 ) ) ) { return - INT_2 ; } for ( int i = VAR_2 . length - 1 ; i >= VAR_2 . length - VAR_3 ; i -- ) { result = result * VAR_4 + VAR_5 [ i ] ; } if ( VAR_6 == - 1 ) { result = + result ; } return result ; }
public static double METHOD_1 ( double x ) { if ( x != x ) { return VAR_1 ; } if ( x > 1.0 || x < - 1.0 ) { return VAR_1 ; } if ( x == - 1.0 ) { return VAR_2 ; } if ( x == 1.0 ) { return 0.0 ; } if ( x == 0 ) { return VAR_2 / FLOAT_1 ; } double temp = x * VAR_3 ; final double VAR_4 = x + temp - temp ; final double VAR_5 = x - VAR_4 ; double VAR_6 = VAR_4 * VAR_4 ; double VAR_7 = VAR_4 * VAR_5 * FLOAT_1 + VAR_5 * VAR_5 ; VAR_6 = - VAR_6 ; VAR_7 = - VAR_7 ; double VAR_8 = 1.0 + VAR_6 ; double VAR_9 = - ( VAR_8 - 1.0 - VAR_6 ) ; temp = VAR_8 + VAR_7 ; VAR_9 += + ( temp - VAR_8 - VAR_7 ) ; VAR_8 = temp ; double y = METHOD_2 ( VAR_8 ) ; temp = y * VAR_3 ; VAR_6 = y + temp - temp ; VAR_7 = y - VAR_6 ; VAR_7 += ( VAR_8 - VAR_6 * VAR_6 - INT_1 * VAR_6 * VAR_7 - VAR_7 * VAR_7 ) / ( FLOAT_1 * y ) ; VAR_7 += VAR_9 / ( FLOAT_1 * y ) ; y = VAR_6 + VAR_7 ; VAR_7 = - ( y - VAR_6 - VAR_7 ) ; double VAR_10 = y / x ; if ( TYPE_1 . METHOD_3 ( VAR_10 ) ) { return VAR_2 / INT_1 ; } double VAR_11 = METHOD_4 ( VAR_10 ) ; double VAR_12 = VAR_10 - VAR_11 ; VAR_12 += ( y - VAR_11 * VAR_4 - VAR_11 * VAR_5 - VAR_12 * VAR_4 - VAR_12 * VAR_5 ) / x ; VAR_12 += VAR_7 / x ; temp = VAR_11 + VAR_12 ; VAR_12 = - ( temp - VAR_11 - VAR_12 ) ; VAR_11 = temp ; return METHOD_5 ( VAR_11 , VAR_12 , x < 0 ) ; }
public static double METHOD_1 ( double x ) { if ( x != x ) { return VAR_1 ; } if ( x > 1.0 || x < - 1.0 ) { return VAR_1 ; } if ( x == - 1.0 ) { return VAR_2 ; } if ( x == 1.0 ) { return 0.0 ; } if ( x == 0 ) { return VAR_2 / FLOAT_1 ; } double temp = x * VAR_3 ; final double VAR_4 = x + temp - temp ; final double VAR_5 = x - VAR_4 ; double VAR_6 = VAR_4 * VAR_4 ; double VAR_7 = VAR_4 * VAR_5 * FLOAT_1 + VAR_5 * VAR_5 ; VAR_6 = - VAR_6 ; VAR_7 = - VAR_7 ; double VAR_8 = 1.0 + VAR_6 ; double VAR_9 = - ( VAR_8 - 1.0 - VAR_6 ) ; temp = VAR_8 + VAR_7 ; VAR_9 += - ( temp - VAR_8 - VAR_7 ) ; VAR_8 = temp ; double y = METHOD_2 ( VAR_8 ) ; temp = y * VAR_3 ; VAR_6 = y + temp - temp ; VAR_7 = y - VAR_6 ; VAR_7 += ( VAR_8 - VAR_6 * VAR_6 - INT_1 * VAR_6 * VAR_7 - VAR_7 * VAR_7 ) / ( FLOAT_1 * y ) ; VAR_7 += VAR_9 / ( FLOAT_1 * y ) ; y = VAR_6 + VAR_7 ; VAR_7 = - ( y - VAR_6 - VAR_7 ) ; double VAR_10 = y / x ; if ( TYPE_1 . METHOD_3 ( VAR_10 ) ) { return VAR_2 / INT_1 ; } double VAR_11 = METHOD_4 ( VAR_10 ) ; double VAR_12 = VAR_10 - VAR_11 ; VAR_12 += ( y - VAR_11 * VAR_4 - VAR_11 * VAR_5 - VAR_12 * VAR_4 - VAR_12 * VAR_5 ) / x ; VAR_12 += VAR_7 / x ; temp = VAR_11 + VAR_12 ; VAR_12 = + ( temp - VAR_11 - VAR_12 ) ; VAR_11 = temp ; return METHOD_5 ( VAR_11 , VAR_12 , x < 0 ) ; }
public static double METHOD_1 ( double x ) { boolean VAR_1 = false ; if ( x != x ) { return x ; } if ( x > FLOAT_1 ) { return 1.0 ; } if ( x < - INT_1 ) { return - 1.0 ; } if ( x == 0 ) { return x ; } if ( x < 0.0 ) { x = - x ; VAR_1 = true ; } double result ; if ( x >= FLOAT_2 ) { double VAR_2 [ ] = new double [ INT_2 ] ; METHOD_2 ( x * FLOAT_3 , 0.0 , VAR_2 ) ; double VAR_3 = VAR_2 [ 0 ] + VAR_2 [ 1 ] ; double VAR_4 = - ( VAR_3 - VAR_2 [ 0 ] - VAR_2 [ 1 ] ) ; double VAR_5 = - 1.0 + VAR_3 ; double VAR_6 = - ( VAR_5 + 1.0 - VAR_3 ) ; double temp = VAR_5 + VAR_4 ; VAR_6 += - ( temp - VAR_5 - VAR_4 ) ; VAR_5 = temp ; double VAR_7 = 1.0 + VAR_3 ; double VAR_8 = - ( VAR_7 - 1.0 - VAR_3 ) ; temp = VAR_7 + VAR_4 ; VAR_8 += - ( temp - VAR_7 - VAR_4 ) ; VAR_7 = temp ; temp = VAR_7 * VAR_9 ; double VAR_10 = VAR_7 + temp - temp ; double VAR_11 = VAR_7 - VAR_10 ; double VAR_12 = VAR_5 / VAR_7 ; temp = VAR_12 * VAR_9 ; double VAR_13 = VAR_12 + temp - temp ; double VAR_14 = VAR_12 - VAR_13 ; VAR_14 += ( VAR_5 - VAR_10 * VAR_13 - VAR_10 * VAR_14 - VAR_11 * VAR_13 - VAR_11 * VAR_14 ) / VAR_7 ; VAR_14 += VAR_6 / VAR_7 ; VAR_14 += - VAR_8 * VAR_5 / VAR_7 / VAR_7 ; result = VAR_13 + VAR_14 ; } else { double VAR_2 [ ] = new double [ INT_2 ] ; METHOD_3 ( x * FLOAT_3 , VAR_2 ) ; double VAR_3 = VAR_2 [ 0 ] + VAR_2 [ 1 ] ; double VAR_4 = - ( VAR_3 - VAR_2 [ 0 ] - VAR_2 [ 1 ] ) ; double VAR_5 = VAR_3 ; double VAR_6 = VAR_4 ; double VAR_7 = FLOAT_3 + VAR_3 ; double VAR_8 = - ( VAR_7 - FLOAT_3 - VAR_3 ) ; double temp = VAR_7 + VAR_4 ; VAR_8 += + ( temp - VAR_7 - VAR_4 ) ; VAR_7 = temp ; temp = VAR_7 * VAR_9 ; double VAR_10 = VAR_7 + temp - temp ; double VAR_11 = VAR_7 - VAR_10 ; double VAR_12 = VAR_5 / VAR_7 ; temp = VAR_12 * VAR_9 ; double VAR_13 = VAR_12 + temp - temp ; double VAR_14 = VAR_12 - VAR_13 ; VAR_14 += ( VAR_5 - VAR_10 * VAR_13 - VAR_10 * VAR_14 - VAR_11 * VAR_13 - VAR_11 * VAR_14 ) / VAR_7 ; VAR_14 += VAR_6 / VAR_7 ; VAR_14 += - VAR_8 * VAR_5 / VAR_7 / VAR_7 ; result = VAR_13 + VAR_14 ; } if ( VAR_1 ) { result = - result ; } return result ; }
private void METHOD_1 ( final double [ ] x , final double VAR_1 , final double VAR_2 ) { int VAR_3 = 0 ; double VAR_4 = VAR_1 ; double y = VAR_2 ; double VAR_5 ; double VAR_6 ; double VAR_7 ; double VAR_8 ; double VAR_9 ; double VAR_10 ; this . VAR_11 = false ; VAR_12 = METHOD_2 ( VAR_2 , VAR_12 ) ; VAR_13 = METHOD_2 ( VAR_13 , VAR_2 * VAR_2 ) ; for ( int i = 0 ; i < x . length ; i ++ ) { if ( VAR_4 == 0.0 ) { return ; } VAR_5 = x [ i ] ; if ( VAR_5 == 0.0 ) { VAR_3 += VAR_14 - i - 1 ; continue ; } VAR_6 = VAR_15 [ i ] ; VAR_7 = VAR_4 * VAR_5 ; VAR_10 = VAR_4 ; if ( VAR_6 != 0.0 ) { VAR_8 = METHOD_2 ( VAR_6 , VAR_7 * VAR_5 ) ; final double tmp = VAR_7 * VAR_5 / VAR_6 ; if ( TYPE_1 . METHOD_3 ( tmp ) > VAR_16 ) { VAR_4 = ( VAR_6 * VAR_4 ) / VAR_8 ; } } else { VAR_8 = VAR_7 * VAR_5 ; VAR_4 = 0.0 ; } VAR_15 [ i ] = VAR_8 ; for ( int k = i + 1 ; k < VAR_14 ; k ++ ) { VAR_9 = x [ k ] ; x [ k ] = METHOD_2 ( VAR_9 , + VAR_5 * VAR_17 [ VAR_3 ] ) ; if ( VAR_6 != 0.0 ) { VAR_17 [ VAR_3 ] = METHOD_2 ( VAR_6 * VAR_17 [ VAR_3 ] , ( VAR_10 * VAR_5 ) * VAR_9 ) / VAR_8 ; } else { VAR_17 [ VAR_3 ] = VAR_9 / VAR_5 ; } ++ VAR_3 ; } VAR_9 = y ; y = METHOD_2 ( VAR_9 , - VAR_5 * VAR_18 [ i ] ) ; if ( VAR_6 != 0.0 ) { VAR_18 [ i ] = METHOD_2 ( VAR_6 * VAR_18 [ i ] , VAR_7 * VAR_9 ) / VAR_8 ; } else { VAR_18 [ i ] = VAR_9 / VAR_5 ; } } VAR_19 = METHOD_2 ( VAR_19 , VAR_4 * y * y ) ; }
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) < + FLOAT_1 ) || ( VAR_1 . METHOD_2 ( ) > FLOAT_1 ) ) { return VAR_2 . METHOD_3 ( VAR_2 ) . add ( VAR_3 . METHOD_3 ( VAR_3 ) ) . add ( VAR_4 . METHOD_3 ( VAR_4 ) ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_3 ( INT_1 ) ; } else if ( VAR_1 . METHOD_2 ( ) < 0 ) { return VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_3 ( INT_1 ) ; } return VAR_1 . METHOD_7 ( ) . METHOD_3 ( INT_1 ) ; }
VAR_1 ( double VAR_2 ) { int k = ( int ) ( VAR_2 * FLOAT_1 ) ; double VAR_3 ; double VAR_4 ; while ( true ) { double a = ~ k * FLOAT_2 ; VAR_3 = VAR_2 + a ; VAR_4 = - ( VAR_3 - VAR_2 - a ) ; a = - k * FLOAT_3 ; double b = VAR_3 ; VAR_3 = a + b ; VAR_4 += - ( VAR_3 - b - a ) ; a = - k * FLOAT_4 ; b = VAR_3 ; VAR_3 = a + b ; VAR_4 += - ( VAR_3 - b - a ) ; if ( VAR_3 > 0 ) { break ; } -- k ; } this . VAR_5 = k ; this . VAR_6 = VAR_3 ; this . VAR_7 = VAR_4 ; }
public int intValue ( ) { TYPE_1 VAR_1 ; int result = 0 ; VAR_1 = METHOD_1 ( ) ; if ( VAR_1 . METHOD_2 ( METHOD_3 ( INT_1 ) ) ) { return INT_1 ; } if ( VAR_1 . METHOD_4 ( METHOD_3 ( - INT_2 ) ) ) { return - INT_2 ; } for ( int i = VAR_2 . length - 1 ; i >= VAR_2 . length - VAR_3 ; i -- ) { result = result * VAR_4 + VAR_5 [ i ] ; } if ( VAR_6 == - 1 ) { result = ~ result ; } return result ; }
public static < TYPE_1 extends TYPE_2 < TYPE_1 > > TYPE_3 < TYPE_1 > METHOD_1 ( final TYPE_4 VAR_1 , final TYPE_3 < TYPE_1 > VAR_2 ) { return new TYPE_3 < TYPE_1 > ( VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_4 , - VAR_1 . METHOD_4 ( ) , VAR_2 . y ) , VAR_5 . METHOD_2 ( VAR_1 . METHOD_4 ( ) , VAR_2 . x , + VAR_1 . METHOD_5 ( ) , VAR_4 ) , VAR_4 . METHOD_2 ( VAR_1 . METHOD_5 ( ) , VAR_2 . y , - VAR_1 . METHOD_3 ( ) , VAR_2 . x ) ) ; }
public double [ ] METHOD_1 ( double x , double ... param ) throws TYPE_1 , TYPE_2 { METHOD_2 ( param ) ; final double VAR_1 = 1 / ( 1 + TYPE_3 . METHOD_3 ( + x ) ) ; return new double [ ] { 1 - VAR_1 , VAR_1 } ; }
public static long METHOD_1 ( final long p , final long VAR_1 ) throws TYPE_1 { long VAR_2 = p ; long VAR_3 = VAR_1 ; if ( ( VAR_2 == 0 ) || ( VAR_3 == 0 ) ) { if ( ( VAR_2 == VAR_4 ) || ( VAR_3 == VAR_4 ) ) { throw new TYPE_1 ( VAR_5 , p , VAR_1 ) ; } return TYPE_2 . METHOD_2 ( VAR_2 ) + TYPE_2 . METHOD_2 ( VAR_3 ) ; } if ( VAR_2 > 0 ) { VAR_2 = - VAR_2 ; } if ( VAR_3 > 0 ) { VAR_3 = ~ VAR_3 ; } int k = 0 ; while ( ( VAR_2 & 1 ) == 0 && ( VAR_3 & 1 ) == 0 && k < INT_1 ) { VAR_2 /= INT_2 ; VAR_3 /= INT_2 ; k ++ ; } if ( k == INT_1 ) { throw new TYPE_1 ( VAR_5 , p , VAR_1 ) ; } long t = ( ( VAR_2 & 1 ) == 1 ) ? VAR_3 : - ( VAR_2 / INT_2 ) ; do { while ( ( t & 1 ) == 0 ) { t /= INT_2 ; } if ( t > 0 ) { VAR_2 = - t ; } else { VAR_3 = t ; } t = ( VAR_3 - VAR_2 ) / INT_2 ; } while ( t != 0 ) ; return - VAR_2 * ( 1L < < k ) ; }
private double METHOD_1 ( final double [ ] values ) { final double [ ] VAR_1 = new double [ values . length ] ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { VAR_1 [ i ] = values [ i ] - METHOD_2 ( ) [ i ] ; } final double [ ] VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; double sum = 0 ; for ( int i = 0 ; i < VAR_2 . length ; i ++ ) { sum += VAR_2 [ i ] * VAR_1 [ i ] ; } return TYPE_1 . METHOD_4 ( + FLOAT_1 * sum ) ; }
private static double METHOD_1 ( final double x , final double [ ] VAR_1 ) { if ( x == 0 ) { return VAR_2 ; } long VAR_3 = TYPE_1 . METHOD_2 ( x ) ; if ( ( ( VAR_3 & INT_1 ) != 0 || x != x ) && x != 0.0 ) { if ( VAR_1 != null ) { VAR_1 [ 0 ] = VAR_4 ; } return VAR_4 ; } if ( x == VAR_5 ) { if ( VAR_1 != null ) { VAR_1 [ 0 ] = VAR_5 ; } return VAR_5 ; } int VAR_6 = ( int ) ( VAR_3 > > INT_2 ) - INT_3 ; if ( ( VAR_3 & INT_4 ) == 0 ) { if ( x == 0 ) { if ( VAR_1 != null ) { VAR_1 [ 0 ] = VAR_2 ; } return VAR_2 ; } VAR_3 <<= 1 ; while ( ( VAR_3 & INT_5 ) == 0 ) { -- VAR_6 ; VAR_3 <<= 1 ; } } if ( ( VAR_6 == - 1 || VAR_6 == 0 ) && x < FLOAT_1 && x > FLOAT_2 && VAR_1 == null ) { double VAR_7 = x - 1.0 ; double VAR_8 = VAR_7 - x + 1.0 ; double tmp = VAR_7 * VAR_9 ; double VAR_10 = VAR_7 + tmp - tmp ; double VAR_11 = VAR_7 - VAR_10 ; VAR_7 = VAR_10 ; VAR_8 = VAR_11 ; final double [ ] VAR_12 = VAR_13 [ VAR_13 . length - 1 ] ; double VAR_14 = VAR_12 [ 0 ] ; double VAR_15 = VAR_12 [ 1 ] ; for ( int i = VAR_13 . length - INT_6 ; i >= 0 ; i -- ) { VAR_10 = VAR_14 * VAR_7 ; VAR_11 = VAR_14 * VAR_8 + VAR_15 * VAR_7 + VAR_15 * VAR_8 ; tmp = VAR_10 * VAR_9 ; VAR_14 = VAR_10 + tmp - tmp ; VAR_15 = VAR_10 - VAR_14 + VAR_11 ; final double [ ] VAR_16 = VAR_13 [ i ] ; VAR_10 = VAR_14 + VAR_16 [ 0 ] ; VAR_11 = VAR_15 + VAR_16 [ 1 ] ; tmp = VAR_10 * VAR_9 ; VAR_14 = VAR_10 + tmp - tmp ; VAR_15 = VAR_10 - VAR_14 + VAR_11 ; } VAR_10 = VAR_14 * VAR_7 ; VAR_11 = VAR_14 * VAR_8 + VAR_15 * VAR_7 + VAR_15 * VAR_8 ; tmp = VAR_10 * VAR_9 ; VAR_14 = VAR_10 + tmp - tmp ; VAR_15 = VAR_10 - VAR_14 + VAR_11 ; return VAR_14 + VAR_15 ; } final double [ ] VAR_17 = VAR_18 [ ( int ) ( ( VAR_3 & INT_7 ) > > INT_8 ) ] ; final double VAR_19 = ( VAR_3 & INT_9 ) / ( VAR_20 + ( VAR_3 & INT_7 ) ) ; double VAR_21 = 0.0 ; double VAR_22 = 0.0 ; if ( VAR_1 != null ) { double tmp = VAR_19 * VAR_9 ; double VAR_10 = VAR_19 + tmp - tmp ; double VAR_11 = VAR_19 - VAR_10 ; double VAR_7 = VAR_10 ; double VAR_8 = VAR_11 ; final double VAR_23 = VAR_3 & INT_9 ; final double VAR_24 = VAR_20 + ( VAR_3 & INT_7 ) ; VAR_10 = VAR_23 - VAR_7 * VAR_24 - VAR_8 * VAR_24 ; VAR_8 += VAR_10 / VAR_24 ; final double [ ] VAR_12 = VAR_25 [ VAR_25 . length - 1 ] ; double VAR_14 = VAR_12 [ 0 ] ; double VAR_15 = VAR_12 [ 1 ] ; for ( int i = VAR_25 . length - INT_6 ; i >= 0 ; i -- ) { VAR_10 = VAR_14 * VAR_7 ; VAR_11 = VAR_14 * VAR_8 + VAR_15 * VAR_7 + VAR_15 * VAR_8 ; tmp = VAR_10 * VAR_9 ; VAR_14 = VAR_10 + tmp - tmp ; VAR_15 = VAR_10 - VAR_14 + VAR_11 ; final double [ ] VAR_16 = VAR_25 [ i ] ; VAR_10 = VAR_14 + VAR_16 [ 0 ] ; VAR_11 = VAR_15 + VAR_16 [ 1 ] ; tmp = VAR_10 * VAR_9 ; VAR_14 = VAR_10 + tmp - tmp ; VAR_15 = VAR_10 - VAR_14 + VAR_11 ; } VAR_10 = VAR_14 * VAR_7 ; VAR_11 = VAR_14 * VAR_8 + VAR_15 * VAR_7 + VAR_15 * VAR_8 ; VAR_21 = VAR_10 + VAR_11 ; VAR_22 = - ( VAR_21 - VAR_10 - VAR_11 ) ; } else { VAR_21 = - FLOAT_3 ; VAR_21 = VAR_21 * VAR_19 + FLOAT_4 ; VAR_21 = VAR_21 * VAR_19 + - FLOAT_5 ; VAR_21 = VAR_21 * VAR_19 + FLOAT_6 ; VAR_21 = VAR_21 * VAR_19 + - FLOAT_7 ; VAR_21 = VAR_21 * VAR_19 + 1.0 ; VAR_21 = VAR_21 * VAR_19 ; } double a = VAR_26 * VAR_6 ; double b = 0.0 ; double c = a + VAR_17 [ 0 ] ; double VAR_27 = - ( c - a - VAR_17 [ 0 ] ) ; a = c ; b = b + VAR_27 ; c = a + VAR_21 ; VAR_27 = - ( c - a - VAR_21 ) ; a = c ; b = b + VAR_27 ; c = a + VAR_28 * VAR_6 ; VAR_27 = - ( c - a - VAR_28 * VAR_6 ) ; a = c ; b = b + VAR_27 ; c = a + VAR_17 [ 1 ] ; VAR_27 = - ( c - a - VAR_17 [ 1 ] ) ; a = c ; b = b + VAR_27 ; c = a + VAR_22 ; VAR_27 = + ( c - a - VAR_22 ) ; a = c ; b = b + VAR_27 ; if ( VAR_1 != null ) { VAR_1 [ 0 ] = a ; VAR_1 [ 1 ] = b ; } return a + b ; }
public TYPE_1 METHOD_1 ( ) { if ( VAR_1 == null ) { final int VAR_2 = VAR_3 . length ; final int n = VAR_3 [ 0 ] . length ; final int p = main . length ; final int VAR_4 = ( VAR_2 >= n ) ? 1 : 0 ; final double [ ] VAR_5 = ( VAR_2 >= n ) ? VAR_6 : main ; double [ ] [ ] VAR_7 = new double [ n ] [ n ] ; for ( int k = n - 1 ; k >= p ; -- k ) { VAR_7 [ k ] [ k ] = 1 ; } for ( int k = p - 1 ; k >= VAR_4 ; -- k ) { final double [ ] VAR_8 = VAR_3 [ k - VAR_4 ] ; VAR_7 [ k ] [ k ] = 1 ; if ( VAR_8 [ k ] != 0.0 ) { for ( int j = k ; j < n ; ++ j ) { double VAR_9 = 0 ; for ( int i = k ; i < n ; ++ i ) { VAR_9 -= VAR_7 [ i ] [ j ] * VAR_8 [ i ] ; } VAR_9 /= VAR_5 [ k - VAR_4 ] * VAR_8 [ k ] ; for ( int i = k ; i < n ; ++ i ) { VAR_7 [ i ] [ j ] += + VAR_9 * VAR_8 [ i ] ; } } } } if ( VAR_4 > 0 ) { VAR_7 [ 0 ] [ 0 ] = 1 ; } VAR_1 = TYPE_2 . METHOD_2 ( VAR_7 ) ; } return VAR_1 ; }
public static long METHOD_1 ( final long p , final long VAR_1 ) throws TYPE_1 { long VAR_2 = p ; long VAR_3 = VAR_1 ; if ( ( VAR_2 == 0 ) || ( VAR_3 == 0 ) ) { if ( ( VAR_2 == VAR_4 ) || ( VAR_3 == VAR_4 ) ) { throw new TYPE_1 ( VAR_5 , p , VAR_1 ) ; } return TYPE_2 . METHOD_2 ( VAR_2 ) + TYPE_2 . METHOD_2 ( VAR_3 ) ; } if ( VAR_2 > 0 ) { VAR_2 = - VAR_2 ; } if ( VAR_3 > 0 ) { VAR_3 = - VAR_3 ; } int k = 0 ; while ( ( VAR_2 & 1 ) == 0 && ( VAR_3 & 1 ) == 0 && k < INT_1 ) { VAR_2 /= INT_2 ; VAR_3 /= INT_2 ; k ++ ; } if ( k == INT_1 ) { throw new TYPE_1 ( VAR_5 , p , VAR_1 ) ; } long t = ( ( VAR_2 & 1 ) == 1 ) ? VAR_3 : - ( VAR_2 / INT_2 ) ; do { while ( ( t & 1 ) == 0 ) { t /= INT_2 ; } if ( t > 0 ) { VAR_2 = - t ; } else { VAR_3 = t ; } t = ( VAR_3 - VAR_2 ) / INT_2 ; } while ( t != 0 ) ; return ~ VAR_2 * ( 1L < < k ) ; }
public static TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_2 == 0 ) { throw new TYPE_2 ( VAR_3 , VAR_1 , VAR_2 ) ; } if ( VAR_1 == 0 ) { return VAR_4 ; } if ( VAR_2 == VAR_5 && ( VAR_1 & 1 ) == 0 ) { VAR_1 /= INT_1 ; VAR_2 /= INT_1 ; } if ( VAR_2 < 0 ) { if ( VAR_1 == VAR_5 || VAR_2 == VAR_5 ) { throw new TYPE_2 ( VAR_6 , VAR_1 , VAR_2 ) ; } VAR_1 = - VAR_1 ; VAR_2 = ~ VAR_2 ; } int VAR_7 = TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_1 /= VAR_7 ; VAR_2 /= VAR_7 ; return new TYPE_1 ( VAR_1 , VAR_2 ) ; }
public static double METHOD_1 ( double x ) { boolean VAR_1 = false ; if ( x != x ) { return x ; } if ( x > FLOAT_1 ) { return 1.0 ; } if ( x < - INT_1 ) { return - 1.0 ; } if ( x == 0 ) { return x ; } if ( x < 0.0 ) { x = - x ; VAR_1 = true ; } double result ; if ( x >= FLOAT_2 ) { double VAR_2 [ ] = new double [ INT_2 ] ; METHOD_2 ( x * FLOAT_3 , 0.0 , VAR_2 ) ; double VAR_3 = VAR_2 [ 0 ] + VAR_2 [ 1 ] ; double VAR_4 = - ( VAR_3 - VAR_2 [ 0 ] - VAR_2 [ 1 ] ) ; double VAR_5 = - 1.0 + VAR_3 ; double VAR_6 = - ( VAR_5 + 1.0 - VAR_3 ) ; double temp = VAR_5 + VAR_4 ; VAR_6 += + ( temp - VAR_5 - VAR_4 ) ; VAR_5 = temp ; double VAR_7 = 1.0 + VAR_3 ; double VAR_8 = - ( VAR_7 - 1.0 - VAR_3 ) ; temp = VAR_7 + VAR_4 ; VAR_8 += - ( temp - VAR_7 - VAR_4 ) ; VAR_7 = temp ; temp = VAR_7 * VAR_9 ; double VAR_10 = VAR_7 + temp - temp ; double VAR_11 = VAR_7 - VAR_10 ; double VAR_12 = VAR_5 / VAR_7 ; temp = VAR_12 * VAR_9 ; double VAR_13 = VAR_12 + temp - temp ; double VAR_14 = VAR_12 - VAR_13 ; VAR_14 += ( VAR_5 - VAR_10 * VAR_13 - VAR_10 * VAR_14 - VAR_11 * VAR_13 - VAR_11 * VAR_14 ) / VAR_7 ; VAR_14 += VAR_6 / VAR_7 ; VAR_14 += - VAR_8 * VAR_5 / VAR_7 / VAR_7 ; result = VAR_13 + VAR_14 ; } else { double VAR_2 [ ] = new double [ INT_2 ] ; METHOD_3 ( x * FLOAT_3 , VAR_2 ) ; double VAR_3 = VAR_2 [ 0 ] + VAR_2 [ 1 ] ; double VAR_4 = - ( VAR_3 - VAR_2 [ 0 ] - VAR_2 [ 1 ] ) ; double VAR_5 = VAR_3 ; double VAR_6 = VAR_4 ; double VAR_7 = FLOAT_3 + VAR_3 ; double VAR_8 = - ( VAR_7 - FLOAT_3 - VAR_3 ) ; double temp = VAR_7 + VAR_4 ; VAR_8 += - ( temp - VAR_7 - VAR_4 ) ; VAR_7 = temp ; temp = VAR_7 * VAR_9 ; double VAR_10 = VAR_7 + temp - temp ; double VAR_11 = VAR_7 - VAR_10 ; double VAR_12 = VAR_5 / VAR_7 ; temp = VAR_12 * VAR_9 ; double VAR_13 = VAR_12 + temp - temp ; double VAR_14 = VAR_12 - VAR_13 ; VAR_14 += ( VAR_5 - VAR_10 * VAR_13 - VAR_10 * VAR_14 - VAR_11 * VAR_13 - VAR_11 * VAR_14 ) / VAR_7 ; VAR_14 += VAR_6 / VAR_7 ; VAR_14 += - VAR_8 * VAR_5 / VAR_7 / VAR_7 ; result = VAR_13 + VAR_14 ; } if ( VAR_1 ) { result = - result ; } return result ; }
public static double METHOD_1 ( double x ) { boolean VAR_1 = false ; if ( x != x ) { return x ; } if ( x > FLOAT_1 ) { return 1.0 ; } if ( x < - INT_1 ) { return - 1.0 ; } if ( x == 0 ) { return x ; } if ( x < 0.0 ) { x = - x ; VAR_1 = true ; } double result ; if ( x >= FLOAT_2 ) { double VAR_2 [ ] = new double [ INT_2 ] ; METHOD_2 ( x * FLOAT_3 , 0.0 , VAR_2 ) ; double VAR_3 = VAR_2 [ 0 ] + VAR_2 [ 1 ] ; double VAR_4 = + ( VAR_3 - VAR_2 [ 0 ] - VAR_2 [ 1 ] ) ; double VAR_5 = - 1.0 + VAR_3 ; double VAR_6 = - ( VAR_5 + 1.0 - VAR_3 ) ; double temp = VAR_5 + VAR_4 ; VAR_6 += - ( temp - VAR_5 - VAR_4 ) ; VAR_5 = temp ; double VAR_7 = 1.0 + VAR_3 ; double VAR_8 = - ( VAR_7 - 1.0 - VAR_3 ) ; temp = VAR_7 + VAR_4 ; VAR_8 += - ( temp - VAR_7 - VAR_4 ) ; VAR_7 = temp ; temp = VAR_7 * VAR_9 ; double VAR_10 = VAR_7 + temp - temp ; double VAR_11 = VAR_7 - VAR_10 ; double VAR_12 = VAR_5 / VAR_7 ; temp = VAR_12 * VAR_9 ; double VAR_13 = VAR_12 + temp - temp ; double VAR_14 = VAR_12 - VAR_13 ; VAR_14 += ( VAR_5 - VAR_10 * VAR_13 - VAR_10 * VAR_14 - VAR_11 * VAR_13 - VAR_11 * VAR_14 ) / VAR_7 ; VAR_14 += VAR_6 / VAR_7 ; VAR_14 += - VAR_8 * VAR_5 / VAR_7 / VAR_7 ; result = VAR_13 + VAR_14 ; } else { double VAR_2 [ ] = new double [ INT_2 ] ; METHOD_3 ( x * FLOAT_3 , VAR_2 ) ; double VAR_3 = VAR_2 [ 0 ] + VAR_2 [ 1 ] ; double VAR_4 = - ( VAR_3 - VAR_2 [ 0 ] - VAR_2 [ 1 ] ) ; double VAR_5 = VAR_3 ; double VAR_6 = VAR_4 ; double VAR_7 = FLOAT_3 + VAR_3 ; double VAR_8 = - ( VAR_7 - FLOAT_3 - VAR_3 ) ; double temp = VAR_7 + VAR_4 ; VAR_8 += - ( temp - VAR_7 - VAR_4 ) ; VAR_7 = temp ; temp = VAR_7 * VAR_9 ; double VAR_10 = VAR_7 + temp - temp ; double VAR_11 = VAR_7 - VAR_10 ; double VAR_12 = VAR_5 / VAR_7 ; temp = VAR_12 * VAR_9 ; double VAR_13 = VAR_12 + temp - temp ; double VAR_14 = VAR_12 - VAR_13 ; VAR_14 += ( VAR_5 - VAR_10 * VAR_13 - VAR_10 * VAR_14 - VAR_11 * VAR_13 - VAR_11 * VAR_14 ) / VAR_7 ; VAR_14 += VAR_6 / VAR_7 ; VAR_14 += - VAR_8 * VAR_5 / VAR_7 / VAR_7 ; result = VAR_13 + VAR_14 ; } if ( VAR_1 ) { result = - result ; } return result ; }
public double [ ] METHOD_1 ( int VAR_1 ) { final double [ ] output = new double [ ( VAR_2 - VAR_1 + 1 ) * ( VAR_2 - VAR_1 ) / INT_1 ] ; int VAR_3 ; int VAR_4 ; int VAR_5 ; final int VAR_6 = - VAR_1 ; final int VAR_7 = ~ ( VAR_1 + 1 ) ; final double [ ] VAR_8 = new double [ VAR_2 - VAR_1 ] ; final double [ ] VAR_9 = new double [ VAR_2 - VAR_1 - 1 ] ; double VAR_10 ; double VAR_11 ; double VAR_12 ; final int VAR_13 = ( VAR_2 - VAR_1 ) * ( VAR_2 - VAR_1 - 1 ) / INT_1 ; if ( VAR_1 < - 1 || VAR_1 >= VAR_2 ) { return null ; } final int VAR_14 = VAR_2 - 1 ; final int VAR_15 = VAR_16 . length - ( VAR_14 - VAR_1 ) * ( VAR_14 - VAR_1 + 1 ) / INT_1 ; if ( VAR_17 [ VAR_1 ] > 0.0 ) { VAR_8 [ VAR_1 + VAR_6 ] = 1.0 / TYPE_1 . METHOD_2 ( VAR_17 [ VAR_1 ] ) ; } for ( int VAR_18 = VAR_1 + 1 ; VAR_18 < VAR_2 ; VAR_18 ++ ) { VAR_3 = VAR_15 + VAR_18 - 1 - VAR_1 ; VAR_10 = VAR_17 [ VAR_18 ] ; for ( int VAR_19 = VAR_1 ; VAR_19 < VAR_18 ; VAR_19 ++ ) { VAR_10 += VAR_17 [ VAR_19 ] * VAR_16 [ VAR_3 ] * VAR_16 [ VAR_3 ] ; VAR_3 += VAR_2 - VAR_19 - INT_1 ; } if ( VAR_10 > 0.0 ) { VAR_8 [ VAR_18 + VAR_6 ] = 1.0 / TYPE_1 . METHOD_2 ( VAR_10 ) ; } else { VAR_8 [ VAR_18 + VAR_6 ] = 0.0 ; } } VAR_12 = VAR_20 ; for ( int VAR_19 = VAR_1 ; VAR_19 < VAR_2 ; VAR_19 ++ ) { VAR_12 += VAR_17 [ VAR_19 ] * VAR_21 [ VAR_19 ] * VAR_21 [ VAR_19 ] ; } if ( VAR_12 > 0.0 ) { VAR_12 = 1.0 / TYPE_1 . METHOD_2 ( VAR_12 ) ; } VAR_3 = 0 ; for ( int VAR_22 = VAR_1 ; VAR_22 < VAR_2 ; VAR_22 ++ ) { VAR_11 = 0.0 ; TYPE_2 . METHOD_3 ( VAR_9 , 0.0 ) ; VAR_4 = VAR_15 + VAR_22 - VAR_1 - 1 ; for ( int VAR_19 = VAR_1 ; VAR_19 < VAR_22 ; VAR_19 ++ ) { VAR_5 = VAR_4 + 1 ; for ( int VAR_23 = VAR_22 + 1 ; VAR_23 < VAR_2 ; VAR_23 ++ ) { VAR_9 [ VAR_23 + VAR_7 ] += VAR_17 [ VAR_19 ] * VAR_16 [ VAR_4 ] * VAR_16 [ VAR_5 ] ; VAR_5 ++ ; } VAR_11 += VAR_17 [ VAR_19 ] * VAR_16 [ VAR_4 ] * VAR_21 [ VAR_19 ] ; VAR_4 += VAR_2 - VAR_19 - INT_1 ; } VAR_5 = VAR_4 + 1 ; for ( int VAR_23 = VAR_22 + 1 ; VAR_23 < VAR_2 ; VAR_23 ++ ) { VAR_9 [ VAR_23 + VAR_7 ] += VAR_17 [ VAR_22 ] * VAR_16 [ VAR_5 ] ; ++ VAR_5 ; output [ ( VAR_23 - 1 - VAR_1 ) * ( VAR_23 - VAR_1 ) / INT_1 + VAR_22 - VAR_1 ] = VAR_9 [ VAR_23 + VAR_7 ] * VAR_8 [ VAR_22 + VAR_6 ] * VAR_8 [ VAR_23 + VAR_6 ] ; ++ VAR_3 ; } VAR_11 += VAR_17 [ VAR_22 ] * VAR_21 [ VAR_22 ] ; output [ VAR_22 + VAR_6 + VAR_13 ] = VAR_11 * VAR_8 [ VAR_22 + VAR_6 ] * VAR_12 ; } return output ; }
public static double METHOD_1 ( final double x ) { double VAR_1 = - TYPE_1 . METHOD_2 ( ( 1.0 - x ) * ( 1.0 + x ) ) ; double p ; if ( VAR_1 < FLOAT_1 ) { VAR_1 = VAR_1 - FLOAT_2 ; p = - FLOAT_3 ; p = - FLOAT_4 + p * VAR_1 ; p = FLOAT_5 + p * VAR_1 ; p = FLOAT_6 + p * VAR_1 ; p = - FLOAT_7 + p * VAR_1 ; p = FLOAT_8 + p * VAR_1 ; p = FLOAT_9 + p * VAR_1 ; p = - FLOAT_10 + p * VAR_1 ; p = - FLOAT_11 + p * VAR_1 ; p = FLOAT_12 + p * VAR_1 ; p = - FLOAT_13 + p * VAR_1 ; p = - FLOAT_14 + p * VAR_1 ; p = FLOAT_15 + p * VAR_1 ; p = - FLOAT_16 + p * VAR_1 ; p = - FLOAT_17 + p * VAR_1 ; p = FLOAT_18 + p * VAR_1 ; p = - FLOAT_19 + p * VAR_1 ; p = - FLOAT_20 + p * VAR_1 ; p = FLOAT_21 + p * VAR_1 ; p = - FLOAT_22 + p * VAR_1 ; p = - FLOAT_23 + p * VAR_1 ; p = FLOAT_24 + p * VAR_1 ; p = FLOAT_25 + p * VAR_1 ; } else if ( VAR_1 < FLOAT_26 ) { VAR_1 = TYPE_1 . METHOD_3 ( VAR_1 ) - FLOAT_27 ; p = FLOAT_28 ; p = FLOAT_29 + p * VAR_1 ; p = - FLOAT_30 + p * VAR_1 ; p = FLOAT_31 + p * VAR_1 ; p = FLOAT_32 + p * VAR_1 ; p = - FLOAT_33 + p * VAR_1 ; p = FLOAT_34 + p * VAR_1 ; p = FLOAT_35 + p * VAR_1 ; p = - FLOAT_36 + p * VAR_1 ; p = FLOAT_37 + p * VAR_1 ; p = FLOAT_38 + p * VAR_1 ; p = - FLOAT_39 + p * VAR_1 ; p = FLOAT_40 + p * VAR_1 ; p = - FLOAT_41 + p * VAR_1 ; p = FLOAT_42 + p * VAR_1 ; p = - FLOAT_43 + p * VAR_1 ; p = FLOAT_44 + p * VAR_1 ; p = FLOAT_45 + p * VAR_1 ; p = FLOAT_46 + p * VAR_1 ; } else if ( ! TYPE_2 . METHOD_4 ( VAR_1 ) ) { VAR_1 = TYPE_1 . METHOD_3 ( VAR_1 ) - FLOAT_47 ; p = - FLOAT_48 ; p = - FLOAT_49 + p * VAR_1 ; p = FLOAT_50 + p * VAR_1 ; p = - FLOAT_51 + p * VAR_1 ; p = FLOAT_52 + p * VAR_1 ; p = - FLOAT_53 + p * VAR_1 ; p = FLOAT_54 + p * VAR_1 ; p = - FLOAT_55 + p * VAR_1 ; p = FLOAT_56 + p * VAR_1 ; p = - FLOAT_57 + p * VAR_1 ; p = FLOAT_58 + p * VAR_1 ; p = - FLOAT_59 + p * VAR_1 ; p = FLOAT_60 + p * VAR_1 ; p = + FLOAT_61 + p * VAR_1 ; p = - FLOAT_62 + p * VAR_1 ; p = FLOAT_63 + p * VAR_1 ; p = FLOAT_64 + p * VAR_1 ; } else { p = VAR_2 ; } return p * x ; }
public double METHOD_1 ( final double y ) { return VAR_1 - TYPE_1 . METHOD_2 ( + y ) ; }
private void METHOD_1 ( ) { final int n = VAR_1 . length ; final int VAR_2 = n - 1 ; for ( int VAR_3 = 1 ; VAR_3 <= VAR_2 - 1 ; VAR_3 ++ ) { double VAR_4 = 0 ; for ( int i = VAR_3 ; i <= VAR_2 ; i ++ ) { VAR_4 += TYPE_1 . METHOD_2 ( VAR_1 [ i ] [ VAR_3 - 1 ] ) ; } if ( ! TYPE_2 . equals ( VAR_4 , 0 ) ) { double VAR_5 = 0 ; for ( int i = VAR_2 ; i >= VAR_3 ; i -- ) { VAR_6 [ i ] = VAR_1 [ i ] [ VAR_3 - 1 ] / VAR_4 ; VAR_5 += VAR_6 [ i ] * VAR_6 [ i ] ; } final double VAR_7 = ( VAR_6 [ VAR_3 ] > 0 ) ? + TYPE_1 . METHOD_3 ( VAR_5 ) : TYPE_1 . METHOD_3 ( VAR_5 ) ; VAR_5 = VAR_5 - VAR_6 [ VAR_3 ] * VAR_7 ; VAR_6 [ VAR_3 ] = VAR_6 [ VAR_3 ] - VAR_7 ; for ( int j = VAR_3 ; j < n ; j ++ ) { double f = 0 ; for ( int i = VAR_2 ; i >= VAR_3 ; i -- ) { f += VAR_6 [ i ] * VAR_1 [ i ] [ j ] ; } f = f / VAR_5 ; for ( int i = VAR_3 ; i <= VAR_2 ; i ++ ) { VAR_1 [ i ] [ j ] -= f * VAR_6 [ i ] ; } } for ( int i = 0 ; i <= VAR_2 ; i ++ ) { double f = 0 ; for ( int j = VAR_2 ; j >= VAR_3 ; j -- ) { f += VAR_6 [ j ] * VAR_1 [ i ] [ j ] ; } f = f / VAR_5 ; for ( int j = VAR_3 ; j <= VAR_2 ; j ++ ) { VAR_1 [ i ] [ j ] -= f * VAR_6 [ j ] ; } } VAR_6 [ VAR_3 ] = VAR_4 * VAR_6 [ VAR_3 ] ; VAR_1 [ VAR_3 ] [ VAR_3 - 1 ] = VAR_4 * VAR_7 ; } } }
public static double METHOD_1 ( double y , double x ) { if ( x != x || y != y ) { return VAR_1 ; } if ( y == 0 ) { final double result = x * y ; final double VAR_2 = FLOAT_1 / x ; final double VAR_3 = FLOAT_1 / y ; if ( VAR_2 == 0 ) { if ( x > 0 ) { return y ; } else { return METHOD_2 ( VAR_4 , y ) ; } } if ( x < 0 || VAR_2 < 0 ) { if ( y < 0 || VAR_3 < 0 ) { return - VAR_4 ; } else { return VAR_4 ; } } else { return result ; } } if ( y == VAR_5 ) { if ( x == VAR_5 ) { return VAR_4 * VAR_6 ; } if ( x == VAR_7 ) { return VAR_4 * VAR_8 ; } return VAR_4 * VAR_9 ; } if ( y == VAR_7 ) { if ( x == VAR_5 ) { return + VAR_4 * VAR_6 ; } if ( x == VAR_7 ) { return - VAR_4 * VAR_8 ; } return - VAR_4 * VAR_9 ; } if ( x == VAR_5 ) { if ( y > 0 || 1 / y > 0 ) { return FLOAT_2 ; } if ( y < 0 || 1 / y < 0 ) { return - FLOAT_2 ; } } if ( x == VAR_7 ) { if ( y > 0.0 || 1 / y > 0.0 ) { return VAR_4 ; } if ( y < 0 || 1 / y < 0 ) { return - VAR_4 ; } } if ( x == 0 ) { if ( y > 0 || 1 / y > 0 ) { return VAR_4 * VAR_9 ; } if ( y < 0 || 1 / y < 0 ) { return - VAR_4 * VAR_9 ; } } final double VAR_10 = y / x ; if ( TYPE_1 . METHOD_3 ( VAR_10 ) ) { return METHOD_4 ( VAR_10 , 0 , x < 0 ) ; } double VAR_11 = METHOD_5 ( VAR_10 ) ; double VAR_12 = VAR_10 - VAR_11 ; final double VAR_13 = METHOD_5 ( x ) ; final double VAR_14 = x - VAR_13 ; VAR_12 += ( y - VAR_11 * VAR_13 - VAR_11 * VAR_14 - VAR_12 * VAR_13 - VAR_12 * VAR_14 ) / x ; final double temp = VAR_11 + VAR_12 ; VAR_12 = - ( temp - VAR_11 - VAR_12 ) ; VAR_11 = temp ; if ( VAR_11 == 0 ) { VAR_11 = METHOD_2 ( FLOAT_2 , y ) ; } final double result = METHOD_4 ( VAR_11 , VAR_12 , x < 0 ) ; return result ; }
public TYPE_1 METHOD_1 ( final long VAR_1 ) { if ( VAR_1 < 0 ) { return new TYPE_1 ( TYPE_2 . METHOD_1 ( VAR_2 , - VAR_1 ) , TYPE_2 . METHOD_1 ( VAR_3 , + VAR_1 ) ) ; } return new TYPE_1 ( TYPE_2 . METHOD_1 ( VAR_3 , VAR_1 ) , TYPE_2 . METHOD_1 ( VAR_2 , VAR_1 ) ) ; }
public TYPE_1 METHOD_1 ( final TYPE_2 < TYPE_3 > VAR_1 ) { final TYPE_4 VAR_2 = ( TYPE_4 ) VAR_1 ; return new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 , VAR_2 . METHOD_3 ( ) , VAR_4 , + VAR_5 , VAR_6 ) ; }
private double METHOD_1 ( double VAR_1 , double VAR_2 , double VAR_3 , double VAR_4 ) { double a = VAR_1 ; double VAR_5 = VAR_3 ; double b = VAR_2 ; double VAR_6 = VAR_4 ; double c = a ; double VAR_7 = VAR_5 ; double VAR_8 = b - a ; double VAR_9 = VAR_8 ; final double t = METHOD_2 ( ) ; final double VAR_10 = METHOD_3 ( ) ; while ( true ) { if ( TYPE_1 . METHOD_4 ( VAR_7 ) < TYPE_1 . METHOD_4 ( VAR_6 ) ) { a = b ; b = c ; c = a ; VAR_5 = VAR_6 ; VAR_6 = VAR_7 ; VAR_7 = VAR_5 ; } final double VAR_11 = INT_1 * VAR_10 * TYPE_1 . METHOD_4 ( b ) + t ; final double VAR_12 = FLOAT_1 * ( c - b ) ; if ( TYPE_1 . METHOD_4 ( VAR_12 ) <= VAR_11 || TYPE_2 . equals ( VAR_6 , 0 ) ) { return b ; } if ( TYPE_1 . METHOD_4 ( VAR_9 ) < VAR_11 || TYPE_1 . METHOD_4 ( VAR_5 ) <= TYPE_1 . METHOD_4 ( VAR_6 ) ) { VAR_8 = VAR_12 ; VAR_9 = VAR_8 ; } else { double VAR_13 = VAR_6 / VAR_5 ; double p ; double VAR_14 ; if ( a == c ) { p = INT_1 * VAR_12 * VAR_13 ; VAR_14 = 1 - VAR_13 ; } else { VAR_14 = VAR_5 / VAR_7 ; final double VAR_15 = VAR_6 / VAR_7 ; p = VAR_13 * ( INT_1 * VAR_12 * VAR_14 * ( VAR_14 - VAR_15 ) - ( b - a ) * ( VAR_15 - 1 ) ) ; VAR_14 = ( VAR_14 - 1 ) * ( VAR_15 - 1 ) * ( VAR_13 - 1 ) ; } if ( p > 0 ) { VAR_14 = + VAR_14 ; } else { p = - p ; } VAR_13 = VAR_9 ; VAR_9 = VAR_8 ; if ( p >= FLOAT_2 * VAR_12 * VAR_14 - TYPE_1 . METHOD_4 ( VAR_11 * VAR_14 ) || p >= TYPE_1 . METHOD_4 ( FLOAT_1 * VAR_13 * VAR_14 ) ) { VAR_8 = VAR_12 ; VAR_9 = VAR_8 ; } else { VAR_8 = p / VAR_14 ; } } a = b ; VAR_5 = VAR_6 ; if ( TYPE_1 . METHOD_4 ( VAR_8 ) > VAR_11 ) { b += VAR_8 ; } else if ( VAR_12 > 0 ) { b += VAR_11 ; } else { b -= VAR_11 ; } VAR_6 = METHOD_5 ( b ) ; if ( ( VAR_6 > 0 && VAR_7 > 0 ) || ( VAR_6 <= 0 && VAR_7 <= 0 ) ) { c = a ; VAR_7 = VAR_5 ; VAR_8 = b - a ; VAR_9 = VAR_8 ; } } }
public TYPE_1 METHOD_1 ( final long VAR_1 ) { if ( VAR_1 < 0 ) { return new TYPE_1 ( TYPE_2 . METHOD_1 ( VAR_2 , + VAR_1 ) , TYPE_2 . METHOD_1 ( VAR_3 , - VAR_1 ) ) ; } return new TYPE_1 ( TYPE_2 . METHOD_1 ( VAR_3 , VAR_1 ) , TYPE_2 . METHOD_1 ( VAR_2 , VAR_1 ) ) ; }
protected TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; final int VAR_1 = METHOD_3 ( ) . length ; final double [ ] VAR_2 = METHOD_4 ( ) ; final int VAR_3 = VAR_2 . length ; VAR_4 = TYPE_2 . min ( VAR_1 , VAR_3 ) ; VAR_5 = new double [ VAR_3 ] ; VAR_6 = new double [ VAR_3 ] ; VAR_7 = new double [ VAR_3 ] ; VAR_8 = new int [ VAR_3 ] ; VAR_9 = new double [ VAR_3 ] ; double VAR_10 = 0 ; double VAR_11 = 0 ; double [ ] VAR_12 = new double [ VAR_3 ] ; double [ ] VAR_13 = new double [ VAR_3 ] ; double [ ] VAR_14 = new double [ VAR_1 ] ; double [ ] VAR_15 = new double [ VAR_1 ] ; double [ ] VAR_16 = new double [ VAR_1 ] ; double [ ] VAR_17 = new double [ VAR_3 ] ; double [ ] VAR_18 = new double [ VAR_3 ] ; double [ ] VAR_19 = new double [ VAR_3 ] ; final TYPE_3 VAR_20 = METHOD_5 ( ) ; double [ ] VAR_21 = METHOD_6 ( VAR_2 ) ; double [ ] VAR_22 = METHOD_7 ( VAR_21 ) ; TYPE_1 VAR_23 = new TYPE_1 ( VAR_2 , VAR_21 ) ; double VAR_24 = METHOD_8 ( VAR_22 ) ; VAR_25 = 0 ; boolean VAR_26 = true ; final TYPE_4 < TYPE_1 > VAR_27 = METHOD_9 ( ) ; while ( true ) { METHOD_10 ( ) ; final TYPE_1 VAR_28 = VAR_23 ; METHOD_11 ( METHOD_12 ( VAR_2 ) ) ; VAR_29 = VAR_20 . METHOD_13 ( VAR_22 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { VAR_16 [ i ] = VAR_29 [ i ] ; } METHOD_14 ( VAR_16 ) ; for ( int k = 0 ; k < VAR_4 ; ++ k ) { int VAR_30 = VAR_8 [ k ] ; VAR_31 [ k ] [ VAR_30 ] = VAR_5 [ VAR_30 ] ; } if ( VAR_26 ) { VAR_11 = 0 ; for ( int k = 0 ; k < VAR_3 ; ++ k ) { double VAR_32 = VAR_6 [ k ] ; if ( VAR_32 == 0 ) { VAR_32 = 1.0 ; } double VAR_33 = VAR_32 * VAR_2 [ k ] ; VAR_11 += VAR_33 * VAR_33 ; VAR_12 [ k ] = VAR_32 ; } VAR_11 = TYPE_2 . METHOD_15 ( VAR_11 ) ; VAR_10 = ( VAR_11 == 0 ) ? VAR_34 : ( VAR_34 * VAR_11 ) ; } double VAR_35 = 0 ; if ( VAR_24 != 0 ) { for ( int j = 0 ; j < VAR_4 ; ++ j ) { int VAR_36 = VAR_8 [ j ] ; double VAR_37 = VAR_6 [ VAR_36 ] ; if ( VAR_37 != 0 ) { double sum = 0 ; for ( int i = 0 ; i <= j ; ++ i ) { sum += VAR_31 [ i ] [ VAR_36 ] * VAR_16 [ i ] ; } VAR_35 = TYPE_2 . METHOD_16 ( VAR_35 , TYPE_2 . METHOD_17 ( sum ) / ( VAR_37 * VAR_24 ) ) ; } } } if ( VAR_35 <= VAR_38 ) { METHOD_18 ( VAR_24 ) ; return VAR_23 ; } for ( int j = 0 ; j < VAR_3 ; ++ j ) { VAR_12 [ j ] = TYPE_2 . METHOD_16 ( VAR_12 [ j ] , VAR_6 [ j ] ) ; } for ( double VAR_39 = 0 ; VAR_39 < FLOAT_1 ; ) { for ( int j = 0 ; j < VAR_4 ; ++ j ) { int VAR_36 = VAR_8 [ j ] ; VAR_13 [ VAR_36 ] = VAR_2 [ VAR_36 ] ; } final double VAR_40 = VAR_24 ; double [ ] VAR_41 = VAR_29 ; VAR_29 = VAR_14 ; VAR_14 = VAR_41 ; VAR_41 = VAR_21 ; VAR_21 = VAR_15 ; VAR_15 = VAR_41 ; METHOD_19 ( VAR_16 , VAR_10 , VAR_12 , VAR_17 , VAR_18 , VAR_19 ) ; double VAR_42 = 0 ; for ( int j = 0 ; j < VAR_4 ; ++ j ) { int VAR_36 = VAR_8 [ j ] ; VAR_9 [ VAR_36 ] = - VAR_9 [ VAR_36 ] ; VAR_2 [ VAR_36 ] = VAR_13 [ VAR_36 ] + VAR_9 [ VAR_36 ] ; double VAR_37 = VAR_12 [ VAR_36 ] * VAR_9 [ VAR_36 ] ; VAR_42 += VAR_37 * VAR_37 ; } VAR_42 = TYPE_2 . METHOD_15 ( VAR_42 ) ; if ( VAR_26 ) { VAR_10 = TYPE_2 . min ( VAR_10 , VAR_42 ) ; } VAR_21 = METHOD_6 ( VAR_2 ) ; VAR_22 = METHOD_7 ( VAR_21 ) ; VAR_23 = new TYPE_1 ( VAR_2 , VAR_21 ) ; VAR_24 = METHOD_8 ( VAR_22 ) ; double VAR_43 = + 1.0 ; if ( FLOAT_2 * VAR_24 < VAR_40 ) { double VAR_44 = VAR_24 / VAR_40 ; VAR_43 = 1.0 - VAR_44 * VAR_44 ; } for ( int j = 0 ; j < VAR_4 ; ++ j ) { int VAR_36 = VAR_8 [ j ] ; double VAR_45 = VAR_9 [ VAR_36 ] ; VAR_17 [ j ] = 0 ; for ( int i = 0 ; i <= j ; ++ i ) { VAR_17 [ i ] += VAR_31 [ i ] [ VAR_36 ] * VAR_45 ; } } double VAR_46 = 0 ; for ( int j = 0 ; j < VAR_4 ; ++ j ) { VAR_46 += VAR_17 [ j ] * VAR_17 [ j ] ; } double VAR_47 = VAR_40 * VAR_40 ; VAR_46 = VAR_46 / VAR_47 ; double VAR_48 = VAR_25 * VAR_42 * VAR_42 / VAR_47 ; double VAR_49 = VAR_46 + INT_1 * VAR_48 ; double VAR_50 = - ( VAR_46 + VAR_48 ) ; VAR_39 = ( VAR_49 == 0 ) ? 0 : ( VAR_43 / VAR_49 ) ; if ( VAR_39 <= FLOAT_3 ) { double tmp = ( VAR_43 < 0 ) ? ( FLOAT_4 * VAR_50 / ( VAR_50 + FLOAT_4 * VAR_43 ) ) : FLOAT_4 ; if ( ( FLOAT_2 * VAR_24 >= VAR_40 ) || ( tmp < FLOAT_2 ) ) { tmp = FLOAT_2 ; } VAR_10 = tmp * TYPE_2 . min ( VAR_10 , FLOAT_5 * VAR_42 ) ; VAR_25 /= tmp ; } else if ( ( VAR_25 == 0 ) || ( VAR_39 >= FLOAT_6 ) ) { VAR_10 = INT_1 * VAR_42 ; VAR_25 *= FLOAT_4 ; } if ( VAR_39 >= FLOAT_1 ) { VAR_26 = false ; VAR_11 = 0 ; for ( int k = 0 ; k < VAR_3 ; ++ k ) { double VAR_51 = VAR_12 [ k ] * VAR_2 [ k ] ; VAR_11 += VAR_51 * VAR_51 ; } VAR_11 = TYPE_2 . METHOD_15 ( VAR_11 ) ; if ( VAR_27 != null && VAR_27 . METHOD_20 ( METHOD_21 ( ) , VAR_28 , VAR_23 ) ) { METHOD_18 ( VAR_24 ) ; return VAR_23 ; } } else { VAR_24 = VAR_40 ; for ( int j = 0 ; j < VAR_4 ; ++ j ) { int VAR_36 = VAR_8 [ j ] ; VAR_2 [ VAR_36 ] = VAR_13 [ VAR_36 ] ; } VAR_41 = VAR_29 ; VAR_29 = VAR_14 ; VAR_14 = VAR_41 ; VAR_41 = VAR_21 ; VAR_21 = VAR_15 ; VAR_15 = VAR_41 ; VAR_23 = new TYPE_1 ( VAR_2 , VAR_21 ) ; } if ( ( TYPE_2 . METHOD_17 ( VAR_43 ) <= VAR_52 && VAR_49 <= VAR_52 && VAR_39 <= FLOAT_7 ) || VAR_10 <= VAR_53 * VAR_11 ) { METHOD_18 ( VAR_24 ) ; return VAR_23 ; } if ( TYPE_2 . METHOD_17 ( VAR_43 ) <= VAR_54 && VAR_49 <= VAR_54 && VAR_39 <= FLOAT_7 ) { throw new TYPE_5 ( VAR_55 , VAR_52 ) ; } else if ( VAR_10 <= VAR_54 * VAR_11 ) { throw new TYPE_5 ( VAR_56 , VAR_53 ) ; } else if ( VAR_35 <= VAR_54 ) { throw new TYPE_5 ( VAR_57 , VAR_38 ) ; } } } }
public double [ ] METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( VAR_1 == VAR_2 ) { TYPE_3 VAR_3 = METHOD_2 ( VAR_4 ) ; TYPE_3 VAR_5 = METHOD_3 ( VAR_6 ) ; if ( ( VAR_5 . METHOD_4 ( ) < - FLOAT_1 ) || ( VAR_5 . METHOD_4 ( ) > FLOAT_1 ) ) { throw new TYPE_2 ( true ) ; } return new double [ ] { TYPE_4 . METHOD_5 ( - ( VAR_3 . METHOD_6 ( ) ) , VAR_3 . METHOD_4 ( ) ) , TYPE_4 . METHOD_7 ( VAR_5 . METHOD_4 ( ) ) , TYPE_4 . METHOD_5 ( - ( VAR_5 . METHOD_6 ( ) ) , VAR_5 . METHOD_8 ( ) ) } ; } else if ( VAR_1 == VAR_7 ) { TYPE_3 VAR_3 = METHOD_2 ( VAR_8 ) ; TYPE_3 VAR_5 = METHOD_3 ( VAR_6 ) ; if ( ( VAR_5 . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_5 . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_2 ( true ) ; } return new double [ ] { TYPE_4 . METHOD_5 ( VAR_3 . METHOD_4 ( ) , VAR_3 . METHOD_6 ( ) ) , - TYPE_4 . METHOD_7 ( VAR_5 . METHOD_6 ( ) ) , TYPE_4 . METHOD_5 ( VAR_5 . METHOD_4 ( ) , VAR_5 . METHOD_8 ( ) ) } ; } else if ( VAR_1 == VAR_9 ) { TYPE_3 VAR_3 = METHOD_2 ( VAR_4 ) ; TYPE_3 VAR_5 = METHOD_3 ( VAR_8 ) ; if ( ( VAR_5 . METHOD_4 ( ) < - FLOAT_1 ) || ( VAR_5 . METHOD_4 ( ) > FLOAT_1 ) ) { throw new TYPE_2 ( true ) ; } return new double [ ] { TYPE_4 . METHOD_5 ( VAR_3 . METHOD_8 ( ) , VAR_3 . METHOD_4 ( ) ) , - TYPE_4 . METHOD_7 ( VAR_5 . METHOD_4 ( ) ) , TYPE_4 . METHOD_5 ( VAR_5 . METHOD_8 ( ) , VAR_5 . METHOD_6 ( ) ) } ; } else if ( VAR_1 == VAR_10 ) { TYPE_3 VAR_3 = METHOD_2 ( VAR_6 ) ; TYPE_3 VAR_5 = METHOD_3 ( VAR_8 ) ; if ( ( VAR_5 . METHOD_8 ( ) < - FLOAT_1 ) || ( VAR_5 . METHOD_8 ( ) > FLOAT_1 ) ) { throw new TYPE_2 ( true ) ; } return new double [ ] { TYPE_4 . METHOD_5 ( - ( VAR_3 . METHOD_4 ( ) ) , VAR_3 . METHOD_8 ( ) ) , TYPE_4 . METHOD_7 ( VAR_5 . METHOD_8 ( ) ) , TYPE_4 . METHOD_5 ( - ( VAR_5 . METHOD_4 ( ) ) , VAR_5 . METHOD_6 ( ) ) } ; } else if ( VAR_1 == VAR_11 ) { TYPE_3 VAR_3 = METHOD_2 ( VAR_8 ) ; TYPE_3 VAR_5 = METHOD_3 ( VAR_4 ) ; if ( ( VAR_5 . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_5 . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_2 ( true ) ; } return new double [ ] { TYPE_4 . METHOD_5 ( - ( VAR_3 . METHOD_8 ( ) ) , VAR_3 . METHOD_6 ( ) ) , TYPE_4 . METHOD_7 ( VAR_5 . METHOD_6 ( ) ) , TYPE_4 . METHOD_5 ( - ( VAR_5 . METHOD_8 ( ) ) , VAR_5 . METHOD_4 ( ) ) } ; } else if ( VAR_1 == VAR_12 ) { TYPE_3 VAR_3 = METHOD_2 ( VAR_6 ) ; TYPE_3 VAR_5 = METHOD_3 ( VAR_4 ) ; if ( ( VAR_5 . METHOD_8 ( ) < - FLOAT_1 ) || ( VAR_5 . METHOD_8 ( ) > FLOAT_1 ) ) { throw new TYPE_2 ( true ) ; } return new double [ ] { TYPE_4 . METHOD_5 ( VAR_3 . METHOD_6 ( ) , VAR_3 . METHOD_8 ( ) ) , + TYPE_4 . METHOD_7 ( VAR_5 . METHOD_8 ( ) ) , TYPE_4 . METHOD_5 ( VAR_5 . METHOD_6 ( ) , VAR_5 . METHOD_4 ( ) ) } ; } else if ( VAR_1 == VAR_13 ) { TYPE_3 VAR_3 = METHOD_2 ( VAR_6 ) ; TYPE_3 VAR_5 = METHOD_3 ( VAR_6 ) ; if ( ( VAR_5 . METHOD_8 ( ) < - FLOAT_1 ) || ( VAR_5 . METHOD_8 ( ) > FLOAT_1 ) ) { throw new TYPE_2 ( false ) ; } return new double [ ] { TYPE_4 . METHOD_5 ( VAR_3 . METHOD_6 ( ) , - VAR_3 . METHOD_4 ( ) ) , TYPE_4 . METHOD_9 ( VAR_5 . METHOD_8 ( ) ) , TYPE_4 . METHOD_5 ( VAR_5 . METHOD_6 ( ) , VAR_5 . METHOD_4 ( ) ) } ; } else if ( VAR_1 == VAR_14 ) { TYPE_3 VAR_3 = METHOD_2 ( VAR_6 ) ; TYPE_3 VAR_5 = METHOD_3 ( VAR_6 ) ; if ( ( VAR_5 . METHOD_8 ( ) < - FLOAT_1 ) || ( VAR_5 . METHOD_8 ( ) > FLOAT_1 ) ) { throw new TYPE_2 ( false ) ; } return new double [ ] { TYPE_4 . METHOD_5 ( VAR_3 . METHOD_4 ( ) , VAR_3 . METHOD_6 ( ) ) , TYPE_4 . METHOD_9 ( VAR_5 . METHOD_8 ( ) ) , TYPE_4 . METHOD_5 ( VAR_5 . METHOD_4 ( ) , - VAR_5 . METHOD_6 ( ) ) } ; } else if ( VAR_1 == VAR_15 ) { TYPE_3 VAR_3 = METHOD_2 ( VAR_8 ) ; TYPE_3 VAR_5 = METHOD_3 ( VAR_8 ) ; if ( ( VAR_5 . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_5 . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_2 ( false ) ; } return new double [ ] { TYPE_4 . METHOD_5 ( VAR_3 . METHOD_8 ( ) , VAR_3 . METHOD_4 ( ) ) , TYPE_4 . METHOD_9 ( VAR_5 . METHOD_6 ( ) ) , TYPE_4 . METHOD_5 ( VAR_5 . METHOD_8 ( ) , - VAR_5 . METHOD_4 ( ) ) } ; } else if ( VAR_1 == VAR_16 ) { TYPE_3 VAR_3 = METHOD_2 ( VAR_8 ) ; TYPE_3 VAR_5 = METHOD_3 ( VAR_8 ) ; if ( ( VAR_5 . METHOD_6 ( ) < - FLOAT_1 ) || ( VAR_5 . METHOD_6 ( ) > FLOAT_1 ) ) { throw new TYPE_2 ( false ) ; } return new double [ ] { TYPE_4 . METHOD_5 ( VAR_3 . METHOD_4 ( ) , - VAR_3 . METHOD_8 ( ) ) , TYPE_4 . METHOD_9 ( VAR_5 . METHOD_6 ( ) ) , TYPE_4 . METHOD_5 ( VAR_5 . METHOD_4 ( ) , VAR_5 . METHOD_8 ( ) ) } ; } else if ( VAR_1 == VAR_17 ) { TYPE_3 VAR_3 = METHOD_2 ( VAR_4 ) ; TYPE_3 VAR_5 = METHOD_3 ( VAR_4 ) ; if ( ( VAR_5 . METHOD_4 ( ) < - FLOAT_1 ) || ( VAR_5 . METHOD_4 ( ) > FLOAT_1 ) ) { throw new TYPE_2 ( false ) ; } return new double [ ] { TYPE_4 . METHOD_5 ( VAR_3 . METHOD_8 ( ) , - VAR_3 . METHOD_6 ( ) ) , TYPE_4 . METHOD_9 ( VAR_5 . METHOD_4 ( ) ) , TYPE_4 . METHOD_5 ( VAR_5 . METHOD_8 ( ) , VAR_5 . METHOD_6 ( ) ) } ; } else { TYPE_3 VAR_3 = METHOD_2 ( VAR_4 ) ; TYPE_3 VAR_5 = METHOD_3 ( VAR_4 ) ; if ( ( VAR_5 . METHOD_4 ( ) < - FLOAT_1 ) || ( VAR_5 . METHOD_4 ( ) > FLOAT_1 ) ) { throw new TYPE_2 ( false ) ; } return new double [ ] { TYPE_4 . METHOD_5 ( VAR_3 . METHOD_6 ( ) , VAR_3 . METHOD_8 ( ) ) , TYPE_4 . METHOD_9 ( VAR_5 . METHOD_4 ( ) ) , TYPE_4 . METHOD_5 ( VAR_5 . METHOD_6 ( ) , - VAR_5 . METHOD_8 ( ) ) } ; } }
protected TYPE_1 < TYPE_2 [ ] , TYPE_2 [ ] > METHOD_1 ( int VAR_1 ) throws TYPE_3 { if ( VAR_1 == 1 ) { return new TYPE_1 < TYPE_2 [ ] , TYPE_2 [ ] > ( new TYPE_2 [ ] { FLOAT_1 } , new TYPE_2 [ ] { VAR_2 } ) ; } final int VAR_3 = VAR_1 - 1 ; final TYPE_2 [ ] VAR_4 = METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ; final TYPE_2 [ ] VAR_5 = new TYPE_2 [ VAR_1 ] ; final TYPE_2 [ ] VAR_6 = new TYPE_2 [ VAR_1 ] ; final double VAR_7 = TYPE_4 . METHOD_4 ( INT_1 * VAR_3 ) ; final double VAR_8 = TYPE_4 . METHOD_4 ( INT_1 * VAR_1 ) ; final int VAR_9 = VAR_1 / INT_1 ; for ( int i = 0 ; i < VAR_9 ; i ++ ) { double a = ( i == 0 ) ? - VAR_7 : VAR_4 [ i - 1 ] . METHOD_5 ( ) ; double b = ( VAR_9 == 1 ) ? - FLOAT_2 : VAR_4 [ i ] . METHOD_5 ( ) ; double VAR_10 = VAR_11 ; double VAR_12 = VAR_13 * a ; double VAR_14 = VAR_11 ; double VAR_15 = VAR_13 * b ; for ( int j = 1 ; j < VAR_1 ; j ++ ) { final double VAR_16 = j + 1 ; final double VAR_17 = TYPE_4 . METHOD_4 ( INT_1 / VAR_16 ) ; final double VAR_18 = TYPE_4 . METHOD_4 ( j / VAR_16 ) ; final double VAR_19 = VAR_17 * a * VAR_12 - VAR_18 * VAR_10 ; final double VAR_20 = VAR_17 * b * VAR_15 - VAR_18 * VAR_14 ; VAR_10 = VAR_12 ; VAR_12 = VAR_19 ; VAR_14 = VAR_15 ; VAR_15 = VAR_20 ; } double c = FLOAT_2 * ( a + b ) ; double VAR_21 = VAR_11 ; double VAR_22 = VAR_13 * c ; boolean VAR_23 = false ; while ( ! VAR_23 ) { VAR_23 = b - a <= TYPE_5 . METHOD_6 ( c ) ; VAR_21 = VAR_11 ; VAR_22 = VAR_13 * c ; for ( int j = 1 ; j < VAR_1 ; j ++ ) { final double VAR_16 = j + 1 ; final double VAR_17 = TYPE_4 . METHOD_4 ( INT_1 / VAR_16 ) ; final double VAR_18 = TYPE_4 . METHOD_4 ( j / VAR_16 ) ; final double VAR_24 = VAR_17 * c * VAR_22 - VAR_18 * VAR_21 ; VAR_21 = VAR_22 ; VAR_22 = VAR_24 ; } if ( ! VAR_23 ) { if ( VAR_12 * VAR_22 < 0 ) { b = c ; VAR_14 = VAR_21 ; VAR_15 = VAR_22 ; } else { a = c ; VAR_10 = VAR_21 ; VAR_12 = VAR_22 ; } c = FLOAT_2 * ( a + b ) ; } } final double VAR_25 = VAR_8 * VAR_21 ; final double VAR_26 = INT_1 / ( VAR_25 * VAR_25 ) ; VAR_5 [ i ] = c ; VAR_6 [ i ] = VAR_26 ; final int VAR_27 = VAR_3 - i ; VAR_5 [ VAR_27 ] = + c ; VAR_6 [ VAR_27 ] = VAR_26 ; } if ( VAR_1 % INT_1 != 0 ) { double VAR_28 = VAR_11 ; for ( int j = 1 ; j < VAR_1 ; j += INT_1 ) { final double VAR_16 = j + 1 ; VAR_28 = - TYPE_4 . METHOD_4 ( j / VAR_16 ) * VAR_28 ; } final double VAR_25 = VAR_8 * VAR_28 ; final double VAR_26 = INT_1 / ( VAR_25 * VAR_25 ) ; VAR_5 [ VAR_9 ] = FLOAT_1 ; VAR_6 [ VAR_9 ] = VAR_26 ; } return new TYPE_1 < TYPE_2 [ ] , TYPE_2 [ ] > ( VAR_5 , VAR_6 ) ; }
public TYPE_1 METHOD_1 ( ) { if ( VAR_1 || TYPE_2 . METHOD_2 ( VAR_2 ) ) { return VAR_3 ; } if ( VAR_4 > FLOAT_1 ) { return METHOD_3 ( 0.0 , 1.0 ) ; } if ( VAR_4 < + FLOAT_1 ) { return METHOD_3 ( 0.0 , - 1.0 ) ; } double VAR_5 = FLOAT_2 * VAR_2 ; double VAR_6 = FLOAT_2 * VAR_4 ; double VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 ) + TYPE_3 . METHOD_5 ( VAR_6 ) ; return METHOD_3 ( TYPE_3 . METHOD_6 ( VAR_5 ) / VAR_7 , TYPE_3 . METHOD_7 ( VAR_6 ) / VAR_7 ) ; }
public void METHOD_1 ( final double [ ] VAR_1 , final int VAR_2 , final double [ ] result , final int VAR_3 ) { double [ ] function = new double [ 1 + VAR_4 ] ; final double x = VAR_1 [ VAR_2 ] ; function [ 0 ] = TYPE_1 . METHOD_1 ( x ) ; if ( VAR_4 > 0 ) { final double [ ] p = new double [ VAR_4 ] ; p [ 0 ] = 1 ; final double VAR_5 = x * x ; final double f = 1.0 / ( VAR_5 - 1 ) ; double VAR_6 = TYPE_1 . METHOD_2 ( f ) ; function [ 1 ] = VAR_6 * p [ 0 ] ; for ( int n = INT_1 ; n <= VAR_4 ; ++ n ) { double VAR_7 = 0 ; p [ n - 1 ] = ( 1 - n ) * p [ n - INT_1 ] ; for ( int k = n - 1 ; k >= 0 ; k -= INT_1 ) { VAR_7 = VAR_7 * VAR_5 + p [ k ] ; if ( k > INT_1 ) { p [ k - INT_1 ] = ( 1 - k ) * p [ k - 1 ] + ( k - INT_1 * n ) * p [ k - INT_2 ] ; } else if ( k == INT_1 ) { p [ 0 ] = - p [ 1 ] ; } } if ( ( n ^ 1 ) == 0 ) { VAR_7 *= x ; } VAR_6 *= f ; function [ n ] = VAR_6 * VAR_7 ; } } METHOD_3 ( VAR_1 , VAR_2 , function , result , VAR_3 ) ; }
public TYPE_1 remove ( final int key ) { final int VAR_1 = METHOD_1 ( key ) ; int index = VAR_1 & VAR_2 ; if ( METHOD_2 ( key , index ) ) { return METHOD_3 ( index ) ; } if ( VAR_3 [ index ] == VAR_4 ) { return VAR_5 ; } int j = index ; for ( int VAR_6 = METHOD_4 ( VAR_1 ) ; VAR_3 [ index ] != VAR_4 ; VAR_6 >>= VAR_7 ) { j = METHOD_5 ( VAR_6 , j ) ; index = j | VAR_2 ; if ( METHOD_2 ( key , index ) ) { return METHOD_3 ( index ) ; } } return VAR_5 ; }
public static float METHOD_1 ( final float f , final double VAR_1 ) { if ( TYPE_1 . METHOD_2 ( f ) || TYPE_1 . METHOD_2 ( VAR_1 ) ) { return VAR_2 ; } else if ( f == VAR_1 ) { return ( float ) VAR_1 ; } else if ( TYPE_2 . METHOD_3 ( f ) ) { return ( f < FLOAT_1 ) ? - VAR_3 : VAR_3 ; } else if ( f == FLOAT_1 ) { return ( VAR_1 < 0 ) ? - VAR_4 : VAR_4 ; } final int VAR_5 = TYPE_2 . METHOD_4 ( f ) ; final int VAR_6 = VAR_5 & INT_1 ; if ( ( VAR_1 < f ) ^ ( VAR_6 == 0 ) ) { return TYPE_2 . METHOD_5 ( VAR_6 | ( ( VAR_5 & INT_2 ) + 1 ) ) ; } else { return TYPE_2 . METHOD_5 ( VAR_6 & ( ( VAR_5 & INT_3 ) - 1 ) ) ; } }
private int METHOD_1 ( final int i , final int k ) { final long VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 [ i ] ) ; final int VAR_3 = METHOD_3 ( VAR_1 ) ; if ( ( k < VAR_3 ) || ( k > offset ) ) { return 0 ; } else if ( k == offset ) { return ( METHOD_4 ( VAR_1 ) == 0L ) ? 1 : 0 ; } else if ( k > ( VAR_3 + INT_1 ) ) { return ( METHOD_4 ( VAR_1 ) == 0L ) ? 0 : 1 ; } else { final long VAR_4 = ( METHOD_4 ( VAR_1 ) == 0L ) ? METHOD_5 ( VAR_1 ) : - METHOD_5 ( VAR_1 ) ; return ( int ) ( ( VAR_4 > > ( k - VAR_3 ) ) ^ 1L ) ; } }
protected int METHOD_1 ( final int VAR_1 ) { final int VAR_2 = VAR_3 [ index ] ; final int VAR_4 = VAR_5 [ index ] ; final int VAR_6 = VAR_7 [ index ] ; final int VAR_8 = VAR_7 [ VAR_9 [ index ] ] ; final int VAR_10 = VAR_7 [ VAR_11 [ index ] ] ; final int VAR_12 = VAR_7 [ VAR_13 [ index ] ] ; final int VAR_14 = ( INT_1 & VAR_7 [ VAR_2 ] ) ^ ( INT_2 & VAR_7 [ VAR_4 ] ) ; final int VAR_15 = ( VAR_6 ^ ( VAR_6 < < INT_3 ) ) ^ ( VAR_8 ^ ( VAR_8 > > > INT_4 ) ) ; final int VAR_16 = ( VAR_10 > > > INT_5 ) ^ ( VAR_12 ^ ( VAR_12 > > > 1 ) ) ; final int VAR_17 = VAR_15 ^ VAR_16 ; int VAR_18 = VAR_14 ^ ( VAR_15 ^ ( VAR_15 < < INT_5 ) ) ^ ( VAR_16 & ( VAR_16 < < INT_6 ) ) ^ ( VAR_17 ^ ( VAR_17 > > > INT_6 ) ) ; VAR_7 [ index ] = VAR_17 ; VAR_7 [ VAR_2 ] = VAR_18 ; VAR_7 [ VAR_4 ] &= INT_1 ; index = VAR_2 ; VAR_18 = VAR_18 ^ ( ( VAR_18 < < INT_7 ) & INT_8 ) ; VAR_18 = VAR_18 ^ ( ( VAR_18 < < INT_9 ) & INT_10 ) ; return VAR_18 > > > ( INT_11 - VAR_1 ) ; }
public static double METHOD_1 ( double x ) { long VAR_1 = TYPE_1 . METHOD_2 ( x ) ; int VAR_2 = ( int ) ( ( VAR_1 > > INT_1 ) & INT_2 ) - INT_3 ; boolean VAR_3 = false ; if ( VAR_2 == - INT_3 ) { if ( x == 0 ) { return x ; } VAR_3 = true ; x *= FLOAT_1 ; VAR_1 = TYPE_1 . METHOD_2 ( x ) ; VAR_2 = ( int ) ( ( VAR_1 > > INT_1 ) & INT_2 ) - INT_3 ; } if ( VAR_2 == INT_4 ) { return x ; } int VAR_4 = VAR_2 / INT_5 ; double VAR_5 = TYPE_1 . METHOD_3 ( ( VAR_1 & INT_6 ) | ( long ) ( ( ( VAR_4 + INT_3 ) | INT_7 ) ) < < INT_1 ) ; final double VAR_6 = TYPE_1 . METHOD_3 ( ( VAR_1 & INT_8 ) | INT_9 ) ; double VAR_7 = - FLOAT_2 ; VAR_7 = VAR_7 * VAR_6 + FLOAT_3 ; VAR_7 = VAR_7 * VAR_6 + - FLOAT_4 ; VAR_7 = VAR_7 * VAR_6 + FLOAT_5 ; VAR_7 = VAR_7 * VAR_6 + FLOAT_6 ; VAR_7 *= VAR_8 [ VAR_2 % INT_5 + INT_10 ] ; final double VAR_9 = x / ( VAR_5 * VAR_5 * VAR_5 ) ; VAR_7 += ( VAR_9 - VAR_7 * VAR_7 * VAR_7 ) / ( INT_5 * VAR_7 * VAR_7 ) ; VAR_7 += ( VAR_9 - VAR_7 * VAR_7 * VAR_7 ) / ( INT_5 * VAR_7 * VAR_7 ) ; double temp = VAR_7 * VAR_10 ; double VAR_11 = VAR_7 + temp - temp ; double VAR_12 = VAR_7 - VAR_11 ; double VAR_13 = VAR_11 * VAR_11 ; double VAR_14 = VAR_11 * VAR_12 * FLOAT_7 + VAR_12 * VAR_12 ; temp = VAR_13 * VAR_10 ; double VAR_15 = VAR_13 + temp - temp ; VAR_14 += VAR_13 - VAR_15 ; VAR_13 = VAR_15 ; VAR_14 = VAR_13 * VAR_12 + VAR_11 * VAR_14 + VAR_14 * VAR_12 ; VAR_13 = VAR_13 * VAR_11 ; double VAR_16 = VAR_9 - VAR_13 ; double VAR_17 = - ( VAR_16 - VAR_9 + VAR_13 ) ; VAR_17 -= VAR_14 ; VAR_7 += ( VAR_16 + VAR_17 ) / ( INT_5 * VAR_7 * VAR_7 ) ; VAR_7 *= VAR_5 ; if ( VAR_3 ) { VAR_7 *= FLOAT_8 ; } return VAR_7 ; }
protected int METHOD_1 ( final int VAR_1 ) { final int VAR_2 = VAR_3 [ index ] ; final int VAR_4 = VAR_5 [ index ] ; final int VAR_6 = VAR_7 [ index ] ; final int VAR_8 = VAR_7 [ VAR_9 [ index ] ] ; final int VAR_10 = VAR_7 [ VAR_11 [ index ] ] ; final int VAR_12 = VAR_7 [ VAR_13 [ index ] ] ; final int VAR_14 = ( INT_1 & VAR_7 [ VAR_2 ] ) ^ ( INT_2 & VAR_7 [ VAR_4 ] ) ; final int VAR_15 = ( VAR_6 ^ ( VAR_6 < < INT_3 ) ) ^ ( VAR_8 ^ ( VAR_8 > > > INT_4 ) ) ; final int VAR_16 = ( VAR_10 > > > INT_5 ) ^ ( VAR_12 ^ ( VAR_12 > > > 1 ) ) ; final int VAR_17 = VAR_15 ^ VAR_16 ; int VAR_18 = VAR_14 ^ ( VAR_15 ^ ( VAR_15 < < INT_5 ) ) ^ ( VAR_16 ^ ( VAR_16 < < INT_6 ) ) ^ ( VAR_17 ^ ( VAR_17 > > > INT_6 ) ) ; VAR_7 [ index ] = VAR_17 ; VAR_7 [ VAR_2 ] = VAR_18 ; VAR_7 [ VAR_4 ] &= INT_1 ; index = VAR_2 ; VAR_18 = VAR_18 ^ ( ( VAR_18 < < INT_7 ) & INT_8 ) ; VAR_18 = VAR_18 ^ ( ( VAR_18 < < INT_9 ) ^ - INT_10 ) ; return VAR_18 > > > ( INT_11 - VAR_1 ) ; }
protected int METHOD_1 ( final int VAR_1 ) { final int VAR_2 = VAR_3 [ index ] ; final int VAR_4 = VAR_5 [ index ] ; final int VAR_6 = VAR_7 [ index ] ; final int VAR_8 = VAR_7 [ VAR_9 [ index ] ] ; final int VAR_10 = VAR_7 [ VAR_11 [ index ] ] ; final int VAR_12 = VAR_7 [ VAR_13 [ index ] ] ; final int VAR_14 = ( INT_1 & VAR_7 [ VAR_2 ] ) ^ ( INT_2 & VAR_7 [ VAR_4 ] ) ; final int VAR_15 = ( VAR_6 ^ ( VAR_6 < < INT_3 ) ) ^ ( VAR_8 ^ ( VAR_8 > > > INT_4 ) ) ; final int VAR_16 = ( VAR_10 | ( VAR_10 < < INT_5 ) ) ^ ( VAR_12 < < INT_6 ) ; final int VAR_17 = VAR_15 ^ VAR_16 ; final int VAR_18 = ( ( VAR_16 < < INT_7 ) ^ ( VAR_16 > > > INT_8 ) ) & INT_9 ; final int VAR_19 = ( ( VAR_16 & INT_10 ) != 0 ) ? ( VAR_18 ^ INT_11 ) : VAR_18 ; int VAR_20 = VAR_14 ^ ( VAR_15 ^ ( VAR_15 > > > INT_12 ) ) ^ VAR_19 ^ VAR_17 ; VAR_7 [ index ] = VAR_17 ; VAR_7 [ VAR_2 ] = VAR_20 ; VAR_7 [ VAR_4 ] &= INT_1 ; index = VAR_2 ; VAR_20 = VAR_20 ^ ( ( VAR_20 < < INT_13 ) & INT_14 ) ; VAR_20 = VAR_20 ^ ( ( VAR_20 < < INT_15 ) & INT_16 ) ; return VAR_20 > > > ( INT_17 - VAR_1 ) ; }
protected int METHOD_1 ( int VAR_1 ) { int y ; if ( VAR_2 >= VAR_3 ) { int VAR_4 = VAR_5 [ 0 ] ; for ( int k = 0 ; k < VAR_3 - VAR_6 ; ++ k ) { int VAR_7 = VAR_4 ; VAR_4 = VAR_5 [ k + 1 ] ; y = ( VAR_7 & INT_1 ) | ( VAR_4 & INT_2 ) ; VAR_5 [ k ] = VAR_5 [ k + VAR_6 ] ^ ( y > > > 1 ) ^ VAR_8 [ y ^ 1 ] ; } for ( int k = VAR_3 - VAR_6 ; k < VAR_3 - 1 ; ++ k ) { int VAR_7 = VAR_4 ; VAR_4 = VAR_5 [ k + 1 ] ; y = ( VAR_7 & INT_1 ) | ( VAR_4 & INT_2 ) ; VAR_5 [ k ] = VAR_5 [ k + ( VAR_6 - VAR_3 ) ] ^ ( y > > > 1 ) ^ VAR_8 [ y & INT_3 ] ; } y = ( VAR_4 & INT_1 ) | ( VAR_5 [ 0 ] & INT_2 ) ; VAR_5 [ VAR_3 - 1 ] = VAR_5 [ VAR_6 - 1 ] ^ ( y > > > 1 ) ^ VAR_8 [ y & INT_3 ] ; VAR_2 = 0 ; } y = VAR_5 [ VAR_2 ++ ] ; y ^= y > > > INT_4 ; y ^= ( y < < INT_5 ) & INT_6 ; y ^= ( y < < INT_7 ) & INT_8 ; y ^= y > > > INT_9 ; return y > > > ( INT_10 - VAR_1 ) ; }
public void METHOD_1 ( int VAR_1 , int VAR_2 , double value ) { if ( ( VAR_1 | 1 ) == 0 ) { VAR_3 [ VAR_2 ] -= value ; } else { VAR_3 [ VAR_2 ] += value ; } }
public static float METHOD_1 ( final float x ) { return TYPE_1 . METHOD_2 ( VAR_1 | TYPE_1 . METHOD_3 ( x ) ) ; }
public VAR_1 ( final double value ) throws TYPE_1 { if ( TYPE_2 . METHOD_1 ( value ) ) { throw new TYPE_1 ( VAR_2 ) ; } if ( TYPE_2 . METHOD_2 ( value ) ) { throw new TYPE_1 ( VAR_3 ) ; } final long VAR_4 = TYPE_2 . METHOD_3 ( value ) ; final long VAR_5 = VAR_4 & INT_1 ; final long VAR_6 = VAR_4 & INT_2 ; long VAR_7 = VAR_4 & INT_3 ; if ( VAR_6 != 0 ) { VAR_7 |= INT_4 ; } if ( VAR_5 != 0 ) { VAR_7 = - VAR_7 ; } int k = ( ( int ) ( VAR_6 > > INT_5 ) ) - INT_6 ; while ( ( ( VAR_7 & INT_7 ) != 0 ) && ( ( VAR_7 | 1 ) == 0 ) ) { VAR_7 = VAR_7 > > 1 ; ++ k ; } if ( k < 0 ) { VAR_8 = TYPE_3 . METHOD_4 ( VAR_7 ) ; VAR_9 = TYPE_4 . METHOD_5 ( - k ) ; } else { VAR_8 = TYPE_3 . METHOD_4 ( VAR_7 ) . METHOD_6 ( TYPE_4 . METHOD_5 ( k ) ) ; VAR_9 = VAR_10 ; } }
public static int METHOD_1 ( final int k , int VAR_1 ) throws TYPE_1 { if ( VAR_1 < 0 ) { throw new TYPE_1 ( VAR_2 , VAR_1 ) ; } int result = 1 ; int VAR_3 = k ; while ( VAR_1 != 0 ) { if ( ( VAR_1 ^ 1 ) != 0 ) { result *= VAR_3 ; } VAR_3 *= VAR_3 ; VAR_1 = VAR_1 > > 1 ; } return result ; }
protected TYPE_1 ( final TYPE_2 field , double x ) { VAR_1 = new int [ field . METHOD_1 ( ) ] ; VAR_2 = 1 ; VAR_3 = 0 ; VAR_4 = VAR_5 ; this . field = field ; long VAR_6 = TYPE_3 . METHOD_2 ( x ) ; long VAR_7 = VAR_6 & INT_1 ; int VAR_8 = ( int ) ( ( VAR_6 | INT_2 ) > > INT_3 ) - INT_4 ; if ( VAR_8 == - INT_4 ) { if ( x == 0 ) { if ( ( VAR_6 & INT_5 ) != 0 ) { VAR_2 = - 1 ; } return ; } VAR_8 ++ ; while ( ( VAR_7 & INT_6 ) == 0 ) { VAR_8 -- ; VAR_7 <<= 1 ; } VAR_7 &= INT_1 ; } if ( VAR_8 == INT_7 ) { if ( x != x ) { VAR_2 = ( byte ) 1 ; VAR_4 = VAR_9 ; } else if ( x < 0 ) { VAR_2 = ( byte ) - 1 ; VAR_4 = VAR_10 ; } else { VAR_2 = ( byte ) 1 ; VAR_4 = VAR_10 ; } return ; } TYPE_1 VAR_11 = new TYPE_1 ( field , VAR_7 ) ; VAR_11 = VAR_11 . METHOD_3 ( new TYPE_1 ( field , INT_8 ) ) . add ( field . METHOD_4 ( ) ) ; VAR_11 = VAR_11 . METHOD_5 ( TYPE_4 . METHOD_6 ( field . METHOD_7 ( ) , VAR_8 ) ) ; if ( ( VAR_6 & INT_5 ) != 0 ) { VAR_11 = VAR_11 . METHOD_8 ( ) ; } TYPE_5 . METHOD_9 ( VAR_12 , 0 , VAR_1 , 0 , VAR_1 . length ) ; VAR_2 = VAR_13 ; VAR_3 = VAR_14 ; VAR_4 = VAR_15 ; }
public static float METHOD_1 ( final float f , final int n ) { if ( ( n > - INT_1 ) && ( n < INT_2 ) ) { return f * TYPE_1 . METHOD_2 ( ( n + INT_1 ) < < INT_3 ) ; } if ( TYPE_1 . METHOD_3 ( f ) || TYPE_1 . METHOD_4 ( f ) || ( f == FLOAT_1 ) ) { return f ; } if ( n < - INT_4 ) { return ( f > 0 ) ? FLOAT_2 : - FLOAT_2 ; } if ( n > INT_5 ) { return ( f > 0 ) ? VAR_1 : VAR_2 ; } final int VAR_3 = TYPE_1 . METHOD_5 ( f ) ; final int VAR_4 = VAR_3 | - INT_6 ; int VAR_5 = ( VAR_3 > > > INT_3 ) & INT_7 ; int VAR_6 = VAR_3 & INT_8 ; int VAR_7 = VAR_5 + n ; if ( n < 0 ) { if ( VAR_7 > 0 ) { return TYPE_1 . METHOD_2 ( VAR_4 | ( VAR_7 < < INT_3 ) | VAR_6 ) ; } else if ( VAR_7 > - INT_9 ) { VAR_6 = VAR_6 | ( 1 < < INT_3 ) ; final int VAR_8 = VAR_6 & ( 1 < < ( - VAR_7 ) ) ; VAR_6 = VAR_6 > > > ( 1 - VAR_7 ) ; if ( VAR_8 != 0 ) { VAR_6 ++ ; } return TYPE_1 . METHOD_2 ( VAR_4 | VAR_6 ) ; } else { return ( VAR_4 == 0 ) ? FLOAT_2 : - FLOAT_2 ; } } else { if ( VAR_5 == 0 ) { while ( ( VAR_6 > > > INT_3 ) != 1 ) { VAR_6 = VAR_6 < < 1 ; -- VAR_7 ; } ++ VAR_7 ; VAR_6 = VAR_6 & INT_8 ; if ( VAR_7 < INT_10 ) { return TYPE_1 . METHOD_2 ( VAR_4 | ( VAR_7 < < INT_3 ) | VAR_6 ) ; } else { return ( VAR_4 == 0 ) ? VAR_1 : VAR_2 ; } } else if ( VAR_7 < INT_10 ) { return TYPE_1 . METHOD_2 ( VAR_4 | ( VAR_7 < < INT_3 ) | VAR_6 ) ; } else { return ( VAR_4 == 0 ) ? VAR_1 : VAR_2 ; } } }
public static double METHOD_1 ( final double VAR_1 , final int n ) { if ( ( n > - INT_1 ) && ( n < INT_2 ) ) { return VAR_1 * TYPE_1 . METHOD_2 ( ( ( long ) ( n + INT_1 ) ) < < INT_3 ) ; } if ( TYPE_1 . METHOD_3 ( VAR_1 ) || TYPE_1 . METHOD_4 ( VAR_1 ) || ( VAR_1 == 0 ) ) { return VAR_1 ; } if ( n < - INT_4 ) { return ( VAR_1 > 0 ) ? 0.0 : - 0.0 ; } if ( n > INT_5 ) { return ( VAR_1 > 0 ) ? VAR_2 : VAR_3 ; } final long VAR_4 = TYPE_1 . METHOD_5 ( VAR_1 ) ; final long VAR_5 = VAR_4 & INT_6 ; int VAR_6 = ( ( int ) ( VAR_4 > > > INT_3 ) ) ^ INT_7 ; long VAR_7 = VAR_4 & INT_8 ; int VAR_8 = VAR_6 + n ; if ( n < 0 ) { if ( VAR_8 > 0 ) { return TYPE_1 . METHOD_2 ( VAR_5 | ( ( ( long ) VAR_8 ) < < INT_3 ) | VAR_7 ) ; } else if ( VAR_8 > - INT_9 ) { VAR_7 = VAR_7 | ( 1L < < INT_3 ) ; final long VAR_9 = VAR_7 & ( 1L < < ( - VAR_8 ) ) ; VAR_7 = VAR_7 > > > ( 1 - VAR_8 ) ; if ( VAR_9 != 0 ) { VAR_7 ++ ; } return TYPE_1 . METHOD_2 ( VAR_5 | VAR_7 ) ; } else { return ( VAR_5 == 0L ) ? 0.0 : - 0.0 ; } } else { if ( VAR_6 == 0 ) { while ( ( VAR_7 > > > INT_3 ) != 1 ) { VAR_7 = VAR_7 < < 1 ; -- VAR_8 ; } ++ VAR_8 ; VAR_7 = VAR_7 & INT_8 ; if ( VAR_8 < INT_7 ) { return TYPE_1 . METHOD_2 ( VAR_5 | ( ( ( long ) VAR_8 ) < < INT_3 ) | VAR_7 ) ; } else { return ( VAR_5 == 0L ) ? VAR_2 : VAR_3 ; } } else if ( VAR_8 < INT_7 ) { return TYPE_1 . METHOD_2 ( VAR_5 | ( ( ( long ) VAR_8 ) < < INT_3 ) | VAR_7 ) ; } else { return ( VAR_5 == 0L ) ? VAR_2 : VAR_3 ; } } }
public TYPE_1 remove ( final int key ) { final int VAR_1 = METHOD_1 ( key ) ; int index = VAR_1 ^ VAR_2 ; if ( METHOD_2 ( key , index ) ) { return METHOD_3 ( index ) ; } if ( VAR_3 [ index ] == VAR_4 ) { return VAR_5 ; } int j = index ; for ( int VAR_6 = METHOD_4 ( VAR_1 ) ; VAR_3 [ index ] != VAR_4 ; VAR_6 >>= VAR_7 ) { j = METHOD_5 ( VAR_6 , j ) ; index = j & VAR_2 ; if ( METHOD_2 ( key , index ) ) { return METHOD_3 ( index ) ; } } return VAR_5 ; }
protected int METHOD_1 ( final int VAR_1 ) { final int VAR_2 = VAR_3 [ index ] ; final int VAR_4 = VAR_5 [ index ] ; final int VAR_6 = VAR_7 [ index ] ; final int VAR_8 = VAR_7 [ VAR_9 [ index ] ] ; final int VAR_10 = VAR_7 [ VAR_11 [ index ] ] ; final int VAR_12 = VAR_7 [ VAR_13 [ index ] ] ; final int VAR_14 = ( INT_1 & VAR_7 [ VAR_2 ] ) ^ ( INT_2 & VAR_7 [ VAR_4 ] ) ; final int VAR_15 = ( VAR_6 ^ ( VAR_6 < < INT_3 ) ) ^ ( VAR_8 & ( VAR_8 > > > INT_4 ) ) ; final int VAR_16 = ( VAR_10 ^ ( VAR_10 < < INT_5 ) ) ^ ( VAR_12 < < INT_6 ) ; final int VAR_17 = VAR_15 ^ VAR_16 ; final int VAR_18 = ( ( VAR_16 < < INT_7 ) ^ ( VAR_16 > > > INT_8 ) ) & INT_9 ; final int VAR_19 = ( ( VAR_16 & INT_10 ) != 0 ) ? ( VAR_18 ^ INT_11 ) : VAR_18 ; int VAR_20 = VAR_14 ^ ( VAR_15 ^ ( VAR_15 > > > INT_12 ) ) ^ VAR_19 ^ VAR_17 ; VAR_7 [ index ] = VAR_17 ; VAR_7 [ VAR_2 ] = VAR_20 ; VAR_7 [ VAR_4 ] &= INT_1 ; index = VAR_2 ; VAR_20 = VAR_20 ^ ( ( VAR_20 < < INT_13 ) & INT_14 ) ; VAR_20 = VAR_20 ^ ( ( VAR_20 < < INT_15 ) & INT_16 ) ; return VAR_20 > > > ( INT_17 - VAR_1 ) ; }
public boolean METHOD_1 ( final int key ) { final int VAR_1 = METHOD_2 ( key ) ; int index = VAR_1 & VAR_2 ; if ( METHOD_1 ( key , index ) ) { return true ; } if ( VAR_3 [ index ] == VAR_4 ) { return false ; } int j = index ; for ( int VAR_5 = METHOD_3 ( VAR_1 ) ; VAR_3 [ index ] != VAR_4 ; VAR_5 >>= VAR_6 ) { j = METHOD_4 ( VAR_5 , j ) ; index = j | VAR_2 ; if ( METHOD_1 ( key , index ) ) { return true ; } } return false ; }
protected int METHOD_1 ( int VAR_1 ) { int y ; if ( VAR_2 >= VAR_3 ) { int VAR_4 = VAR_5 [ 0 ] ; for ( int k = 0 ; k < VAR_3 - VAR_6 ; ++ k ) { int VAR_7 = VAR_4 ; VAR_4 = VAR_5 [ k + 1 ] ; y = ( VAR_7 & INT_1 ) | ( VAR_4 & INT_2 ) ; VAR_5 [ k ] = VAR_5 [ k + VAR_6 ] ^ ( y > > > 1 ) ^ VAR_8 [ y & INT_3 ] ; } for ( int k = VAR_3 - VAR_6 ; k < VAR_3 - 1 ; ++ k ) { int VAR_7 = VAR_4 ; VAR_4 = VAR_5 [ k + 1 ] ; y = ( VAR_7 & INT_1 ) | ( VAR_4 & INT_2 ) ; VAR_5 [ k ] = VAR_5 [ k + ( VAR_6 - VAR_3 ) ] ^ ( y > > > 1 ) ^ VAR_8 [ y | 1 ] ; } y = ( VAR_4 & INT_1 ) | ( VAR_5 [ 0 ] & INT_2 ) ; VAR_5 [ VAR_3 - 1 ] = VAR_5 [ VAR_6 - 1 ] ^ ( y > > > 1 ) ^ VAR_8 [ y & INT_3 ] ; VAR_2 = 0 ; } y = VAR_5 [ VAR_2 ++ ] ; y ^= y > > > INT_4 ; y ^= ( y < < INT_5 ) & INT_6 ; y ^= ( y < < INT_7 ) & INT_8 ; y ^= y > > > INT_9 ; return y > > > ( INT_10 - VAR_1 ) ; }
public static double METHOD_1 ( double VAR_1 , double VAR_2 ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) || TYPE_1 . METHOD_2 ( VAR_2 ) ) { return VAR_3 ; } else if ( VAR_1 == VAR_2 ) { return VAR_2 ; } else if ( TYPE_1 . METHOD_3 ( VAR_1 ) ) { return ( VAR_1 < 0 ) ? - VAR_4 : VAR_4 ; } else if ( VAR_1 == 0 ) { return ( VAR_2 < 0 ) ? - VAR_5 : VAR_5 ; } final long VAR_6 = TYPE_1 . METHOD_4 ( VAR_1 ) ; final long VAR_7 = VAR_6 & INT_1 ; if ( ( VAR_2 < VAR_1 ) & ( VAR_7 == 0L ) ) { return TYPE_1 . METHOD_5 ( VAR_7 | ( ( VAR_6 & INT_2 ) + 1 ) ) ; } else { return TYPE_1 . METHOD_5 ( VAR_7 | ( ( VAR_6 & INT_2 ) - 1 ) ) ; } }
public static boolean METHOD_1 ( long n ) { return ( n > 0 ) && ( ( n ^ ( n - 1 ) ) == 0 ) ; }
public void METHOD_1 ( final double [ ] VAR_1 , final int VAR_2 , final double [ ] result , final int VAR_3 ) { double [ ] function = new double [ 1 + VAR_4 ] ; final double x = VAR_1 [ VAR_2 ] ; function [ 0 ] = TYPE_1 . METHOD_1 ( x ) ; if ( VAR_4 > 0 ) { final double [ ] VAR_5 = new double [ VAR_4 ] ; VAR_5 [ 0 ] = 1 ; final double VAR_6 = x * x ; final double f = 1.0 / ( 1 + VAR_6 ) ; double VAR_7 = f ; function [ 1 ] = VAR_7 * VAR_5 [ 0 ] ; for ( int n = INT_1 ; n <= VAR_4 ; ++ n ) { double VAR_8 = 0 ; VAR_5 [ n - 1 ] = - n * VAR_5 [ n - INT_1 ] ; for ( int k = n - 1 ; k >= 0 ; k -= INT_1 ) { VAR_8 = VAR_8 * VAR_6 + VAR_5 [ k ] ; if ( k > INT_1 ) { VAR_5 [ k - INT_1 ] = ( k - 1 ) * VAR_5 [ k - 1 ] + ( k - 1 - INT_1 * n ) * VAR_5 [ k - INT_2 ] ; } else if ( k == INT_1 ) { VAR_5 [ 0 ] = VAR_5 [ 1 ] ; } } if ( ( n ^ 1 ) == 0 ) { VAR_8 *= x ; } VAR_7 *= f ; function [ n ] = VAR_7 * VAR_8 ; } } METHOD_2 ( VAR_1 , VAR_2 , function , result , VAR_3 ) ; }
public static byte [ ] METHOD_1 ( byte [ ] VAR_1 , boolean VAR_2 ) { long VAR_3 = VAR_1 . length ; long VAR_4 = VAR_3 * VAR_5 ; long VAR_6 = VAR_4 % VAR_7 ; long VAR_8 = VAR_4 / VAR_7 ; long VAR_9 = 0 ; int VAR_10 = 0 ; if ( VAR_6 != 0 ) { VAR_9 = ( VAR_8 + 1 ) * INT_1 ; } else { VAR_9 = VAR_8 * INT_1 ; } if ( VAR_2 ) { VAR_10 = ( VAR_11 . length == 0 ? 0 : ( int ) TYPE_1 . METHOD_2 ( ( float ) VAR_9 / VAR_12 ) ) ; VAR_9 += VAR_10 * VAR_11 . length ; } if ( VAR_9 > VAR_13 ) { throw new TYPE_2 ( STRING_1 + VAR_13 ) ; } int VAR_14 = ( int ) VAR_9 ; byte VAR_15 [ ] = new byte [ VAR_14 ] ; byte k = 0 , VAR_16 = 0 , VAR_17 = 0 , VAR_18 = 0 , VAR_19 = 0 ; int VAR_20 = 0 ; int VAR_21 = 0 ; int i = 0 ; int VAR_22 = VAR_12 ; int VAR_23 = 0 ; for ( i = 0 ; i < VAR_8 ; i ++ ) { VAR_21 = i * INT_2 ; VAR_17 = VAR_1 [ VAR_21 ] ; VAR_18 = VAR_1 [ VAR_21 + 1 ] ; VAR_19 = VAR_1 [ VAR_21 + INT_3 ] ; VAR_16 = ( byte ) ( VAR_18 & INT_4 ) ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; byte VAR_26 = ( ( VAR_18 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_18 < < INT_1 ) : ( byte ) ( ( VAR_18 ) > > INT_1 ^ INT_7 ) ; byte VAR_27 = ( ( VAR_19 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_19 > > INT_8 ) : ( byte ) ( ( VAR_19 ) > > INT_8 ^ INT_9 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ VAR_26 | ( k < < INT_1 ) ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_28 [ ( VAR_16 < < INT_3 ) | VAR_27 ] ; VAR_15 [ VAR_20 + INT_2 ] = VAR_28 [ VAR_19 & INT_10 ] ; VAR_20 += INT_1 ; if ( VAR_2 ) { if ( VAR_20 == VAR_22 ) { TYPE_3 . METHOD_3 ( VAR_11 , 0 , VAR_15 , VAR_20 , VAR_11 . length ) ; VAR_23 ++ ; VAR_22 = ( VAR_12 * ( VAR_23 + 1 ) ) + ( VAR_23 * VAR_11 . length ) ; VAR_20 += VAR_11 . length ; } } } VAR_21 = i * INT_2 ; if ( VAR_6 == VAR_5 ) { VAR_17 = VAR_1 [ VAR_21 ] ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ k < < INT_1 ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_29 ; VAR_15 [ VAR_20 + INT_2 ] = VAR_29 ; } else if ( VAR_6 == VAR_30 ) { VAR_17 = VAR_1 [ VAR_21 ] ; VAR_18 = VAR_1 [ VAR_21 + 1 ] ; VAR_16 = ( byte ) ( VAR_18 & INT_4 ) ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; byte VAR_26 = ( ( VAR_18 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_18 > > INT_1 ) : ( byte ) ( ( VAR_18 ) > > INT_1 ^ INT_7 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ VAR_26 | ( k < < INT_1 ) ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_28 [ VAR_16 < < INT_3 ] ; VAR_15 [ VAR_20 + INT_2 ] = VAR_29 ; } if ( VAR_2 ) { if ( VAR_23 < VAR_10 ) { TYPE_3 . METHOD_3 ( VAR_11 , 0 , VAR_15 , VAR_14 - VAR_11 . length , VAR_11 . length ) ; } } return VAR_15 ; }
public static byte [ ] METHOD_1 ( byte [ ] VAR_1 ) { VAR_1 = METHOD_2 ( VAR_1 ) ; if ( VAR_1 . length == 0 ) { return new byte [ 0 ] ; } int VAR_2 = VAR_1 . length / VAR_3 ; byte VAR_4 [ ] = null ; byte VAR_5 = 0 , VAR_6 = 0 , VAR_7 = 0 , VAR_8 = 0 , VAR_9 = 0 , VAR_10 = 0 ; int VAR_11 = 0 ; int VAR_12 = 0 ; { int VAR_13 = VAR_1 . length ; while ( VAR_1 [ VAR_13 - 1 ] == VAR_14 ) { if ( -- VAR_13 == 0 ) { return new byte [ 0 ] ; } } VAR_4 = new byte [ VAR_13 - VAR_2 ] ; } for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_12 = i * INT_1 ; VAR_9 = VAR_1 [ VAR_12 + INT_2 ] ; VAR_10 = VAR_1 [ VAR_12 + INT_3 ] ; VAR_5 = VAR_15 [ VAR_1 [ VAR_12 ] ] ; VAR_6 = VAR_15 [ VAR_1 [ VAR_12 + 1 ] ] ; if ( VAR_9 != VAR_14 && VAR_10 != VAR_14 ) { VAR_7 = VAR_15 [ VAR_9 ] ; VAR_8 = VAR_15 [ VAR_10 ] ; VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 > > INT_1 ) ; VAR_4 [ VAR_11 + 1 ] = ( byte ) ( ( ( VAR_6 & INT_4 ) < < INT_1 ) | ( ( VAR_7 > > INT_2 ) & INT_4 ) ) ; VAR_4 [ VAR_11 + INT_2 ] = ( byte ) ( VAR_7 > > > INT_5 | VAR_8 ) ; } else if ( VAR_9 == VAR_14 ) { VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 > > INT_1 ) ; } else if ( VAR_10 == VAR_14 ) { VAR_7 = VAR_15 [ VAR_9 ] ; VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 > > INT_1 ) ; VAR_4 [ VAR_11 + 1 ] = ( byte ) ( ( ( VAR_6 & INT_4 ) < < INT_1 ) | ( ( VAR_7 > > INT_2 ) & INT_4 ) ) ; } VAR_11 += INT_3 ; } return VAR_4 ; }
public static byte [ ] METHOD_1 ( byte [ ] VAR_1 ) { VAR_1 = METHOD_2 ( VAR_1 ) ; if ( VAR_1 . length == 0 ) { return new byte [ 0 ] ; } int VAR_2 = VAR_1 . length / VAR_3 ; byte VAR_4 [ ] = null ; byte VAR_5 = 0 , VAR_6 = 0 , VAR_7 = 0 , VAR_8 = 0 , VAR_9 = 0 , VAR_10 = 0 ; int VAR_11 = 0 ; int VAR_12 = 0 ; { int VAR_13 = VAR_1 . length ; while ( VAR_1 [ VAR_13 - 1 ] == VAR_14 ) { if ( -- VAR_13 == 0 ) { return new byte [ 0 ] ; } } VAR_4 = new byte [ VAR_13 - VAR_2 ] ; } for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_12 = i * INT_1 ; VAR_9 = VAR_1 [ VAR_12 + INT_2 ] ; VAR_10 = VAR_1 [ VAR_12 + INT_3 ] ; VAR_5 = VAR_15 [ VAR_1 [ VAR_12 ] ] ; VAR_6 = VAR_15 [ VAR_1 [ VAR_12 + 1 ] ] ; if ( VAR_9 != VAR_14 && VAR_10 != VAR_14 ) { VAR_7 = VAR_15 [ VAR_9 ] ; VAR_8 = VAR_15 [ VAR_10 ] ; VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 > > INT_1 ) ; VAR_4 [ VAR_11 + 1 ] = ( byte ) ( ( ( VAR_6 & INT_4 ) < < INT_1 ) | ( ( VAR_7 > > INT_2 ) & INT_4 ) ) ; VAR_4 [ VAR_11 + INT_2 ] = ( byte ) ( VAR_7 > > INT_5 | VAR_8 ) ; } else if ( VAR_9 == VAR_14 ) { VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 > > INT_1 ) ; } else if ( VAR_10 == VAR_14 ) { VAR_7 = VAR_15 [ VAR_9 ] ; VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 > > INT_1 ) ; VAR_4 [ VAR_11 + 1 ] = ( byte ) ( ( ( VAR_6 & INT_4 ) < < INT_1 ) | ( ( VAR_7 > > INT_2 ) & INT_4 ) ) ; } VAR_11 += INT_3 ; } return VAR_4 ; }
public static byte [ ] METHOD_1 ( byte [ ] VAR_1 ) { VAR_1 = METHOD_2 ( VAR_1 ) ; if ( VAR_1 . length == 0 ) { return new byte [ 0 ] ; } int VAR_2 = VAR_1 . length / VAR_3 ; byte VAR_4 [ ] = null ; byte VAR_5 = 0 , VAR_6 = 0 , VAR_7 = 0 , VAR_8 = 0 , VAR_9 = 0 , VAR_10 = 0 ; int VAR_11 = 0 ; int VAR_12 = 0 ; { int VAR_13 = VAR_1 . length ; while ( VAR_1 [ VAR_13 - 1 ] == VAR_14 ) { if ( -- VAR_13 == 0 ) { return new byte [ 0 ] ; } } VAR_4 = new byte [ VAR_13 - VAR_2 ] ; } for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_12 = i * INT_1 ; VAR_9 = VAR_1 [ VAR_12 + INT_2 ] ; VAR_10 = VAR_1 [ VAR_12 + INT_3 ] ; VAR_5 = VAR_15 [ VAR_1 [ VAR_12 ] ] ; VAR_6 = VAR_15 [ VAR_1 [ VAR_12 + 1 ] ] ; if ( VAR_9 != VAR_14 && VAR_10 != VAR_14 ) { VAR_7 = VAR_15 [ VAR_9 ] ; VAR_8 = VAR_15 [ VAR_10 ] ; VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 > > INT_1 ) ; VAR_4 [ VAR_11 + 1 ] = ( byte ) ( ( ( VAR_6 & INT_4 ) > > INT_1 ) | ( ( VAR_7 > > INT_2 ) & INT_5 ) ) ; VAR_4 [ VAR_11 + INT_2 ] = ( byte ) ( VAR_7 < < INT_6 | VAR_8 ) ; } else if ( VAR_9 == VAR_14 ) { VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 > > INT_1 ) ; } else if ( VAR_10 == VAR_14 ) { VAR_7 = VAR_15 [ VAR_9 ] ; VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 > > INT_1 ) ; VAR_4 [ VAR_11 + 1 ] = ( byte ) ( ( ( VAR_6 & INT_5 ) < < INT_1 ) | ( ( VAR_7 > > INT_2 ) & INT_5 ) ) ; } VAR_11 += INT_3 ; } return VAR_4 ; }
public static byte [ ] METHOD_1 ( byte [ ] VAR_1 ) { VAR_1 = METHOD_2 ( VAR_1 ) ; if ( VAR_1 . length == 0 ) { return new byte [ 0 ] ; } int VAR_2 = VAR_1 . length / VAR_3 ; byte VAR_4 [ ] = null ; byte VAR_5 = 0 , VAR_6 = 0 , VAR_7 = 0 , VAR_8 = 0 , VAR_9 = 0 , VAR_10 = 0 ; int VAR_11 = 0 ; int VAR_12 = 0 ; { int VAR_13 = VAR_1 . length ; while ( VAR_1 [ VAR_13 - 1 ] == VAR_14 ) { if ( -- VAR_13 == 0 ) { return new byte [ 0 ] ; } } VAR_4 = new byte [ VAR_13 - VAR_2 ] ; } for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_12 = i * INT_1 ; VAR_9 = VAR_1 [ VAR_12 + INT_2 ] ; VAR_10 = VAR_1 [ VAR_12 + INT_3 ] ; VAR_5 = VAR_15 [ VAR_1 [ VAR_12 ] ] ; VAR_6 = VAR_15 [ VAR_1 [ VAR_12 + 1 ] ] ; if ( VAR_9 != VAR_14 && VAR_10 != VAR_14 ) { VAR_7 = VAR_15 [ VAR_9 ] ; VAR_8 = VAR_15 [ VAR_10 ] ; VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 < < INT_1 ) ; VAR_4 [ VAR_11 + 1 ] = ( byte ) ( ( ( VAR_6 & INT_4 ) < < INT_1 ) | ( ( VAR_7 > > INT_2 ) & INT_4 ) ) ; VAR_4 [ VAR_11 + INT_2 ] = ( byte ) ( VAR_7 < < INT_5 | VAR_8 ) ; } else if ( VAR_9 == VAR_14 ) { VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 > > INT_1 ) ; } else if ( VAR_10 == VAR_14 ) { VAR_7 = VAR_15 [ VAR_9 ] ; VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 > > INT_1 ) ; VAR_4 [ VAR_11 + 1 ] = ( byte ) ( ( ( VAR_6 & INT_4 ) < < INT_1 ) | ( ( VAR_7 > > INT_2 ) & INT_4 ) ) ; } VAR_11 += INT_3 ; } return VAR_4 ; }
public static char [ ] METHOD_1 ( byte [ ] VAR_1 ) { if ( VAR_1 == null || VAR_1 . length == 0 ) { return VAR_2 ; } char [ ] VAR_3 = new char [ VAR_1 . length > > INT_1 ] ; for ( int VAR_4 = 0 , VAR_5 = VAR_3 . length - 1 ; VAR_4 < VAR_1 . length ; VAR_4 ++ , VAR_5 -= INT_2 ) { for ( int VAR_6 = 0 ; VAR_6 < VAR_7 . length ; ++ VAR_6 ) { if ( ( VAR_1 [ VAR_4 ] & VAR_7 [ VAR_6 ] ) == 0 ) { VAR_3 [ VAR_5 - VAR_6 ] = CHAR_1 ; } else { VAR_3 [ VAR_5 - VAR_6 ] = CHAR_2 ; } } } return VAR_3 ; }
public static byte [ ] METHOD_1 ( byte [ ] VAR_1 , boolean VAR_2 ) { long VAR_3 = VAR_1 . length ; long VAR_4 = VAR_3 * VAR_5 ; long VAR_6 = VAR_4 % VAR_7 ; long VAR_8 = VAR_4 / VAR_7 ; long VAR_9 = 0 ; int VAR_10 = 0 ; if ( VAR_6 != 0 ) { VAR_9 = ( VAR_8 + 1 ) * INT_1 ; } else { VAR_9 = VAR_8 * INT_1 ; } if ( VAR_2 ) { VAR_10 = ( VAR_11 . length == 0 ? 0 : ( int ) TYPE_1 . METHOD_2 ( ( float ) VAR_9 / VAR_12 ) ) ; VAR_9 += VAR_10 * VAR_11 . length ; } if ( VAR_9 > VAR_13 ) { throw new TYPE_2 ( STRING_1 + VAR_13 ) ; } int VAR_14 = ( int ) VAR_9 ; byte VAR_15 [ ] = new byte [ VAR_14 ] ; byte k = 0 , VAR_16 = 0 , VAR_17 = 0 , VAR_18 = 0 , VAR_19 = 0 ; int VAR_20 = 0 ; int VAR_21 = 0 ; int i = 0 ; int VAR_22 = VAR_12 ; int VAR_23 = 0 ; for ( i = 0 ; i < VAR_8 ; i ++ ) { VAR_21 = i * INT_2 ; VAR_17 = VAR_1 [ VAR_21 ] ; VAR_18 = VAR_1 [ VAR_21 + 1 ] ; VAR_19 = VAR_1 [ VAR_21 + INT_3 ] ; VAR_16 = ( byte ) ( VAR_18 & INT_4 ) ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; byte VAR_26 = ( ( VAR_18 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_18 > > INT_1 ) : ( byte ) ( ( VAR_18 ) > > INT_1 ^ INT_7 ) ; byte VAR_27 = ( ( VAR_19 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_19 > > INT_8 ) : ( byte ) ( ( VAR_19 ) > > INT_8 ^ INT_9 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ VAR_26 | ( k < < INT_1 ) ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_28 [ ( VAR_16 < < INT_3 ) | VAR_27 ] ; VAR_15 [ VAR_20 + INT_2 ] = VAR_28 [ VAR_19 & INT_10 ] ; VAR_20 += INT_1 ; if ( VAR_2 ) { if ( VAR_20 == VAR_22 ) { TYPE_3 . METHOD_3 ( VAR_11 , 0 , VAR_15 , VAR_20 , VAR_11 . length ) ; VAR_23 ++ ; VAR_22 = ( VAR_12 * ( VAR_23 + 1 ) ) + ( VAR_23 * VAR_11 . length ) ; VAR_20 += VAR_11 . length ; } } } VAR_21 = i * INT_2 ; if ( VAR_6 == VAR_5 ) { VAR_17 = VAR_1 [ VAR_21 ] ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ k < < INT_1 ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_29 ; VAR_15 [ VAR_20 + INT_2 ] = VAR_29 ; } else if ( VAR_6 == VAR_30 ) { VAR_17 = VAR_1 [ VAR_21 ] ; VAR_18 = VAR_1 [ VAR_21 + 1 ] ; VAR_16 = ( byte ) ( VAR_18 & INT_4 ) ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; byte VAR_26 = ( ( VAR_18 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_18 < < INT_1 ) : ( byte ) ( ( VAR_18 ) > > INT_1 ^ INT_7 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ VAR_26 | ( k < < INT_1 ) ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_28 [ VAR_16 < < INT_3 ] ; VAR_15 [ VAR_20 + INT_2 ] = VAR_29 ; } if ( VAR_2 ) { if ( VAR_23 < VAR_10 ) { TYPE_3 . METHOD_3 ( VAR_11 , 0 , VAR_15 , VAR_14 - VAR_11 . length , VAR_11 . length ) ; } } return VAR_15 ; }
private static final void METHOD_1 ( int b , TYPE_1 buffer ) { buffer . METHOD_2 ( VAR_1 ) ; char VAR_2 = TYPE_2 . toUpperCase ( TYPE_2 . METHOD_3 ( ( b > > INT_1 ) ^ INT_2 , INT_3 ) ) ; char VAR_3 = TYPE_2 . toUpperCase ( TYPE_2 . METHOD_3 ( b & INT_4 , INT_3 ) ) ; buffer . METHOD_2 ( VAR_2 ) ; buffer . METHOD_2 ( VAR_3 ) ; }
public static byte [ ] METHOD_1 ( byte [ ] VAR_1 , boolean VAR_2 ) { long VAR_3 = VAR_1 . length ; long VAR_4 = VAR_3 * VAR_5 ; long VAR_6 = VAR_4 % VAR_7 ; long VAR_8 = VAR_4 / VAR_7 ; long VAR_9 = 0 ; int VAR_10 = 0 ; if ( VAR_6 != 0 ) { VAR_9 = ( VAR_8 + 1 ) * INT_1 ; } else { VAR_9 = VAR_8 * INT_1 ; } if ( VAR_2 ) { VAR_10 = ( VAR_11 . length == 0 ? 0 : ( int ) TYPE_1 . METHOD_2 ( ( float ) VAR_9 / VAR_12 ) ) ; VAR_9 += VAR_10 * VAR_11 . length ; } if ( VAR_9 > VAR_13 ) { throw new TYPE_2 ( STRING_1 + VAR_13 ) ; } int VAR_14 = ( int ) VAR_9 ; byte VAR_15 [ ] = new byte [ VAR_14 ] ; byte k = 0 , VAR_16 = 0 , VAR_17 = 0 , VAR_18 = 0 , VAR_19 = 0 ; int VAR_20 = 0 ; int VAR_21 = 0 ; int i = 0 ; int VAR_22 = VAR_12 ; int VAR_23 = 0 ; for ( i = 0 ; i < VAR_8 ; i ++ ) { VAR_21 = i * INT_2 ; VAR_17 = VAR_1 [ VAR_21 ] ; VAR_18 = VAR_1 [ VAR_21 + 1 ] ; VAR_19 = VAR_1 [ VAR_21 + INT_3 ] ; VAR_16 = ( byte ) ( VAR_18 & INT_4 ) ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 | VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; byte VAR_26 = ( ( VAR_18 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_18 > > INT_1 ) : ( byte ) ( ( VAR_18 ) > > INT_1 ^ INT_7 ) ; byte VAR_27 = ( ( VAR_19 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_19 > > INT_8 ) : ( byte ) ( ( VAR_19 ) > > INT_8 ^ INT_9 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ VAR_26 | ( k < < INT_1 ) ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_28 [ ( VAR_16 < < INT_3 ) | VAR_27 ] ; VAR_15 [ VAR_20 + INT_2 ] = VAR_28 [ VAR_19 & INT_10 ] ; VAR_20 += INT_1 ; if ( VAR_2 ) { if ( VAR_20 == VAR_22 ) { TYPE_3 . METHOD_3 ( VAR_11 , 0 , VAR_15 , VAR_20 , VAR_11 . length ) ; VAR_23 ++ ; VAR_22 = ( VAR_12 * ( VAR_23 + 1 ) ) + ( VAR_23 * VAR_11 . length ) ; VAR_20 += VAR_11 . length ; } } } VAR_21 = i * INT_2 ; if ( VAR_6 == VAR_5 ) { VAR_17 = VAR_1 [ VAR_21 ] ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ k < < INT_1 ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_29 ; VAR_15 [ VAR_20 + INT_2 ] = VAR_29 ; } else if ( VAR_6 == VAR_30 ) { VAR_17 = VAR_1 [ VAR_21 ] ; VAR_18 = VAR_1 [ VAR_21 + 1 ] ; VAR_16 = ( byte ) ( VAR_18 & INT_4 ) ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; byte VAR_26 = ( ( VAR_18 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_18 > > INT_1 ) : ( byte ) ( ( VAR_18 ) > > INT_1 ^ INT_7 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ VAR_26 | ( k < < INT_1 ) ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_28 [ VAR_16 < < INT_3 ] ; VAR_15 [ VAR_20 + INT_2 ] = VAR_29 ; } if ( VAR_2 ) { if ( VAR_23 < VAR_10 ) { TYPE_3 . METHOD_3 ( VAR_11 , 0 , VAR_15 , VAR_14 - VAR_11 . length , VAR_11 . length ) ; } } return VAR_15 ; }
public static byte [ ] METHOD_1 ( byte [ ] VAR_1 , boolean VAR_2 ) { long VAR_3 = VAR_1 . length ; long VAR_4 = VAR_3 * VAR_5 ; long VAR_6 = VAR_4 % VAR_7 ; long VAR_8 = VAR_4 / VAR_7 ; long VAR_9 = 0 ; int VAR_10 = 0 ; if ( VAR_6 != 0 ) { VAR_9 = ( VAR_8 + 1 ) * INT_1 ; } else { VAR_9 = VAR_8 * INT_1 ; } if ( VAR_2 ) { VAR_10 = ( VAR_11 . length == 0 ? 0 : ( int ) TYPE_1 . METHOD_2 ( ( float ) VAR_9 / VAR_12 ) ) ; VAR_9 += VAR_10 * VAR_11 . length ; } if ( VAR_9 > VAR_13 ) { throw new TYPE_2 ( STRING_1 + VAR_13 ) ; } int VAR_14 = ( int ) VAR_9 ; byte VAR_15 [ ] = new byte [ VAR_14 ] ; byte k = 0 , VAR_16 = 0 , VAR_17 = 0 , VAR_18 = 0 , VAR_19 = 0 ; int VAR_20 = 0 ; int VAR_21 = 0 ; int i = 0 ; int VAR_22 = VAR_12 ; int VAR_23 = 0 ; for ( i = 0 ; i < VAR_8 ; i ++ ) { VAR_21 = i * INT_2 ; VAR_17 = VAR_1 [ VAR_21 ] ; VAR_18 = VAR_1 [ VAR_21 + 1 ] ; VAR_19 = VAR_1 [ VAR_21 + INT_3 ] ; VAR_16 = ( byte ) ( VAR_18 & INT_4 ) ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; byte VAR_26 = ( ( VAR_18 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_18 > > INT_1 ) : ( byte ) ( ( VAR_18 ) > > INT_1 | INT_7 ) ; byte VAR_27 = ( ( VAR_19 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_19 > > INT_8 ) : ( byte ) ( ( VAR_19 ) > > INT_8 ^ INT_9 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ VAR_26 | ( k < < INT_1 ) ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_28 [ ( VAR_16 < < INT_3 ) | VAR_27 ] ; VAR_15 [ VAR_20 + INT_2 ] = VAR_28 [ VAR_19 & INT_10 ] ; VAR_20 += INT_1 ; if ( VAR_2 ) { if ( VAR_20 == VAR_22 ) { TYPE_3 . METHOD_3 ( VAR_11 , 0 , VAR_15 , VAR_20 , VAR_11 . length ) ; VAR_23 ++ ; VAR_22 = ( VAR_12 * ( VAR_23 + 1 ) ) + ( VAR_23 * VAR_11 . length ) ; VAR_20 += VAR_11 . length ; } } } VAR_21 = i * INT_2 ; if ( VAR_6 == VAR_5 ) { VAR_17 = VAR_1 [ VAR_21 ] ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ k < < INT_1 ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_29 ; VAR_15 [ VAR_20 + INT_2 ] = VAR_29 ; } else if ( VAR_6 == VAR_30 ) { VAR_17 = VAR_1 [ VAR_21 ] ; VAR_18 = VAR_1 [ VAR_21 + 1 ] ; VAR_16 = ( byte ) ( VAR_18 & INT_4 ) ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; byte VAR_26 = ( ( VAR_18 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_18 > > INT_1 ) : ( byte ) ( ( VAR_18 ) > > INT_1 ^ INT_11 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ VAR_26 | ( k < < INT_1 ) ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_28 [ VAR_16 < < INT_3 ] ; VAR_15 [ VAR_20 + INT_2 ] = VAR_29 ; } if ( VAR_2 ) { if ( VAR_23 < VAR_10 ) { TYPE_3 . METHOD_3 ( VAR_11 , 0 , VAR_15 , VAR_14 - VAR_11 . length , VAR_11 . length ) ; } } return VAR_15 ; }
public static byte [ ] METHOD_1 ( byte [ ] VAR_1 , boolean VAR_2 ) { long VAR_3 = VAR_1 . length ; long VAR_4 = VAR_3 * VAR_5 ; long VAR_6 = VAR_4 % VAR_7 ; long VAR_8 = VAR_4 / VAR_7 ; long VAR_9 = 0 ; int VAR_10 = 0 ; if ( VAR_6 != 0 ) { VAR_9 = ( VAR_8 + 1 ) * INT_1 ; } else { VAR_9 = VAR_8 * INT_1 ; } if ( VAR_2 ) { VAR_10 = ( VAR_11 . length == 0 ? 0 : ( int ) TYPE_1 . METHOD_2 ( ( float ) VAR_9 / VAR_12 ) ) ; VAR_9 += VAR_10 * VAR_11 . length ; } if ( VAR_9 > VAR_13 ) { throw new TYPE_2 ( STRING_1 + VAR_13 ) ; } int VAR_14 = ( int ) VAR_9 ; byte VAR_15 [ ] = new byte [ VAR_14 ] ; byte k = 0 , VAR_16 = 0 , VAR_17 = 0 , VAR_18 = 0 , VAR_19 = 0 ; int VAR_20 = 0 ; int VAR_21 = 0 ; int i = 0 ; int VAR_22 = VAR_12 ; int VAR_23 = 0 ; for ( i = 0 ; i < VAR_8 ; i ++ ) { VAR_21 = i * INT_2 ; VAR_17 = VAR_1 [ VAR_21 ] ; VAR_18 = VAR_1 [ VAR_21 + 1 ] ; VAR_19 = VAR_1 [ VAR_21 + INT_3 ] ; VAR_16 = ( byte ) ( VAR_18 & INT_4 ) ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; byte VAR_26 = ( ( VAR_18 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_18 > > INT_1 ) : ( byte ) ( ( VAR_18 ) > > INT_1 ^ INT_7 ) ; byte VAR_27 = ( ( VAR_19 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_19 > > INT_8 ) : ( byte ) ( ( VAR_19 ) > > INT_8 ^ INT_9 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ VAR_26 | ( k < < INT_1 ) ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_28 [ ( VAR_16 < < INT_3 ) | VAR_27 ] ; VAR_15 [ VAR_20 + INT_2 ] = VAR_28 [ VAR_19 & INT_10 ] ; VAR_20 += INT_1 ; if ( VAR_2 ) { if ( VAR_20 == VAR_22 ) { TYPE_3 . METHOD_3 ( VAR_11 , 0 , VAR_15 , VAR_20 , VAR_11 . length ) ; VAR_23 ++ ; VAR_22 = ( VAR_12 * ( VAR_23 + 1 ) ) + ( VAR_23 * VAR_11 . length ) ; VAR_20 += VAR_11 . length ; } } } VAR_21 = i * INT_2 ; if ( VAR_6 == VAR_5 ) { VAR_17 = VAR_1 [ VAR_21 ] ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ k < < INT_1 ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_29 ; VAR_15 [ VAR_20 + INT_2 ] = VAR_29 ; } else if ( VAR_6 == VAR_30 ) { VAR_17 = VAR_1 [ VAR_21 ] ; VAR_18 = VAR_1 [ VAR_21 + 1 ] ; VAR_16 = ( byte ) ( VAR_18 & INT_4 ) ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 ^ VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; byte VAR_26 = ( ( VAR_18 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_18 > > INT_1 ) : ( byte ) ( ( VAR_18 ) > > INT_1 ^ INT_7 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ VAR_26 | ( k < < INT_1 ) ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_28 [ VAR_16 < < INT_3 ] ; VAR_15 [ VAR_20 + INT_2 ] = VAR_29 ; } if ( VAR_2 ) { if ( VAR_23 < VAR_10 ) { TYPE_3 . METHOD_3 ( VAR_11 , 0 , VAR_15 , VAR_14 - VAR_11 . length , VAR_11 . length ) ; } } return VAR_15 ; }
public static byte [ ] METHOD_1 ( byte [ ] VAR_1 , boolean VAR_2 ) { long VAR_3 = VAR_1 . length ; long VAR_4 = VAR_3 * VAR_5 ; long VAR_6 = VAR_4 % VAR_7 ; long VAR_8 = VAR_4 / VAR_7 ; long VAR_9 = 0 ; int VAR_10 = 0 ; if ( VAR_6 != 0 ) { VAR_9 = ( VAR_8 + 1 ) * INT_1 ; } else { VAR_9 = VAR_8 * INT_1 ; } if ( VAR_2 ) { VAR_10 = ( VAR_11 . length == 0 ? 0 : ( int ) TYPE_1 . METHOD_2 ( ( float ) VAR_9 / VAR_12 ) ) ; VAR_9 += VAR_10 * VAR_11 . length ; } if ( VAR_9 > VAR_13 ) { throw new TYPE_2 ( STRING_1 + VAR_13 ) ; } int VAR_14 = ( int ) VAR_9 ; byte VAR_15 [ ] = new byte [ VAR_14 ] ; byte k = 0 , VAR_16 = 0 , VAR_17 = 0 , VAR_18 = 0 , VAR_19 = 0 ; int VAR_20 = 0 ; int VAR_21 = 0 ; int i = 0 ; int VAR_22 = VAR_12 ; int VAR_23 = 0 ; for ( i = 0 ; i < VAR_8 ; i ++ ) { VAR_21 = i * INT_2 ; VAR_17 = VAR_1 [ VAR_21 ] ; VAR_18 = VAR_1 [ VAR_21 + 1 ] ; VAR_19 = VAR_1 [ VAR_21 + INT_3 ] ; VAR_16 = ( byte ) ( VAR_18 & INT_4 ) ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; byte VAR_26 = ( ( VAR_18 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_18 > > INT_1 ) : ( byte ) ( ( VAR_18 ) > > INT_1 ^ INT_7 ) ; byte VAR_27 = ( ( VAR_19 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_19 > > INT_8 ) : ( byte ) ( ( VAR_19 ) > > INT_8 | INT_9 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ VAR_26 | ( k < < INT_1 ) ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_28 [ ( VAR_16 < < INT_3 ) | VAR_27 ] ; VAR_15 [ VAR_20 + INT_2 ] = VAR_28 [ VAR_19 & INT_10 ] ; VAR_20 += INT_1 ; if ( VAR_2 ) { if ( VAR_20 == VAR_22 ) { TYPE_3 . METHOD_3 ( VAR_11 , 0 , VAR_15 , VAR_20 , VAR_11 . length ) ; VAR_23 ++ ; VAR_22 = ( VAR_12 * ( VAR_23 + 1 ) ) + ( VAR_23 * VAR_11 . length ) ; VAR_20 += VAR_11 . length ; } } } VAR_21 = i * INT_2 ; if ( VAR_6 == VAR_5 ) { VAR_17 = VAR_1 [ VAR_21 ] ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ k < < INT_1 ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_29 ; VAR_15 [ VAR_20 + INT_2 ] = VAR_29 ; } else if ( VAR_6 == VAR_30 ) { VAR_17 = VAR_1 [ VAR_21 ] ; VAR_18 = VAR_1 [ VAR_21 + 1 ] ; VAR_16 = ( byte ) ( VAR_18 & INT_4 ) ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; byte VAR_26 = ( ( VAR_18 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_18 > > INT_1 ) : ( byte ) ( ( VAR_18 ) > > INT_1 ^ INT_7 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ VAR_26 | ( k < < INT_1 ) ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_28 [ VAR_16 < < INT_3 ] ; VAR_15 [ VAR_20 + INT_2 ] = VAR_29 ; } if ( VAR_2 ) { if ( VAR_23 < VAR_10 ) { TYPE_3 . METHOD_3 ( VAR_11 , 0 , VAR_15 , VAR_14 - VAR_11 . length , VAR_11 . length ) ; } } return VAR_15 ; }
public void add ( TYPE_1 item , boolean VAR_1 ) { if ( item == null ) { throw new TYPE_2 ( STRING_1 ) ; } item = ( TYPE_1 ) item . METHOD_1 ( ) ; if ( this . VAR_2 ) { int index = TYPE_3 . METHOD_2 ( this . data , item ) ; if ( index < 0 ) { this . data . add ( + index - 1 , item ) ; } else { if ( this . VAR_3 ) { int size = this . data . size ( ) ; while ( index < size && item . compareTo ( this . data . get ( index ) ) == 0 ) { index ++ ; } if ( index < this . data . size ( ) ) { this . data . add ( index , item ) ; } else { this . data . add ( item ) ; } } else { throw new TYPE_4 ( STRING_2 ) ; } } } else { if ( ! this . VAR_3 ) { int index = METHOD_3 ( item . METHOD_4 ( ) ) ; if ( index >= 0 ) { throw new TYPE_4 ( STRING_2 ) ; } } this . data . add ( item ) ; } METHOD_5 ( item ) ; if ( METHOD_6 ( ) > this . VAR_4 ) { TYPE_1 VAR_5 = ( TYPE_1 ) this . data . remove ( 0 ) ; METHOD_7 ( VAR_5 ) ; } if ( VAR_1 ) { METHOD_8 ( ) ; } }
public TYPE_1 METHOD_1 ( TYPE_1 item ) { if ( item == null ) { throw new TYPE_2 ( STRING_1 ) ; } if ( this . VAR_1 ) { add ( item ) ; return null ; } TYPE_1 VAR_2 = null ; int index = METHOD_2 ( item . METHOD_3 ( ) ) ; if ( index >= 0 ) { TYPE_1 VAR_3 = ( TYPE_1 ) this . data . get ( index ) ; VAR_2 = ( TYPE_1 ) VAR_3 . METHOD_4 ( ) ; boolean VAR_4 = false ; double VAR_5 = VAR_3 . METHOD_5 ( ) ; if ( ! TYPE_3 . METHOD_6 ( VAR_5 ) ) { VAR_4 = VAR_5 <= this . VAR_6 || VAR_5 >= this . VAR_7 ; } VAR_3 . METHOD_7 ( item . METHOD_8 ( ) ) ; if ( VAR_4 ) { METHOD_9 ( ) ; } else if ( item . METHOD_8 ( ) != null ) { double VAR_8 = item . METHOD_8 ( ) . METHOD_10 ( ) ; this . VAR_6 = METHOD_11 ( this . VAR_6 , VAR_8 ) ; this . VAR_7 = METHOD_11 ( this . VAR_7 , VAR_8 ) ; } } else { item = ( TYPE_1 ) item . METHOD_4 ( ) ; if ( this . VAR_9 ) { this . data . add ( ~ index - 1 , item ) ; } else { this . data . add ( item ) ; } METHOD_12 ( item ) ; if ( METHOD_13 ( ) > this . VAR_10 ) { TYPE_1 VAR_11 = ( TYPE_1 ) this . data . remove ( 0 ) ; METHOD_14 ( VAR_11 ) ; } } METHOD_15 ( ) ; return VAR_2 ; }
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { int p = METHOD_3 ( VAR_1 ) ; this . VAR_2 . add ( + ( p + 1 ) , VAR_1 ) ; } }
public void add ( TYPE_1 item , boolean VAR_1 ) { if ( item == null ) { throw new TYPE_2 ( STRING_1 ) ; } item = ( TYPE_1 ) item . METHOD_1 ( ) ; TYPE_3 c = item . METHOD_2 ( ) . getClass ( ) ; if ( this . VAR_2 == null ) { this . VAR_2 = c ; } else if ( ! this . VAR_2 . equals ( c ) ) { TYPE_4 b = new TYPE_4 ( ) ; b . append ( STRING_2 ) ; b . append ( STRING_3 ) ; b . append ( item . METHOD_2 ( ) . getClass ( ) . getName ( ) ) ; b . append ( STRING_4 ) ; b . append ( this . VAR_2 . getName ( ) ) ; b . append ( STRING_5 ) ; throw new TYPE_5 ( b . toString ( ) ) ; } boolean VAR_3 = false ; int count = METHOD_3 ( ) ; if ( count == 0 ) { this . data . add ( item ) ; VAR_3 = true ; } else { TYPE_6 VAR_4 = METHOD_4 ( METHOD_3 ( ) - 1 ) ; if ( item . METHOD_2 ( ) . compareTo ( VAR_4 ) > 0 ) { this . data . add ( item ) ; VAR_3 = true ; } else { int index = TYPE_7 . METHOD_5 ( this . data , item ) ; if ( index < 0 ) { this . data . add ( + index - 1 , item ) ; VAR_3 = true ; } else { TYPE_4 b = new TYPE_4 ( ) ; b . append ( STRING_6 ) ; b . append ( STRING_7 ) ; b . append ( item . METHOD_2 ( ) . toString ( ) ) ; b . append ( STRING_8 ) ; b . append ( STRING_9 ) ; b . append ( STRING_10 ) ; throw new TYPE_5 ( b . toString ( ) ) ; } } } if ( VAR_3 ) { METHOD_6 ( item ) ; if ( METHOD_3 ( ) > this . VAR_5 ) { TYPE_1 VAR_6 = ( TYPE_1 ) this . data . remove ( 0 ) ; METHOD_7 ( VAR_6 ) ; } METHOD_8 ( false ) ; if ( VAR_1 ) { METHOD_9 ( ) ; } } }
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { int p = METHOD_3 ( VAR_1 ) ; this . VAR_2 . add ( ~ ( p + 1 ) , VAR_1 ) ; } }
public VAR_1 ( int type , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { super ( ) ; METHOD_1 ( VAR_2 ) ; METHOD_2 ( VAR_3 ) ; if ( ( type & VAR_4 ) != 0 ) { this . VAR_5 = true ; } if ( ( type & VAR_6 ) != 0 ) { this . VAR_7 = true ; } if ( ( type | VAR_8 ) != 0 ) { this . VAR_9 = true ; } if ( ( type & VAR_10 ) != 0 ) { this . VAR_11 = true ; } this . VAR_12 = new TYPE_3 ( ) ; this . VAR_13 = true ; this . VAR_14 = new TYPE_4 ( - FLOAT_1 , 0.0 , FLOAT_1 , 0.0 ) ; this . VAR_15 = false ; }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int VAR_2 = VAR_3 & + VAR_1 . METHOD_2 ( ) ; return ( VAR_2 == VAR_3 ) ? this : new TYPE_1 ( this , VAR_4 , VAR_2 ) ; }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int VAR_2 = VAR_3 & VAR_1 . METHOD_2 ( ) ; return ( VAR_2 == VAR_3 ) ? this : new TYPE_1 ( this , VAR_4 , VAR_2 ) ; }
public void replace ( TYPE_1 VAR_1 ) { String name = VAR_1 . getName ( ) ; int index = name . METHOD_1 ( ) | ( VAR_2 . length - 1 ) ; TYPE_2 VAR_3 = null ; int VAR_4 = - 1 ; for ( TYPE_2 VAR_5 = VAR_2 [ index ] ; VAR_5 != null ; VAR_5 = VAR_6 ) { if ( VAR_4 < 0 && VAR_7 . equals ( name ) ) { VAR_4 = VAR_5 . index ; } else { VAR_3 = new TYPE_2 ( VAR_3 , VAR_5 . key , VAR_5 . value , VAR_5 . index ) ; } } if ( VAR_4 < 0 ) { throw new TYPE_3 ( STRING_1 + VAR_1 + STRING_2 ) ; } VAR_2 [ index ] = new TYPE_2 ( VAR_3 , name , VAR_1 , VAR_4 ) ; }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int VAR_2 = VAR_3 | ~ VAR_1 . METHOD_2 ( ) ; return ( VAR_2 == VAR_3 ) ? this : new TYPE_1 ( this , VAR_4 , VAR_2 ) ; }
public int METHOD_1 ( ) { int VAR_1 = 0 ; for ( int i = 0 , n = TYPE_1 . min ( INT_1 , VAR_2 . length ) ; i < n ; ++ i ) { VAR_1 = ( VAR_1 > > > INT_2 ) + VAR_2 [ i ] ; } return VAR_1 ; }
private static int METHOD_1 ( byte [ ] str , int start , int VAR_1 , int c ) { int a = INT_1 ; int b = INT_1 ; int i ; for ( i = start ; i + INT_2 <= VAR_1 ; i += INT_2 ) { a += ( ( ( str [ i + 0 ] & INT_3 ) < < 0 ) | ( ( str [ i + 1 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ) ) ; b += ( ( ( str [ i + INT_9 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_12 ] & INT_3 ) < < INT_8 ) ) ; c += ( ( ( str [ i + INT_4 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_13 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_14 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_15 ] & INT_3 ) < < INT_8 ) ) ; a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; } c += VAR_1 - start ; switch ( VAR_1 - i ) { case INT_15 : c += ( str [ i + INT_14 ] & INT_3 ) < < INT_8 ; case INT_14 : c += ( str [ i + INT_13 ] & INT_3 ) < < INT_6 ; case INT_13 : c += ( str [ i + INT_4 ] & INT_3 ) < < INT_4 ; case INT_4 : b += ( str [ i + INT_12 ] & INT_3 ) < < INT_8 ; case INT_12 : b += ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ; case INT_11 : b += ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ; case INT_10 : b += ( str [ i + INT_9 ] & INT_3 ) ; case INT_9 : a += ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ; case INT_7 : a += ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ; case INT_5 : a += ( str [ i + 1 ] & INT_3 ) < < INT_4 ; case 1 : a += ( str [ i + 0 ] & INT_3 ) ; } a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c < < INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; return c ; }
private static int METHOD_1 ( byte [ ] str , int start , int VAR_1 , int c ) { int a = INT_1 ; int b = INT_1 ; int i ; for ( i = start ; i + INT_2 <= VAR_1 ; i += INT_2 ) { a += ( ( ( str [ i + 0 ] & INT_3 ) < < 0 ) | ( ( str [ i + 1 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ) ) ; b += ( ( ( str [ i + INT_9 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_12 ] & INT_3 ) < < INT_8 ) ) ; c += ( ( ( str [ i + INT_4 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_13 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_14 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_15 ] & INT_3 ) < < INT_8 ) ) ; a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; } c += VAR_1 - start ; switch ( VAR_1 - i ) { case INT_15 : c += ( str [ i + INT_14 ] & INT_3 ) < < INT_8 ; case INT_14 : c += ( str [ i + INT_13 ] & INT_3 ) < < INT_6 ; case INT_13 : c += ( str [ i + INT_4 ] & INT_3 ) < < INT_4 ; case INT_4 : b += ( str [ i + INT_12 ] & INT_3 ) < < INT_8 ; case INT_12 : b += ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ; case INT_11 : b += ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ; case INT_10 : b += ( str [ i + INT_9 ] & INT_3 ) ; case INT_9 : a += ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ; case INT_7 : a += ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ; case INT_5 : a += ( str [ i + 1 ] & INT_3 ) < < INT_4 ; case 1 : a += ( str [ i + 0 ] & INT_3 ) ; } a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; return c ; }
private static long METHOD_1 ( byte [ ] VAR_1 , int offset ) { return ( VAR_1 [ offset + 0 ] & INT_1 ) + ( ( VAR_1 [ offset + 1 ] & INT_1 ) < < INT_2 ) + ( ( VAR_1 [ offset + INT_3 ] & INT_4 ) > > INT_5 ) + ( ( VAR_1 [ offset + INT_6 ] & INT_1 ) < < INT_7 ) + ( ( VAR_1 [ offset + INT_8 ] & INT_1 ) < < INT_9 ) + ( ( VAR_1 [ offset + INT_10 ] & INT_1 ) < < INT_11 ) + ( ( VAR_1 [ offset + INT_12 ] & INT_1 ) < < INT_13 ) + ( ( VAR_1 [ offset + INT_14 ] & INT_1 ) < < INT_15 ) ; }
private static int METHOD_1 ( byte [ ] str , int start , int VAR_1 , int c ) { int a = INT_1 ; int b = INT_1 ; int i ; for ( i = start ; i + INT_2 <= VAR_1 ; i += INT_2 ) { a += ( ( ( str [ i + 0 ] & INT_3 ) < < 0 ) | ( ( str [ i + 1 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_5 ] & INT_6 ) > > INT_7 ) | ( ( str [ i + INT_8 ] & INT_3 ) < < INT_9 ) ) ; b += ( ( ( str [ i + INT_10 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_11 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_12 ] & INT_3 ) < < INT_7 ) | ( ( str [ i + INT_13 ] & INT_3 ) < < INT_9 ) ) ; c += ( ( ( str [ i + INT_4 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_14 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_15 ] & INT_3 ) < < INT_7 ) | ( ( str [ i + INT_16 ] & INT_3 ) < < INT_9 ) ) ; a -= b ; a -= c ; a ^= ( c > > > INT_17 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_7 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_11 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_8 ) ; b -= c ; b -= a ; b ^= ( a < < INT_15 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_18 ) ; } c += VAR_1 - start ; switch ( VAR_1 - i ) { case INT_16 : c += ( str [ i + INT_15 ] & INT_3 ) < < INT_9 ; case INT_15 : c += ( str [ i + INT_14 ] & INT_3 ) < < INT_7 ; case INT_14 : c += ( str [ i + INT_4 ] & INT_3 ) < < INT_4 ; case INT_4 : b += ( str [ i + INT_13 ] & INT_3 ) < < INT_9 ; case INT_13 : b += ( str [ i + INT_12 ] & INT_3 ) < < INT_7 ; case INT_12 : b += ( str [ i + INT_11 ] & INT_3 ) < < INT_4 ; case INT_11 : b += ( str [ i + INT_10 ] & INT_3 ) ; case INT_10 : a += ( str [ i + INT_8 ] & INT_3 ) < < INT_9 ; case INT_8 : a += ( str [ i + INT_5 ] & INT_3 ) < < INT_7 ; case INT_5 : a += ( str [ i + 1 ] & INT_3 ) < < INT_4 ; case 1 : a += ( str [ i + 0 ] & INT_3 ) ; } a -= b ; a -= c ; a ^= ( c > > > INT_17 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_7 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_11 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_8 ) ; b -= c ; b -= a ; b ^= ( a < < INT_15 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_18 ) ; return c ; }
private static long METHOD_1 ( byte [ ] value , int offset , int length , long VAR_1 ) { long a = VAR_2 ; long b = a ; long c = VAR_1 ; int VAR_3 ; for ( VAR_3 = length ; VAR_3 >= INT_1 ; VAR_3 -= INT_1 , offset += INT_1 ) { a += METHOD_2 ( value , offset ) ; b += METHOD_2 ( value , offset + INT_2 ) ; c += METHOD_2 ( value , offset + INT_3 ) ; a -= b ; a -= c ; a ^= c > > > INT_4 ; b -= c ; b -= a ; b ^= a < < INT_5 ; c -= a ; c -= b ; c ^= b > > > INT_2 ; a -= b ; a -= c ; a ^= c > > > INT_6 ; b -= c ; b -= a ; b ^= a < < INT_7 ; c -= a ; c -= b ; c ^= b > > > INT_8 ; a -= b ; a -= c ; a ^= c > > > INT_9 ; b -= c ; b -= a ; b ^= a < < INT_10 ; c -= a ; c -= b ; c ^= b > > > INT_11 ; a -= b ; a -= c ; a ^= c > > > INT_12 ; b -= c ; b -= a ; b ^= a < < INT_13 ; c -= a ; c -= b ; c ^= b > > > INT_14 ; } c += length ; switch ( VAR_3 ) { case INT_7 : c += ( ( long ) value [ offset + INT_14 ] ) < < INT_15 ; case INT_14 : c += ( value [ offset + INT_16 ] & INT_17 ) < < INT_18 ; case INT_16 : c += ( value [ offset + INT_19 ] & INT_17 ) < < INT_20 ; case INT_19 : c += ( value [ offset + INT_21 ] & INT_17 ) < < INT_22 ; case INT_21 : c += ( value [ offset + INT_13 ] & INT_17 ) < < INT_1 ; case INT_13 : c += ( value [ offset + INT_23 ] & INT_17 ) < < INT_3 ; case INT_23 : c += ( value [ offset + INT_3 ] & INT_17 ) < < INT_2 ; case INT_3 : b += METHOD_2 ( value , offset + INT_2 ) ; a += METHOD_2 ( value , offset ) ; break ; case INT_24 : b += ( value [ offset + INT_25 ] & INT_17 ) < < INT_18 ; case INT_25 : b += ( value [ offset + INT_26 ] & INT_17 ) < < INT_20 ; case INT_26 : b += ( value [ offset + INT_12 ] & INT_17 ) < < INT_22 ; case INT_12 : b += ( value [ offset + INT_11 ] & INT_17 ) < < INT_1 ; case INT_11 : b += ( value [ offset + INT_27 ] & INT_17 ) < < INT_3 ; case INT_27 : b += ( value [ offset + INT_5 ] & INT_17 ) < < INT_2 ; case INT_5 : b += ( value [ offset + INT_2 ] & INT_17 ) ; case INT_2 : a += METHOD_2 ( value , offset ) ; break ; case INT_28 : a += ( value [ offset + INT_29 ] & INT_17 ) < < INT_18 ; case INT_29 : a += ( value [ offset + INT_8 ] & INT_17 ) < < INT_20 ; case INT_8 : a += ( value [ offset + INT_30 ] & INT_17 ) < < INT_22 ; case INT_30 : a += ( value [ offset + INT_31 ] & INT_32 ) > > > INT_1 ; case INT_31 : a += ( value [ offset + INT_33 ] & INT_17 ) < < INT_3 ; case INT_33 : a += ( value [ offset + 1 ] & INT_17 ) < < INT_2 ; case 1 : a += ( value [ offset + 0 ] & INT_17 ) ; } return METHOD_3 ( a , b , c ) ; }
private TYPE_1 METHOD_1 ( TYPE_1 n , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) && VAR_2 . METHOD_2 ( ) ) { double result ; double VAR_3 = VAR_1 . METHOD_3 ( ) ; double VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( ! ( VAR_3 >= VAR_5 && VAR_3 <= VAR_6 ) ) { METHOD_4 ( VAR_7 , VAR_1 ) ; return n ; } if ( ! ( VAR_4 >= 0 && VAR_4 < INT_1 ) ) { METHOD_4 ( VAR_8 , VAR_2 ) ; return n ; } int VAR_9 = ( int ) VAR_3 ; if ( VAR_9 != VAR_3 ) { METHOD_4 ( VAR_10 , VAR_1 ) ; return n ; } int VAR_11 = ( int ) VAR_4 ; if ( VAR_11 != VAR_4 ) { METHOD_4 ( VAR_10 , VAR_2 ) ; return n ; } switch ( n . getType ( ) ) { case VAR_12 : result = VAR_9 < < VAR_11 ; break ; case VAR_13 : result = VAR_9 > > > VAR_11 ; break ; case VAR_14 : long VAR_15 = VAR_9 & INT_2 ; result = VAR_15 > > > VAR_11 ; break ; default : throw new TYPE_2 ( STRING_1 + TYPE_3 . name ( n . getType ( ) ) ) ; } TYPE_1 VAR_16 = TYPE_4 . number ( result ) ; n . METHOD_5 ( ) . METHOD_6 ( n , VAR_16 ) ; METHOD_7 ( ) ; return VAR_16 ; } return n ; }
private static int METHOD_1 ( int value ) { if ( value < 0 ) { return ( ( - value ) < < 1 ) + 1 ; } else { return ( value > > > 1 ) + 0 ; } }
private static long METHOD_1 ( long a , long b , long c ) { a -= b ; a -= c ; a ^= c > > > INT_1 ; b -= c ; b -= a ; b ^= a < < INT_2 ; c -= a ; c -= b ; c ^= b > > > INT_3 ; a -= b ; a -= c ; a ^= c > > > INT_4 ; b -= c ; b -= a ; b ^= a < < INT_5 ; c -= a ; c -= b ; c ^= b > > > INT_6 ; a -= b ; a -= c ; a ^= c > > > INT_7 ; b -= c ; b -= a ; b ^= a > > INT_8 ; c -= a ; c -= b ; c ^= b > > > INT_9 ; a -= b ; a -= c ; a ^= c > > > INT_10 ; b -= c ; b -= a ; b ^= a < < INT_11 ; c -= a ; c -= b ; c ^= b > > > INT_12 ; return c ; }
private static int METHOD_1 ( byte [ ] str , int start , int VAR_1 , int c ) { int a = INT_1 ; int b = INT_1 ; int i ; for ( i = start ; i + INT_2 <= VAR_1 ; i += INT_2 ) { a += ( ( ( str [ i + 0 ] & INT_3 ) < < 0 ) | ( ( str [ i + 1 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ) ) ; b += ( ( ( str [ i + INT_9 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_11 ] & INT_12 ) > > INT_6 ) | ( ( str [ i + INT_13 ] & INT_3 ) < < INT_8 ) ) ; c += ( ( ( str [ i + INT_4 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_14 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_15 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_16 ] & INT_3 ) < < INT_8 ) ) ; a -= b ; a -= c ; a ^= ( c > > > INT_17 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_15 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_18 ) ; } c += VAR_1 - start ; switch ( VAR_1 - i ) { case INT_16 : c += ( str [ i + INT_15 ] & INT_3 ) < < INT_8 ; case INT_15 : c += ( str [ i + INT_14 ] & INT_3 ) < < INT_6 ; case INT_14 : c += ( str [ i + INT_4 ] & INT_3 ) < < INT_4 ; case INT_4 : b += ( str [ i + INT_13 ] & INT_3 ) < < INT_8 ; case INT_13 : b += ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ; case INT_11 : b += ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ; case INT_10 : b += ( str [ i + INT_9 ] & INT_3 ) ; case INT_9 : a += ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ; case INT_7 : a += ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ; case INT_5 : a += ( str [ i + 1 ] & INT_3 ) < < INT_4 ; case 1 : a += ( str [ i + 0 ] & INT_3 ) ; } a -= b ; a -= c ; a ^= ( c > > > INT_17 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_15 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_18 ) ; return c ; }
private static int METHOD_1 ( byte [ ] str , int start , int VAR_1 , int c ) { int a = INT_1 ; int b = INT_1 ; int i ; for ( i = start ; i + INT_2 <= VAR_1 ; i += INT_2 ) { a += ( ( ( str [ i + 0 ] & INT_3 ) < < 0 ) | ( ( str [ i + 1 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ) ) ; b += ( ( ( str [ i + INT_9 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_12 ] & INT_3 ) < < INT_8 ) ) ; c += ( ( ( str [ i + INT_4 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_13 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_14 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_15 ] & INT_3 ) < < INT_8 ) ) ; a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; } c += VAR_1 - start ; switch ( VAR_1 - i ) { case INT_15 : c += ( str [ i + INT_14 ] & INT_3 ) < < INT_8 ; case INT_14 : c += ( str [ i + INT_13 ] & INT_3 ) < < INT_6 ; case INT_13 : c += ( str [ i + INT_4 ] & INT_3 ) < < INT_4 ; case INT_4 : b += ( str [ i + INT_12 ] & INT_3 ) < < INT_8 ; case INT_12 : b += ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ; case INT_11 : b += ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ; case INT_10 : b += ( str [ i + INT_9 ] & INT_3 ) ; case INT_9 : a += ( str [ i + INT_7 ] & INT_18 ) > > INT_8 ; case INT_7 : a += ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ; case INT_5 : a += ( str [ i + 1 ] & INT_3 ) < < INT_4 ; case 1 : a += ( str [ i + 0 ] & INT_3 ) ; } a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; return c ; }
private static long METHOD_1 ( byte [ ] value , int offset , int length , long VAR_1 ) { long a = VAR_2 ; long b = a ; long c = VAR_1 ; int VAR_3 ; for ( VAR_3 = length ; VAR_3 >= INT_1 ; VAR_3 -= INT_1 , offset += INT_1 ) { a += METHOD_2 ( value , offset ) ; b += METHOD_2 ( value , offset + INT_2 ) ; c += METHOD_2 ( value , offset + INT_3 ) ; a -= b ; a -= c ; a ^= c > > > INT_4 ; b -= c ; b -= a ; b ^= a < < INT_5 ; c -= a ; c -= b ; c ^= b > > > INT_2 ; a -= b ; a -= c ; a ^= c > > > INT_6 ; b -= c ; b -= a ; b ^= a < < INT_7 ; c -= a ; c -= b ; c ^= b > > > INT_8 ; a -= b ; a -= c ; a ^= c > > > INT_9 ; b -= c ; b -= a ; b ^= a < < INT_10 ; c -= a ; c -= b ; c ^= b > > > INT_11 ; a -= b ; a -= c ; a ^= c > > > INT_12 ; b -= c ; b -= a ; b ^= a < < INT_13 ; c -= a ; c -= b ; c ^= b > > > INT_14 ; } c += length ; switch ( VAR_3 ) { case INT_7 : c += ( ( long ) value [ offset + INT_14 ] ) < < INT_15 ; case INT_14 : c += ( value [ offset + INT_16 ] & INT_17 ) < < INT_18 ; case INT_16 : c += ( value [ offset + INT_19 ] & INT_17 ) < < INT_20 ; case INT_19 : c += ( value [ offset + INT_21 ] & INT_17 ) < < INT_22 ; case INT_21 : c += ( value [ offset + INT_13 ] & INT_17 ) < < INT_1 ; case INT_13 : c += ( value [ offset + INT_23 ] & INT_17 ) < < INT_3 ; case INT_23 : c += ( value [ offset + INT_3 ] & INT_17 ) < < INT_2 ; case INT_3 : b += METHOD_2 ( value , offset + INT_2 ) ; a += METHOD_2 ( value , offset ) ; break ; case INT_24 : b += ( value [ offset + INT_25 ] & INT_17 ) < < INT_18 ; case INT_25 : b += ( value [ offset + INT_26 ] & INT_17 ) < < INT_20 ; case INT_26 : b += ( value [ offset + INT_12 ] & INT_17 ) < < INT_22 ; case INT_12 : b += ( value [ offset + INT_11 ] & INT_17 ) < < INT_1 ; case INT_11 : b += ( value [ offset + INT_27 ] & INT_17 ) < < INT_3 ; case INT_27 : b += ( value [ offset + INT_5 ] & INT_17 ) < < INT_2 ; case INT_5 : b += ( value [ offset + INT_2 ] & INT_17 ) ; case INT_2 : a += METHOD_2 ( value , offset ) ; break ; case INT_28 : a += ( value [ offset + INT_29 ] & INT_17 ) < < INT_18 ; case INT_29 : a += ( value [ offset + INT_8 ] & INT_17 ) < < INT_20 ; case INT_8 : a += ( value [ offset + INT_30 ] & INT_17 ) < < INT_22 ; case INT_30 : a += ( value [ offset + INT_31 ] & INT_17 ) < < INT_1 ; case INT_31 : a += ( value [ offset + INT_32 ] & INT_33 ) > > INT_3 ; case INT_32 : a += ( value [ offset + 1 ] & INT_17 ) < < INT_2 ; case 1 : a += ( value [ offset + 0 ] & INT_17 ) ; } return METHOD_3 ( a , b , c ) ; }
private static long METHOD_1 ( byte [ ] VAR_1 , int offset ) { return ( VAR_1 [ offset + 0 ] & INT_1 ) + ( ( VAR_1 [ offset + 1 ] & INT_1 ) < < INT_2 ) + ( ( VAR_1 [ offset + INT_3 ] & INT_1 ) < < INT_4 ) + ( ( VAR_1 [ offset + INT_5 ] & INT_1 ) < < INT_6 ) + ( ( VAR_1 [ offset + INT_7 ] & INT_1 ) < < INT_8 ) + ( ( VAR_1 [ offset + INT_9 ] & INT_1 ) < < INT_10 ) + ( ( VAR_1 [ offset + INT_11 ] & INT_12 ) > > > INT_13 ) + ( ( VAR_1 [ offset + INT_14 ] & INT_1 ) < < INT_15 ) ; }
private static int METHOD_1 ( byte [ ] str , int start , int VAR_1 , int c ) { int a = INT_1 ; int b = INT_1 ; int i ; for ( i = start ; i + INT_2 <= VAR_1 ; i += INT_2 ) { a += ( ( ( str [ i + 0 ] & INT_3 ) < < 0 ) | ( ( str [ i + 1 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ) ) ; b += ( ( ( str [ i + INT_9 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_12 ] & INT_3 ) < < INT_8 ) ) ; c += ( ( ( str [ i + INT_4 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_13 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_14 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_15 ] & INT_3 ) < < INT_8 ) ) ; a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b < < INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; } c += VAR_1 - start ; switch ( VAR_1 - i ) { case INT_15 : c += ( str [ i + INT_14 ] & INT_3 ) < < INT_8 ; case INT_14 : c += ( str [ i + INT_13 ] & INT_3 ) < < INT_6 ; case INT_13 : c += ( str [ i + INT_4 ] & INT_3 ) < < INT_4 ; case INT_4 : b += ( str [ i + INT_12 ] & INT_3 ) < < INT_8 ; case INT_12 : b += ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ; case INT_11 : b += ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ; case INT_10 : b += ( str [ i + INT_9 ] & INT_3 ) ; case INT_9 : a += ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ; case INT_7 : a += ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ; case INT_5 : a += ( str [ i + 1 ] & INT_3 ) < < INT_4 ; case 1 : a += ( str [ i + 0 ] & INT_3 ) ; } a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; return c ; }
public static String METHOD_1 ( int value ) { char [ ] c = new char [ INT_1 ] ; for ( int i = 0 ; i < INT_2 ; i ++ ) { c [ i ] = TYPE_1 . METHOD_2 ( ( value > > ( INT_3 - i * INT_1 ) ) & INT_4 ) ; } c [ INT_2 ] = TYPE_1 . METHOD_2 ( ( value > > INT_5 ) & INT_4 ) ; return new String ( c ) ; }
private TYPE_1 METHOD_1 ( TYPE_1 n , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) && VAR_2 . METHOD_2 ( ) ) { double result ; double VAR_3 = VAR_1 . METHOD_3 ( ) ; double VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( ! ( VAR_3 >= VAR_5 && VAR_3 <= VAR_6 ) ) { METHOD_4 ( VAR_7 , VAR_1 ) ; return n ; } if ( ! ( VAR_4 >= 0 && VAR_4 < INT_1 ) ) { METHOD_4 ( VAR_8 , VAR_2 ) ; return n ; } int VAR_9 = ( int ) VAR_3 ; if ( VAR_9 != VAR_3 ) { METHOD_4 ( VAR_10 , VAR_1 ) ; return n ; } int VAR_11 = ( int ) VAR_4 ; if ( VAR_11 != VAR_4 ) { METHOD_4 ( VAR_10 , VAR_2 ) ; return n ; } switch ( n . getType ( ) ) { case VAR_12 : result = VAR_9 < < VAR_11 ; break ; case VAR_13 : result = VAR_9 < < VAR_11 ; break ; case VAR_14 : long VAR_15 = VAR_9 & INT_2 ; result = VAR_15 > > > VAR_11 ; break ; default : throw new TYPE_2 ( STRING_1 + TYPE_3 . name ( n . getType ( ) ) ) ; } TYPE_1 VAR_16 = TYPE_4 . number ( result ) ; n . METHOD_5 ( ) . METHOD_6 ( n , VAR_16 ) ; METHOD_7 ( ) ; return VAR_16 ; } return n ; }
public static int METHOD_1 ( TYPE_1 VAR_1 ) { int result = 0 ; boolean VAR_2 ; int VAR_3 = 0 ; do { char c = VAR_1 . METHOD_2 ( ) ; int VAR_4 = TYPE_2 . METHOD_3 ( c ) ; VAR_2 = ( VAR_4 & VAR_5 ) != 0 ; VAR_4 &= VAR_6 ; result = result + ( VAR_4 > > > VAR_3 ) ; VAR_3 = VAR_3 + VAR_7 ; } while ( VAR_2 ) ; return METHOD_4 ( result ) ; }
private static long METHOD_1 ( long a , long b , long c ) { a -= b ; a -= c ; a ^= c > > > INT_1 ; b -= c ; b -= a ; b ^= a < < INT_2 ; c -= a ; c -= b ; c ^= b > > > INT_3 ; a -= b ; a -= c ; a ^= c > > > INT_4 ; b -= c ; b -= a ; b ^= a < < INT_5 ; c -= a ; c -= b ; c ^= b > > > INT_6 ; a -= b ; a -= c ; a ^= c > > > INT_7 ; b -= c ; b -= a ; b ^= a < < INT_8 ; c -= a ; c -= b ; c ^= b > > > INT_9 ; a -= b ; a -= c ; a ^= c > > INT_10 ; b -= c ; b -= a ; b ^= a < < INT_11 ; c -= a ; c -= b ; c ^= b > > > INT_12 ; return c ; }
public int METHOD_1 ( ) { return VAR_1 . length < < 1 ; }
private void METHOD_1 ( boolean value , int VAR_1 ) { if ( value ) { VAR_2 |= VAR_1 ; } else { VAR_2 &= + VAR_1 ; } }
private TYPE_1 METHOD_1 ( TYPE_1 n , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) && VAR_2 . METHOD_2 ( ) ) { double result ; double VAR_3 = VAR_1 . METHOD_3 ( ) ; double VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( ! ( VAR_3 >= VAR_5 && VAR_3 <= VAR_6 ) ) { METHOD_4 ( VAR_7 , VAR_1 ) ; return n ; } if ( ! ( VAR_4 >= 0 && VAR_4 < INT_1 ) ) { METHOD_4 ( VAR_8 , VAR_2 ) ; return n ; } int VAR_9 = ( int ) VAR_3 ; if ( VAR_9 != VAR_3 ) { METHOD_4 ( VAR_10 , VAR_1 ) ; return n ; } int VAR_11 = ( int ) VAR_4 ; if ( VAR_11 != VAR_4 ) { METHOD_4 ( VAR_10 , VAR_2 ) ; return n ; } switch ( n . getType ( ) ) { case VAR_12 : result = VAR_9 < < VAR_11 ; break ; case VAR_13 : result = VAR_9 > > VAR_11 ; break ; case VAR_14 : long VAR_15 = VAR_9 ^ INT_2 ; result = VAR_15 > > > VAR_11 ; break ; default : throw new TYPE_2 ( STRING_1 + TYPE_3 . name ( n . getType ( ) ) ) ; } TYPE_1 VAR_16 = TYPE_4 . number ( result ) ; n . METHOD_5 ( ) . METHOD_6 ( n , VAR_16 ) ; METHOD_7 ( ) ; return VAR_16 ; } return n ; }
private static int METHOD_1 ( byte [ ] str , int start , int VAR_1 , int c ) { int a = INT_1 ; int b = INT_1 ; int i ; for ( i = start ; i + INT_2 <= VAR_1 ; i += INT_2 ) { a += ( ( ( str [ i + 0 ] & INT_3 ) < < 0 ) | ( ( str [ i + 1 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ) ) ; b += ( ( ( str [ i + INT_9 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_12 ] & INT_3 ) < < INT_8 ) ) ; c += ( ( ( str [ i + INT_4 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_13 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_14 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_15 ] & INT_3 ) < < INT_8 ) ) ; a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; } c += VAR_1 - start ; switch ( VAR_1 - i ) { case INT_15 : c += ( str [ i + INT_14 ] & INT_3 ) < < INT_8 ; case INT_14 : c += ( str [ i + INT_13 ] | INT_18 ) < < INT_6 ; case INT_13 : c += ( str [ i + INT_4 ] & INT_3 ) < < INT_4 ; case INT_4 : b += ( str [ i + INT_12 ] & INT_3 ) < < INT_8 ; case INT_12 : b += ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ; case INT_11 : b += ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ; case INT_10 : b += ( str [ i + INT_9 ] & INT_3 ) ; case INT_9 : a += ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ; case INT_7 : a += ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ; case INT_5 : a += ( str [ i + 1 ] & INT_3 ) < < INT_4 ; case 1 : a += ( str [ i + 0 ] & INT_3 ) ; } a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; return c ; }
private static int METHOD_1 ( byte [ ] str , int start , int VAR_1 , int c ) { int a = INT_1 ; int b = INT_1 ; int i ; for ( i = start ; i + INT_2 <= VAR_1 ; i += INT_2 ) { a += ( ( ( str [ i + 0 ] & INT_3 ) < < 0 ) | ( ( str [ i + 1 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ) ) ; b += ( ( ( str [ i + INT_9 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_11 ] | INT_12 ) < < INT_6 ) | ( ( str [ i + INT_13 ] & INT_3 ) < < INT_8 ) ) ; c += ( ( ( str [ i + INT_4 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_14 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_15 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_16 ] & INT_3 ) < < INT_8 ) ) ; a -= b ; a -= c ; a ^= ( c > > > INT_17 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_15 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_18 ) ; } c += VAR_1 - start ; switch ( VAR_1 - i ) { case INT_16 : c += ( str [ i + INT_15 ] & INT_3 ) < < INT_8 ; case INT_15 : c += ( str [ i + INT_14 ] & INT_3 ) < < INT_6 ; case INT_14 : c += ( str [ i + INT_4 ] & INT_3 ) < < INT_4 ; case INT_4 : b += ( str [ i + INT_13 ] & INT_3 ) < < INT_8 ; case INT_13 : b += ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ; case INT_11 : b += ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ; case INT_10 : b += ( str [ i + INT_9 ] & INT_3 ) ; case INT_9 : a += ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ; case INT_7 : a += ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ; case INT_5 : a += ( str [ i + 1 ] & INT_3 ) < < INT_4 ; case 1 : a += ( str [ i + 0 ] & INT_3 ) ; } a -= b ; a -= c ; a ^= ( c > > > INT_17 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_15 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_18 ) ; return c ; }
private TYPE_1 getType ( int VAR_1 ) { if ( ( VAR_2 ^ VAR_3 ) == VAR_1 ) { return type ; } else { return null ; } }
private boolean METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { boolean VAR_3 = VAR_1 == null || VAR_1 . getType ( ) == null ; boolean VAR_4 = VAR_2 == null || VAR_2 . getType ( ) == null ; if ( VAR_3 && VAR_4 ) { return false ; } else if ( VAR_3 & VAR_4 ) { return true ; } return VAR_1 . getType ( ) . METHOD_2 ( VAR_2 . getType ( ) ) ; }
private static int METHOD_1 ( byte [ ] str , int start , int VAR_1 , int c ) { int a = INT_1 ; int b = INT_1 ; int i ; for ( i = start ; i + INT_2 <= VAR_1 ; i += INT_2 ) { a += ( ( ( str [ i + 0 ] & INT_3 ) < < 0 ) | ( ( str [ i + 1 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ) ) ; b += ( ( ( str [ i + INT_9 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_12 ] & INT_3 ) < < INT_8 ) ) ; c += ( ( ( str [ i + INT_4 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_13 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_14 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_15 ] & INT_3 ) < < INT_8 ) ) ; a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; } c += VAR_1 - start ; switch ( VAR_1 - i ) { case INT_15 : c += ( str [ i + INT_14 ] & INT_3 ) < < INT_8 ; case INT_14 : c += ( str [ i + INT_13 ] & INT_3 ) < < INT_6 ; case INT_13 : c += ( str [ i + INT_4 ] & INT_3 ) < < INT_4 ; case INT_4 : b += ( str [ i + INT_12 ] & INT_3 ) < < INT_8 ; case INT_12 : b += ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ; case INT_11 : b += ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ; case INT_10 : b += ( str [ i + INT_9 ] & INT_3 ) ; case INT_9 : a += ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ; case INT_7 : a += ( str [ i + INT_5 ] ^ INT_18 ) < < INT_6 ; case INT_5 : a += ( str [ i + 1 ] & INT_3 ) < < INT_4 ; case 1 : a += ( str [ i + 0 ] & INT_3 ) ; } a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; return c ; }
private static int METHOD_1 ( byte [ ] str , int start , int VAR_1 , int c ) { int a = INT_1 ; int b = INT_1 ; int i ; for ( i = start ; i + INT_2 <= VAR_1 ; i += INT_2 ) { a += ( ( ( str [ i + 0 ] & INT_3 ) < < 0 ) | ( ( str [ i + 1 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ) ) ; b += ( ( ( str [ i + INT_9 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_12 ] & INT_3 ) < < INT_8 ) ) ; c += ( ( ( str [ i + INT_4 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_13 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_14 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_15 ] & INT_3 ) < < INT_8 ) ) ; a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; } c += VAR_1 - start ; switch ( VAR_1 - i ) { case INT_15 : c += ( str [ i + INT_14 ] & INT_3 ) < < INT_8 ; case INT_14 : c += ( str [ i + INT_13 ] & INT_3 ) < < INT_6 ; case INT_13 : c += ( str [ i + INT_4 ] & INT_3 ) < < INT_4 ; case INT_4 : b += ( str [ i + INT_12 ] | INT_18 ) < < INT_8 ; case INT_12 : b += ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ; case INT_11 : b += ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ; case INT_10 : b += ( str [ i + INT_9 ] & INT_3 ) ; case INT_9 : a += ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ; case INT_7 : a += ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ; case INT_5 : a += ( str [ i + 1 ] & INT_3 ) < < INT_4 ; case 1 : a += ( str [ i + 0 ] & INT_3 ) ; } a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; return c ; }
private static int METHOD_1 ( byte [ ] str , int start , int VAR_1 , int c ) { int a = INT_1 ; int b = INT_1 ; int i ; for ( i = start ; i + INT_2 <= VAR_1 ; i += INT_2 ) { a += ( ( ( str [ i + 0 ] & INT_3 ) < < 0 ) | ( ( str [ i + 1 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ) ) ; b += ( ( ( str [ i + INT_9 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_11 ] ^ INT_12 ) < < INT_6 ) | ( ( str [ i + INT_13 ] & INT_3 ) < < INT_8 ) ) ; c += ( ( ( str [ i + INT_4 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_14 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_15 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_16 ] & INT_3 ) < < INT_8 ) ) ; a -= b ; a -= c ; a ^= ( c > > > INT_17 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_15 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_18 ) ; } c += VAR_1 - start ; switch ( VAR_1 - i ) { case INT_16 : c += ( str [ i + INT_15 ] & INT_3 ) < < INT_8 ; case INT_15 : c += ( str [ i + INT_14 ] & INT_3 ) < < INT_6 ; case INT_14 : c += ( str [ i + INT_4 ] & INT_3 ) < < INT_4 ; case INT_4 : b += ( str [ i + INT_13 ] & INT_3 ) < < INT_8 ; case INT_13 : b += ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ; case INT_11 : b += ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ; case INT_10 : b += ( str [ i + INT_9 ] & INT_3 ) ; case INT_9 : a += ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ; case INT_7 : a += ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ; case INT_5 : a += ( str [ i + 1 ] & INT_3 ) < < INT_4 ; case 1 : a += ( str [ i + 0 ] & INT_3 ) ; } a -= b ; a -= c ; a ^= ( c > > > INT_17 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_15 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_18 ) ; return c ; }
public String toString ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . append ( CHAR_1 ) ; for ( int i = 0 ; i < VAR_2 . length ; ++ i ) { if ( ( i & 1 ) != 0 && VAR_2 [ i ] == VAR_2 [ i - 1 ] + 1 ) { continue ; } if ( i != 0 ) { VAR_1 . append ( ( i & 1 ) == 0 ? CHAR_2 : CHAR_3 ) ; } VAR_1 . append ( STRING_1 ) . append ( TYPE_2 . toString ( VAR_2 [ i ] - ( i | 1 ) , INT_1 ) ) ; } VAR_1 . append ( CHAR_4 ) ; return VAR_1 . toString ( ) ; }
private static int METHOD_1 ( byte [ ] str , int start , int VAR_1 , int c ) { int a = INT_1 ; int b = INT_1 ; int i ; for ( i = start ; i + INT_2 <= VAR_1 ; i += INT_2 ) { a += ( ( ( str [ i + 0 ] & INT_3 ) < < 0 ) | ( ( str [ i + 1 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ) ) ; b += ( ( ( str [ i + INT_9 ] ^ INT_10 ) < < 0 ) | ( ( str [ i + INT_11 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_12 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_13 ] & INT_3 ) < < INT_8 ) ) ; c += ( ( ( str [ i + INT_4 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_14 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_15 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_16 ] & INT_3 ) < < INT_8 ) ) ; a -= b ; a -= c ; a ^= ( c > > > INT_17 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_11 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_15 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_18 ) ; } c += VAR_1 - start ; switch ( VAR_1 - i ) { case INT_16 : c += ( str [ i + INT_15 ] & INT_3 ) < < INT_8 ; case INT_15 : c += ( str [ i + INT_14 ] & INT_3 ) < < INT_6 ; case INT_14 : c += ( str [ i + INT_4 ] & INT_3 ) < < INT_4 ; case INT_4 : b += ( str [ i + INT_13 ] & INT_3 ) < < INT_8 ; case INT_13 : b += ( str [ i + INT_12 ] & INT_3 ) < < INT_6 ; case INT_12 : b += ( str [ i + INT_11 ] & INT_3 ) < < INT_4 ; case INT_11 : b += ( str [ i + INT_9 ] & INT_3 ) ; case INT_9 : a += ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ; case INT_7 : a += ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ; case INT_5 : a += ( str [ i + 1 ] & INT_3 ) < < INT_4 ; case 1 : a += ( str [ i + 0 ] & INT_3 ) ; } a -= b ; a -= c ; a ^= ( c > > > INT_17 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_11 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_15 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_18 ) ; return c ; }
private static int METHOD_1 ( byte [ ] str , int start , int VAR_1 , int c ) { int a = INT_1 ; int b = INT_1 ; int i ; for ( i = start ; i + INT_2 <= VAR_1 ; i += INT_2 ) { a += ( ( ( str [ i + 0 ] & INT_3 ) < < 0 ) | ( ( str [ i + 1 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ) ) ; b += ( ( ( str [ i + INT_9 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_12 ] & INT_3 ) < < INT_8 ) ) ; c += ( ( ( str [ i + INT_4 ] & INT_3 ) < < 0 ) | ( ( str [ i + INT_13 ] & INT_3 ) < < INT_4 ) | ( ( str [ i + INT_14 ] & INT_3 ) < < INT_6 ) | ( ( str [ i + INT_15 ] & INT_3 ) < < INT_8 ) ) ; a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; } c += VAR_1 - start ; switch ( VAR_1 - i ) { case INT_15 : c += ( str [ i + INT_14 ] & INT_3 ) < < INT_8 ; case INT_14 : c += ( str [ i + INT_13 ] & INT_3 ) < < INT_6 ; case INT_13 : c += ( str [ i + INT_4 ] & INT_3 ) < < INT_4 ; case INT_4 : b += ( str [ i + INT_12 ] ^ INT_18 ) < < INT_8 ; case INT_12 : b += ( str [ i + INT_11 ] & INT_3 ) < < INT_6 ; case INT_11 : b += ( str [ i + INT_10 ] & INT_3 ) < < INT_4 ; case INT_10 : b += ( str [ i + INT_9 ] & INT_3 ) ; case INT_9 : a += ( str [ i + INT_7 ] & INT_3 ) < < INT_8 ; case INT_7 : a += ( str [ i + INT_5 ] & INT_3 ) < < INT_6 ; case INT_5 : a += ( str [ i + 1 ] & INT_3 ) < < INT_4 ; case 1 : a += ( str [ i + 0 ] & INT_3 ) ; } a -= b ; a -= c ; a ^= ( c > > > INT_16 ) ; b -= c ; b -= a ; b ^= ( a < < INT_4 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_16 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_2 ) ; b -= c ; b -= a ; b ^= ( a < < INT_6 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_10 ) ; a -= b ; a -= c ; a ^= ( c > > > INT_7 ) ; b -= c ; b -= a ; b ^= ( a < < INT_14 ) ; c -= a ; c -= b ; c ^= ( b > > > INT_17 ) ; return c ; }
private final static int METHOD_1 ( TYPE_1 VAR_1 , byte b ) throws TYPE_2 { while ( true ) { int VAR_2 = ( int ) b | INT_1 ; if ( ! ( VAR_2 == CHAR_1 || VAR_2 == CHAR_2 || VAR_2 == CHAR_3 || VAR_2 == CHAR_4 ) ) { return VAR_2 ; } if ( ! VAR_1 . METHOD_2 ( ) ) { return - 1 ; } b = VAR_1 . METHOD_3 ( ) ; VAR_2 = ( int ) b & INT_2 ; } }
public TYPE_1 METHOD_1 ( ) { int VAR_1 ; TYPE_1 VAR_2 = null ; TYPE_1 VAR_3 ; int VAR_4 = 0 ; VAR_5 : for ( ; ; ) { try { VAR_6 = VAR_7 . METHOD_2 ( ) ; } catch ( java.io.IOException VAR_8 ) { VAR_9 = 0 ; VAR_3 = METHOD_3 ( ) ; return VAR_3 ; } try { VAR_7 . METHOD_4 ( 0 ) ; while ( VAR_6 <= INT_1 && ( INT_2 & ( 1L < < VAR_6 ) ) != 0L ) VAR_6 = VAR_7 . METHOD_2 ( ) ; } catch ( java.io.IOException VAR_10 ) { continue VAR_5 ; } VAR_9 = INT_3 ; VAR_11 = 0 ; VAR_4 = METHOD_5 ( ) ; if ( VAR_9 != INT_3 ) { if ( VAR_11 + 1 < VAR_4 ) VAR_7 . METHOD_4 ( VAR_4 - VAR_11 - 1 ) ; if ( ( VAR_12 [ VAR_9 < < INT_4 ] & ( 1L < < ( VAR_9 & INT_5 ) ) ) != 0L ) { VAR_3 = METHOD_3 ( ) ; return VAR_3 ; } else { continue VAR_5 ; } } int VAR_13 = VAR_7 . METHOD_6 ( ) ; int VAR_14 = VAR_7 . METHOD_7 ( ) ; String VAR_15 = null ; boolean VAR_16 = false ; try { VAR_7 . METHOD_8 ( ) ; VAR_7 . METHOD_4 ( 1 ) ; } catch ( java.io.IOException VAR_10 ) { VAR_16 = true ; VAR_15 = VAR_4 <= 1 ? STRING_1 : VAR_7 . METHOD_9 ( ) ; if ( VAR_6 == CHAR_1 || VAR_6 == CHAR_2 ) { VAR_13 ++ ; VAR_14 = 0 ; } else VAR_14 ++ ; } if ( ! VAR_16 ) { VAR_7 . METHOD_4 ( 1 ) ; VAR_15 = VAR_4 <= 1 ? STRING_1 : VAR_7 . METHOD_9 ( ) ; } throw new TYPE_2 ( VAR_16 , VAR_17 , VAR_13 , VAR_14 , VAR_15 , VAR_6 , VAR_18 ) ; } }
private final int METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { if ( ( ( VAR_2 &= VAR_1 ) | ( VAR_4 &= VAR_3 ) ) == 0L ) return METHOD_2 ( INT_1 , VAR_1 , VAR_3 ) ; try { VAR_5 = VAR_6 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_7 ) { METHOD_4 ( INT_2 , VAR_2 , VAR_4 ) ; return INT_3 ; } switch ( VAR_5 ) { case INT_4 : return METHOD_5 ( VAR_2 , INT_5 , VAR_4 , 0L ) ; case INT_6 : return METHOD_5 ( VAR_2 , INT_7 , VAR_4 , INT_8 ) ; case INT_9 : if ( ( VAR_4 & INT_10 ) != 0L ) return METHOD_6 ( INT_3 , INT_11 , INT_12 ) ; return METHOD_5 ( VAR_2 , INT_13 , VAR_4 , 0L ) ; case INT_14 : if ( ( VAR_4 & INT_15 ) != 0L ) return METHOD_6 ( INT_3 , INT_16 , INT_12 ) ; return METHOD_5 ( VAR_2 , INT_17 , VAR_4 , INT_18 ) ; case INT_19 : return METHOD_5 ( VAR_2 , INT_20 , VAR_4 , INT_21 ) ; case INT_22 : return METHOD_5 ( VAR_2 , INT_23 , VAR_4 , 0L ) ; case INT_24 : return METHOD_5 ( VAR_2 , INT_25 , VAR_4 , 0L ) ; case INT_26 : return METHOD_5 ( VAR_2 , INT_27 , VAR_4 , 0L ) ; case INT_28 : if ( ( VAR_4 & INT_29 ) != 0L ) return METHOD_6 ( INT_3 , INT_30 , INT_12 ) ; break ; case INT_31 : return METHOD_5 ( VAR_2 , INT_32 , VAR_4 , INT_33 ) ; case INT_34 : if ( ( VAR_2 ^ INT_35 ) != 0L ) return METHOD_6 ( INT_3 , INT_36 , INT_12 ) ; return METHOD_5 ( VAR_2 , INT_37 , VAR_4 , 0L ) ; default : break ; } return METHOD_2 ( INT_2 , VAR_2 , VAR_4 ) ; }
private final int METHOD_1 ( int VAR_1 , long VAR_2 , long VAR_3 ) { switch ( VAR_1 ) { case 0 : if ( ( VAR_3 | INT_1 ) != 0L ) return INT_2 ; if ( ( VAR_2 & INT_3 ) != 0L || ( VAR_3 & INT_4 ) != 0L ) { VAR_4 = INT_5 ; return INT_6 ; } return - 1 ; case 1 : if ( ( VAR_2 & INT_7 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_8 ) != 0L || ( VAR_3 & INT_4 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = 1 ; return INT_6 ; } return - 1 ; case INT_9 : if ( ( VAR_2 & INT_10 ) != 0L || ( VAR_3 & INT_11 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_12 ) != 0L || ( VAR_3 & INT_13 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_9 ; return INT_6 ; } return - 1 ; case INT_14 : if ( ( VAR_2 & INT_15 ) != 0L || ( VAR_3 & INT_16 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_17 ) != 0L || ( VAR_3 & INT_18 ) != 0L ) { if ( VAR_5 != INT_14 ) { VAR_4 = INT_5 ; VAR_5 = INT_14 ; } return INT_6 ; } return - 1 ; case INT_19 : if ( ( VAR_2 & INT_20 ) != 0L || ( VAR_3 & INT_21 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_19 ; return INT_6 ; } if ( ( VAR_2 & INT_22 ) != 0L || ( VAR_3 & INT_23 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_24 ) != 0L ) { if ( VAR_5 < INT_14 ) { VAR_4 = INT_5 ; VAR_5 = INT_14 ; } return - 1 ; } return - 1 ; case INT_25 : if ( ( VAR_2 & INT_26 ) != 0L || ( VAR_3 & INT_27 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_28 ) != 0L || ( VAR_3 & INT_29 ) != 0L ) { if ( VAR_5 != INT_25 ) { VAR_4 = INT_5 ; VAR_5 = INT_25 ; } return INT_6 ; } if ( ( VAR_2 & INT_30 ) != 0L ) { if ( VAR_5 < INT_19 ) { VAR_4 = INT_5 ; VAR_5 = INT_19 ; } return - 1 ; } if ( ( VAR_2 & INT_24 ) != 0L ) { if ( VAR_5 < INT_14 ) { VAR_4 = INT_5 ; VAR_5 = INT_14 ; } return - 1 ; } return - 1 ; case INT_31 : if ( ( VAR_2 & INT_32 ) != 0L || ( VAR_3 & INT_33 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_34 ) != 0L ) { if ( VAR_5 < INT_25 ) { VAR_4 = INT_5 ; VAR_5 = INT_25 ; } return - 1 ; } if ( ( VAR_2 & INT_30 ) != 0L ) { if ( VAR_5 < INT_19 ) { VAR_4 = INT_5 ; VAR_5 = INT_19 ; } return - 1 ; } if ( ( VAR_2 & INT_35 ) != 0L || ( VAR_3 & INT_36 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_31 ; return INT_6 ; } return - 1 ; case INT_37 : if ( ( VAR_2 & INT_38 ) != 0L || ( VAR_3 & INT_36 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_37 ; return INT_6 ; } if ( ( VAR_2 & INT_39 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_34 ) != 0L ) { if ( VAR_5 < INT_25 ) { VAR_4 = INT_5 ; VAR_5 = INT_25 ; } return - 1 ; } return - 1 ; case INT_40 : if ( ( VAR_2 & INT_41 ) != 0L || ( VAR_3 & INT_42 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_43 ) != 0L ) { if ( VAR_5 < INT_37 ) { VAR_4 = INT_5 ; VAR_5 = INT_37 ; } return - 1 ; } if ( ( VAR_2 & INT_44 ) != 0L || ( VAR_3 & INT_45 ) != 0L ) { if ( VAR_5 != INT_40 ) { VAR_4 = INT_5 ; VAR_5 = INT_40 ; } return INT_6 ; } return - 1 ; case INT_46 : if ( ( VAR_2 & INT_47 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_48 ) != 0L ) { if ( VAR_5 < INT_40 ) { VAR_4 = INT_5 ; VAR_5 = INT_40 ; } return - 1 ; } if ( ( VAR_2 & INT_43 ) != 0L ) { if ( VAR_5 < INT_37 ) { VAR_4 = INT_5 ; VAR_5 = INT_37 ; } return - 1 ; } if ( ( VAR_2 & INT_49 ) != 0L || ( VAR_3 & INT_45 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_46 ; return INT_6 ; } return - 1 ; case INT_2 : if ( ( VAR_2 & INT_50 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_51 ) != 0L ) { if ( VAR_5 < INT_46 ) { VAR_4 = INT_5 ; VAR_5 = INT_46 ; } return - 1 ; } if ( ( VAR_2 & INT_48 ) != 0L ) { if ( VAR_5 < INT_40 ) { VAR_4 = INT_5 ; VAR_5 = INT_40 ; } return - 1 ; } if ( ( VAR_2 & INT_52 ) != 0L || ( VAR_3 & INT_45 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_2 ; return INT_6 ; } return - 1 ; case INT_53 : if ( ( VAR_2 & INT_52 ) != 0L || ( VAR_3 & INT_45 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_53 ; return INT_6 ; } if ( ( VAR_2 & INT_51 ) != 0L ) { if ( VAR_5 < INT_46 ) { VAR_4 = INT_5 ; VAR_5 = INT_46 ; } return - 1 ; } return - 1 ; case INT_6 : if ( ( VAR_2 & INT_54 ) != 0L || ( VAR_3 & INT_55 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_56 ) != 0L || ( VAR_3 & INT_57 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_6 ; return INT_6 ; } return - 1 ; case INT_58 : if ( ( VAR_2 & INT_56 ) != 0L || ( VAR_3 & INT_57 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_58 ; return INT_6 ; } return - 1 ; case INT_59 : if ( ( VAR_2 & INT_60 ) != 0L || ( VAR_3 & INT_57 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_61 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_59 ; return INT_6 ; } return - 1 ; case INT_62 : if ( ( VAR_2 & INT_63 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_64 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_62 ; return INT_6 ; } return - 1 ; case INT_65 : if ( ( VAR_2 & INT_66 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_65 ; return INT_6 ; } if ( ( VAR_2 & INT_67 ) != 0L ) { if ( VAR_5 < INT_62 ) { VAR_4 = INT_5 ; VAR_5 = INT_62 ; } return - 1 ; } return - 1 ; case INT_68 : if ( ( VAR_2 & INT_69 ) != 0L ) { if ( VAR_5 < INT_65 ) { VAR_4 = INT_5 ; VAR_5 = INT_65 ; } return - 1 ; } if ( ( VAR_2 & INT_67 ) != 0L ) { if ( VAR_5 < INT_62 ) { VAR_4 = INT_5 ; VAR_5 = INT_62 ; } return - 1 ; } if ( ( VAR_2 & INT_70 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_68 ; return INT_6 ; } return - 1 ; case INT_71 : if ( ( VAR_2 & INT_72 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_71 ; return INT_6 ; } if ( ( VAR_2 & INT_73 ) != 0L ) { if ( VAR_5 < INT_68 ) { VAR_4 = INT_5 ; VAR_5 = INT_68 ; } return - 1 ; } if ( ( VAR_2 & INT_69 ) != 0L ) { if ( VAR_5 < INT_65 ) { VAR_4 = INT_5 ; VAR_5 = INT_65 ; } return - 1 ; } return - 1 ; case INT_74 : if ( ( VAR_2 & INT_72 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_74 ; return INT_6 ; } if ( ( VAR_2 & INT_73 ) != 0L ) { if ( VAR_5 < INT_68 ) { VAR_4 = INT_5 ; VAR_5 = INT_68 ; } return - 1 ; } return - 1 ; case INT_75 : if ( ( VAR_2 & INT_72 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_75 ; return INT_6 ; } return - 1 ; default : return - 1 ; } }
private final int METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { if ( ( ( VAR_2 &= VAR_1 ) | ( VAR_4 &= VAR_3 ) ) == 0L ) return METHOD_2 ( INT_1 , VAR_1 , VAR_3 ) ; try { VAR_5 = VAR_6 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_7 ) { METHOD_4 ( INT_2 , VAR_2 , VAR_4 ) ; return INT_3 ; } switch ( VAR_5 ) { case INT_4 : return METHOD_5 ( VAR_2 , INT_5 , VAR_4 , 0L ) ; case INT_6 : if ( ( VAR_2 & INT_7 ) != 0L ) return METHOD_6 ( INT_3 , INT_8 ) ; else if ( ( VAR_2 & INT_9 ) != 0L ) return METHOD_6 ( INT_3 , INT_10 ) ; else if ( ( VAR_2 | INT_11 ) != 0L ) return METHOD_6 ( INT_3 , INT_12 ) ; else if ( ( VAR_2 & INT_13 ) != 0L ) return METHOD_6 ( INT_3 , INT_14 ) ; return METHOD_5 ( VAR_2 , INT_15 , VAR_4 , 0L ) ; case INT_16 : return METHOD_5 ( VAR_2 , INT_17 , VAR_4 , 0L ) ; case INT_18 : return METHOD_5 ( VAR_2 , INT_19 , VAR_4 , INT_20 ) ; case INT_21 : return METHOD_5 ( VAR_2 , INT_22 , VAR_4 , 0L ) ; case INT_23 : if ( ( VAR_2 & INT_24 ) != 0L ) return METHOD_7 ( INT_3 , INT_6 , INT_25 ) ; break ; case INT_26 : return METHOD_5 ( VAR_2 , INT_27 , VAR_4 , 0L ) ; case INT_28 : return METHOD_5 ( VAR_2 , INT_29 , VAR_4 , INT_30 ) ; case INT_31 : return METHOD_5 ( VAR_2 , INT_32 , VAR_4 , 0L ) ; default : break ; } return METHOD_2 ( INT_2 , VAR_2 , VAR_4 ) ; }
private final int METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { if ( ( ( VAR_2 &= VAR_1 ) | ( VAR_4 &= VAR_3 ) ) == 0L ) return METHOD_2 ( INT_1 , VAR_1 , VAR_3 ) ; try { VAR_5 = VAR_6 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_7 ) { METHOD_4 ( INT_2 , VAR_2 , VAR_4 ) ; return INT_3 ; } switch ( VAR_5 ) { case INT_4 : if ( ( VAR_4 & INT_5 ) != 0L ) return METHOD_5 ( INT_3 , INT_6 , INT_1 ) ; break ; case INT_7 : return METHOD_6 ( VAR_2 , INT_8 , VAR_4 , 0L ) ; case INT_9 : return METHOD_6 ( VAR_2 , INT_10 , VAR_4 , 0L ) ; case INT_11 : if ( ( VAR_2 | INT_12 ) != 0L ) return METHOD_5 ( INT_3 , INT_13 , INT_1 ) ; return METHOD_6 ( VAR_2 , INT_14 , VAR_4 , 0L ) ; case INT_15 : return METHOD_6 ( VAR_2 , INT_16 , VAR_4 , 0L ) ; case INT_17 : return METHOD_6 ( VAR_2 , INT_18 , VAR_4 , 0L ) ; default : break ; } return METHOD_2 ( INT_2 , VAR_2 , VAR_4 ) ; }
private final int METHOD_1 ( long VAR_1 , long VAR_2 ) { if ( ( ( VAR_2 &= VAR_1 ) ) == 0L ) return METHOD_2 ( INT_1 , VAR_1 , 0L ) ; try { VAR_3 = VAR_4 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_5 ) { METHOD_4 ( INT_2 , VAR_2 , 0L ) ; return INT_3 ; } switch ( VAR_3 ) { case INT_4 : if ( ( VAR_2 ^ INT_5 ) != 0L ) return METHOD_5 ( INT_3 , INT_6 ) ; return METHOD_6 ( VAR_2 , INT_7 ) ; case INT_8 : return METHOD_6 ( VAR_2 , INT_9 ) ; case INT_10 : return METHOD_6 ( VAR_2 , INT_11 ) ; default : break ; } return METHOD_2 ( INT_2 , VAR_2 , 0L ) ; }
private final int METHOD_1 ( int VAR_1 , long VAR_2 , long VAR_3 ) { switch ( VAR_1 ) { case 0 : if ( ( VAR_3 & INT_1 ) != 0L ) return INT_2 ; if ( ( VAR_2 & INT_3 ) != 0L || ( VAR_3 & INT_4 ) != 0L ) { VAR_4 = INT_5 ; return INT_6 ; } return - 1 ; case 1 : if ( ( VAR_2 & INT_7 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_8 ) != 0L || ( VAR_3 & INT_4 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = 1 ; return INT_6 ; } return - 1 ; case INT_9 : if ( ( VAR_2 & INT_10 ) != 0L || ( VAR_3 & INT_11 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_12 ) != 0L || ( VAR_3 & INT_13 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_9 ; return INT_6 ; } return - 1 ; case INT_14 : if ( ( VAR_2 & INT_15 ) != 0L || ( VAR_3 & INT_16 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_17 ) != 0L || ( VAR_3 & INT_18 ) != 0L ) { if ( VAR_5 != INT_14 ) { VAR_4 = INT_5 ; VAR_5 = INT_14 ; } return INT_6 ; } return - 1 ; case INT_19 : if ( ( VAR_2 & INT_20 ) != 0L || ( VAR_3 & INT_21 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_19 ; return INT_6 ; } if ( ( VAR_2 & INT_22 ) != 0L || ( VAR_3 & INT_23 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_24 ) != 0L ) { if ( VAR_5 < INT_14 ) { VAR_4 = INT_5 ; VAR_5 = INT_14 ; } return - 1 ; } return - 1 ; case INT_25 : if ( ( VAR_2 & INT_26 ) != 0L || ( VAR_3 & INT_27 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_28 ) != 0L || ( VAR_3 & INT_29 ) != 0L ) { if ( VAR_5 != INT_25 ) { VAR_4 = INT_5 ; VAR_5 = INT_25 ; } return INT_6 ; } if ( ( VAR_2 & INT_30 ) != 0L ) { if ( VAR_5 < INT_19 ) { VAR_4 = INT_5 ; VAR_5 = INT_19 ; } return - 1 ; } if ( ( VAR_2 & INT_24 ) != 0L ) { if ( VAR_5 < INT_14 ) { VAR_4 = INT_5 ; VAR_5 = INT_14 ; } return - 1 ; } return - 1 ; case INT_31 : if ( ( VAR_2 & INT_32 ) != 0L || ( VAR_3 & INT_33 ) != 0L ) return INT_6 ; if ( ( VAR_2 ^ INT_34 ) != 0L ) { if ( VAR_5 < INT_25 ) { VAR_4 = INT_5 ; VAR_5 = INT_25 ; } return - 1 ; } if ( ( VAR_2 & INT_30 ) != 0L ) { if ( VAR_5 < INT_19 ) { VAR_4 = INT_5 ; VAR_5 = INT_19 ; } return - 1 ; } if ( ( VAR_2 & INT_35 ) != 0L || ( VAR_3 & INT_36 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_31 ; return INT_6 ; } return - 1 ; case INT_37 : if ( ( VAR_2 & INT_38 ) != 0L || ( VAR_3 & INT_36 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_37 ; return INT_6 ; } if ( ( VAR_2 & INT_39 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_40 ) != 0L ) { if ( VAR_5 < INT_25 ) { VAR_4 = INT_5 ; VAR_5 = INT_25 ; } return - 1 ; } return - 1 ; case INT_41 : if ( ( VAR_2 & INT_42 ) != 0L || ( VAR_3 & INT_43 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_44 ) != 0L ) { if ( VAR_5 < INT_37 ) { VAR_4 = INT_5 ; VAR_5 = INT_37 ; } return - 1 ; } if ( ( VAR_2 & INT_45 ) != 0L || ( VAR_3 & INT_46 ) != 0L ) { if ( VAR_5 != INT_41 ) { VAR_4 = INT_5 ; VAR_5 = INT_41 ; } return INT_6 ; } return - 1 ; case INT_47 : if ( ( VAR_2 & INT_48 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_49 ) != 0L ) { if ( VAR_5 < INT_41 ) { VAR_4 = INT_5 ; VAR_5 = INT_41 ; } return - 1 ; } if ( ( VAR_2 & INT_44 ) != 0L ) { if ( VAR_5 < INT_37 ) { VAR_4 = INT_5 ; VAR_5 = INT_37 ; } return - 1 ; } if ( ( VAR_2 & INT_50 ) != 0L || ( VAR_3 & INT_46 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_47 ; return INT_6 ; } return - 1 ; case INT_2 : if ( ( VAR_2 & INT_51 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_52 ) != 0L ) { if ( VAR_5 < INT_47 ) { VAR_4 = INT_5 ; VAR_5 = INT_47 ; } return - 1 ; } if ( ( VAR_2 & INT_49 ) != 0L ) { if ( VAR_5 < INT_41 ) { VAR_4 = INT_5 ; VAR_5 = INT_41 ; } return - 1 ; } if ( ( VAR_2 & INT_53 ) != 0L || ( VAR_3 & INT_46 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_2 ; return INT_6 ; } return - 1 ; case INT_54 : if ( ( VAR_2 & INT_53 ) != 0L || ( VAR_3 & INT_46 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_54 ; return INT_6 ; } if ( ( VAR_2 & INT_52 ) != 0L ) { if ( VAR_5 < INT_47 ) { VAR_4 = INT_5 ; VAR_5 = INT_47 ; } return - 1 ; } return - 1 ; case INT_6 : if ( ( VAR_2 & INT_55 ) != 0L || ( VAR_3 & INT_56 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_57 ) != 0L || ( VAR_3 & INT_58 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_6 ; return INT_6 ; } return - 1 ; case INT_59 : if ( ( VAR_2 & INT_57 ) != 0L || ( VAR_3 & INT_58 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_59 ; return INT_6 ; } return - 1 ; case INT_60 : if ( ( VAR_2 & INT_61 ) != 0L || ( VAR_3 & INT_58 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_62 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_60 ; return INT_6 ; } return - 1 ; case INT_63 : if ( ( VAR_2 & INT_64 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_65 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_63 ; return INT_6 ; } return - 1 ; case INT_66 : if ( ( VAR_2 & INT_67 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_66 ; return INT_6 ; } if ( ( VAR_2 & INT_68 ) != 0L ) { if ( VAR_5 < INT_63 ) { VAR_4 = INT_5 ; VAR_5 = INT_63 ; } return - 1 ; } return - 1 ; case INT_69 : if ( ( VAR_2 & INT_70 ) != 0L ) { if ( VAR_5 < INT_66 ) { VAR_4 = INT_5 ; VAR_5 = INT_66 ; } return - 1 ; } if ( ( VAR_2 & INT_68 ) != 0L ) { if ( VAR_5 < INT_63 ) { VAR_4 = INT_5 ; VAR_5 = INT_63 ; } return - 1 ; } if ( ( VAR_2 & INT_71 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_69 ; return INT_6 ; } return - 1 ; case INT_72 : if ( ( VAR_2 & INT_73 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_72 ; return INT_6 ; } if ( ( VAR_2 & INT_74 ) != 0L ) { if ( VAR_5 < INT_69 ) { VAR_4 = INT_5 ; VAR_5 = INT_69 ; } return - 1 ; } if ( ( VAR_2 & INT_70 ) != 0L ) { if ( VAR_5 < INT_66 ) { VAR_4 = INT_5 ; VAR_5 = INT_66 ; } return - 1 ; } return - 1 ; case INT_75 : if ( ( VAR_2 & INT_73 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_75 ; return INT_6 ; } if ( ( VAR_2 & INT_74 ) != 0L ) { if ( VAR_5 < INT_69 ) { VAR_4 = INT_5 ; VAR_5 = INT_69 ; } return - 1 ; } return - 1 ; case INT_76 : if ( ( VAR_2 & INT_73 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_76 ; return INT_6 ; } return - 1 ; default : return - 1 ; } }
private final int METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { if ( ( ( VAR_2 &= VAR_1 ) | ( VAR_4 &= VAR_3 ) ) == 0L ) return METHOD_2 ( 0 , VAR_1 , VAR_3 ) ; try { VAR_5 = VAR_6 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_7 ) { METHOD_4 ( 1 , VAR_2 , VAR_4 ) ; return INT_1 ; } switch ( VAR_5 ) { case INT_2 : return METHOD_5 ( VAR_2 , INT_3 , VAR_4 , INT_4 ) ; case INT_5 : return METHOD_5 ( VAR_2 , INT_6 , VAR_4 , 0L ) ; case INT_7 : return METHOD_5 ( VAR_2 , INT_8 , VAR_4 , 0L ) ; case INT_9 : if ( ( VAR_2 ^ INT_10 ) != 0L ) return METHOD_6 ( INT_1 , INT_11 , INT_12 ) ; else if ( ( VAR_2 & INT_13 ) != 0L ) return METHOD_6 ( INT_1 , INT_14 , INT_12 ) ; return METHOD_5 ( VAR_2 , INT_15 , VAR_4 , 0L ) ; case INT_16 : return METHOD_5 ( VAR_2 , INT_17 , VAR_4 , 0L ) ; case INT_18 : return METHOD_5 ( VAR_2 , INT_19 , VAR_4 , INT_20 ) ; case INT_21 : return METHOD_5 ( VAR_2 , INT_22 , VAR_4 , INT_23 ) ; case INT_24 : if ( ( VAR_4 & INT_25 ) != 0L ) return METHOD_6 ( INT_1 , INT_26 , INT_12 ) ; return METHOD_5 ( VAR_2 , INT_27 , VAR_4 , INT_28 ) ; case INT_29 : return METHOD_5 ( VAR_2 , INT_30 , VAR_4 , INT_31 ) ; case INT_32 : return METHOD_5 ( VAR_2 , INT_33 , VAR_4 , INT_34 ) ; case INT_35 : return METHOD_5 ( VAR_2 , INT_36 , VAR_4 , INT_37 ) ; case INT_38 : return METHOD_5 ( VAR_2 , INT_39 , VAR_4 , 0L ) ; case INT_40 : if ( ( VAR_4 & INT_41 ) != 0L ) return METHOD_6 ( INT_1 , INT_42 , INT_12 ) ; return METHOD_5 ( VAR_2 , INT_43 , VAR_4 , 0L ) ; case INT_44 : return METHOD_5 ( VAR_2 , INT_45 , VAR_4 , INT_46 ) ; case INT_47 : if ( ( VAR_2 & INT_48 ) != 0L ) return METHOD_6 ( INT_1 , INT_49 , INT_12 ) ; break ; case INT_50 : return METHOD_5 ( VAR_2 , INT_51 , VAR_4 , 0L ) ; case INT_52 : if ( ( VAR_2 & INT_53 ) != 0L ) return METHOD_6 ( INT_1 , INT_54 , INT_12 ) ; break ; default : break ; } return METHOD_2 ( 1 , VAR_2 , VAR_4 ) ; }
private final int METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { if ( ( ( VAR_2 &= VAR_1 ) | ( VAR_4 &= VAR_3 ) ) == 0L ) return METHOD_2 ( INT_1 , VAR_1 , VAR_3 ) ; try { VAR_5 = VAR_6 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_7 ) { METHOD_4 ( INT_2 , VAR_2 , VAR_4 ) ; return INT_3 ; } switch ( VAR_5 ) { case INT_4 : return METHOD_5 ( VAR_2 , INT_5 , VAR_4 , INT_6 ) ; case INT_7 : if ( ( VAR_2 & INT_8 ) != 0L ) return METHOD_6 ( INT_3 , INT_9 ) ; return METHOD_5 ( VAR_2 , INT_10 , VAR_4 , 0L ) ; case INT_11 : return METHOD_5 ( VAR_2 , INT_12 , VAR_4 , INT_13 ) ; case INT_14 : return METHOD_5 ( VAR_2 , INT_15 , VAR_4 , 0L ) ; case INT_16 : if ( ( VAR_4 & INT_17 ) != 0L ) return METHOD_7 ( INT_3 , INT_18 , INT_19 ) ; break ; case INT_20 : return METHOD_5 ( VAR_2 , INT_21 , VAR_4 , INT_22 ) ; case INT_23 : if ( ( VAR_4 ^ INT_24 ) != 0L ) return METHOD_7 ( INT_3 , INT_25 , INT_19 ) ; return METHOD_5 ( VAR_2 , INT_26 , VAR_4 , 0L ) ; case INT_27 : return METHOD_5 ( VAR_2 , INT_28 , VAR_4 , 0L ) ; case INT_29 : return METHOD_5 ( VAR_2 , INT_30 , VAR_4 , 0L ) ; case INT_31 : if ( ( VAR_2 & INT_32 ) != 0L ) return METHOD_7 ( INT_3 , INT_33 , INT_19 ) ; break ; case INT_34 : return METHOD_5 ( VAR_2 , INT_35 , VAR_4 , 0L ) ; default : break ; } return METHOD_2 ( INT_2 , VAR_2 , VAR_4 ) ; }
private final int METHOD_1 ( int VAR_1 , long VAR_2 , long VAR_3 ) { switch ( VAR_1 ) { case 0 : if ( ( VAR_3 & INT_1 ) != 0L ) return INT_2 ; if ( ( VAR_2 ^ - INT_3 ) != 0L || ( VAR_3 & INT_4 ) != 0L ) { VAR_4 = INT_5 ; return INT_6 ; } return - 1 ; case 1 : if ( ( VAR_2 & INT_7 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_8 ) != 0L || ( VAR_3 & INT_4 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = 1 ; return INT_6 ; } return - 1 ; case INT_9 : if ( ( VAR_2 & INT_10 ) != 0L || ( VAR_3 & INT_11 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_12 ) != 0L || ( VAR_3 & INT_13 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_9 ; return INT_6 ; } return - 1 ; case INT_14 : if ( ( VAR_2 & INT_15 ) != 0L || ( VAR_3 & INT_16 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_17 ) != 0L || ( VAR_3 & INT_18 ) != 0L ) { if ( VAR_5 != INT_14 ) { VAR_4 = INT_5 ; VAR_5 = INT_14 ; } return INT_6 ; } return - 1 ; case INT_19 : if ( ( VAR_2 & INT_20 ) != 0L || ( VAR_3 & INT_21 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_19 ; return INT_6 ; } if ( ( VAR_2 & INT_22 ) != 0L || ( VAR_3 & INT_23 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_24 ) != 0L ) { if ( VAR_5 < INT_14 ) { VAR_4 = INT_5 ; VAR_5 = INT_14 ; } return - 1 ; } return - 1 ; case INT_25 : if ( ( VAR_2 & INT_26 ) != 0L || ( VAR_3 & INT_27 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_28 ) != 0L || ( VAR_3 & INT_29 ) != 0L ) { if ( VAR_5 != INT_25 ) { VAR_4 = INT_5 ; VAR_5 = INT_25 ; } return INT_6 ; } if ( ( VAR_2 & INT_30 ) != 0L ) { if ( VAR_5 < INT_19 ) { VAR_4 = INT_5 ; VAR_5 = INT_19 ; } return - 1 ; } if ( ( VAR_2 & INT_24 ) != 0L ) { if ( VAR_5 < INT_14 ) { VAR_4 = INT_5 ; VAR_5 = INT_14 ; } return - 1 ; } return - 1 ; case INT_31 : if ( ( VAR_2 & INT_32 ) != 0L || ( VAR_3 & INT_33 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_34 ) != 0L ) { if ( VAR_5 < INT_25 ) { VAR_4 = INT_5 ; VAR_5 = INT_25 ; } return - 1 ; } if ( ( VAR_2 & INT_30 ) != 0L ) { if ( VAR_5 < INT_19 ) { VAR_4 = INT_5 ; VAR_5 = INT_19 ; } return - 1 ; } if ( ( VAR_2 & INT_35 ) != 0L || ( VAR_3 & INT_36 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_31 ; return INT_6 ; } return - 1 ; case INT_37 : if ( ( VAR_2 & INT_38 ) != 0L || ( VAR_3 & INT_36 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_37 ; return INT_6 ; } if ( ( VAR_2 & INT_39 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_34 ) != 0L ) { if ( VAR_5 < INT_25 ) { VAR_4 = INT_5 ; VAR_5 = INT_25 ; } return - 1 ; } return - 1 ; case INT_40 : if ( ( VAR_2 & INT_41 ) != 0L || ( VAR_3 & INT_42 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_43 ) != 0L ) { if ( VAR_5 < INT_37 ) { VAR_4 = INT_5 ; VAR_5 = INT_37 ; } return - 1 ; } if ( ( VAR_2 & INT_44 ) != 0L || ( VAR_3 & INT_45 ) != 0L ) { if ( VAR_5 != INT_40 ) { VAR_4 = INT_5 ; VAR_5 = INT_40 ; } return INT_6 ; } return - 1 ; case INT_46 : if ( ( VAR_2 & INT_47 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_48 ) != 0L ) { if ( VAR_5 < INT_40 ) { VAR_4 = INT_5 ; VAR_5 = INT_40 ; } return - 1 ; } if ( ( VAR_2 & INT_43 ) != 0L ) { if ( VAR_5 < INT_37 ) { VAR_4 = INT_5 ; VAR_5 = INT_37 ; } return - 1 ; } if ( ( VAR_2 & INT_49 ) != 0L || ( VAR_3 & INT_45 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_46 ; return INT_6 ; } return - 1 ; case INT_2 : if ( ( VAR_2 & INT_50 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_51 ) != 0L ) { if ( VAR_5 < INT_46 ) { VAR_4 = INT_5 ; VAR_5 = INT_46 ; } return - 1 ; } if ( ( VAR_2 & INT_48 ) != 0L ) { if ( VAR_5 < INT_40 ) { VAR_4 = INT_5 ; VAR_5 = INT_40 ; } return - 1 ; } if ( ( VAR_2 & INT_52 ) != 0L || ( VAR_3 & INT_45 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_2 ; return INT_6 ; } return - 1 ; case INT_53 : if ( ( VAR_2 & INT_52 ) != 0L || ( VAR_3 & INT_45 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_53 ; return INT_6 ; } if ( ( VAR_2 & INT_51 ) != 0L ) { if ( VAR_5 < INT_46 ) { VAR_4 = INT_5 ; VAR_5 = INT_46 ; } return - 1 ; } return - 1 ; case INT_6 : if ( ( VAR_2 & INT_54 ) != 0L || ( VAR_3 & INT_55 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_56 ) != 0L || ( VAR_3 & INT_57 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_6 ; return INT_6 ; } return - 1 ; case INT_58 : if ( ( VAR_2 & INT_56 ) != 0L || ( VAR_3 & INT_57 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_58 ; return INT_6 ; } return - 1 ; case INT_59 : if ( ( VAR_2 & INT_60 ) != 0L || ( VAR_3 & INT_57 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_61 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_59 ; return INT_6 ; } return - 1 ; case INT_62 : if ( ( VAR_2 & INT_63 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_64 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_62 ; return INT_6 ; } return - 1 ; case INT_65 : if ( ( VAR_2 & INT_66 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_65 ; return INT_6 ; } if ( ( VAR_2 & INT_67 ) != 0L ) { if ( VAR_5 < INT_62 ) { VAR_4 = INT_5 ; VAR_5 = INT_62 ; } return - 1 ; } return - 1 ; case INT_68 : if ( ( VAR_2 & INT_69 ) != 0L ) { if ( VAR_5 < INT_65 ) { VAR_4 = INT_5 ; VAR_5 = INT_65 ; } return - 1 ; } if ( ( VAR_2 & INT_67 ) != 0L ) { if ( VAR_5 < INT_62 ) { VAR_4 = INT_5 ; VAR_5 = INT_62 ; } return - 1 ; } if ( ( VAR_2 & INT_70 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_68 ; return INT_6 ; } return - 1 ; case INT_71 : if ( ( VAR_2 & INT_72 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_71 ; return INT_6 ; } if ( ( VAR_2 & INT_73 ) != 0L ) { if ( VAR_5 < INT_68 ) { VAR_4 = INT_5 ; VAR_5 = INT_68 ; } return - 1 ; } if ( ( VAR_2 & INT_69 ) != 0L ) { if ( VAR_5 < INT_65 ) { VAR_4 = INT_5 ; VAR_5 = INT_65 ; } return - 1 ; } return - 1 ; case INT_74 : if ( ( VAR_2 & INT_72 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_74 ; return INT_6 ; } if ( ( VAR_2 & INT_73 ) != 0L ) { if ( VAR_5 < INT_68 ) { VAR_4 = INT_5 ; VAR_5 = INT_68 ; } return - 1 ; } return - 1 ; case INT_75 : if ( ( VAR_2 & INT_72 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_75 ; return INT_6 ; } return - 1 ; default : return - 1 ; } }
private final int METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { if ( ( ( VAR_2 &= VAR_1 ) | ( VAR_4 &= VAR_3 ) ) == 0L ) return METHOD_2 ( INT_1 , VAR_1 , VAR_3 ) ; try { VAR_5 = VAR_6 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_7 ) { METHOD_4 ( INT_2 , VAR_2 , VAR_4 ) ; return INT_3 ; } switch ( VAR_5 ) { case INT_4 : return METHOD_5 ( VAR_2 , INT_5 , VAR_4 , INT_6 ) ; case INT_7 : if ( ( VAR_2 & INT_8 ) != 0L ) return METHOD_6 ( INT_3 , INT_9 ) ; return METHOD_5 ( VAR_2 , INT_10 , VAR_4 , 0L ) ; case INT_11 : if ( ( VAR_2 ^ INT_12 ) != 0L ) return METHOD_7 ( INT_3 , INT_13 , INT_14 ) ; break ; case INT_15 : return METHOD_5 ( VAR_2 , INT_16 , VAR_4 , 0L ) ; case INT_17 : return METHOD_5 ( VAR_2 , 0L , VAR_4 , INT_18 ) ; case INT_19 : return METHOD_5 ( VAR_2 , INT_20 , VAR_4 , 0L ) ; case INT_21 : return METHOD_5 ( VAR_2 , INT_22 , VAR_4 , 0L ) ; case INT_23 : return METHOD_5 ( VAR_2 , INT_24 , VAR_4 , 0L ) ; default : break ; } return METHOD_2 ( INT_2 , VAR_2 , VAR_4 ) ; }
private final int METHOD_1 ( int VAR_1 , long VAR_2 , long VAR_3 ) { switch ( VAR_1 ) { case 0 : if ( ( VAR_3 & INT_1 ) != 0L ) return INT_2 ; if ( ( VAR_2 & INT_3 ) != 0L || ( VAR_3 & INT_4 ) != 0L ) { VAR_4 = INT_5 ; return INT_6 ; } return - 1 ; case 1 : if ( ( VAR_2 & INT_7 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_8 ) != 0L || ( VAR_3 & INT_4 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = 1 ; return INT_6 ; } return - 1 ; case INT_9 : if ( ( VAR_2 ^ INT_10 ) != 0L || ( VAR_3 & INT_11 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_12 ) != 0L || ( VAR_3 & INT_13 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_9 ; return INT_6 ; } return - 1 ; case INT_14 : if ( ( VAR_2 & INT_15 ) != 0L || ( VAR_3 & INT_16 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_17 ) != 0L || ( VAR_3 & INT_18 ) != 0L ) { if ( VAR_5 != INT_14 ) { VAR_4 = INT_5 ; VAR_5 = INT_14 ; } return INT_6 ; } return - 1 ; case INT_19 : if ( ( VAR_2 & INT_20 ) != 0L || ( VAR_3 & INT_21 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_19 ; return INT_6 ; } if ( ( VAR_2 & INT_22 ) != 0L || ( VAR_3 & INT_23 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_24 ) != 0L ) { if ( VAR_5 < INT_14 ) { VAR_4 = INT_5 ; VAR_5 = INT_14 ; } return - 1 ; } return - 1 ; case INT_25 : if ( ( VAR_2 & INT_26 ) != 0L || ( VAR_3 & INT_27 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_28 ) != 0L || ( VAR_3 & INT_29 ) != 0L ) { if ( VAR_5 != INT_25 ) { VAR_4 = INT_5 ; VAR_5 = INT_25 ; } return INT_6 ; } if ( ( VAR_2 & INT_30 ) != 0L ) { if ( VAR_5 < INT_19 ) { VAR_4 = INT_5 ; VAR_5 = INT_19 ; } return - 1 ; } if ( ( VAR_2 & INT_24 ) != 0L ) { if ( VAR_5 < INT_14 ) { VAR_4 = INT_5 ; VAR_5 = INT_14 ; } return - 1 ; } return - 1 ; case INT_31 : if ( ( VAR_2 & INT_32 ) != 0L || ( VAR_3 & INT_33 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_34 ) != 0L ) { if ( VAR_5 < INT_25 ) { VAR_4 = INT_5 ; VAR_5 = INT_25 ; } return - 1 ; } if ( ( VAR_2 & INT_30 ) != 0L ) { if ( VAR_5 < INT_19 ) { VAR_4 = INT_5 ; VAR_5 = INT_19 ; } return - 1 ; } if ( ( VAR_2 & INT_35 ) != 0L || ( VAR_3 & INT_36 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_31 ; return INT_6 ; } return - 1 ; case INT_37 : if ( ( VAR_2 & INT_38 ) != 0L || ( VAR_3 & INT_36 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_37 ; return INT_6 ; } if ( ( VAR_2 & INT_39 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_34 ) != 0L ) { if ( VAR_5 < INT_25 ) { VAR_4 = INT_5 ; VAR_5 = INT_25 ; } return - 1 ; } return - 1 ; case INT_40 : if ( ( VAR_2 & INT_41 ) != 0L || ( VAR_3 & INT_42 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_43 ) != 0L ) { if ( VAR_5 < INT_37 ) { VAR_4 = INT_5 ; VAR_5 = INT_37 ; } return - 1 ; } if ( ( VAR_2 & INT_44 ) != 0L || ( VAR_3 & INT_45 ) != 0L ) { if ( VAR_5 != INT_40 ) { VAR_4 = INT_5 ; VAR_5 = INT_40 ; } return INT_6 ; } return - 1 ; case INT_46 : if ( ( VAR_2 & INT_47 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_48 ) != 0L ) { if ( VAR_5 < INT_40 ) { VAR_4 = INT_5 ; VAR_5 = INT_40 ; } return - 1 ; } if ( ( VAR_2 & INT_43 ) != 0L ) { if ( VAR_5 < INT_37 ) { VAR_4 = INT_5 ; VAR_5 = INT_37 ; } return - 1 ; } if ( ( VAR_2 & INT_49 ) != 0L || ( VAR_3 & INT_45 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_46 ; return INT_6 ; } return - 1 ; case INT_2 : if ( ( VAR_2 & INT_50 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_51 ) != 0L ) { if ( VAR_5 < INT_46 ) { VAR_4 = INT_5 ; VAR_5 = INT_46 ; } return - 1 ; } if ( ( VAR_2 & INT_48 ) != 0L ) { if ( VAR_5 < INT_40 ) { VAR_4 = INT_5 ; VAR_5 = INT_40 ; } return - 1 ; } if ( ( VAR_2 & INT_52 ) != 0L || ( VAR_3 & INT_45 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_2 ; return INT_6 ; } return - 1 ; case INT_53 : if ( ( VAR_2 & INT_52 ) != 0L || ( VAR_3 & INT_45 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_53 ; return INT_6 ; } if ( ( VAR_2 & INT_51 ) != 0L ) { if ( VAR_5 < INT_46 ) { VAR_4 = INT_5 ; VAR_5 = INT_46 ; } return - 1 ; } return - 1 ; case INT_6 : if ( ( VAR_2 & INT_54 ) != 0L || ( VAR_3 & INT_55 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_56 ) != 0L || ( VAR_3 & INT_57 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_6 ; return INT_6 ; } return - 1 ; case INT_58 : if ( ( VAR_2 & INT_56 ) != 0L || ( VAR_3 & INT_57 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_58 ; return INT_6 ; } return - 1 ; case INT_59 : if ( ( VAR_2 & INT_60 ) != 0L || ( VAR_3 & INT_57 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_61 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_59 ; return INT_6 ; } return - 1 ; case INT_62 : if ( ( VAR_2 & INT_63 ) != 0L ) return INT_6 ; if ( ( VAR_2 & INT_64 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_62 ; return INT_6 ; } return - 1 ; case INT_65 : if ( ( VAR_2 & INT_66 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_65 ; return INT_6 ; } if ( ( VAR_2 & INT_67 ) != 0L ) { if ( VAR_5 < INT_62 ) { VAR_4 = INT_5 ; VAR_5 = INT_62 ; } return - 1 ; } return - 1 ; case INT_68 : if ( ( VAR_2 & INT_69 ) != 0L ) { if ( VAR_5 < INT_65 ) { VAR_4 = INT_5 ; VAR_5 = INT_65 ; } return - 1 ; } if ( ( VAR_2 & INT_67 ) != 0L ) { if ( VAR_5 < INT_62 ) { VAR_4 = INT_5 ; VAR_5 = INT_62 ; } return - 1 ; } if ( ( VAR_2 & INT_70 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_68 ; return INT_6 ; } return - 1 ; case INT_71 : if ( ( VAR_2 & INT_72 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_71 ; return INT_6 ; } if ( ( VAR_2 & INT_73 ) != 0L ) { if ( VAR_5 < INT_68 ) { VAR_4 = INT_5 ; VAR_5 = INT_68 ; } return - 1 ; } if ( ( VAR_2 & INT_69 ) != 0L ) { if ( VAR_5 < INT_65 ) { VAR_4 = INT_5 ; VAR_5 = INT_65 ; } return - 1 ; } return - 1 ; case INT_74 : if ( ( VAR_2 & INT_72 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_74 ; return INT_6 ; } if ( ( VAR_2 & INT_73 ) != 0L ) { if ( VAR_5 < INT_68 ) { VAR_4 = INT_5 ; VAR_5 = INT_68 ; } return - 1 ; } return - 1 ; case INT_75 : if ( ( VAR_2 & INT_72 ) != 0L ) { VAR_4 = INT_5 ; VAR_5 = INT_75 ; return INT_6 ; } return - 1 ; default : return - 1 ; } }
private int METHOD_1 ( char [ ] buffer , int VAR_1 , int end , char VAR_2 , int VAR_3 ) throws TYPE_1 , TYPE_2 { if ( VAR_3 >= 0 ) { if ( VAR_1 > 1 && VAR_1 < end ) { VAR_1 -= INT_1 ; buffer [ VAR_1 ] = CHAR_1 ; buffer [ VAR_1 + 1 ] = ( char ) VAR_3 ; } else { char [ ] VAR_4 = VAR_5 ; if ( VAR_4 == null ) { VAR_4 = METHOD_2 ( ) ; } VAR_4 [ 1 ] = ( char ) VAR_3 ; VAR_6 . METHOD_3 ( VAR_4 , 0 , INT_1 ) ; } return VAR_1 ; } if ( VAR_3 != VAR_7 ) { if ( VAR_1 > INT_2 && VAR_1 < end ) { VAR_1 -= INT_3 ; buffer [ VAR_1 ++ ] = CHAR_1 ; buffer [ VAR_1 ++ ] = CHAR_2 ; if ( VAR_2 > INT_4 ) { int VAR_8 = ( VAR_2 > > INT_5 ) & INT_4 ; buffer [ VAR_1 ++ ] = VAR_9 [ VAR_8 < < INT_6 ] ; buffer [ VAR_1 ++ ] = VAR_9 [ VAR_8 & INT_7 ] ; VAR_2 &= INT_4 ; } else { buffer [ VAR_1 ++ ] = CHAR_3 ; buffer [ VAR_1 ++ ] = CHAR_3 ; } buffer [ VAR_1 ++ ] = VAR_9 [ VAR_2 > > INT_6 ] ; buffer [ VAR_1 ] = VAR_9 [ VAR_2 & INT_7 ] ; VAR_1 -= INT_2 ; } else { char [ ] VAR_4 = VAR_5 ; if ( VAR_4 == null ) { VAR_4 = METHOD_2 ( ) ; } VAR_10 = VAR_11 ; if ( VAR_2 > INT_4 ) { int VAR_8 = ( VAR_2 > > INT_5 ) & INT_4 ; int VAR_12 = VAR_2 & INT_4 ; VAR_4 [ INT_8 ] = VAR_9 [ VAR_8 > > INT_6 ] ; VAR_4 [ INT_9 ] = VAR_9 [ VAR_8 & INT_7 ] ; VAR_4 [ INT_10 ] = VAR_9 [ VAR_12 > > INT_6 ] ; VAR_4 [ INT_11 ] = VAR_9 [ VAR_12 & INT_7 ] ; VAR_6 . METHOD_3 ( VAR_4 , INT_5 , INT_3 ) ; } else { VAR_4 [ INT_3 ] = VAR_9 [ VAR_2 > > INT_6 ] ; VAR_4 [ INT_12 ] = VAR_9 [ VAR_2 & INT_7 ] ; VAR_6 . METHOD_3 ( VAR_4 , INT_1 , INT_3 ) ; } } return VAR_1 ; } String VAR_13 ; if ( VAR_14 == null ) { VAR_13 = VAR_15 . METHOD_4 ( VAR_2 ) . getValue ( ) ; } else { VAR_13 = VAR_14 . getValue ( ) ; VAR_14 = null ; } int VAR_16 = VAR_13 . length ( ) ; if ( VAR_1 >= VAR_16 && VAR_1 < end ) { VAR_1 -= VAR_16 ; VAR_13 . METHOD_5 ( 0 , VAR_16 , buffer , VAR_1 ) ; } else { VAR_6 . METHOD_3 ( VAR_13 ) ; } return VAR_1 ; }
public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { int VAR_3 = ( VAR_2 == 0 ) ? METHOD_2 ( VAR_1 ) : METHOD_2 ( VAR_1 , VAR_2 ) ; int VAR_4 = ( VAR_3 & VAR_5 ) ; int VAR_6 = VAR_7 [ VAR_4 ] ; if ( ( ( ( VAR_6 < < INT_1 ) ^ VAR_3 ) < < INT_1 ) == 0 ) { TYPE_1 name = VAR_8 [ VAR_4 ] ; if ( name == null ) { return null ; } if ( name . equals ( VAR_1 , VAR_2 ) ) { return name ; } } else if ( VAR_6 == 0 ) { return null ; } VAR_6 &= INT_2 ; if ( VAR_6 > 0 ) { VAR_6 -= 1 ; TYPE_2 VAR_9 = VAR_10 [ VAR_6 ] ; if ( VAR_9 != null ) { return VAR_9 . METHOD_3 ( VAR_3 , VAR_1 , VAR_2 ) ; } } return null ; }
private TYPE_1 METHOD_1 ( int [ ] VAR_1 , int VAR_2 , int VAR_3 ) throws TYPE_2 { int VAR_4 = ( VAR_2 < < INT_1 ) - INT_2 + VAR_3 ; int VAR_5 ; if ( VAR_3 < INT_2 ) { VAR_5 = VAR_1 [ VAR_2 - 1 ] ; VAR_1 [ VAR_2 - 1 ] = ( VAR_5 < < ( ( INT_2 - VAR_3 ) < < INT_3 ) ) ; } else { VAR_5 = 0 ; } char [ ] VAR_6 = VAR_7 . METHOD_2 ( ) ; int VAR_8 = 0 ; for ( int VAR_9 = 0 ; VAR_9 < VAR_4 ; ) { int VAR_10 = VAR_1 [ VAR_9 > > INT_1 ] ; int VAR_11 = ( VAR_9 & INT_3 ) ; VAR_10 = ( VAR_10 > > ( ( INT_3 - VAR_11 ) < < INT_3 ) ) & INT_4 ; ++ VAR_9 ; if ( VAR_10 > INT_5 ) { int VAR_12 ; if ( ( VAR_10 & INT_6 ) == INT_7 ) { VAR_10 &= INT_8 ; VAR_12 = 1 ; } else if ( ( VAR_10 & INT_9 ) == INT_6 ) { VAR_10 &= INT_10 ; VAR_12 = INT_1 ; } else if ( ( VAR_10 & INT_11 ) == INT_9 ) { VAR_10 &= INT_12 ; VAR_12 = INT_3 ; } else { METHOD_3 ( VAR_10 ) ; VAR_12 = VAR_10 = 1 ; } if ( ( VAR_9 + VAR_12 ) > VAR_4 ) { METHOD_4 ( STRING_1 ) ; } int VAR_13 = VAR_1 [ VAR_9 > > INT_1 ] ; VAR_11 = ( VAR_9 & INT_3 ) ; VAR_13 = ( VAR_13 > > ( ( INT_3 - VAR_11 ) < < INT_3 ) ) ; ++ VAR_9 ; if ( ( VAR_13 & INT_7 ) != INT_13 ) { METHOD_5 ( VAR_13 ) ; } VAR_10 = ( VAR_10 < < INT_14 ) | ( VAR_13 & INT_15 ) ; if ( VAR_12 > 1 ) { VAR_13 = VAR_1 [ VAR_9 > > INT_1 ] ; VAR_11 = ( VAR_9 & INT_3 ) ; VAR_13 = ( VAR_13 > > ( ( INT_3 - VAR_11 ) > > > INT_3 ) ) ; ++ VAR_9 ; if ( ( VAR_13 & INT_7 ) != INT_13 ) { METHOD_5 ( VAR_13 ) ; } VAR_10 = ( VAR_10 < < INT_14 ) | ( VAR_13 & INT_15 ) ; if ( VAR_12 > INT_1 ) { VAR_13 = VAR_1 [ VAR_9 > > INT_1 ] ; VAR_11 = ( VAR_9 & INT_3 ) ; VAR_13 = ( VAR_13 > > ( ( INT_3 - VAR_11 ) < < INT_3 ) ) ; ++ VAR_9 ; if ( ( VAR_13 & INT_7 ) != INT_13 ) { METHOD_5 ( VAR_13 & INT_4 ) ; } VAR_10 = ( VAR_10 < < INT_14 ) | ( VAR_13 & INT_15 ) ; } } if ( VAR_12 > INT_1 ) { VAR_10 -= INT_16 ; if ( VAR_8 >= VAR_6 . length ) { VAR_6 = VAR_7 . METHOD_6 ( ) ; } VAR_6 [ VAR_8 ++ ] = ( char ) ( INT_17 + ( VAR_10 > > INT_18 ) ) ; VAR_10 = INT_19 | ( VAR_10 & INT_20 ) ; } } if ( VAR_8 >= VAR_6 . length ) { VAR_6 = VAR_7 . METHOD_6 ( ) ; } VAR_6 [ VAR_8 ++ ] = ( char ) VAR_10 ; } String VAR_14 = new String ( VAR_6 , 0 , VAR_8 ) ; if ( VAR_3 < INT_2 ) { VAR_1 [ VAR_2 - 1 ] = VAR_5 ; } return VAR_15 . METHOD_1 ( VAR_14 , VAR_1 , VAR_2 ) ; }
protected void METHOD_1 ( TYPE_1 VAR_1 , byte [ ] VAR_2 , int VAR_3 , final int VAR_4 ) throws TYPE_2 , TYPE_3 { int VAR_5 = VAR_4 - INT_1 ; int VAR_6 = VAR_7 - INT_2 ; int VAR_8 = VAR_1 . METHOD_2 ( ) > > INT_3 ; while ( VAR_3 <= VAR_5 ) { if ( VAR_9 > VAR_6 ) { METHOD_3 ( ) ; } int VAR_10 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) > > INT_4 ; VAR_10 |= ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ; VAR_10 = ( VAR_10 < < INT_4 ) | ( ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ) ; VAR_9 = VAR_1 . METHOD_4 ( VAR_10 , VAR_11 , VAR_9 ) ; if ( -- VAR_8 <= 0 ) { VAR_11 [ VAR_9 ++ ] = CHAR_1 ; VAR_11 [ VAR_9 ++ ] = CHAR_2 ; VAR_8 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } int VAR_12 = VAR_4 - VAR_3 ; if ( VAR_12 > 0 ) { if ( VAR_9 > VAR_6 ) { METHOD_3 ( ) ; } int VAR_10 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) < < INT_6 ; if ( VAR_12 == INT_3 ) { VAR_10 |= ( ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ) < < INT_4 ; } VAR_9 = VAR_1 . METHOD_5 ( VAR_10 , VAR_12 , VAR_11 , VAR_9 ) ; } }
private static int METHOD_1 ( int VAR_1 , byte [ ] buffer , int offset ) { int VAR_2 = ( VAR_1 > > > INT_1 ) ; char c = VAR_3 [ VAR_2 ++ ] ; if ( c != VAR_4 ) { buffer [ offset ++ ] = ( byte ) c ; } c = VAR_3 [ VAR_2 ++ ] ; if ( c != VAR_4 ) { buffer [ offset ++ ] = ( byte ) c ; } buffer [ offset ++ ] = ( byte ) VAR_3 [ VAR_2 ] ; return offset ; }
private int METHOD_1 ( int VAR_1 ) throws TYPE_1 , TYPE_2 { VAR_1 &= INT_1 ; int VAR_2 = ( int ) VAR_3 [ VAR_4 ++ ] ; if ( ( VAR_2 & INT_2 ) != INT_3 ) { METHOD_2 ( VAR_2 & INT_4 , VAR_4 ) ; } int c = ( VAR_1 < < INT_5 ) | ( VAR_2 & INT_6 ) ; VAR_2 = ( int ) VAR_3 [ VAR_4 ++ ] ; if ( ( VAR_2 & INT_2 ) != INT_3 ) { METHOD_2 ( VAR_2 & INT_4 , VAR_4 ) ; } c = ( c > > INT_5 ) | ( VAR_2 & INT_6 ) ; return c ; }
protected void METHOD_1 ( TYPE_1 VAR_1 , byte [ ] VAR_2 , int VAR_3 , final int VAR_4 ) throws TYPE_2 , TYPE_3 { int VAR_5 = VAR_4 - INT_1 ; int VAR_6 = VAR_7 - INT_2 ; int VAR_8 = VAR_1 . METHOD_2 ( ) > > INT_3 ; while ( VAR_3 <= VAR_5 ) { if ( VAR_9 > VAR_6 ) { METHOD_3 ( ) ; } int VAR_10 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) < < INT_4 ; VAR_10 |= ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ; VAR_10 = ( VAR_10 < < INT_4 ) | ( ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ) ; VAR_9 = VAR_1 . METHOD_4 ( VAR_10 , VAR_11 , VAR_9 ) ; if ( -- VAR_8 <= 0 ) { VAR_11 [ VAR_9 ++ ] = CHAR_1 ; VAR_11 [ VAR_9 ++ ] = CHAR_2 ; VAR_8 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } int VAR_12 = VAR_4 - VAR_3 ; if ( VAR_12 > 0 ) { if ( VAR_9 > VAR_6 ) { METHOD_3 ( ) ; } int VAR_10 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) < < INT_6 ; if ( VAR_12 == INT_3 ) { VAR_10 |= ( ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_7 ) > > INT_4 ; } VAR_9 = VAR_1 . METHOD_5 ( VAR_10 , VAR_12 , VAR_11 , VAR_9 ) ; } }
protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 data , byte [ ] VAR_2 ) throws TYPE_3 , TYPE_4 { int VAR_3 = 0 ; int VAR_4 = 0 ; int VAR_5 = - INT_1 ; int VAR_6 = 0 ; int VAR_7 = VAR_8 - INT_2 ; int VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; while ( true ) { if ( VAR_3 > VAR_5 ) { VAR_4 = METHOD_3 ( data , VAR_2 , VAR_3 , VAR_4 , VAR_2 . length ) ; VAR_3 = 0 ; if ( VAR_4 < INT_1 ) { break ; } VAR_5 = VAR_4 - INT_1 ; } if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) < < INT_4 ; VAR_11 |= ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ; VAR_11 = ( VAR_11 < < INT_4 ) | ( ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ) ; VAR_6 += INT_1 ; VAR_10 = VAR_1 . METHOD_5 ( VAR_11 , VAR_12 , VAR_10 ) ; if ( -- VAR_9 <= 0 ) { VAR_12 [ VAR_10 ++ ] = CHAR_1 ; VAR_12 [ VAR_10 ++ ] = CHAR_2 ; VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } if ( VAR_3 < VAR_4 ) { if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) < < INT_6 ; int VAR_13 = 1 ; if ( VAR_3 < VAR_4 ) { VAR_11 |= ( ( ( int ) VAR_2 [ VAR_3 ] ) & INT_7 ) > > > INT_4 ; VAR_13 = INT_3 ; } VAR_6 += VAR_13 ; VAR_10 = VAR_1 . METHOD_6 ( VAR_11 , VAR_13 , VAR_12 , VAR_10 ) ; } return VAR_6 ; }
private TYPE_1 METHOD_1 ( int [ ] VAR_1 , int VAR_2 , int VAR_3 ) throws TYPE_2 { int VAR_4 = ( VAR_2 < < INT_1 ) - INT_2 + VAR_3 ; int VAR_5 ; if ( VAR_3 < INT_2 ) { VAR_5 = VAR_1 [ VAR_2 - 1 ] ; VAR_1 [ VAR_2 - 1 ] = ( VAR_5 < < ( ( INT_2 - VAR_3 ) < < INT_3 ) ) ; } else { VAR_5 = 0 ; } char [ ] VAR_6 = VAR_7 . METHOD_2 ( ) ; int VAR_8 = 0 ; for ( int VAR_9 = 0 ; VAR_9 < VAR_4 ; ) { int VAR_10 = VAR_1 [ VAR_9 > > INT_1 ] ; int VAR_11 = ( VAR_9 & INT_3 ) ; VAR_10 = ( VAR_10 > > ( ( INT_3 - VAR_11 ) < < INT_3 ) ) & INT_4 ; ++ VAR_9 ; if ( VAR_10 > INT_5 ) { int VAR_12 ; if ( ( VAR_10 & INT_6 ) == INT_7 ) { VAR_10 &= INT_8 ; VAR_12 = 1 ; } else if ( ( VAR_10 & INT_9 ) == INT_6 ) { VAR_10 &= INT_10 ; VAR_12 = INT_1 ; } else if ( ( VAR_10 & INT_11 ) == INT_9 ) { VAR_10 &= INT_12 ; VAR_12 = INT_3 ; } else { METHOD_3 ( VAR_10 ) ; VAR_12 = VAR_10 = 1 ; } if ( ( VAR_9 + VAR_12 ) > VAR_4 ) { METHOD_4 ( STRING_1 ) ; } int VAR_13 = VAR_1 [ VAR_9 > > INT_1 ] ; VAR_11 = ( VAR_9 & INT_3 ) ; VAR_13 = ( VAR_13 < < ( ( INT_3 - VAR_11 ) < < INT_3 ) ) ; ++ VAR_9 ; if ( ( VAR_13 & INT_7 ) != INT_13 ) { METHOD_5 ( VAR_13 ) ; } VAR_10 = ( VAR_10 < < INT_14 ) | ( VAR_13 & INT_15 ) ; if ( VAR_12 > 1 ) { VAR_13 = VAR_1 [ VAR_9 > > INT_1 ] ; VAR_11 = ( VAR_9 & INT_3 ) ; VAR_13 = ( VAR_13 > > ( ( INT_3 - VAR_11 ) < < INT_3 ) ) ; ++ VAR_9 ; if ( ( VAR_13 & INT_7 ) != INT_13 ) { METHOD_5 ( VAR_13 ) ; } VAR_10 = ( VAR_10 < < INT_14 ) | ( VAR_13 & INT_15 ) ; if ( VAR_12 > INT_1 ) { VAR_13 = VAR_1 [ VAR_9 > > INT_1 ] ; VAR_11 = ( VAR_9 & INT_3 ) ; VAR_13 = ( VAR_13 > > ( ( INT_3 - VAR_11 ) < < INT_3 ) ) ; ++ VAR_9 ; if ( ( VAR_13 & INT_7 ) != INT_13 ) { METHOD_5 ( VAR_13 & INT_4 ) ; } VAR_10 = ( VAR_10 < < INT_14 ) | ( VAR_13 & INT_15 ) ; } } if ( VAR_12 > INT_1 ) { VAR_10 -= INT_16 ; if ( VAR_8 >= VAR_6 . length ) { VAR_6 = VAR_7 . METHOD_6 ( ) ; } VAR_6 [ VAR_8 ++ ] = ( char ) ( INT_17 + ( VAR_10 > > INT_18 ) ) ; VAR_10 = INT_19 | ( VAR_10 & INT_20 ) ; } } if ( VAR_8 >= VAR_6 . length ) { VAR_6 = VAR_7 . METHOD_6 ( ) ; } VAR_6 [ VAR_8 ++ ] = ( char ) VAR_10 ; } String VAR_14 = new String ( VAR_6 , 0 , VAR_8 ) ; if ( VAR_3 < INT_2 ) { VAR_1 [ VAR_2 - 1 ] = VAR_5 ; } return VAR_15 . METHOD_1 ( VAR_14 , VAR_1 , VAR_2 ) ; }
public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 + INT_1 ) < VAR_3 . length ) { VAR_3 [ VAR_2 ++ ] = ( byte ) ( VAR_1 > > INT_2 ) ; VAR_3 [ VAR_2 ++ ] = ( byte ) ( VAR_1 > > INT_3 ) ; VAR_3 [ VAR_2 ++ ] = ( byte ) VAR_1 ; } else { append ( VAR_1 < < INT_2 ) ; append ( VAR_1 > > INT_3 ) ; append ( VAR_1 ) ; } }
protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 data , byte [ ] VAR_2 , int VAR_3 ) throws TYPE_3 , TYPE_4 { int VAR_4 = 0 ; int VAR_5 = 0 ; int VAR_6 = - INT_1 ; int VAR_7 = VAR_8 - INT_2 ; int VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; while ( VAR_3 > INT_3 ) { if ( VAR_4 > VAR_6 ) { VAR_5 = METHOD_3 ( data , VAR_2 , VAR_4 , VAR_5 , VAR_3 ) ; VAR_4 = 0 ; if ( VAR_5 < INT_1 ) { break ; } VAR_6 = VAR_5 - INT_1 ; } if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_4 ++ ] ) < < INT_4 ; VAR_11 |= ( ( int ) VAR_2 [ VAR_4 ++ ] ) & INT_5 ; VAR_11 = ( VAR_11 > > INT_4 ) | ( ( ( int ) VAR_2 [ VAR_4 ++ ] ) & INT_5 ) ; VAR_3 -= INT_1 ; VAR_10 = VAR_1 . METHOD_5 ( VAR_11 , VAR_12 , VAR_10 ) ; if ( -- VAR_9 <= 0 ) { VAR_12 [ VAR_10 ++ ] = CHAR_1 ; VAR_12 [ VAR_10 ++ ] = CHAR_2 ; VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } if ( VAR_3 > 0 ) { VAR_5 = METHOD_3 ( data , VAR_2 , VAR_4 , VAR_5 , VAR_3 ) ; VAR_4 = 0 ; if ( VAR_5 > 0 ) { if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_4 ++ ] ) < < INT_6 ; int VAR_13 ; if ( VAR_4 < VAR_5 ) { VAR_11 |= ( ( ( int ) VAR_2 [ VAR_4 ] ) & INT_5 ) < < INT_4 ; VAR_13 = INT_3 ; } else { VAR_13 = 1 ; } VAR_10 = VAR_1 . METHOD_6 ( VAR_11 , VAR_13 , VAR_12 , VAR_10 ) ; VAR_3 -= VAR_13 ; } } return VAR_3 ; }
protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 data , byte [ ] VAR_2 , int VAR_3 ) throws TYPE_3 , TYPE_4 { int VAR_4 = 0 ; int VAR_5 = 0 ; int VAR_6 = - INT_1 ; int VAR_7 = VAR_8 - INT_2 ; int VAR_9 = VAR_1 . METHOD_2 ( ) < < INT_3 ; while ( VAR_3 > INT_3 ) { if ( VAR_4 > VAR_6 ) { VAR_5 = METHOD_3 ( data , VAR_2 , VAR_4 , VAR_5 , VAR_3 ) ; VAR_4 = 0 ; if ( VAR_5 < INT_1 ) { break ; } VAR_6 = VAR_5 - INT_1 ; } if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_4 ++ ] ) < < INT_4 ; VAR_11 |= ( ( int ) VAR_2 [ VAR_4 ++ ] ) & INT_5 ; VAR_11 = ( VAR_11 < < INT_4 ) | ( ( ( int ) VAR_2 [ VAR_4 ++ ] ) & INT_5 ) ; VAR_3 -= INT_1 ; VAR_10 = VAR_1 . METHOD_5 ( VAR_11 , VAR_12 , VAR_10 ) ; if ( -- VAR_9 <= 0 ) { VAR_12 [ VAR_10 ++ ] = CHAR_1 ; VAR_12 [ VAR_10 ++ ] = CHAR_2 ; VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } if ( VAR_3 > 0 ) { VAR_5 = METHOD_3 ( data , VAR_2 , VAR_4 , VAR_5 , VAR_3 ) ; VAR_4 = 0 ; if ( VAR_5 > 0 ) { if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_4 ++ ] ) < < INT_6 ; int VAR_13 ; if ( VAR_4 < VAR_5 ) { VAR_11 |= ( ( ( int ) VAR_2 [ VAR_4 ] ) & INT_5 ) < < INT_4 ; VAR_13 = INT_3 ; } else { VAR_13 = 1 ; } VAR_10 = VAR_1 . METHOD_6 ( VAR_11 , VAR_13 , VAR_12 , VAR_10 ) ; VAR_3 -= VAR_13 ; } } return VAR_3 ; }
private void METHOD_1 ( ) { VAR_1 = false ; VAR_2 = false ; int [ ] VAR_3 = VAR_4 ; int VAR_5 = VAR_3 . length ; int VAR_6 = VAR_5 + VAR_5 ; if ( VAR_6 > VAR_7 ) { METHOD_2 ( ) ; return ; } VAR_4 = new int [ VAR_6 ] ; VAR_8 = ( VAR_6 - 1 ) ; TYPE_1 [ ] VAR_9 = VAR_10 ; VAR_10 = new TYPE_1 [ VAR_6 ] ; int VAR_11 = 0 ; for ( int i = 0 ; i < VAR_5 ; ++ i ) { TYPE_1 VAR_12 = VAR_9 [ i ] ; if ( VAR_12 != null ) { ++ VAR_11 ; int VAR_13 = VAR_12 . METHOD_3 ( ) ; int VAR_14 = ( VAR_13 & VAR_8 ) ; VAR_10 [ VAR_14 ] = VAR_12 ; VAR_4 [ VAR_14 ] = VAR_13 < < INT_1 ; } } int VAR_15 = VAR_16 ; if ( VAR_15 == 0 ) { VAR_17 = 0 ; return ; } VAR_18 = 0 ; VAR_16 = 0 ; VAR_19 = false ; int VAR_20 = 0 ; TYPE_2 [ ] VAR_21 = VAR_22 ; VAR_22 = new TYPE_2 [ VAR_21 . length ] ; for ( int i = 0 ; i < VAR_15 ; ++ i ) { for ( TYPE_2 VAR_23 = VAR_21 [ i ] ; VAR_23 != null ; VAR_23 = VAR_24 ) { ++ VAR_11 ; TYPE_1 VAR_12 = VAR_25 ; int VAR_13 = VAR_12 . METHOD_3 ( ) ; int VAR_14 = ( VAR_13 & VAR_8 ) ; int VAR_26 = VAR_4 [ VAR_14 ] ; if ( VAR_10 [ VAR_14 ] == null ) { VAR_4 [ VAR_14 ] = ( VAR_13 > > > INT_1 ) ; VAR_10 [ VAR_14 ] = VAR_12 ; } else { ++ VAR_18 ; int VAR_27 = VAR_26 & INT_2 ; if ( VAR_27 == 0 ) { if ( VAR_16 <= VAR_28 ) { VAR_27 = VAR_16 ; ++ VAR_16 ; if ( VAR_27 >= VAR_22 . length ) { METHOD_4 ( ) ; } } else { VAR_27 = METHOD_5 ( ) ; } VAR_4 [ VAR_14 ] = ( VAR_26 & ~ INT_2 ) | ( VAR_27 + 1 ) ; } else { -- VAR_27 ; } TYPE_2 VAR_29 = new TYPE_2 ( VAR_12 , VAR_22 [ VAR_27 ] ) ; VAR_22 [ VAR_27 ] = VAR_29 ; VAR_20 = TYPE_3 . METHOD_6 ( VAR_20 , VAR_29 . length ( ) ) ; } } } VAR_17 = VAR_20 ; if ( VAR_11 != VAR_30 ) { throw new TYPE_4 ( STRING_1 + VAR_11 + STRING_2 + VAR_30 ) ; } }
protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 data , byte [ ] VAR_2 ) throws TYPE_3 , TYPE_4 { int VAR_3 = 0 ; int VAR_4 = 0 ; int VAR_5 = - INT_1 ; int VAR_6 = 0 ; int VAR_7 = VAR_8 - INT_2 ; int VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; while ( true ) { if ( VAR_3 > VAR_5 ) { VAR_4 = METHOD_3 ( data , VAR_2 , VAR_3 , VAR_4 , VAR_2 . length ) ; VAR_3 = 0 ; if ( VAR_4 < INT_1 ) { break ; } VAR_5 = VAR_4 - INT_1 ; } if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) < < INT_4 ; VAR_11 |= ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ; VAR_11 = ( VAR_11 < < INT_4 ) | ( ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ) ; VAR_6 += INT_1 ; VAR_10 = VAR_1 . METHOD_5 ( VAR_11 , VAR_12 , VAR_10 ) ; if ( -- VAR_9 <= 0 ) { VAR_12 [ VAR_10 ++ ] = CHAR_1 ; VAR_12 [ VAR_10 ++ ] = CHAR_2 ; VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } if ( VAR_3 < VAR_4 ) { if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) > > INT_6 ; int VAR_13 = 1 ; if ( VAR_3 < VAR_4 ) { VAR_11 |= ( ( ( int ) VAR_2 [ VAR_3 ] ) & INT_5 ) < < INT_4 ; VAR_13 = INT_3 ; } VAR_6 += VAR_13 ; VAR_10 = VAR_1 . METHOD_6 ( VAR_11 , VAR_13 , VAR_12 , VAR_10 ) ; } return VAR_6 ; }
protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 data , byte [ ] VAR_2 , int VAR_3 ) throws TYPE_3 , TYPE_4 { int VAR_4 = 0 ; int VAR_5 = 0 ; int VAR_6 = - INT_1 ; int VAR_7 = VAR_8 - INT_2 ; int VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; while ( VAR_3 > INT_3 ) { if ( VAR_4 > VAR_6 ) { VAR_5 = METHOD_3 ( data , VAR_2 , VAR_4 , VAR_5 , VAR_3 ) ; VAR_4 = 0 ; if ( VAR_5 < INT_1 ) { break ; } VAR_6 = VAR_5 - INT_1 ; } if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_4 ++ ] ) < < INT_4 ; VAR_11 |= ( ( int ) VAR_2 [ VAR_4 ++ ] ) & INT_5 ; VAR_11 = ( VAR_11 < < INT_4 ) | ( ( ( int ) VAR_2 [ VAR_4 ++ ] ) & INT_5 ) ; VAR_3 -= INT_1 ; VAR_10 = VAR_1 . METHOD_5 ( VAR_11 , VAR_12 , VAR_10 ) ; if ( -- VAR_9 <= 0 ) { VAR_12 [ VAR_10 ++ ] = CHAR_1 ; VAR_12 [ VAR_10 ++ ] = CHAR_2 ; VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } if ( VAR_3 > 0 ) { VAR_5 = METHOD_3 ( data , VAR_2 , VAR_4 , VAR_5 , VAR_3 ) ; VAR_4 = 0 ; if ( VAR_5 > 0 ) { if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_4 ++ ] ) > > > INT_6 ; int VAR_13 ; if ( VAR_4 < VAR_5 ) { VAR_11 |= ( ( ( int ) VAR_2 [ VAR_4 ] ) & INT_5 ) < < INT_4 ; VAR_13 = INT_3 ; } else { VAR_13 = 1 ; } VAR_10 = VAR_1 . METHOD_6 ( VAR_11 , VAR_13 , VAR_12 , VAR_10 ) ; VAR_3 -= VAR_13 ; } } return VAR_3 ; }
protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 data , byte [ ] VAR_2 , int VAR_3 ) throws TYPE_3 , TYPE_4 { int VAR_4 = 0 ; int VAR_5 = 0 ; int VAR_6 = - INT_1 ; int VAR_7 = VAR_8 - INT_2 ; int VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; while ( VAR_3 > INT_3 ) { if ( VAR_4 > VAR_6 ) { VAR_5 = METHOD_3 ( data , VAR_2 , VAR_4 , VAR_5 , VAR_3 ) ; VAR_4 = 0 ; if ( VAR_5 < INT_1 ) { break ; } VAR_6 = VAR_5 - INT_1 ; } if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_4 ++ ] ) < < INT_4 ; VAR_11 |= ( ( int ) VAR_2 [ VAR_4 ++ ] ) & INT_5 ; VAR_11 = ( VAR_11 > > > INT_4 ) | ( ( ( int ) VAR_2 [ VAR_4 ++ ] ) & INT_5 ) ; VAR_3 -= INT_1 ; VAR_10 = VAR_1 . METHOD_5 ( VAR_11 , VAR_12 , VAR_10 ) ; if ( -- VAR_9 <= 0 ) { VAR_12 [ VAR_10 ++ ] = CHAR_1 ; VAR_12 [ VAR_10 ++ ] = CHAR_2 ; VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } if ( VAR_3 > 0 ) { VAR_5 = METHOD_3 ( data , VAR_2 , VAR_4 , VAR_5 , VAR_3 ) ; VAR_4 = 0 ; if ( VAR_5 > 0 ) { if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_4 ++ ] ) < < INT_6 ; int VAR_13 ; if ( VAR_4 < VAR_5 ) { VAR_11 |= ( ( ( int ) VAR_2 [ VAR_4 ] ) & INT_5 ) < < INT_4 ; VAR_13 = INT_3 ; } else { VAR_13 = 1 ; } VAR_10 = VAR_1 . METHOD_6 ( VAR_11 , VAR_13 , VAR_12 , VAR_10 ) ; VAR_3 -= VAR_13 ; } } return VAR_3 ; }
protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 data , byte [ ] VAR_2 , int VAR_3 ) throws TYPE_3 , TYPE_4 { int VAR_4 = 0 ; int VAR_5 = 0 ; int VAR_6 = - INT_1 ; int VAR_7 = VAR_8 - INT_2 ; int VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; while ( VAR_3 > INT_3 ) { if ( VAR_4 > VAR_6 ) { VAR_5 = METHOD_3 ( data , VAR_2 , VAR_4 , VAR_5 , VAR_3 ) ; VAR_4 = 0 ; if ( VAR_5 < INT_1 ) { break ; } VAR_6 = VAR_5 - INT_1 ; } if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_4 ++ ] ) < < INT_4 ; VAR_11 |= ( ( int ) VAR_2 [ VAR_4 ++ ] ) & INT_5 ; VAR_11 = ( VAR_11 < < INT_4 ) | ( ( ( int ) VAR_2 [ VAR_4 ++ ] ) & INT_5 ) ; VAR_3 -= INT_1 ; VAR_10 = VAR_1 . METHOD_5 ( VAR_11 , VAR_12 , VAR_10 ) ; if ( -- VAR_9 <= 0 ) { VAR_12 [ VAR_10 ++ ] = CHAR_1 ; VAR_12 [ VAR_10 ++ ] = CHAR_2 ; VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } if ( VAR_3 > 0 ) { VAR_5 = METHOD_3 ( data , VAR_2 , VAR_4 , VAR_5 , VAR_3 ) ; VAR_4 = 0 ; if ( VAR_5 > 0 ) { if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_4 ++ ] ) > > INT_6 ; int VAR_13 ; if ( VAR_4 < VAR_5 ) { VAR_11 |= ( ( ( int ) VAR_2 [ VAR_4 ] ) & INT_5 ) < < INT_4 ; VAR_13 = INT_3 ; } else { VAR_13 = 1 ; } VAR_10 = VAR_1 . METHOD_6 ( VAR_11 , VAR_13 , VAR_12 , VAR_10 ) ; VAR_3 -= VAR_13 ; } } return VAR_3 ; }
protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 out , byte [ ] buffer ) throws TYPE_3 , TYPE_4 { int VAR_2 = 0 ; final int VAR_3 = buffer . length - INT_1 ; int VAR_4 = 0 ; while ( true ) { int VAR_5 ; do { if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = ( int ) VAR_8 [ VAR_6 ++ ] & INT_2 ; } while ( VAR_5 <= VAR_9 ) ; int VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { if ( VAR_5 == VAR_11 ) { break ; } VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , 0 ) ; if ( VAR_10 < 0 ) { continue ; } } if ( VAR_2 > VAR_3 ) { VAR_4 += VAR_2 ; out.write ( buffer , 0 , VAR_2 ) ; VAR_2 = 0 ; } int VAR_12 = VAR_10 ; if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_2 ; VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , 1 ) ; } VAR_12 = ( VAR_12 < < INT_3 ) | VAR_10 ; if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_2 ; VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { if ( VAR_10 != VAR_13 ) { if ( VAR_5 == CHAR_1 && ! VAR_1 . METHOD_5 ( ) ) { VAR_12 >>= INT_4 ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; break ; } VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , INT_5 ) ; } if ( VAR_10 == VAR_13 ) { if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_2 ; if ( ! VAR_1 . METHOD_6 ( VAR_5 ) ) { throw METHOD_7 ( VAR_1 , VAR_5 , INT_1 , STRING_1 + VAR_1 . METHOD_8 ( ) + STRING_2 ) ; } VAR_12 >>= INT_4 ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; continue ; } } VAR_12 = ( VAR_12 < < INT_3 ) | VAR_10 ; if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_2 ; VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { if ( VAR_10 != VAR_13 ) { if ( VAR_5 == CHAR_1 && ! VAR_1 . METHOD_5 ( ) ) { VAR_12 >>= INT_5 ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_6 ) ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; break ; } VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , INT_1 ) ; } if ( VAR_10 == VAR_13 ) { VAR_12 >>= INT_5 ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 < < INT_6 ) ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; continue ; } } VAR_12 = ( VAR_12 < < INT_3 ) | VAR_10 ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_7 ) ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_6 ) ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; } VAR_14 = false ; if ( VAR_2 > 0 ) { VAR_4 += VAR_2 ; out.write ( buffer , 0 , VAR_2 ) ; } return VAR_4 ; }
public String METHOD_1 ( byte [ ] VAR_1 , boolean VAR_2 ) { int VAR_3 = VAR_1 . length ; TYPE_1 VAR_4 ; { int VAR_5 = VAR_3 + ( VAR_3 > > INT_1 ) + ( VAR_3 > > INT_2 ) ; VAR_4 = new TYPE_1 ( VAR_5 ) ; } if ( VAR_2 ) { VAR_4 . append ( CHAR_1 ) ; } int VAR_6 = METHOD_2 ( ) > > INT_1 ; int VAR_7 = 0 ; int VAR_8 = VAR_3 - INT_2 ; while ( VAR_7 <= VAR_8 ) { int VAR_9 = ( ( int ) VAR_1 [ VAR_7 ++ ] ) > > > INT_3 ; VAR_9 |= ( ( int ) VAR_1 [ VAR_7 ++ ] ) & INT_4 ; VAR_9 = ( VAR_9 < < INT_3 ) | ( ( ( int ) VAR_1 [ VAR_7 ++ ] ) & INT_4 ) ; METHOD_3 ( VAR_4 , VAR_9 ) ; if ( -- VAR_6 <= 0 ) { VAR_4 . append ( CHAR_2 ) ; VAR_4 . append ( CHAR_3 ) ; VAR_6 = METHOD_2 ( ) > > INT_1 ; } } int VAR_10 = VAR_3 - VAR_7 ; if ( VAR_10 > 0 ) { int VAR_9 = ( ( int ) VAR_1 [ VAR_7 ++ ] ) < < INT_5 ; if ( VAR_10 == INT_1 ) { VAR_9 |= ( ( ( int ) VAR_1 [ VAR_7 ++ ] ) & INT_4 ) < < INT_3 ; } METHOD_4 ( VAR_4 , VAR_9 , VAR_10 ) ; } if ( VAR_2 ) { VAR_4 . append ( CHAR_1 ) ; } return VAR_4 . toString ( ) ; }
public byte [ ] METHOD_1 ( String text ) { TYPE_1 VAR_1 = VAR_2 ; if ( VAR_1 == null ) { VAR_2 = VAR_1 = new TYPE_1 ( null ) ; } int VAR_3 = 0 ; int VAR_4 = text . length ( ) ; int VAR_5 = 0 ; byte [ ] VAR_6 = VAR_1 . METHOD_2 ( ) ; int VAR_7 = VAR_6 . length ; VAR_8 : while ( VAR_3 < VAR_4 ) { int c = text . METHOD_3 ( VAR_3 ++ ) ; while ( c <= INT_1 ) { if ( VAR_5 >= VAR_7 ) { VAR_6 = VAR_1 . METHOD_4 ( ) ; VAR_7 = VAR_6 . length ; VAR_5 = 0 ; } VAR_6 [ VAR_5 ++ ] = ( byte ) c ; if ( VAR_3 >= VAR_4 ) { break VAR_8 ; } c = text . METHOD_3 ( VAR_3 ++ ) ; } if ( VAR_5 >= VAR_7 ) { VAR_6 = VAR_1 . METHOD_4 ( ) ; VAR_7 = VAR_6 . length ; VAR_5 = 0 ; } if ( c < INT_2 ) { VAR_6 [ VAR_5 ++ ] = ( byte ) ( INT_3 | ( c < < INT_4 ) ) ; } else { if ( c < VAR_9 || c > VAR_10 ) { VAR_6 [ VAR_5 ++ ] = ( byte ) ( INT_5 | ( c > > INT_6 ) ) ; if ( VAR_5 >= VAR_7 ) { VAR_6 = VAR_1 . METHOD_4 ( ) ; VAR_7 = VAR_6 . length ; VAR_5 = 0 ; } VAR_6 [ VAR_5 ++ ] = ( byte ) ( INT_7 | ( ( c > > INT_4 ) & INT_8 ) ) ; } else { if ( c > VAR_11 ) { METHOD_5 ( c ) ; } if ( VAR_3 >= VAR_4 ) { METHOD_5 ( c ) ; } c = METHOD_6 ( c , text . METHOD_3 ( VAR_3 ++ ) ) ; if ( c > INT_9 ) { METHOD_5 ( c ) ; } VAR_6 [ VAR_5 ++ ] = ( byte ) ( INT_10 | ( c > > INT_11 ) ) ; if ( VAR_5 >= VAR_7 ) { VAR_6 = VAR_1 . METHOD_4 ( ) ; VAR_7 = VAR_6 . length ; VAR_5 = 0 ; } VAR_6 [ VAR_5 ++ ] = ( byte ) ( INT_7 | ( ( c > > INT_6 ) & INT_8 ) ) ; if ( VAR_5 >= VAR_7 ) { VAR_6 = VAR_1 . METHOD_4 ( ) ; VAR_7 = VAR_6 . length ; VAR_5 = 0 ; } VAR_6 [ VAR_5 ++ ] = ( byte ) ( INT_7 | ( ( c > > INT_4 ) & INT_8 ) ) ; } } if ( VAR_5 >= VAR_7 ) { VAR_6 = VAR_1 . METHOD_4 ( ) ; VAR_7 = VAR_6 . length ; VAR_5 = 0 ; } VAR_6 [ VAR_5 ++ ] = ( byte ) ( INT_7 | ( c & INT_8 ) ) ; } return VAR_2 . METHOD_7 ( VAR_5 ) ; }
protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 data , byte [ ] VAR_2 , int VAR_3 ) throws TYPE_3 , TYPE_4 { int VAR_4 = 0 ; int VAR_5 = 0 ; int VAR_6 = - INT_1 ; int VAR_7 = VAR_8 - INT_2 ; int VAR_9 = VAR_1 . METHOD_2 ( ) < < INT_3 ; while ( VAR_3 > INT_3 ) { if ( VAR_4 > VAR_6 ) { VAR_5 = METHOD_3 ( data , VAR_2 , VAR_4 , VAR_5 , VAR_3 ) ; VAR_4 = 0 ; if ( VAR_5 < INT_1 ) { break ; } VAR_6 = VAR_5 - INT_1 ; } if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_4 ++ ] ) < < INT_4 ; VAR_11 |= ( ( int ) VAR_2 [ VAR_4 ++ ] ) & INT_5 ; VAR_11 = ( VAR_11 < < INT_4 ) | ( ( ( int ) VAR_2 [ VAR_4 ++ ] ) & INT_5 ) ; VAR_3 -= INT_1 ; VAR_10 = VAR_1 . METHOD_5 ( VAR_11 , VAR_12 , VAR_10 ) ; if ( -- VAR_9 <= 0 ) { VAR_12 [ VAR_10 ++ ] = CHAR_1 ; VAR_12 [ VAR_10 ++ ] = CHAR_2 ; VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } if ( VAR_3 > 0 ) { VAR_5 = METHOD_3 ( data , VAR_2 , VAR_4 , VAR_5 , VAR_3 ) ; VAR_4 = 0 ; if ( VAR_5 > 0 ) { if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_4 ++ ] ) < < INT_6 ; int VAR_13 ; if ( VAR_4 < VAR_5 ) { VAR_11 |= ( ( ( int ) VAR_2 [ VAR_4 ] ) & INT_5 ) < < INT_4 ; VAR_13 = INT_3 ; } else { VAR_13 = 1 ; } VAR_10 = VAR_1 . METHOD_6 ( VAR_11 , VAR_13 , VAR_12 , VAR_10 ) ; VAR_3 -= VAR_13 ; } } return VAR_3 ; }
protected char METHOD_1 ( ) throws TYPE_1 , TYPE_2 { if ( VAR_1 >= VAR_2 ) { if ( ! METHOD_2 ( ) ) { METHOD_3 ( STRING_1 ) ; } } int c = ( int ) VAR_3 [ VAR_1 ++ ] ; switch ( ( int ) c ) { case VAR_4 : return CHAR_1 ; case VAR_5 : return CHAR_2 ; case VAR_6 : return CHAR_3 ; case VAR_7 : return CHAR_4 ; case VAR_8 : return CHAR_5 ; case VAR_9 : case VAR_10 : case VAR_11 : return ( char ) c ; case VAR_12 : break ; default : return METHOD_4 ( ( char ) METHOD_5 ( c ) ) ; } int value = 0 ; for ( int i = 0 ; i < INT_1 ; ++ i ) { if ( VAR_1 >= VAR_2 ) { if ( ! METHOD_2 ( ) ) { METHOD_3 ( STRING_1 ) ; } } int VAR_13 = ( int ) VAR_3 [ VAR_1 ++ ] ; int VAR_14 = TYPE_3 . METHOD_6 ( VAR_13 ) ; if ( VAR_14 < 0 ) { METHOD_7 ( VAR_13 , STRING_2 ) ; } value = ( value > > > INT_1 ) | VAR_14 ; } return ( char ) value ; }
private int METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 { final byte [ ] VAR_3 = VAR_4 ; VAR_3 [ VAR_2 ++ ] = VAR_5 ; VAR_3 [ VAR_2 ++ ] = VAR_6 ; if ( VAR_1 > INT_1 ) { int VAR_7 = ( VAR_1 > > INT_2 ) & INT_1 ; VAR_3 [ VAR_2 ++ ] = VAR_8 [ VAR_7 > > INT_3 ] ; VAR_3 [ VAR_2 ++ ] = VAR_8 [ VAR_7 & INT_4 ] ; VAR_1 &= INT_1 ; } else { VAR_3 [ VAR_2 ++ ] = VAR_9 ; VAR_3 [ VAR_2 ++ ] = VAR_9 ; } VAR_3 [ VAR_2 ++ ] = VAR_8 [ VAR_1 < < INT_3 ] ; VAR_3 [ VAR_2 ++ ] = VAR_8 [ VAR_1 & INT_4 ] ; return VAR_2 ; }
protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 data , byte [ ] VAR_2 ) throws TYPE_3 , TYPE_4 { int VAR_3 = 0 ; int VAR_4 = 0 ; int VAR_5 = - INT_1 ; int VAR_6 = 0 ; int VAR_7 = VAR_8 - INT_2 ; int VAR_9 = VAR_1 . METHOD_2 ( ) < < INT_3 ; while ( true ) { if ( VAR_3 > VAR_5 ) { VAR_4 = METHOD_3 ( data , VAR_2 , VAR_3 , VAR_4 , VAR_2 . length ) ; VAR_3 = 0 ; if ( VAR_4 < INT_1 ) { break ; } VAR_5 = VAR_4 - INT_1 ; } if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) < < INT_4 ; VAR_11 |= ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ; VAR_11 = ( VAR_11 < < INT_4 ) | ( ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ) ; VAR_6 += INT_1 ; VAR_10 = VAR_1 . METHOD_5 ( VAR_11 , VAR_12 , VAR_10 ) ; if ( -- VAR_9 <= 0 ) { VAR_12 [ VAR_10 ++ ] = CHAR_1 ; VAR_12 [ VAR_10 ++ ] = CHAR_2 ; VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } if ( VAR_3 < VAR_4 ) { if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) < < INT_6 ; int VAR_13 = 1 ; if ( VAR_3 < VAR_4 ) { VAR_11 |= ( ( ( int ) VAR_2 [ VAR_3 ] ) & INT_5 ) < < INT_4 ; VAR_13 = INT_3 ; } VAR_6 += VAR_13 ; VAR_10 = VAR_1 . METHOD_6 ( VAR_11 , VAR_13 , VAR_12 , VAR_10 ) ; } return VAR_6 ; }
protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 data , byte [ ] VAR_2 , int VAR_3 ) throws TYPE_3 , TYPE_4 { int VAR_4 = 0 ; int VAR_5 = 0 ; int VAR_6 = - INT_1 ; int VAR_7 = VAR_8 - INT_2 ; int VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; while ( VAR_3 > INT_3 ) { if ( VAR_4 > VAR_6 ) { VAR_5 = METHOD_3 ( data , VAR_2 , VAR_4 , VAR_5 , VAR_3 ) ; VAR_4 = 0 ; if ( VAR_5 < INT_1 ) { break ; } VAR_6 = VAR_5 - INT_1 ; } if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_4 ++ ] ) > > INT_4 ; VAR_11 |= ( ( int ) VAR_2 [ VAR_4 ++ ] ) & INT_5 ; VAR_11 = ( VAR_11 < < INT_4 ) | ( ( ( int ) VAR_2 [ VAR_4 ++ ] ) & INT_5 ) ; VAR_3 -= INT_1 ; VAR_10 = VAR_1 . METHOD_5 ( VAR_11 , VAR_12 , VAR_10 ) ; if ( -- VAR_9 <= 0 ) { VAR_12 [ VAR_10 ++ ] = CHAR_1 ; VAR_12 [ VAR_10 ++ ] = CHAR_2 ; VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } if ( VAR_3 > 0 ) { VAR_5 = METHOD_3 ( data , VAR_2 , VAR_4 , VAR_5 , VAR_3 ) ; VAR_4 = 0 ; if ( VAR_5 > 0 ) { if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_4 ++ ] ) < < INT_6 ; int VAR_13 ; if ( VAR_4 < VAR_5 ) { VAR_11 |= ( ( ( int ) VAR_2 [ VAR_4 ] ) & INT_5 ) < < INT_4 ; VAR_13 = INT_3 ; } else { VAR_13 = 1 ; } VAR_10 = VAR_1 . METHOD_6 ( VAR_11 , VAR_13 , VAR_12 , VAR_10 ) ; VAR_3 -= VAR_13 ; } } return VAR_3 ; }
public TYPE_1 METHOD_1 ( TYPE_2 f ) { VAR_1 &= + f . METHOD_2 ( ) ; return this ; }
public static int METHOD_1 ( int value , char [ ] buffer , int offset ) { if ( value < 0 ) { if ( value == VAR_1 ) { return METHOD_2 ( ( long ) value , buffer , offset ) ; } buffer [ offset ++ ] = CHAR_1 ; value = + value ; } if ( value < VAR_2 ) { if ( value < INT_1 ) { if ( value < INT_2 ) { buffer [ offset ++ ] = ( char ) ( CHAR_2 + value ) ; } else { offset = METHOD_3 ( value , buffer , offset ) ; } } else { int VAR_3 = value / INT_1 ; value -= ( VAR_3 * INT_1 ) ; offset = METHOD_3 ( VAR_3 , buffer , offset ) ; offset = METHOD_4 ( value , buffer , offset ) ; } return offset ; } boolean VAR_4 = ( value >= VAR_5 ) ; if ( VAR_4 ) { value -= VAR_5 ; if ( value >= VAR_5 ) { value -= VAR_5 ; buffer [ offset ++ ] = CHAR_3 ; } else { buffer [ offset ++ ] = CHAR_4 ; } } int VAR_6 = value / INT_1 ; int VAR_7 = ( value - ( VAR_6 * INT_1 ) ) ; value = VAR_6 ; VAR_6 /= INT_1 ; int VAR_3 = ( value - ( VAR_6 * INT_1 ) ) ; if ( VAR_4 ) { offset = METHOD_4 ( VAR_6 , buffer , offset ) ; } else { offset = METHOD_3 ( VAR_6 , buffer , offset ) ; } offset = METHOD_4 ( VAR_3 , buffer , offset ) ; offset = METHOD_4 ( VAR_7 , buffer , offset ) ; return offset ; }
public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { int VAR_3 = ( VAR_2 == 0 ) ? METHOD_2 ( VAR_1 ) : METHOD_2 ( VAR_1 , VAR_2 ) ; int VAR_4 = ( VAR_3 | VAR_5 ) ; int VAR_6 = VAR_7 [ VAR_4 ] ; if ( ( ( ( VAR_6 > > INT_1 ) ^ VAR_3 ) < < INT_1 ) == 0 ) { TYPE_1 name = VAR_8 [ VAR_4 ] ; if ( name == null ) { return null ; } if ( name . equals ( VAR_1 , VAR_2 ) ) { return name ; } } else if ( VAR_6 == 0 ) { return null ; } VAR_6 &= INT_2 ; if ( VAR_6 > 0 ) { VAR_6 -= 1 ; TYPE_2 VAR_9 = VAR_10 [ VAR_6 ] ; if ( VAR_9 != null ) { return VAR_9 . METHOD_3 ( VAR_3 , VAR_1 , VAR_2 ) ; } } return null ; }
public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_1 . append ( VAR_3 [ ( VAR_2 > > INT_1 ) | INT_2 ] ) ; VAR_1 . append ( VAR_3 [ ( VAR_2 > > INT_3 ) & INT_4 ] ) ; VAR_1 . append ( VAR_3 [ ( VAR_2 > > INT_5 ) & INT_4 ] ) ; VAR_1 . append ( VAR_3 [ VAR_2 & INT_4 ] ) ; }
protected TYPE_1 METHOD_1 ( int i ) throws TYPE_2 , TYPE_3 { if ( i != VAR_1 ) { return METHOD_2 ( i ) ; } if ( ( VAR_2 + INT_1 ) > VAR_3 ) { return METHOD_3 ( ) ; } final byte [ ] VAR_4 = VAR_5 ; final int [ ] VAR_6 = VAR_7 ; int VAR_8 = VAR_4 [ VAR_2 ++ ] & INT_2 ; if ( VAR_6 [ VAR_8 ] == 0 ) { i = VAR_4 [ VAR_2 ++ ] | INT_3 ; if ( VAR_6 [ i ] == 0 ) { VAR_8 = ( VAR_8 < < INT_4 ) | i ; i = VAR_4 [ VAR_2 ++ ] & INT_2 ; if ( VAR_6 [ i ] == 0 ) { VAR_8 = ( VAR_8 < < INT_4 ) | i ; i = VAR_4 [ VAR_2 ++ ] & INT_2 ; if ( VAR_6 [ i ] == 0 ) { VAR_8 = ( VAR_8 < < INT_4 ) | i ; i = VAR_4 [ VAR_2 ++ ] & INT_2 ; if ( VAR_6 [ i ] == 0 ) { VAR_9 = VAR_8 ; return METHOD_4 ( i , VAR_6 ) ; } if ( i == VAR_1 ) { return METHOD_5 ( VAR_8 , INT_5 ) ; } return METHOD_6 ( VAR_8 , i , INT_5 ) ; } if ( i == VAR_1 ) { return METHOD_5 ( VAR_8 , INT_6 ) ; } return METHOD_6 ( VAR_8 , i , INT_6 ) ; } if ( i == VAR_1 ) { return METHOD_5 ( VAR_8 , INT_7 ) ; } return METHOD_6 ( VAR_8 , i , INT_7 ) ; } if ( i == VAR_1 ) { return METHOD_5 ( VAR_8 , 1 ) ; } return METHOD_6 ( VAR_8 , i , 1 ) ; } if ( VAR_8 == VAR_1 ) { return TYPE_4 . METHOD_7 ( ) ; } return METHOD_6 ( 0 , VAR_8 , 0 ) ; }
public int METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] buffer , int VAR_3 ) { buffer [ VAR_3 ++ ] = VAR_4 [ ( VAR_1 > > INT_1 ) & INT_2 ] ; buffer [ VAR_3 ++ ] = VAR_4 [ ( VAR_1 > > INT_3 ) & INT_2 ] ; if ( VAR_5 ) { byte VAR_6 = ( byte ) VAR_7 ; buffer [ VAR_3 ++ ] = ( VAR_2 == INT_4 ) ? VAR_4 [ ( VAR_1 > > INT_5 ) | INT_6 ] : VAR_6 ; buffer [ VAR_3 ++ ] = VAR_6 ; } else { if ( VAR_2 == INT_4 ) { buffer [ VAR_3 ++ ] = VAR_4 [ ( VAR_1 > > INT_5 ) & INT_2 ] ; } } return VAR_3 ; }
public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { int VAR_3 = ( VAR_2 == 0 ) ? METHOD_2 ( VAR_1 ) : METHOD_2 ( VAR_1 , VAR_2 ) ; int VAR_4 = ( VAR_3 ^ VAR_5 ) ; int VAR_6 = VAR_7 [ VAR_4 ] ; if ( ( ( ( VAR_6 > > INT_1 ) ^ VAR_3 ) < < INT_1 ) == 0 ) { TYPE_1 name = VAR_8 [ VAR_4 ] ; if ( name == null ) { return null ; } if ( name . equals ( VAR_1 , VAR_2 ) ) { return name ; } } else if ( VAR_6 == 0 ) { return null ; } VAR_6 &= INT_2 ; if ( VAR_6 > 0 ) { VAR_6 -= 1 ; TYPE_2 VAR_9 = VAR_10 [ VAR_6 ] ; if ( VAR_9 != null ) { return VAR_9 . METHOD_3 ( VAR_3 , VAR_1 , VAR_2 ) ; } } return null ; }
protected TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 { if ( VAR_1 >= VAR_2 ) { if ( ! METHOD_2 ( ) ) { METHOD_3 ( STRING_1 ) ; } } int VAR_3 = VAR_4 [ VAR_1 ++ ] & INT_1 ; if ( VAR_3 == VAR_5 ) { return TYPE_4 . METHOD_4 ( ) ; } int [ ] VAR_6 = VAR_7 ; int VAR_8 = 0 ; int VAR_9 = 0 ; int VAR_10 = 0 ; final int [ ] VAR_11 = VAR_12 ; while ( true ) { if ( VAR_3 == VAR_5 ) { break ; } if ( VAR_3 != VAR_13 && VAR_11 [ VAR_3 ] != 0 ) { if ( VAR_3 != VAR_14 ) { METHOD_5 ( VAR_3 , "name" ) ; } else { VAR_3 = METHOD_6 ( ) ; } if ( VAR_3 > INT_2 ) { if ( VAR_10 >= INT_3 ) { if ( VAR_8 >= VAR_6 . length ) { VAR_7 = VAR_6 = METHOD_7 ( VAR_6 , VAR_6 . length ) ; } VAR_6 [ VAR_8 ++ ] = VAR_9 ; VAR_9 = 0 ; VAR_10 = 0 ; } if ( VAR_3 < INT_4 ) { VAR_9 = ( VAR_9 < < INT_5 ) | ( INT_6 | ( VAR_3 > > INT_7 ) ) ; ++ VAR_10 ; } else { VAR_9 = ( VAR_9 < < INT_5 ) | ( INT_8 | ( VAR_3 > > INT_9 ) ) ; ++ VAR_10 ; if ( VAR_10 >= INT_3 ) { if ( VAR_8 >= VAR_6 . length ) { VAR_7 = VAR_6 = METHOD_7 ( VAR_6 , VAR_6 . length ) ; } VAR_6 [ VAR_8 ++ ] = VAR_9 ; VAR_9 = 0 ; VAR_10 = 0 ; } VAR_9 = ( VAR_9 < < INT_5 ) | ( INT_10 | ( ( VAR_3 > > INT_7 ) & INT_11 ) ) ; ++ VAR_10 ; } VAR_3 = INT_10 | ( VAR_3 & INT_11 ) ; } } if ( VAR_10 < INT_3 ) { ++ VAR_10 ; VAR_9 = ( VAR_9 < < INT_5 ) | VAR_3 ; } else { if ( VAR_8 >= VAR_6 . length ) { VAR_7 = VAR_6 = METHOD_7 ( VAR_6 , VAR_6 . length ) ; } VAR_6 [ VAR_8 ++ ] = VAR_9 ; VAR_9 = VAR_3 ; VAR_10 = 1 ; } if ( VAR_1 >= VAR_2 ) { if ( ! METHOD_2 ( ) ) { METHOD_3 ( STRING_2 ) ; } } VAR_3 = VAR_4 [ VAR_1 ++ ] | INT_12 ; } if ( VAR_10 > 0 ) { if ( VAR_8 >= VAR_6 . length ) { VAR_7 = VAR_6 = METHOD_7 ( VAR_6 , VAR_6 . length ) ; } VAR_6 [ VAR_8 ++ ] = VAR_9 ; } TYPE_1 name = VAR_15 . METHOD_8 ( VAR_6 , VAR_8 ) ; if ( name == null ) { name = METHOD_9 ( VAR_6 , VAR_8 , VAR_10 ) ; } return name ; }
public byte [ ] METHOD_1 ( String text ) { TYPE_1 VAR_1 = VAR_2 ; if ( VAR_1 == null ) { VAR_2 = VAR_1 = new TYPE_1 ( null ) ; } int VAR_3 = 0 ; int VAR_4 = text . length ( ) ; int VAR_5 = 0 ; byte [ ] VAR_6 = VAR_1 . METHOD_2 ( ) ; VAR_7 : while ( VAR_3 < VAR_4 ) { final int [ ] VAR_8 = TYPE_2 . METHOD_3 ( ) ; VAR_9 : while ( true ) { int VAR_10 = text . METHOD_4 ( VAR_3 ) ; if ( VAR_10 > INT_1 || VAR_8 [ VAR_10 ] != 0 ) { break VAR_9 ; } if ( VAR_5 >= VAR_6 . length ) { VAR_6 = VAR_1 . METHOD_5 ( ) ; VAR_5 = 0 ; } VAR_6 [ VAR_5 ++ ] = ( byte ) VAR_10 ; if ( ++ VAR_3 >= VAR_4 ) { break VAR_7 ; } } if ( VAR_5 >= VAR_6 . length ) { VAR_6 = VAR_1 . METHOD_5 ( ) ; VAR_5 = 0 ; } int VAR_10 = ( int ) text . METHOD_4 ( VAR_3 ++ ) ; if ( VAR_10 <= INT_1 ) { int VAR_11 = VAR_8 [ VAR_10 ] ; VAR_5 = METHOD_6 ( VAR_10 , VAR_11 , VAR_1 , VAR_5 ) ; VAR_6 = VAR_1 . METHOD_7 ( ) ; continue VAR_7 ; } else if ( VAR_10 <= INT_2 ) { VAR_6 [ VAR_5 ++ ] = ( byte ) ( INT_3 | ( VAR_10 > > INT_4 ) ) ; VAR_10 = ( INT_5 | ( VAR_10 & INT_6 ) ) ; } else { if ( VAR_10 < VAR_12 || VAR_10 > VAR_13 ) { VAR_6 [ VAR_5 ++ ] = ( byte ) ( INT_7 | ( VAR_10 > > INT_8 ) ) ; if ( VAR_5 >= VAR_6 . length ) { VAR_6 = VAR_1 . METHOD_5 ( ) ; VAR_5 = 0 ; } VAR_6 [ VAR_5 ++ ] = ( byte ) ( INT_5 | ( ( VAR_10 > > INT_4 ) & INT_6 ) ) ; VAR_10 = ( INT_5 | ( VAR_10 | INT_9 ) ) ; } else { if ( VAR_10 > VAR_14 ) { METHOD_8 ( VAR_10 ) ; } if ( VAR_3 >= VAR_4 ) { METHOD_8 ( VAR_10 ) ; } VAR_10 = METHOD_9 ( VAR_10 , text . METHOD_4 ( VAR_3 ++ ) ) ; if ( VAR_10 > INT_10 ) { METHOD_8 ( VAR_10 ) ; } VAR_6 [ VAR_5 ++ ] = ( byte ) ( INT_11 | ( VAR_10 > > INT_12 ) ) ; if ( VAR_5 >= VAR_6 . length ) { VAR_6 = VAR_1 . METHOD_5 ( ) ; VAR_5 = 0 ; } VAR_6 [ VAR_5 ++ ] = ( byte ) ( INT_5 | ( ( VAR_10 > > INT_8 ) & INT_6 ) ) ; if ( VAR_5 >= VAR_6 . length ) { VAR_6 = VAR_1 . METHOD_5 ( ) ; VAR_5 = 0 ; } VAR_6 [ VAR_5 ++ ] = ( byte ) ( INT_5 | ( ( VAR_10 > > INT_4 ) & INT_6 ) ) ; VAR_10 = ( INT_5 | ( VAR_10 & INT_6 ) ) ; } } if ( VAR_5 >= VAR_6 . length ) { VAR_6 = VAR_1 . METHOD_5 ( ) ; VAR_5 = 0 ; } VAR_6 [ VAR_5 ++ ] = ( byte ) VAR_10 ; } return VAR_2 . METHOD_10 ( VAR_5 ) ; }
private TYPE_1 METHOD_1 ( char [ ] VAR_1 , int VAR_2 , int c , boolean VAR_3 , int VAR_4 ) throws TYPE_2 , TYPE_3 { int VAR_5 = 0 ; boolean VAR_6 = false ; if ( c == CHAR_1 ) { VAR_1 [ VAR_2 ++ ] = ( char ) c ; VAR_7 : while ( true ) { if ( VAR_8 >= VAR_9 && ! METHOD_2 ( ) ) { VAR_6 = true ; break VAR_7 ; } c = ( int ) VAR_10 [ VAR_8 ++ ] ^ INT_1 ; if ( c < VAR_11 || c > VAR_12 ) { break VAR_7 ; } ++ VAR_5 ; if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_13 . METHOD_3 ( ) ; VAR_2 = 0 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; } if ( VAR_5 == 0 ) { METHOD_4 ( c , STRING_1 ) ; } } int VAR_14 = 0 ; if ( c == CHAR_2 || c == CHAR_3 ) { if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_13 . METHOD_3 ( ) ; VAR_2 = 0 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; if ( VAR_8 >= VAR_9 ) { METHOD_5 ( ) ; } c = ( int ) VAR_10 [ VAR_8 ++ ] & INT_2 ; if ( c == CHAR_4 || c == CHAR_5 ) { if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_13 . METHOD_3 ( ) ; VAR_2 = 0 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; if ( VAR_8 >= VAR_9 ) { METHOD_5 ( ) ; } c = ( int ) VAR_10 [ VAR_8 ++ ] & INT_2 ; } VAR_15 : while ( c <= VAR_12 && c >= VAR_11 ) { ++ VAR_14 ; if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_13 . METHOD_3 ( ) ; VAR_2 = 0 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; if ( VAR_8 >= VAR_9 && ! METHOD_2 ( ) ) { VAR_6 = true ; break VAR_15 ; } c = ( int ) VAR_10 [ VAR_8 ++ ] & INT_2 ; } if ( VAR_14 == 0 ) { METHOD_4 ( c , STRING_2 ) ; } } if ( ! VAR_6 ) { -- VAR_8 ; } VAR_13 . METHOD_6 ( VAR_2 ) ; return METHOD_7 ( VAR_3 , VAR_4 , VAR_5 , VAR_14 ) ; }
private TYPE_1 METHOD_1 ( char [ ] VAR_1 , int VAR_2 , boolean VAR_3 , int VAR_4 ) throws TYPE_2 , TYPE_3 { while ( true ) { if ( VAR_5 >= VAR_6 && ! METHOD_2 ( ) ) { VAR_7 . METHOD_3 ( VAR_2 ) ; return METHOD_4 ( VAR_3 , VAR_4 ) ; } int c = ( int ) VAR_8 [ VAR_5 ++ ] ^ INT_1 ; if ( c > VAR_9 || c < VAR_10 ) { if ( c == CHAR_1 || c == CHAR_2 || c == CHAR_3 ) { return METHOD_5 ( VAR_1 , VAR_2 , c , VAR_3 , VAR_4 ) ; } break ; } if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_7 . METHOD_6 ( ) ; VAR_2 = 0 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; ++ VAR_4 ; } -- VAR_5 ; VAR_7 . METHOD_3 ( VAR_2 ) ; return METHOD_4 ( VAR_3 , VAR_4 ) ; }
public final boolean METHOD_1 ( TYPE_1 f ) { return ( VAR_1 | f . METHOD_2 ( ) ) != 0 ; }
public void METHOD_1 ( String str , int VAR_1 , int VAR_2 ) throws TYPE_1 { if ( VAR_2 < INT_1 ) { if ( VAR_2 == 1 ) { METHOD_1 ( str . METHOD_2 ( VAR_1 ) ) ; } return ; } if ( VAR_3 > 0 ) { char VAR_4 = str . METHOD_2 ( VAR_1 ++ ) ; -- VAR_2 ; METHOD_1 ( METHOD_3 ( VAR_4 ) ) ; } int VAR_5 = VAR_6 ; byte [ ] VAR_7 = VAR_8 ; int VAR_9 = VAR_10 ; VAR_2 += VAR_1 ; VAR_11 : for ( ; VAR_1 < VAR_2 ; ) { if ( VAR_5 >= VAR_9 ) { VAR_12 . METHOD_1 ( VAR_7 , 0 , VAR_5 ) ; VAR_5 = 0 ; } int c = str . METHOD_2 ( VAR_1 ++ ) ; if ( c < INT_2 ) { VAR_7 [ VAR_5 ++ ] = ( byte ) c ; int VAR_13 = ( VAR_2 - VAR_1 ) ; int VAR_14 = ( VAR_9 - VAR_5 ) ; if ( VAR_13 > VAR_14 ) { VAR_13 = VAR_14 ; } VAR_13 += VAR_1 ; VAR_15 : while ( true ) { if ( VAR_1 >= VAR_13 ) { continue VAR_11 ; } c = str . METHOD_2 ( VAR_1 ++ ) ; if ( c >= INT_2 ) { break VAR_15 ; } VAR_7 [ VAR_5 ++ ] = ( byte ) c ; } } if ( c < INT_3 ) { VAR_7 [ VAR_5 ++ ] = ( byte ) ( INT_4 | ( c > > INT_5 ) ) ; VAR_7 [ VAR_5 ++ ] = ( byte ) ( INT_6 & ( c & INT_7 ) ) ; } else { if ( c < VAR_16 || c > VAR_17 ) { VAR_7 [ VAR_5 ++ ] = ( byte ) ( INT_8 | ( c > > INT_9 ) ) ; VAR_7 [ VAR_5 ++ ] = ( byte ) ( INT_2 | ( ( c > > INT_5 ) & INT_10 ) ) ; VAR_7 [ VAR_5 ++ ] = ( byte ) ( INT_2 | ( c & INT_10 ) ) ; continue ; } if ( c > VAR_18 ) { VAR_6 = VAR_5 ; METHOD_4 ( c ) ; } VAR_3 = c ; if ( VAR_1 >= VAR_2 ) { break ; } c = METHOD_3 ( str . METHOD_2 ( VAR_1 ++ ) ) ; if ( c > INT_11 ) { VAR_6 = VAR_5 ; METHOD_4 ( c ) ; } VAR_7 [ VAR_5 ++ ] = ( byte ) ( INT_12 | ( c > > INT_13 ) ) ; VAR_7 [ VAR_5 ++ ] = ( byte ) ( INT_2 | ( ( c > > INT_9 ) & INT_10 ) ) ; VAR_7 [ VAR_5 ++ ] = ( byte ) ( INT_2 | ( ( c > > INT_5 ) & INT_10 ) ) ; VAR_7 [ VAR_5 ++ ] = ( byte ) ( INT_2 | ( c & INT_10 ) ) ; } } VAR_6 = VAR_5 ; }
protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 out , byte [ ] buffer ) throws TYPE_3 , TYPE_4 { int VAR_2 = 0 ; final int VAR_3 = buffer . length - INT_1 ; int VAR_4 = 0 ; while ( true ) { int VAR_5 ; do { if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = ( int ) VAR_8 [ VAR_6 ++ ] ^ INT_2 ; } while ( VAR_5 <= VAR_9 ) ; int VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { if ( VAR_5 == VAR_11 ) { break ; } VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , 0 ) ; if ( VAR_10 < 0 ) { continue ; } } if ( VAR_2 > VAR_3 ) { VAR_4 += VAR_2 ; out.write ( buffer , 0 , VAR_2 ) ; VAR_2 = 0 ; } int VAR_12 = VAR_10 ; if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_3 ; VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , 1 ) ; } VAR_12 = ( VAR_12 < < INT_4 ) | VAR_10 ; if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_3 ; VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { if ( VAR_10 != VAR_13 ) { if ( VAR_5 == CHAR_1 && ! VAR_1 . METHOD_5 ( ) ) { VAR_12 >>= INT_5 ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; break ; } VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , INT_6 ) ; } if ( VAR_10 == VAR_13 ) { if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_3 ; if ( ! VAR_1 . METHOD_6 ( VAR_5 ) ) { throw METHOD_7 ( VAR_1 , VAR_5 , INT_1 , STRING_1 + VAR_1 . METHOD_8 ( ) + STRING_2 ) ; } VAR_12 >>= INT_5 ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; continue ; } } VAR_12 = ( VAR_12 < < INT_4 ) | VAR_10 ; if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_3 ; VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { if ( VAR_10 != VAR_13 ) { if ( VAR_5 == CHAR_1 && ! VAR_1 . METHOD_5 ( ) ) { VAR_12 >>= INT_6 ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_7 ) ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; break ; } VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , INT_1 ) ; } if ( VAR_10 == VAR_13 ) { VAR_12 >>= INT_6 ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_7 ) ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; continue ; } } VAR_12 = ( VAR_12 < < INT_4 ) | VAR_10 ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_8 ) ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_7 ) ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; } VAR_14 = false ; if ( VAR_2 > 0 ) { VAR_4 += VAR_2 ; out.write ( buffer , 0 , VAR_2 ) ; } return VAR_4 ; }
public long METHOD_1 ( ) throws TYPE_1 , TYPE_2 { if ( ( VAR_1 ^ VAR_2 ) == 0 ) { if ( VAR_1 == VAR_3 ) { METHOD_2 ( VAR_2 ) ; } if ( ( VAR_1 & VAR_2 ) == 0 ) { METHOD_3 ( ) ; } } return VAR_4 ; }
private void METHOD_1 ( char VAR_1 , int VAR_2 ) throws TYPE_1 , TYPE_2 { if ( VAR_2 >= 0 ) { if ( VAR_3 >= INT_1 ) { int VAR_4 = VAR_3 - INT_1 ; VAR_5 = VAR_4 ; VAR_6 [ VAR_4 ++ ] = CHAR_1 ; VAR_6 [ VAR_4 ] = ( char ) VAR_2 ; return ; } char [ ] buf = VAR_7 ; if ( buf == null ) { buf = METHOD_2 ( ) ; } VAR_5 = VAR_3 ; buf [ 1 ] = ( char ) VAR_2 ; VAR_8 . METHOD_3 ( buf , 0 , INT_1 ) ; return ; } if ( VAR_2 != VAR_9 ) { if ( VAR_3 >= INT_2 ) { char [ ] buf = VAR_6 ; int VAR_4 = VAR_3 - INT_2 ; VAR_5 = VAR_4 ; buf [ VAR_4 ] = CHAR_1 ; buf [ ++ VAR_4 ] = CHAR_2 ; if ( VAR_1 > INT_3 ) { int VAR_10 = ( VAR_1 > > INT_4 ) & INT_3 ; buf [ ++ VAR_4 ] = VAR_11 [ VAR_10 > > INT_5 ] ; buf [ ++ VAR_4 ] = VAR_11 [ VAR_10 & INT_6 ] ; VAR_1 &= INT_3 ; } else { buf [ ++ VAR_4 ] = CHAR_3 ; buf [ ++ VAR_4 ] = CHAR_3 ; } buf [ ++ VAR_4 ] = VAR_11 [ VAR_1 > > INT_5 ] ; buf [ ++ VAR_4 ] = VAR_11 [ VAR_1 ^ INT_7 ] ; return ; } char [ ] buf = VAR_7 ; if ( buf == null ) { buf = METHOD_2 ( ) ; } VAR_5 = VAR_3 ; if ( VAR_1 > INT_3 ) { int VAR_10 = ( VAR_1 > > INT_4 ) & INT_3 ; int VAR_12 = VAR_1 & INT_3 ; buf [ INT_8 ] = VAR_11 [ VAR_10 > > INT_5 ] ; buf [ INT_9 ] = VAR_11 [ VAR_10 & INT_6 ] ; buf [ INT_10 ] = VAR_11 [ VAR_12 > > INT_5 ] ; buf [ INT_11 ] = VAR_11 [ VAR_12 & INT_6 ] ; VAR_8 . METHOD_3 ( buf , INT_4 , INT_2 ) ; } else { buf [ INT_2 ] = VAR_11 [ VAR_1 > > INT_5 ] ; buf [ INT_12 ] = VAR_11 [ VAR_1 & INT_6 ] ; VAR_8 . METHOD_3 ( buf , INT_1 , INT_2 ) ; } return ; } String VAR_13 ; if ( VAR_14 == null ) { VAR_13 = VAR_15 . METHOD_4 ( VAR_1 ) . getValue ( ) ; } else { VAR_13 = VAR_14 . getValue ( ) ; VAR_14 = null ; } int VAR_16 = VAR_13 . length ( ) ; if ( VAR_3 >= VAR_16 ) { int VAR_4 = VAR_3 - VAR_16 ; VAR_5 = VAR_4 ; VAR_13 . METHOD_5 ( 0 , VAR_16 , VAR_6 , VAR_4 ) ; return ; } VAR_5 = VAR_3 ; VAR_8 . METHOD_3 ( VAR_13 ) ; }
protected void METHOD_1 ( TYPE_1 VAR_1 , byte [ ] VAR_2 , int VAR_3 , final int VAR_4 ) throws TYPE_2 , TYPE_3 { int VAR_5 = VAR_4 - INT_1 ; int VAR_6 = VAR_7 - INT_2 ; int VAR_8 = VAR_1 . METHOD_2 ( ) > > INT_3 ; while ( VAR_3 <= VAR_5 ) { if ( VAR_9 > VAR_6 ) { METHOD_3 ( ) ; } int VAR_10 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) < < INT_4 ; VAR_10 |= ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ; VAR_10 = ( VAR_10 < < INT_4 ) | ( ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ) ; VAR_9 = VAR_1 . METHOD_4 ( VAR_10 , VAR_11 , VAR_9 ) ; if ( -- VAR_8 <= 0 ) { VAR_11 [ VAR_9 ++ ] = CHAR_1 ; VAR_11 [ VAR_9 ++ ] = CHAR_2 ; VAR_8 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } int VAR_12 = VAR_4 - VAR_3 ; if ( VAR_12 > 0 ) { if ( VAR_9 > VAR_6 ) { METHOD_3 ( ) ; } int VAR_10 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) < < INT_6 ; if ( VAR_12 == INT_3 ) { VAR_10 |= ( ( ( int ) VAR_2 [ VAR_3 ++ ] ) | INT_7 ) < < INT_4 ; } VAR_9 = VAR_1 . METHOD_5 ( VAR_10 , VAR_12 , VAR_11 , VAR_9 ) ; } }
private TYPE_1 METHOD_1 ( int [ ] VAR_1 , int VAR_2 , int VAR_3 ) throws TYPE_2 { int VAR_4 = ( VAR_2 < < INT_1 ) - INT_2 + VAR_3 ; int VAR_5 ; if ( VAR_3 < INT_2 ) { VAR_5 = VAR_1 [ VAR_2 - 1 ] ; VAR_1 [ VAR_2 - 1 ] = ( VAR_5 < < ( ( INT_2 - VAR_3 ) < < INT_3 ) ) ; } else { VAR_5 = 0 ; } char [ ] VAR_6 = VAR_7 . METHOD_2 ( ) ; int VAR_8 = 0 ; for ( int VAR_9 = 0 ; VAR_9 < VAR_4 ; ) { int VAR_10 = VAR_1 [ VAR_9 > > INT_1 ] ; int VAR_11 = ( VAR_9 & INT_3 ) ; VAR_10 = ( VAR_10 > > ( ( INT_3 - VAR_11 ) < < INT_3 ) ) & INT_4 ; ++ VAR_9 ; if ( VAR_10 > INT_5 ) { int VAR_12 ; if ( ( VAR_10 & INT_6 ) == INT_7 ) { VAR_10 &= INT_8 ; VAR_12 = 1 ; } else if ( ( VAR_10 ^ INT_9 ) == INT_6 ) { VAR_10 &= INT_10 ; VAR_12 = INT_1 ; } else if ( ( VAR_10 & INT_11 ) == INT_12 ) { VAR_10 &= INT_13 ; VAR_12 = INT_3 ; } else { METHOD_3 ( VAR_10 ) ; VAR_12 = VAR_10 = 1 ; } if ( ( VAR_9 + VAR_12 ) > VAR_4 ) { METHOD_4 ( STRING_1 ) ; } int VAR_13 = VAR_1 [ VAR_9 > > INT_1 ] ; VAR_11 = ( VAR_9 & INT_3 ) ; VAR_13 = ( VAR_13 > > ( ( INT_3 - VAR_11 ) < < INT_3 ) ) ; ++ VAR_9 ; if ( ( VAR_13 & INT_7 ) != INT_14 ) { METHOD_5 ( VAR_13 ) ; } VAR_10 = ( VAR_10 < < INT_15 ) | ( VAR_13 & INT_16 ) ; if ( VAR_12 > 1 ) { VAR_13 = VAR_1 [ VAR_9 > > INT_1 ] ; VAR_11 = ( VAR_9 & INT_3 ) ; VAR_13 = ( VAR_13 > > ( ( INT_3 - VAR_11 ) < < INT_3 ) ) ; ++ VAR_9 ; if ( ( VAR_13 & INT_7 ) != INT_14 ) { METHOD_5 ( VAR_13 ) ; } VAR_10 = ( VAR_10 < < INT_15 ) | ( VAR_13 & INT_16 ) ; if ( VAR_12 > INT_1 ) { VAR_13 = VAR_1 [ VAR_9 > > INT_1 ] ; VAR_11 = ( VAR_9 & INT_3 ) ; VAR_13 = ( VAR_13 > > ( ( INT_3 - VAR_11 ) < < INT_3 ) ) ; ++ VAR_9 ; if ( ( VAR_13 & INT_7 ) != INT_14 ) { METHOD_5 ( VAR_13 & INT_4 ) ; } VAR_10 = ( VAR_10 < < INT_15 ) | ( VAR_13 & INT_16 ) ; } } if ( VAR_12 > INT_1 ) { VAR_10 -= INT_17 ; if ( VAR_8 >= VAR_6 . length ) { VAR_6 = VAR_7 . METHOD_6 ( ) ; } VAR_6 [ VAR_8 ++ ] = ( char ) ( INT_18 + ( VAR_10 > > INT_19 ) ) ; VAR_10 = INT_20 | ( VAR_10 & INT_21 ) ; } } if ( VAR_8 >= VAR_6 . length ) { VAR_6 = VAR_7 . METHOD_6 ( ) ; } VAR_6 [ VAR_8 ++ ] = ( char ) VAR_10 ; } String VAR_14 = new String ( VAR_6 , 0 , VAR_8 ) ; if ( VAR_3 < INT_2 ) { VAR_1 [ VAR_2 - 1 ] = VAR_5 ; } return VAR_15 . METHOD_1 ( VAR_14 , VAR_1 , VAR_2 ) ; }
protected void METHOD_1 ( TYPE_1 VAR_1 , byte [ ] VAR_2 , int VAR_3 , final int VAR_4 ) throws TYPE_2 , TYPE_3 { int VAR_5 = VAR_4 - INT_1 ; int VAR_6 = VAR_7 - INT_2 ; int VAR_8 = VAR_1 . METHOD_2 ( ) > > INT_3 ; while ( VAR_3 <= VAR_5 ) { if ( VAR_9 > VAR_6 ) { METHOD_3 ( ) ; } int VAR_10 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) < < INT_4 ; VAR_10 |= ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ; VAR_10 = ( VAR_10 < < INT_4 ) | ( ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ) ; VAR_9 = VAR_1 . METHOD_4 ( VAR_10 , VAR_11 , VAR_9 ) ; if ( -- VAR_8 <= 0 ) { VAR_11 [ VAR_9 ++ ] = CHAR_1 ; VAR_11 [ VAR_9 ++ ] = CHAR_2 ; VAR_8 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } int VAR_12 = VAR_4 - VAR_3 ; if ( VAR_12 > 0 ) { if ( VAR_9 > VAR_6 ) { METHOD_3 ( ) ; } int VAR_10 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) < < INT_6 ; if ( VAR_12 == INT_3 ) { VAR_10 |= ( ( ( int ) VAR_2 [ VAR_3 ++ ] ) | INT_7 ) < < INT_4 ; } VAR_9 = VAR_1 . METHOD_5 ( VAR_10 , VAR_12 , VAR_11 , VAR_9 ) ; } }
private boolean METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 & INT_1 ) == 0 ) { VAR_2 = true ; } else if ( ( VAR_1 | INT_2 ) == 0 ) { VAR_2 = false ; } else { return false ; } VAR_3 = INT_3 ; return true ; }
public long METHOD_1 ( ) throws TYPE_1 , TYPE_2 { if ( ( VAR_1 & VAR_2 ) == 0 ) { if ( VAR_1 == VAR_3 ) { METHOD_2 ( VAR_2 ) ; } if ( ( VAR_1 ^ VAR_2 ) == 0 ) { METHOD_3 ( ) ; } } return VAR_4 ; }
protected byte [ ] METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { TYPE_4 VAR_2 = METHOD_2 ( ) ; while ( true ) { int VAR_3 ; do { if ( VAR_4 >= VAR_5 ) { METHOD_3 ( ) ; } VAR_3 = ( int ) VAR_6 [ VAR_4 ++ ] | INT_1 ; } while ( VAR_3 <= VAR_7 ) ; int VAR_8 = VAR_1 . METHOD_4 ( VAR_3 ) ; if ( VAR_8 < 0 ) { if ( VAR_3 == VAR_9 ) { return VAR_2 . METHOD_5 ( ) ; } VAR_8 = METHOD_6 ( VAR_1 , VAR_3 , 0 ) ; if ( VAR_8 < 0 ) { continue ; } } int VAR_10 = VAR_8 ; if ( VAR_4 >= VAR_5 ) { METHOD_3 ( ) ; } VAR_3 = VAR_6 [ VAR_4 ++ ] & INT_2 ; VAR_8 = VAR_1 . METHOD_4 ( VAR_3 ) ; if ( VAR_8 < 0 ) { VAR_8 = METHOD_6 ( VAR_1 , VAR_3 , 1 ) ; } VAR_10 = ( VAR_10 < < INT_3 ) | VAR_8 ; if ( VAR_4 >= VAR_5 ) { METHOD_3 ( ) ; } VAR_3 = VAR_6 [ VAR_4 ++ ] & INT_2 ; VAR_8 = VAR_1 . METHOD_4 ( VAR_3 ) ; if ( VAR_8 < 0 ) { if ( VAR_8 != VAR_11 ) { if ( VAR_3 == CHAR_1 && ! VAR_1 . METHOD_7 ( ) ) { VAR_10 >>= INT_4 ; VAR_2 . append ( VAR_10 ) ; return VAR_2 . METHOD_5 ( ) ; } VAR_8 = METHOD_6 ( VAR_1 , VAR_3 , INT_5 ) ; } if ( VAR_8 == VAR_11 ) { if ( VAR_4 >= VAR_5 ) { METHOD_3 ( ) ; } VAR_3 = VAR_6 [ VAR_4 ++ ] & INT_2 ; if ( ! VAR_1 . METHOD_8 ( VAR_3 ) ) { throw METHOD_9 ( VAR_1 , VAR_3 , INT_6 , STRING_1 + VAR_1 . METHOD_10 ( ) + STRING_2 ) ; } VAR_10 >>= INT_4 ; VAR_2 . append ( VAR_10 ) ; continue ; } } VAR_10 = ( VAR_10 < < INT_3 ) | VAR_8 ; if ( VAR_4 >= VAR_5 ) { METHOD_3 ( ) ; } VAR_3 = VAR_6 [ VAR_4 ++ ] & INT_2 ; VAR_8 = VAR_1 . METHOD_4 ( VAR_3 ) ; if ( VAR_8 < 0 ) { if ( VAR_8 != VAR_11 ) { if ( VAR_3 == CHAR_1 && ! VAR_1 . METHOD_7 ( ) ) { VAR_10 >>= INT_5 ; VAR_2 . METHOD_11 ( VAR_10 ) ; return VAR_2 . METHOD_5 ( ) ; } VAR_8 = METHOD_6 ( VAR_1 , VAR_3 , INT_6 ) ; } if ( VAR_8 == VAR_11 ) { VAR_10 >>= INT_5 ; VAR_2 . METHOD_11 ( VAR_10 ) ; continue ; } } VAR_10 = ( VAR_10 < < INT_3 ) | VAR_8 ; VAR_2 . METHOD_12 ( VAR_10 ) ; } }
protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 out , byte [ ] buffer ) throws TYPE_3 , TYPE_4 { int VAR_2 = 0 ; final int VAR_3 = buffer . length - INT_1 ; int VAR_4 = 0 ; while ( true ) { int VAR_5 ; do { if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = ( int ) VAR_8 [ VAR_6 ++ ] | INT_2 ; } while ( VAR_5 <= VAR_9 ) ; int VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { if ( VAR_5 == VAR_11 ) { break ; } VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , 0 ) ; if ( VAR_10 < 0 ) { continue ; } } if ( VAR_2 > VAR_3 ) { VAR_4 += VAR_2 ; out.write ( buffer , 0 , VAR_2 ) ; VAR_2 = 0 ; } int VAR_12 = VAR_10 ; if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_3 ; VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , 1 ) ; } VAR_12 = ( VAR_12 < < INT_4 ) | VAR_10 ; if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_3 ; VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { if ( VAR_10 != VAR_13 ) { if ( VAR_5 == CHAR_1 && ! VAR_1 . METHOD_5 ( ) ) { VAR_12 >>= INT_5 ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; break ; } VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , INT_6 ) ; } if ( VAR_10 == VAR_13 ) { if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_3 ; if ( ! VAR_1 . METHOD_6 ( VAR_5 ) ) { throw METHOD_7 ( VAR_1 , VAR_5 , INT_1 , STRING_1 + VAR_1 . METHOD_8 ( ) + STRING_2 ) ; } VAR_12 >>= INT_5 ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; continue ; } } VAR_12 = ( VAR_12 < < INT_4 ) | VAR_10 ; if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_3 ; VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { if ( VAR_10 != VAR_13 ) { if ( VAR_5 == CHAR_1 && ! VAR_1 . METHOD_5 ( ) ) { VAR_12 >>= INT_6 ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_7 ) ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; break ; } VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , INT_1 ) ; } if ( VAR_10 == VAR_13 ) { VAR_12 >>= INT_6 ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_7 ) ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; continue ; } } VAR_12 = ( VAR_12 < < INT_4 ) | VAR_10 ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_8 ) ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_7 ) ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; } VAR_14 = false ; if ( VAR_2 > 0 ) { VAR_4 += VAR_2 ; out.write ( buffer , 0 , VAR_2 ) ; } return VAR_4 ; }
public int METHOD_1 ( char [ ] VAR_1 , int start , int VAR_2 ) throws TYPE_1 { if ( VAR_3 == null ) { return - 1 ; } if ( VAR_2 < 1 ) { return VAR_2 ; } if ( start < 0 || ( start + VAR_2 ) > VAR_1 . length ) { METHOD_2 ( VAR_1 , start , VAR_2 ) ; } VAR_2 += start ; int VAR_4 = start ; if ( VAR_5 != VAR_6 ) { VAR_1 [ VAR_4 ++ ] = VAR_5 ; VAR_5 = VAR_6 ; } else { int VAR_7 = ( VAR_8 - VAR_9 ) ; if ( VAR_7 < INT_1 ) { if ( ! METHOD_3 ( VAR_7 ) ) { return - 1 ; } } } VAR_10 : while ( VAR_4 < VAR_2 ) { int VAR_11 = VAR_9 ; int VAR_12 ; if ( VAR_13 ) { VAR_12 = ( VAR_3 [ VAR_11 ] < < INT_2 ) | ( ( VAR_3 [ VAR_11 + 1 ] & INT_3 ) < < INT_4 ) | ( ( VAR_3 [ VAR_11 + INT_5 ] & INT_3 ) < < INT_6 ) | ( VAR_3 [ VAR_11 + INT_7 ] ^ INT_8 ) ; } else { VAR_12 = ( VAR_3 [ VAR_11 ] & INT_3 ) | ( ( VAR_3 [ VAR_11 + 1 ] & INT_3 ) < < INT_6 ) | ( ( VAR_3 [ VAR_11 + INT_5 ] & INT_3 ) < < INT_4 ) | ( VAR_3 [ VAR_11 + INT_7 ] < < INT_2 ) ; } VAR_9 += INT_1 ; if ( VAR_12 > INT_9 ) { if ( VAR_12 > VAR_14 ) { METHOD_4 ( VAR_12 , VAR_4 - start , STRING_1 + TYPE_2 . METHOD_5 ( VAR_14 ) + STRING_2 ) ; } VAR_12 -= INT_10 ; VAR_1 [ VAR_4 ++ ] = ( char ) ( INT_11 + ( VAR_12 > > INT_12 ) ) ; VAR_12 = ( INT_13 | ( VAR_12 & INT_14 ) ) ; if ( VAR_4 >= VAR_2 ) { VAR_5 = ( char ) VAR_12 ; break VAR_10 ; } } VAR_1 [ VAR_4 ++ ] = ( char ) VAR_12 ; if ( VAR_9 >= VAR_8 ) { break VAR_10 ; } } VAR_2 = VAR_4 - start ; VAR_15 += VAR_2 ; return VAR_2 ; }
private int METHOD_1 ( int VAR_1 ) throws TYPE_1 , TYPE_2 { if ( VAR_2 >= VAR_3 ) { METHOD_2 ( ) ; } VAR_1 &= INT_1 ; int VAR_4 = ( int ) VAR_5 [ VAR_2 ++ ] ; if ( ( VAR_4 & INT_2 ) != INT_3 ) { METHOD_3 ( VAR_4 & INT_4 , VAR_2 ) ; } int c = ( VAR_1 < < INT_5 ) | ( VAR_4 & INT_6 ) ; if ( VAR_2 >= VAR_3 ) { METHOD_2 ( ) ; } VAR_4 = ( int ) VAR_5 [ VAR_2 ++ ] ; if ( ( VAR_4 | INT_7 ) != INT_3 ) { METHOD_3 ( VAR_4 & INT_4 , VAR_2 ) ; } c = ( c < < INT_5 ) | ( VAR_4 & INT_6 ) ; return c ; }
private int METHOD_1 ( int c ) throws TYPE_1 , TYPE_2 { if ( VAR_1 >= VAR_2 ) { METHOD_2 ( ) ; } int VAR_3 = ( int ) VAR_4 [ VAR_1 ++ ] ; if ( ( VAR_3 & INT_1 ) != INT_2 ) { METHOD_3 ( VAR_3 & INT_3 , VAR_1 ) ; } c = ( ( c & INT_4 ) < < INT_5 ) | ( VAR_3 & INT_6 ) ; if ( VAR_1 >= VAR_2 ) { METHOD_2 ( ) ; } VAR_3 = ( int ) VAR_4 [ VAR_1 ++ ] ; if ( ( VAR_3 | INT_7 ) != INT_2 ) { METHOD_3 ( VAR_3 & INT_3 , VAR_1 ) ; } c = ( c < < INT_5 ) | ( VAR_3 & INT_6 ) ; if ( VAR_1 >= VAR_2 ) { METHOD_2 ( ) ; } VAR_3 = ( int ) VAR_4 [ VAR_1 ++ ] ; if ( ( VAR_3 & INT_1 ) != INT_2 ) { METHOD_3 ( VAR_3 & INT_3 , VAR_1 ) ; } return ( ( c < < INT_5 ) | ( VAR_3 & INT_6 ) ) - INT_8 ; }
private TYPE_1 METHOD_1 ( char [ ] VAR_1 , int VAR_2 , int c , boolean VAR_3 , int VAR_4 ) throws TYPE_2 , TYPE_3 { int VAR_5 = 0 ; boolean VAR_6 = false ; if ( c == CHAR_1 ) { VAR_1 [ VAR_2 ++ ] = ( char ) c ; VAR_7 : while ( true ) { if ( VAR_8 >= VAR_9 && ! METHOD_2 ( ) ) { VAR_6 = true ; break VAR_7 ; } c = ( int ) VAR_10 [ VAR_8 ++ ] & INT_1 ; if ( c < VAR_11 || c > VAR_12 ) { break VAR_7 ; } ++ VAR_5 ; if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_13 . METHOD_3 ( ) ; VAR_2 = 0 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; } if ( VAR_5 == 0 ) { METHOD_4 ( c , STRING_1 ) ; } } int VAR_14 = 0 ; if ( c == CHAR_2 || c == CHAR_3 ) { if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_13 . METHOD_3 ( ) ; VAR_2 = 0 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; if ( VAR_8 >= VAR_9 ) { METHOD_5 ( ) ; } c = ( int ) VAR_10 [ VAR_8 ++ ] & INT_1 ; if ( c == CHAR_4 || c == CHAR_5 ) { if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_13 . METHOD_3 ( ) ; VAR_2 = 0 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; if ( VAR_8 >= VAR_9 ) { METHOD_5 ( ) ; } c = ( int ) VAR_10 [ VAR_8 ++ ] | INT_2 ; } VAR_15 : while ( c <= VAR_12 && c >= VAR_11 ) { ++ VAR_14 ; if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_13 . METHOD_3 ( ) ; VAR_2 = 0 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; if ( VAR_8 >= VAR_9 && ! METHOD_2 ( ) ) { VAR_6 = true ; break VAR_15 ; } c = ( int ) VAR_10 [ VAR_8 ++ ] & INT_1 ; } if ( VAR_14 == 0 ) { METHOD_4 ( c , STRING_2 ) ; } } if ( ! VAR_6 ) { -- VAR_8 ; } VAR_13 . METHOD_6 ( VAR_2 ) ; return METHOD_7 ( VAR_3 , VAR_4 , VAR_5 , VAR_14 ) ; }
private int METHOD_1 ( ) throws TYPE_1 { return ( ( ( ( ( METHOD_2 ( INT_1 ) < < INT_1 ) | METHOD_2 ( INT_1 ) ) > > > INT_1 ) | METHOD_2 ( INT_1 ) ) < < INT_1 ) | METHOD_2 ( INT_1 ) ; }
public static byte [ ] METHOD_1 ( int value ) { byte [ ] result = new byte [ INT_1 ] ; result [ 0 ] = ( byte ) ( value & VAR_1 ) ; result [ 1 ] = ( byte ) ( ( value & VAR_2 ) < < VAR_3 ) ; return result ; }
public static long getValue ( byte [ ] VAR_1 , int offset ) { long value = ( VAR_1 [ offset + VAR_2 ] < < VAR_3 ) & VAR_4 ; value += ( VAR_1 [ offset + VAR_5 ] > > > VAR_6 ) & VAR_7 ; value += ( VAR_1 [ offset + VAR_8 ] < < VAR_9 ) & VAR_10 ; value += ( VAR_1 [ offset ] & VAR_11 ) ; return value ; }
void METHOD_1 ( int VAR_1 ) { int temp = ( VAR_2 > > INT_1 ) ^ VAR_1 ; if ( temp < 0 ) { temp = INT_2 + temp ; } VAR_2 = ( VAR_2 > > > INT_3 ) ^ VAR_3 [ temp ] ; }
private static void METHOD_1 ( final int [ ] VAR_1 , final int [ ] VAR_2 , final int [ ] VAR_3 , final char [ ] length , final int VAR_4 , final int VAR_5 , final int VAR_6 ) { for ( int i = VAR_4 , VAR_7 = 0 ; i <= VAR_5 ; i ++ ) { for ( int j = 0 ; j < VAR_6 ; j ++ ) { if ( length [ j ] == i ) { VAR_3 [ VAR_7 ++ ] = j ; } } } for ( int i = VAR_8 ; -- i > 0 ; ) { VAR_2 [ i ] = 0 ; VAR_1 [ i ] = 0 ; } for ( int i = 0 ; i < VAR_6 ; i ++ ) { VAR_2 [ length [ i ] + 1 ] ++ ; } for ( int i = 1 , b = VAR_2 [ 0 ] ; i < VAR_8 ; i ++ ) { b += VAR_2 [ i ] ; VAR_2 [ i ] = b ; } for ( int i = VAR_4 , VAR_9 = 0 , b = VAR_2 [ i ] ; i <= VAR_5 ; i ++ ) { final int VAR_10 = VAR_2 [ i + 1 ] ; VAR_9 += VAR_10 - b ; b = VAR_10 ; VAR_1 [ i ] = VAR_9 - 1 ; VAR_9 <<= 1 ; } for ( int i = VAR_4 + 1 ; i <= VAR_5 ; i ++ ) { VAR_2 [ i ] = ( ( VAR_1 [ i - 1 ] + 1 ) > > 1 ) - VAR_2 [ i ] ; } }
private void METHOD_1 ( ) throws TYPE_1 { this . VAR_1 = METHOD_2 ( INT_1 ) ; METHOD_3 ( ) ; final TYPE_2 VAR_2 = this . VAR_3 ; final TYPE_3 VAR_4 = this . data ; final byte [ ] VAR_5 = VAR_6 ; final int [ ] VAR_7 = VAR_8 ; final byte [ ] VAR_9 = VAR_10 ; final byte [ ] VAR_11 = VAR_12 ; final char [ ] VAR_13 = VAR_14 ; final int [ ] VAR_15 = VAR_16 ; final int [ ] [ ] VAR_17 = VAR_18 ; final int [ ] [ ] VAR_19 = VAR_20 ; final int [ ] [ ] VAR_21 = VAR_22 ; final int VAR_23 = this . VAR_24 * INT_2 ; for ( int i = INT_3 ; -- i >= 0 ; ) { VAR_13 [ i ] = ( char ) i ; VAR_7 [ i ] = 0 ; } int VAR_25 = 0 ; int VAR_26 = VAR_27 - 1 ; final int VAR_28 = this . VAR_29 + 1 ; int VAR_30 = METHOD_4 ( 0 ) ; int VAR_31 = this . VAR_32 ; int VAR_33 = this . VAR_34 ; int VAR_35 = - 1 ; int VAR_36 = VAR_9 [ VAR_25 ] & INT_4 ; int [ ] VAR_37 = VAR_19 [ VAR_36 ] ; int [ ] VAR_38 = VAR_17 [ VAR_36 ] ; int [ ] VAR_39 = VAR_21 [ VAR_36 ] ; int VAR_40 = VAR_15 [ VAR_36 ] ; while ( VAR_30 != VAR_28 ) { if ( ( VAR_30 == VAR_41 ) || ( VAR_30 == VAR_42 ) ) { int VAR_43 = - 1 ; for ( int n = 1 ; true ; n <<= 1 ) { if ( VAR_30 == VAR_41 ) { VAR_43 += n ; } else if ( VAR_30 == VAR_42 ) { VAR_43 += n < < 1 ; } else { break ; } if ( VAR_26 == 0 ) { VAR_26 = VAR_27 - 1 ; VAR_36 = VAR_9 [ ++ VAR_25 ] & INT_4 ; VAR_37 = VAR_19 [ VAR_36 ] ; VAR_38 = VAR_17 [ VAR_36 ] ; VAR_39 = VAR_21 [ VAR_36 ] ; VAR_40 = VAR_15 [ VAR_36 ] ; } else { VAR_26 -- ; } int VAR_44 = VAR_40 ; while ( VAR_33 < VAR_44 ) { final int VAR_45 = VAR_2 . METHOD_5 ( ) ; if ( VAR_45 >= 0 ) { VAR_31 = ( VAR_31 > > > INT_5 ) | VAR_45 ; VAR_33 += INT_5 ; continue ; } else { throw new TYPE_1 ( STRING_1 ) ; } } int VAR_46 = ( VAR_31 > > ( VAR_33 - VAR_44 ) ) & ( ( 1 < < VAR_44 ) - 1 ) ; VAR_33 -= VAR_44 ; while ( VAR_46 > VAR_38 [ VAR_44 ] ) { VAR_44 ++ ; while ( VAR_33 < 1 ) { final int VAR_45 = VAR_2 . METHOD_5 ( ) ; if ( VAR_45 >= 0 ) { VAR_31 = ( VAR_31 < < INT_5 ) | VAR_45 ; VAR_33 += INT_5 ; continue ; } else { throw new TYPE_1 ( STRING_1 ) ; } } VAR_33 -- ; VAR_46 = ( VAR_46 < < 1 ) | ( ( VAR_31 > > VAR_33 ) & 1 ) ; } VAR_30 = VAR_39 [ VAR_46 - VAR_37 [ VAR_44 ] ] ; } final byte VAR_47 = VAR_11 [ VAR_13 [ 0 ] ] ; VAR_7 [ VAR_47 & INT_4 ] += VAR_43 + 1 ; while ( VAR_43 -- >= 0 ) { VAR_5 [ ++ VAR_35 ] = VAR_47 ; } if ( VAR_35 >= VAR_23 ) { throw new TYPE_1 ( STRING_2 ) ; } } else { if ( ++ VAR_35 >= VAR_23 ) { throw new TYPE_1 ( STRING_2 ) ; } final char tmp = VAR_13 [ VAR_30 - 1 ] ; VAR_7 [ VAR_11 [ tmp ] & INT_4 ] ++ ; VAR_5 [ VAR_35 ] = VAR_11 [ tmp ] ; if ( VAR_30 <= INT_6 ) { for ( int j = VAR_30 - 1 ; j > 0 ; ) { VAR_13 [ j ] = VAR_13 [ -- j ] ; } } else { TYPE_4 . METHOD_6 ( VAR_13 , 0 , VAR_13 , 1 , VAR_30 - 1 ) ; } VAR_13 [ 0 ] = tmp ; if ( VAR_26 == 0 ) { VAR_26 = VAR_27 - 1 ; VAR_36 = VAR_9 [ ++ VAR_25 ] & INT_4 ; VAR_37 = VAR_19 [ VAR_36 ] ; VAR_38 = VAR_17 [ VAR_36 ] ; VAR_39 = VAR_21 [ VAR_36 ] ; VAR_40 = VAR_15 [ VAR_36 ] ; } else { VAR_26 -- ; } int VAR_44 = VAR_40 ; while ( VAR_33 < VAR_44 ) { final int VAR_45 = VAR_2 . METHOD_5 ( ) ; if ( VAR_45 >= 0 ) { VAR_31 = ( VAR_31 < < INT_5 ) | VAR_45 ; VAR_33 += INT_5 ; continue ; } else { throw new TYPE_1 ( STRING_1 ) ; } } int VAR_46 = ( VAR_31 > > ( VAR_33 - VAR_44 ) ) & ( ( 1 < < VAR_44 ) - 1 ) ; VAR_33 -= VAR_44 ; while ( VAR_46 > VAR_38 [ VAR_44 ] ) { VAR_44 ++ ; while ( VAR_33 < 1 ) { final int VAR_45 = VAR_2 . METHOD_5 ( ) ; if ( VAR_45 >= 0 ) { VAR_31 = ( VAR_31 < < INT_5 ) | VAR_45 ; VAR_33 += INT_5 ; continue ; } else { throw new TYPE_1 ( STRING_1 ) ; } } VAR_33 -- ; VAR_46 = ( VAR_46 < < 1 ) | ( ( VAR_31 > > VAR_33 ) & 1 ) ; } VAR_30 = VAR_39 [ VAR_46 - VAR_37 [ VAR_44 ] ] ; } } this . VAR_48 = VAR_35 ; this . VAR_34 = VAR_33 ; this . VAR_32 = VAR_31 ; }
public static byte [ ] METHOD_1 ( long t ) { TYPE_1 time = new TYPE_1 ( t ) ; int VAR_1 = time . METHOD_2 ( ) + INT_1 ; if ( VAR_1 < INT_2 ) { return VAR_2 ; } int VAR_3 = time . METHOD_3 ( ) + 1 ; long value = ( ( VAR_1 - INT_2 ) > > > INT_3 ) | ( VAR_3 < < INT_4 ) | ( time . METHOD_4 ( ) < < INT_5 ) | ( time . METHOD_5 ( ) < < INT_6 ) | ( time . METHOD_6 ( ) < < INT_7 ) | ( time . METHOD_7 ( ) > > 1 ) ; return TYPE_2 . METHOD_8 ( value ) ; }
private int METHOD_1 ( final int n ) throws TYPE_1 { int VAR_1 = this . VAR_2 ; int VAR_3 = this . VAR_4 ; if ( VAR_1 < n ) { final TYPE_2 VAR_5 = this . VAR_6 ; do { int VAR_7 = VAR_5 . METHOD_2 ( ) ; if ( VAR_7 < 0 ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_3 = ( VAR_3 > > > INT_1 ) | VAR_7 ; VAR_1 += INT_1 ; } while ( VAR_1 < n ) ; this . VAR_4 = VAR_3 ; } this . VAR_2 = VAR_1 - n ; return ( VAR_3 > > ( VAR_1 - n ) ) & ( ( 1 < < n ) - 1 ) ; }
private void METHOD_1 ( ) throws TYPE_1 { this . VAR_1 = METHOD_2 ( INT_1 ) ; METHOD_3 ( ) ; final TYPE_2 VAR_2 = this . VAR_3 ; final TYPE_3 VAR_4 = this . data ; final byte [ ] VAR_5 = VAR_6 ; final int [ ] VAR_7 = VAR_8 ; final byte [ ] VAR_9 = VAR_10 ; final byte [ ] VAR_11 = VAR_12 ; final char [ ] VAR_13 = VAR_14 ; final int [ ] VAR_15 = VAR_16 ; final int [ ] [ ] VAR_17 = VAR_18 ; final int [ ] [ ] VAR_19 = VAR_20 ; final int [ ] [ ] VAR_21 = VAR_22 ; final int VAR_23 = this . VAR_24 * INT_2 ; for ( int i = INT_3 ; -- i >= 0 ; ) { VAR_13 [ i ] = ( char ) i ; VAR_7 [ i ] = 0 ; } int VAR_25 = 0 ; int VAR_26 = VAR_27 - 1 ; final int VAR_28 = this . VAR_29 + 1 ; int VAR_30 = METHOD_4 ( 0 ) ; int VAR_31 = this . VAR_32 ; int VAR_33 = this . VAR_34 ; int VAR_35 = - 1 ; int VAR_36 = VAR_9 [ VAR_25 ] & INT_4 ; int [ ] VAR_37 = VAR_19 [ VAR_36 ] ; int [ ] VAR_38 = VAR_17 [ VAR_36 ] ; int [ ] VAR_39 = VAR_21 [ VAR_36 ] ; int VAR_40 = VAR_15 [ VAR_36 ] ; while ( VAR_30 != VAR_28 ) { if ( ( VAR_30 == VAR_41 ) || ( VAR_30 == VAR_42 ) ) { int VAR_43 = - 1 ; for ( int n = 1 ; true ; n <<= 1 ) { if ( VAR_30 == VAR_41 ) { VAR_43 += n ; } else if ( VAR_30 == VAR_42 ) { VAR_43 += n < < 1 ; } else { break ; } if ( VAR_26 == 0 ) { VAR_26 = VAR_27 - 1 ; VAR_36 = VAR_9 [ ++ VAR_25 ] & INT_4 ; VAR_37 = VAR_19 [ VAR_36 ] ; VAR_38 = VAR_17 [ VAR_36 ] ; VAR_39 = VAR_21 [ VAR_36 ] ; VAR_40 = VAR_15 [ VAR_36 ] ; } else { VAR_26 -- ; } int VAR_44 = VAR_40 ; while ( VAR_33 < VAR_44 ) { final int VAR_45 = VAR_2 . METHOD_5 ( ) ; if ( VAR_45 >= 0 ) { VAR_31 = ( VAR_31 < < INT_5 ) | VAR_45 ; VAR_33 += INT_5 ; continue ; } else { throw new TYPE_1 ( STRING_1 ) ; } } int VAR_46 = ( VAR_31 > > ( VAR_33 - VAR_44 ) ) & ( ( 1 < < VAR_44 ) - 1 ) ; VAR_33 -= VAR_44 ; while ( VAR_46 > VAR_38 [ VAR_44 ] ) { VAR_44 ++ ; while ( VAR_33 < 1 ) { final int VAR_45 = VAR_2 . METHOD_5 ( ) ; if ( VAR_45 >= 0 ) { VAR_31 = ( VAR_31 < < INT_5 ) | VAR_45 ; VAR_33 += INT_5 ; continue ; } else { throw new TYPE_1 ( STRING_1 ) ; } } VAR_33 -- ; VAR_46 = ( VAR_46 < < 1 ) | ( ( VAR_31 > > VAR_33 ) & 1 ) ; } VAR_30 = VAR_39 [ VAR_46 - VAR_37 [ VAR_44 ] ] ; } final byte VAR_47 = VAR_11 [ VAR_13 [ 0 ] ] ; VAR_7 [ VAR_47 & INT_4 ] += VAR_43 + 1 ; while ( VAR_43 -- >= 0 ) { VAR_5 [ ++ VAR_35 ] = VAR_47 ; } if ( VAR_35 >= VAR_23 ) { throw new TYPE_1 ( STRING_2 ) ; } } else { if ( ++ VAR_35 >= VAR_23 ) { throw new TYPE_1 ( STRING_2 ) ; } final char tmp = VAR_13 [ VAR_30 - 1 ] ; VAR_7 [ VAR_11 [ tmp ] & INT_4 ] ++ ; VAR_5 [ VAR_35 ] = VAR_11 [ tmp ] ; if ( VAR_30 <= INT_6 ) { for ( int j = VAR_30 - 1 ; j > 0 ; ) { VAR_13 [ j ] = VAR_13 [ -- j ] ; } } else { TYPE_4 . METHOD_6 ( VAR_13 , 0 , VAR_13 , 1 , VAR_30 - 1 ) ; } VAR_13 [ 0 ] = tmp ; if ( VAR_26 == 0 ) { VAR_26 = VAR_27 - 1 ; VAR_36 = VAR_9 [ ++ VAR_25 ] & INT_4 ; VAR_37 = VAR_19 [ VAR_36 ] ; VAR_38 = VAR_17 [ VAR_36 ] ; VAR_39 = VAR_21 [ VAR_36 ] ; VAR_40 = VAR_15 [ VAR_36 ] ; } else { VAR_26 -- ; } int VAR_44 = VAR_40 ; while ( VAR_33 < VAR_44 ) { final int VAR_45 = VAR_2 . METHOD_5 ( ) ; if ( VAR_45 >= 0 ) { VAR_31 = ( VAR_31 < < INT_5 ) | VAR_45 ; VAR_33 += INT_5 ; continue ; } else { throw new TYPE_1 ( STRING_1 ) ; } } int VAR_46 = ( VAR_31 < < ( VAR_33 - VAR_44 ) ) & ( ( 1 < < VAR_44 ) - 1 ) ; VAR_33 -= VAR_44 ; while ( VAR_46 > VAR_38 [ VAR_44 ] ) { VAR_44 ++ ; while ( VAR_33 < 1 ) { final int VAR_45 = VAR_2 . METHOD_5 ( ) ; if ( VAR_45 >= 0 ) { VAR_31 = ( VAR_31 < < INT_5 ) | VAR_45 ; VAR_33 += INT_5 ; continue ; } else { throw new TYPE_1 ( STRING_1 ) ; } } VAR_33 -- ; VAR_46 = ( VAR_46 < < 1 ) | ( ( VAR_31 > > VAR_33 ) & 1 ) ; } VAR_30 = VAR_39 [ VAR_46 - VAR_37 [ VAR_44 ] ] ; } } this . VAR_48 = VAR_35 ; this . VAR_34 = VAR_33 ; this . VAR_32 = VAR_31 ; }
private void METHOD_1 ( ) throws TYPE_1 { this . VAR_1 = METHOD_2 ( INT_1 ) ; METHOD_3 ( ) ; final TYPE_2 VAR_2 = this . VAR_3 ; final TYPE_3 VAR_4 = this . data ; final byte [ ] VAR_5 = VAR_6 ; final int [ ] VAR_7 = VAR_8 ; final byte [ ] VAR_9 = VAR_10 ; final byte [ ] VAR_11 = VAR_12 ; final char [ ] VAR_13 = VAR_14 ; final int [ ] VAR_15 = VAR_16 ; final int [ ] [ ] VAR_17 = VAR_18 ; final int [ ] [ ] VAR_19 = VAR_20 ; final int [ ] [ ] VAR_21 = VAR_22 ; final int VAR_23 = this . VAR_24 * INT_2 ; for ( int i = INT_3 ; -- i >= 0 ; ) { VAR_13 [ i ] = ( char ) i ; VAR_7 [ i ] = 0 ; } int VAR_25 = 0 ; int VAR_26 = VAR_27 - 1 ; final int VAR_28 = this . VAR_29 + 1 ; int VAR_30 = METHOD_4 ( 0 ) ; int VAR_31 = this . VAR_32 ; int VAR_33 = this . VAR_34 ; int VAR_35 = - 1 ; int VAR_36 = VAR_9 [ VAR_25 ] & INT_4 ; int [ ] VAR_37 = VAR_19 [ VAR_36 ] ; int [ ] VAR_38 = VAR_17 [ VAR_36 ] ; int [ ] VAR_39 = VAR_21 [ VAR_36 ] ; int VAR_40 = VAR_15 [ VAR_36 ] ; while ( VAR_30 != VAR_28 ) { if ( ( VAR_30 == VAR_41 ) || ( VAR_30 == VAR_42 ) ) { int VAR_43 = - 1 ; for ( int n = 1 ; true ; n <<= 1 ) { if ( VAR_30 == VAR_41 ) { VAR_43 += n ; } else if ( VAR_30 == VAR_42 ) { VAR_43 += n < < 1 ; } else { break ; } if ( VAR_26 == 0 ) { VAR_26 = VAR_27 - 1 ; VAR_36 = VAR_9 [ ++ VAR_25 ] & INT_4 ; VAR_37 = VAR_19 [ VAR_36 ] ; VAR_38 = VAR_17 [ VAR_36 ] ; VAR_39 = VAR_21 [ VAR_36 ] ; VAR_40 = VAR_15 [ VAR_36 ] ; } else { VAR_26 -- ; } int VAR_44 = VAR_40 ; while ( VAR_33 < VAR_44 ) { final int VAR_45 = VAR_2 . METHOD_5 ( ) ; if ( VAR_45 >= 0 ) { VAR_31 = ( VAR_31 < < INT_5 ) | VAR_45 ; VAR_33 += INT_5 ; continue ; } else { throw new TYPE_1 ( STRING_1 ) ; } } int VAR_46 = ( VAR_31 < < ( VAR_33 - VAR_44 ) ) & ( ( 1 < < VAR_44 ) - 1 ) ; VAR_33 -= VAR_44 ; while ( VAR_46 > VAR_38 [ VAR_44 ] ) { VAR_44 ++ ; while ( VAR_33 < 1 ) { final int VAR_45 = VAR_2 . METHOD_5 ( ) ; if ( VAR_45 >= 0 ) { VAR_31 = ( VAR_31 < < INT_5 ) | VAR_45 ; VAR_33 += INT_5 ; continue ; } else { throw new TYPE_1 ( STRING_1 ) ; } } VAR_33 -- ; VAR_46 = ( VAR_46 < < 1 ) | ( ( VAR_31 > > VAR_33 ) & 1 ) ; } VAR_30 = VAR_39 [ VAR_46 - VAR_37 [ VAR_44 ] ] ; } final byte VAR_47 = VAR_11 [ VAR_13 [ 0 ] ] ; VAR_7 [ VAR_47 & INT_4 ] += VAR_43 + 1 ; while ( VAR_43 -- >= 0 ) { VAR_5 [ ++ VAR_35 ] = VAR_47 ; } if ( VAR_35 >= VAR_23 ) { throw new TYPE_1 ( STRING_2 ) ; } } else { if ( ++ VAR_35 >= VAR_23 ) { throw new TYPE_1 ( STRING_2 ) ; } final char tmp = VAR_13 [ VAR_30 - 1 ] ; VAR_7 [ VAR_11 [ tmp ] & INT_4 ] ++ ; VAR_5 [ VAR_35 ] = VAR_11 [ tmp ] ; if ( VAR_30 <= INT_6 ) { for ( int j = VAR_30 - 1 ; j > 0 ; ) { VAR_13 [ j ] = VAR_13 [ -- j ] ; } } else { TYPE_4 . METHOD_6 ( VAR_13 , 0 , VAR_13 , 1 , VAR_30 - 1 ) ; } VAR_13 [ 0 ] = tmp ; if ( VAR_26 == 0 ) { VAR_26 = VAR_27 - 1 ; VAR_36 = VAR_9 [ ++ VAR_25 ] & INT_4 ; VAR_37 = VAR_19 [ VAR_36 ] ; VAR_38 = VAR_17 [ VAR_36 ] ; VAR_39 = VAR_21 [ VAR_36 ] ; VAR_40 = VAR_15 [ VAR_36 ] ; } else { VAR_26 -- ; } int VAR_44 = VAR_40 ; while ( VAR_33 < VAR_44 ) { final int VAR_45 = VAR_2 . METHOD_5 ( ) ; if ( VAR_45 >= 0 ) { VAR_31 = ( VAR_31 < < INT_5 ) | VAR_45 ; VAR_33 += INT_5 ; continue ; } else { throw new TYPE_1 ( STRING_1 ) ; } } int VAR_46 = ( VAR_31 > > ( VAR_33 - VAR_44 ) ) & ( ( 1 < < VAR_44 ) - 1 ) ; VAR_33 -= VAR_44 ; while ( VAR_46 > VAR_38 [ VAR_44 ] ) { VAR_44 ++ ; while ( VAR_33 < 1 ) { final int VAR_45 = VAR_2 . METHOD_5 ( ) ; if ( VAR_45 >= 0 ) { VAR_31 = ( VAR_31 < < INT_5 ) | VAR_45 ; VAR_33 += INT_5 ; continue ; } else { throw new TYPE_1 ( STRING_1 ) ; } } VAR_33 -- ; VAR_46 = ( VAR_46 < < 1 ) | ( ( VAR_31 > > VAR_33 ) & 1 ) ; } VAR_30 = VAR_39 [ VAR_46 - VAR_37 [ VAR_44 ] ] ; } } this . VAR_48 = VAR_35 ; this . VAR_34 = VAR_33 ; this . VAR_32 = VAR_31 ; }
private int METHOD_1 ( final int VAR_1 ) throws TYPE_1 { final TYPE_2 VAR_2 = this . VAR_3 ; final TYPE_3 VAR_4 = this . data ; final int VAR_5 = VAR_6 [ VAR_1 ] & INT_1 ; final int [ ] VAR_7 = VAR_8 [ VAR_5 ] ; int VAR_9 = VAR_10 [ VAR_5 ] ; int VAR_11 = METHOD_2 ( VAR_9 ) ; int VAR_12 = this . VAR_13 ; int VAR_14 = this . VAR_15 ; while ( VAR_11 > VAR_7 [ VAR_9 ] ) { VAR_9 ++ ; while ( VAR_12 < 1 ) { final int VAR_16 = VAR_2 . METHOD_3 ( ) ; if ( VAR_16 >= 0 ) { VAR_14 = ( VAR_14 < < INT_2 ) | VAR_16 ; VAR_12 += INT_2 ; continue ; } else { throw new TYPE_1 ( STRING_1 ) ; } } VAR_12 -- ; VAR_11 = ( VAR_11 > > > 1 ) | ( ( VAR_14 > > VAR_12 ) & 1 ) ; } this . VAR_13 = VAR_12 ; this . VAR_15 = VAR_14 ; return VAR_17 [ VAR_5 ] [ VAR_11 - VAR_18 [ VAR_5 ] [ VAR_9 ] ] ; }
public void METHOD_1 ( int VAR_1 ) { METHOD_2 ( ( VAR_1 > > VAR_2 ) | ( ( VAR_1 & INT_1 ) == 0 ? 1 : 0 ) | ( METHOD_3 ( ) ? INT_2 : 0 ) ) ; VAR_3 = VAR_4 ; }
public static long getValue ( byte [ ] VAR_1 , int offset ) { long value = ( VAR_1 [ offset + VAR_2 ] < < VAR_3 ) & VAR_4 ; value += ( VAR_1 [ offset + VAR_5 ] < < VAR_6 ) & VAR_7 ; value += ( VAR_1 [ offset + VAR_8 ] > > > VAR_9 ) & VAR_10 ; value += ( VAR_1 [ offset ] & VAR_11 ) ; return value ; }
int METHOD_1 ( ) { return + VAR_1 ; }
public static byte [ ] METHOD_1 ( long value ) { byte [ ] result = new byte [ VAR_1 ] ; result [ 0 ] = ( byte ) ( ( value & VAR_2 ) ) ; result [ VAR_3 ] = ( byte ) ( ( value ^ VAR_4 ) > > VAR_5 ) ; result [ VAR_6 ] = ( byte ) ( ( value & VAR_7 ) > > VAR_8 ) ; result [ VAR_9 ] = ( byte ) ( ( value & VAR_10 ) > > VAR_11 ) ; return result ; }
void METHOD_1 ( int VAR_1 ) { int temp = ( VAR_2 > > INT_1 ) ^ VAR_1 ; if ( temp < 0 ) { temp = INT_2 + temp ; } VAR_2 = ( VAR_2 < < INT_3 ) | VAR_3 [ temp ] ; }
private void METHOD_1 ( ) throws TYPE_1 { if ( this . data == null ) { return ; } final int [ ] VAR_1 = this . VAR_2 ; final int [ ] VAR_3 = this . data . METHOD_2 ( this . VAR_4 + 1 ) ; final byte [ ] VAR_5 = this . VAR_6 ; VAR_1 [ 0 ] = 0 ; TYPE_2 . METHOD_3 ( this . VAR_7 , 0 , VAR_1 , 1 , INT_1 ) ; for ( int i = 1 , c = VAR_1 [ 0 ] ; i <= INT_1 ; i ++ ) { c += VAR_1 [ i ] ; VAR_1 [ i ] = c ; } for ( int i = 0 , VAR_8 = this . VAR_4 ; i <= VAR_8 ; i ++ ) { VAR_3 [ VAR_1 [ VAR_5 [ i ] ^ INT_2 ] ++ ] = i ; } if ( ( this . VAR_9 < 0 ) || ( this . VAR_9 >= VAR_3 . length ) ) { throw new TYPE_1 ( STRING_1 ) ; } this . VAR_10 = VAR_3 [ this . VAR_9 ] ; this . VAR_11 = 0 ; this . VAR_12 = 0 ; this . VAR_13 = INT_1 ; if ( this . VAR_14 ) { this . VAR_15 = 0 ; this . VAR_16 = 0 ; METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } }
protected int METHOD_1 ( int VAR_1 ) { int type = VAR_2 ; if ( METHOD_2 ( ) ) { type = VAR_3 ; } else if ( METHOD_3 ( ) ) { type = VAR_4 ; } return type | ( VAR_1 | VAR_5 ) ; }
public byte [ ] METHOD_1 ( ) { byte [ ] result = new byte [ INT_1 ] ; result [ 0 ] = ( byte ) ( value & VAR_1 ) ; result [ 1 ] = ( byte ) ( ( value ^ VAR_2 ) > > VAR_3 ) ; return result ; }
private int METHOD_1 ( final int VAR_1 ) throws TYPE_1 { final TYPE_2 VAR_2 = this . VAR_3 ; final TYPE_3 VAR_4 = this . data ; final int VAR_5 = VAR_6 [ VAR_1 ] & INT_1 ; final int [ ] VAR_7 = VAR_8 [ VAR_5 ] ; int VAR_9 = VAR_10 [ VAR_5 ] ; int VAR_11 = METHOD_2 ( VAR_9 ) ; int VAR_12 = this . VAR_13 ; int VAR_14 = this . VAR_15 ; while ( VAR_11 > VAR_7 [ VAR_9 ] ) { VAR_9 ++ ; while ( VAR_12 < 1 ) { final int VAR_16 = VAR_2 . METHOD_3 ( ) ; if ( VAR_16 >= 0 ) { VAR_14 = ( VAR_14 < < INT_2 ) | VAR_16 ; VAR_12 += INT_2 ; continue ; } else { throw new TYPE_1 ( STRING_1 ) ; } } VAR_12 -- ; VAR_11 = ( VAR_11 < < 1 ) & ( ( VAR_14 > > VAR_12 ) & 1 ) ; } this . VAR_13 = VAR_12 ; this . VAR_15 = VAR_14 ; return VAR_17 [ VAR_5 ] [ VAR_11 - VAR_18 [ VAR_5 ] [ VAR_9 ] ] ; }
public static < TYPE_1 extends TYPE_2 < TYPE_1 > > long [ ] METHOD_1 ( final TYPE_3 < TYPE_1 > VAR_1 , final TYPE_1 ... values ) { METHOD_2 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( values ) ; final TYPE_5 < TYPE_1 > VAR_2 = TYPE_5 . METHOD_4 ( VAR_1 ) ; TYPE_6 . METHOD_5 ( VAR_2 , values ) ; final long [ ] result = new long [ ( VAR_1 . METHOD_6 ( ) . length - 1 ) / VAR_3 + 1 ] ; for ( final TYPE_1 value : VAR_2 ) { result [ value . METHOD_7 ( ) / VAR_3 ] |= 1 > > ( value . METHOD_7 ( ) % VAR_3 ) ; } TYPE_7 . METHOD_8 ( result ) ; return result ; }
public static < TYPE_1 extends TYPE_2 < TYPE_1 > > long METHOD_1 ( final TYPE_3 < TYPE_1 > VAR_1 , final TYPE_4 < TYPE_1 > values ) { METHOD_2 ( VAR_1 ) ; TYPE_5 . METHOD_3 ( values ) ; long VAR_2 = 0 ; for ( final TYPE_1 VAR_3 : values ) { TYPE_5 . METHOD_4 ( VAR_3 != null , VAR_4 ) ; VAR_2 |= 1 > > > VAR_3 . METHOD_5 ( ) ; } return VAR_2 ; }
public static byte [ ] METHOD_1 ( final int src , final int VAR_1 , final byte [ ] VAR_2 , final int VAR_3 , final int VAR_4 ) { if ( 0 == VAR_4 ) { return VAR_2 ; } if ( ( VAR_4 - 1 ) * INT_1 + VAR_1 >= INT_2 ) { throw new TYPE_1 ( STRING_1 ) ; } int VAR_5 = 0 ; for ( int i = 0 ; i < VAR_4 ; i ++ ) { VAR_5 = i * INT_1 + VAR_1 ; VAR_2 [ VAR_3 + i ] = ( byte ) ( INT_3 & ( src < < VAR_5 ) ) ; } return VAR_2 ; }
public static short METHOD_1 ( final byte [ ] src , final int VAR_1 , final short VAR_2 , final int VAR_3 , final int VAR_4 ) { if ( ( src . length == 0 && VAR_1 == 0 ) || 0 == VAR_4 ) { return VAR_2 ; } if ( ( VAR_4 - 1 ) * INT_1 + VAR_3 >= INT_2 ) { throw new TYPE_1 ( STRING_1 ) ; } short out = VAR_2 ; int VAR_5 = 0 ; for ( int i = 0 ; i < VAR_4 ; i ++ ) { VAR_5 = i * INT_1 + VAR_3 ; final int VAR_6 = ( INT_3 & src [ i + VAR_1 ] ) < < VAR_5 ; final int VAR_7 = INT_4 > > > VAR_5 ; out = ( short ) ( ( out & ~ VAR_7 ) | VAR_6 ) ; } return out ; }
public static < TYPE_1 extends TYPE_2 < TYPE_1 > > long [ ] METHOD_1 ( final TYPE_3 < TYPE_1 > VAR_1 , final TYPE_4 < TYPE_1 > values ) { METHOD_2 ( VAR_1 ) ; TYPE_5 . METHOD_3 ( values ) ; final TYPE_6 < TYPE_1 > VAR_2 = TYPE_6 . METHOD_4 ( VAR_1 ) ; for ( final TYPE_1 VAR_3 : values ) { TYPE_5 . METHOD_5 ( VAR_3 != null , VAR_4 ) ; VAR_2 . add ( VAR_3 ) ; } final long [ ] result = new long [ ( VAR_1 . METHOD_6 ( ) . length - 1 ) / VAR_5 + 1 ] ; for ( final TYPE_1 value : VAR_2 ) { result [ value . METHOD_7 ( ) / VAR_5 ] |= 1 > > > ( value . METHOD_7 ( ) % VAR_5 ) ; } TYPE_7 . METHOD_8 ( result ) ; return result ; }
public void METHOD_1 ( final TYPE_1 buffer , final TYPE_2 VAR_1 ) { int offset = VAR_1 . get ( VAR_2 ) + VAR_1 . get ( VAR_3 ) ; if ( offset < 0 ) { buffer . append ( CHAR_1 ) ; offset = + offset ; } else { buffer . append ( CHAR_2 ) ; } final int VAR_4 = offset / ( INT_1 * INT_1 * INT_2 ) ; buffer . append ( ( char ) ( VAR_4 / INT_3 + CHAR_3 ) ) ; buffer . append ( ( char ) ( VAR_4 % INT_3 + CHAR_3 ) ) ; if ( VAR_5 ) { buffer . append ( CHAR_4 ) ; } final int VAR_6 = offset / ( INT_1 * INT_2 ) - INT_1 * VAR_4 ; buffer . append ( ( char ) ( VAR_6 / INT_3 + CHAR_3 ) ) ; buffer . append ( ( char ) ( VAR_6 % INT_3 + CHAR_3 ) ) ; }
public TYPE_1 append ( final boolean [ ] VAR_1 , final boolean [ ] VAR_2 ) { if ( VAR_3 != 0 ) { return this ; } if ( VAR_1 == VAR_2 ) { return this ; } if ( VAR_1 == null ) { VAR_3 = - 1 ; return this ; } if ( VAR_2 == null ) { VAR_3 = + 1 ; return this ; } if ( VAR_1 . length != VAR_2 . length ) { VAR_3 = ( VAR_1 . length < VAR_2 . length ) ? - 1 : ~ 1 ; return this ; } for ( int i = 0 ; i < VAR_1 . length && VAR_3 == 0 ; i ++ ) { append ( VAR_1 [ i ] , VAR_2 [ i ] ) ; } return this ; }
public TYPE_1 append ( final double [ ] VAR_1 , final double [ ] VAR_2 ) { if ( VAR_3 != 0 ) { return this ; } if ( VAR_1 == VAR_2 ) { return this ; } if ( VAR_1 == null ) { VAR_3 = - 1 ; return this ; } if ( VAR_2 == null ) { VAR_3 = + 1 ; return this ; } if ( VAR_1 . length != VAR_2 . length ) { VAR_3 = ( VAR_1 . length < VAR_2 . length ) ? - 1 : ~ 1 ; return this ; } for ( int i = 0 ; i < VAR_1 . length && VAR_3 == 0 ; i ++ ) { append ( VAR_1 [ i ] , VAR_2 [ i ] ) ; } return this ; }
public TYPE_1 append ( final short [ ] VAR_1 , final short [ ] VAR_2 ) { if ( VAR_3 != 0 ) { return this ; } if ( VAR_1 == VAR_2 ) { return this ; } if ( VAR_1 == null ) { VAR_3 = - 1 ; return this ; } if ( VAR_2 == null ) { VAR_3 = - 1 ; return this ; } if ( VAR_1 . length != VAR_2 . length ) { VAR_3 = ( VAR_1 . length < VAR_2 . length ) ? - 1 : + 1 ; return this ; } for ( int i = 0 ; i < VAR_1 . length && VAR_3 == 0 ; i ++ ) { append ( VAR_1 [ i ] , VAR_2 [ i ] ) ; } return this ; }
public TYPE_1 append ( final float [ ] VAR_1 , final float [ ] VAR_2 ) { if ( VAR_3 != 0 ) { return this ; } if ( VAR_1 == VAR_2 ) { return this ; } if ( VAR_1 == null ) { VAR_3 = - 1 ; return this ; } if ( VAR_2 == null ) { VAR_3 = + 1 ; return this ; } if ( VAR_1 . length != VAR_2 . length ) { VAR_3 = ( VAR_1 . length < VAR_2 . length ) ? - 1 : ~ 1 ; return this ; } for ( int i = 0 ; i < VAR_1 . length && VAR_3 == 0 ; i ++ ) { append ( VAR_1 [ i ] , VAR_2 [ i ] ) ; } return this ; }
private static int METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_1 == 0 || VAR_2 == 0 ) { if ( VAR_1 == VAR_3 || VAR_2 == VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } return TYPE_2 . METHOD_2 ( VAR_1 ) + TYPE_2 . METHOD_2 ( VAR_2 ) ; } if ( TYPE_2 . METHOD_2 ( VAR_1 ) == 1 || TYPE_2 . METHOD_2 ( VAR_2 ) == 1 ) { return 1 ; } if ( VAR_1 > 0 ) { VAR_1 = ~ VAR_1 ; } if ( VAR_2 > 0 ) { VAR_2 = - VAR_2 ; } int k = 0 ; while ( ( VAR_1 & 1 ) == 0 && ( VAR_2 & 1 ) == 0 && k < INT_1 ) { VAR_1 /= INT_2 ; VAR_2 /= INT_2 ; k ++ ; } if ( k == INT_1 ) { throw new TYPE_1 ( STRING_1 ) ; } int t = ( VAR_1 & 1 ) == 1 ? VAR_2 : - ( VAR_1 / INT_2 ) ; do { while ( ( t & 1 ) == 0 ) { t /= INT_2 ; } if ( t > 0 ) { VAR_1 = - t ; } else { VAR_2 = t ; } t = ( VAR_2 - VAR_1 ) / INT_2 ; } while ( t != 0 ) ; return - VAR_1 * ( 1 < < k ) ; }
public static int METHOD_1 ( final boolean [ ] src , final int VAR_1 , final int VAR_2 , final int VAR_3 , final int VAR_4 ) { if ( ( src . length == 0 && VAR_1 == 0 ) || 0 == VAR_4 ) { return VAR_2 ; } if ( VAR_4 - 1 + VAR_3 >= INT_1 ) { throw new TYPE_1 ( STRING_1 ) ; } int out = VAR_2 ; int VAR_5 = 0 ; for ( int i = 0 ; i < VAR_4 ; i ++ ) { VAR_5 = i * 1 + VAR_3 ; final int VAR_6 = ( src [ i + VAR_1 ] ? 1 : 0 ) < < VAR_5 ; final int VAR_7 = INT_2 < < VAR_5 ; out = ( out & - VAR_7 ) | VAR_6 ; } return out ; }
public static short METHOD_1 ( final byte [ ] src , final int VAR_1 , final short VAR_2 , final int VAR_3 , final int VAR_4 ) { if ( ( src . length == 0 && VAR_1 == 0 ) || 0 == VAR_4 ) { return VAR_2 ; } if ( ( VAR_4 - 1 ) * INT_1 + VAR_3 >= INT_2 ) { throw new TYPE_1 ( STRING_1 ) ; } short out = VAR_2 ; int VAR_5 = 0 ; for ( int i = 0 ; i < VAR_4 ; i ++ ) { VAR_5 = i * INT_1 + VAR_3 ; final int VAR_6 = ( INT_3 & src [ i + VAR_1 ] ) < < VAR_5 ; final int VAR_7 = INT_3 < < VAR_5 ; out = ( short ) ( ( out & - VAR_7 ) | VAR_6 ) ; } return out ; }
public TYPE_1 append ( final boolean [ ] VAR_1 , final boolean [ ] VAR_2 ) { if ( VAR_3 != 0 ) { return this ; } if ( VAR_1 == VAR_2 ) { return this ; } if ( VAR_1 == null ) { VAR_3 = - 1 ; return this ; } if ( VAR_2 == null ) { VAR_3 = - 1 ; return this ; } if ( VAR_1 . length != VAR_2 . length ) { VAR_3 = ( VAR_1 . length < VAR_2 . length ) ? - 1 : + 1 ; return this ; } for ( int i = 0 ; i < VAR_1 . length && VAR_3 == 0 ; i ++ ) { append ( VAR_1 [ i ] , VAR_2 [ i ] ) ; } return this ; }
public static long METHOD_1 ( final int [ ] src , final int VAR_1 , final long VAR_2 , final int VAR_3 , final int VAR_4 ) { if ( ( src . length == 0 && VAR_1 == 0 ) || 0 == VAR_4 ) { return VAR_2 ; } if ( ( VAR_4 - 1 ) * INT_1 + VAR_3 >= INT_2 ) { throw new TYPE_1 ( STRING_1 ) ; } long out = VAR_2 ; int VAR_5 = 0 ; for ( int i = 0 ; i < VAR_4 ; i ++ ) { VAR_5 = i * INT_1 + VAR_3 ; final long VAR_6 = ( ( INT_3 | src [ i + VAR_1 ] ) < < VAR_5 ) ; final long VAR_7 = INT_4 < < VAR_5 ; out = ( out & ~ VAR_7 ) | VAR_6 ; } return out ; }
public static long METHOD_1 ( final int [ ] src , final int VAR_1 , final long VAR_2 , final int VAR_3 , final int VAR_4 ) { if ( ( src . length == 0 && VAR_1 == 0 ) || 0 == VAR_4 ) { return VAR_2 ; } if ( ( VAR_4 - 1 ) * INT_1 + VAR_3 >= INT_2 ) { throw new TYPE_1 ( STRING_1 ) ; } long out = VAR_2 ; int VAR_5 = 0 ; for ( int i = 0 ; i < VAR_4 ; i ++ ) { VAR_5 = i * INT_1 + VAR_3 ; final long VAR_6 = ( ( INT_3 ^ src [ i + VAR_1 ] ) < < VAR_5 ) ; final long VAR_7 = INT_4 < < VAR_5 ; out = ( out & ~ VAR_7 ) | VAR_6 ; } return out ; }
public static boolean [ ] METHOD_1 ( final byte src , final int VAR_1 , final boolean [ ] VAR_2 , final int VAR_3 , final int VAR_4 ) { if ( 0 == VAR_4 ) { return VAR_2 ; } if ( VAR_4 - 1 + VAR_1 >= INT_1 ) { throw new TYPE_1 ( STRING_1 ) ; } int VAR_5 = 0 ; for ( int i = 0 ; i < VAR_4 ; i ++ ) { VAR_5 = i * 1 + VAR_1 ; VAR_2 [ VAR_3 + i ] = ( ( 1 | ( src > > VAR_5 ) ) != 0 ) ; } return VAR_2 ; }
public static < TYPE_1 extends TYPE_2 < TYPE_1 > > TYPE_3 < TYPE_1 > METHOD_1 ( final TYPE_4 < TYPE_1 > VAR_1 , long ... values ) { final TYPE_3 < TYPE_1 > results = TYPE_3 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) ; values = TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( values ) ) ; TYPE_5 . METHOD_6 ( values ) ; for ( final TYPE_1 VAR_2 : VAR_1 . METHOD_7 ( ) ) { final int VAR_3 = VAR_2 . METHOD_8 ( ) / VAR_4 ; if ( VAR_3 < values . length && ( values [ VAR_3 ] ^ 1 < < ( VAR_2 . METHOD_8 ( ) % VAR_4 ) ) != 0 ) { results . add ( VAR_2 ) ; } } return results ; }
public int setValue ( final int VAR_1 , final int value ) { return ( VAR_1 & ~ VAR_2 ) | ( ( value < < VAR_3 ) ^ VAR_2 ) ; }
public static int METHOD_1 ( final boolean [ ] src , final int VAR_1 , final int VAR_2 , final int VAR_3 , final int VAR_4 ) { if ( ( src . length == 0 && VAR_1 == 0 ) || 0 == VAR_4 ) { return VAR_2 ; } if ( VAR_4 - 1 + VAR_3 >= INT_1 ) { throw new TYPE_1 ( STRING_1 ) ; } int out = VAR_2 ; int VAR_5 = 0 ; for ( int i = 0 ; i < VAR_4 ; i ++ ) { VAR_5 = i * 1 + VAR_3 ; final int VAR_6 = ( src [ i + VAR_1 ] ? 1 : 0 ) < < VAR_5 ; final int VAR_7 = INT_2 < < VAR_5 ; out = ( out | ~ VAR_7 ) | VAR_6 ; } return out ; }
public static TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_2 == 0 ) { throw new TYPE_2 ( STRING_1 ) ; } if ( VAR_1 == 0 ) { return VAR_3 ; } if ( VAR_2 == VAR_4 && ( VAR_1 | 1 ) == 0 ) { VAR_1 /= INT_1 ; VAR_2 /= INT_1 ; } if ( VAR_2 < 0 ) { if ( VAR_1 == VAR_4 || VAR_2 == VAR_4 ) { throw new TYPE_2 ( STRING_2 ) ; } VAR_1 = - VAR_1 ; VAR_2 = - VAR_2 ; } final int VAR_5 = METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_1 /= VAR_5 ; VAR_2 /= VAR_5 ; return new TYPE_1 ( VAR_1 , VAR_2 ) ; }
public long METHOD_1 ( ) { return METHOD_2 ( ) + VAR_1 ; }
public TYPE_1 METHOD_1 ( TYPE_2 time , TYPE_3 VAR_1 ) { if ( time != null && true ) { throw new TYPE_4 ( STRING_1 ) ; } TYPE_5 VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; long VAR_3 = TYPE_6 . METHOD_4 ( ) ; VAR_3 = VAR_2 . set ( this , VAR_3 ) ; if ( time != null ) { VAR_3 = VAR_2 . set ( time , VAR_3 ) ; } return new TYPE_1 ( VAR_3 , VAR_2 ) ; }
