protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 data , byte [ ] VAR_2 ) throws TYPE_3 , TYPE_4 { int VAR_3 = 0 ; int VAR_4 = 0 ; int VAR_5 = - INT_1 ; int VAR_6 = 0 ; int VAR_7 = VAR_8 - INT_2 ; int VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; while ( true ) { if ( VAR_3 > VAR_5 ) { VAR_4 = METHOD_3 ( data , VAR_2 , VAR_3 , VAR_4 , VAR_2 . length ) ; VAR_3 = 0 ; if ( VAR_4 < INT_1 ) { break ; } VAR_5 = VAR_4 - INT_1 ; } if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) < < INT_4 ; VAR_11 |= ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ; VAR_11 = ( VAR_11 < < INT_4 ) | ( ( ( int ) VAR_2 [ VAR_3 ++ ] ) & INT_5 ) ; VAR_6 += INT_1 ; VAR_10 = VAR_1 . METHOD_5 ( VAR_11 , VAR_12 , VAR_10 ) ; if ( -- VAR_9 <= 0 ) { VAR_12 [ VAR_10 ++ ] = CHAR_1 ; VAR_12 [ VAR_10 ++ ] = CHAR_2 ; VAR_9 = VAR_1 . METHOD_2 ( ) > > INT_3 ; } } if ( VAR_3 < VAR_4 ) { if ( VAR_10 > VAR_7 ) { METHOD_4 ( ) ; } int VAR_11 = ( ( int ) VAR_2 [ VAR_3 ++ ] ) > > INT_6 ; int VAR_13 = 1 ; if ( VAR_3 < VAR_4 ) { VAR_11 |= ( ( ( int ) VAR_2 [ VAR_3 ] ) & INT_5 ) < < INT_4 ; VAR_13 = INT_3 ; } VAR_6 += VAR_13 ; VAR_10 = VAR_1 . METHOD_6 ( VAR_11 , VAR_13 , VAR_12 , VAR_10 ) ; } return VAR_6 ; }