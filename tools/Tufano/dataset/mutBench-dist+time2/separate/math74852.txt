protected void METHOD_1 ( final double VAR_1 , final double VAR_2 ) { final double VAR_3 = 1 + VAR_1 * ( - FLOAT_1 / FLOAT_2 + VAR_1 * ( FLOAT_3 - FLOAT_4 * VAR_1 ) ) ; final double VAR_4 = VAR_1 * ( FLOAT_5 / FLOAT_3 + VAR_1 * ( - FLOAT_6 / FLOAT_7 + FLOAT_8 / FLOAT_2 * VAR_1 ) ) ; final double VAR_5 = VAR_1 * ( - FLOAT_9 + VAR_1 * ( FLOAT_10 - FLOAT_11 * VAR_1 ) ) ; final double VAR_6 = VAR_1 * ( FLOAT_12 / FLOAT_3 + VAR_1 * ( - FLOAT_13 / FLOAT_7 + FLOAT_14 / FLOAT_2 * VAR_1 ) ) ; final double VAR_7 = VAR_1 * FLOAT_15 / FLOAT_7 * ( INT_1 * VAR_1 - 1 ) ; if ( ( VAR_8 != null ) && ( VAR_1 <= FLOAT_16 ) ) { final double VAR_9 = VAR_10 * VAR_1 ; final double VAR_11 = VAR_9 * ( 1.0 + VAR_1 * ( - FLOAT_1 / FLOAT_17 + VAR_1 * ( FLOAT_3 / FLOAT_18 - FLOAT_15 / FLOAT_2 * VAR_1 ) ) ) ; final double VAR_12 = VAR_9 * ( VAR_1 * ( FLOAT_5 / FLOAT_19 + VAR_1 * ( - FLOAT_20 / FLOAT_7 + VAR_1 * FLOAT_8 / FLOAT_7 ) ) ) ; final double VAR_13 = VAR_9 * ( VAR_1 * ( - FLOAT_21 + VAR_1 * ( FLOAT_10 / FLOAT_18 + VAR_1 * - FLOAT_22 ) ) ) ; final double VAR_14 = VAR_9 * ( VAR_1 * ( FLOAT_12 / FLOAT_19 + VAR_1 * ( - FLOAT_13 / FLOAT_23 + VAR_1 * FLOAT_14 / FLOAT_7 ) ) ) ; final double VAR_15 = VAR_9 * ( VAR_1 * ( - FLOAT_15 / FLOAT_3 + VAR_1 * FLOAT_15 / FLOAT_24 ) ) ; for ( int i = 0 ; i < VAR_16 . length ; ++ i ) { final double VAR_17 = VAR_18 [ 0 ] [ i ] ; final double VAR_19 = VAR_18 [ INT_1 ] [ i ] ; final double VAR_20 = VAR_18 [ INT_2 ] [ i ] ; final double VAR_21 = VAR_18 [ INT_3 ] [ i ] ; final double VAR_22 = VAR_18 [ INT_4 ] [ i ] ; VAR_16 [ i ] = VAR_8 [ i ] + VAR_11 * VAR_17 + VAR_12 * VAR_19 + VAR_13 * VAR_20 + VAR_14 * VAR_21 + VAR_15 * VAR_22 ; VAR_23 [ i ] = VAR_3 * VAR_17 + VAR_4 * VAR_19 + VAR_5 * VAR_20 + VAR_6 * VAR_21 + VAR_7 * VAR_22 ; } } else { final double VAR_24 = VAR_1 * VAR_1 ; final double VAR_11 = VAR_10 * ( - 1.0 / FLOAT_24 + VAR_1 * ( 1.0 + VAR_1 * ( - FLOAT_1 / FLOAT_17 + VAR_1 * ( FLOAT_3 / FLOAT_18 + VAR_1 * - FLOAT_15 / FLOAT_2 ) ) ) ) ; final double VAR_12 = VAR_10 * ( - FLOAT_25 / FLOAT_19 + VAR_24 * ( FLOAT_5 / FLOAT_19 + VAR_1 * ( + FLOAT_20 / FLOAT_7 + VAR_1 * FLOAT_8 / FLOAT_7 ) ) ) ; final double VAR_13 = VAR_10 * ( FLOAT_17 / FLOAT_18 + VAR_24 * ( - FLOAT_21 + VAR_1 * ( FLOAT_10 / FLOAT_18 + VAR_1 * - FLOAT_22 ) ) ) ; final double VAR_14 = VAR_10 * ( - FLOAT_14 / FLOAT_26 + VAR_24 * ( FLOAT_12 / FLOAT_19 + VAR_1 * ( - FLOAT_13 / FLOAT_23 + VAR_1 * FLOAT_14 / FLOAT_7 ) ) ) ; final double VAR_15 = VAR_10 * ( - FLOAT_15 / FLOAT_27 + VAR_24 * ( - FLOAT_15 / FLOAT_3 + VAR_1 * FLOAT_15 / FLOAT_24 ) ) ; for ( int i = 0 ; i < VAR_16 . length ; ++ i ) { final double VAR_17 = VAR_18 [ 0 ] [ i ] ; final double VAR_19 = VAR_18 [ INT_1 ] [ i ] ; final double VAR_20 = VAR_18 [ INT_2 ] [ i ] ; final double VAR_21 = VAR_18 [ INT_3 ] [ i ] ; final double VAR_22 = VAR_18 [ INT_4 ] [ i ] ; VAR_16 [ i ] = VAR_25 [ i ] + VAR_11 * VAR_17 + VAR_12 * VAR_19 + VAR_13 * VAR_20 + VAR_14 * VAR_21 + VAR_15 * VAR_22 ; VAR_23 [ i ] = VAR_3 * VAR_17 + VAR_4 * VAR_19 + VAR_5 * VAR_20 + VAR_6 * VAR_21 + VAR_7 * VAR_22 ; } } }