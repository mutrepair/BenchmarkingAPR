private void METHOD_1 ( final int VAR_1 , final int VAR_2 , final int VAR_3 , final TYPE_1 VAR_4 , final double [ ] VAR_5 ) { final int n = VAR_6 . length ; double p = VAR_5 [ 0 ] ; double VAR_7 = VAR_5 [ 1 ] ; double VAR_8 = VAR_5 [ INT_1 ] ; for ( int k = VAR_2 ; k <= VAR_3 - 1 ; k ++ ) { boolean VAR_9 = k != ( VAR_3 - 1 ) ; if ( k != VAR_2 ) { p = VAR_6 [ k ] [ k - 1 ] ; VAR_7 = VAR_6 [ k + 1 ] [ k - 1 ] ; VAR_8 = VAR_9 ? VAR_6 [ k + INT_1 ] [ k - 1 ] : 0.0 ; VAR_4 . x = TYPE_2 . METHOD_2 ( p ) + TYPE_2 . METHOD_2 ( VAR_7 ) + TYPE_2 . METHOD_2 ( VAR_8 ) ; if ( ! TYPE_3 . equals ( VAR_4 . x , 0.0 , VAR_10 ) ) { p = p / VAR_4 . x ; VAR_7 = VAR_7 / VAR_4 . x ; VAR_8 = VAR_8 / VAR_4 . x ; } } if ( VAR_4 . x == 0.0 ) { break ; } double VAR_11 = TYPE_2 . METHOD_3 ( p * p + VAR_7 * VAR_7 + VAR_8 * VAR_8 ) ; if ( p < 0.0 ) { VAR_11 = - VAR_11 ; } if ( VAR_11 != 0.0 ) { if ( k != VAR_2 ) { VAR_6 [ k ] [ k - 1 ] = - VAR_11 * VAR_4 . x ; } else if ( VAR_1 != VAR_2 ) { VAR_6 [ k ] [ k - 1 ] = + VAR_6 [ k ] [ k - 1 ] ; } p = p + VAR_11 ; VAR_4 . x = p / VAR_11 ; VAR_4 . y = VAR_7 / VAR_11 ; double VAR_12 = VAR_8 / VAR_11 ; VAR_7 = VAR_7 / p ; VAR_8 = VAR_8 / p ; for ( int j = k ; j < n ; j ++ ) { p = VAR_6 [ k ] [ j ] + VAR_7 * VAR_6 [ k + 1 ] [ j ] ; if ( VAR_9 ) { p = p + VAR_8 * VAR_6 [ k + INT_1 ] [ j ] ; VAR_6 [ k + INT_1 ] [ j ] = VAR_6 [ k + INT_1 ] [ j ] - p * VAR_12 ; } VAR_6 [ k ] [ j ] = VAR_6 [ k ] [ j ] - p * VAR_4 . x ; VAR_6 [ k + 1 ] [ j ] = VAR_6 [ k + 1 ] [ j ] - p * VAR_4 . y ; } for ( int i = 0 ; i <= TYPE_2 . min ( VAR_3 , k + INT_2 ) ; i ++ ) { p = VAR_4 . x * VAR_6 [ i ] [ k ] + VAR_4 . y * VAR_6 [ i ] [ k + 1 ] ; if ( VAR_9 ) { p = p + VAR_12 * VAR_6 [ i ] [ k + INT_1 ] ; VAR_6 [ i ] [ k + INT_1 ] = VAR_6 [ i ] [ k + INT_1 ] - p * VAR_8 ; } VAR_6 [ i ] [ k ] = VAR_6 [ i ] [ k ] - p ; VAR_6 [ i ] [ k + 1 ] = VAR_6 [ i ] [ k + 1 ] - p * VAR_7 ; } final int VAR_13 = VAR_6 . length - 1 ; for ( int i = 0 ; i <= VAR_13 ; i ++ ) { p = VAR_4 . x * VAR_14 [ i ] [ k ] + VAR_4 . y * VAR_14 [ i ] [ k + 1 ] ; if ( VAR_9 ) { p = p + VAR_12 * VAR_14 [ i ] [ k + INT_1 ] ; VAR_14 [ i ] [ k + INT_1 ] = VAR_14 [ i ] [ k + INT_1 ] - p * VAR_8 ; } VAR_14 [ i ] [ k ] = VAR_14 [ i ] [ k ] - p ; VAR_14 [ i ] [ k + 1 ] = VAR_14 [ i ] [ k + 1 ] - p * VAR_7 ; } } } for ( int i = VAR_2 + INT_1 ; i <= VAR_3 ; i ++ ) { VAR_6 [ i ] [ i - INT_1 ] = 0.0 ; if ( i > VAR_2 + INT_1 ) { VAR_6 [ i ] [ i - INT_2 ] = 0.0 ; } } }