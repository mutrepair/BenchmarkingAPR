private void METHOD_1 ( final double [ ] x , final double VAR_1 , final double VAR_2 ) { int VAR_3 = 0 ; double VAR_4 = VAR_1 ; double y = VAR_2 ; double VAR_5 ; double VAR_6 ; double VAR_7 ; double VAR_8 ; double VAR_9 ; double VAR_10 ; this . VAR_11 = false ; VAR_12 = METHOD_2 ( VAR_2 , VAR_12 ) ; VAR_13 = METHOD_2 ( VAR_13 , VAR_2 * VAR_2 ) ; for ( int i = 0 ; i < x . length ; i ++ ) { if ( VAR_4 == 0.0 ) { return ; } VAR_5 = x [ i ] ; if ( VAR_5 == 0.0 ) { VAR_3 += VAR_14 - i - 1 ; continue ; } VAR_6 = VAR_15 [ i ] ; VAR_7 = VAR_4 * VAR_5 ; VAR_10 = VAR_4 ; if ( VAR_6 != 0.0 ) { VAR_8 = METHOD_2 ( VAR_6 , VAR_7 * VAR_5 ) ; final double tmp = VAR_7 * VAR_5 / VAR_6 ; if ( TYPE_1 . METHOD_3 ( tmp ) > VAR_16 ) { VAR_4 = ( VAR_6 * VAR_4 ) / VAR_8 ; } } else { VAR_8 = VAR_7 * VAR_5 ; VAR_4 = 0.0 ; } VAR_15 [ i ] = VAR_8 ; for ( int k = i + 1 ; k < VAR_14 ; k ++ ) { VAR_9 = x [ k ] ; x [ k ] = METHOD_2 ( VAR_9 , + VAR_5 * VAR_17 [ VAR_3 ] ) ; if ( VAR_6 != 0.0 ) { VAR_17 [ VAR_3 ] = METHOD_2 ( VAR_6 * VAR_17 [ VAR_3 ] , ( VAR_10 * VAR_5 ) * VAR_9 ) / VAR_8 ; } else { VAR_17 [ VAR_3 ] = VAR_9 / VAR_5 ; } ++ VAR_3 ; } VAR_9 = y ; y = METHOD_2 ( VAR_9 , - VAR_5 * VAR_18 [ i ] ) ; if ( VAR_6 != 0.0 ) { VAR_18 [ i ] = METHOD_2 ( VAR_6 * VAR_18 [ i ] , VAR_7 * VAR_9 ) / VAR_8 ; } else { VAR_18 [ i ] = VAR_9 / VAR_5 ; } } VAR_19 = METHOD_2 ( VAR_19 , VAR_4 * y * y ) ; }