public static float METHOD_1 ( final float f , final int n ) { if ( ( n > - INT_1 ) && ( n < INT_2 ) ) { return f * TYPE_1 . METHOD_2 ( ( n + INT_1 ) < < INT_3 ) ; } if ( TYPE_1 . METHOD_3 ( f ) || TYPE_1 . METHOD_4 ( f ) || ( f == FLOAT_1 ) ) { return f ; } if ( n < - INT_4 ) { return ( f > 0 ) ? FLOAT_2 : - FLOAT_2 ; } if ( n > INT_5 ) { return ( f > 0 ) ? VAR_1 : VAR_2 ; } final int VAR_3 = TYPE_1 . METHOD_5 ( f ) ; final int VAR_4 = VAR_3 & INT_6 ; int VAR_5 = ( VAR_3 > > > INT_3 ) & INT_7 ; int VAR_6 = VAR_3 & INT_8 ; int VAR_7 = VAR_5 + n ; if ( n < 0 ) { if ( VAR_7 > 0 ) { return TYPE_1 . METHOD_2 ( VAR_4 | ( VAR_7 < < INT_3 ) | VAR_6 ) ; } else if ( VAR_7 > - INT_9 ) { VAR_6 = VAR_6 | ( 1 < < INT_3 ) ; final int VAR_8 = VAR_6 & ( 1 < < ( - VAR_7 ) ) ; VAR_6 = VAR_6 > > > ( 1 - VAR_7 ) ; if ( VAR_8 != 0 ) { VAR_6 ++ ; } return TYPE_1 . METHOD_2 ( VAR_4 | VAR_6 ) ; } else { return ( VAR_4 == 0 ) ? FLOAT_2 : - FLOAT_2 ; } } else { if ( VAR_5 == 0 ) { while ( ( VAR_6 > > > INT_3 ) != 1 ) { VAR_6 = VAR_6 < < 1 ; -- VAR_7 ; } ++ VAR_7 ; VAR_6 = VAR_6 & INT_8 ; if ( VAR_7 < INT_10 ) { return TYPE_1 . METHOD_2 ( VAR_4 | ( VAR_7 > > > INT_3 ) | VAR_6 ) ; } else { return ( VAR_4 == 0 ) ? VAR_1 : VAR_2 ; } } else if ( VAR_7 < INT_10 ) { return TYPE_1 . METHOD_2 ( VAR_4 | ( VAR_7 < < INT_3 ) | VAR_6 ) ; } else { return ( VAR_4 == 0 ) ? VAR_1 : VAR_2 ; } } }