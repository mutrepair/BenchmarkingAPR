private static long METHOD_1 ( byte [ ] value , int offset , int length , long VAR_1 ) { long a = VAR_2 ; long b = a ; long c = VAR_1 ; int VAR_3 ; for ( VAR_3 = length ; VAR_3 >= INT_1 ; VAR_3 -= INT_1 , offset += INT_1 ) { a += METHOD_2 ( value , offset ) ; b += METHOD_2 ( value , offset + INT_2 ) ; c += METHOD_2 ( value , offset + INT_3 ) ; a -= b ; a -= c ; a ^= c > > > INT_4 ; b -= c ; b -= a ; b ^= a < < INT_5 ; c -= a ; c -= b ; c ^= b > > > INT_2 ; a -= b ; a -= c ; a ^= c > > > INT_6 ; b -= c ; b -= a ; b ^= a < < INT_7 ; c -= a ; c -= b ; c ^= b > > > INT_8 ; a -= b ; a -= c ; a ^= c > > > INT_9 ; b -= c ; b -= a ; b ^= a < < INT_10 ; c -= a ; c -= b ; c ^= b > > > INT_11 ; a -= b ; a -= c ; a ^= c > > > INT_12 ; b -= c ; b -= a ; b ^= a < < INT_13 ; c -= a ; c -= b ; c ^= b > > > INT_14 ; } c += length ; switch ( VAR_3 ) { case INT_7 : c += ( ( long ) value [ offset + INT_14 ] ) < < INT_15 ; case INT_14 : c += ( value [ offset + INT_16 ] & INT_17 ) < < INT_18 ; case INT_16 : c += ( value [ offset + INT_19 ] & INT_17 ) < < INT_20 ; case INT_19 : c += ( value [ offset + INT_21 ] & INT_17 ) < < INT_22 ; case INT_21 : c += ( value [ offset + INT_13 ] & INT_17 ) < < INT_1 ; case INT_13 : c += ( value [ offset + INT_23 ] & INT_17 ) < < INT_3 ; case INT_23 : c += ( value [ offset + INT_3 ] & INT_17 ) < < INT_2 ; case INT_3 : b += METHOD_2 ( value , offset + INT_2 ) ; a += METHOD_2 ( value , offset ) ; break ; case INT_24 : b += ( value [ offset + INT_25 ] & INT_17 ) < < INT_18 ; case INT_25 : b += ( value [ offset + INT_26 ] & INT_17 ) < < INT_20 ; case INT_26 : b += ( value [ offset + INT_12 ] & INT_17 ) < < INT_22 ; case INT_12 : b += ( value [ offset + INT_11 ] & INT_17 ) < < INT_1 ; case INT_11 : b += ( value [ offset + INT_27 ] & INT_17 ) < < INT_3 ; case INT_27 : b += ( value [ offset + INT_5 ] & INT_17 ) < < INT_2 ; case INT_5 : b += ( value [ offset + INT_2 ] & INT_17 ) ; case INT_2 : a += METHOD_2 ( value , offset ) ; break ; case INT_28 : a += ( value [ offset + INT_29 ] & INT_17 ) < < INT_18 ; case INT_29 : a += ( value [ offset + INT_8 ] & INT_17 ) < < INT_20 ; case INT_8 : a += ( value [ offset + INT_30 ] & INT_17 ) < < INT_22 ; case INT_30 : a += ( value [ offset + INT_31 ] & INT_32 ) > > > INT_1 ; case INT_31 : a += ( value [ offset + INT_33 ] & INT_17 ) < < INT_3 ; case INT_33 : a += ( value [ offset + 1 ] & INT_17 ) < < INT_2 ; case 1 : a += ( value [ offset + 0 ] & INT_17 ) ; } return METHOD_3 ( a , b , c ) ; }