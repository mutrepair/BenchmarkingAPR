public static double METHOD_1 ( final double VAR_1 , final int n ) { if ( ( n > - INT_1 ) && ( n < INT_2 ) ) { return VAR_1 * TYPE_1 . METHOD_2 ( ( ( long ) ( n + INT_1 ) ) < < INT_3 ) ; } if ( TYPE_1 . METHOD_3 ( VAR_1 ) || TYPE_1 . METHOD_4 ( VAR_1 ) || ( VAR_1 == 0 ) ) { return VAR_1 ; } if ( n < - INT_4 ) { return ( VAR_1 > 0 ) ? 0.0 : - 0.0 ; } if ( n > INT_5 ) { return ( VAR_1 > 0 ) ? VAR_2 : VAR_3 ; } final long VAR_4 = TYPE_1 . METHOD_5 ( VAR_1 ) ; final long VAR_5 = VAR_4 & INT_6 ; int VAR_6 = ( ( int ) ( VAR_4 > > > INT_3 ) ) & INT_7 ; long VAR_7 = VAR_4 & INT_8 ; int VAR_8 = VAR_6 + n ; if ( n < 0 ) { if ( VAR_8 > 0 ) { return TYPE_1 . METHOD_2 ( VAR_5 | ( ( ( long ) VAR_8 ) > > INT_3 ) | VAR_7 ) ; } else if ( VAR_8 > - INT_9 ) { VAR_7 = VAR_7 | ( 1L < < INT_3 ) ; final long VAR_9 = VAR_7 & ( 1L < < ( - VAR_8 ) ) ; VAR_7 = VAR_7 > > > ( 1 - VAR_8 ) ; if ( VAR_9 != 0 ) { VAR_7 ++ ; } return TYPE_1 . METHOD_2 ( VAR_5 | VAR_7 ) ; } else { return ( VAR_5 == 0L ) ? 0.0 : - 0.0 ; } } else { if ( VAR_6 == 0 ) { while ( ( VAR_7 > > > INT_3 ) != 1 ) { VAR_7 = VAR_7 < < 1 ; -- VAR_8 ; } ++ VAR_8 ; VAR_7 = VAR_7 & INT_8 ; if ( VAR_8 < INT_10 ) { return TYPE_1 . METHOD_2 ( VAR_5 | ( ( ( long ) VAR_8 ) < < INT_3 ) | VAR_7 ) ; } else { return ( VAR_5 == 0L ) ? VAR_2 : VAR_3 ; } } else if ( VAR_8 < INT_10 ) { return TYPE_1 . METHOD_2 ( VAR_5 | ( ( ( long ) VAR_8 ) < < INT_3 ) | VAR_7 ) ; } else { return ( VAR_5 == 0L ) ? VAR_2 : VAR_3 ; } } }