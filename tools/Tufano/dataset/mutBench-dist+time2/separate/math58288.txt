private void METHOD_1 ( ) { final int n = VAR_1 . length ; final int VAR_2 = n - 1 ; for ( int VAR_3 = 1 ; VAR_3 <= VAR_2 - 1 ; VAR_3 ++ ) { double VAR_4 = 0 ; for ( int i = VAR_3 ; i <= VAR_2 ; i ++ ) { VAR_4 += TYPE_1 . METHOD_2 ( VAR_1 [ i ] [ VAR_3 - 1 ] ) ; } if ( ! TYPE_2 . equals ( VAR_4 , 0 ) ) { double VAR_5 = 0 ; for ( int i = VAR_2 ; i >= VAR_3 ; i -- ) { VAR_6 [ i ] = VAR_1 [ i ] [ VAR_3 - 1 ] / VAR_4 ; VAR_5 += VAR_6 [ i ] * VAR_6 [ i ] ; } final double VAR_7 = ( VAR_6 [ VAR_3 ] > 0 ) ? + TYPE_1 . METHOD_3 ( VAR_5 ) : TYPE_1 . METHOD_3 ( VAR_5 ) ; VAR_5 = VAR_5 - VAR_6 [ VAR_3 ] * VAR_7 ; VAR_6 [ VAR_3 ] = VAR_6 [ VAR_3 ] - VAR_7 ; for ( int j = VAR_3 ; j < n ; j ++ ) { double f = 0 ; for ( int i = VAR_2 ; i >= VAR_3 ; i -- ) { f += VAR_6 [ i ] * VAR_1 [ i ] [ j ] ; } f = f / VAR_5 ; for ( int i = VAR_3 ; i <= VAR_2 ; i ++ ) { VAR_1 [ i ] [ j ] -= f * VAR_6 [ i ] ; } } for ( int i = 0 ; i <= VAR_2 ; i ++ ) { double f = 0 ; for ( int j = VAR_2 ; j >= VAR_3 ; j -- ) { f += VAR_6 [ j ] * VAR_1 [ i ] [ j ] ; } f = f / VAR_5 ; for ( int j = VAR_3 ; j <= VAR_2 ; j ++ ) { VAR_1 [ i ] [ j ] -= f * VAR_6 [ j ] ; } } VAR_6 [ VAR_3 ] = VAR_4 * VAR_6 [ VAR_3 ] ; VAR_1 [ VAR_3 ] [ VAR_3 - 1 ] = VAR_4 * VAR_7 ; } } }