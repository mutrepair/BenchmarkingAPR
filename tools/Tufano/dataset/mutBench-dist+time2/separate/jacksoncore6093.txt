public int METHOD_1 ( char [ ] VAR_1 , int start , int VAR_2 ) throws TYPE_1 { if ( VAR_3 == null ) { return - 1 ; } if ( VAR_2 < 1 ) { return VAR_2 ; } if ( start < 0 || ( start + VAR_2 ) > VAR_1 . length ) { METHOD_2 ( VAR_1 , start , VAR_2 ) ; } VAR_2 += start ; int VAR_4 = start ; if ( VAR_5 != VAR_6 ) { VAR_1 [ VAR_4 ++ ] = VAR_5 ; VAR_5 = VAR_6 ; } else { int VAR_7 = ( VAR_8 - VAR_9 ) ; if ( VAR_7 < INT_1 ) { if ( ! METHOD_3 ( VAR_7 ) ) { return - 1 ; } } } VAR_10 : while ( VAR_4 < VAR_2 ) { int VAR_11 = VAR_9 ; int VAR_12 ; if ( VAR_13 ) { VAR_12 = ( VAR_3 [ VAR_11 ] < < INT_2 ) | ( ( VAR_3 [ VAR_11 + 1 ] & INT_3 ) < < INT_4 ) | ( ( VAR_3 [ VAR_11 + INT_5 ] & INT_3 ) < < INT_6 ) | ( VAR_3 [ VAR_11 + INT_7 ] ^ INT_8 ) ; } else { VAR_12 = ( VAR_3 [ VAR_11 ] & INT_3 ) | ( ( VAR_3 [ VAR_11 + 1 ] & INT_3 ) < < INT_6 ) | ( ( VAR_3 [ VAR_11 + INT_5 ] & INT_3 ) < < INT_4 ) | ( VAR_3 [ VAR_11 + INT_7 ] < < INT_2 ) ; } VAR_9 += INT_1 ; if ( VAR_12 > INT_9 ) { if ( VAR_12 > VAR_14 ) { METHOD_4 ( VAR_12 , VAR_4 - start , STRING_1 + TYPE_2 . METHOD_5 ( VAR_14 ) + STRING_2 ) ; } VAR_12 -= INT_10 ; VAR_1 [ VAR_4 ++ ] = ( char ) ( INT_11 + ( VAR_12 > > INT_12 ) ) ; VAR_12 = ( INT_13 | ( VAR_12 & INT_14 ) ) ; if ( VAR_4 >= VAR_2 ) { VAR_5 = ( char ) VAR_12 ; break VAR_10 ; } } VAR_1 [ VAR_4 ++ ] = ( char ) VAR_12 ; if ( VAR_9 >= VAR_8 ) { break VAR_10 ; } } VAR_2 = VAR_4 - start ; VAR_15 += VAR_2 ; return VAR_2 ; }