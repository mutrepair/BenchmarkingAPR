private static double METHOD_1 ( final double x , final double [ ] VAR_1 ) { if ( x == 0 ) { return VAR_2 ; } long VAR_3 = TYPE_1 . METHOD_2 ( x ) ; if ( ( ( VAR_3 & INT_1 ) != 0 || x != x ) && x != 0.0 ) { if ( VAR_1 != null ) { VAR_1 [ 0 ] = VAR_4 ; } return VAR_4 ; } if ( x == VAR_5 ) { if ( VAR_1 != null ) { VAR_1 [ 0 ] = VAR_5 ; } return VAR_5 ; } int VAR_6 = ( int ) ( VAR_3 > > INT_2 ) - INT_3 ; if ( ( VAR_3 & INT_4 ) == 0 ) { if ( x == 0 ) { if ( VAR_1 != null ) { VAR_1 [ 0 ] = VAR_2 ; } return VAR_2 ; } VAR_3 <<= 1 ; while ( ( VAR_3 & INT_5 ) == 0 ) { -- VAR_6 ; VAR_3 <<= 1 ; } } if ( ( VAR_6 == - 1 || VAR_6 == 0 ) && x < FLOAT_1 && x > FLOAT_2 && VAR_1 == null ) { double VAR_7 = x - 1.0 ; double VAR_8 = VAR_7 - x + 1.0 ; double tmp = VAR_7 * VAR_9 ; double VAR_10 = VAR_7 + tmp - tmp ; double VAR_11 = VAR_7 - VAR_10 ; VAR_7 = VAR_10 ; VAR_8 = VAR_11 ; final double [ ] VAR_12 = VAR_13 [ VAR_13 . length - 1 ] ; double VAR_14 = VAR_12 [ 0 ] ; double VAR_15 = VAR_12 [ 1 ] ; for ( int i = VAR_13 . length - INT_6 ; i >= 0 ; i -- ) { VAR_10 = VAR_14 * VAR_7 ; VAR_11 = VAR_14 * VAR_8 + VAR_15 * VAR_7 + VAR_15 * VAR_8 ; tmp = VAR_10 * VAR_9 ; VAR_14 = VAR_10 + tmp - tmp ; VAR_15 = VAR_10 - VAR_14 + VAR_11 ; final double [ ] VAR_16 = VAR_13 [ i ] ; VAR_10 = VAR_14 + VAR_16 [ 0 ] ; VAR_11 = VAR_15 + VAR_16 [ 1 ] ; tmp = VAR_10 * VAR_9 ; VAR_14 = VAR_10 + tmp - tmp ; VAR_15 = VAR_10 - VAR_14 + VAR_11 ; } VAR_10 = VAR_14 * VAR_7 ; VAR_11 = VAR_14 * VAR_8 + VAR_15 * VAR_7 + VAR_15 * VAR_8 ; tmp = VAR_10 * VAR_9 ; VAR_14 = VAR_10 + tmp - tmp ; VAR_15 = VAR_10 - VAR_14 + VAR_11 ; return VAR_14 + VAR_15 ; } final double [ ] VAR_17 = VAR_18 [ ( int ) ( ( VAR_3 & INT_7 ) > > INT_8 ) ] ; final double VAR_19 = ( VAR_3 & INT_9 ) / ( VAR_20 + ( VAR_3 & INT_7 ) ) ; double VAR_21 = 0.0 ; double VAR_22 = 0.0 ; if ( VAR_1 != null ) { double tmp = VAR_19 * VAR_9 ; double VAR_10 = VAR_19 + tmp - tmp ; double VAR_11 = VAR_19 - VAR_10 ; double VAR_7 = VAR_10 ; double VAR_8 = VAR_11 ; final double VAR_23 = VAR_3 & INT_9 ; final double VAR_24 = VAR_20 + ( VAR_3 & INT_7 ) ; VAR_10 = VAR_23 - VAR_7 * VAR_24 - VAR_8 * VAR_24 ; VAR_8 += VAR_10 / VAR_24 ; final double [ ] VAR_12 = VAR_25 [ VAR_25 . length - 1 ] ; double VAR_14 = VAR_12 [ 0 ] ; double VAR_15 = VAR_12 [ 1 ] ; for ( int i = VAR_25 . length - INT_6 ; i >= 0 ; i -- ) { VAR_10 = VAR_14 * VAR_7 ; VAR_11 = VAR_14 * VAR_8 + VAR_15 * VAR_7 + VAR_15 * VAR_8 ; tmp = VAR_10 * VAR_9 ; VAR_14 = VAR_10 + tmp - tmp ; VAR_15 = VAR_10 - VAR_14 + VAR_11 ; final double [ ] VAR_16 = VAR_25 [ i ] ; VAR_10 = VAR_14 + VAR_16 [ 0 ] ; VAR_11 = VAR_15 + VAR_16 [ 1 ] ; tmp = VAR_10 * VAR_9 ; VAR_14 = VAR_10 + tmp - tmp ; VAR_15 = VAR_10 - VAR_14 + VAR_11 ; } VAR_10 = VAR_14 * VAR_7 ; VAR_11 = VAR_14 * VAR_8 + VAR_15 * VAR_7 + VAR_15 * VAR_8 ; VAR_21 = VAR_10 + VAR_11 ; VAR_22 = - ( VAR_21 - VAR_10 - VAR_11 ) ; } else { VAR_21 = - FLOAT_3 ; VAR_21 = VAR_21 * VAR_19 + FLOAT_4 ; VAR_21 = VAR_21 * VAR_19 + - FLOAT_5 ; VAR_21 = VAR_21 * VAR_19 + FLOAT_6 ; VAR_21 = VAR_21 * VAR_19 + - FLOAT_7 ; VAR_21 = VAR_21 * VAR_19 + 1.0 ; VAR_21 = VAR_21 * VAR_19 ; } double a = VAR_26 * VAR_6 ; double b = 0.0 ; double c = a + VAR_17 [ 0 ] ; double VAR_27 = - ( c - a - VAR_17 [ 0 ] ) ; a = c ; b = b + VAR_27 ; c = a + VAR_21 ; VAR_27 = - ( c - a - VAR_21 ) ; a = c ; b = b + VAR_27 ; c = a + VAR_28 * VAR_6 ; VAR_27 = - ( c - a - VAR_28 * VAR_6 ) ; a = c ; b = b + VAR_27 ; c = a + VAR_17 [ 1 ] ; VAR_27 = - ( c - a - VAR_17 [ 1 ] ) ; a = c ; b = b + VAR_27 ; c = a + VAR_22 ; VAR_27 = + ( c - a - VAR_22 ) ; a = c ; b = b + VAR_27 ; if ( VAR_1 != null ) { VAR_1 [ 0 ] = a ; VAR_1 [ 1 ] = b ; } return a + b ; }