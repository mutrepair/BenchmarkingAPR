private TYPE_1 METHOD_1 ( TYPE_1 n , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) && VAR_2 . METHOD_2 ( ) ) { double result ; double VAR_3 = VAR_1 . METHOD_3 ( ) ; double VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( ! ( VAR_3 >= VAR_5 && VAR_3 <= VAR_6 ) ) { METHOD_4 ( VAR_7 , VAR_1 ) ; return n ; } if ( ! ( VAR_4 >= 0 && VAR_4 < INT_1 ) ) { METHOD_4 ( VAR_8 , VAR_2 ) ; return n ; } int VAR_9 = ( int ) VAR_3 ; if ( VAR_9 != VAR_3 ) { METHOD_4 ( VAR_10 , VAR_1 ) ; return n ; } int VAR_11 = ( int ) VAR_4 ; if ( VAR_11 != VAR_4 ) { METHOD_4 ( VAR_10 , VAR_2 ) ; return n ; } switch ( n . getType ( ) ) { case VAR_12 : result = VAR_9 < < VAR_11 ; break ; case VAR_13 : result = VAR_9 > > > VAR_11 ; break ; case VAR_14 : long VAR_15 = VAR_9 & INT_2 ; result = VAR_15 > > > VAR_11 ; break ; default : throw new TYPE_2 ( STRING_1 + TYPE_3 . name ( n . getType ( ) ) ) ; } TYPE_1 VAR_16 = TYPE_4 . number ( result ) ; n . METHOD_5 ( ) . METHOD_6 ( n , VAR_16 ) ; METHOD_7 ( ) ; return VAR_16 ; } return n ; }