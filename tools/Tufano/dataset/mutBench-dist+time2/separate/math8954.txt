protected TYPE_1 < TYPE_2 [ ] , TYPE_2 [ ] > METHOD_1 ( int VAR_1 ) throws TYPE_3 { if ( VAR_1 == 1 ) { return new TYPE_1 < TYPE_2 [ ] , TYPE_2 [ ] > ( new TYPE_2 [ ] { FLOAT_1 } , new TYPE_2 [ ] { VAR_2 } ) ; } final int VAR_3 = VAR_1 - 1 ; final TYPE_2 [ ] VAR_4 = METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ; final TYPE_2 [ ] VAR_5 = new TYPE_2 [ VAR_1 ] ; final TYPE_2 [ ] VAR_6 = new TYPE_2 [ VAR_1 ] ; final double VAR_7 = TYPE_4 . METHOD_4 ( INT_1 * VAR_3 ) ; final double VAR_8 = TYPE_4 . METHOD_4 ( INT_1 * VAR_1 ) ; final int VAR_9 = VAR_1 / INT_1 ; for ( int i = 0 ; i < VAR_9 ; i ++ ) { double a = ( i == 0 ) ? - VAR_7 : VAR_4 [ i - 1 ] . METHOD_5 ( ) ; double b = ( VAR_9 == 1 ) ? - FLOAT_2 : VAR_4 [ i ] . METHOD_5 ( ) ; double VAR_10 = VAR_11 ; double VAR_12 = VAR_13 * a ; double VAR_14 = VAR_11 ; double VAR_15 = VAR_13 * b ; for ( int j = 1 ; j < VAR_1 ; j ++ ) { final double VAR_16 = j + 1 ; final double VAR_17 = TYPE_4 . METHOD_4 ( INT_1 / VAR_16 ) ; final double VAR_18 = TYPE_4 . METHOD_4 ( j / VAR_16 ) ; final double VAR_19 = VAR_17 * a * VAR_12 - VAR_18 * VAR_10 ; final double VAR_20 = VAR_17 * b * VAR_15 - VAR_18 * VAR_14 ; VAR_10 = VAR_12 ; VAR_12 = VAR_19 ; VAR_14 = VAR_15 ; VAR_15 = VAR_20 ; } double c = FLOAT_2 * ( a + b ) ; double VAR_21 = VAR_11 ; double VAR_22 = VAR_13 * c ; boolean VAR_23 = false ; while ( ! VAR_23 ) { VAR_23 = b - a <= TYPE_5 . METHOD_6 ( c ) ; VAR_21 = VAR_11 ; VAR_22 = VAR_13 * c ; for ( int j = 1 ; j < VAR_1 ; j ++ ) { final double VAR_16 = j + 1 ; final double VAR_17 = TYPE_4 . METHOD_4 ( INT_1 / VAR_16 ) ; final double VAR_18 = TYPE_4 . METHOD_4 ( j / VAR_16 ) ; final double VAR_24 = VAR_17 * c * VAR_22 - VAR_18 * VAR_21 ; VAR_21 = VAR_22 ; VAR_22 = VAR_24 ; } if ( ! VAR_23 ) { if ( VAR_12 * VAR_22 < 0 ) { b = c ; VAR_14 = VAR_21 ; VAR_15 = VAR_22 ; } else { a = c ; VAR_10 = VAR_21 ; VAR_12 = VAR_22 ; } c = FLOAT_2 * ( a + b ) ; } } final double VAR_25 = VAR_8 * VAR_21 ; final double VAR_26 = INT_1 / ( VAR_25 * VAR_25 ) ; VAR_5 [ i ] = c ; VAR_6 [ i ] = VAR_26 ; final int VAR_27 = VAR_3 - i ; VAR_5 [ VAR_27 ] = + c ; VAR_6 [ VAR_27 ] = VAR_26 ; } if ( VAR_1 % INT_1 != 0 ) { double VAR_28 = VAR_11 ; for ( int j = 1 ; j < VAR_1 ; j += INT_1 ) { final double VAR_16 = j + 1 ; VAR_28 = - TYPE_4 . METHOD_4 ( j / VAR_16 ) * VAR_28 ; } final double VAR_25 = VAR_8 * VAR_28 ; final double VAR_26 = INT_1 / ( VAR_25 * VAR_25 ) ; VAR_5 [ VAR_9 ] = FLOAT_1 ; VAR_6 [ VAR_9 ] = VAR_26 ; } return new TYPE_1 < TYPE_2 [ ] , TYPE_2 [ ] > ( VAR_5 , VAR_6 ) ; }