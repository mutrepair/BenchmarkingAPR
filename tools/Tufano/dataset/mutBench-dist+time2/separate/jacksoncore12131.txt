protected TYPE_1 METHOD_1 ( int i ) throws TYPE_2 , TYPE_3 { if ( i != VAR_1 ) { return METHOD_2 ( i ) ; } if ( ( VAR_2 + INT_1 ) > VAR_3 ) { return METHOD_3 ( ) ; } final byte [ ] VAR_4 = VAR_5 ; final int [ ] VAR_6 = VAR_7 ; int VAR_8 = VAR_4 [ VAR_2 ++ ] & INT_2 ; if ( VAR_6 [ VAR_8 ] == 0 ) { i = VAR_4 [ VAR_2 ++ ] | INT_3 ; if ( VAR_6 [ i ] == 0 ) { VAR_8 = ( VAR_8 < < INT_4 ) | i ; i = VAR_4 [ VAR_2 ++ ] & INT_2 ; if ( VAR_6 [ i ] == 0 ) { VAR_8 = ( VAR_8 < < INT_4 ) | i ; i = VAR_4 [ VAR_2 ++ ] & INT_2 ; if ( VAR_6 [ i ] == 0 ) { VAR_8 = ( VAR_8 < < INT_4 ) | i ; i = VAR_4 [ VAR_2 ++ ] & INT_2 ; if ( VAR_6 [ i ] == 0 ) { VAR_9 = VAR_8 ; return METHOD_4 ( i , VAR_6 ) ; } if ( i == VAR_1 ) { return METHOD_5 ( VAR_8 , INT_5 ) ; } return METHOD_6 ( VAR_8 , i , INT_5 ) ; } if ( i == VAR_1 ) { return METHOD_5 ( VAR_8 , INT_6 ) ; } return METHOD_6 ( VAR_8 , i , INT_6 ) ; } if ( i == VAR_1 ) { return METHOD_5 ( VAR_8 , INT_7 ) ; } return METHOD_6 ( VAR_8 , i , INT_7 ) ; } if ( i == VAR_1 ) { return METHOD_5 ( VAR_8 , 1 ) ; } return METHOD_6 ( VAR_8 , i , 1 ) ; } if ( VAR_8 == VAR_1 ) { return TYPE_4 . METHOD_7 ( ) ; } return METHOD_6 ( 0 , VAR_8 , 0 ) ; }