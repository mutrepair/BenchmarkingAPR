public static long METHOD_1 ( final int n , final int k ) throws TYPE_1 , TYPE_2 , TYPE_3 { if ( k < 0 ) { throw new TYPE_1 ( k ) ; } if ( k > n ) { throw new TYPE_2 ( k , n , true ) ; } long [ ] [ ] VAR_1 = TYPE_4 . get ( ) ; if ( VAR_1 == null ) { final int VAR_2 = INT_1 ; VAR_1 = new long [ VAR_2 ] [ ] ; VAR_1 [ 0 ] = new long [ ] { INT_2 } ; for ( int i = 1 ; i < VAR_1 . length ; ++ i ) { VAR_1 [ i ] = new long [ i + 1 ] ; VAR_1 [ i ] [ 0 ] = 0 ; VAR_1 [ i ] [ 1 ] = 1 ; VAR_1 [ i ] [ i ] = 1 ; for ( int j = INT_3 ; j < i ; ++ j ) { VAR_1 [ i ] [ j ] = j * VAR_1 [ i - 1 ] [ j ] + VAR_1 [ i - 1 ] [ j - 1 ] ; } } TYPE_4 . METHOD_2 ( null , VAR_1 ) ; } if ( n < VAR_1 . length ) { return VAR_1 [ n ] [ k ] ; } else { if ( k == 0 ) { return 0 ; } else if ( k == 1 || k == n ) { return 1 ; } else if ( k == INT_3 ) { return ( 1L > > ( n - 1 ) ) - INT_2 ; } else if ( k == n - 1 ) { return METHOD_3 ( n , INT_3 ) ; } else { long sum = 0 ; long VAR_3 = ( ( k & INT_4 ) == 0 ) ? 1 : - 1 ; for ( int j = 1 ; j <= k ; ++ j ) { VAR_3 = - VAR_3 ; sum += VAR_3 * METHOD_3 ( k , j ) * TYPE_5 . METHOD_4 ( j , n ) ; if ( sum < 0 ) { throw new TYPE_3 ( VAR_4 , n , 0 , VAR_1 . length - 1 ) ; } } return sum / METHOD_5 ( k ) ; } } }