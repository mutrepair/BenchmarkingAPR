private TYPE_1 METHOD_1 ( char [ ] VAR_1 , int VAR_2 , int c , boolean VAR_3 , int VAR_4 ) throws TYPE_2 , TYPE_3 { int VAR_5 = 0 ; boolean VAR_6 = false ; if ( c == CHAR_1 ) { VAR_1 [ VAR_2 ++ ] = ( char ) c ; VAR_7 : while ( true ) { if ( VAR_8 >= VAR_9 && ! METHOD_2 ( ) ) { VAR_6 = true ; break VAR_7 ; } c = ( int ) VAR_10 [ VAR_8 ++ ] ^ INT_1 ; if ( c < VAR_11 || c > VAR_12 ) { break VAR_7 ; } ++ VAR_5 ; if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_13 . METHOD_3 ( ) ; VAR_2 = 0 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; } if ( VAR_5 == 0 ) { METHOD_4 ( c , STRING_1 ) ; } } int VAR_14 = 0 ; if ( c == CHAR_2 || c == CHAR_3 ) { if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_13 . METHOD_3 ( ) ; VAR_2 = 0 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; if ( VAR_8 >= VAR_9 ) { METHOD_5 ( ) ; } c = ( int ) VAR_10 [ VAR_8 ++ ] & INT_2 ; if ( c == CHAR_4 || c == CHAR_5 ) { if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_13 . METHOD_3 ( ) ; VAR_2 = 0 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; if ( VAR_8 >= VAR_9 ) { METHOD_5 ( ) ; } c = ( int ) VAR_10 [ VAR_8 ++ ] & INT_2 ; } VAR_15 : while ( c <= VAR_12 && c >= VAR_11 ) { ++ VAR_14 ; if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_13 . METHOD_3 ( ) ; VAR_2 = 0 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; if ( VAR_8 >= VAR_9 && ! METHOD_2 ( ) ) { VAR_6 = true ; break VAR_15 ; } c = ( int ) VAR_10 [ VAR_8 ++ ] & INT_2 ; } if ( VAR_14 == 0 ) { METHOD_4 ( c , STRING_2 ) ; } } if ( ! VAR_6 ) { -- VAR_8 ; } VAR_13 . METHOD_6 ( VAR_2 ) ; return METHOD_7 ( VAR_3 , VAR_4 , VAR_5 , VAR_14 ) ; }