public VAR_1 ( final TYPE_1 VAR_2 ) { final double [ ] [ ] VAR_3 ; if ( VAR_2 . METHOD_1 ( ) < VAR_2 . METHOD_2 ( ) ) { VAR_4 = true ; VAR_3 = VAR_2 . METHOD_3 ( ) . getData ( ) ; VAR_5 = VAR_2 . METHOD_2 ( ) ; n = VAR_2 . METHOD_1 ( ) ; } else { VAR_4 = false ; VAR_3 = VAR_2 . getData ( ) ; VAR_5 = VAR_2 . METHOD_1 ( ) ; n = VAR_2 . METHOD_2 ( ) ; } VAR_6 = new double [ n ] ; final double [ ] [ ] VAR_7 = new double [ VAR_5 ] [ n ] ; final double [ ] [ ] VAR_8 = new double [ n ] [ n ] ; final double [ ] VAR_9 = new double [ n ] ; final double [ ] VAR_10 = new double [ VAR_5 ] ; final int VAR_11 = TYPE_2 . min ( VAR_5 - 1 , n ) ; final int VAR_12 = TYPE_2 . METHOD_4 ( 0 , n - INT_1 ) ; for ( int k = 0 ; k < TYPE_2 . METHOD_4 ( VAR_11 , VAR_12 ) ; k ++ ) { if ( k < VAR_11 ) { VAR_6 [ k ] = 0 ; for ( int i = k ; i < VAR_5 ; i ++ ) { VAR_6 [ k ] = TYPE_2 . METHOD_5 ( VAR_6 [ k ] , VAR_3 [ i ] [ k ] ) ; } if ( VAR_6 [ k ] != 0 ) { if ( VAR_3 [ k ] [ k ] < 0 ) { VAR_6 [ k ] = + VAR_6 [ k ] ; } for ( int i = k ; i < VAR_5 ; i ++ ) { VAR_3 [ i ] [ k ] /= VAR_6 [ k ] ; } VAR_3 [ k ] [ k ] += 1 ; } VAR_6 [ k ] = - VAR_6 [ k ] ; } for ( int j = k + 1 ; j < n ; j ++ ) { if ( k < VAR_11 && VAR_6 [ k ] != 0 ) { double t = 0 ; for ( int i = k ; i < VAR_5 ; i ++ ) { t += VAR_3 [ i ] [ k ] * VAR_3 [ i ] [ j ] ; } t = - t / VAR_3 [ k ] [ k ] ; for ( int i = k ; i < VAR_5 ; i ++ ) { VAR_3 [ i ] [ j ] += t * VAR_3 [ i ] [ k ] ; } } VAR_9 [ j ] = VAR_3 [ k ] [ j ] ; } if ( k < VAR_11 ) { for ( int i = k ; i < VAR_5 ; i ++ ) { VAR_7 [ i ] [ k ] = VAR_3 [ i ] [ k ] ; } } if ( k < VAR_12 ) { VAR_9 [ k ] = 0 ; for ( int i = k + 1 ; i < n ; i ++ ) { VAR_9 [ k ] = TYPE_2 . METHOD_5 ( VAR_9 [ k ] , VAR_9 [ i ] ) ; } if ( VAR_9 [ k ] != 0 ) { if ( VAR_9 [ k + 1 ] < 0 ) { VAR_9 [ k ] = - VAR_9 [ k ] ; } for ( int i = k + 1 ; i < n ; i ++ ) { VAR_9 [ i ] /= VAR_9 [ k ] ; } VAR_9 [ k + 1 ] += 1 ; } VAR_9 [ k ] = - VAR_9 [ k ] ; if ( k + 1 < VAR_5 && VAR_9 [ k ] != 0 ) { for ( int i = k + 1 ; i < VAR_5 ; i ++ ) { VAR_10 [ i ] = 0 ; } for ( int j = k + 1 ; j < n ; j ++ ) { for ( int i = k + 1 ; i < VAR_5 ; i ++ ) { VAR_10 [ i ] += VAR_9 [ j ] * VAR_3 [ i ] [ j ] ; } } for ( int j = k + 1 ; j < n ; j ++ ) { final double t = - VAR_9 [ j ] / VAR_9 [ k + 1 ] ; for ( int i = k + 1 ; i < VAR_5 ; i ++ ) { VAR_3 [ i ] [ j ] += t * VAR_10 [ i ] ; } } } for ( int i = k + 1 ; i < n ; i ++ ) { VAR_8 [ i ] [ k ] = VAR_9 [ i ] ; } } } int p = n ; if ( VAR_11 < n ) { VAR_6 [ VAR_11 ] = VAR_3 [ VAR_11 ] [ VAR_11 ] ; } if ( VAR_5 < p ) { VAR_6 [ p - 1 ] = 0 ; } if ( VAR_12 + 1 < p ) { VAR_9 [ VAR_12 ] = VAR_3 [ VAR_12 ] [ p - 1 ] ; } VAR_9 [ p - 1 ] = 0 ; for ( int j = VAR_11 ; j < n ; j ++ ) { for ( int i = 0 ; i < VAR_5 ; i ++ ) { VAR_7 [ i ] [ j ] = 0 ; } VAR_7 [ j ] [ j ] = 1 ; } for ( int k = VAR_11 - 1 ; k >= 0 ; k -- ) { if ( VAR_6 [ k ] != 0 ) { for ( int j = k + 1 ; j < n ; j ++ ) { double t = 0 ; for ( int i = k ; i < VAR_5 ; i ++ ) { t += VAR_7 [ i ] [ k ] * VAR_7 [ i ] [ j ] ; } t = - t / VAR_7 [ k ] [ k ] ; for ( int i = k ; i < VAR_5 ; i ++ ) { VAR_7 [ i ] [ j ] += t * VAR_7 [ i ] [ k ] ; } } for ( int i = k ; i < VAR_5 ; i ++ ) { VAR_7 [ i ] [ k ] = - VAR_7 [ i ] [ k ] ; } VAR_7 [ k ] [ k ] = 1 + VAR_7 [ k ] [ k ] ; for ( int i = 0 ; i < k - 1 ; i ++ ) { VAR_7 [ i ] [ k ] = 0 ; } } else { for ( int i = 0 ; i < VAR_5 ; i ++ ) { VAR_7 [ i ] [ k ] = 0 ; } VAR_7 [ k ] [ k ] = 1 ; } } for ( int k = n - 1 ; k >= 0 ; k -- ) { if ( k < VAR_12 && VAR_9 [ k ] != 0 ) { for ( int j = k + 1 ; j < n ; j ++ ) { double t = 0 ; for ( int i = k + 1 ; i < n ; i ++ ) { t += VAR_8 [ i ] [ k ] * VAR_8 [ i ] [ j ] ; } t = - t / VAR_8 [ k + 1 ] [ k ] ; for ( int i = k + 1 ; i < n ; i ++ ) { VAR_8 [ i ] [ j ] += t * VAR_8 [ i ] [ k ] ; } } } for ( int i = 0 ; i < n ; i ++ ) { VAR_8 [ i ] [ k ] = 0 ; } VAR_8 [ k ] [ k ] = 1 ; } final int VAR_13 = p - 1 ; int VAR_14 = 0 ; while ( p > 0 ) { int k ; int VAR_15 ; for ( k = p - INT_1 ; k >= 0 ; k -- ) { final double VAR_16 = VAR_17 + VAR_18 * ( TYPE_2 . METHOD_6 ( VAR_6 [ k ] ) + TYPE_2 . METHOD_6 ( VAR_6 [ k + 1 ] ) ) ; if ( ! ( TYPE_2 . METHOD_6 ( VAR_9 [ k ] ) > VAR_16 ) ) { VAR_9 [ k ] = 0 ; break ; } } if ( k == p - INT_1 ) { VAR_15 = INT_2 ; } else { int VAR_19 ; for ( VAR_19 = p - 1 ; VAR_19 >= k ; VAR_19 -- ) { if ( VAR_19 == k ) { break ; } final double t = ( VAR_19 != p ? TYPE_2 . METHOD_6 ( VAR_9 [ VAR_19 ] ) : 0 ) + ( VAR_19 != k + 1 ? TYPE_2 . METHOD_6 ( VAR_9 [ VAR_19 - 1 ] ) : 0 ) ; if ( TYPE_2 . METHOD_6 ( VAR_6 [ VAR_19 ] ) <= VAR_17 + VAR_18 * t ) { VAR_6 [ VAR_19 ] = 0 ; break ; } } if ( VAR_19 == k ) { VAR_15 = INT_3 ; } else if ( VAR_19 == p - 1 ) { VAR_15 = 1 ; } else { VAR_15 = INT_1 ; k = VAR_19 ; } } k ++ ; switch ( VAR_15 ) { case 1 : { double f = VAR_9 [ p - INT_1 ] ; VAR_9 [ p - INT_1 ] = 0 ; for ( int j = p - INT_1 ; j >= k ; j -- ) { double t = TYPE_2 . METHOD_5 ( VAR_6 [ j ] , f ) ; final double VAR_20 = VAR_6 [ j ] / t ; final double VAR_21 = f / t ; VAR_6 [ j ] = t ; if ( j != k ) { f = - VAR_21 * VAR_9 [ j - 1 ] ; VAR_9 [ j - 1 ] = VAR_20 * VAR_9 [ j - 1 ] ; } for ( int i = 0 ; i < n ; i ++ ) { t = VAR_20 * VAR_8 [ i ] [ j ] + VAR_21 * VAR_8 [ i ] [ p - 1 ] ; VAR_8 [ i ] [ p - 1 ] = - VAR_21 * VAR_8 [ i ] [ j ] + VAR_20 * VAR_8 [ i ] [ p - 1 ] ; VAR_8 [ i ] [ j ] = t ; } } } break ; case INT_1 : { double f = VAR_9 [ k - 1 ] ; VAR_9 [ k - 1 ] = 0 ; for ( int j = k ; j < p ; j ++ ) { double t = TYPE_2 . METHOD_5 ( VAR_6 [ j ] , f ) ; final double VAR_20 = VAR_6 [ j ] / t ; final double VAR_21 = f / t ; VAR_6 [ j ] = t ; f = - VAR_21 * VAR_9 [ j ] ; VAR_9 [ j ] = VAR_20 * VAR_9 [ j ] ; for ( int i = 0 ; i < VAR_5 ; i ++ ) { t = VAR_20 * VAR_7 [ i ] [ j ] + VAR_21 * VAR_7 [ i ] [ k - 1 ] ; VAR_7 [ i ] [ k - 1 ] = - VAR_21 * VAR_7 [ i ] [ j ] + VAR_20 * VAR_7 [ i ] [ k - 1 ] ; VAR_7 [ i ] [ j ] = t ; } } } break ; case INT_3 : { final double VAR_22 = TYPE_2 . METHOD_4 ( TYPE_2 . METHOD_6 ( VAR_6 [ p - 1 ] ) , TYPE_2 . METHOD_6 ( VAR_6 [ p - INT_1 ] ) ) ; final double VAR_23 = TYPE_2 . METHOD_4 ( TYPE_2 . METHOD_4 ( TYPE_2 . METHOD_4 ( VAR_22 , TYPE_2 . METHOD_6 ( VAR_9 [ p - INT_1 ] ) ) , TYPE_2 . METHOD_6 ( VAR_6 [ k ] ) ) , TYPE_2 . METHOD_6 ( VAR_9 [ k ] ) ) ; final double VAR_24 = VAR_6 [ p - 1 ] / VAR_23 ; final double VAR_25 = VAR_6 [ p - INT_1 ] / VAR_23 ; final double VAR_26 = VAR_9 [ p - INT_1 ] / VAR_23 ; final double VAR_27 = VAR_6 [ k ] / VAR_23 ; final double VAR_28 = VAR_9 [ k ] / VAR_23 ; final double b = ( ( VAR_25 + VAR_24 ) * ( VAR_25 - VAR_24 ) + VAR_26 * VAR_26 ) / FLOAT_1 ; final double c = ( VAR_24 * VAR_26 ) * ( VAR_24 * VAR_26 ) ; double VAR_29 = 0 ; if ( b != 0 || c != 0 ) { VAR_29 = TYPE_2 . METHOD_7 ( b * b + c ) ; if ( b < 0 ) { VAR_29 = - VAR_29 ; } VAR_29 = c / ( b + VAR_29 ) ; } double f = ( VAR_27 + VAR_24 ) * ( VAR_27 - VAR_24 ) + VAR_29 ; double VAR_30 = VAR_27 * VAR_28 ; for ( int j = k ; j < p - 1 ; j ++ ) { double t = TYPE_2 . METHOD_5 ( f , VAR_30 ) ; double VAR_20 = f / t ; double VAR_21 = VAR_30 / t ; if ( j != k ) { VAR_9 [ j - 1 ] = t ; } f = VAR_20 * VAR_6 [ j ] + VAR_21 * VAR_9 [ j ] ; VAR_9 [ j ] = VAR_20 * VAR_9 [ j ] - VAR_21 * VAR_6 [ j ] ; VAR_30 = VAR_21 * VAR_6 [ j + 1 ] ; VAR_6 [ j + 1 ] = VAR_20 * VAR_6 [ j + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { t = VAR_20 * VAR_8 [ i ] [ j ] + VAR_21 * VAR_8 [ i ] [ j + 1 ] ; VAR_8 [ i ] [ j + 1 ] = - VAR_21 * VAR_8 [ i ] [ j ] + VAR_20 * VAR_8 [ i ] [ j + 1 ] ; VAR_8 [ i ] [ j ] = t ; } t = TYPE_2 . METHOD_5 ( f , VAR_30 ) ; VAR_20 = f / t ; VAR_21 = VAR_30 / t ; VAR_6 [ j ] = t ; f = VAR_20 * VAR_9 [ j ] + VAR_21 * VAR_6 [ j + 1 ] ; VAR_6 [ j + 1 ] = - VAR_21 * VAR_9 [ j ] + VAR_20 * VAR_6 [ j + 1 ] ; VAR_30 = VAR_21 * VAR_9 [ j + 1 ] ; VAR_9 [ j + 1 ] = VAR_20 * VAR_9 [ j + 1 ] ; if ( j < VAR_5 - 1 ) { for ( int i = 0 ; i < VAR_5 ; i ++ ) { t = VAR_20 * VAR_7 [ i ] [ j ] + VAR_21 * VAR_7 [ i ] [ j + 1 ] ; VAR_7 [ i ] [ j + 1 ] = - VAR_21 * VAR_7 [ i ] [ j ] + VAR_20 * VAR_7 [ i ] [ j + 1 ] ; VAR_7 [ i ] [ j ] = t ; } } } VAR_9 [ p - INT_1 ] = f ; VAR_14 = VAR_14 + 1 ; } break ; default : { if ( VAR_6 [ k ] <= 0 ) { VAR_6 [ k ] = VAR_6 [ k ] < 0 ? - VAR_6 [ k ] : 0 ; for ( int i = 0 ; i <= VAR_13 ; i ++ ) { VAR_8 [ i ] [ k ] = - VAR_8 [ i ] [ k ] ; } } while ( k < VAR_13 ) { if ( VAR_6 [ k ] >= VAR_6 [ k + 1 ] ) { break ; } double t = VAR_6 [ k ] ; VAR_6 [ k ] = VAR_6 [ k + 1 ] ; VAR_6 [ k + 1 ] = t ; if ( k < n - 1 ) { for ( int i = 0 ; i < n ; i ++ ) { t = VAR_8 [ i ] [ k + 1 ] ; VAR_8 [ i ] [ k + 1 ] = VAR_8 [ i ] [ k ] ; VAR_8 [ i ] [ k ] = t ; } } if ( k < VAR_5 - 1 ) { for ( int i = 0 ; i < VAR_5 ; i ++ ) { t = VAR_7 [ i ] [ k + 1 ] ; VAR_7 [ i ] [ k + 1 ] = VAR_7 [ i ] [ k ] ; VAR_7 [ i ] [ k ] = t ; } } k ++ ; } VAR_14 = 0 ; p -- ; } break ; } } VAR_31 = TYPE_2 . METHOD_4 ( VAR_5 * VAR_6 [ 0 ] * VAR_18 , TYPE_2 . METHOD_7 ( VAR_32 ) ) ; if ( ! VAR_4 ) { VAR_33 = TYPE_3 . METHOD_8 ( VAR_7 ) ; VAR_34 = TYPE_3 . METHOD_8 ( VAR_8 ) ; } else { VAR_33 = TYPE_3 . METHOD_8 ( VAR_8 ) ; VAR_34 = TYPE_3 . METHOD_8 ( VAR_7 ) ; } }