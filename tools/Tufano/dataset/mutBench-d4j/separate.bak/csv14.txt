private void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 value , final int offset , final int VAR_2 , final TYPE_3 out , final boolean VAR_3 ) throws TYPE_4 { boolean VAR_4 = false ; int start = offset ; int VAR_5 = offset ; final int end = offset + VAR_2 ; final char VAR_6 = METHOD_2 ( ) ; final char VAR_7 = METHOD_3 ( ) . METHOD_4 ( ) ; TYPE_5 VAR_8 = METHOD_5 ( ) ; if ( VAR_8 == null ) { VAR_8 = VAR_9 ; } switch ( VAR_8 ) { case VAR_10 : VAR_4 = true ; break ; case VAR_11 : VAR_4 = ! ( VAR_1 instanceof TYPE_6 ) ; break ; case VAR_12 : METHOD_6 ( value , offset , VAR_2 , out ) ; return ; case VAR_13 : if ( VAR_2 <= 0 ) { if ( VAR_3 ) { VAR_4 = true ; } } else { char c = value . METHOD_7 ( VAR_5 ) ; if ( VAR_3 && ( c < CHAR_1 || c > CHAR_2 && c < CHAR_3 || c > CHAR_4 && c < CHAR_5 || c > CHAR_6 ) ) { VAR_4 = true ; } else if ( c <= VAR_14 ) { VAR_4 = true ; } else { while ( VAR_5 < end ) { c = value . METHOD_7 ( VAR_5 ) ; if ( c == VAR_15 || c == VAR_16 || c == VAR_7 || c == VAR_6 ) { VAR_4 = true ; break ; } VAR_5 ++ ; } if ( ! VAR_4 ) { VAR_5 = end - 1 ; c = value . METHOD_7 ( VAR_5 ) ; if ( c <= VAR_17 ) { VAR_4 = true ; } } } } if ( ! VAR_4 ) { out . append ( value , start , end ) ; return ; } break ; default : throw new TYPE_7 ( STRING_1 + VAR_8 ) ; } if ( ! VAR_4 ) { out . append ( value , start , end ) ; return ; } out . append ( VAR_7 ) ; while ( VAR_5 < end ) { final char c = value . METHOD_7 ( VAR_5 ) ; if ( c == VAR_7 ) { out . append ( value , start , VAR_5 + 1 ) ; start = VAR_5 ; } VAR_5 ++ ; } out . append ( value , start , VAR_5 ) ; out . append ( VAR_7 ) ; }