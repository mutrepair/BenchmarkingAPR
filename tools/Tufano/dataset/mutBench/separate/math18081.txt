public TYPE_1 METHOD_1 ( final int VAR_1 , final TYPE_2 f , final TYPE_1 min , final TYPE_1 VAR_2 , final TYPE_1 VAR_3 , final TYPE_3 VAR_4 ) throws TYPE_4 , TYPE_5 { TYPE_6 . METHOD_2 ( f ) ; VAR_5 . METHOD_3 ( VAR_1 ) ; VAR_5 . METHOD_4 ( ) ; TYPE_1 VAR_6 = VAR_3 . METHOD_5 ( ) ; TYPE_1 VAR_7 = VAR_6 . METHOD_6 ( ( byte ) 1 , VAR_8 ) ; final TYPE_1 [ ] x = new TYPE_1 [ VAR_9 + 1 ] ; final TYPE_1 [ ] y = new TYPE_1 [ VAR_9 + 1 ] ; x [ 0 ] = min ; x [ 1 ] = VAR_3 ; x [ INT_1 ] = VAR_2 ; VAR_5 . METHOD_7 ( ) ; y [ 1 ] = f . value ( x [ 1 ] ) ; if ( y [ 1 ] . METHOD_8 ( ) ) { return x [ 1 ] ; } VAR_5 . METHOD_7 ( ) ; y [ 0 ] = f . value ( x [ 0 ] ) ; if ( y [ 0 ] . METHOD_8 ( ) ) { return x [ 0 ] ; } int VAR_10 ; int VAR_11 ; if ( y [ 0 ] . METHOD_9 ( y [ 1 ] ) . METHOD_10 ( ) ) { VAR_10 = INT_1 ; VAR_11 = 1 ; } else { VAR_5 . METHOD_7 ( ) ; y [ INT_1 ] = f . value ( x [ INT_1 ] ) ; if ( y [ INT_1 ] . METHOD_8 ( ) ) { return x [ INT_1 ] ; } if ( y [ 1 ] . METHOD_9 ( y [ INT_1 ] ) . METHOD_10 ( ) ) { VAR_10 = INT_2 ; VAR_11 = INT_1 ; } else { throw new TYPE_5 ( x [ 0 ] . METHOD_11 ( ) , x [ INT_1 ] . METHOD_11 ( ) , y [ 0 ] . METHOD_11 ( ) , y [ INT_1 ] . METHOD_11 ( ) ) ; } } final TYPE_1 [ ] VAR_12 = new TYPE_1 [ x . length ] ; TYPE_1 VAR_13 = x [ VAR_11 - 1 ] ; TYPE_1 VAR_14 = y [ VAR_11 - 1 ] ; TYPE_1 VAR_15 = VAR_13 . METHOD_12 ( ) ; TYPE_1 VAR_16 = VAR_14 . METHOD_12 ( ) ; int VAR_17 = 0 ; TYPE_1 VAR_18 = x [ VAR_11 ] ; TYPE_1 VAR_19 = y [ VAR_11 ] ; TYPE_1 VAR_20 = VAR_18 . METHOD_12 ( ) ; TYPE_1 VAR_21 = VAR_19 . METHOD_12 ( ) ; int VAR_22 = 0 ; while ( true ) { TYPE_1 VAR_23 = VAR_15 . METHOD_13 ( VAR_20 ) ? VAR_20 : VAR_15 ; TYPE_1 VAR_24 = VAR_16 . METHOD_13 ( VAR_21 ) ? VAR_21 : VAR_16 ; final TYPE_1 VAR_25 = VAR_26 . add ( VAR_27 . METHOD_9 ( VAR_23 ) ) ; if ( VAR_18 . METHOD_14 ( VAR_13 ) . METHOD_14 ( VAR_25 ) . METHOD_10 ( ) || VAR_24 . METHOD_13 ( VAR_28 ) ) { switch ( VAR_4 ) { case VAR_29 : return VAR_16 . METHOD_13 ( VAR_21 ) ? VAR_13 : VAR_18 ; case VAR_30 : return VAR_13 ; case VAR_31 : return VAR_18 ; case VAR_32 : return VAR_14 . METHOD_13 ( VAR_6 ) ? VAR_13 : VAR_18 ; case VAR_33 : return VAR_14 . METHOD_13 ( VAR_6 ) ? VAR_18 : VAR_13 ; default : throw new TYPE_7 ( null ) ; } } TYPE_1 VAR_34 ; if ( VAR_17 >= VAR_35 ) { VAR_34 = VAR_19 . METHOD_15 ( INT_3 ) . METHOD_16 ( ) ; } else if ( true ) { VAR_34 = VAR_14 . METHOD_15 ( INT_3 ) . METHOD_16 ( ) ; } else { VAR_34 = VAR_6 ; } TYPE_1 VAR_36 ; int start = 0 ; int end = VAR_10 ; do { TYPE_8 . METHOD_17 ( x , start , VAR_12 , start , end - start ) ; VAR_36 = METHOD_18 ( VAR_34 , VAR_12 , y , start , end ) ; if ( ! ( VAR_36 . METHOD_19 ( VAR_13 ) && VAR_36 . METHOD_13 ( VAR_18 ) ) ) { if ( VAR_11 - start >= end - VAR_11 ) { ++ start ; } else { -- end ; } VAR_36 = VAR_7 ; } } while ( VAR_36 . METHOD_20 ( ) && ( end - start > 1 ) ) ; if ( VAR_36 . METHOD_20 ( ) ) { VAR_36 = VAR_13 . add ( VAR_18 . METHOD_14 ( VAR_13 ) . METHOD_15 ( INT_1 ) ) ; start = VAR_11 - 1 ; end = VAR_11 ; } VAR_5 . METHOD_7 ( ) ; final TYPE_1 VAR_37 = f . value ( VAR_36 ) ; if ( VAR_37 . METHOD_8 ( ) ) { return VAR_36 ; } if ( ( VAR_10 > INT_1 ) && ( end - start != VAR_10 ) ) { VAR_10 = end - start ; TYPE_8 . METHOD_17 ( x , start , x , 0 , VAR_10 ) ; TYPE_8 . METHOD_17 ( y , start , y , 0 , VAR_10 ) ; VAR_11 -= start ; } else if ( VAR_10 == x . length ) { VAR_10 -- ; if ( VAR_11 >= ( x . length + 1 ) / INT_1 ) { TYPE_8 . METHOD_17 ( x , 1 , x , 0 , VAR_10 ) ; TYPE_8 . METHOD_17 ( y , 1 , y , 0 , VAR_10 ) ; -- VAR_11 ; } } TYPE_8 . METHOD_17 ( x , VAR_11 , x , VAR_11 + 1 , VAR_10 - VAR_11 ) ; x [ VAR_11 ] = VAR_36 ; TYPE_8 . METHOD_17 ( y , VAR_11 , y , VAR_11 + 1 , VAR_10 - VAR_11 ) ; y [ VAR_11 ] = VAR_37 ; ++ VAR_10 ; if ( VAR_37 . METHOD_9 ( VAR_14 ) . METHOD_10 ( ) ) { VAR_18 = VAR_36 ; VAR_19 = VAR_37 ; VAR_21 = VAR_19 . METHOD_12 ( ) ; ++ VAR_17 ; VAR_22 = 0 ; } else { VAR_13 = VAR_36 ; VAR_14 = VAR_37 ; VAR_16 = VAR_14 . METHOD_12 ( ) ; VAR_17 = 0 ; ++ VAR_22 ; VAR_11 ++ ; } } }