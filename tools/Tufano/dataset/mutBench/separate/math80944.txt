protected TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; final int VAR_1 = METHOD_3 ( ) . length ; final double [ ] VAR_2 = METHOD_4 ( ) ; final int VAR_3 = VAR_2 . length ; VAR_4 = TYPE_2 . min ( VAR_1 , VAR_3 ) ; VAR_5 = new double [ VAR_3 ] ; VAR_6 = new double [ VAR_3 ] ; VAR_7 = new double [ VAR_3 ] ; VAR_8 = new int [ VAR_3 ] ; VAR_9 = new double [ VAR_3 ] ; double VAR_10 = 0 ; double VAR_11 = 0 ; double [ ] VAR_12 = new double [ VAR_3 ] ; double [ ] VAR_13 = new double [ VAR_3 ] ; double [ ] VAR_14 = new double [ VAR_1 ] ; double [ ] VAR_15 = new double [ VAR_1 ] ; double [ ] VAR_16 = new double [ VAR_1 ] ; double [ ] VAR_17 = new double [ VAR_3 ] ; double [ ] VAR_18 = new double [ VAR_3 ] ; double [ ] VAR_19 = new double [ VAR_3 ] ; final TYPE_3 VAR_20 = METHOD_5 ( ) ; double [ ] VAR_21 = METHOD_6 ( VAR_2 ) ; double [ ] VAR_22 = METHOD_7 ( VAR_21 ) ; TYPE_1 VAR_23 = new TYPE_1 ( VAR_2 , VAR_21 ) ; double VAR_24 = METHOD_8 ( VAR_22 ) ; VAR_25 = 0 ; boolean VAR_26 = true ; final TYPE_4 < TYPE_1 > VAR_27 = METHOD_9 ( ) ; while ( true ) { METHOD_10 ( ) ; final TYPE_1 VAR_28 = VAR_23 ; METHOD_11 ( METHOD_12 ( VAR_2 ) ) ; VAR_29 = VAR_20 . METHOD_13 ( VAR_22 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { VAR_16 [ i ] = VAR_29 [ i ] ; } METHOD_14 ( VAR_16 ) ; for ( int k = 0 ; k < VAR_4 ; ++ k ) { int VAR_30 = VAR_8 [ k ] ; VAR_31 [ k ] [ VAR_30 ] = VAR_5 [ VAR_30 ] ; } if ( VAR_26 ) { VAR_11 = 0 ; for ( int k = 0 ; k < VAR_3 ; ++ k ) { double VAR_32 = VAR_6 [ k ] ; if ( VAR_32 == 0 ) { VAR_32 = 1.0 ; } double VAR_33 = VAR_32 * VAR_2 [ k ] ; VAR_11 += VAR_33 * VAR_33 ; VAR_12 [ k ] = VAR_32 ; } VAR_11 = TYPE_2 . METHOD_15 ( VAR_11 ) ; VAR_10 = ( VAR_11 == 0 ) ? VAR_34 : ( VAR_34 * VAR_11 ) ; } double VAR_35 = 0 ; if ( VAR_24 != 0 ) { for ( int j = 0 ; j < VAR_4 ; ++ j ) { int VAR_36 = VAR_8 [ j ] ; double VAR_37 = VAR_6 [ VAR_36 ] ; if ( VAR_37 != 0 ) { double sum = 0 ; for ( int i = 0 ; i <= j ; ++ i ) { sum += VAR_31 [ i ] [ VAR_36 ] * VAR_16 [ i ] ; } VAR_35 = TYPE_2 . METHOD_16 ( VAR_35 , TYPE_2 . METHOD_17 ( sum ) / ( VAR_37 * VAR_24 ) ) ; } } } if ( VAR_35 <= VAR_38 ) { METHOD_18 ( VAR_24 ) ; return VAR_23 ; } for ( int j = 0 ; j < VAR_3 ; ++ j ) { VAR_12 [ j ] = TYPE_2 . METHOD_16 ( VAR_12 [ j ] , VAR_6 [ j ] ) ; } for ( double VAR_39 = 0 ; VAR_39 < FLOAT_1 ; ) { for ( int j = 0 ; j < VAR_4 ; ++ j ) { int VAR_36 = VAR_8 [ j ] ; VAR_13 [ VAR_36 ] = VAR_2 [ VAR_36 ] ; } final double VAR_40 = VAR_24 ; double [ ] VAR_41 = VAR_29 ; VAR_29 = VAR_14 ; VAR_14 = VAR_41 ; VAR_41 = VAR_21 ; VAR_21 = VAR_15 ; VAR_15 = VAR_41 ; METHOD_19 ( VAR_16 , VAR_10 , VAR_12 , VAR_17 , VAR_18 , VAR_19 ) ; double VAR_42 = 0 ; for ( int j = 0 ; j < VAR_4 ; ++ j ) { int VAR_36 = VAR_8 [ j ] ; VAR_9 [ VAR_36 ] = - VAR_9 [ VAR_36 ] ; VAR_2 [ VAR_36 ] = VAR_13 [ VAR_36 ] + VAR_9 [ VAR_36 ] ; double VAR_37 = VAR_12 [ VAR_36 ] * VAR_9 [ VAR_36 ] ; VAR_42 += VAR_37 * VAR_37 ; } VAR_42 = TYPE_2 . METHOD_15 ( VAR_42 ) ; if ( VAR_26 ) { VAR_10 = TYPE_2 . min ( VAR_10 , VAR_42 ) ; } VAR_21 = METHOD_6 ( VAR_2 ) ; VAR_22 = METHOD_7 ( VAR_21 ) ; VAR_23 = new TYPE_1 ( VAR_2 , VAR_21 ) ; VAR_24 = METHOD_8 ( VAR_22 ) ; double VAR_43 = - 1.0 ; if ( FLOAT_2 * VAR_24 < VAR_40 ) { double VAR_44 = VAR_24 / VAR_40 ; VAR_43 = 1.0 - VAR_44 * VAR_44 ; } for ( int j = 0 ; j < VAR_4 ; ++ j ) { int VAR_36 = VAR_8 [ j ] ; double VAR_45 = VAR_9 [ VAR_36 ] ; VAR_17 [ j ] = 0 ; for ( int i = 0 ; i <= j ; ++ i ) { VAR_17 [ i ] += VAR_31 [ i ] [ VAR_36 ] * VAR_45 ; } } double VAR_46 = 0 ; for ( int j = 0 ; j < VAR_4 ; ++ j ) { VAR_46 += VAR_17 [ j ] * VAR_17 [ j ] ; } double VAR_47 = VAR_40 * VAR_40 ; VAR_46 = VAR_46 / VAR_47 ; double VAR_48 = VAR_25 * VAR_42 * VAR_42 / VAR_47 ; double VAR_49 = VAR_46 + INT_1 * VAR_48 ; double VAR_50 = - ( VAR_46 + VAR_48 ) ; VAR_39 = ( VAR_49 == 0 ) ? 0 : ( VAR_43 / VAR_49 ) ; if ( VAR_39 <= FLOAT_3 ) { double tmp = ( VAR_43 < 0 ) ? ( FLOAT_4 * VAR_50 / ( VAR_50 + FLOAT_4 * VAR_43 ) ) : FLOAT_4 ; if ( ( FLOAT_2 * VAR_24 >= VAR_40 ) || ( tmp < FLOAT_2 ) ) { tmp = FLOAT_2 ; } VAR_10 = tmp * TYPE_2 . min ( VAR_10 , FLOAT_5 * VAR_42 ) ; VAR_25 /= tmp ; } else if ( ( VAR_25 == 0 ) || ( VAR_39 >= FLOAT_6 ) ) { VAR_10 = INT_1 * VAR_42 ; VAR_25 *= FLOAT_4 ; } if ( VAR_39 >= FLOAT_1 ) { VAR_26 = false ; VAR_11 = 0 ; for ( int k = 0 ; k < VAR_3 ; ++ k ) { double VAR_51 = VAR_12 [ k ] + VAR_2 [ k ] ; VAR_11 += VAR_51 * VAR_51 ; } VAR_11 = TYPE_2 . METHOD_15 ( VAR_11 ) ; if ( VAR_27 != null && VAR_27 . METHOD_20 ( METHOD_21 ( ) , VAR_28 , VAR_23 ) ) { METHOD_18 ( VAR_24 ) ; return VAR_23 ; } } else { VAR_24 = VAR_40 ; for ( int j = 0 ; j < VAR_4 ; ++ j ) { int VAR_36 = VAR_8 [ j ] ; VAR_2 [ VAR_36 ] = VAR_13 [ VAR_36 ] ; } VAR_41 = VAR_29 ; VAR_29 = VAR_14 ; VAR_14 = VAR_41 ; VAR_41 = VAR_21 ; VAR_21 = VAR_15 ; VAR_15 = VAR_41 ; VAR_23 = new TYPE_1 ( VAR_2 , VAR_21 ) ; } if ( ( TYPE_2 . METHOD_17 ( VAR_43 ) <= VAR_52 && VAR_49 <= VAR_52 && VAR_39 <= FLOAT_7 ) || VAR_10 <= VAR_53 * VAR_11 ) { METHOD_18 ( VAR_24 ) ; return VAR_23 ; } if ( TYPE_2 . METHOD_17 ( VAR_43 ) <= VAR_54 && VAR_49 <= VAR_54 && VAR_39 <= FLOAT_7 ) { throw new TYPE_5 ( VAR_55 , VAR_52 ) ; } else if ( VAR_10 <= VAR_54 * VAR_11 ) { throw new TYPE_5 ( VAR_56 , VAR_53 ) ; } else if ( VAR_35 <= VAR_54 ) { throw new TYPE_5 ( VAR_57 , VAR_38 ) ; } } } }