public static byte [ ] METHOD_1 ( byte [ ] VAR_1 , boolean VAR_2 ) { long VAR_3 = VAR_1 . length ; long VAR_4 = VAR_3 * VAR_5 ; long VAR_6 = VAR_4 % VAR_7 ; long VAR_8 = VAR_4 / VAR_7 ; long VAR_9 = 0 ; int VAR_10 = 0 ; if ( VAR_6 != 0 ) { VAR_9 = ( VAR_8 + 1 ) * INT_1 ; } else { VAR_9 = VAR_8 * INT_1 ; } if ( VAR_2 ) { VAR_10 = ( VAR_11 . length == 0 ? 0 : ( int ) TYPE_1 . METHOD_2 ( ( float ) VAR_9 / VAR_12 ) ) ; VAR_9 += VAR_10 * VAR_11 . length ; } if ( VAR_9 > VAR_13 ) { throw new TYPE_2 ( STRING_1 + VAR_13 ) ; } int VAR_14 = ( int ) VAR_9 ; byte VAR_15 [ ] = new byte [ VAR_14 ] ; byte k = 0 , VAR_16 = 0 , VAR_17 = 0 , VAR_18 = 0 , VAR_19 = 0 ; int VAR_20 = 0 ; int VAR_21 = 0 ; int i = 0 ; int VAR_22 = VAR_12 ; int VAR_23 = 0 ; for ( i = 0 ; i < VAR_8 ; i ++ ) { VAR_21 = i * INT_2 ; VAR_17 = VAR_1 [ VAR_21 ] ; VAR_18 = VAR_1 [ VAR_21 + 1 ] ; VAR_19 = VAR_1 [ VAR_21 + INT_3 ] ; VAR_16 = ( byte ) ( VAR_18 & INT_4 ) ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; byte VAR_26 = ( ( VAR_18 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_18 > > INT_1 ) : ( byte ) ( ( VAR_18 ) > > INT_1 ^ INT_7 ) ; byte VAR_27 = ( ( VAR_19 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_19 > > INT_8 ) : ( byte ) ( ( VAR_19 ) > > INT_8 ^ INT_9 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ VAR_26 | ( k < < INT_1 ) ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_28 [ ( VAR_16 < < INT_3 ) | VAR_27 ] ; VAR_15 [ VAR_20 + INT_2 ] = VAR_28 [ VAR_19 & INT_10 ] ; VAR_20 += INT_1 ; if ( VAR_2 ) { if ( VAR_20 == VAR_22 ) { TYPE_3 . METHOD_3 ( VAR_11 , 0 , VAR_15 , VAR_20 , VAR_11 . length ) ; VAR_23 ++ ; VAR_22 = ( VAR_12 * ( VAR_23 + 1 ) ) + ( VAR_23 * VAR_11 . length ) ; VAR_20 += VAR_11 . length ; } } } VAR_21 = i * INT_2 ; if ( VAR_6 == VAR_5 ) { VAR_17 = VAR_1 [ VAR_21 ] ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 < < INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ k < < INT_1 ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_29 ; VAR_15 [ VAR_20 + INT_2 ] = VAR_29 ; } else if ( VAR_6 == VAR_30 ) { VAR_17 = VAR_1 [ VAR_21 ] ; VAR_18 = VAR_1 [ VAR_21 + 1 ] ; VAR_16 = ( byte ) ( VAR_18 & INT_4 ) ; k = ( byte ) ( VAR_17 & INT_5 ) ; byte VAR_24 = ( ( VAR_17 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_17 > > INT_3 ) : ( byte ) ( ( VAR_17 ) > > INT_3 ^ INT_6 ) ; byte VAR_26 = ( ( VAR_18 & VAR_25 ) == 0 ) ? ( byte ) ( VAR_18 > > INT_1 ) : ( byte ) ( ( VAR_18 ) > > INT_1 ^ INT_7 ) ; VAR_15 [ VAR_20 ] = VAR_28 [ VAR_24 ] ; VAR_15 [ VAR_20 + 1 ] = VAR_28 [ VAR_26 | ( k < < INT_1 ) ] ; VAR_15 [ VAR_20 + INT_3 ] = VAR_28 [ VAR_16 < < INT_3 ] ; VAR_15 [ VAR_20 + INT_2 ] = VAR_29 ; } if ( VAR_2 ) { if ( VAR_23 < VAR_10 ) { TYPE_3 . METHOD_3 ( VAR_11 , 0 , VAR_15 , VAR_14 - VAR_11 . length , VAR_11 . length ) ; } } return VAR_15 ; }