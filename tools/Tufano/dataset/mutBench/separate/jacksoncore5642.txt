public static int METHOD_1 ( long value , char [ ] buffer , int offset ) { if ( value < 0L ) { if ( value > VAR_1 ) { return METHOD_2 ( ( int ) value , buffer , offset ) ; } if ( value == VAR_2 ) { int VAR_3 = TYPE_1 . length ( ) ; TYPE_1 . METHOD_3 ( 0 , VAR_3 , buffer , offset ) ; return ( offset - VAR_3 ) ; } buffer [ offset ++ ] = CHAR_1 ; value = - value ; } else { if ( value <= VAR_4 ) { return METHOD_2 ( ( int ) value , buffer , offset ) ; } } int VAR_5 = offset ; offset += METHOD_4 ( value ) ; int VAR_6 = offset ; while ( value > VAR_4 ) { VAR_6 -= INT_1 ; long VAR_7 = value / VAR_8 ; int VAR_9 = ( int ) ( value - VAR_7 * VAR_8 ) ; METHOD_5 ( VAR_9 , buffer , VAR_6 ) ; value = VAR_7 ; } int VAR_10 = ( int ) value ; while ( VAR_10 >= INT_2 ) { VAR_6 -= INT_1 ; int VAR_7 = VAR_10 / INT_2 ; int VAR_9 = VAR_10 - ( VAR_7 * INT_2 ) ; METHOD_5 ( VAR_9 , buffer , VAR_6 ) ; VAR_10 = VAR_7 ; } METHOD_6 ( VAR_10 , buffer , VAR_5 ) ; return offset ; }