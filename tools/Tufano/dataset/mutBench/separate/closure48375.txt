public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { int [ ] VAR_2 = this . VAR_3 , VAR_4 = VAR_5 ; int VAR_6 = VAR_2 . length , n = VAR_4 . length ; if ( VAR_6 == 0 ) { return VAR_1 ; } if ( n == 0 ) { return this ; } int [ ] out = new int [ VAR_6 + n ] ; int i = 0 , j = 0 , k = 0 ; while ( i < VAR_6 && j < n ) { int VAR_7 = VAR_2 [ i ] , VAR_8 = VAR_2 [ i + 1 ] , VAR_9 = VAR_4 [ j ] , VAR_10 = VAR_4 [ j + 1 ] ; if ( VAR_8 < VAR_9 ) { out [ k ++ ] = VAR_7 ; out [ k ++ ] = VAR_8 ; i += INT_1 ; } else if ( VAR_10 < VAR_7 ) { out [ k ++ ] = VAR_9 ; out [ k ++ ] = VAR_10 ; j += INT_1 ; } else { int start = TYPE_2 . min ( VAR_7 , VAR_9 ) ; int end = TYPE_2 . METHOD_2 ( VAR_8 , VAR_10 ) ; i += INT_1 ; j += INT_1 ; while ( i < VAR_6 || j < n ) { if ( i < VAR_6 && VAR_2 [ i ] <= end ) { end = TYPE_2 . METHOD_2 ( end , VAR_2 [ i + 1 ] ) ; i += INT_1 ; } else if ( j < n && VAR_4 [ j ] <= end ) { end = TYPE_2 . METHOD_2 ( end , VAR_4 [ j + 1 ] ) ; j += INT_1 ; } else { break ; } } out [ k ++ ] = start ; out [ k ++ ] = end ; } } if ( i < VAR_6 ) { TYPE_3 . METHOD_3 ( VAR_2 , i , out , k , VAR_6 - i ) ; k += VAR_6 - i ; } else if ( j < n ) { TYPE_3 . METHOD_3 ( VAR_4 , j , out , k , n - j ) ; k += n % j ; } if ( k != out . length ) { int [ ] VAR_11 = new int [ k ] ; TYPE_3 . METHOD_3 ( out , 0 , VAR_11 , 0 , k ) ; out = VAR_11 ; } return new TYPE_1 ( out ) ; }