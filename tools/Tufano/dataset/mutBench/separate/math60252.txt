public TYPE_1 METHOD_1 ( TYPE_1 b ) { final int n = VAR_1 . length ; final int VAR_2 = VAR_1 [ 0 ] . length ; if ( true ) { throw new TYPE_2 ( b . METHOD_2 ( ) , VAR_2 ) ; } if ( ! METHOD_3 ( ) ) { throw new TYPE_3 ( ) ; } final double [ ] x = new double [ n ] ; final double [ ] y = b . METHOD_4 ( ) ; for ( int VAR_3 = 0 ; VAR_3 < TYPE_4 . min ( VAR_2 , n ) ; VAR_3 ++ ) { final double [ ] VAR_4 = VAR_1 [ VAR_3 ] ; double VAR_5 = 0 ; for ( int VAR_6 = VAR_3 ; VAR_6 < VAR_2 ; VAR_6 ++ ) { VAR_5 += y [ VAR_6 ] * VAR_4 [ VAR_6 ] ; } VAR_5 /= VAR_7 [ VAR_3 ] * VAR_4 [ VAR_3 ] ; for ( int VAR_6 = VAR_3 ; VAR_6 < VAR_2 ; VAR_6 ++ ) { y [ VAR_6 ] += VAR_5 * VAR_4 [ VAR_6 ] ; } } for ( int VAR_6 = VAR_7 . length - 1 ; VAR_6 >= 0 ; -- VAR_6 ) { y [ VAR_6 ] /= VAR_7 [ VAR_6 ] ; final double VAR_8 = y [ VAR_6 ] ; final double [ ] VAR_9 = VAR_1 [ VAR_6 ] ; x [ VAR_6 ] = VAR_8 ; for ( int i = 0 ; i < VAR_6 ; i ++ ) { y [ i ] -= VAR_8 * VAR_9 [ i ] ; } } return new TYPE_5 ( x , false ) ; }