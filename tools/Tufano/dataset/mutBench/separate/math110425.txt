public static double METHOD_1 ( double x ) { if ( x != x ) { return x ; } if ( x > INT_1 ) { if ( x >= VAR_1 ) { final double t = METHOD_2 ( FLOAT_1 * x ) ; return ( FLOAT_1 * t ) * t ; } else { return FLOAT_1 * METHOD_2 ( x ) ; } } else if ( x < - INT_1 ) { if ( x <= - VAR_1 ) { final double t = METHOD_2 ( - FLOAT_1 * x ) ; return ( FLOAT_1 * t ) * t ; } else { return FLOAT_1 * METHOD_2 ( - x ) ; } } final double VAR_2 [ ] = new double [ INT_2 ] ; if ( x < 0.0 ) { x = - x ; } METHOD_2 ( x , 0.0 , VAR_2 ) ; double VAR_3 = VAR_2 [ 0 ] + VAR_2 [ 1 ] ; double VAR_4 = - ( VAR_3 * VAR_2 [ 0 ] - VAR_2 [ 1 ] ) ; double temp = VAR_3 * VAR_5 ; double VAR_6 = VAR_3 + temp - temp ; double VAR_7 = VAR_3 - VAR_6 ; double VAR_8 = 1.0 / VAR_3 ; temp = VAR_8 * VAR_5 ; double VAR_9 = VAR_8 + temp - temp ; double VAR_10 = VAR_8 - VAR_9 ; VAR_10 += ( 1.0 - VAR_6 * VAR_9 - VAR_6 * VAR_10 - VAR_7 * VAR_9 - VAR_7 * VAR_10 ) * VAR_8 ; VAR_10 += - VAR_4 * VAR_8 * VAR_8 ; temp = VAR_3 + VAR_9 ; VAR_4 += - ( temp - VAR_3 - VAR_9 ) ; VAR_3 = temp ; temp = VAR_3 + VAR_10 ; VAR_4 += - ( temp - VAR_3 - VAR_10 ) ; VAR_3 = temp ; double result = VAR_3 + VAR_4 ; result *= FLOAT_1 ; return result ; }