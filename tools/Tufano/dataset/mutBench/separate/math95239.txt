public static double METHOD_1 ( final double p , final double VAR_1 ) { if ( TYPE_1 . METHOD_2 ( p ) || TYPE_1 . METHOD_2 ( VAR_1 ) || ( p <= 0.0 ) || ( VAR_1 <= 0.0 ) ) { return VAR_2 ; } final double a = TYPE_2 . min ( p , VAR_1 ) ; final double b = TYPE_2 . METHOD_3 ( p , VAR_1 ) ; if ( a >= FLOAT_1 ) { final double VAR_3 = METHOD_4 ( a , b ) ; final double VAR_4 = a / b ; final double c = VAR_4 / ( 1.0 + VAR_4 ) ; final double VAR_5 = - ( a - FLOAT_2 ) * TYPE_2 . METHOD_5 ( c ) ; final double VAR_6 = b * TYPE_2 . METHOD_6 ( VAR_4 ) ; if ( VAR_5 <= VAR_6 ) { return ( ( ( - FLOAT_2 - TYPE_2 . METHOD_5 ( b ) + VAR_7 ) + VAR_3 ) - VAR_5 ) - VAR_6 ; } else { return ( ( ( - FLOAT_2 * TYPE_2 . METHOD_5 ( b ) + VAR_7 ) + VAR_3 ) - VAR_6 ) - VAR_5 ; } } else if ( a > FLOAT_3 ) { if ( b > FLOAT_4 ) { final int n = ( int ) TYPE_2 . METHOD_7 ( a - 1.0 ) ; double VAR_8 = 1.0 ; double VAR_9 = a ; for ( int i = 0 ; i < n ; i ++ ) { VAR_9 -= 1.0 ; VAR_8 *= VAR_9 / ( 1.0 + VAR_9 / b ) ; } return ( TYPE_2 . METHOD_5 ( VAR_8 ) - n * TYPE_2 . METHOD_5 ( b ) ) + ( TYPE_3 . METHOD_8 ( VAR_9 ) + METHOD_9 ( VAR_9 , b ) ) ; } else { double VAR_10 = 1.0 ; double VAR_9 = a ; while ( VAR_9 > FLOAT_3 ) { VAR_9 -= 1.0 ; final double VAR_4 = VAR_9 / b ; VAR_10 *= VAR_4 / ( 1.0 + VAR_4 ) ; } if ( b < FLOAT_1 ) { double VAR_11 = 1.0 ; double VAR_12 = b ; while ( VAR_12 > FLOAT_3 ) { VAR_12 -= 1.0 ; VAR_11 *= VAR_12 / ( VAR_9 + VAR_12 ) ; } return TYPE_2 . METHOD_5 ( VAR_10 ) + TYPE_2 . METHOD_5 ( VAR_11 ) + ( TYPE_3 . METHOD_8 ( VAR_9 ) + ( TYPE_3 . METHOD_8 ( VAR_12 ) - METHOD_10 ( VAR_9 , VAR_12 ) ) ) ; } else { return TYPE_2 . METHOD_5 ( VAR_10 ) + TYPE_3 . METHOD_8 ( VAR_9 ) + METHOD_9 ( VAR_9 , b ) ; } } } else if ( a >= 1.0 ) { if ( b > FLOAT_3 ) { if ( b < FLOAT_1 ) { double VAR_8 = 1.0 ; double VAR_12 = b ; while ( VAR_12 > FLOAT_3 ) { VAR_12 -= 1.0 ; VAR_8 *= VAR_12 / ( a + VAR_12 ) ; } return TYPE_2 . METHOD_5 ( VAR_8 ) + ( TYPE_3 . METHOD_8 ( a ) + ( TYPE_3 . METHOD_8 ( VAR_12 ) - METHOD_10 ( a , VAR_12 ) ) ) ; } else { return TYPE_3 . METHOD_8 ( a ) + METHOD_9 ( a , b ) ; } } else { return TYPE_3 . METHOD_8 ( a ) + TYPE_3 . METHOD_8 ( b ) - METHOD_10 ( a , b ) ; } } else { if ( b >= FLOAT_1 ) { return TYPE_3 . METHOD_8 ( a ) + METHOD_9 ( a , b ) ; } else { return TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_11 ( a ) * TYPE_3 . METHOD_11 ( b ) / TYPE_3 . METHOD_11 ( a + b ) ) ; } } }