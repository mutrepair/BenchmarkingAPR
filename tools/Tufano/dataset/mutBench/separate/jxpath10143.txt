private final int METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { if ( ( ( VAR_2 &= VAR_1 ) | ( VAR_4 &= VAR_3 ) ) == 0L ) return METHOD_2 ( INT_1 , VAR_1 , VAR_3 ) ; try { VAR_5 = VAR_6 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_7 ) { METHOD_4 ( INT_2 , VAR_2 , VAR_4 ) ; return INT_3 ; } switch ( VAR_5 ) { case INT_4 : if ( ( VAR_2 & INT_5 ) != 0L ) return METHOD_5 ( INT_3 , INT_6 ) ; break ; case INT_7 : return METHOD_6 ( VAR_2 , INT_8 , VAR_4 , 0L ) ; case INT_9 : return METHOD_6 ( VAR_2 , INT_10 , VAR_4 , 0L ) ; case INT_11 : return METHOD_6 ( VAR_2 , INT_12 , VAR_4 , 0L ) ; case INT_13 : return METHOD_6 ( VAR_2 , INT_14 , VAR_4 , 0L ) ; case INT_15 : if ( ( VAR_2 & - INT_16 ) != 0L ) return METHOD_7 ( INT_3 , INT_17 , INT_18 ) ; return METHOD_6 ( VAR_2 , INT_19 , VAR_4 , INT_20 ) ; case INT_21 : return METHOD_6 ( VAR_2 , INT_22 , VAR_4 , 0L ) ; case INT_23 : if ( ( VAR_2 & INT_24 ) != 0L ) return METHOD_7 ( INT_3 , INT_25 , INT_18 ) ; break ; case INT_26 : return METHOD_6 ( VAR_2 , INT_27 , VAR_4 , INT_28 ) ; case INT_29 : return METHOD_6 ( VAR_2 , INT_30 , VAR_4 , 0L ) ; case INT_31 : return METHOD_6 ( VAR_2 , 0L , VAR_4 , INT_32 ) ; default : break ; } return METHOD_2 ( INT_2 , VAR_2 , VAR_4 ) ; }