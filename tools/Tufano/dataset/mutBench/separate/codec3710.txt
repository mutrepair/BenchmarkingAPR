public String METHOD_1 ( String VAR_1 ) { boolean VAR_2 = false ; if ( ( VAR_1 == null ) || ( VAR_1 . length ( ) == 0 ) ) { return STRING_1 ; } if ( VAR_1 . length ( ) == 1 ) { return VAR_1 . toUpperCase ( VAR_3 ) ; } char [ ] VAR_4 = VAR_1 . toUpperCase ( VAR_3 ) . METHOD_2 ( ) ; TYPE_1 VAR_5 = new TYPE_1 ( INT_1 ) ; TYPE_1 VAR_6 = new TYPE_1 ( INT_2 ) ; switch ( VAR_4 [ 0 ] ) { case CHAR_1 : case CHAR_2 : case CHAR_3 : if ( VAR_4 [ 1 ] == CHAR_4 ) { VAR_5 . append ( VAR_4 , 1 , VAR_4 . length - 1 ) ; } else { VAR_5 . append ( VAR_4 ) ; } break ; case CHAR_5 : if ( VAR_4 [ 1 ] == CHAR_6 ) { VAR_5 . append ( VAR_4 , 1 , VAR_4 . length - 1 ) ; } else { VAR_5 . append ( VAR_4 ) ; } break ; case CHAR_7 : if ( VAR_4 [ 1 ] == CHAR_8 ) { VAR_5 . append ( VAR_4 , 1 , VAR_4 . length - 1 ) ; break ; } if ( VAR_4 [ 1 ] == CHAR_9 ) { VAR_5 . append ( VAR_4 , 1 , VAR_4 . length - 1 ) ; VAR_5 . METHOD_3 ( 0 , CHAR_7 ) ; } else { VAR_5 . append ( VAR_4 ) ; } break ; case CHAR_10 : VAR_4 [ 0 ] = CHAR_11 ; VAR_5 . append ( VAR_4 ) ; break ; default : VAR_5 . append ( VAR_4 ) ; } int VAR_7 = VAR_5 . length ( ) ; int n = 0 ; while ( ( VAR_6 . length ( ) < this . METHOD_4 ( ) ) && ( n < VAR_7 ) ) { char VAR_8 = VAR_5 . METHOD_5 ( n ) ; if ( ( VAR_8 != CHAR_12 ) && ( METHOD_6 ( VAR_5 , n , VAR_8 ) ) ) { n ++ ; } else { switch ( VAR_8 ) { case CHAR_5 : case CHAR_6 : case CHAR_13 : case CHAR_14 : case CHAR_15 : if ( n == 0 ) { VAR_6 . append ( VAR_8 ) ; } break ; case CHAR_16 : if ( METHOD_6 ( VAR_5 , n , CHAR_17 ) && METHOD_7 ( VAR_7 , n ) ) { break ; } VAR_6 . append ( VAR_8 ) ; break ; case CHAR_12 : if ( METHOD_6 ( VAR_5 , n , CHAR_11 ) && ! METHOD_7 ( VAR_7 , n ) && ( TYPE_2 . METHOD_8 ( VAR_5 . METHOD_5 ( n + 1 ) ) >= 0 ) ) { break ; } if ( METHOD_9 ( VAR_5 , n , STRING_2 ) ) { VAR_6 . append ( CHAR_10 ) ; break ; } if ( ! METHOD_7 ( VAR_7 , n ) && ( TYPE_2 . METHOD_8 ( VAR_5 . METHOD_5 ( n + 1 ) ) >= 0 ) ) { VAR_6 . append ( CHAR_11 ) ; break ; } if ( METHOD_6 ( VAR_5 , n , CHAR_11 ) && METHOD_10 ( VAR_5 , n , CHAR_9 ) ) { VAR_6 . append ( CHAR_1 ) ; break ; } if ( METHOD_10 ( VAR_5 , n , CHAR_9 ) ) { if ( ( n == 0 ) && ( VAR_7 >= INT_3 ) && METHOD_11 ( VAR_5 , INT_4 ) ) { VAR_6 . append ( CHAR_1 ) ; } else { VAR_6 . append ( CHAR_10 ) ; } } else { VAR_6 . append ( CHAR_1 ) ; } break ; case CHAR_18 : if ( ! METHOD_7 ( VAR_7 , n + 1 ) && METHOD_10 ( VAR_5 , n , CHAR_2 ) && ( TYPE_2 . METHOD_8 ( VAR_5 . METHOD_5 ( n + INT_4 ) ) >= 0 ) ) { VAR_6 . append ( CHAR_19 ) ; n += INT_4 ; } else { VAR_6 . append ( CHAR_20 ) ; } break ; case CHAR_2 : if ( METHOD_7 ( VAR_7 , n + 1 ) && METHOD_10 ( VAR_5 , n , CHAR_9 ) ) { break ; } if ( ! METHOD_7 ( VAR_7 , n + 1 ) && METHOD_10 ( VAR_5 , n , CHAR_9 ) && ! METHOD_11 ( VAR_5 , n + INT_4 ) ) { break ; } if ( ( n > 0 ) && ( METHOD_9 ( VAR_5 , n , STRING_3 ) || METHOD_9 ( VAR_5 , n , STRING_4 ) ) ) { break ; } if ( METHOD_6 ( VAR_5 , n , CHAR_2 ) ) { VAR_2 = true ; } else { VAR_2 = false ; } if ( ! METHOD_7 ( VAR_7 , n ) && ( TYPE_2 . METHOD_8 ( VAR_5 . METHOD_5 ( n + 1 ) ) >= 0 ) && ( ! VAR_2 ) ) { VAR_6 . append ( CHAR_19 ) ; } else { VAR_6 . append ( CHAR_1 ) ; } break ; case CHAR_9 : if ( METHOD_7 ( VAR_7 , n ) ) { break ; } if ( ( n > 0 ) && ( TYPE_3 . METHOD_8 ( VAR_5 . METHOD_5 ( n - 1 ) ) >= 0 ) ) { break ; } if ( METHOD_11 ( VAR_5 , n + 1 ) ) { VAR_6 . append ( CHAR_9 ) ; } break ; case CHAR_21 : case CHAR_19 : case CHAR_22 : case CHAR_17 : case CHAR_4 : case CHAR_8 : VAR_6 . append ( VAR_8 ) ; break ; case CHAR_1 : if ( n > 0 ) { if ( ! METHOD_6 ( VAR_5 , n , CHAR_12 ) ) { VAR_6 . append ( VAR_8 ) ; } } else { VAR_6 . append ( VAR_8 ) ; } break ; case CHAR_3 : if ( METHOD_10 ( VAR_5 , n , CHAR_9 ) ) { VAR_6 . append ( CHAR_21 ) ; } else { VAR_6 . append ( VAR_8 ) ; } break ; case CHAR_23 : VAR_6 . append ( CHAR_1 ) ; break ; case CHAR_11 : if ( METHOD_9 ( VAR_5 , n , STRING_5 ) || METHOD_9 ( VAR_5 , n , STRING_6 ) || METHOD_9 ( VAR_5 , n , STRING_7 ) ) { VAR_6 . append ( CHAR_10 ) ; } else { VAR_6 . append ( CHAR_11 ) ; } break ; case CHAR_20 : if ( METHOD_9 ( VAR_5 , n , STRING_8 ) || METHOD_9 ( VAR_5 , n , STRING_9 ) ) { VAR_6 . append ( CHAR_10 ) ; break ; } if ( false ) { break ; } if ( METHOD_9 ( VAR_5 , n , STRING_10 ) ) { VAR_6 . append ( CHAR_24 ) ; } else { VAR_6 . append ( CHAR_20 ) ; } break ; case CHAR_25 : VAR_6 . append ( CHAR_21 ) ; break ; case CHAR_7 : case CHAR_26 : if ( ! METHOD_7 ( VAR_7 , n ) && METHOD_11 ( VAR_5 , n + 1 ) ) { VAR_6 . append ( VAR_8 ) ; } break ; case CHAR_10 : VAR_6 . append ( CHAR_1 ) ; VAR_6 . append ( CHAR_11 ) ; break ; case CHAR_27 : VAR_6 . append ( CHAR_11 ) ; break ; } n ++ ; } if ( VAR_6 . length ( ) > this . METHOD_4 ( ) ) { VAR_6 . METHOD_12 ( this . METHOD_4 ( ) ) ; } } return VAR_6 . toString ( ) ; }