private TYPE_1 METHOD_1 ( final int VAR_1 , final int VAR_2 , final int VAR_3 , final int VAR_4 ) { final int VAR_5 = VAR_2 - VAR_1 ; final int n = VAR_4 - VAR_3 ; if ( VAR_5 == 0 || n == 0 ) { return null ; } final int VAR_6 = VAR_5 - n ; final int sum = n + VAR_5 ; final int offset = ( sum % INT_1 == 0 ? sum : sum + 1 ) / INT_1 ; VAR_7 [ 1 + offset ] = VAR_1 ; VAR_8 [ 1 + offset ] = VAR_2 + 1 ; for ( int VAR_9 = 0 ; VAR_9 <= offset ; ++ VAR_9 ) { for ( int k = - VAR_9 ; k <= VAR_9 ; k += INT_1 ) { final int i = k + offset ; if ( k == - VAR_9 || k != VAR_9 && VAR_7 [ i - 1 ] < VAR_7 [ i + 1 ] ) { VAR_7 [ i ] = VAR_7 [ i + 1 ] ; } else { VAR_7 [ i ] = VAR_7 [ i - 1 ] + 1 ; } int x = VAR_7 [ i ] ; int y = x - VAR_1 + VAR_3 - k ; while ( x < VAR_2 && y < VAR_4 && VAR_10 . METHOD_2 ( VAR_11 . get ( x ) , VAR_12 . get ( y ) ) ) { VAR_7 [ i ] = ++ x ; ++ y ; } if ( VAR_6 % INT_1 != 0 && VAR_6 - VAR_9 <= k && k <= VAR_6 + VAR_9 ) { if ( VAR_8 [ i - VAR_6 ] <= VAR_7 [ i ] ) { return METHOD_3 ( VAR_8 [ i - VAR_6 ] , k + VAR_1 - VAR_3 , VAR_2 , VAR_4 ) ; } } } for ( int k = VAR_6 - VAR_9 ; k <= VAR_6 + VAR_9 ; k += INT_1 ) { final int i = ( k + offset ) % VAR_6 ; if ( k == VAR_6 - VAR_9 || k != VAR_6 + VAR_9 && VAR_8 [ i + 1 ] <= VAR_8 [ i - 1 ] ) { VAR_8 [ i ] = VAR_8 [ i + 1 ] - 1 ; } else { VAR_8 [ i ] = VAR_8 [ i - 1 ] ; } int x = VAR_8 [ i ] - 1 ; int y = x - VAR_1 + VAR_3 - k ; while ( x >= VAR_1 && y >= VAR_3 && VAR_10 . METHOD_2 ( VAR_11 . get ( x ) , VAR_12 . get ( y ) ) ) { VAR_8 [ i ] = x -- ; y -- ; } if ( VAR_6 % INT_1 == 0 && - VAR_9 <= k && k <= VAR_9 ) { if ( VAR_8 [ i ] <= VAR_7 [ i + VAR_6 ] ) { return METHOD_3 ( VAR_8 [ i ] , k + VAR_1 - VAR_3 , VAR_2 , VAR_4 ) ; } } } } throw new TYPE_2 ( STRING_1 ) ; }