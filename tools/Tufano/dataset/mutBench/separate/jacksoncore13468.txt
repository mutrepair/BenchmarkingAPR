protected TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 { int c = 0 ; int VAR_1 = 0 ; char [ ] VAR_2 = VAR_3 . METHOD_2 ( ) ; final int [ ] VAR_4 = VAR_5 ; final byte [ ] VAR_6 = VAR_7 ; VAR_8 : while ( true ) { VAR_9 : while ( true ) { if ( VAR_10 >= VAR_11 ) { METHOD_3 ( ) ; } if ( VAR_1 >= VAR_2 . length ) { VAR_2 = VAR_3 . METHOD_4 ( ) ; VAR_1 = 0 ; } int VAR_12 = VAR_11 ; { int VAR_13 = VAR_10 + ( VAR_2 . length - VAR_1 ) ; if ( VAR_13 < VAR_12 ) { VAR_12 = VAR_13 ; } } while ( VAR_10 < VAR_12 ) { c = ( int ) VAR_6 [ VAR_10 ++ ] & INT_1 ; if ( c == VAR_14 ) { break VAR_9 ; } VAR_2 [ VAR_1 ++ ] = ( char ) c ; } } if ( c == VAR_14 ) { break VAR_8 ; } switch ( VAR_4 [ c ] ) { case 1 : if ( c != VAR_15 ) { c = METHOD_5 ( ) ; } break ; case INT_2 : c = METHOD_6 ( c ) ; break ; case INT_3 : if ( ( VAR_11 - VAR_10 ) >= INT_2 ) { c = METHOD_7 ( c ) ; } else { c = METHOD_8 ( c ) ; } break ; case INT_4 : c = METHOD_9 ( c ) ; VAR_2 [ VAR_1 ++ ] = ( char ) ( INT_5 | ( c > > INT_6 ) ) ; if ( VAR_1 >= VAR_2 . length ) { VAR_2 = VAR_3 . METHOD_4 ( ) ; VAR_1 = 0 ; } c = INT_7 | ( c & INT_8 ) ; break ; default : if ( c < VAR_16 ) { METHOD_10 ( c , STRING_1 ) ; } METHOD_11 ( c ) ; } if ( VAR_1 >= VAR_2 . length ) { VAR_2 = VAR_3 . METHOD_4 ( ) ; VAR_1 = 0 ; } VAR_2 [ VAR_1 ++ ] = ( char ) c ; } VAR_3 . METHOD_12 ( VAR_1 ) ; return VAR_17 ; }