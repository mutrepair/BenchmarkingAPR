protected int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 out , byte [ ] buffer ) throws TYPE_3 , TYPE_4 { int VAR_2 = 0 ; final int VAR_3 = buffer . length - INT_1 ; int VAR_4 = 0 ; while ( true ) { int VAR_5 ; do { if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = ( int ) VAR_8 [ VAR_6 ++ ] & INT_2 ; } while ( VAR_5 <= VAR_9 ) ; int VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 <= 0 ) { if ( VAR_5 == VAR_11 ) { break ; } VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , 0 ) ; if ( VAR_10 < 0 ) { continue ; } } if ( VAR_2 > VAR_3 ) { VAR_4 += VAR_2 ; out.write ( buffer , 0 , VAR_2 ) ; VAR_2 = 0 ; } int VAR_12 = VAR_10 ; if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_2 ; VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , 1 ) ; } VAR_12 = ( VAR_12 < < INT_3 ) | VAR_10 ; if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_2 ; VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { if ( VAR_10 != VAR_13 ) { if ( VAR_5 == CHAR_1 && ! VAR_1 . METHOD_5 ( ) ) { VAR_12 >>= INT_4 ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; break ; } VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , INT_5 ) ; } if ( VAR_10 == VAR_13 ) { if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_2 ; if ( ! VAR_1 . METHOD_6 ( VAR_5 ) ) { throw METHOD_7 ( VAR_1 , VAR_5 , INT_1 , STRING_1 + VAR_1 . METHOD_8 ( ) + STRING_2 ) ; } VAR_12 >>= INT_4 ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; continue ; } } VAR_12 = ( VAR_12 < < INT_3 ) | VAR_10 ; if ( VAR_6 >= VAR_7 ) { METHOD_2 ( ) ; } VAR_5 = VAR_8 [ VAR_6 ++ ] & INT_2 ; VAR_10 = VAR_1 . METHOD_3 ( VAR_5 ) ; if ( VAR_10 < 0 ) { if ( VAR_10 != VAR_13 ) { if ( VAR_5 == CHAR_1 && ! VAR_1 . METHOD_5 ( ) ) { VAR_12 >>= INT_5 ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_6 ) ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; break ; } VAR_10 = METHOD_4 ( VAR_1 , VAR_5 , INT_1 ) ; } if ( VAR_10 == VAR_13 ) { VAR_12 >>= INT_5 ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_6 ) ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; continue ; } } VAR_12 = ( VAR_12 < < INT_3 ) | VAR_10 ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_7 ) ; buffer [ VAR_2 ++ ] = ( byte ) ( VAR_12 > > INT_6 ) ; buffer [ VAR_2 ++ ] = ( byte ) VAR_12 ; } VAR_14 = false ; if ( VAR_2 > 0 ) { VAR_4 += VAR_2 ; out.write ( buffer , 0 , VAR_2 ) ; } return VAR_4 ; }