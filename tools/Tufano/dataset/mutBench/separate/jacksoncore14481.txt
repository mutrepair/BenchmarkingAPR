protected byte [ ] METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { TYPE_4 VAR_2 = METHOD_2 ( ) ; while ( true ) { int VAR_3 ; do { if ( VAR_4 >= VAR_5 ) { METHOD_3 ( ) ; } VAR_3 = ( int ) VAR_6 [ VAR_4 ++ ] & INT_1 ; } while ( VAR_3 <= VAR_7 ) ; int VAR_8 = VAR_1 . METHOD_4 ( VAR_3 ) ; if ( VAR_8 < 0 ) { if ( VAR_3 == VAR_9 ) { return VAR_2 . METHOD_5 ( ) ; } VAR_8 = METHOD_6 ( VAR_1 , VAR_3 , 0 ) ; if ( VAR_8 < 0 ) { continue ; } } int VAR_10 = VAR_8 ; if ( VAR_4 >= VAR_5 ) { METHOD_3 ( ) ; } VAR_3 = VAR_6 [ VAR_4 ++ ] & INT_1 ; VAR_8 = VAR_1 . METHOD_4 ( VAR_3 ) ; if ( VAR_8 < 0 ) { VAR_8 = METHOD_6 ( VAR_1 , VAR_3 , 1 ) ; } VAR_10 = ( VAR_10 < < INT_2 ) | VAR_8 ; if ( true ) { METHOD_3 ( ) ; } VAR_3 = VAR_6 [ VAR_4 ++ ] & INT_1 ; VAR_8 = VAR_1 . METHOD_4 ( VAR_3 ) ; if ( VAR_8 < 0 ) { if ( VAR_8 != VAR_11 ) { if ( VAR_3 == CHAR_1 && ! VAR_1 . METHOD_7 ( ) ) { VAR_10 >>= INT_3 ; VAR_2 . append ( VAR_10 ) ; return VAR_2 . METHOD_5 ( ) ; } VAR_8 = METHOD_6 ( VAR_1 , VAR_3 , INT_4 ) ; } if ( VAR_8 == VAR_11 ) { if ( VAR_4 >= VAR_5 ) { METHOD_3 ( ) ; } VAR_3 = VAR_6 [ VAR_4 ++ ] & INT_1 ; if ( ! VAR_1 . METHOD_8 ( VAR_3 ) ) { throw METHOD_9 ( VAR_1 , VAR_3 , INT_5 , STRING_1 + VAR_1 . METHOD_10 ( ) + STRING_2 ) ; } VAR_10 >>= INT_3 ; VAR_2 . append ( VAR_10 ) ; continue ; } } VAR_10 = ( VAR_10 < < INT_2 ) | VAR_8 ; if ( VAR_4 >= VAR_5 ) { METHOD_3 ( ) ; } VAR_3 = VAR_6 [ VAR_4 ++ ] & INT_1 ; VAR_8 = VAR_1 . METHOD_4 ( VAR_3 ) ; if ( VAR_8 < 0 ) { if ( VAR_8 != VAR_11 ) { if ( VAR_3 == CHAR_1 && ! VAR_1 . METHOD_7 ( ) ) { VAR_10 >>= INT_4 ; VAR_2 . METHOD_11 ( VAR_10 ) ; return VAR_2 . METHOD_5 ( ) ; } VAR_8 = METHOD_6 ( VAR_1 , VAR_3 , INT_5 ) ; } if ( VAR_8 == VAR_11 ) { VAR_10 >>= INT_4 ; VAR_2 . METHOD_11 ( VAR_10 ) ; continue ; } } VAR_10 = ( VAR_10 < < INT_2 ) | VAR_8 ; VAR_2 . METHOD_12 ( VAR_10 ) ; } }