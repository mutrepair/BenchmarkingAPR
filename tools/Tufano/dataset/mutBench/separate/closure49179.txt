private TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( pattern . METHOD_3 ( VAR_1 ) == CHAR_1 ) ; ++ VAR_1 ; char VAR_2 = pattern . METHOD_3 ( VAR_1 ) ; if ( VAR_2 == CHAR_2 || VAR_2 == CHAR_3 ) { ++ VAR_1 ; return new TYPE_3 ( VAR_2 ) ; } else if ( CHAR_4 <= VAR_2 && VAR_2 <= CHAR_5 ) { ++ VAR_1 ; int VAR_3 = VAR_2 - CHAR_6 ; if ( VAR_4 > VAR_3 ) { if ( VAR_1 < VAR_5 ) { char VAR_6 = pattern . METHOD_3 ( VAR_1 ) ; if ( CHAR_6 <= VAR_6 && VAR_6 <= CHAR_5 ) { int VAR_7 = VAR_3 * INT_1 + ( VAR_6 - CHAR_6 ) ; if ( VAR_4 >= VAR_7 ) { ++ VAR_1 ; VAR_3 = VAR_7 ; } } } return new TYPE_4 ( VAR_3 ) ; } else { return new TYPE_5 ( TYPE_6 . toString ( VAR_3 <= INT_2 ? ( char ) VAR_3 : VAR_2 ) ) ; } } else { TYPE_7 VAR_8 = TYPE_8 . get ( VAR_2 ) ; if ( VAR_8 != null ) { ++ VAR_1 ; return new TYPE_9 ( VAR_8 , VAR_9 ) ; } return new TYPE_5 ( STRING_1 + METHOD_4 ( ) ) ; } }