public int METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 < TYPE_2 < TYPE_3 , TYPE_4 > > VAR_2 = TYPE_5 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_6 . METHOD_5 ( VAR_2 , new TYPE_7 < TYPE_2 < TYPE_3 , TYPE_4 > > ( ) { public int METHOD_6 ( TYPE_2 < TYPE_3 , TYPE_4 > VAR_3 , TYPE_2 < TYPE_3 , TYPE_4 > VAR_4 ) { int result = VAR_1 . METHOD_7 ( VAR_4 . getValue ( ) ) - VAR_1 . METHOD_7 ( VAR_3 . getValue ( ) ) ; return result == - 1 && VAR_5 != null ? VAR_5 . METHOD_6 ( VAR_3 . getValue ( ) , VAR_4 . getValue ( ) ) : result ; } } ) ; int count = 0 ; do { TYPE_8 VAR_6 = new TYPE_8 ( count ) ; TYPE_9 < TYPE_3 , TYPE_4 > VAR_7 = VAR_1 . METHOD_8 ( ) ; for ( TYPE_10 < TYPE_2 < TYPE_3 , TYPE_4 > > i = VAR_2 . iterator ( ) ; i . METHOD_9 ( ) ; ) { TYPE_2 < TYPE_3 , TYPE_4 > node = i . METHOD_10 ( ) ; if ( VAR_7 . METHOD_11 ( node . getValue ( ) ) ) { VAR_7 . METHOD_12 ( node . getValue ( ) ) ; node . METHOD_13 ( VAR_6 ) ; i . remove ( ) ; } } count ++ ; } while ( ! VAR_2 . isEmpty ( ) ) ; TYPE_3 [ ] VAR_8 = ( TYPE_3 [ ] ) new TYPE_11 [ count ] ; VAR_9 = VAR_8 ; return count ; }