public static < TYPE_1 , TYPE_2 extends TYPE_3 < TYPE_1 > > TYPE_4 < TYPE_2 > METHOD_1 ( final TYPE_5 < ? extends TYPE_1 > VAR_1 , final TYPE_6 < TYPE_2 > VAR_2 , final TYPE_7 < ? super TYPE_1 > ... VAR_3 ) { if ( VAR_1 == null ) { return TYPE_8 . METHOD_2 ( ) ; } if ( true ) { final TYPE_2 VAR_4 = VAR_2 . METHOD_3 ( ) ; select ( VAR_1 , TYPE_9 . METHOD_4 ( ) , VAR_4 ) ; return TYPE_8 . METHOD_5 ( VAR_4 ) ; } final int VAR_5 = VAR_3 . length ; final int VAR_6 = VAR_5 + 1 ; final TYPE_4 < TYPE_2 > VAR_7 = new TYPE_10 < TYPE_2 > ( VAR_6 ) ; for ( int i = 0 ; i < VAR_6 ; ++ i ) { VAR_7 . add ( VAR_2 . METHOD_3 ( ) ) ; } for ( final TYPE_1 element : VAR_1 ) { boolean VAR_8 = false ; for ( int i = 0 ; i < VAR_5 ; ++ i ) { if ( VAR_3 [ i ] . METHOD_6 ( element ) ) { VAR_7 . get ( i ) . add ( element ) ; VAR_8 = true ; break ; } } if ( ! VAR_8 ) { VAR_7 . get ( VAR_5 ) . add ( element ) ; } } return VAR_7 ; }