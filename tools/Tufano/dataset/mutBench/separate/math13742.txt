public static TYPE_1 METHOD_1 ( final int VAR_1 , final int VAR_2 , final int VAR_3 ) { final TYPE_2 key = new TYPE_2 ( VAR_2 , VAR_3 ) ; if ( ! TYPE_3 . METHOD_2 ( key ) ) { final TYPE_4 < TYPE_5 > list = new TYPE_6 < TYPE_5 > ( ) ; TYPE_3 . put ( key , list ) ; list . add ( VAR_4 ) ; list . add ( new TYPE_5 ( VAR_2 - VAR_3 , INT_1 ) ) ; list . add ( new TYPE_5 ( INT_1 + VAR_2 + VAR_3 , INT_1 ) ) ; } return METHOD_3 ( VAR_1 , TYPE_3 . get ( key ) , new TYPE_7 ( ) { public TYPE_5 [ ] METHOD_4 ( int k ) { k ++ ; final int VAR_5 = k + VAR_2 + VAR_3 ; final int VAR_6 = VAR_5 + k ; final int VAR_7 = VAR_6 - 1 ; final int VAR_8 = VAR_6 - INT_1 ; final int VAR_9 = INT_1 * k * VAR_5 * VAR_8 ; return new TYPE_5 [ ] { new TYPE_5 ( VAR_7 * ( VAR_2 * VAR_2 - VAR_3 * VAR_3 ) , VAR_9 ) , new TYPE_5 ( VAR_7 * VAR_6 * VAR_8 , VAR_9 ) , new TYPE_5 ( INT_1 * ( k - VAR_2 - 1 ) * ( k + VAR_3 - 1 ) * VAR_6 , VAR_9 ) } ; } } ) ; }