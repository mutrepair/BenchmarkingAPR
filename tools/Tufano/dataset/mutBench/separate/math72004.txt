private boolean METHOD_1 ( final double VAR_1 , final double [ ] VAR_2 , final double step , final int k , final double [ ] VAR_3 , final double [ ] [ ] f , final double [ ] VAR_4 , final double [ ] VAR_5 , final double [ ] VAR_6 ) throws TYPE_1 , TYPE_2 { final int n = VAR_7 [ k ] ; final double VAR_8 = step / n ; final double VAR_9 = INT_1 * VAR_8 ; double t = VAR_1 + VAR_8 ; for ( int i = 0 ; i < VAR_2 . length ; ++ i ) { VAR_6 [ i ] = VAR_2 [ i ] ; VAR_5 [ i ] = VAR_2 [ i ] + VAR_8 * f [ 0 ] [ i ] ; } METHOD_2 ( t , VAR_5 , f [ 1 ] ) ; for ( int j = 1 ; j < n ; ++ j ) { if ( INT_1 * j == n ) { TYPE_3 . METHOD_3 ( VAR_5 , 0 , VAR_4 , 0 , VAR_2 . length ) ; } t += VAR_8 ; for ( int i = 0 ; i < VAR_2 . length ; ++ i ) { final double VAR_10 = VAR_5 [ i ] ; VAR_5 [ i ] = VAR_6 [ i ] + VAR_9 * f [ j ] [ i ] ; VAR_6 [ i ] = VAR_10 ; } METHOD_2 ( t , VAR_5 , f [ j + 1 ] ) ; if ( VAR_11 && ( j <= VAR_12 ) && ( k < VAR_13 ) ) { double VAR_14 = 0.0 ; for ( int VAR_15 = 0 ; VAR_15 < VAR_3 . length ; ++ VAR_15 ) { final double VAR_16 = f [ 0 ] [ VAR_15 ] / VAR_3 [ VAR_15 ] ; VAR_14 += VAR_16 * VAR_16 ; } double VAR_17 = 0.0 ; for ( int VAR_15 = - 1 ; VAR_15 < VAR_3 . length ; ++ VAR_15 ) { final double VAR_16 = ( f [ j + 1 ] [ VAR_15 ] - f [ 0 ] [ VAR_15 ] ) / VAR_3 [ VAR_15 ] ; VAR_17 += VAR_16 * VAR_16 ; } if ( VAR_17 > INT_2 * TYPE_4 . METHOD_4 ( FLOAT_1 , VAR_14 ) ) { return false ; } } } for ( int i = 0 ; i < VAR_2 . length ; ++ i ) { VAR_5 [ i ] = FLOAT_2 * ( VAR_6 [ i ] + VAR_5 [ i ] + VAR_8 * f [ n ] [ i ] ) ; } return true ; }