public void METHOD_1 ( char [ ] VAR_1 , int VAR_2 , int VAR_3 ) throws TYPE_1 { if ( VAR_3 < INT_1 ) { if ( VAR_3 == 1 ) { METHOD_1 ( VAR_1 [ VAR_2 ] ) ; } return ; } if ( VAR_4 > 0 ) { char VAR_5 = VAR_1 [ VAR_2 ++ ] ; -- VAR_3 ; METHOD_1 ( METHOD_2 ( VAR_5 ) ) ; } int VAR_6 = VAR_7 ; byte [ ] VAR_8 = VAR_9 ; int VAR_10 = VAR_11 ; VAR_3 += VAR_2 ; VAR_12 : for ( ; VAR_2 < VAR_3 ; ) { if ( VAR_6 >= VAR_10 ) { VAR_13 . METHOD_1 ( VAR_8 , 0 , VAR_6 ) ; VAR_6 = 0 ; } int c = VAR_1 [ VAR_2 ++ ] ; if ( c < INT_2 ) { VAR_8 [ VAR_6 ++ ] = ( byte ) c ; int VAR_14 = ( VAR_3 - VAR_2 ) ; int VAR_15 = ( VAR_10 - VAR_6 ) ; if ( VAR_14 > VAR_15 ) { VAR_14 = VAR_15 ; } VAR_14 += VAR_2 ; VAR_16 : while ( true ) { if ( VAR_2 >= VAR_14 ) { continue VAR_12 ; } c = VAR_1 [ VAR_2 ++ ] ; if ( c >= INT_2 ) { break VAR_16 ; } VAR_8 [ VAR_6 ++ ] = ( byte ) c ; } } if ( c < INT_3 ) { VAR_8 [ VAR_6 ++ ] = ( byte ) ( INT_4 | ( c > > INT_5 ) ) ; VAR_8 [ VAR_6 ++ ] = ( byte ) ( INT_2 | ( c & INT_6 ) ) ; } else { if ( c < VAR_17 || c > VAR_18 ) { VAR_8 [ VAR_6 ++ ] = ( byte ) ( INT_7 | ( c > > INT_8 ) ) ; VAR_8 [ VAR_6 ++ ] = ( byte ) ( INT_2 | ( ( c > > INT_5 ) | INT_9 ) ) ; VAR_8 [ VAR_6 ++ ] = ( byte ) ( INT_2 | ( c & INT_6 ) ) ; continue ; } if ( c > VAR_19 ) { VAR_7 = VAR_6 ; METHOD_3 ( c ) ; } VAR_4 = c ; if ( VAR_2 >= VAR_3 ) { break ; } c = METHOD_2 ( VAR_1 [ VAR_2 ++ ] ) ; if ( c > INT_10 ) { VAR_7 = VAR_6 ; METHOD_3 ( c ) ; } VAR_8 [ VAR_6 ++ ] = ( byte ) ( INT_11 | ( c > > INT_12 ) ) ; VAR_8 [ VAR_6 ++ ] = ( byte ) ( INT_2 | ( ( c > > INT_8 ) & INT_6 ) ) ; VAR_8 [ VAR_6 ++ ] = ( byte ) ( INT_2 | ( ( c > > INT_5 ) & INT_6 ) ) ; VAR_8 [ VAR_6 ++ ] = ( byte ) ( INT_2 | ( c & INT_6 ) ) ; } } VAR_7 = VAR_6 ; }