private final int METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { if ( ( ( VAR_2 &= VAR_1 ) | ( VAR_4 &= VAR_3 ) ) == 0L ) return METHOD_2 ( 1 , VAR_1 , VAR_3 ) ; try { VAR_5 = VAR_6 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_7 ) { METHOD_4 ( INT_1 , VAR_2 , VAR_4 ) ; return INT_2 ; } switch ( VAR_5 ) { case INT_3 : return METHOD_5 ( VAR_2 , INT_4 , VAR_4 , 0L ) ; case INT_5 : return METHOD_5 ( VAR_2 , 0L , VAR_4 , INT_6 ) ; case INT_7 : return METHOD_5 ( VAR_2 , INT_8 , VAR_4 , 0L ) ; case INT_9 : if ( ( VAR_2 & INT_10 ) != 0L ) return METHOD_6 ( INT_2 , INT_11 , INT_12 ) ; else if ( ( VAR_2 & INT_13 ) != 0L ) { VAR_8 = INT_14 ; VAR_9 = INT_2 ; } else if ( ( VAR_4 & INT_15 ) != 0L ) return METHOD_6 ( INT_2 , INT_16 , INT_12 ) ; return METHOD_5 ( VAR_2 , INT_17 , VAR_4 , 0L ) ; case INT_18 : return METHOD_5 ( VAR_2 , INT_19 , VAR_4 , 0L ) ; case INT_20 : if ( ( VAR_4 & INT_21 ) != 0L ) return METHOD_6 ( INT_2 , INT_22 , INT_12 ) ; break ; case INT_23 : return METHOD_5 ( VAR_2 , INT_24 , VAR_4 , 0L ) ; case INT_25 : if ( ( VAR_4 & INT_26 ) != 0L ) return METHOD_6 ( INT_2 , INT_27 , INT_12 ) ; return METHOD_5 ( VAR_2 , INT_28 , VAR_4 , INT_29 ) ; case INT_30 : return METHOD_5 ( VAR_2 , INT_31 , VAR_4 , INT_32 ) ; case INT_33 : return METHOD_5 ( VAR_2 , INT_34 , VAR_4 , INT_35 ) ; case INT_36 : return METHOD_5 ( VAR_2 , 0L , VAR_4 , INT_37 ) ; case INT_38 : return METHOD_5 ( VAR_2 , INT_39 , VAR_4 , 0L ) ; case INT_40 : return METHOD_5 ( VAR_2 , INT_41 , VAR_4 , INT_42 ) ; case INT_43 : if ( ( VAR_2 & INT_44 ) < 0L ) return METHOD_6 ( INT_2 , INT_45 , INT_12 ) ; else if ( ( VAR_2 & INT_46 ) != 0L ) return METHOD_6 ( INT_2 , INT_47 , INT_12 ) ; return METHOD_5 ( VAR_2 , INT_48 , VAR_4 , 0L ) ; default : break ; } return METHOD_2 ( INT_1 , VAR_2 , VAR_4 ) ; }