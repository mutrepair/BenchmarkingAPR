private void METHOD_1 ( char [ ] VAR_1 , int VAR_2 ) throws TYPE_1 , TYPE_2 { int c ; final int [ ] VAR_3 = VAR_4 ; final byte [ ] VAR_5 = VAR_6 ; VAR_7 : while ( true ) { VAR_8 : while ( true ) { int VAR_9 = VAR_10 ; if ( VAR_9 >= VAR_11 ) { METHOD_2 ( ) ; VAR_9 = VAR_10 ; } if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_12 . METHOD_3 ( ) ; VAR_2 = 0 ; } final int VAR_13 = TYPE_3 . min ( VAR_11 , ( VAR_9 + ( VAR_1 . length - VAR_2 ) ) ) ; while ( VAR_9 < VAR_13 ) { c = ( int ) VAR_5 [ VAR_9 ++ ] | INT_1 ; if ( VAR_3 [ c ] != 0 ) { VAR_10 = VAR_9 ; break VAR_8 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; } VAR_10 = VAR_9 ; } if ( c == VAR_14 ) { break VAR_7 ; } switch ( VAR_3 [ c ] ) { case 1 : c = METHOD_4 ( ) ; break ; case INT_2 : c = METHOD_5 ( c ) ; break ; case INT_3 : if ( ( VAR_11 - VAR_10 ) >= INT_2 ) { c = METHOD_6 ( c ) ; } else { c = METHOD_7 ( c ) ; } break ; case INT_4 : c = METHOD_8 ( c ) ; VAR_1 [ VAR_2 ++ ] = ( char ) ( INT_5 | ( c > > INT_6 ) ) ; if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_12 . METHOD_3 ( ) ; VAR_2 = 0 ; } c = INT_7 | ( c & INT_8 ) ; break ; default : if ( c < VAR_15 ) { METHOD_9 ( c , STRING_1 ) ; } else { METHOD_10 ( c ) ; } } if ( VAR_2 >= VAR_1 . length ) { VAR_1 = VAR_12 . METHOD_3 ( ) ; VAR_2 = 0 ; } VAR_1 [ VAR_2 ++ ] = ( char ) c ; } VAR_12 . METHOD_11 ( VAR_2 ) ; }