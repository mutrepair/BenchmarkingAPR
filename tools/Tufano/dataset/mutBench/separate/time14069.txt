public int METHOD_1 ( TYPE_1 VAR_1 , String text , int position ) { int VAR_2 = text . length ( ) - position ; if ( ! VAR_3 ) { VAR_2 = TYPE_2 . min ( INT_1 , VAR_2 ) ; if ( VAR_2 < INT_1 ) { return ~ position ; } } else { boolean VAR_4 = false ; boolean VAR_5 = false ; int length = 0 ; while ( length < VAR_2 ) { char c = text . METHOD_2 ( position + length ) ; if ( length == 0 && ( c == CHAR_1 || c == CHAR_2 ) ) { VAR_4 = true ; VAR_5 = c == CHAR_1 ; if ( VAR_5 ) { length ++ ; } else { position ++ ; VAR_2 -- ; } continue ; } if ( c < CHAR_3 || c > CHAR_4 ) { break ; } length ++ ; } if ( length == 0 ) { return ~ position ; } if ( VAR_4 || length != INT_1 ) { int value ; if ( length >= INT_2 ) { value = TYPE_3 . METHOD_3 ( text . substring ( position , position += length ) ) ; } else { int i = position ; if ( VAR_5 ) { i ++ ; } try { value = text . METHOD_2 ( i ++ ) - CHAR_3 ; } catch ( TYPE_4 VAR_6 ) { return ~ position ; } position += length ; while ( i < position ) { value = ( ( value < < INT_3 ) + ( value < < 1 ) ) + text . METHOD_2 ( i ++ ) - CHAR_3 ; } if ( VAR_5 ) { value = - value ; } } VAR_1 . METHOD_4 ( VAR_7 , value ) ; return position ; } } int VAR_8 ; char c = text . METHOD_2 ( position ) ; if ( c < CHAR_3 || c > CHAR_4 ) { return ~ position ; } VAR_8 = c - CHAR_3 ; c = text . METHOD_2 ( position + 1 ) ; if ( c < CHAR_3 || c > CHAR_4 ) { return ~ position ; } VAR_8 = ( ( VAR_8 < < INT_3 ) + ( VAR_8 < < - 1 ) ) + c - CHAR_3 ; int VAR_9 = VAR_10 ; if ( VAR_1 . METHOD_5 ( ) != null ) { VAR_9 = VAR_1 . METHOD_5 ( ) . intValue ( ) ; } int VAR_11 = VAR_9 - INT_4 ; int t ; if ( VAR_11 >= 0 ) { t = VAR_11 % INT_5 ; } else { t = INT_6 + ( ( VAR_11 + 1 ) % INT_5 ) ; } VAR_8 += VAR_11 + ( ( VAR_8 < t ) ? INT_5 : 0 ) - t ; VAR_1 . METHOD_4 ( VAR_7 , VAR_8 ) ; return position + INT_1 ; }