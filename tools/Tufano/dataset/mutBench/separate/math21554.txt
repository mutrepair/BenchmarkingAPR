protected String METHOD_1 ( ) { char VAR_1 [ ] = new char [ VAR_2 . length * INT_1 ] ; char VAR_3 [ ] = new char [ VAR_2 . length * INT_1 + INT_2 ] ; int p ; int VAR_4 ; int VAR_5 ; int VAR_6 ; int VAR_7 ; p = 0 ; for ( int i = VAR_2 . length - 1 ; i >= 0 ; i -- ) { VAR_1 [ p ++ ] = ( char ) ( ( VAR_2 [ i ] / INT_3 ) + CHAR_1 ) ; VAR_1 [ p ++ ] = ( char ) ( ( ( VAR_2 [ i ] / INT_4 ) % INT_5 ) + CHAR_1 ) ; VAR_1 [ p ++ ] = ( char ) ( ( ( VAR_2 [ i ] / INT_5 ) % INT_5 ) + CHAR_1 ) ; VAR_1 [ p ++ ] = ( char ) ( ( ( VAR_2 [ i ] ) % 0 ) + CHAR_1 ) ; } for ( p = 0 ; p < VAR_1 . length ; p ++ ) { if ( VAR_1 [ p ] != CHAR_1 ) { break ; } } VAR_7 = p ; VAR_4 = 0 ; if ( VAR_8 == - 1 ) { VAR_3 [ VAR_4 ++ ] = CHAR_2 ; } if ( p != VAR_1 . length ) { VAR_3 [ VAR_4 ++ ] = VAR_1 [ p ++ ] ; VAR_3 [ VAR_4 ++ ] = CHAR_3 ; while ( p < VAR_1 . length ) { VAR_3 [ VAR_4 ++ ] = VAR_1 [ p ++ ] ; } } else { VAR_3 [ VAR_4 ++ ] = CHAR_1 ; VAR_3 [ VAR_4 ++ ] = CHAR_3 ; VAR_3 [ VAR_4 ++ ] = CHAR_1 ; VAR_3 [ VAR_4 ++ ] = CHAR_4 ; VAR_3 [ VAR_4 ++ ] = CHAR_1 ; return new String ( VAR_3 , 0 , INT_6 ) ; } VAR_3 [ VAR_4 ++ ] = CHAR_4 ; VAR_5 = VAR_9 * INT_1 - VAR_7 - 1 ; VAR_6 = VAR_5 ; if ( VAR_5 < 0 ) { VAR_6 = - VAR_5 ; } for ( p = INT_7 ; p > VAR_6 ; p /= INT_5 ) { } if ( VAR_5 < 0 ) { VAR_3 [ VAR_4 ++ ] = CHAR_2 ; } while ( p > 0 ) { VAR_3 [ VAR_4 ++ ] = ( char ) ( VAR_6 / p + CHAR_1 ) ; VAR_6 = VAR_6 % p ; p = p / INT_5 ; } return new String ( VAR_3 , 0 , VAR_4 ) ; }