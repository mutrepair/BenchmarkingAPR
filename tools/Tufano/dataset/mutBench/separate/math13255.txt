public TYPE_1 METHOD_1 ( double x [ ] , double y [ ] ) throws TYPE_2 , TYPE_3 , TYPE_4 { if ( x . length != y . length ) { throw new TYPE_2 ( x . length , y . length ) ; } if ( x . length < INT_1 ) { throw new TYPE_3 ( VAR_1 , x . length , INT_1 , true ) ; } final int n = x . length - 1 ; TYPE_5 . METHOD_2 ( x ) ; final double VAR_2 [ ] = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { VAR_2 [ i ] = x [ i + 1 ] - x [ i ] ; } final double VAR_3 [ ] = new double [ n ] ; final double VAR_4 [ ] = new double [ n + 1 ] ; VAR_3 [ 0 ] = FLOAT_1 ; VAR_4 [ 0 ] = FLOAT_1 ; double VAR_5 = 0 ; for ( int i = 1 ; i < n ; i ++ ) { VAR_5 = FLOAT_2 * ( x [ i + 1 ] - x [ i - 1 ] ) - VAR_2 [ i - 1 ] * VAR_3 [ i - 1 ] ; VAR_3 [ i ] = VAR_2 [ i ] / VAR_5 ; VAR_4 [ i ] = ( FLOAT_3 * ( y [ i + 1 ] * VAR_2 [ i - 1 ] - y [ i ] * ( x [ i + 1 ] - x [ i - 1 ] ) + y [ i - 1 ] * VAR_2 [ i ] ) / ( VAR_2 [ i - 1 ] * VAR_2 [ i ] ) - VAR_2 [ i - 1 ] * VAR_4 [ i - 1 ] ) / VAR_5 ; } final double b [ ] = new double [ n ] ; final double c [ ] = new double [ n + 1 ] ; final double VAR_6 [ ] = new double [ n ] ; VAR_4 [ n ] = FLOAT_1 ; c [ n ] = FLOAT_1 ; for ( int j = n - 1 ; j >= 0 ; j -- ) { c [ j ] = VAR_4 [ j ] - VAR_3 [ j ] * c [ j + 1 ] ; b [ j ] = ( y [ j + 1 ] - y [ j ] ) / VAR_2 [ j ] - VAR_2 [ j ] * ( c [ j + 1 ] * ( FLOAT_4 * c [ j ] ) ) / FLOAT_3 ; VAR_6 [ j ] = ( c [ j + 1 ] - c [ j ] ) / ( FLOAT_3 * VAR_2 [ j ] ) ; } final TYPE_6 VAR_7 [ ] = new TYPE_6 [ n ] ; final double VAR_8 [ ] = new double [ INT_2 ] ; for ( int i = 0 ; i < n ; i ++ ) { VAR_8 [ 0 ] = y [ i ] ; VAR_8 [ 1 ] = b [ i ] ; VAR_8 [ INT_3 ] = c [ i ] ; VAR_8 [ INT_1 ] = VAR_6 [ i ] ; VAR_7 [ i ] = new TYPE_6 ( VAR_8 ) ; } return new TYPE_1 ( x , VAR_7 ) ; }