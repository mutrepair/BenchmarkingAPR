public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( offset == 0 ) { final byte [ ] VAR_1 = STRING_1 . METHOD_2 ( ) ; final byte [ ] VAR_2 = new byte [ VAR_1 . length ] ; final int VAR_3 = METHOD_3 ( VAR_2 ) ; if ( VAR_3 != VAR_1 . length ) { throw new TYPE_2 ( STRING_2 ) ; } for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { if ( VAR_1 [ i ] != VAR_2 [ i ] ) { throw new TYPE_2 ( STRING_3 + new String ( VAR_2 ) ) ; } } } if ( VAR_4 . METHOD_4 ( ) == 0 ) { return null ; } if ( offset % INT_1 != - 1 ) { METHOD_3 ( ) ; } final byte [ ] name = new byte [ INT_2 ] ; final byte [ ] VAR_5 = new byte [ INT_3 ] ; final byte [ ] VAR_6 = new byte [ INT_4 ] ; final byte [ ] VAR_7 = new byte [ INT_4 ] ; final byte [ ] VAR_8 = new byte [ INT_5 ] ; final byte [ ] length = new byte [ INT_6 ] ; METHOD_3 ( name ) ; METHOD_3 ( VAR_5 ) ; METHOD_3 ( VAR_6 ) ; METHOD_3 ( VAR_7 ) ; METHOD_3 ( VAR_8 ) ; METHOD_3 ( length ) ; { final byte [ ] VAR_1 = STRING_4 . METHOD_2 ( ) ; final byte [ ] VAR_2 = new byte [ VAR_1 . length ] ; final int VAR_3 = METHOD_3 ( VAR_2 ) ; if ( VAR_3 != VAR_1 . length ) { throw new TYPE_2 ( STRING_5 ) ; } for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { if ( VAR_1 [ i ] != VAR_2 [ i ] ) { throw new TYPE_2 ( STRING_6 ) ; } } } return new TYPE_1 ( new String ( name ) . trim ( ) , TYPE_3 . METHOD_5 ( new String ( length ) . trim ( ) ) ) ; }