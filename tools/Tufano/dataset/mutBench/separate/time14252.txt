public int METHOD_1 ( TYPE_1 VAR_1 , String text , int position ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 < String > VAR_3 = null ; int VAR_4 = 0 ; synchronized ( VAR_5 ) { TYPE_4 < TYPE_5 , TYPE_6 [ ] > VAR_6 = VAR_5 . get ( VAR_2 ) ; if ( VAR_6 == null ) { VAR_6 = new TYPE_7 < TYPE_5 , TYPE_6 [ ] > ( ) ; VAR_5 . put ( VAR_2 , VAR_6 ) ; } TYPE_6 [ ] array = VAR_6 . get ( VAR_7 ) ; if ( array == null ) { VAR_3 = new TYPE_8 < String > ( INT_1 ) ; TYPE_9 VAR_8 = new TYPE_9 ( 0L , VAR_9 ) ; TYPE_10 VAR_10 = VAR_8 . METHOD_3 ( VAR_7 ) ; int min = VAR_10 . METHOD_4 ( ) ; int VAR_11 = VAR_10 . METHOD_5 ( ) ; if ( VAR_11 % min > INT_1 ) { return ~ position ; } VAR_4 = VAR_10 . METHOD_6 ( VAR_2 ) ; for ( int i = min ; i <= VAR_11 ; i ++ ) { VAR_10 . set ( i ) ; VAR_3 . add ( VAR_10 . METHOD_7 ( VAR_2 ) ) ; VAR_3 . add ( VAR_10 . METHOD_7 ( VAR_2 ) . toLowerCase ( VAR_2 ) ) ; VAR_3 . add ( VAR_10 . METHOD_7 ( VAR_2 ) . toUpperCase ( VAR_2 ) ) ; VAR_3 . add ( VAR_10 . METHOD_8 ( VAR_2 ) ) ; VAR_3 . add ( VAR_10 . METHOD_8 ( VAR_2 ) . toLowerCase ( VAR_2 ) ) ; VAR_3 . add ( VAR_10 . METHOD_8 ( VAR_2 ) . toUpperCase ( VAR_2 ) ) ; } if ( STRING_1 . equals ( VAR_2 . METHOD_9 ( ) ) && VAR_7 == TYPE_5 . METHOD_10 ( ) ) { VAR_3 . add ( STRING_2 ) ; VAR_3 . add ( STRING_3 ) ; VAR_3 . add ( STRING_4 ) ; VAR_3 . add ( STRING_5 ) ; VAR_4 = INT_2 ; } array = new TYPE_6 [ ] { VAR_3 , TYPE_11 . METHOD_11 ( VAR_4 ) } ; VAR_6 . put ( VAR_7 , array ) ; } else { VAR_3 = ( TYPE_3 < String > ) array [ 0 ] ; VAR_4 = ( ( TYPE_11 ) array [ 1 ] ) . intValue ( ) ; } } int VAR_12 = TYPE_12 . min ( text . length ( ) , position + VAR_4 ) ; for ( int i = VAR_12 ; i > position ; i -- ) { String VAR_13 = text . substring ( position , i ) ; if ( VAR_3 . contains ( VAR_13 ) ) { VAR_1 . METHOD_12 ( VAR_7 , VAR_13 , VAR_2 ) ; return i ; } } return ~ position ; }