static boolean METHOD_1 ( String id , TYPE_1 VAR_1 ) { if ( ! id . equals ( VAR_1 . METHOD_2 ( ) ) ) { return true ; } long VAR_2 = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . set ( 0 , INT_1 ) ; long end = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . set ( 0 , INT_2 ) ; int offset = VAR_1 . METHOD_5 ( VAR_2 ) ; String key = VAR_1 . METHOD_6 ( VAR_2 ) ; TYPE_3 < TYPE_4 > VAR_3 = new TYPE_5 < TYPE_4 > ( ) ; while ( true ) { long VAR_4 = VAR_1 . METHOD_7 ( VAR_2 ) ; if ( VAR_4 == VAR_2 || VAR_4 > end ) { break ; } VAR_2 = VAR_4 ; int VAR_5 = VAR_1 . METHOD_5 ( VAR_2 ) ; String VAR_6 = VAR_1 . METHOD_6 ( VAR_2 ) ; if ( offset == VAR_5 && key . equals ( VAR_6 ) ) { VAR_7 . METHOD_8 ( STRING_1 + VAR_1 . METHOD_2 ( ) + STRING_2 + new TYPE_6 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) ) ; return false ; } if ( VAR_6 == null || ( VAR_6 . length ( ) <= INT_3 && ! STRING_3 . equals ( VAR_6 ) ) ) { VAR_7 . METHOD_8 ( STRING_4 + VAR_1 . METHOD_2 ( ) + STRING_2 + new TYPE_6 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) + STRING_5 + VAR_6 ) ; return false ; } VAR_3 . add ( TYPE_4 . METHOD_9 ( VAR_2 ) ) ; offset = VAR_5 ; key = VAR_6 ; } VAR_2 = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . set ( 0 , INT_2 ) ; end = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . set ( 0 , INT_1 ) ; for ( int i = VAR_3 . size ( ) ; -- i >= 0 ; ) { long VAR_8 = VAR_1 . METHOD_10 ( VAR_2 ) ; if ( VAR_8 == VAR_2 || VAR_8 < end ) { break ; } VAR_2 = VAR_8 ; long VAR_9 = VAR_3 . get ( i ) . METHOD_11 ( ) ; if ( VAR_9 - 1 != VAR_2 ) { VAR_7 . METHOD_8 ( STRING_6 + VAR_1 . METHOD_2 ( ) + STRING_2 + new TYPE_6 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) + STRING_7 + new TYPE_6 ( VAR_9 - 1 , TYPE_2 . METHOD_3 ( ) ) ) ; return false ; } } return true ; }