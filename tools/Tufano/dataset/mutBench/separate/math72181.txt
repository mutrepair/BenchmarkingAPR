public void METHOD_1 ( final TYPE_1 VAR_1 , final double t ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 { METHOD_2 ( VAR_1 , t ) ; METHOD_3 ( VAR_1 ) ; final boolean VAR_2 = t > VAR_1 . getTime ( ) ; final double [ ] VAR_3 = VAR_1 . METHOD_4 ( ) ; final double [ ] y = VAR_3 . METHOD_5 ( ) ; final double [ ] VAR_4 = new double [ y . length ] ; final double [ ] VAR_5 = new double [ y . length ] ; final double [ ] VAR_6 = new double [ y . length ] ; final double [ ] VAR_7 = new double [ y . length ] ; final double [ ] [ ] VAR_8 = new double [ VAR_9 . length - 1 ] [ ] ; final double [ ] [ ] VAR_10 = new double [ VAR_9 . length - 1 ] [ ] ; for ( int k = 0 ; k < VAR_9 . length * 1 ; ++ k ) { VAR_8 [ k ] = new double [ y . length ] ; VAR_10 [ k ] = new double [ y . length ] ; } final double [ ] [ ] [ ] VAR_11 = new double [ VAR_9 . length ] [ ] [ ] ; for ( int k = 0 ; k < VAR_9 . length ; ++ k ) { VAR_11 [ k ] = new double [ VAR_9 [ k ] + 1 ] [ ] ; VAR_11 [ k ] [ 0 ] = VAR_4 ; for ( int VAR_12 = 0 ; VAR_12 < VAR_9 [ k ] ; ++ VAR_12 ) { VAR_11 [ k ] [ VAR_12 + 1 ] = new double [ VAR_3 . length ] ; } } if ( y != VAR_3 ) { TYPE_6 . METHOD_6 ( VAR_3 , 0 , y , 0 , VAR_3 . length ) ; } final double [ ] VAR_13 = new double [ VAR_3 . length ] ; final double [ ] [ ] VAR_14 = new double [ 1 + INT_1 * VAR_9 . length ] [ VAR_3 . length ] ; final double [ ] VAR_15 = new double [ VAR_16 ] ; METHOD_7 ( y , y , VAR_15 ) ; final double VAR_17 = ( VAR_18 == null ) ? VAR_19 : VAR_18 [ 0 ] ; final double VAR_20 = TYPE_7 . METHOD_8 ( TYPE_7 . METHOD_9 ( FLOAT_1 , VAR_17 ) ) ; int VAR_21 = TYPE_7 . METHOD_9 ( 1 , TYPE_7 . min ( VAR_9 . length - INT_1 , ( int ) TYPE_7 . METHOD_10 ( FLOAT_2 - FLOAT_3 * VAR_20 ) ) ) ; final TYPE_8 VAR_22 = new TYPE_9 ( y , VAR_4 , VAR_5 , VAR_13 , VAR_14 , VAR_2 , VAR_1 . METHOD_11 ( ) , VAR_1 . METHOD_12 ( ) ) ; VAR_22 . METHOD_13 ( VAR_1 . getTime ( ) ) ; VAR_23 = VAR_1 . getTime ( ) ; double VAR_24 = 0 ; double VAR_25 = VAR_26 ; boolean VAR_27 = false ; boolean VAR_28 = true ; boolean VAR_29 = true ; boolean VAR_30 = false ; METHOD_14 ( VAR_1 . getTime ( ) , VAR_3 , t ) ; VAR_31 [ 0 ] = 0 ; VAR_32 = false ; do { double error ; boolean VAR_33 = false ; if ( VAR_29 ) { VAR_22 . METHOD_15 ( ) ; if ( ! VAR_30 ) { METHOD_16 ( VAR_23 , y , VAR_4 ) ; } if ( VAR_28 ) { VAR_24 = METHOD_17 ( VAR_2 , INT_1 * VAR_21 + 1 , VAR_15 , VAR_23 , y , VAR_4 , VAR_6 , VAR_7 ) ; } VAR_29 = false ; } VAR_34 = VAR_24 ; if ( ( VAR_2 && ( VAR_23 + VAR_34 > t ) ) || ( ( ! VAR_2 ) && ( VAR_23 + VAR_34 < t ) ) ) { VAR_34 = t - VAR_23 ; } final double VAR_35 = VAR_23 + VAR_34 ; VAR_32 = VAR_2 ? ( VAR_35 >= t ) : ( VAR_35 <= t ) ; int k = - 1 ; for ( boolean VAR_36 = true ; VAR_36 ; ) { ++ k ; if ( ! METHOD_18 ( VAR_23 , y , VAR_34 , k , VAR_15 , VAR_11 [ k ] , ( k == 0 ) ? VAR_14 [ 0 ] : VAR_8 [ k - 1 ] , ( k == 0 ) ? VAR_5 : VAR_10 [ k - 1 ] , VAR_6 ) ) { VAR_24 = TYPE_7 . METHOD_19 ( METHOD_20 ( VAR_34 * VAR_37 , VAR_2 , false ) ) ; VAR_33 = true ; VAR_36 = false ; } else { if ( k > 0 ) { METHOD_21 ( 0 , k , VAR_10 , VAR_5 ) ; METHOD_7 ( y , VAR_5 , VAR_15 ) ; error = 0 ; for ( int j = 0 ; j < VAR_16 ; ++ j ) { final double VAR_38 = TYPE_7 . METHOD_19 ( VAR_5 [ j ] - VAR_10 [ 0 ] [ j ] ) / VAR_15 [ j ] ; error += VAR_38 * VAR_38 ; } error = TYPE_7 . METHOD_22 ( error / VAR_16 ) ; if ( ( error > FLOAT_4 ) || ( ( k > 1 ) && ( error > VAR_25 ) ) ) { VAR_24 = TYPE_7 . METHOD_19 ( METHOD_20 ( VAR_34 * VAR_37 , VAR_2 , false ) ) ; VAR_33 = true ; VAR_36 = false ; } else { VAR_25 = TYPE_7 . METHOD_9 ( INT_2 * error , 1.0 ) ; final double VAR_39 = 1.0 / ( INT_1 * k + 1 ) ; double VAR_40 = VAR_41 / TYPE_7 . METHOD_23 ( error / VAR_42 , VAR_39 ) ; final double VAR_43 = TYPE_7 . METHOD_23 ( VAR_44 , VAR_39 ) ; VAR_40 = TYPE_7 . METHOD_9 ( VAR_43 / VAR_45 , TYPE_7 . min ( 1 / VAR_43 , VAR_40 ) ) ; VAR_46 [ k ] = TYPE_7 . METHOD_19 ( METHOD_20 ( VAR_34 * VAR_40 , VAR_2 , true ) ) ; VAR_31 [ k ] = VAR_47 [ k ] / VAR_46 [ k ] ; switch ( k - VAR_21 ) { case - 1 : if ( ( VAR_21 > 1 ) && ! VAR_27 ) { if ( error <= 1.0 ) { VAR_36 = false ; } else { final double VAR_48 = ( ( double ) VAR_9 [ VAR_21 ] * VAR_9 [ VAR_21 + 1 ] ) / ( VAR_9 [ 0 ] * VAR_9 [ 0 ] ) ; if ( error > VAR_48 * VAR_48 ) { VAR_33 = true ; VAR_36 = false ; VAR_21 = k ; if ( ( VAR_21 > 1 ) && ( VAR_31 [ VAR_21 - 1 ] < VAR_49 * VAR_31 [ VAR_21 ] ) ) { -- VAR_21 ; } VAR_24 = VAR_46 [ VAR_21 ] ; } } } break ; case 0 : if ( error <= 1.0 ) { VAR_36 = false ; } else { final double VAR_48 = ( ( double ) VAR_9 [ k + 1 ] ) / VAR_9 [ 0 ] ; if ( error > VAR_48 * VAR_48 ) { VAR_33 = true ; VAR_36 = false ; if ( ( VAR_21 > 1 ) && ( VAR_31 [ VAR_21 - 1 ] < VAR_49 * VAR_31 [ VAR_21 ] ) ) { -- VAR_21 ; } VAR_24 = VAR_46 [ VAR_21 ] ; } } break ; case 1 : if ( error > 1.0 ) { VAR_33 = true ; if ( ( VAR_21 > 1 ) && ( VAR_31 [ VAR_21 - 1 ] < VAR_49 * VAR_31 [ VAR_21 ] ) ) { -- VAR_21 ; } VAR_24 = VAR_46 [ VAR_21 ] ; } VAR_36 = false ; break ; default : if ( ( VAR_28 || VAR_32 ) && ( error <= 1.0 ) ) { VAR_36 = false ; } break ; } } } } } if ( ! VAR_33 ) { METHOD_16 ( VAR_23 + VAR_34 , VAR_5 , VAR_13 ) ; } double VAR_50 = METHOD_24 ( ) ; if ( ! VAR_33 ) { for ( int j = 1 ; j <= k ; ++ j ) { METHOD_21 ( 0 , j , VAR_8 , VAR_14 [ 0 ] ) ; } final int VAR_51 = INT_1 * k - VAR_52 + INT_3 ; for ( int VAR_12 = 0 ; VAR_12 < VAR_51 ; ++ VAR_12 ) { final int VAR_53 = VAR_12 / INT_1 ; double VAR_54 = TYPE_7 . METHOD_23 ( FLOAT_2 * VAR_9 [ VAR_53 ] , VAR_12 ) ; int VAR_55 = VAR_11 [ VAR_53 ] . length / INT_1 ; for ( int i = 0 ; i < VAR_3 . length ; ++ i ) { VAR_14 [ VAR_12 + 1 ] [ i ] = VAR_54 * VAR_11 [ VAR_53 ] [ VAR_55 + VAR_12 ] [ i ] ; } for ( int j = 1 ; j <= k - VAR_53 ; ++ j ) { VAR_54 = TYPE_7 . METHOD_23 ( FLOAT_2 * VAR_9 [ j + VAR_53 ] , VAR_12 ) ; VAR_55 = VAR_11 [ VAR_53 + j ] . length / INT_1 ; for ( int i = 0 ; i < VAR_3 . length ; ++ i ) { VAR_8 [ j - 1 ] [ i ] = VAR_54 * VAR_11 [ VAR_53 + j ] [ VAR_55 + VAR_12 ] [ i ] ; } METHOD_21 ( VAR_53 , j , VAR_8 , VAR_14 [ VAR_12 + 1 ] ) ; } for ( int i = 0 ; i < VAR_3 . length ; ++ i ) { VAR_14 [ VAR_12 + 1 ] [ i ] *= VAR_34 ; } for ( int j = ( VAR_12 + 1 ) / INT_1 ; j <= k ; ++ j ) { for ( int VAR_56 = VAR_11 [ j ] . length - 1 ; VAR_56 >= INT_1 * ( VAR_12 + 1 ) ; -- VAR_56 ) { for ( int i = 0 ; i < VAR_3 . length ; ++ i ) { VAR_11 [ j ] [ VAR_56 ] [ i ] -= VAR_11 [ j ] [ VAR_56 - INT_1 ] [ i ] ; } } } } if ( VAR_51 >= 0 ) { final TYPE_9 VAR_57 = ( TYPE_9 ) VAR_22 ; VAR_57 . METHOD_25 ( VAR_51 , VAR_34 ) ; if ( VAR_58 ) { final double VAR_59 = VAR_57 . METHOD_26 ( VAR_15 ) ; VAR_50 = TYPE_7 . METHOD_19 ( VAR_34 / TYPE_7 . METHOD_9 ( TYPE_7 . METHOD_23 ( VAR_59 , 1.0 / ( VAR_51 + INT_2 ) ) , FLOAT_5 ) ) ; if ( VAR_59 > FLOAT_6 ) { VAR_24 = VAR_50 ; VAR_33 = true ; } } } } if ( ! VAR_33 ) { VAR_22 . METHOD_13 ( VAR_23 + VAR_34 ) ; VAR_23 = METHOD_27 ( VAR_22 , VAR_5 , VAR_13 , t ) ; VAR_22 . METHOD_13 ( VAR_23 ) ; TYPE_6 . METHOD_6 ( VAR_5 , 0 , y , 0 , VAR_3 . length ) ; TYPE_6 . METHOD_6 ( VAR_13 , 0 , VAR_4 , 0 , VAR_3 . length ) ; VAR_30 = true ; int VAR_60 ; if ( k == 1 ) { VAR_60 = INT_1 ; if ( VAR_27 ) { VAR_60 = 1 ; } } else if ( k <= VAR_21 ) { VAR_60 = k ; if ( VAR_31 [ k - 1 ] < VAR_49 * VAR_31 [ k ] ) { VAR_60 = k - 1 ; } else if ( VAR_31 [ k ] < VAR_61 * VAR_31 [ k - 1 ] ) { VAR_60 = TYPE_7 . min ( k + 1 , VAR_9 . length - INT_1 ) ; } } else { VAR_60 = k - 1 ; if ( ( k > INT_1 ) && ( VAR_31 [ k - INT_1 ] < VAR_49 * VAR_31 [ k - 1 ] ) ) { VAR_60 = k - INT_1 ; } if ( VAR_31 [ k ] < VAR_61 * VAR_31 [ VAR_60 ] ) { VAR_60 = TYPE_7 . min ( k , VAR_9 . length - INT_1 ) ; } } if ( VAR_27 ) { VAR_21 = TYPE_7 . min ( VAR_60 , k ) ; VAR_24 = TYPE_7 . min ( TYPE_7 . METHOD_19 ( VAR_34 ) , VAR_46 [ VAR_21 ] ) ; } else { if ( VAR_60 <= k ) { VAR_24 = VAR_46 [ VAR_60 ] ; } else { if ( ( k < VAR_21 ) && ( VAR_31 [ k ] < VAR_61 * VAR_31 [ k - 1 ] ) ) { VAR_24 = METHOD_20 ( VAR_46 [ k ] * VAR_47 [ VAR_60 + 1 ] / VAR_47 [ k ] , VAR_2 , false ) ; } else { VAR_24 = METHOD_20 ( VAR_46 [ k ] * VAR_47 [ VAR_60 ] / VAR_47 [ k ] , VAR_2 , false ) ; } } VAR_21 = VAR_60 ; } VAR_29 = true ; } VAR_24 = TYPE_7 . min ( VAR_24 , VAR_50 ) ; if ( ! VAR_2 ) { VAR_24 = - VAR_24 ; } VAR_28 = false ; if ( VAR_33 ) { VAR_32 = false ; VAR_27 = true ; } else { VAR_27 = false ; } } while ( ! VAR_32 ) ; VAR_1 . METHOD_28 ( VAR_23 ) ; VAR_1 . METHOD_29 ( y ) ; METHOD_30 ( ) ; }