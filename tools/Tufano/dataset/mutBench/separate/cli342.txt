protected String [ ] METHOD_1 ( TYPE_1 VAR_1 , String [ ] VAR_2 , boolean VAR_3 ) { init ( ) ; boolean VAR_4 = true ; TYPE_2 VAR_5 = null ; for ( int i = 0 ; i < VAR_2 . length ; i ++ ) { if ( STRING_1 . equals ( VAR_2 [ i ] ) ) { VAR_4 = true ; VAR_6 . add ( STRING_1 ) ; } else if ( STRING_2 . equals ( VAR_2 [ i ] ) ) { VAR_6 . add ( STRING_2 ) ; } else if ( VAR_2 [ i ] . startsWith ( STRING_2 ) ) { TYPE_2 VAR_7 = VAR_1 . METHOD_2 ( VAR_2 [ i ] ) ; if ( VAR_7 == null ) { TYPE_2 VAR_8 = VAR_1 . METHOD_2 ( VAR_2 [ i ] . substring ( 0 , INT_1 ) ) ; if ( VAR_8 != null ) { VAR_6 . add ( VAR_2 [ i ] . substring ( 0 , INT_1 ) ) ; VAR_6 . add ( VAR_2 [ i ] . substring ( INT_1 ) ) ; } else if ( VAR_3 ) { VAR_4 = true ; VAR_6 . add ( VAR_2 [ i ] ) ; } else { VAR_6 . add ( VAR_2 [ i ] ) ; } } else { VAR_5 = VAR_7 ; TYPE_2 VAR_8 = VAR_1 . METHOD_2 ( VAR_2 [ i ] . substring ( 0 , INT_1 ) ) ; if ( ( VAR_8 != null ) && ( VAR_7 == null ) ) { VAR_6 . add ( VAR_2 [ i ] . substring ( 0 , INT_1 ) ) ; VAR_6 . add ( VAR_2 [ i ] . substring ( INT_1 ) ) ; } else if ( ( VAR_5 != null ) && VAR_5 . METHOD_3 ( ) ) { if ( VAR_5 . METHOD_3 ( ) ) { VAR_6 . add ( VAR_2 [ i ] ) ; VAR_5 = null ; } else if ( VAR_5 . METHOD_4 ( ) ) { VAR_6 . add ( VAR_2 [ i ] ) ; } else if ( VAR_3 ) { VAR_4 = true ; VAR_6 . add ( STRING_1 ) ; VAR_6 . add ( VAR_2 [ i ] ) ; } else { VAR_6 . add ( VAR_2 [ i ] ) ; } } else if ( VAR_5 != null ) { VAR_6 . add ( VAR_2 [ i ] ) ; } else if ( VAR_3 ) { VAR_4 = true ; VAR_6 . add ( STRING_1 ) ; VAR_6 . add ( VAR_2 [ i ] ) ; } else { VAR_6 . add ( VAR_2 [ i ] ) ; } } } else { VAR_6 . add ( VAR_2 [ i ] ) ; } if ( VAR_4 ) { for ( i ++ ; i < VAR_2 . length ; i ++ ) { VAR_6 . add ( VAR_2 [ i ] ) ; } } } return ( String [ ] ) VAR_6 . METHOD_5 ( new String [ ] { } ) ; }