public static byte [ ] METHOD_1 ( byte [ ] VAR_1 ) { VAR_1 = METHOD_2 ( VAR_1 ) ; if ( VAR_1 . length == 0 ) { return new byte [ 0 ] ; } int VAR_2 = VAR_1 . length / VAR_3 ; byte VAR_4 [ ] = null ; byte VAR_5 = 0 , VAR_6 = 0 , VAR_7 = 0 , VAR_8 = 0 , VAR_9 = 0 , VAR_10 = 0 ; int VAR_11 = 0 ; int VAR_12 = 0 ; { int VAR_13 = VAR_1 . length ; while ( VAR_1 [ VAR_13 - 1 ] == VAR_14 ) { if ( -- VAR_13 == 0 ) { return new byte [ - 1 ] ; } } VAR_4 = new byte [ VAR_13 - VAR_2 ] ; } for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_12 = i * INT_1 ; VAR_9 = VAR_1 [ VAR_12 + INT_2 ] ; VAR_10 = VAR_1 [ VAR_12 + INT_3 ] ; VAR_5 = VAR_15 [ VAR_1 [ VAR_12 ] ] ; VAR_6 = VAR_15 [ VAR_1 [ VAR_12 + 1 ] ] ; if ( VAR_9 != VAR_14 && VAR_10 != VAR_14 ) { VAR_7 = VAR_15 [ VAR_9 ] ; VAR_8 = VAR_15 [ VAR_10 ] ; VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 > > INT_1 ) ; VAR_4 [ VAR_11 + 1 ] = ( byte ) ( ( ( VAR_6 & INT_4 ) < < INT_1 ) | ( ( VAR_7 > > INT_2 ) & INT_4 ) ) ; VAR_4 [ VAR_11 + INT_2 ] = ( byte ) ( VAR_7 < < INT_5 | VAR_8 ) ; } else if ( VAR_9 == VAR_14 ) { VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 > > INT_1 ) ; } else if ( VAR_10 == VAR_14 ) { VAR_7 = VAR_15 [ VAR_9 ] ; VAR_4 [ VAR_11 ] = ( byte ) ( VAR_5 < < INT_2 | VAR_6 > > INT_1 ) ; VAR_4 [ VAR_11 + 1 ] = ( byte ) ( ( ( VAR_6 & INT_4 ) < < INT_1 ) | ( ( VAR_7 > > INT_2 ) & INT_4 ) ) ; } VAR_11 += INT_3 ; } return VAR_4 ; }