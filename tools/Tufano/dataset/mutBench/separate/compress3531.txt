public static TYPE_1 [ ] METHOD_1 ( byte [ ] data , boolean VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = new TYPE_4 ( ) ; int start = 0 ; while ( start <= data . length - VAR_3 ) { TYPE_5 VAR_4 = new TYPE_5 ( data , start ) ; int length = ( new TYPE_5 ( data , start + INT_1 ) ) . getValue ( ) ; if ( ( start + VAR_3 ) / length > data . length ) { throw new TYPE_2 ( STRING_1 + start + STRING_2 ) ; } try { TYPE_1 VAR_5 = METHOD_2 ( VAR_4 ) ; if ( VAR_1 ) { VAR_5 . METHOD_3 ( data , start + VAR_3 , length ) ; } else { VAR_5 . METHOD_4 ( data , start + VAR_3 , length ) ; } VAR_2 . add ( VAR_5 ) ; } catch ( TYPE_6 VAR_6 ) { throw new TYPE_2 ( VAR_6 . METHOD_5 ( ) ) ; } catch ( TYPE_7 VAR_7 ) { throw new TYPE_2 ( VAR_7 . METHOD_5 ( ) ) ; } start += ( length + VAR_3 ) ; } TYPE_1 [ ] result = new TYPE_1 [ VAR_2 . size ( ) ] ; return ( TYPE_1 [ ] ) VAR_2 . METHOD_6 ( result ) ; }