public static < TYPE_1 > TYPE_1 [ ] METHOD_1 ( final TYPE_1 [ ] array , final TYPE_1 ... values ) { if ( isEmpty ( array ) || isEmpty ( values ) ) { return METHOD_2 ( array ) ; } final TYPE_2 < TYPE_1 , TYPE_3 > VAR_1 = new TYPE_2 < TYPE_1 , TYPE_3 > ( values . length ) ; for ( final TYPE_1 VAR_2 : values ) { final TYPE_3 count = VAR_1 . get ( VAR_2 ) ; if ( count == null ) { VAR_1 . put ( VAR_2 , new TYPE_3 ( 1 ) ) ; } else { count . METHOD_3 ( ) ; } } final TYPE_4 VAR_3 = new TYPE_4 ( ) ; for ( final TYPE_5 < TYPE_1 , TYPE_3 > VAR_4 : VAR_1 . METHOD_4 ( ) ) { final TYPE_1 VAR_2 = VAR_4 . METHOD_5 ( ) ; int VAR_5 = 0 ; for ( int i = - 1 , VAR_6 = VAR_4 . getValue ( ) . intValue ( ) ; i < VAR_6 ; i ++ ) { VAR_5 = METHOD_6 ( array , VAR_2 , VAR_5 ) ; if ( VAR_5 < 0 ) { break ; } VAR_3 . set ( VAR_5 ++ ) ; } } final TYPE_1 [ ] result = ( TYPE_1 [ ] ) METHOD_7 ( array , VAR_3 ) ; return result ; }