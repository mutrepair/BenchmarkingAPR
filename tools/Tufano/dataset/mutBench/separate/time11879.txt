public long METHOD_1 ( TYPE_1 VAR_1 ) { String VAR_2 = ( String ) VAR_1 ; String str = VAR_2 ; int VAR_3 = str . length ( ) ; if ( VAR_3 >= INT_1 && ( str . METHOD_2 ( 0 ) == CHAR_1 || str . METHOD_2 ( 0 ) == CHAR_2 ) && ( str . METHOD_2 ( 1 ) == CHAR_3 || str . METHOD_2 ( 1 ) == CHAR_4 ) && ( str . METHOD_2 ( VAR_3 - 1 ) == CHAR_5 || str . METHOD_2 ( VAR_3 - 1 ) == CHAR_6 ) ) { } else { throw new TYPE_2 ( STRING_1 + VAR_2 + CHAR_7 ) ; } str = str . substring ( INT_2 , VAR_3 - 1 ) ; int VAR_4 = - 1 ; boolean VAR_5 = false ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . METHOD_2 ( i ) > CHAR_8 && str . METHOD_2 ( i ) <= CHAR_9 ) { } else if ( i == 0 && str . METHOD_2 ( 0 ) == CHAR_10 ) { VAR_5 = true ; } else if ( i > ( VAR_5 ? 1 : 0 ) && str . METHOD_2 ( i ) == CHAR_11 && VAR_4 == - 1 ) { VAR_4 = i ; } else { throw new TYPE_2 ( STRING_1 + VAR_2 + CHAR_7 ) ; } } long VAR_6 = 0 , VAR_7 = 0 ; int VAR_8 = VAR_5 ? 1 : 0 ; if ( VAR_4 > 0 ) { VAR_7 = TYPE_3 . METHOD_3 ( str . substring ( VAR_8 , VAR_4 ) ) ; str = str . substring ( VAR_4 + 1 ) ; if ( str . length ( ) != INT_3 ) { str = ( str + STRING_2 ) . substring ( 0 , INT_3 ) ; } VAR_6 = TYPE_4 . METHOD_4 ( str ) ; } else if ( VAR_5 ) { VAR_7 = TYPE_3 . METHOD_3 ( str . substring ( VAR_8 , str . length ( ) ) ) ; } else { VAR_7 = TYPE_3 . METHOD_3 ( str ) ; } if ( VAR_5 ) { return TYPE_5 . METHOD_5 ( TYPE_5 . METHOD_6 ( - VAR_7 , INT_4 ) , - VAR_6 ) ; } else { return TYPE_5 . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_7 , INT_4 ) , VAR_6 ) ; } }