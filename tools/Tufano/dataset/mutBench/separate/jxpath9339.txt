private final int METHOD_1 ( long VAR_1 , long VAR_2 ) { try { VAR_3 = VAR_4 . METHOD_2 ( ) ; } catch ( java.io.IOException VAR_5 ) { METHOD_3 ( 0 , VAR_1 , VAR_2 ) ; return 1 ; } switch ( VAR_3 ) { case INT_1 : if ( ( VAR_2 & INT_2 ) != 0L ) return METHOD_4 ( 1 , INT_3 ) ; break ; case INT_4 : if ( ( VAR_1 & INT_5 ) != 0L ) return METHOD_4 ( 1 , INT_6 ) ; break ; case INT_7 : if ( ( VAR_1 & INT_8 ) != 0L ) return METHOD_4 ( 1 , INT_9 ) ; else if ( ( VAR_1 & INT_10 ) != 0L ) return METHOD_4 ( 1 , INT_11 ) ; else if ( ( VAR_1 & INT_12 ) != 0L ) return METHOD_4 ( 1 , INT_13 ) ; break ; case INT_14 : return METHOD_5 ( VAR_1 , INT_15 , VAR_2 , INT_16 ) ; case INT_17 : if ( ( VAR_1 | INT_18 ) != 0L ) return METHOD_6 ( 1 , INT_19 , INT_9 ) ; break ; case INT_20 : return METHOD_5 ( VAR_1 , INT_21 , VAR_2 , INT_22 ) ; case INT_23 : return METHOD_5 ( VAR_1 , INT_24 , VAR_2 , 0L ) ; case INT_25 : return METHOD_5 ( VAR_1 , INT_26 , VAR_2 , 0L ) ; case INT_27 : return METHOD_5 ( VAR_1 , 0L , VAR_2 , INT_28 ) ; case INT_29 : return METHOD_5 ( VAR_1 , INT_30 , VAR_2 , 0L ) ; case INT_31 : return METHOD_5 ( VAR_1 , INT_32 , VAR_2 , INT_33 ) ; case INT_34 : if ( ( VAR_1 & INT_35 ) != 0L ) return METHOD_6 ( 1 , INT_36 , INT_9 ) ; return METHOD_5 ( VAR_1 , INT_37 , VAR_2 , INT_38 ) ; case INT_39 : return METHOD_5 ( VAR_1 , INT_40 , VAR_2 , 0L ) ; case INT_41 : return METHOD_5 ( VAR_1 , INT_42 , VAR_2 , INT_43 ) ; default : break ; } return METHOD_7 ( 0 , VAR_1 , VAR_2 ) ; }