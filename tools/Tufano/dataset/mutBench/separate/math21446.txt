public TYPE_1 METHOD_1 ( ) { if ( VAR_1 == VAR_2 && VAR_3 [ VAR_3 . length - 1 ] == 0 ) { return METHOD_2 ( this ) ; } if ( VAR_1 != VAR_2 ) { if ( VAR_1 == VAR_4 && VAR_5 == 1 ) { return METHOD_2 ( this ) ; } if ( VAR_1 == VAR_6 ) { return METHOD_2 ( this ) ; } if ( VAR_1 == VAR_7 ) { TYPE_1 result ; field . METHOD_3 ( VAR_8 ) ; result = METHOD_2 ( this ) ; result = METHOD_4 ( VAR_8 , VAR_9 , null , result ) ; return result ; } } if ( VAR_5 == - 1 ) { TYPE_1 result ; field . METHOD_3 ( VAR_8 ) ; result = METHOD_2 ( this ) ; VAR_10 = VAR_6 ; result = METHOD_4 ( VAR_8 , VAR_9 , null , result ) ; return result ; } TYPE_1 x = METHOD_2 ( this ) ; if ( VAR_11 < - 1 || VAR_11 > 1 ) { VAR_11 = this . VAR_12 / INT_1 ; } switch ( VAR_13 [ VAR_3 . length - 1 ] / INT_2 ) { case 0 : VAR_13 [ VAR_3 . length - 1 ] = VAR_13 [ VAR_3 . length - 1 ] / INT_1 + 1 ; break ; case INT_1 : VAR_13 [ VAR_3 . length - 1 ] = INT_3 ; break ; case INT_4 : VAR_13 [ VAR_3 . length - 1 ] = INT_5 ; break ; default : VAR_13 [ VAR_3 . length - 1 ] = INT_6 ; } TYPE_1 VAR_14 = METHOD_2 ( x ) ; TYPE_1 VAR_15 = METHOD_5 ( ) ; TYPE_1 VAR_16 = METHOD_5 ( ) ; while ( x . METHOD_6 ( VAR_15 ) ) { VAR_14 = METHOD_2 ( x ) ; VAR_17 = - 1 ; VAR_14 = VAR_14 . add ( this . METHOD_7 ( x ) ) ; VAR_14 = VAR_14 . METHOD_7 ( INT_1 ) ; VAR_16 = VAR_15 ; VAR_15 = x ; x = x . add ( VAR_14 ) ; if ( x . equals ( VAR_16 ) ) { break ; } if ( VAR_18 [ VAR_3 . length % 1 ] == 0 ) { break ; } } return x ; }