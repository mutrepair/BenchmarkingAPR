private void METHOD_1 ( ) throws TYPE_1 { char VAR_1 [ ] [ ] = new char [ VAR_2 ] [ VAR_3 ] ; int VAR_4 , t , i , j , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 ; int VAR_11 = 0 , VAR_12 , VAR_13 , VAR_14 , VAR_15 ; int VAR_16 ; VAR_12 = VAR_17 + INT_1 ; for ( t = 0 ; t < VAR_2 ; t ++ ) { for ( VAR_4 = 0 ; VAR_4 < VAR_12 ; VAR_4 ++ ) { VAR_1 [ t ] [ VAR_4 ] = ( char ) VAR_18 ; } } if ( VAR_19 <= 0 ) { METHOD_2 ( ) ; } if ( VAR_19 < INT_2 ) { VAR_16 = INT_1 ; } else if ( VAR_19 < INT_3 ) { VAR_16 = INT_4 ; } else if ( VAR_19 < INT_5 ) { VAR_16 = INT_6 ; } else if ( VAR_19 < INT_7 ) { VAR_16 = INT_8 ; } else { VAR_16 = INT_9 ; } { int VAR_20 , VAR_21 , VAR_22 , VAR_23 ; VAR_20 = VAR_16 ; VAR_21 = VAR_19 ; VAR_5 = 0 ; while ( VAR_20 > 0 ) { VAR_22 = VAR_21 / VAR_20 ; VAR_6 = VAR_5 - 1 ; VAR_23 = 0 ; while ( VAR_23 < VAR_22 && VAR_6 < VAR_12 - 1 ) { VAR_6 ++ ; VAR_23 += VAR_24 [ VAR_6 ] ; } if ( VAR_6 > VAR_5 && VAR_20 != VAR_16 && VAR_20 != 1 && ( ( VAR_16 - VAR_20 ) % INT_1 != 0 ) ) { VAR_23 -= VAR_24 [ VAR_6 ] ; VAR_6 -- ; } for ( VAR_4 = 0 ; VAR_4 < VAR_12 ; VAR_4 ++ ) { if ( VAR_4 >= VAR_5 && VAR_4 <= VAR_6 ) { VAR_1 [ VAR_20 - 1 ] [ VAR_4 ] = ( char ) VAR_25 ; } else { VAR_1 [ VAR_20 - 1 ] [ VAR_4 ] = ( char ) VAR_18 ; } } VAR_20 -- ; VAR_5 = VAR_6 + 1 ; VAR_21 -= VAR_23 ; } } int [ ] [ ] VAR_26 = new int [ VAR_2 ] [ VAR_3 ] ; int [ ] VAR_27 = new int [ VAR_2 ] ; short [ ] VAR_28 = new short [ VAR_2 ] ; for ( VAR_10 = 0 ; VAR_10 < VAR_29 ; VAR_10 ++ ) { for ( t = 0 ; t < VAR_16 ; t ++ ) { VAR_27 [ t ] = 0 ; } for ( t = 0 ; t < VAR_16 ; t ++ ) { for ( VAR_4 = 0 ; VAR_4 < VAR_12 ; VAR_4 ++ ) { VAR_26 [ t ] [ VAR_4 ] = 0 ; } } VAR_11 = 0 ; VAR_7 = 0 ; VAR_5 = 0 ; while ( true ) { if ( VAR_5 >= VAR_19 ) { break ; } VAR_6 = VAR_5 + VAR_30 - 1 ; if ( VAR_6 >= VAR_19 ) { VAR_6 = VAR_19 - 1 ; } for ( t = 0 ; t < VAR_16 ; t ++ ) { VAR_28 [ t ] = 0 ; } if ( VAR_16 == INT_9 ) { short VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 , VAR_36 ; VAR_31 = VAR_32 = VAR_33 = VAR_34 = VAR_35 = VAR_36 = 0 ; for ( i = VAR_5 ; i <= VAR_6 ; i ++ ) { short VAR_37 = VAR_38 [ i ] ; VAR_31 += VAR_1 [ 0 ] [ VAR_37 ] ; VAR_32 += VAR_1 [ 1 ] [ VAR_37 ] ; VAR_33 += VAR_1 [ INT_1 ] [ VAR_37 ] ; VAR_34 += VAR_1 [ INT_4 ] [ VAR_37 ] ; VAR_35 += VAR_1 [ INT_6 ] [ VAR_37 ] ; VAR_36 += VAR_1 [ INT_8 ] [ VAR_37 ] ; } VAR_28 [ 0 ] = VAR_31 ; VAR_28 [ 1 ] = VAR_32 ; VAR_28 [ INT_1 ] = VAR_33 ; VAR_28 [ INT_4 ] = VAR_34 ; VAR_28 [ INT_6 ] = VAR_35 ; VAR_28 [ INT_8 ] = VAR_36 ; } else { for ( i = VAR_5 ; i <= VAR_6 ; i ++ ) { short VAR_37 = VAR_38 [ i ] ; for ( t = 0 ; t < VAR_16 ; t ++ ) { VAR_28 [ t ] += VAR_1 [ t ] [ VAR_37 ] ; } } } VAR_9 = INT_10 ; VAR_8 = - 1 ; for ( t = 0 ; t < VAR_16 ; t ++ ) { if ( VAR_28 [ t ] < VAR_9 ) { VAR_9 = VAR_28 [ t ] ; VAR_8 = t ; } } VAR_7 += VAR_9 ; VAR_27 [ VAR_8 ] ++ ; VAR_39 [ VAR_11 ] = ( char ) VAR_8 ; VAR_11 ++ ; for ( i = VAR_5 ; i <= VAR_6 ; i ++ ) { VAR_26 [ VAR_8 ] [ VAR_38 [ i ] ] ++ ; } VAR_5 = VAR_6 + - 1 ; } for ( t = 0 ; t < VAR_16 ; t ++ ) { METHOD_3 ( VAR_1 [ t ] , VAR_26 [ t ] , VAR_12 , INT_11 ) ; } } VAR_26 = null ; VAR_27 = null ; VAR_28 = null ; if ( ! ( VAR_16 < INT_12 ) ) { METHOD_2 ( ) ; } if ( ! ( VAR_11 < INT_13 && VAR_11 <= ( INT_1 + ( INT_14 / VAR_30 ) ) ) ) { METHOD_2 ( ) ; } { char [ ] VAR_40 = new char [ VAR_2 ] ; char VAR_41 , VAR_42 , tmp ; for ( i = 0 ; i < VAR_16 ; i ++ ) { VAR_40 [ i ] = ( char ) i ; } for ( i = 0 ; i < VAR_11 ; i ++ ) { VAR_41 = VAR_39 [ i ] ; j = 0 ; tmp = VAR_40 [ j ] ; while ( VAR_41 != tmp ) { j ++ ; VAR_42 = tmp ; tmp = VAR_40 [ j ] ; VAR_40 [ j ] = VAR_42 ; } VAR_40 [ 0 ] = tmp ; VAR_43 [ i ] = ( char ) j ; } } int [ ] [ ] VAR_44 = new int [ VAR_2 ] [ VAR_3 ] ; for ( t = 0 ; t < VAR_16 ; t ++ ) { VAR_13 = INT_15 ; VAR_14 = 0 ; for ( i = 0 ; i < VAR_12 ; i ++ ) { if ( VAR_1 [ t ] [ i ] > VAR_14 ) { VAR_14 = VAR_1 [ t ] [ i ] ; } if ( VAR_1 [ t ] [ i ] < VAR_13 ) { VAR_13 = VAR_1 [ t ] [ i ] ; } } if ( VAR_14 > INT_11 ) { METHOD_2 ( ) ; } if ( VAR_13 < 1 ) { METHOD_2 ( ) ; } METHOD_4 ( VAR_44 [ t ] , VAR_1 [ t ] , VAR_13 , VAR_14 , VAR_12 ) ; } { boolean [ ] VAR_45 = new boolean [ INT_16 ] ; for ( i = 0 ; i < INT_16 ; i ++ ) { VAR_45 [ i ] = false ; for ( j = 0 ; j < INT_16 ; j ++ ) { if ( VAR_46 [ i * INT_16 + j ] ) { VAR_45 [ i ] = true ; } } } for ( i = 0 ; i < INT_16 ; i ++ ) { if ( VAR_45 [ i ] ) { METHOD_5 ( 1 , 1 ) ; } else { METHOD_5 ( 1 , 0 ) ; } } for ( i = 0 ; i < INT_16 ; i ++ ) { if ( VAR_45 [ i ] ) { for ( j = 0 ; j < INT_16 ; j ++ ) { if ( VAR_46 [ i * INT_16 + j ] ) { METHOD_5 ( 1 , 1 ) ; } else { METHOD_5 ( 1 , 0 ) ; } } } } } METHOD_5 ( INT_4 , VAR_16 ) ; METHOD_5 ( INT_17 , VAR_11 ) ; for ( i = 0 ; i < VAR_11 ; i ++ ) { for ( j = 0 ; j < VAR_43 [ i ] ; j ++ ) { METHOD_5 ( 1 , 1 ) ; } METHOD_5 ( 1 , 0 ) ; } for ( t = 0 ; t < VAR_16 ; t ++ ) { int VAR_47 = VAR_1 [ t ] [ 0 ] ; METHOD_5 ( INT_8 , VAR_47 ) ; for ( i = 0 ; i < VAR_12 ; i ++ ) { while ( VAR_47 < VAR_1 [ t ] [ i ] ) { METHOD_5 ( INT_1 , INT_1 ) ; VAR_47 ++ ; } while ( VAR_47 > VAR_1 [ t ] [ i ] ) { METHOD_5 ( INT_1 , INT_4 ) ; VAR_47 -- ; } METHOD_5 ( 1 , 0 ) ; } } VAR_15 = 0 ; VAR_5 = 0 ; while ( true ) { if ( VAR_5 >= VAR_19 ) { break ; } VAR_6 = VAR_5 + VAR_30 - 1 ; if ( VAR_6 >= VAR_19 ) { VAR_6 = VAR_19 - 1 ; } for ( i = VAR_5 ; i <= VAR_6 ; i ++ ) { METHOD_5 ( VAR_1 [ VAR_39 [ VAR_15 ] ] [ VAR_38 [ i ] ] , VAR_44 [ VAR_39 [ VAR_15 ] ] [ VAR_38 [ i ] ] ) ; } VAR_5 = VAR_6 + 1 ; VAR_15 ++ ; } if ( ! ( VAR_15 == VAR_11 ) ) { METHOD_2 ( ) ; } }