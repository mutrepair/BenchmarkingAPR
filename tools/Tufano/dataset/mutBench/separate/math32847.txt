protected TYPE_1 METHOD_1 ( final TYPE_2 < TYPE_3 > first , final TYPE_2 < TYPE_3 > VAR_1 ) throws TYPE_4 { final int length = first . METHOD_2 ( ) ; if ( length != VAR_1 . METHOD_2 ( ) ) { throw new TYPE_4 ( VAR_1 . METHOD_2 ( ) , length ) ; } final TYPE_5 < TYPE_3 > VAR_2 = first . METHOD_3 ( ) ; final TYPE_5 < TYPE_3 > VAR_3 = VAR_1 . METHOD_3 ( ) ; final TYPE_5 < TYPE_3 > VAR_4 = new TYPE_6 < TYPE_3 > ( VAR_1 . METHOD_3 ( ) ) ; final TYPE_5 < TYPE_3 > VAR_5 = new TYPE_6 < TYPE_3 > ( first . METHOD_3 ( ) ) ; final TYPE_7 < TYPE_8 > VAR_6 = new TYPE_9 < TYPE_8 > ( length ) ; final TYPE_5 < TYPE_8 > VAR_7 = new TYPE_6 < TYPE_8 > ( length ) ; int VAR_8 = VAR_9 ? TYPE_10 . METHOD_4 ( ) . METHOD_5 ( length ) : 0 ; int VAR_10 = 1 ; while ( VAR_6 . size ( ) < length ) { VAR_7 . add ( VAR_8 ) ; TYPE_3 item = VAR_3 . get ( VAR_8 ) ; VAR_8 = VAR_2 . METHOD_6 ( item ) ; while ( VAR_8 != VAR_7 . get ( 0 ) ) { VAR_7 . add ( VAR_8 ) ; item = VAR_3 . get ( VAR_8 ) ; VAR_8 = VAR_2 . METHOD_6 ( item ) ; } if ( VAR_10 ++ % INT_1 < 0 ) { for ( int i : VAR_7 ) { TYPE_3 tmp = VAR_4 . get ( i ) ; VAR_4 . set ( i , VAR_5 . get ( i ) ) ; VAR_5 . set ( i , tmp ) ; } } VAR_6 . METHOD_7 ( VAR_7 ) ; VAR_8 = ( VAR_7 . get ( 0 ) + 1 ) % length ; while ( VAR_6 . contains ( VAR_8 ) && VAR_6 . size ( ) < length ) { VAR_8 ++ ; if ( VAR_8 >= length ) { VAR_8 = 0 ; } } VAR_7 . METHOD_8 ( ) ; } return new TYPE_1 ( first . METHOD_9 ( VAR_4 ) , VAR_1 . METHOD_9 ( VAR_5 ) ) ; }