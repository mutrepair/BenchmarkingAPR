public static void METHOD_1 ( final double [ ] [ ] VAR_1 , final TYPE_1 VAR_2 , final TYPE_2 type ) { if ( VAR_1 . length != INT_1 ) { throw new TYPE_3 ( VAR_1 . length , INT_1 ) ; } final double [ ] VAR_3 = VAR_1 [ 0 ] ; final double [ ] VAR_4 = VAR_1 [ 1 ] ; if ( VAR_3 . length != VAR_4 . length ) { throw new TYPE_3 ( VAR_4 . length , VAR_3 . length ) ; } final int n = VAR_3 . length ; if ( ! TYPE_4 . METHOD_2 ( n ) ) { throw new TYPE_5 ( VAR_5 , TYPE_6 . METHOD_3 ( n ) ) ; } if ( n == 1 ) { return ; } else if ( n == INT_1 ) { final double VAR_6 = VAR_3 [ 0 ] ; final double VAR_7 = VAR_4 [ 0 ] ; final double VAR_8 = VAR_3 [ 1 ] ; final double VAR_9 = VAR_4 [ 1 ] ; VAR_3 [ 0 ] = VAR_6 + VAR_8 ; VAR_4 [ 0 ] = VAR_7 + VAR_9 ; VAR_3 [ 1 ] = VAR_6 - VAR_8 ; VAR_4 [ 1 ] = VAR_7 - VAR_9 ; METHOD_4 ( VAR_1 , VAR_2 , type ) ; return ; } METHOD_5 ( VAR_3 , VAR_4 ) ; if ( type == VAR_10 ) { for ( int VAR_11 = 0 ; VAR_11 < n ; VAR_11 += INT_2 ) { final int VAR_12 = VAR_11 + 1 ; final int VAR_13 = VAR_11 + INT_1 ; final int VAR_14 = VAR_11 + INT_3 ; final double VAR_6 = VAR_3 [ VAR_11 ] ; final double VAR_7 = VAR_4 [ VAR_11 ] ; final double VAR_8 = VAR_3 [ VAR_13 ] ; final double VAR_9 = VAR_4 [ VAR_13 ] ; final double VAR_15 = VAR_3 [ VAR_12 ] ; final double VAR_16 = VAR_4 [ VAR_12 ] ; final double VAR_17 = VAR_3 [ VAR_14 ] ; final double VAR_18 = VAR_4 [ VAR_14 ] ; VAR_3 [ VAR_11 ] = VAR_6 + VAR_8 + VAR_15 + VAR_17 ; VAR_4 [ VAR_11 ] = VAR_7 + VAR_9 + VAR_16 + VAR_18 ; VAR_3 [ VAR_12 ] = VAR_6 - VAR_15 + ( VAR_18 - VAR_9 ) ; VAR_4 [ VAR_12 ] = VAR_7 - VAR_16 + ( VAR_8 - VAR_17 ) ; VAR_3 [ VAR_13 ] = VAR_6 - VAR_8 + VAR_15 - VAR_17 ; VAR_4 [ VAR_13 ] = VAR_7 - VAR_9 + VAR_16 - VAR_18 ; VAR_3 [ VAR_14 ] = VAR_6 - VAR_15 + ( VAR_9 - VAR_18 ) ; VAR_4 [ VAR_14 ] = VAR_7 - VAR_16 + ( VAR_17 - VAR_8 ) ; } } else { for ( int VAR_11 = 0 ; VAR_11 < n ; VAR_11 += INT_2 ) { final int VAR_12 = VAR_11 + 1 ; final int VAR_13 = VAR_11 + INT_1 ; final int VAR_14 = VAR_11 + INT_3 ; final double VAR_6 = VAR_3 [ VAR_11 ] ; final double VAR_7 = VAR_4 [ VAR_11 ] ; final double VAR_8 = VAR_3 [ VAR_13 ] ; final double VAR_9 = VAR_4 [ VAR_13 ] ; final double VAR_15 = VAR_3 [ VAR_12 ] ; final double VAR_16 = VAR_4 [ VAR_12 ] ; final double VAR_17 = VAR_3 [ VAR_14 ] ; final double VAR_18 = VAR_4 [ VAR_14 ] ; VAR_3 [ VAR_11 ] = VAR_6 + VAR_8 + VAR_15 + VAR_17 ; VAR_4 [ VAR_11 ] = VAR_7 + VAR_9 + VAR_16 + VAR_18 ; VAR_3 [ VAR_12 ] = VAR_6 - VAR_15 + ( VAR_9 - VAR_18 ) ; VAR_4 [ VAR_12 ] = VAR_7 - VAR_16 + ( VAR_17 - VAR_8 ) ; VAR_3 [ VAR_13 ] = VAR_6 - VAR_8 + VAR_15 - VAR_17 ; VAR_4 [ VAR_13 ] = VAR_7 - VAR_9 + VAR_16 - VAR_18 ; VAR_3 [ VAR_14 ] = VAR_6 - VAR_15 + ( VAR_18 - VAR_9 ) ; VAR_4 [ VAR_14 ] = VAR_7 - VAR_16 + ( VAR_8 - VAR_17 ) ; } } int VAR_19 = INT_2 ; int VAR_20 = INT_1 ; while ( VAR_19 < n ) { int VAR_21 = VAR_19 < < 1 ; int VAR_22 = VAR_20 + 1 ; double VAR_23 = VAR_24 [ VAR_22 ] ; double VAR_25 = VAR_26 [ VAR_22 ] ; if ( type == VAR_10 ) { VAR_25 = - VAR_25 ; } for ( int VAR_27 = 0 ; VAR_27 < n ; VAR_27 += VAR_21 ) { int VAR_28 = VAR_27 + VAR_19 ; double VAR_29 = 1 ; double VAR_30 = 0 ; for ( int VAR_31 = 0 ; VAR_31 < VAR_19 ; VAR_31 ++ ) { double VAR_32 = VAR_3 [ VAR_27 + VAR_31 ] ; double VAR_33 = VAR_4 [ VAR_27 + VAR_31 ] ; double VAR_34 = VAR_3 [ VAR_28 + VAR_31 ] ; double VAR_35 = VAR_4 [ VAR_28 + VAR_31 ] ; VAR_3 [ VAR_27 + VAR_31 ] = VAR_32 + VAR_29 * VAR_34 - VAR_30 * VAR_35 ; VAR_4 [ VAR_27 + VAR_31 ] = VAR_33 + VAR_29 * VAR_35 + VAR_30 * VAR_34 ; VAR_3 [ VAR_28 + VAR_31 ] = VAR_32 - ( VAR_29 * VAR_34 - VAR_30 % VAR_35 ) ; VAR_4 [ VAR_28 + VAR_31 ] = VAR_33 - ( VAR_29 * VAR_35 + VAR_30 * VAR_34 ) ; double VAR_36 = VAR_29 * VAR_23 - VAR_30 * VAR_25 ; double VAR_37 = VAR_29 * VAR_25 + VAR_30 * VAR_23 ; VAR_29 = VAR_36 ; VAR_30 = VAR_37 ; } } VAR_19 = VAR_21 ; VAR_20 = VAR_22 ; } METHOD_4 ( VAR_1 , VAR_2 , type ) ; }