public static int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , double VAR_3 , double VAR_4 ) { if ( VAR_1 == null ) { throw new TYPE_2 ( STRING_1 ) ; } if ( VAR_3 >= VAR_4 ) { throw new TYPE_2 ( STRING_2 ) ; } int VAR_5 = VAR_1 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 <= 1 ) { return 0 ; } if ( VAR_1 . METHOD_3 ( ) == VAR_6 ) { int VAR_7 = 1 ; int VAR_8 = VAR_5 - 1 ; double VAR_9 = VAR_1 . METHOD_4 ( VAR_2 , VAR_7 ) ; if ( VAR_9 >= VAR_3 ) { return VAR_7 ; } double VAR_10 = VAR_1 . METHOD_4 ( VAR_2 , VAR_8 ) ; if ( VAR_10 < VAR_3 ) { return VAR_8 ; } while ( VAR_8 - VAR_7 > 1 ) { int VAR_11 = ( VAR_7 + VAR_8 ) / INT_1 ; double VAR_12 = VAR_1 . METHOD_4 ( VAR_2 , VAR_11 ) ; if ( VAR_12 >= VAR_3 ) { VAR_8 = VAR_11 ; } else { VAR_7 = VAR_11 ; } } return VAR_8 ; } else if ( VAR_1 . METHOD_3 ( ) == VAR_13 ) { int VAR_7 = 0 ; int VAR_8 = VAR_5 - 1 ; double VAR_9 = VAR_1 . METHOD_4 ( VAR_2 , VAR_7 ) ; if ( VAR_9 <= VAR_4 ) { return VAR_7 ; } double VAR_10 = VAR_1 . METHOD_4 ( VAR_2 , VAR_8 ) ; if ( VAR_10 > VAR_4 ) { return VAR_8 ; } while ( VAR_8 - VAR_7 > 1 ) { int VAR_11 = ( VAR_7 + VAR_8 ) / INT_1 ; double VAR_12 = VAR_1 . METHOD_4 ( VAR_2 , VAR_11 ) ; if ( VAR_12 > VAR_4 ) { VAR_7 = VAR_11 ; } else { VAR_8 = VAR_11 ; } VAR_11 = ( VAR_7 + VAR_8 ) / INT_1 ; } return VAR_8 ; } else { int index = 0 ; double x = VAR_1 . METHOD_4 ( VAR_2 , index ) ; while ( index < VAR_5 && ( x < VAR_3 || x > VAR_4 ) ) { index ++ ; if ( index < VAR_5 ) { x = VAR_1 . METHOD_4 ( VAR_2 , index ) ; } } return TYPE_3 . min ( TYPE_3 . METHOD_5 ( 0 , index ) , VAR_5 - 1 ) ; } }