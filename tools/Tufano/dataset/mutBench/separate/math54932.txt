private void METHOD_1 ( final double [ ] [ ] VAR_1 ) { final double [ ] [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; final int n = main . length ; VAR_3 = new double [ n ] ; VAR_4 = new double [ n ] ; final double [ ] VAR_5 = new double [ n ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { VAR_3 [ i ] = main [ i ] ; VAR_5 [ i ] = VAR_6 [ i ] ; } VAR_3 [ n - 1 ] = main [ n - 1 ] ; VAR_5 [ n - 1 ] = 0 ; double VAR_7 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( TYPE_1 . METHOD_3 ( VAR_3 [ i ] ) > VAR_7 ) { VAR_7 = TYPE_1 . METHOD_3 ( VAR_3 [ i ] ) ; } if ( TYPE_1 . METHOD_3 ( VAR_5 [ i ] ) > VAR_7 ) { VAR_7 = TYPE_1 . METHOD_3 ( VAR_5 [ i ] ) ; } } if ( VAR_7 != 0 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( TYPE_1 . METHOD_3 ( VAR_3 [ i ] ) <= VAR_8 * VAR_7 ) { VAR_3 [ i ] = 0 ; } if ( TYPE_1 . METHOD_3 ( VAR_5 [ i ] ) <= VAR_8 * VAR_7 ) { VAR_5 [ i ] = 0 ; } } } for ( int j = 0 ; j < n ; j ++ ) { int VAR_9 = 0 ; int VAR_10 ; do { for ( VAR_10 = j ; VAR_10 < n - 1 ; VAR_10 ++ ) { double VAR_11 = TYPE_1 . METHOD_3 ( VAR_3 [ VAR_10 ] ) + TYPE_1 . METHOD_3 ( VAR_3 [ VAR_10 + 1 ] ) ; if ( TYPE_1 . METHOD_3 ( VAR_5 [ VAR_10 ] ) + VAR_11 == VAR_11 ) { break ; } } if ( VAR_10 != j ) { if ( VAR_9 == VAR_12 ) { throw new TYPE_2 ( VAR_13 , VAR_12 ) ; } VAR_9 ++ ; double VAR_14 = ( VAR_3 [ j + 1 ] - VAR_3 [ j ] ) / ( INT_1 * VAR_5 [ j ] ) ; double t = TYPE_1 . METHOD_4 ( 1 + VAR_14 * VAR_14 ) ; if ( VAR_14 < 0.0 ) { VAR_14 = VAR_3 [ VAR_10 ] - VAR_3 [ j ] + VAR_5 [ j ] / ( VAR_14 * t ) ; } else { VAR_14 = VAR_3 [ VAR_10 ] - VAR_3 [ j ] + VAR_5 [ j ] / ( VAR_14 + t ) ; } double VAR_15 = 0.0 ; double VAR_16 = 1.0 ; double c = 1.0 ; int i ; for ( i = VAR_10 - 1 ; i >= j ; i -- ) { double p = VAR_16 * VAR_5 [ i ] ; double VAR_17 = c * VAR_5 [ i ] ; if ( TYPE_1 . METHOD_3 ( p ) >= TYPE_1 . METHOD_3 ( VAR_14 ) ) { c = VAR_14 / p ; t = TYPE_1 . METHOD_4 ( c * c + 1.0 ) ; VAR_5 [ i + 1 ] = p * t ; VAR_16 = 1.0 / t ; c = c * VAR_16 ; } else { VAR_16 = p / VAR_14 ; t = TYPE_1 . METHOD_4 ( VAR_16 * VAR_16 + 1.0 ) ; VAR_5 [ i + 1 ] = VAR_14 * t ; c = 1.0 / t ; VAR_16 = VAR_16 * c ; } if ( VAR_5 [ i + 1 ] == 0.0 ) { VAR_3 [ i + 1 ] -= VAR_15 ; VAR_5 [ VAR_10 ] = 0.0 ; break ; } VAR_14 = VAR_3 [ i + 1 ] - VAR_15 ; t = ( VAR_3 [ i ] - VAR_14 ) * VAR_16 + FLOAT_1 * c * VAR_17 ; VAR_15 = VAR_16 * t ; VAR_3 [ i + 1 ] = VAR_14 + VAR_15 ; VAR_14 = c * t - VAR_17 ; for ( int VAR_18 = 0 ; VAR_18 < n ; VAR_18 ++ ) { p = VAR_2 [ VAR_18 ] [ i + 1 ] ; VAR_2 [ VAR_18 ] [ i + 1 ] = VAR_16 * VAR_2 [ VAR_18 ] [ i ] + c * p ; VAR_2 [ VAR_18 ] [ i ] = c * VAR_2 [ VAR_18 ] [ i ] - VAR_16 * p ; } } if ( t == 0.0 && i >= j ) { continue ; } VAR_3 [ j ] -= VAR_15 ; VAR_5 [ j ] = VAR_14 ; VAR_5 [ VAR_10 ] = 0.0 ; } } while ( VAR_10 != j ) ; } for ( int i = 0 ; i < n ; i ++ ) { int k = i ; double p = VAR_3 [ i ] ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( VAR_3 [ j ] > p ) { k = j ; p = VAR_3 [ j ] ; } } if ( k != i ) { VAR_3 [ k ] = VAR_3 [ i ] ; VAR_3 [ i ] = p ; for ( int j = 0 ; j < n ; j ++ ) { p = VAR_2 [ j ] [ i ] ; VAR_2 [ j ] [ i ] = VAR_2 [ j ] [ k ] ; VAR_2 [ j ] [ k ] = p ; } } } VAR_7 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( TYPE_1 . METHOD_3 ( VAR_3 [ i ] ) > VAR_7 ) { VAR_7 = TYPE_1 . METHOD_3 ( VAR_3 [ i ] ) ; } } if ( VAR_7 != 0.0 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( TYPE_1 . METHOD_3 ( VAR_3 [ i ] ) < VAR_8 * VAR_7 ) { VAR_3 [ i ] = 0 ; } } } VAR_19 = new TYPE_3 [ n ] ; final double [ ] tmp = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { tmp [ j ] = VAR_2 [ j ] [ i ] ; } VAR_19 [ i ] = new TYPE_3 ( tmp ) ; } }