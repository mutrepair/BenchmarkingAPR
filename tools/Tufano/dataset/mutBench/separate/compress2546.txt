public int METHOD_1 ( byte [ ] buf , int offset , int VAR_1 ) throws TYPE_1 { int VAR_2 = 0 ; if ( VAR_3 >= VAR_4 ) { return - 1 ; } if ( ( VAR_1 + VAR_3 ) > VAR_4 ) { VAR_1 = ( int ) ( VAR_4 / VAR_3 ) ; } if ( VAR_5 != null ) { int VAR_6 = ( VAR_1 > VAR_5 . length ) ? VAR_5 . length : VAR_1 ; TYPE_2 . METHOD_2 ( VAR_5 , 0 , buf , offset , VAR_6 ) ; if ( VAR_6 >= VAR_5 . length ) { VAR_5 = null ; } else { int VAR_7 = VAR_5 . length - VAR_6 ; byte [ ] VAR_8 = new byte [ VAR_7 ] ; TYPE_2 . METHOD_2 ( VAR_5 , VAR_6 , VAR_8 , 0 , VAR_7 ) ; VAR_5 = VAR_8 ; } VAR_2 += VAR_6 ; VAR_1 -= VAR_6 ; offset += VAR_6 ; } while ( VAR_1 > 0 ) { byte [ ] VAR_9 = buffer . METHOD_3 ( ) ; if ( VAR_9 == null ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 ) ; } int VAR_6 = VAR_1 ; int VAR_10 = VAR_9 . length ; if ( VAR_10 > VAR_6 ) { TYPE_2 . METHOD_2 ( VAR_9 , 0 , buf , offset , VAR_6 ) ; VAR_5 = new byte [ VAR_10 - VAR_6 ] ; TYPE_2 . METHOD_2 ( VAR_9 , VAR_6 , VAR_5 , 0 , VAR_10 - VAR_6 ) ; } else { VAR_6 = VAR_10 ; TYPE_2 . METHOD_2 ( VAR_9 , 0 , buf , offset , VAR_10 ) ; } VAR_2 += VAR_6 ; VAR_1 -= VAR_6 ; offset += VAR_6 ; } VAR_3 += VAR_2 ; return VAR_2 ; }