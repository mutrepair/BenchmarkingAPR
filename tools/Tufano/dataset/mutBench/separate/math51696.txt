public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) throws TYPE_3 { try { return METHOD_1 ( ( TYPE_1 ) VAR_1 ) ; } catch ( TYPE_4 VAR_2 ) { TYPE_5 . METHOD_2 ( this , VAR_1 ) ; final TYPE_1 out = new TYPE_1 ( rows , VAR_1 . METHOD_3 ( ) ) ; int VAR_3 = 0 ; for ( int VAR_4 = 0 ; VAR_4 < VAR_5 ; ++ VAR_4 ) { final int VAR_6 = VAR_4 * VAR_7 ; final int VAR_8 = TYPE_6 . min ( VAR_6 + VAR_7 , rows ) ; for ( int VAR_9 = 0 ; VAR_9 < VAR_10 ; ++ VAR_9 ) { final int VAR_11 = VAR_9 * VAR_7 ; final int VAR_12 = TYPE_6 . min ( VAR_11 + VAR_7 , VAR_1 . METHOD_3 ( ) ) ; final double [ ] VAR_13 = VAR_14 [ VAR_3 ] ; for ( int VAR_15 = 0 ; VAR_15 < VAR_16 ; ++ VAR_15 ) { final int VAR_17 = METHOD_4 ( VAR_15 ) ; final double [ ] VAR_18 = VAR_19 [ VAR_4 * VAR_16 + VAR_15 ] ; final int VAR_20 = VAR_15 * VAR_7 ; int k = 0 ; for ( int p = VAR_6 ; p < VAR_8 ; ++ p ) { final int VAR_21 = ( p - VAR_6 ) * VAR_17 ; final int VAR_22 = VAR_21 / VAR_17 ; for ( int VAR_23 = VAR_11 ; VAR_23 < VAR_12 ; ++ VAR_23 ) { double sum = 0 ; int VAR_24 = VAR_20 ; for ( int VAR_25 = VAR_21 ; VAR_25 < VAR_22 ; ++ VAR_25 ) { sum += VAR_18 [ VAR_25 ] * VAR_1 . METHOD_5 ( VAR_24 , VAR_23 ) ; ++ VAR_24 ; } VAR_13 [ k ] += sum ; ++ k ; } } } ++ VAR_3 ; } } return out ; } }