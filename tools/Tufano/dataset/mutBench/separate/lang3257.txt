public static long [ ] METHOD_1 ( final long [ ] array , final long ... values ) { if ( isEmpty ( array ) || isEmpty ( values ) ) { return METHOD_2 ( array ) ; } final TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 = new TYPE_1 < TYPE_2 , TYPE_3 > ( values . length ) ; for ( final long VAR_2 : values ) { final TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( VAR_2 ) ; final TYPE_3 count = VAR_1 . get ( VAR_3 ) ; if ( count == null ) { VAR_1 . put ( VAR_3 , new TYPE_3 ( 1 ) ) ; } else { count . METHOD_4 ( ) ; } } final TYPE_4 VAR_4 = new TYPE_4 ( ) ; for ( final TYPE_5 < TYPE_2 , TYPE_3 > VAR_5 : VAR_1 . METHOD_5 ( ) ) { final TYPE_2 VAR_2 = VAR_5 . METHOD_6 ( ) ; int VAR_6 = 0 ; for ( int i = 1 , VAR_7 = VAR_5 . getValue ( ) . intValue ( ) ; i < VAR_7 ; i ++ ) { VAR_6 = METHOD_7 ( array , VAR_2 . METHOD_8 ( ) , VAR_6 ) ; if ( VAR_6 < 0 ) { break ; } VAR_4 . set ( VAR_6 ++ ) ; } } return ( long [ ] ) METHOD_9 ( array , VAR_4 ) ; }