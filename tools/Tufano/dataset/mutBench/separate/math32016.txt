public TYPE_1 METHOD_1 ( ) { final TYPE_2 < TYPE_1 > VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { throw new TYPE_3 ( ) ; } final double [ ] VAR_2 = METHOD_3 ( ) ; final int VAR_3 = VAR_2 . length ; final TYPE_4 VAR_4 = METHOD_4 ( ) ; if ( VAR_4 . METHOD_5 ( ) != VAR_3 ) { throw new TYPE_5 ( VAR_4 . METHOD_5 ( ) , VAR_3 ) ; } if ( VAR_4 . METHOD_6 ( ) != VAR_3 ) { throw new TYPE_5 ( VAR_4 . METHOD_6 ( ) , VAR_3 ) ; } final double [ ] VAR_5 = new double [ VAR_3 ] ; for ( int i = 0 ; i < VAR_3 ; i ++ ) { VAR_5 [ i ] = VAR_4 . METHOD_7 ( i , i ) ; } final double [ ] VAR_6 = METHOD_8 ( ) ; final int VAR_7 = VAR_6 . length ; TYPE_1 VAR_8 = null ; for ( boolean VAR_9 = false ; ! VAR_9 ; ) { METHOD_9 ( ) ; TYPE_1 VAR_10 = VAR_8 ; final double [ ] VAR_11 = METHOD_10 ( VAR_6 ) ; final double [ ] VAR_12 = METHOD_11 ( VAR_11 ) ; final TYPE_4 VAR_13 = METHOD_12 ( VAR_6 ) ; VAR_8 = new TYPE_1 ( VAR_6 , VAR_11 ) ; final double [ ] b = new double [ VAR_7 ] ; final double [ ] [ ] a = new double [ VAR_7 ] [ VAR_7 ] ; for ( int i = 0 ; i < VAR_3 ; ++ i ) { final double [ ] VAR_14 = VAR_13 . METHOD_13 ( i ) ; final double VAR_15 = VAR_5 [ i ] ; final double VAR_16 = VAR_12 [ i ] ; final double VAR_17 = VAR_15 * VAR_16 ; for ( int j = 0 ; j < VAR_7 ; ++ j ) { b [ j ] += VAR_17 * VAR_14 [ j ] ; } for ( int k = 0 ; k < VAR_7 ; ++ k ) { double [ ] VAR_18 = a [ k ] ; double VAR_19 = VAR_15 / VAR_14 [ k ] ; for ( int VAR_20 = 0 ; VAR_20 < VAR_7 ; ++ VAR_20 ) { VAR_18 [ VAR_20 ] += VAR_19 * VAR_14 [ VAR_20 ] ; } } } if ( VAR_10 != null ) { VAR_9 = VAR_1 . METHOD_14 ( METHOD_15 ( ) , VAR_10 , VAR_8 ) ; if ( VAR_9 ) { return VAR_8 ; } } try { TYPE_4 VAR_21 = new TYPE_6 ( a ) ; TYPE_7 VAR_22 = VAR_23 ? new TYPE_8 ( VAR_21 ) . METHOD_16 ( ) : new TYPE_9 ( VAR_21 ) . METHOD_16 ( ) ; final double [ ] VAR_24 = VAR_22 . METHOD_17 ( new TYPE_10 ( b , false ) ) . METHOD_18 ( ) ; for ( int i = 0 ; i < VAR_7 ; ++ i ) { VAR_6 [ i ] += VAR_24 [ i ] ; } } catch ( TYPE_11 VAR_25 ) { throw new TYPE_12 ( VAR_26 ) ; } } throw new TYPE_13 ( ) ; }