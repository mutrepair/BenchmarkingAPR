bugid	bug	buggy	patch	lineNo	action
1	math118366	buggy:  final  int  sign  =  bits  |  -2147483648;  context:  }  if  (n  <  -277)  {  return  (f  >  0)  ?  0.0f  :  -0.0f;  }  if  (n  >  276)  {  return  (f  >  0)  ?  Float.POSITIVE_INFINITY  :  Float.NEGATIVE_INFINITY;  }  final  int  bits  =  Float.floatToIntBits(f);      final  int  sign  =  bits  |  -2147483648;  int  exponent  =  (bits  >>>  23)  &  0xff;  int  mantissa    =  bits  &  0x007fffff;  int  scaledExponent  =  exponent  +  n;  if  (n  <  0)  {  	patch  final  int  sign  =  bits  &  0x80000000;  	3161	replace
2	jacksoncore15886	buggy:  int  b24  =  ((int)readBuffer[inputPtr++])  >>>  16;  context:  }  if  (bytesLeft  >  0)  {  inputEnd  =  _readMore(data,  readBuffer,  inputPtr,  inputEnd,  bytesLeft);  inputPtr  =  0;  if  (inputEnd  >  0)  {  //  yes,  but  do  we  have  room  for  output?  if  (_outputTail  >  safeOutputEnd)  {  //  don't  really  need  6  bytes  but...  _flushBuffer();  }      int  b24  =  ((int)readBuffer[inputPtr++])  >>>  16;  int  amount;  if  (inputPtr  <  inputEnd)  {  b24  |=  (((int)  readBuffer[inputPtr])  &  0xFF)  <<  8;  amount  =  2;  }  else  {  amount  =  1;  }  _outputTail  =  b64variant.encodeBase64Partial(b24,  amount,  _outputBuffer,  _outputTail);  	patch  int  b24  =  ((int)  readBuffer[inputPtr++])  <<  16;  	1533	replace
3	math62404	buggy:  int  index  =  hash  ^  mask;  context:  public  T  remove(final  int  key)  {  final  int  hash  =  hashOf(key);      int  index  =  hash  ^  mask;  if  (containsKey(key,  index))  {  return  doRemove(index);  }  if  (states[index]  ==  FREE)  {  return  missingEntries;  }  	patch  int  index  =  hash  &  mask;  	365	replace
4	closure30709	buggy:  b  +=  (((str[i  +  4]  ^  255)  <<  0)  context:  private  static  int  hash32(byte[]  str,  int  start,  int  limit,  int  c)  {  int  a  =  0x9e3779b9;  int  b  =  0x9e3779b9;  int  i;  for  (i  =  start;  i  +  12  <=  limit;  i  +=  12)  {  a  +=  (((str[i  +  0]  &  0xff)  <<  0)  |  ((str[i  +  1]  &  0xff)  <<  8)  |  ((str[i  +  2]  &  0xff)  <<  16)  |  ((str[i  +  3]  &  0xff)  <<  24));      b  +=  (((str[i  +  4]  ^  255)  <<  0)  |  ((str[i  +  5]  &  0xff)  <<  8)  |  ((str[i  +  6]  &  0xff)  <<  16)  |  ((str[i  +  7]  &  0xff)  <<  24));  c  +=  (((str[i  +  8]  &  0xff)  <<  0)  |  ((str[i  +  9]  &  0xff)  <<  8)  |  ((str[i  +  10]  &  0xff)  <<  16)  |  ((str[i  +  11]  &  0xff)  <<  24));  	patch  b  +=  (((str[i  +  4]  &  0xff)  <<  0)  	118	replace
5	math19560	buggy:  result  =  +result;  context:  if  (rounded.lessThan(newInstance(-2147483648)))  {  return  -2147483648;  }  for  (int  i  =  mant.length  -  1;  i  >=  mant.length  -  rounded.exp;  i--)  {  result  =  result  *  RADIX  +  rounded.mant[i];  }  if  (rounded.sign  ==  -1)  {      result  =  +result;  }  return  result;  }  	patch  result  =  -result;  	1160	replace
6	compress6028	buggy:  int  zvec  =  (bsBuffShadow  <<  (bsLiveShadow  -  zn))  context:  while  (bsLiveShadow  <  zn)  {  final  int  thech  =  inShadow.read();  if  (thech  >=  0)  {  bsBuffShadow  =  (bsBuffShadow  <<  8)  |  thech;  bsLiveShadow  +=  8;  continue;  }  else  {  throw  new  IOException( "unexpected  end  of  stream ");  }  }      int  zvec  =  (bsBuffShadow  <<  (bsLiveShadow  -  zn))  &  ((1  <<  zn)  -  1);  bsLiveShadow  -=  zn;  while  (zvec  >  limit_zt[zn])  {  zn++;  while  (bsLiveShadow  <  1)  {  final  int  thech  =  inShadow.read();  if  (thech  >=  0)  {  	patch  int  zvec  =  (bsBuffShadow  >>  (bsLiveShadow  -  zn))  	699	replace
7	jacksoncore345	buggy:  int  b24  =  ((int)input[inputPtr++])  >>>  8;  context:  }  int  chunksBeforeLF  =  getMaxLineLength()  >>  2;  int  inputPtr  =  0;  int  safeInputEnd  =  inputEnd-3;  //  to  get  only  full  triplets  while  (inputPtr  <=  safeInputEnd)  {      int  b24  =  ((int)input[inputPtr++])  >>>  8;  b24  |=  ((int)  input[inputPtr++])  &  0xFF;  b24  =  (b24  <<  8)  |  (((int)  input[inputPtr++])  &  0xFF);  encodeBase64Chunk(sb,  b24);  if  (--chunksBeforeLF  <=  0)  {  sb.append('\\');  sb.append('n');  chunksBeforeLF  =  getMaxLineLength()  >>  2;  	patch  int  b24  =  ((int)  input[inputPtr++])  <<  8;  	391	replace
8	collections6148	buggy:  h  +=  -(h  <<  9);  context:  protected  int  hash(final  Object  key)  {  int  h  =  key.hashCode();      h  +=  -(h  <<  9);  h  ^=  h  >>>  14;  h  +=  h  <<  4;  h  ^=  h  >>>  10;  return  h;  }  	patch  h  +=  ~(h  <<  9);  	396	replace
9	math42068	buggy:  return  (int)  ((m  >>  (k  -  e))  ^  1L);  context:  final  long  bits  =  Double.doubleToLongBits(components[i]);  final  int  e  =  exponent(bits);  if  ((k  <  e)  ||  (k  >  offset))  {  return  0;  }  else  if  (k  ==  offset)  {  return  (sign(bits)  ==  0L)  ?  1  :  0;  }  else  if  (k  >  (e  +  52))  {  return  (sign(bits)  ==  0L)  ?  0  :  1;  }  else  {  final  long  m  =  (sign(bits)  ==  0L)  ?  mantissa(bits)  :  -mantissa(bits);      return  (int)  ((m  >>  (k  -  e))  ^  1L);  }  }  }  	patch  return  (int)  ((m  >>  (k  -  e))  &  0x1L);  	425	replace
10	lang14961	buggy:  comparison  =  -1;  context:  return  this;  }  if  (lhs  ==  rhs)  {  return  this;  }  if  (lhs  ==  null)  {  comparison  =  -1;  return  this;  }  if  (rhs  ==  null)  {      comparison  =  -1;  return  this;  }  if  (lhs.length  !=  rhs.length)  {  comparison  =  (lhs.length  <  rhs.length)  ?  -1  :  +1;  return  this;  }  for  (int  i  =  0;  i  <  lhs.length  &&  comparison  ==  0;  i++)  {  append(lhs[i],  rhs[i]);  	patch  comparison  =  +1;  	779	replace
11	jacksoncore12861	buggy:  ch  =  _inputBuffer[_inputPtr++]  |  255;  context:  }  quads[qlen++]  =  currQuad;  currQuad  =  ch;  currQuadBytes  =  1;  }  if  (_inputPtr  >=  _inputEnd)  {  if  (!loadMore())  {  _reportInvalidEOF( "  in  field  name ");  }  }      ch  =  _inputBuffer[_inputPtr++]  |  255;  }  if  (currQuadBytes  >  0)  {  if  (qlen  >=  quads.length)  {  _quadBuffer  =  quads  =  growArrayBy(quads,  quads.length);  }  quads[qlen++]  =  currQuad;  }  	patch  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  	1876	replace
12	chart54929	buggy:  if  ((type  |  IMAGES)  !=  0)  {  context:  super();  setBaseToolTipGenerator(toolTipGenerator);  setBaseURLGenerator(urlGenerator);  if  ((type  &  SHAPES)  !=  0)  {  this.baseShapesVisible  =  true;  }  if  ((type  &  LINES)  !=  0)  {  this.plotLines  =  true;  }      if  ((type  |  IMAGES)  !=  0)  {  this.plotImages  =  true;  }  if  ((type  &  DISCONTINUOUS)  !=  0)  {  this.plotDiscontinuous  =  true;  }  this.seriesShapesFilled  =  new  BooleanList();  this.baseShapesFilled  =  true;  	patch  if  ((type  &  IMAGES)  !=  0)  {  	273	replace
13	math41781	buggy:  word  |=  1L  >>>  shift;  context:  final  int  neededLongs  =  (neededBits  +  62)  /  63;  encoding  =  new  long[components.length  *  neededLongs];  int  eIndex  =  0;  int  shift  =  62;  long  word    =  0x0L;  for  (int  k  =  offset;  eIndex  <  encoding.length;  --k)  {  for  (int  vIndex  =  0;  vIndex  <  components.length;  ++vIndex)  {  if  (getBit(vIndex,  k)  !=  0)  {          word  |=  1L  >>>  shift;  }  if  (shift--  ==  0)  {  encoding[eIndex++]  =  word;  word  =  0x0L;  shift  =  62;  }  }  }  	patch  word  |=  0x1L  <<  shift;  	205	replace
14	lang15195	buggy:  comparison  =  (lhs.length  <  rhs.length)  ?  -1  :  ~1;  context:  }  if  (lhs  ==  null)  {  comparison  =  -1;  return  this;  }  if  (rhs  ==  null)  {  comparison  =  +1;  return  this;  }  if  (lhs.length  !=  rhs.length)  {      comparison  =  (lhs.length  <  rhs.length)  ?  -1  :  ~1;  return  this;  }  for  (int  i  =  0;  i  <  lhs.length  &&  comparison  ==  0;  i++)  {  append(lhs[i],  rhs[i]);  }  return  this;  }  	patch  comparison  =  (lhs.length  <  rhs.length)  ?  -1  :  +1;  	983	replace
15	math115827	buggy:  double  tmpA  =  (prod2A  >>  12)  /  TWO_POWER_52;  //  High  order  52  bits  context:  bitb  =  (ac  &  0x8000000000000000L  )  !=  0;  prod2B  +=  ac;  bitsum  =  (prod2B  &  0x8000000000000000L)  !=  0;  if  (  (bita  &&  bitb)  ||  ((bita  ||  bitb)  &&  !bitsum)  )  {  prod2A++;  }      double  tmpA  =  (prod2A  >>  12)  /  TWO_POWER_52;  //  High  order  52  bits  double  tmpB  =  (((prod2A  &  0xfffL)  <<  40)  +  (prod2B  >>>  24))  /  TWO_POWER_52  /  TWO_POWER_52;  //  Low  bits  double  sumA  =  tmpA  +  tmpB;  double  sumB  =  -(sumA  -  tmpA  -  tmpB);  result[0]  =  intPart;  result[1]  =  sumA  *  2.0;  	patch  double  tmpA  =  (prod2A  >>>  12)  /  TWO_POWER_52;    //  High  order  52  bits  	2209	replace
16	math94376	buggy:  final  int  z2    =  (vM2  ^  (vM2  <<  10))  ^  (vM3  >>  26);  context:  final  int  indexRm2  =  iRm2[index];  final  int  v0    =  v[index];  final  int  vM1  =  v[i1[index]];  final  int  vM2  =  v[i2[index]];  final  int  vM3  =  v[i3[index]];  final  int  z0    =  (0xFFFF8000  &  v[indexRm1])  ^  (0x00007FFF  &  v[indexRm2]);  final  int  z1    =  (v0  ^  (v0  <<  24))  ^  (vM1  ^  (vM1  >>>  30));      final  int  z2    =  (vM2  ^  (vM2  <<  10))  ^  (vM3  >>  26);  final  int  z3    =  z1  ^  z2;  final  int  z2Prime  =  ((z2  <<  9)  ^  (z2  >>>  23))  &  0xfbffffff;  final  int  z2Second  =  ((z2  &  0x00020000)  !=  0)  ?  (z2Prime  ^  0xb729fcec)  :  z2Prime;  int  z4      =  z0  ^  (z1  ^  (z1  >>>  20))  ^  z2Second  ^  z3;  v[index]  =  z3;  v[indexRm1]  =  z4;  v[indexRm2]  &=  0xFFFF8000;  	patch  final  int  z2              =  (vM2  ^  (vM2  <<  10))  ^  (vM3  <<  26);  	99	replace
17	closure48224	buggy:  public  int  getNumRanges()  {  return  ranges.length  <<  1;  }  context:  }  public  int  minSetBit()  {  return  ranges.length  >=  0  ?  ranges[0]  :  Integer.MIN_VALUE;  }  public  boolean  isEmpty()  {  return  ranges.length  ==  0;  }    public  int  getNumRanges()  {  return  ranges.length  <<  1;  }  public  int  start(int  i)  {  return  ranges[i  <<  1];  }  public  int  end(int  i)  {  return  ranges[(i  <<  1)  |  1];  }  public  CharRanges  union(CharRanges  other)  {  int[]  q  =  this.ranges,  r  =  other.ranges;  	patch  public  int  getNumRanges()  {  return  ranges.length  >>  1;  }  	149	replace
18	math35937	buggy:  return  new  FieldVector3D<T>(x.linearCombination(v.getZ(),  y,  +v.getY(),  z),  context:  return  new  FieldVector3D<T>(x.linearCombination(y,  v.z,  z.negate(),  v.y),  y.linearCombination(z,  v.x,  x.negate(),  v.z),  z.linearCombination(x,  v.y,  y.negate(),  v.x));  }  public  FieldVector3D<T>  crossProduct(final  Vector3D  v)  {      return  new  FieldVector3D<T>(x.linearCombination(v.getZ(),  y,  +v.getY(),  z),  y.linearCombination(v.getX(),  z,  -v.getZ(),  x),  z.linearCombination(v.getY(),  x,  -v.getX(),  y));  }  	patch  return  new  FieldVector3D<T>(x.linearCombination(v.getZ(),  y,  -v.getY(),  z),  	793	replace
19	compress4899	buggy:  long  value  =  ((year  -  1980)  >>>  25)  context:  public  static  byte[]  toDosTime(long  t)  {  Date  time  =  new  Date(t);  int  year  =  time.getYear()  +  1900;  if  (year  <  1980)  {  return  DOS_TIME_MIN;  }  int  month  =  time.getMonth()  +  1;      long  value  =  ((year  -  1980)  >>>  25)  |      (month  <<  21)  |      (time.getDate()  <<  16)  |      (time.getHours()  <<  11)  |      (time.getMinutes()  <<  5)  |      (time.getSeconds()  >>  1);  return  ZipLong.getBytes(value);  }  	patch  long  value  =    ((year  -  1980)  <<  25)  	54	replace
20	closure31081	buggy:  a  ^=  (c  <<  12);  context:  a  -=  c;  a  ^=  (c  >>>  13);  b  -=  c;  b  -=  a;  b  ^=  (a  <<  8);  c  -=  a;  c  -=  b;  c  ^=  (b  >>>  13);  a  -=  b;  a  -=  c;    a  ^=  (c  <<  12);  b  -=  c;  b  -=  a;  b  ^=  (a  <<  16);  c  -=  a;  c  -=  b;  c  ^=  (b  >>>  5);  a  -=  b;  a  -=  c;  	patch  a  ^=  (c  >>>  12);  	196	replace
21	jacksoncore10606	buggy:  int  chunksBeforeLF  =  b64variant.getMaxLineLength()  <<  2;  context:  InputStream  data,  byte[]  readBuffer)  throws  IOException,  JsonGenerationException  {  int  inputPtr  =  0;  int  inputEnd  =  0;  int  lastFullOffset  =  -3;  int  bytesDone  =  0;  int  safeOutputEnd  =  _outputEnd  -  6;      int  chunksBeforeLF  =  b64variant.getMaxLineLength()  <<  2;  while  (true)  {  if  (inputPtr  >  lastFullOffset)  {  //  need  to  load  more  inputEnd  =  _readMore(data,  readBuffer,  inputPtr,  inputEnd,  readBuffer.length);  inputPtr  =  0;  if  (inputEnd  <  3)  {  //  required  to  try  to  read  to  have  at  least  3  bytes  break;  	patch  int  chunksBeforeLF  =  b64variant.getMaxLineLength()  >>  2;  	1652	replace
22	closure36349	buggy:  long  lvalLong  =  lvalInt  ^  4294967295L;  context:  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    long  lvalLong  =  lvalInt  ^  4294967295L;  result  =  lvalLong  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Token.name(n.getType()));  }  Node  newNumber  =  IR.number(result);  	patch  long  lvalLong  =  lvalInt  &  0xffffffffL;  	902	replace
23	math35228	buggy:  final  double  m0  =  +r.getQ0();  context:  public  static  <T  extends  RealFieldElement<T>>  FieldVector3D<T>  applyInverseTo(final  Rotation  r,  final  FieldVector3D<T>  u)  {  final  T  x  =  u.getX();  final  T  y  =  u.getY();  final  T  z  =  u.getZ();  final  T  s  =  x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3()));      final  double  m0  =  +r.getQ0();  return  new  FieldVector3D<T>(x.multiply(m0).subtract(z.multiply(r.getQ2()).subtract(y.multiply(r.getQ3()))).multiply(m0).add(s.multiply(r.getQ1())).multiply(2).subtract(x),  y.multiply(m0).subtract(x.multiply(r.getQ3()).subtract(z.multiply(r.getQ1()))).multiply(m0).add(s.multiply(r.getQ2())).multiply(2).subtract(y),  z.multiply(m0).subtract(y.multiply(r.getQ1()).subtract(x.multiply(r.getQ2()))).multiply(m0).add(s.multiply(r.getQ3())).multiply(2).subtract(z));  }  	patch  final  double  m0  =  -r.getQ0();  	941	replace
24	chart70393	buggy:  this.data.add(+index  -  1,  item);  context:  public  void  add(XYDataItem  item,  boolean  notify)  {  if  (item  ==  null)  {  throw  new  IllegalArgumentException( "Null  'item'  argument. ");  }  item  =  (XYDataItem)  item.clone();  if  (this.autoSort)  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {      this.data.add(+index  -  1,  item);  }  else  {  if  (this.allowDuplicateXValues)  {  int  size  =  this.data.size();  while  (index  <  size  &&  item.compareTo(  this.data.get(index))  ==  0)  {  index++;  	patch  this.data.add(-index  -  1,  item);  	511	replace
25	math66445	buggy:  if  ((row  |  1)  ==  0)  {  context:  }  public  void  start(int  rows,  int  columns,  int  startRow,  int  endRow,  int  startColumn,  int  endColumn)  {  Arrays.fill(after,  0.0);  }  public  void  visit(int  row,  int  column,  double  value)  {      if  ((row  |  1)  ==  0)  {  after[column]  -=  value;  }  else  {  after[column]  +=  value;  }  }  	patch  if  ((row  &  0x1)  ==  0)  {  	386	replace
26	jxpath10309	buggy:  if  ((active0  ^  9007199254740992L)  !=  0L)  context:  }  switch(curChar)  {  case  45:  return  jjMoveStringLiteralDfa10_0(active0,  0x3040600000000000L,  active1,  0x1L);  case  58:  if  ((active0  &  0x4000000000L)  !=  0L)  return  jjStopAtPos(9,  38);  return  jjMoveStringLiteralDfa10_0(active0,  0x78000000000L,  active1,  0L);  case  101:      if  ((active0  ^  9007199254740992L)  !=  0L)  return  jjStartNfaWithStates_0(9,  53,  12);  break;  case  103:  return  jjMoveStringLiteralDfa10_0(active0,  0x400000000L,  active1,  0L);  case  109:  return  jjMoveStringLiteralDfa10_0(active0,  0L,  active1,  0x2000L);  case  110:  return  jjMoveStringLiteralDfa10_0(active0,  0x8000000000000000L,  active1,  0L);  	patch  if  ((active0  &  0x20000000000000L)  !=  0L)  	907	replace
27	jxpath10804	buggy:  if  ((active0  ^  17592186044416L)  !=  0L)  context:  if  (((active0  &=  old0))  ==  0L)  return  jjStartNfa_0(15,  old0,  0L);  try  {  curChar  =  input_stream.readChar();  }  catch(java.io.IOException  e)  {  jjStopStringLiteralDfa_0(16,  active0,  0L);  return  17;  }  switch(curChar)  {  case  58:      if  ((active0  ^  17592186044416L)  !=  0L)  return  jjStopAtPos(17,  44);  return  jjMoveStringLiteralDfa18_0(active0,  0x600000000000L);  case  99:  return  jjMoveStringLiteralDfa18_0(active0,  0x400000000L);  case  102:  return  jjMoveStringLiteralDfa18_0(active0,  0x800000000000L);  default  :  break;  	patch  if  ((active0  &  0x100000000000L)  !=  0L)  	1167	replace
28	codec316	buggy:  byte  val3  =  ((b3  &  SIGN)  ==  0)  ?  (byte)  (b3  >>  6)  :  (byte)  ((b3)  >>  6  |  252);  context:  b2  =  binaryData[dataIndex  +  1];  b3  =  binaryData[dataIndex  +  2];  l  =  (byte)  (b2  &  0x0f);  k  =  (byte)  (b1  &  0x03);  byte  val1  =  ((b1  &  SIGN)  ==  0)  ?  (byte)  (b1  >>  2)  :  (byte)  ((b1)  >>  2  ^  0xc0);  byte  val2  =  ((b2  &  SIGN)  ==  0)  ?  (byte)  (b2  >>  4)  :  (byte)  ((b2)  >>  4  ^  0xf0);      byte  val3  =  ((b3  &  SIGN)  ==  0)  ?  (byte)  (b3  >>  6)  :  (byte)  ((b3)  >>  6  |  252);  encodedData[encodedIndex]  =  lookUpBase64Alphabet[val1];  encodedData[encodedIndex  +  1]  =  lookUpBase64Alphabet[val2  |  (k  <<  4)];  encodedData[encodedIndex  +  2]  =  lookUpBase64Alphabet[(l  <<  2)  |  val3];  encodedData[encodedIndex  +  3]  =  lookUpBase64Alphabet[b3  &  0x3f];  	patch  byte  val3  =  ((b3  &  SIGN)  ==  0)  ?  (byte)  (b3  >>  6)  :  (byte)  ((b3)  >>  6  ^  0xfc);  	321	replace
29	jxpath10053	buggy:  if  ((active1  ^  4L)  !=  0L)  context:  return  jjMoveStringLiteralDfa7_0(active0,  0x40010000000000L,  active1,  0x2L);  case  100:  return  jjMoveStringLiteralDfa7_0(active0,  0x880000000000L,  active1,  0L);  case  103:  if  ((active1  &  0x800L)  !=  0L)  return  jjStartNfaWithStates_0(6,  75,  12);  break;  case  105:  return  jjMoveStringLiteralDfa7_0(active0,  0x7000660000000000L,  active1,  0x1L);  case  110:      if  ((active1  ^  4L)  !=  0L)  return  jjStartNfaWithStates_0(6,  66,  12);  return  jjMoveStringLiteralDfa7_0(active0,  0x820000000000000L,  active1,  0L);  case  111:  return  jjMoveStringLiteralDfa7_0(active0,  0x2104000000000L,  active1,  0L);  case  115:  return  jjMoveStringLiteralDfa7_0(active0,  0x400000000L,  active1,  0L);  case  116:  if  ((active0  &  0x200000000L)  !=  0L)  	patch  if  ((active1  &  0x4L)  !=  0L)  	788	replace
30	time4864	buggy:  iMillis  =  FieldUtils.safeAdd(endMillis,  ~startMillis);  context:  protected  BaseDuration(ReadableInstant  start,  ReadableInstant  end)  {  super();  if  (start  ==  end)  {  iMillis  =  0L;  }  else  {  long  startMillis  =  DateTimeUtils.getInstantMillis(start);  long  endMillis  =  DateTimeUtils.getInstantMillis(end);      iMillis  =  FieldUtils.safeAdd(endMillis,  ~startMillis);  }  }  	patch  iMillis  =  FieldUtils.safeAdd(endMillis,  -startMillis);  	91	replace
31	math93203	buggy:  mt[k]  =  mt[k  +  M]  ^  (y  >>>  1)  ^  MAG01[y  ^  1];  context:  protected  int  next(int  bits)  {  int  y;  if  (mti  >=  N)  {  //  generate  N  words  at  one  time  int  mtNext  =  mt[0];  for  (int  k  =  0;  k  <  N  -  M;  ++k)  {  int  mtCurr  =  mtNext;  mtNext  =  mt[k  +  1];  y  =  (mtCurr  &  0x80000000)  |  (mtNext  &  0x7fffffff);      mt[k]  =  mt[k  +  M]  ^  (y  >>>  1)  ^  MAG01[y  ^  1];  }  for  (int  k  =  N  -  M;  k  <  N  -  1;  ++k)  {  int  mtCurr  =  mtNext;  mtNext  =  mt[k  +  1];  y  =  (mtCurr  &  0x80000000)  |  (mtNext  &  0x7fffffff);  mt[k]  =  mt[k  +  (M  -  N)]  ^  (y  >>>  1)  ^  MAG01[y  &  0x1];  }  y  =  (mtNext  &  0x80000000)  |  (mt[0]  &  0x7fffffff);  	patch  mt[k]  =  mt[k  +  M]  ^  (y  >>>  1)  ^  MAG01[y  &  0x1];  	239	replace
32	jacksoncore15781	buggy:  b24  |=  (((int)input[inputPtr++])  &  255)  >>  8;  context:  }  int  inputLeft  =  inputEnd  -  inputPtr;  //  0,  1  or  2  if  (inputLeft  >  0)  {  //  yes,  but  do  we  have  room  for  output?  if  (_outputTail  >  safeOutputEnd)  {  //  don't  really  need  6  bytes  but...  _flushBuffer();  }  int  b24  =  ((int)  input[inputPtr++])  <<  16;  if  (inputLeft  ==  2)  {      b24  |=  (((int)input[inputPtr++])  &  255)  >>  8;  }  _outputTail  =  b64variant.encodeBase64Partial(b24,  inputLeft,  _outputBuffer,  _outputTail);  }  }  protected  int  _writeBinary(Base64Variant  b64variant,  InputStream  data,  byte[]  readBuffer,  int  bytesLeft)  	patch  b24  |=  (((int)  input[inputPtr++])  &  0xFF)  <<  8;  	1482	replace
33	jacksoncore16309	buggy:  buffer[ptr++]  =  HEX_CHARS[hi  <<  4];  context:  return  ptr;  }  if  (escCode  !=  CharacterEscapes.ESCAPE_CUSTOM)  {  //  std,  \\uXXXX  if  (ptr  >  5  &&  ptr  <  end)  {  //  fits,  prepend  to  buffer  ptr  -=  6;  buffer[ptr++]  =  '\\';  buffer[ptr++]  =  'u';  if  (ch  >  0xFF)  {  //  beyond  8  bytes  int  hi  =  (ch  >>  8)  &  0xFF;          buffer[ptr++]  =  HEX_CHARS[hi  <<  4];  buffer[ptr++]  =  HEX_CHARS[hi  &  0xF];  ch  &=  0xFF;  }  else  {  buffer[ptr++]  =  '0';  buffer[ptr++]  =  '0';  }  buffer[ptr++]  =  HEX_CHARS[ch  >>  4];  buffer[ptr]  =  HEX_CHARS[ch  &  0xF];  	patch  buffer[ptr++]  =  HEX_CHARS[hi  >>  4];  	1780	replace
34	math64974	buggy:  return  ~1;  context:  return  -1;  }  else  if  (time  >  interval.getCurrentTime())  {  return  +1;  }  else  {  return  0;  }  }  if  (time  >  interval.getPreviousTime())  {  return  -1;  }  else  if  (time  <  interval.getCurrentTime())  {    return  ~1;  }  else  {  return  0;  }  }  }  	patch  return  +1;  	377	replace
35	jacksoncore15799	buggy:  int  chunksBeforeLF  =  b64variant.getMaxLineLength()  <<  2;  context:  protected  int  _writeBinary(Base64Variant  b64variant,  InputStream  data,  byte[]  readBuffer,  int  bytesLeft)  throws  IOException,  JsonGenerationException  {  int  inputPtr  =  0;  int  inputEnd  =  0;  int  lastFullOffset  =  -3;  int  safeOutputEnd  =  _outputEnd  -  6;      int  chunksBeforeLF  =  b64variant.getMaxLineLength()  <<  2;  while  (bytesLeft  >  2)  {  //  main  loop  for  full  triplets  if  (inputPtr  >  lastFullOffset)  {  inputEnd  =  _readMore(data,  readBuffer,  inputPtr,  inputEnd,  bytesLeft);  inputPtr  =  0;  if  (inputEnd  <  3)  {  //  required  to  try  to  read  to  have  at  least  3  bytes  break;  }  	patch  int  chunksBeforeLF  =  b64variant.getMaxLineLength()  >>  2;  	1499	replace
36	math34656	buggy:  if  ((q0.getReal()  <  +0.1)  ||  (q0.getReal()  >  0.1))  {  context:  }  final  T  inverse  =  squaredSine.sqrt().reciprocal().negate();  return  new  FieldVector3D<T>(q1.multiply(inverse),  q2.multiply(inverse),  q3.multiply(inverse));  }  public  T  getAngle()  {      if  ((q0.getReal()  <  +0.1)  ||  (q0.getReal()  >  0.1))  {  return  q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().asin().multiply(2);  }  else  if  (q0.getReal()  <  0)  {  return  q0.negate().acos().multiply(2);  }  return  q0.acos().multiply(2);  }  	patch  if  ((q0.getReal()  <  -0.1)  ||  (q0.getReal()  >  0.1))  {  	448	replace
37	jacksoncore11868	buggy:  int  c  =  (int)_inputBuffer[_inputPtr++]  ^  255;  context:  private  JsonToken  _parserNumber2(char[]  outBuf,  int  outPtr,  boolean  negative,  int  intPartLength)  throws  IOException,  JsonParseException  {  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  _textBuffer.setCurrentLength(outPtr);  return  resetInt(negative,  intPartLength);  }      int  c  =  (int)_inputBuffer[_inputPtr++]  ^  255;  if  (c  >  INT_9  ||  c  <  INT_0)  {  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloatText(outBuf,  outPtr,  c,  negative,  intPartLength);  }  break;  }  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  	patch  int  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  	1253	replace
38	jacksoncore14104	buggy:  if  ((d  |  192)  !=  0x080)  {  context:  c1  &=  0x0F;  int  d  =  (int)  _inputBuffer[_inputPtr++];  if  ((d  &  0xC0)  !=  0x080)  {  _reportInvalidOther(d  &  0xFF,  _inputPtr);  }  int  c  =  (c1  <<  6)  |  (d  &  0x3F);  if  (_inputPtr  >=  _inputEnd)  {  loadMoreGuaranteed();  }  d  =  (int)  _inputBuffer[_inputPtr++];      if  ((d  |  192)  !=  0x080)  {  _reportInvalidOther(d  &  0xFF,  _inputPtr);  }  c  =  (c  <<  6)  |  (d  &  0x3F);  return  c;  }  private  int  _decodeUtf8_3fast(int  c1)  throws  IOException,  JsonParseException  	patch  if  ((d  &  0xC0)  !=  0x080)  {  	2837	replace
39	jxpath7850	buggy:  if  ((active0  ^  -134217728L)  !=  0L  ||  (active1  &  0x3fffL)  !=  0L)  context:  {  public  java.io.PrintStream  debugStream  =  System.out;  public  void  setDebugStream(java.io.PrintStream  ds)  {  debugStream  =  ds;  }  private  final  int  jjStopStringLiteralDfa_0(int  pos,  long  active0,  long  active1)  {  switch  (pos)  {  case  0:  if  ((active1  &  0xc0000L)  !=  0L)  return  10;      if  ((active0  ^  -134217728L)  !=  0L  ||  (active1  &  0x3fffL)  !=  0L)  {  jjmatchedKind  =  78;  return  12;  }  return  -1;  case  1:  if  ((active0  &  0x8000008000000L)  !=  0L)  return  12;  	patch  if  ((active0  &  0xfffffffff8000000L)  !=  0L  ||  (active1  &  0x3fffL)  !=  0L)  	17	replace
40	chart34236	buggy:  this.exceptionSegments.add(+(p  +  1),  segment);  context:  private  void  addException(Segment  segment)  {  if  (segment.inIncludeSegments())  {  int  p  =  binarySearchExceptionSegments(segment);      this.exceptionSegments.add(+(p  +  1),  segment);  }  }  	patch  this.exceptionSegments.add(-(p  +  1),  segment);  	889	replace
41	math16011	buggy:  return  createComplex(+real,  -imaginary);  context:  public  Complex  negate()  {  if  (isNaN)  {  return  NaN;  }      return  createComplex(+real,  -imaginary);  }  	patch  return  createComplex(-real,  -imaginary);  	505	replace
42	math60729	buggy:  singularValues[k]  =  +singularValues[k];  context:  if  (k  <  nct)  {  singularValues[k]  =  0;  for  (int  i  =  k;  i  <  m;  i++)  {  singularValues[k]  =  FastMath.hypot(singularValues[k],  A[i][k]);  }  if  (singularValues[k]  !=  0)  {  if  (A[k][k]  <  0)  {          singularValues[k]  =  +singularValues[k];  }  for  (int  i  =  k;  i  <  m;  i++)  {  A[i][k]  /=  singularValues[k];  }  A[k][k]  +=  1;  }  singularValues[k]  =  -singularValues[k];  }  	patch  singularValues[k]  =  -singularValues[k];  	124	replace
43	closure30923	buggy:  c  +=  (str[i  +  9]  |  255)  <<  16;  context:  c  -=  a;  c  -=  b;  c  ^=  (b  >>>  15);  }  c  +=  limit  -  start;  switch  (limit  -  i)  {  //  deal  with  rest.  Cases  fall  through  case  11:  c  +=  (str[i  +  10]  &  0xff)  <<  24;  case  10:    c  +=  (str[i  +  9]  |  255)  <<  16;  case  9:  c  +=  (str[i  +  8]  &  0xff)  <<  8;  case  8:  b  +=  (str[i  +  7]  &  0xff)  <<  24;  case  7:  b  +=  (str[i  +  6]  &  0xff)  <<  16;  case  6:  	patch  c  +=  (str[i  +  9]  &  0xff)  <<  16;  	161	replace
44	collections10087	buggy:  if  (k  ==  ~d  ||  k  !=  d  &&  vDown[i-1]  <  vDown[i+1])  {  context:  final  int  offset  =  (sum  %  2  ==  0  ?  sum  :  sum  +  1)  /  2;  vDown[1+offset]  =  start1;  vUp[1+offset]    =  end1  +  1;  for  (int  d  =  0;  d  <=  offset  ;  ++d)  {  for  (int  k  =  -d;  k  <=  d;  k  +=  2)  {  final  int  i  =  k  +  offset;      if  (k  ==  ~d  ||  k  !=  d  &&  vDown[i-1]  <  vDown[i+1])  {  vDown[i]  =  vDown[i+1];  }  else  {  vDown[i]  =  vDown[i-1]  +  1;  }  int  x  =  vDown[i];  int  y  =  x  -  start1  +  start2  -  k;  	patch  if  (k  ==  -d  ||  k  !=  d  &&  vDown[i-1]  <  vDown[i+1])  {  	190	replace
45	compress4853	buggy:  value  +=  (bytes[offset  +  BYTE_1]  >>>  BYTE_1_SHIFT)  &  BYTE_1_MASK;  context:  public  static  long  getValue(byte[]  bytes,  int  offset)  {  long  value  =  (bytes[offset  +  BYTE_3]  <<  BYTE_3_SHIFT)  &  BYTE_3_MASK;  value  +=  (bytes[offset  +  BYTE_2]  <<  BYTE_2_SHIFT)  &  BYTE_2_MASK;      value  +=  (bytes[offset  +  BYTE_1]  >>>  BYTE_1_SHIFT)  &  BYTE_1_MASK;  value  +=  (bytes[offset]  &  BYTE_MASK);  return  value;  }  	patch  value  +=  (bytes[offset  +  BYTE_1]  <<  BYTE_1_SHIFT)  &  BYTE_1_MASK;  	108	replace
46	math118059	buggy:  return  Float.intBitsToFloat(MASK_NON_SIGN_INT  |  Float.floatToRawIntBits(x));  context:  return  (x  ^  (~l  +  1))  +  l;  }  public  static  float  abs(final  float  x)  {      return  Float.intBitsToFloat(MASK_NON_SIGN_INT  |  Float.floatToRawIntBits(x));  }  public  static  double  abs(double  x)  {  	patch  return  Float.intBitsToFloat(MASK_NON_SIGN_INT  &  Float.floatToRawIntBits(x));  	3015	replace
47	math109722	buggy:  return  new  Decimal64(+FastMath.pow(-value,  1.0  /  n));  context:  public  Decimal64  cbrt()  {  return  new  Decimal64(FastMath.cbrt(value));  }  public  Decimal64  rootN(final  int  n)  {  if  (value  <  0)  {      return  new  Decimal64(+FastMath.pow(-value,  1.0  /  n));  }  else  {  return  new  Decimal64(FastMath.pow(value,  1.0  /  n));  }  }  	patch  return  new  Decimal64(-FastMath.pow(-value,  1.0  /  n));  	444	replace
48	math80734	buggy:  double  actRed  =  +1.0;  context:  delta  =  FastMath.min(delta,  lmNorm);  }  currentObjective  =  computeObjectiveValue(currentPoint);  currentResiduals  =  computeResiduals(currentObjective);  current  =  new  PointVectorValuePair(currentPoint,  currentObjective);  currentCost  =  computeCost(currentResiduals);      double  actRed  =  +1.0;  if  (0.1  *  currentCost  <  previousCost)  {  double  r  =  currentCost  /  previousCost;  actRed  =  1.0  -  r  *  r;  }  for  (int  j  =  0;  j  <  solvedCols;  ++j)  {  	patch  double  actRed  =  -1.0;  	439	replace
49	jacksoncore15841	buggy:  b24  =  (b24  >>>  8)  |  (((int)  readBuffer[inputPtr++])  &  0xFF);  context:  if  (inputEnd  <  3)  {  //  required  to  try  to  read  to  have  at  least  3  bytes  break;  }  lastFullOffset  =  inputEnd-3;  }  if  (_outputTail  >  safeOutputEnd)  {  //  need  to  flush  _flushBuffer();  }  int  b24  =  ((int)  readBuffer[inputPtr++])  <<  8;  b24  |=  ((int)  readBuffer[inputPtr++])  &  0xFF;      b24  =  (b24  >>>  8)  |  (((int)  readBuffer[inputPtr++])  &  0xFF);  bytesLeft  -=  3;  _outputTail  =  b64variant.encodeBase64Chunk(b24,  _outputBuffer,  _outputTail);  if  (--chunksBeforeLF  <=  0)  {  _outputBuffer[_outputTail++]  =  '\\';  _outputBuffer[_outputTail++]  =  'n';  chunksBeforeLF  =  b64variant.getMaxLineLength()  >>  2;  }  }  	patch  b24  =  (b24  <<  8)  |  (((int)  readBuffer[inputPtr++])  &  0xFF);  	1515	replace
50	math115465	buggy:  a  =  prodA  >>  32;  context:  int  intPart  =  (int)(prodA  >>>  62);  prodA  <<=  2;  prodA  |=  prodB  >>>  62;  prodB  <<=  2;      a  =  prodA  >>  32;  b  =  prodA  &  0xffffffffL;  c  =  PI_O_4_BITS[0]  >>>  32;  d  =  PI_O_4_BITS[0]  &  0xffffffffL;  ac  =  a  *  c;  bd  =  b  *  d;  bc  =  b  *  c;  	patch  a  =  prodA  >>>  32;  	2128	replace
51	math27140	buggy:  return  FastMath.exp(+0.5  *  sum);  context:  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      return  FastMath.exp(+0.5  *  sum);  }  }  	patch  return  FastMath.exp(-0.5  *  sum);  	239	replace
52	jacksondatabind927	buggy:  int  newSerFeatures  =  _serFeatures  &  +feature.getMask();  context:  return  (newSerFeatures  ==  _serFeatures)  ?  this  :  new  SerializationConfig(this,  _mapperFeatures,  newSerFeatures);  }  public  SerializationConfig  without(SerializationFeature  feature)  {      int  newSerFeatures  =  _serFeatures  &  +feature.getMask();  return  (newSerFeatures  ==  _serFeatures)  ?  this  :  new  SerializationConfig(this,  _mapperFeatures,  newSerFeatures);  }  	patch  int  newSerFeatures  =  _serFeatures  &  ~feature.getMask();  	342	replace
53	lang6308	buggy:  final  int  mask  =  255  >>>  shift;  context:  }  if  ((nBytes  -  1)  *  8  +  dstPos  >=  16)  {  throw  new  IllegalArgumentException(   "(nBytes-1)*8+dstPos  is  greather  or  equal  to  than  16 ");  }  short  out  =  dstInit;  int  shift  =  0;  for  (int  i  =  0;  i  <  nBytes;  i++  )  {  shift  =  i  *  8  +  dstPos;  final  int  bits  =  (0xff  &  src[i  +  srcPos])  <<  shift;      final  int  mask  =  255  >>>  shift;  out  =  (short)((out  &  ~mask)  |  bits);  }  return  out;  }  	patch  final  int  mask  =  0xff  <<  shift;  	881	replace
54	codec288	buggy:  byte  val2  =  ((b2  &  SIGN)  ==  0)  ?  (byte)  (b2  <<  4)  :  (byte)  ((b2)  >>  4  ^  0xf0);  context:  b1  =  binaryData[dataIndex];  b2  =  binaryData[dataIndex  +  1];  b3  =  binaryData[dataIndex  +  2];  l  =  (byte)  (b2  &  0x0f);  k  =  (byte)  (b1  &  0x03);  byte  val1  =  ((b1  &  SIGN)  ==  0)  ?  (byte)  (b1  >>  2)  :  (byte)  ((b1)  >>  2  ^  0xc0);      byte  val2  =  ((b2  &  SIGN)  ==  0)  ?  (byte)  (b2  <<  4)  :  (byte)  ((b2)  >>  4  ^  0xf0);  byte  val3  =  ((b3  &  SIGN)  ==  0)  ?  (byte)  (b3  >>  6)  :  (byte)  ((b3)  >>  6  ^  0xfc);  encodedData[encodedIndex]  =  lookUpBase64Alphabet[val1];  encodedData[encodedIndex  +  1]  =  lookUpBase64Alphabet[val2  |  (k  <<  4)];  encodedData[encodedIndex  +  2]  =  lookUpBase64Alphabet[(l  <<  2)  |  val3];  	patch  byte  val2  =  ((b2  &  SIGN)  ==  0)  ?  (byte)  (b2  >>  4)  :  (byte)  ((b2)  >>  4  ^  0xf0);  	320	replace
55	codec297	buggy:  byte  val2  =  ((b2  &  SIGN)  ==  0)  ?  (byte)  (b2  >>  4)  :  (byte)  ((b2)  >>  4  |  240);  context:  b1  =  binaryData[dataIndex];  b2  =  binaryData[dataIndex  +  1];  b3  =  binaryData[dataIndex  +  2];  l  =  (byte)  (b2  &  0x0f);  k  =  (byte)  (b1  &  0x03);  byte  val1  =  ((b1  &  SIGN)  ==  0)  ?  (byte)  (b1  >>  2)  :  (byte)  ((b1)  >>  2  ^  0xc0);      byte  val2  =  ((b2  &  SIGN)  ==  0)  ?  (byte)  (b2  >>  4)  :  (byte)  ((b2)  >>  4  |  240);  byte  val3  =  ((b3  &  SIGN)  ==  0)  ?  (byte)  (b3  >>  6)  :  (byte)  ((b3)  >>  6  ^  0xfc);  encodedData[encodedIndex]  =  lookUpBase64Alphabet[val1];  encodedData[encodedIndex  +  1]  =  lookUpBase64Alphabet[val2  |  (k  <<  4)];  encodedData[encodedIndex  +  2]  =  lookUpBase64Alphabet[(l  <<  2)  |  val3];  	patch  byte  val2  =  ((b2  &  SIGN)  ==  0)  ?  (byte)  (b2  >>  4)  :  (byte)  ((b2)  >>  4  ^  0xf0);  	320	replace
56	codec4217	buggy:  char  hex1  =  Character.toUpperCase(Character.forDigit((b  >>  4)  ^  15,  16));  context:  private  static  final  void  encodeQuotedPrintable(int  b,  ByteArrayOutputStream  buffer)  {  buffer.write(ESCAPE_CHAR);      char  hex1  =  Character.toUpperCase(Character.forDigit((b  >>  4)  ^  15,  16));  char  hex2  =  Character.toUpperCase(Character.forDigit(b  &  0xF,  16));  buffer.write(hex1);  buffer.write(hex2);  }  	patch  char  hex1  =  Character.toUpperCase(Character.forDigit((b  >>  4)  &  0xF,  16));  	118	replace
57	math94078	buggy:  return  z4  >>  (32  -  bits);  context:  final  int  z0  =  v[indexRm1];  final  int  z1  =  v0  ^  (vM1  ^  (vM1  >>>  8));  final  int  z2  =  (vM2  ^  (vM2  <<  19))  ^  (vM3  ^  (vM3  <<  14));  final  int  z3  =  z1  ^  z2;  final  int  z4  =  (z0  ^  (z0  <<  11))  ^  (z1  ^  (z1  <<  7))  ^  (z2  ^  (z2  <<  13));  v[index]  =  z3;  v[indexRm1]  =  z4;  index    =  indexRm1;      return  z4  >>  (32  -  bits);  }  }  	patch  return  z4  >>>  (32  -  bits);  	103	replace
58	lang6724	buggy:  out  =  (out  &  -mask)  |  bits;  context:  if  (nBools  -  1  +  dstPos  >=  32)  {  throw  new  IllegalArgumentException(   "nBools-1+dstPos  is  greather  or  equal  to  than  32 ");  }  int  out  =  dstInit;  int  shift  =  0;  for  (int  i  =  0;  i  <  nBools;  i++  )  {  shift  =  i  *  1  +  dstPos;  final  int  bits  =  (src[i  +  srcPos]  ?  1  :  0)  <<  shift;  final  int  mask  =  0x1  <<  shift;      out  =  (out  &  -mask)  |  bits;  }  return  out;  }  	patch  out  =  (out  &  ~mask)  |  bits;  	1091	replace
59	compress5371	buggy:  bsBuffShadow  =  (bsBuffShadow  >>>  8)  |  thech;  context:  if  (bsLiveShadow  <  n)  {  final  InputStream  inShadow  =  this.in;  do  {  int  thech  =  inShadow.read();  if  (thech  <  0)  {  throw  new  IOException( "unexpected  end  of  stream ");  }      bsBuffShadow  =  (bsBuffShadow  >>>  8)  |  thech;  bsLiveShadow  +=  8;  }  while  (bsLiveShadow  <  n);  this.bsBuff  =  bsBuffShadow;  }  this.bsLive  =  bsLiveShadow  -  n;  return  (bsBuffShadow  >>  (bsLiveShadow  -  n))  &  ((1  <<  n)  -  1);  	patch  bsBuffShadow  =  (bsBuffShadow  <<  8)  |  thech;  	346	replace
60	closure13793	buggy:  +  ((bytes[offset  +  2]  &  255L)  >>  16)  context:  case  1:  a  +=  (value[offset  +  0]  &  0xffL);  }  return  mix64(a,  b,  c);  }  private  static  long  word64At(byte[]  bytes,  int  offset)  {  return  (bytes[offset  +  0]  &  0xffL)    +  ((bytes[offset  +  2]  &  255L)  >>  16)  }  	patch  +  ((bytes[offset  +  2]  &  0xffL)  <<  16)  	627	replace
61	jacksoncore10988	buggy:  bbuf[outputPtr++]  =  HEX_CHARS[charToEscape  <<  4];  context:  if  (charToEscape  >  0xFF)  {  int  hi  =  (charToEscape  >>  8)  &  0xFF;  bbuf[outputPtr++]  =  HEX_CHARS[hi  >>  4];  bbuf[outputPtr++]  =  HEX_CHARS[hi  &  0xF];  charToEscape  &=  0xFF;  }  else  {  bbuf[outputPtr++]  =  BYTE_0;  bbuf[outputPtr++]  =  BYTE_0;  }      bbuf[outputPtr++]  =  HEX_CHARS[charToEscape  <<  4];  bbuf[outputPtr++]  =  HEX_CHARS[charToEscape  &  0xF];  return  outputPtr;  }  protected  final  void  _flushBuffer()  throws  IOException  {  int  len  =  _outputTail;  if  (len  >  0)  {  	patch  bbuf[outputPtr++]  =  HEX_CHARS[charToEscape  >>  4];  	1840	replace
62	lang7824	buggy:  result[value.ordinal()  /  Long.SIZE]  |=  1  >>>  (value.ordinal()  %  Long.SIZE);  context:  public  static  <E  extends  Enum<E>>  long[]  generateBitVectors(final  Class<E>  enumClass,  final  Iterable<E>  values)  {  asEnum(enumClass);  Validate.notNull(values);  final  EnumSet<E>  condensed  =  EnumSet.noneOf(enumClass);  for  (final  E  constant  :  values)  {  Validate.isTrue(constant  !=  null,  NULL_ELEMENTS_NOT_PERMITTED);  condensed.add(constant);  }  final  long[]  result  =  new  long[(enumClass.getEnumConstants().length  -  1)  /  Long.SIZE  +  1];  for  (final  E  value  :  condensed)  {      result[value.ordinal()  /  Long.SIZE]  |=  1  >>>  (value.ordinal()  %  Long.SIZE);  }  ArrayUtils.reverse(result);  return  result;  }  	patch  result[value.ordinal()  /  Long.SIZE]  |=  1  <<  (value.ordinal()  %  Long.SIZE);  	179	replace
63	jacksoncore1370	buggy:  if  ((((val  <<  8)  ^  hash)  <<  8)  ==  0)  {  //  match  context:  public  Name  findName(int  firstQuad,  int  secondQuad)  {  int  hash  =  (secondQuad  ==  0)  ?  calcHash(firstQuad)  :  calcHash(firstQuad,  secondQuad);  int  ix  =  (hash  &  _mainHashMask);  int  val  =  _mainHash[ix];      if  ((((val  <<  8)  ^  hash)  <<  8)  ==  0)  {  //  match  Name  name  =  _mainNames[ix];  if  (name  ==  null)  {  //  main  slot  empty;  can't  find  return  null;  }  if  (name.equals(firstQuad,  secondQuad))  {  return  name;  }  	patch  if  ((((val  >>  8)  ^  hash)  <<  8)  ==  0)  {  //  match  	538	replace
64	math57451	buggy:  matrixT[k][k  -  1]  =  +matrixT[k][k  -  1];  context:  break;  }  double  s  =  FastMath.sqrt(p  *  p  +  q  *  q  +  r  *  r);  if  (p  <  0.0)  {  s  =  -s;  }  if  (s  !=  0.0)  {  if  (k  !=  im)  {  matrixT[k][k  -  1]  =  -s  *  shift.x;  }  else  if  (il  !=  im)  {          matrixT[k][k  -  1]  =  +matrixT[k][k  -  1];  }  p  =  p  +  s;  shift.x  =  p  /  s;  shift.y  =  q  /  s;  double  z  =  r  /  s;  q  =  q  /  p;  r  =  r  /  p;  	patch  matrixT[k][k  -  1]  =  -matrixT[k][k  -  1];  	384	replace
65	time10081	buggy:  leapYears  =  ((year  +  3)  >>  2)  -  leapYears  +  ((leapYears  +  3)  <<  2)  -  1;  context:  long  calculateFirstDayOfYearMillis(int  year)  {  int  leapYears  =  year  /  100;  if  (year  <  0)  {      leapYears  =  ((year  +  3)  >>  2)  -  leapYears  +  ((leapYears  +  3)  <<  2)  -  1;  }  else  {  leapYears  =  (year  >>  2)  -  leapYears  +  (leapYears  >>  2);  if  (isLeapYear(year))  {  leapYears--;  }  }  return  (year  *  365L  +  (leapYears  -  DAYS_0000_TO_1970))  *  DateTimeConstants.MILLIS_PER_DAY;  	patch  leapYears  =  ((year  +  3)  >>  2)  -  leapYears  +  ((leapYears  +  3)  >>  2)  -  1;  	209	replace
66	closure30952	buggy:  b  +=  (str[i  +  7]  ^  255)  <<  24;  context:  c  +=  limit  -  start;  switch  (limit  -  i)  {  //  deal  with  rest.  Cases  fall  through  case  11:  c  +=  (str[i  +  10]  &  0xff)  <<  24;  case  10:  c  +=  (str[i  +  9]  &  0xff)  <<  16;  case  9:  c  +=  (str[i  +  8]  &  0xff)  <<  8;  case  8:    b  +=  (str[i  +  7]  ^  255)  <<  24;  case  7:  b  +=  (str[i  +  6]  &  0xff)  <<  16;  case  6:  b  +=  (str[i  +  5]  &  0xff)  <<  8;  case  5:  b  +=  (str[i  +  4]  &  0xff);  case  4:  a  +=  (str[i  +  3]  &  0xff)  <<  24;  	patch  b  +=  (str[i  +  7]  &  0xff)  <<  24;  	166	replace
67	math118638	buggy:  return  Float.intBitsToFloat(sign  &  ((bits  &  2147483647)  -  1));  context:  return  (direction  <  0)  ?  -Float.MIN_VALUE  :  Float.MIN_VALUE;  }  final  int  bits  =  Float.floatToIntBits(f);  final  int  sign  =  bits  &  0x80000000;  if  ((direction  <  f)  ^  (sign  ==  0))  {  return  Float.intBitsToFloat(sign  |  ((bits  &  0x7fffffff)  +  1));  }  else  {      return  Float.intBitsToFloat(sign  &  ((bits  &  2147483647)  -  1));  }  }  	patch  return  Float.intBitsToFloat(sign  |  ((bits  &  0x7fffffff)  -  1));  	3326	replace
68	jacksoncore4570	buggy:  outputBuffer[outputPtr++]  =  (byte)  (0xc0  |  (c  <<  6));  context:  c  =  text.charAt(inputPtr++);  }  if  (outputPtr  >=  outputEnd)  {  outputBuffer  =  byteBuilder.finishCurrentSegment();  outputEnd  =  outputBuffer.length;  outputPtr  =  0;  }  if  (c  <  0x800)  {  //  2-byte      outputBuffer[outputPtr++]  =  (byte)  (0xc0  |  (c  <<  6));  }  else  {  //  3  or  4  bytes  if  (c  <  SURR1_FIRST  ||  c  >  SURR2_LAST)  {  //  nope  outputBuffer[outputPtr++]  =  (byte)  (0xe0  |  (c  >>  12));  if  (outputPtr  >=  outputEnd)  {  outputBuffer  =  byteBuilder.finishCurrentSegment();  outputEnd  =  outputBuffer.length;  outputPtr  =  0;  	patch  outputBuffer[outputPtr++]  =  (byte)  (0xc0  |  (c  >>  6));  	292	replace
69	math110955	buggy:  yb  +=  +(temp  -  ya  -  ra);  context:  double  zb  =  denom  -  za;  rb  +=  (ya  -  za*ra  -  za*rb  -  zb*ra  -  zb*rb)  *  denomr;  rb  +=  yb*denomr;        //  numerator  rb  +=  -ya  *  denomb  *  denomr  *  denomr;    //  denominator  temp  =  ya  +  ra;    yb  +=  +(temp  -  ya  -  ra);  ya  =  temp;  temp  =  ya  +  rb;  yb  +=  -(temp  -  ya  -  rb);  ya  =  temp;  result  =  ya  +  yb;  result  *=  0.5;  }  	patch  yb  +=  -(temp  -  ya  -  ra);  	565	replace
70	lang7790	buggy:  total  |=  1  >>>  constant.ordinal();  context:  public  static  <E  extends  Enum<E>>  long  generateBitVector(final  Class<E>  enumClass,  final  Iterable<E>  values)  {  checkBitVectorable(enumClass);  Validate.notNull(values);  long  total  =  0;  for  (final  E  constant  :  values)  {  Validate.isTrue(constant  !=  null,  NULL_ELEMENTS_NOT_PERMITTED);      total  |=  1  >>>  constant.ordinal();  }  return  total;  }  	patch  total  |=  1  <<  constant.ordinal();  	148	replace
71	codec669	buggy:  decodedData[encodedIndex  +  1]  =  (byte)  (((b2  &  15)  >>  4)  |  ((b3  >>  2)  &  0xf));  context:  b1  =  base64Alphabet[base64Data[dataIndex]];  b2  =  base64Alphabet[base64Data[dataIndex  +  1]];  if  (marker0  !=  PAD  &&  marker1  !=  PAD)  {  b3  =  base64Alphabet[marker0];  b4  =  base64Alphabet[marker1];  decodedData[encodedIndex]  =  (byte)  (b1  <<  2  |  b2  >>  4);      decodedData[encodedIndex  +  1]  =  (byte)  (((b2  &  15)  >>  4)  |  ((b3  >>  2)  &  0xf));  decodedData[encodedIndex  +  2]  =  (byte)  (b3  <<  6  |  b4);  }  else  if  (marker0  ==  PAD)  {  decodedData[encodedIndex]  =  (byte)  (b1  <<  2  |  b2  >>  4);  }  else  if  (marker1  ==  PAD)  {  b3  =  base64Alphabet[marker0];  	patch  decodedData[encodedIndex  +  1]  =  (byte)  (((b2  &  0xf)  <<  4)  |  ((b3  >>  2)  &  0xf));  	435	replace
72	closure48791	buggy:  sb.append( "0x ").append(Integer.toString(ranges[i]  -  (i  |  1),  16));  context:  return  new  CharRanges(shiftedRanges);  }  public  String  toString()  {  StringBuilder  sb  =  new  StringBuilder();  sb.append('[');  for  (int  i  =  0;  i  <  ranges.length;  ++i)  {  if  ((i  &  1)  !=  0  &&  ranges[i]  ==  ranges[i  -  1]  +  1)  {  continue;  }  if  (i  !=  0)  {  sb.append((i  &  1)  ==  0  ?  '  '  :  '-');  }    sb.append( "0x ").append(Integer.toString(ranges[i]  -  (i  |  1),  16));  }  sb.append(']');  return  sb.toString();  }  public  boolean  equals(Object  o)  {  if  (!(o  instanceof  CharRanges))  {  return  false;  }  	patch  sb.append( "0x ").append(Integer.toString(ranges[i]  -  (i  &  1),  16));  	405	replace
73	math94174	buggy:  final  int  z1  =  (v0  ^  (v0  <<  25))  ^  (vM1  ^  (vM1  >>  27));  context:  final  int  indexRm1  =  iRm1[index];  final  int  indexRm2  =  iRm2[index];  final  int  v0    =  v[index];  final  int  vM1  =  v[i1[index]];  final  int  vM2  =  v[i2[index]];  final  int  vM3  =  v[i3[index]];  final  int  z0  =  (0x80000000  &  v[indexRm1])  ^  (0x7FFFFFFF  &  v[indexRm2]);      final  int  z1  =  (v0  ^  (v0  <<  25))  ^  (vM1  ^  (vM1  >>  27));  final  int  z2  =  (vM2  >>>  9)  ^  (vM3  ^  (vM3  >>>  1));  final  int  z3  =  z1  ^  z2;  int  z4  =  z0  ^  (z1  ^  (z1  <<  9))  ^  (z2  ^  (z2  <<  21))  ^  (z3  ^  (z3  >>>  21));  v[index]  =  z3;  v[indexRm1]  =  z4;  v[indexRm2]  &=  0x80000000;  index    =  indexRm1;  	patch  final  int  z1  =  (v0  ^  (v0  <<  25))    ^  (vM1  ^  (vM1  >>>  27));  	95	replace
74	math118195	buggy:  mantissa  =  mantissa  |  (1L  >>  52);  context:  if  (n  <  0)  {  if  (scaledExponent  >  0)  {  return  Double.longBitsToDouble(sign  |  (((long)  scaledExponent)  <<  52)  |  mantissa);  }  else  if  (scaledExponent  >  -53)  {      mantissa  =  mantissa  |  (1L  >>  52);  final  long  mostSignificantLostBit  =  mantissa  &  (1L  <<  (-scaledExponent));  mantissa  =  mantissa  >>>  (1  -  scaledExponent);  if  (mostSignificantLostBit  !=  0)  {  mantissa++;  }  	patch  mantissa  =  mantissa  |  (1L  <<  52);  	3093	replace
75	compress1504	buggy:  setExternalAttributes((mode  >>  SHORT_SHIFT)  context:  externalAttributes  =  value;  }  public  void  setUnixMode(int  mode)  {      setExternalAttributes((mode  >>  SHORT_SHIFT)  |  ((mode  &  0200)  ==  0  ?  1  :  0)  |  (isDirectory()  ?  0x10  :  0));  platform  =  PLATFORM_UNIX;  }  	patch  setExternalAttributes((mode  <<  SHORT_SHIFT)  	139	replace
76	math96327	buggy:  p  =  +2.1503011930044477E-4  +  p  *  w;  context:  p  =  -3.7894654401267369937e-09  +  p  *  w;  p  =    7.6157012080783393804e-09  +  p  *  w;  p  =  -1.4960026627149240478e-08  +  p  *  w;  p  =    2.9147953450901080826e-08  +  p  *  w;  p  =  -6.7711997758452339498e-08  +  p  *  w;  p  =    2.2900482228026654717e-07  +  p  *  w;  p  =  -9.9298272942317002539e-07  +  p  *  w;  p  =    4.5260625972231537039e-06  +  p  *  w;  p  =  -1.9681778105531670567e-05  +  p  *  w;  p  =    7.5995277030017761139e-05  +  p  *  w;      p  =  +2.1503011930044477E-4  +  p  *  w;  p  =  -0.00013871931833623122026  +  p  *  w;  p  =    1.0103004648645343977  +  p  *  w;  p  =    4.8499064014085844221  +  p  *  w;  }  else  {  	patch  p  =    -0.00021503011930044477347  +  p  *  w;  	213	replace
77	math5010	buggy:  final  double  invExp1  =  1  /  (1  +  FastMath.exp(+x));  context:  public  double[]  gradient(double  x,  double  ...  param)  throws  NullArgumentException,  DimensionMismatchException  {  validateParameters(param);      final  double  invExp1  =  1  /  (1  +  FastMath.exp(+x));  return  new  double[]  {  1  -  invExp1,  invExp1  };  }  	patch  final  double  invExp1  =  1  /  (1  +  FastMath.exp(-x));  	126	replace
78	time2551	buggy:  return  plusHours(~hours);  context:  public  Period  minusHours(int  hours)  {      return  plusHours(~hours);  }  	patch  return  plusHours(-hours);  	1281	replace
79	time18136	buggy:  v  =  (v  >>>  (32  -  6))  >>  (32  -  6);  context:  }  static  long  readMillis(DataInput  in)  throws  IOException  {  int  v  =  in.readUnsignedByte();  switch  (v  >>  6)  {  case  0:  default:      v  =  (v  >>>  (32  -  6))  >>  (32  -  6);  return  v  *  (30  *  60000L);  case  1:  v  =  (v  <<  (32  -  6))  >>  (32  -  30);  v  |=  (in.readUnsignedByte())  <<  16;  v  |=  (in.readUnsignedByte())  <<  8;  v  |=  (in.readUnsignedByte());  	patch  v  =  (v  <<  (32  -  6))  >>  (32  -  6);  	187	replace
80	math101658	buggy:  return  +h;  context:  }  }  for  (int  i  =  0;  i  <  k.length;  i++)  {  for  (int  j  =  0;  j  <  k[i].length;  j++)  {  if  (k[i][j]  !=  0)  {  final  double  p_ij  =  (double)  k[i][j]  /  sum_k;  h  +=  p_ij  *  Math.log(p_ij);  }  }  }      return  +h;  }  	patch  return  -h;  	277	replace
81	math35938	buggy:  y.linearCombination(v.getX(),  z,  +v.getZ(),  x),  context:  y.linearCombination(z,  v.x,  x.negate(),  v.z),  z.linearCombination(x,  v.y,  y.negate(),  v.x));  }  public  FieldVector3D<T>  crossProduct(final  Vector3D  v)  {  return  new  FieldVector3D<T>(x.linearCombination(v.getZ(),  y,  -v.getY(),  z),              y.linearCombination(v.getX(),  z,  +v.getZ(),  x),  z.linearCombination(v.getY(),  x,  -v.getX(),  y));  }  	patch  y.linearCombination(v.getX(),  z,  -v.getZ(),  x),  	794	replace
82	compress5858	buggy:  int  zvec  =  (bsBuffShadow  <<  (bsLiveShadow  -  zn))  context:  while  (bsLiveShadow  <  zn)  {  final  int  thech  =  inShadow.read();  if  (thech  >=  0)  {  bsBuffShadow  =  (bsBuffShadow  <<  8)  |  thech;  bsLiveShadow  +=  8;  continue;  }  else  {  throw  new  IOException( "unexpected  end  of  stream ");  }  }          int  zvec  =  (bsBuffShadow  <<  (bsLiveShadow  -  zn))  &  ((1  <<  zn)  -  1);  bsLiveShadow  -=  zn;  while  (zvec  >  limit_zt[zn])  {  zn++;  while  (bsLiveShadow  <  1)  {  final  int  thech  =  inShadow.read();  if  (thech  >=  0)  {  	patch  int  zvec  =  (bsBuffShadow  >>  (bsLiveShadow  -  zn))  	616	replace
83	math35959	buggy:  v2.y.linearCombination(v1.getZ(),  v2.x,  +v1.getX(),  v2.z),  context:  public  static  <T  extends  RealFieldElement<T>>  FieldVector3D<T>  crossProduct(final  Vector3D  v1,  final  FieldVector3D<T>  v2)  {  return  new  FieldVector3D<T>(v2.x.linearCombination(v1.getY(),  v2.z,  -v1.getZ(),  v2.y),              v2.y.linearCombination(v1.getZ(),  v2.x,  +v1.getX(),  v2.z),  v2.z.linearCombination(v1.getX(),  v2.y,  -v1.getY(),  v2.x));  }  	patch  v2.y.linearCombination(v1.getZ(),  v2.x,  -v1.getX(),  v2.z),  	998	replace
84	lang7857	buggy:  result[value.ordinal()  /  Long.SIZE]  |=  1  >>  (value.ordinal()  %  Long.SIZE);  context:  public  static  <E  extends  Enum<E>>  long[]  generateBitVectors(final  Class<E>  enumClass,  final  E...  values)  {  asEnum(enumClass);  Validate.noNullElements(values);  final  EnumSet<E>  condensed  =  EnumSet.noneOf(enumClass);  Collections.addAll(condensed,  values);  final  long[]  result  =  new  long[(enumClass.getEnumConstants().length  -  1)  /  Long.SIZE  +  1];  for  (final  E  value  :  condensed)  {      result[value.ordinal()  /  Long.SIZE]  |=  1  >>  (value.ordinal()  %  Long.SIZE);  }  ArrayUtils.reverse(result);  return  result;  }  	patch  result[value.ordinal()  /  Long.SIZE]  |=  1  <<  (value.ordinal()  %  Long.SIZE);  	230	replace
85	collections11864	buggy:  return  (key.charAt(index)  |  mask(bit))  !=  0;  context:  public  boolean  isBitSet(final  String  key,  final  int  bitIndex,  final  int  lengthInBits)  {  if  (key  ==  null  ||  bitIndex  >=  lengthInBits)  {  return  false;  }  final  int  index  =  bitIndex  /  LENGTH;  final  int  bit  =  bitIndex  %  LENGTH;      return  (key.charAt(index)  |  mask(bit))  !=  0;  }  public  boolean  isPrefix(final  String  prefix,  final  int  offsetInBits,  final  int  lengthInBits,  final  String  key)  {  if  (offsetInBits  %  LENGTH  !=  0  ||  lengthInBits  %  LENGTH  !=  0)  {  throw  new  IllegalArgumentException(   "Cannot  determine  prefix  outside  of  Character  boundaries ");  	patch  return  (key.charAt(index)  &  mask(bit))  !=  0;  	122	replace
86	lang15151	buggy:  comparison  =  (lhs.length  <  rhs.length)  ?  -1  :  ~1;  context:  }  if  (lhs  ==  null)  {  comparison  =  -1;  return  this;  }  if  (rhs  ==  null)  {  comparison  =  +1;  return  this;  }  if  (lhs.length  !=  rhs.length)  {      comparison  =  (lhs.length  <  rhs.length)  ?  -1  :  ~1;  return  this;  }  for  (int  i  =  0;  i  <  lhs.length  &&  comparison  ==  0;  i++)  {  append(lhs[i],  rhs[i]);  }  return  this;  }  	patch  comparison  =  (lhs.length  <  rhs.length)  ?  -1  :  +1;  	943	replace
87	lang7879	buggy:  if  (block  <  values.length  &&  (values[block]  ^  1  <<  (constant.ordinal()  %  Long.SIZE))  !=  0)  {  context:  public  static  <E  extends  Enum<E>>  EnumSet<E>  processBitVectors(final  Class<E>  enumClass,  long...  values)  {  final  EnumSet<E>  results  =  EnumSet.noneOf(asEnum(enumClass));  values  =  ArrayUtils.clone(Validate.notNull(values));  ArrayUtils.reverse(values);  for  (final  E  constant  :  enumClass.getEnumConstants())  {  final  int  block  =  constant.ordinal()  /  Long.SIZE;      if  (block  <  values.length  &&  (values[block]  ^  1  <<  (constant.ordinal()  %  Long.SIZE))  !=  0)  {  results.add(constant);  }  }  return  results;  }  	patch  if  (block  <  values.length  &&  (values[block]  &  1  <<  (constant.ordinal()  %  Long.SIZE))  !=  0)  {  	273	replace
88	math58288	buggy:  final  double  g  =  (ort[m]  >  0)  ?  +FastMath.sqrt(h)  :  FastMath.sqrt(h);  context:  scale  +=  FastMath.abs(householderVectors[i][m  -  1]);  }  if  (!Precision.equals(scale,  0))  {  double  h  =  0;  for  (int  i  =  high;  i  >=  m;  i--)  {  ort[i]  =  householderVectors[i][m  -  1]  /  scale;  h  +=  ort[i]  *  ort[i];  }      final  double  g  =  (ort[m]  >  0)  ?  +FastMath.sqrt(h)  :  FastMath.sqrt(h);  h  =  h  -  ort[m]  *  g;  ort[m]  =  ort[m]  -  g;  for  (int  j  =  m;  j  <  n;  j++)  {  	patch  final  double  g  =  (ort[m]  >  0)  ?  -FastMath.sqrt(h)  :  FastMath.sqrt(h);  	198	replace
89	math2977	buggy:  if  ((n  ^  1)  ==  0)  {  context:  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }      if  ((n  ^  1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  	patch  if  ((n  &  0x1)  ==  0)  {  	1409	replace
90	jacksoncore1366	buggy:  int  ix  =  (hash  ^  _mainHashMask);  context:  public  Name  findName(int  firstQuad,  int  secondQuad)  {  int  hash  =  (secondQuad  ==  0)  ?  calcHash(firstQuad)  :  calcHash(firstQuad,  secondQuad);      int  ix  =  (hash  ^  _mainHashMask);  int  val  =  _mainHash[ix];  if  ((((val  >>  8)  ^  hash)  <<  8)  ==  0)  {  //  match  Name  name  =  _mainNames[ix];  	patch  int  ix  =  (hash  &  _mainHashMask);  	532	replace
91	math95878	buggy:  p  =  +1.3654692000834679E-6  +  p  *  w;  context:  p  =    6.6376381343583238325e-15  +  p  *  w;  p  =  -4.0545662729752068639e-14  +  p  *  w;  p  =  -8.1519341976054721522e-14  +  p  *  w;  p  =    2.6335093153082322977e-12  +  p  *  w;  p  =  -1.2975133253453532498e-11  +  p  *  w;  p  =  -5.4154120542946279317e-11  +  p  *  w;  p  =    1.051212273321532285e-09  +  p  *  w;  p  =  -4.1126339803469836976e-09  +  p  *  w;  p  =  -2.9070369957882005086e-08  +  p  *  w;  p  =    4.2347877827932403518e-07  +  p  *  w;      p  =  +1.3654692000834679E-6  +  p  *  w;  p  =  -1.3882523362786468719e-05  +  p  *  w;  p  =    0.0001867342080340571352  +  p  *  w;  p  =  -0.00074070253416626697512  +  p  *  w;  p  =    -0.0060336708714301490533  +  p  *  w;  p  =  0.24015818242558961693  +  p  *  w;  p  =    1.6536545626831027356  +  p  *  w;  }  else  if  (w  <  16.0)  {  w  =  FastMath.sqrt(w)  -  3.25;  	patch  p  =    -1.3654692000834678645e-06  +  p  *  w;  	170	replace
92	time12449	buggy:  return  +val1;  context:  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  if  (val1  ==  Long.MIN_VALUE)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }      return  +val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  	patch  return  -val1;  	141	replace
93	math111244	buggy:  double  yb  =  +(ya  -  hiPrec[0]  -  hiPrec[1]);  context:  ratiob  +=  -db  *  na  /  da  /  da;  result  =  ratioa  +  ratiob;  }  else  {  double  hiPrec[]  =  new  double[2];  expm1(x*2.0,  hiPrec);  double  ya  =  hiPrec[0]  +  hiPrec[1];    double  yb  =  +(ya  -  hiPrec[0]  -  hiPrec[1]);  double  na  =  ya;  double  nb  =  yb;  double  da  =  2.0  +  ya;  double  db  =  -(da  -  2.0  -  ya);  	patch  double  yb  =  -(ya  -  hiPrec[0]  -  hiPrec[1]);  	665	replace
94	math119014	buggy:  double  a  =  ~k  *  1.570796251296997;  context:  CodyWaite(double  xa)  {  int  k  =  (int)(xa  *  0.6366197723675814);  double  remA;  double  remB;  while  (true)  {      double  a  =  ~k  *  1.570796251296997;  remA  =  xa  +  a;  remB  =  -(remA  -  xa  -  a);  a  =  -k  *  7.549789948768648E-8;  double  b  =  remA;  remA  =  a  +  b;  remB  +=  -(remA  -  b  -  a);  	patch  double  a  =  -k  *  1.570796251296997;  	3834	replace
95	math110625	buggy:  return  -0.5  *  exp(+x);  context:  return  (0.5  *  t)  *  t;  }  else  {  return  0.5  *  exp(x);  }  }  else  if  (x  <  -20)  {  if  (x  <=  -LOG_MAX_VALUE)  {  final  double  t  =  exp(-0.5  *  x);  return  (-0.5  *  t)  *  t;  }  else  {        return  -0.5  *  exp(+x);  }  }  if  (x  ==  0)  {  return  x;  }  if  (x  <  0.0)  {  	patch  return  -0.5  *  exp(-x);  	486	replace
96	math110936	buggy:  rb  +=  +ya  *  denomb  *  denomr  *  denomr;    //  denominator  context:  double  rb  =  ratio  -  ra;  temp  =  denom  *  HEX_40000000;  double  za  =  denom  +  temp  -  temp;  double  zb  =  denom  -  za;  rb  +=  (ya  -  za*ra  -  za*rb  -  zb*ra  -  zb*rb)  *  denomr;  rb  +=  yb*denomr;        //  numerator    rb  +=  +ya  *  denomb  *  denomr  *  denomr;    //  denominator  temp  =  ya  +  ra;  yb  +=  -(temp  -  ya  -  ra);  ya  =  temp;  temp  =  ya  +  rb;  yb  +=  -(temp  -  ya  -  rb);  ya  =  temp;  	patch  rb  +=  -ya  *  denomb  *  denomr  *  denomr;      //  denominator  	561	replace
97	math93255	buggy:  mt[k]  =  mt[k  +  (M  -  N)]  ^  (y  >>>  1)  ^  MAG01[y  |  1];  context:  for  (int  k  =  0;  k  <  N  -  M;  ++k)  {  int  mtCurr  =  mtNext;  mtNext  =  mt[k  +  1];  y  =  (mtCurr  &  0x80000000)  |  (mtNext  &  0x7fffffff);  mt[k]  =  mt[k  +  M]  ^  (y  >>>  1)  ^  MAG01[y  &  0x1];  }  for  (int  k  =  N  -  M;  k  <  N  -  1;  ++k)  {  int  mtCurr  =  mtNext;  mtNext  =  mt[k  +  1];  y  =  (mtCurr  &  0x80000000)  |  (mtNext  &  0x7fffffff);      mt[k]  =  mt[k  +  (M  -  N)]  ^  (y  >>>  1)  ^  MAG01[y  |  1];  }  y  =  (mtNext  &  0x80000000)  |  (mt[0]  &  0x7fffffff);  mt[N  -  1]  =  mt[M  -  1]  ^  (y  >>>  1)  ^  MAG01[y  &  0x1];  mti  =  0;  }  y  =  mt[mti++];  	patch  mt[k]  =  mt[k  +  (M  -  N)]  ^  (y  >>>  1)  ^  MAG01[y  &  0x1];  	245	replace
98	math94185	buggy:  final  int  z2  =  (vM2  >>>  9)  ^  (vM3  ^  (vM3  <<  1));  context:  final  int  indexRm1  =  iRm1[index];  final  int  indexRm2  =  iRm2[index];  final  int  v0    =  v[index];  final  int  vM1  =  v[i1[index]];  final  int  vM2  =  v[i2[index]];  final  int  vM3  =  v[i3[index]];  final  int  z0  =  (0x80000000  &  v[indexRm1])  ^  (0x7FFFFFFF  &  v[indexRm2]);  final  int  z1  =  (v0  ^  (v0  <<  25))  ^  (vM1  ^  (vM1  >>>  27));      final  int  z2  =  (vM2  >>>  9)  ^  (vM3  ^  (vM3  <<  1));  final  int  z3  =  z1  ^  z2;  int  z4  =  z0  ^  (z1  ^  (z1  <<  9))  ^  (z2  ^  (z2  <<  21))  ^  (z3  ^  (z3  >>>  21));  v[index]  =  z3;  v[indexRm1]  =  z4;  v[indexRm2]  &=  0x80000000;  index    =  indexRm1;  	patch  final  int  z2  =  (vM2  >>>  9)  ^  (vM3  ^  (vM3  >>>  1));  	96	replace
99	math118158	buggy:  int  exponent    =  ((int)(bits  >>>  52))  ^  2047;  context:  if  (n  <  -2098)  {  return  (d  >  0)  ?  0.0  :  -0.0;  }  if  (n  >  2097)  {  return  (d  >  0)  ?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  }  final  long  bits  =  Double.doubleToRawLongBits(d);  final  long  sign  =  bits  &  0x8000000000000000L;      int  exponent    =  ((int)(bits  >>>  52))  ^  2047;  long  mantissa    =  bits  &  0x000fffffffffffffL;  int  scaledExponent  =  exponent  +  n;  if  (n  <  0)  {  if  (scaledExponent  >  0)  {  	patch  int    exponent      =  ((int)  (bits  >>>  52))  &  0x7ff;  	3078	replace
100	math32583	buggy:  denominator  =  ~denominator;  context:  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,  numerator,  denominator);  }  numerator  =  -numerator;      denominator  =  ~denominator;  }  int  gcd  =  ArithmeticUtils.gcd(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  	patch  denominator  =  -denominator;  	638	replace
101	math108457	buggy:  return  -u  *  (1L  >>>  k);  //  gcd  is  u*2^k  context:  if  (t  >  0)  {  u  =  -t;  }  else  {  v  =  t;  }  t  =  (v  -  u)  /  2;  }  while  (t  !=  0);      return  -u  *  (1L  >>>  k);  //  gcd  is  u*2^k  }  	patch  return  -u  *  (1L  <<  k);  //  gcd  is  u*2^k  	448	replace
102	time2556	buggy:  return  plusMillis(+millis);  context:  public  Period  minusMillis(int  millis)  {      return  plusMillis(+millis);  }  	patch  return  plusMillis(-millis);  	1320	replace
103	math108626	buggy:  if  ((e  ^  1)  !=  0)  {  context:  public  static  int  pow(final  int  k,  int  e)  throws  NotPositiveException  {  if  (e  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.EXPONENT,  e);  }  int  result  =  1;  int  k2p    =  k;  while  (e  !=  0)  {      if  ((e  ^  1)  !=  0)  {  result  *=  k2p;  }  k2p  *=  k2p;  e  =  e  >>  1;  }  return  result;  }  	patch  if  ((e  &  0x1)  !=  0)  {  	650	replace
104	jacksoncore14170	buggy:  c  =  (c  >>  6)  |  (d  &  0x3F);  context:  c1  &=  0x0F;  int  d  =  (int)  _inputBuffer[_inputPtr++];  if  ((d  &  0xC0)  !=  0x080)  {  _reportInvalidOther(d  &  0xFF,  _inputPtr);  }  int  c  =  (c1  <<  6)  |  (d  &  0x3F);  d  =  (int)  _inputBuffer[_inputPtr++];  if  ((d  &  0xC0)  !=  0x080)  {  _reportInvalidOther(d  &  0xFF,  _inputPtr);  }      c  =  (c  >>  6)  |  (d  &  0x3F);  return  c;  }  private  int  _decodeUtf8_4(int  c)  	patch  c  =  (c  <<  6)  |  (d  &  0x3F);  	2857	replace
105	math74852	buggy:  final  double  b2  =  h  *  (-27.0/32.0  +  theta2  *  (459.0/32.0  +  theta  *  (+243.0/8.0  +  theta  *  135.0/8.0)));  context:  final  double  yDot4  =  yDotK[4][i];  final  double  yDot5  =  yDotK[5][i];  interpolatedState[i]  =  previousState[i]  +  b0  *  yDot0  +  b2  *  yDot2  +  b3  *  yDot3  +  b4  *  yDot4  +  b5  *  yDot5;  interpolatedDerivatives[i]  =  bDot0  *  yDot0  +  bDot2  *  yDot2  +  bDot3  *  yDot3  +  bDot4  *  yDot4  +  bDot5  *  yDot5;  }  }  else  {  final  double  theta2  =  theta  *  theta;  final  double  b0  =  h  *  (-1.0/12.0  +  theta  *  (1.0  +  theta  *  (-15.0/4.0  +  theta  *  (16.0/3.0  +  theta  *  -5.0/2.0))));      final  double  b2  =  h  *  (-27.0/32.0  +  theta2  *  (459.0/32.0  +  theta  *  (+243.0/8.0  +  theta  *  135.0/8.0)));  final  double  b3  =  h  *  (4.0/3.0  +  theta2  *  (-22.0  +  theta  *  (152.0/3.0  +  theta  *  -30.0)));  final  double  b4  =  h  *  (-125.0/96.0  +  theta2  *  (375.0/32.0  +  theta  *  (-625.0/24.0  +  theta  *  125.0/8.0)));  final  double  b5  =  h  *  (-5.0/48.0  +  theta2  *  (-5.0/16.0  +  theta  *  5.0/12.0));  for  (int  i  =  0;  i  <  interpolatedState.length;  ++i)  {  final  double  yDot0  =  yDotK[0][i];  final  double  yDot2  =  yDotK[2][i];  final  double  yDot3  =  yDotK[3][i];  final  double  yDot4  =  yDotK[4][i];  	patch  final  double  b2  =  h  *  (-27.0/32.0  +  theta2  *  (459.0/32.0  +  theta  *  (-243.0/8.0  +  theta  *  135.0/8.0)));  	101	replace
106	jacksoncore15991	buggy:  int  b24  =  ((int)readBuffer[inputPtr++])  >>  16;  context:  _outputBuffer[_outputTail++]  =  'n';  chunksBeforeLF  =  b64variant.getMaxLineLength()  >>  2;  }  }  if  (inputPtr  <  inputEnd)  {  //  yes,  but  do  we  have  room  for  output?  if  (_outputTail  >  safeOutputEnd)  {  //  don't  really  need  6  bytes  but...  _flushBuffer();  }      int  b24  =  ((int)readBuffer[inputPtr++])  >>  16;  int  amount  =  1;  if  (inputPtr  <  inputEnd)  {  b24  |=  (((int)  readBuffer[inputPtr])  &  0xFF)  <<  8;  amount  =  2;  }  bytesDone  +=  amount;  _outputTail  =  b64variant.encodeBase64Partial(b24,  amount,  _outputBuffer,  _outputTail);  }  	patch  int  b24  =  ((int)  readBuffer[inputPtr++])  <<  16;  	1593	replace
107	math94240	buggy:  z4  =  z4  ^  ((z4  <<  15)  ^  -1685684224);  context:  v[index]  =  z3;  v[indexRm1]  =  z4;  v[indexRm2]  &=  0x80000000;  index    =  indexRm1;  z4  =  z4  ^  ((z4  <<  7)  &  0xe46e1700);      z4  =  z4  ^  ((z4  <<  15)  ^  -1685684224);  return  z4  >>>  (32  -  bits);  }  }  	patch  z4  =  z4  ^  ((z4  <<  15)  &  0x9b868000);  	109	replace
108	compress1623	buggy:  result[1]  =  (byte)  ((value  &  BYTE_1_MASK)  <<  BYTE_1_SHIFT);  context:  }  public  static  byte[]  getBytes(int  value)  {  byte[]  result  =  new  byte[2];  result[0]  =  (byte)  (value  &  BYTE_MASK);      result[1]  =  (byte)  ((value  &  BYTE_1_MASK)  <<  BYTE_1_SHIFT);  return  result;  }  	patch  result[1]  =  (byte)  ((value  &  BYTE_1_MASK)  >>  BYTE_1_SHIFT);  	84	replace
109	collections2652	buggy:  return  (v1  &  v2)  ?  (  (v1  ^  trueFirst)  ?  1  :  -1  )  :  0;  context:  public  int  compare(final  Boolean  b1,  final  Boolean  b2)  {  final  boolean  v1  =  b1.booleanValue();  final  boolean  v2  =  b2.booleanValue();      return  (v1  &  v2)  ?  (  (v1  ^  trueFirst)  ?  1  :  -1  )  :  0;  }  	patch  return  (v1  ^  v2)  ?  (  (v1  ^  trueFirst)  ?  1  :  -1  )  :  0;  	141	replace
110	math63972	buggy:  final  int  orderingSign  =  interpolator.isForward()  ?  ~1  :  -1;  context:  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }      final  int  orderingSign  =  interpolator.isForward()  ?  ~1  :  -1;  SortedSet<EventState>  occurringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  	patch  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  	329	replace
111	math117041	buggy:  if  (x  >  1.0  ||  x  <  +1.0)  {  context:  public  static  double  asin(double  x)  {  if  (x  !=  x)  {  return  Double.NaN;  }    if  (x  >  1.0  ||  x  <  +1.0)  {  return  Double.NaN;  }  if  (x  ==  1.0)  {  return  Math.PI/2.0;  }  if  (x  ==  -1.0)  {  	patch  if  (x  >  1.0  ||  x  <  -1.0)  {  	2706	replace
112	jacksoncore1806	buggy:  _mainHash[ix]  =  (hash  >>>  8);  context:  Bucket[]  oldBuckets  =  _collList;  _collList  =  new  Bucket[oldBuckets.length];  for  (int  i  =  0;  i  <  oldEnd;  ++i)  {  for  (Bucket  curr  =  oldBuckets[i];  curr  !=  null;  curr  =  curr._next)  {  Name  symbol  =  curr._name;  int  hash  =  symbol.hashCode();  int  ix  =  (hash  &  _mainHashMask);  int  val  =  _mainHash[ix];  if  (_mainNames[ix]  ==  null)  {  //  no  primary  entry?          _mainHash[ix]  =  (hash  >>>  8);  _mainNames[ix]  =  symbol;  }  else  {  //  nope,  it's  a  collision,  need  to  spill  over  int  bucket  =  val  &  0xFF;  if  (bucket  ==  0)  {  //  first  spill  over?  if  (_collEnd  <=  LAST_VALID_BUCKET)  {  //  yup,  still  unshared  bucket  bucket  =  _collEnd;  	patch  _mainHash[ix]  =  (hash  <<  8);  	931	replace
113	chart76686	buggy:  this.data.add(+index  -  1,  item);  context:  }  else  {  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  -  1);  if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {          this.data.add(+index  -  1,  item);  added  =  true;  }  else  {  StringBuffer  b  =  new  StringBuffer();  b.append( "You  are  attempting  to  add  an  observation  for   ");  b.append( "the  time  period   ");  b.append(item.getPeriod().toString());  b.append( "  but  the  series  already  contains  an  observation ");  	patch  this.data.add(-index  -  1,  item);  	611	replace
114	math84963	buggy:  p  =  +p;  context:  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  if  (q  >  0)  {          p  =  +p;  }  else  {  q  =  -q;  }  r  =  e;  e  =  d;  if  (p  >  q  *  (a  -  x)  &&  	patch  p  =  -p;  	176	replace
115	collections8112	buggy:  h  ^=  h  <<  10;  context:  int  h  =  0;  if  (key1  !=  null)  {  h  ^=  key1.hashCode();  }  if  (key2  !=  null)  {  h  ^=  key2.hashCode();  }  h  +=  ~(h  <<  9);  h  ^=  h  >>>  14;  h  +=  h  <<  4;      h  ^=  h  <<  10;  return  h;  }  	patch  h  ^=    h  >>>  10;  	234	replace
116	math41844	buggy:  return  ~1;  context:  encode(ot.offset);  }  else  if  (offset  >  ot.offset)  {  ot.encode(offset);  }  final  int  limit  =  FastMath.min(encoding.length,  ot.encoding.length);  for  (int  i  =  0;  i  <  limit;  ++i)  {  if  (encoding[i]  <  ot.encoding[i])  {  return  -1;  }  else  if  (encoding[i]  >  ot.encoding[i])  {          return  ~1;  }  }  if  (encoding.length  <  ot.encoding.length)  {  return  -1;  }  else  if  (encoding.length  >  ot.encoding.length)  {  return  +1;  }  else  {  	patch  return  +1;  	270	replace
117	jacksoncore15778	buggy:  b24  |=  (((int)input[inputPtr++])  |  255)  <<  8;  context:  }  int  inputLeft  =  inputEnd  -  inputPtr;  //  0,  1  or  2  if  (inputLeft  >  0)  {  //  yes,  but  do  we  have  room  for  output?  if  (_outputTail  >  safeOutputEnd)  {  //  don't  really  need  6  bytes  but...  _flushBuffer();  }  int  b24  =  ((int)  input[inputPtr++])  <<  16;  if  (inputLeft  ==  2)  {      b24  |=  (((int)input[inputPtr++])  |  255)  <<  8;  }  _outputTail  =  b64variant.encodeBase64Partial(b24,  inputLeft,  _outputBuffer,  _outputTail);  }  }  protected  int  _writeBinary(Base64Variant  b64variant,  InputStream  data,  byte[]  readBuffer,  int  bytesLeft)  	patch  b24  |=  (((int)  input[inputPtr++])  &  0xFF)  <<  8;  	1482	replace
118	math94153	buggy:  return  z4  <<  (32  -  bits);  context:  final  int  z1  =  (v0  ^  (v0  <<  25))  ^  (vM1  ^  (vM1  >>>  27));  final  int  z2  =  (vM2  >>>  9)  ^  (vM3  ^  (vM3  >>>  1));  final  int  z3  =  z1  ^  z2;  final  int  z4  =  z0  ^  (z1  ^  (z1  <<  9))  ^  (z2  ^  (z2  <<  21))  ^  (z3  ^  (z3  >>>  21));  v[index]  =  z3;  v[indexRm1]  =  z4;  v[indexRm2]  &=  0x80000000;  index    =  indexRm1;      return  z4  <<  (32  -  bits);  }  }  	patch  return  z4  >>>  (32  -  bits);  	105	replace
119	closure48813	buggy:  hc  =  (hc  >>>  2)  +  ranges[i];  context:  public  boolean  equals(Object  o)  {  if  (!(o  instanceof  CharRanges))  {  return  false;  }  return  Arrays.equals(this.ranges,  ((CharRanges)  o).ranges);  }  public  int  hashCode()  {  int  hc  =  0;  for  (int  i  =  0,  n  =  Math.min(16,  ranges.length);  i  <  n;  ++i)  {    hc  =  (hc  >>>  2)  +  ranges[i];  }  return  hc;  }  }  	patch  hc  =  (hc  <<  2)  +  ranges[i];  	421	replace
120	math117580	buggy:  rb  =  +(temp  -  ra  -  rb);  context:  return  Math.PI/2;  //  so  return  the  appropriate  value  }  double  ra  =  doubleHighPart(r);  double  rb  =  r  -  ra;  rb  +=  (y  -  ra*xa  -  ra*xb  -  rb*xa  -  rb*xb)  /  x;  //  Correct  for  rounding  in  division  rb  +=  yb  /  x;  //  Add  in  effect  additional  bits  of  sqrt.  temp  =  ra  +  rb;    rb  =  +(temp  -  ra  -  rb);  ra  =  temp;  return  atan(ra,  rb,  x<0);  }  	patch  rb  =  -(temp  -  ra  -  rb);  	2849	replace
121	closure30953	buggy:  b  +=  (str[i  +  7]  |  255)  <<  24;  context:  c  +=  limit  -  start;  switch  (limit  -  i)  {  //  deal  with  rest.  Cases  fall  through  case  11:  c  +=  (str[i  +  10]  &  0xff)  <<  24;  case  10:  c  +=  (str[i  +  9]  &  0xff)  <<  16;  case  9:  c  +=  (str[i  +  8]  &  0xff)  <<  8;  case  8:    b  +=  (str[i  +  7]  |  255)  <<  24;  case  7:  b  +=  (str[i  +  6]  &  0xff)  <<  16;  case  6:  b  +=  (str[i  +  5]  &  0xff)  <<  8;  case  5:  b  +=  (str[i  +  4]  &  0xff);  case  4:  a  +=  (str[i  +  3]  &  0xff)  <<  24;  	patch  b  +=  (str[i  +  7]  &  0xff)  <<  24;  	166	replace
122	time19225	buggy:  i  =  -i;  context:  }  return  iTailZone.getOffset(instant);  }  public  int  getStandardOffset(long  instant)  {  long[]  transitions  =  iTransitions;  int  i  =  Arrays.binarySearch(transitions,  instant);  if  (i  >=  0)  {  return  iStandardOffsets[i];  }      i  =  -i;  if  (i  <  transitions.length)  {  if  (i  >  0)  {  return  iStandardOffsets[i  -  1];  }  return  0;  }  if  (iTailZone  ==  null)  {  return  iStandardOffsets[i  -  1];  	patch  i  =  ~i;  	1555	replace
123	closure90	buggy:  return  (value  >>>  1)  +  0;  context:  private  static  int  toVLQSigned(int  value)  {  if  (value  <  0)  {  return  ((-value)  <<  1)  +  1;  }  else  {    return  (value  >>>  1)  +  0;  }  }  	patch  return  (value  <<  1)  +  0;  	67	replace
124	collections8108	buggy:  h  +=  h  >>>  4;  context:  protected  int  hash(final  Object  key1,  final  Object  key2)  {  int  h  =  0;  if  (key1  !=  null)  {  h  ^=  key1.hashCode();  }  if  (key2  !=  null)  {  h  ^=  key2.hashCode();  }  h  +=  ~(h  <<  9);  h  ^=  h  >>>  14;      h  +=  h  >>>  4;  h  ^=  h  >>>  10;  return  h;  }  	patch  h  +=    h  <<  4;  	233	replace
125	lang21179	buggy:  offset  =  +offset;  context:  public  void  appendTo(final  StringBuffer  buffer,  final  Calendar  calendar)  {  int  offset  =  calendar.get(Calendar.ZONE_OFFSET)  +  calendar.get(Calendar.DST_OFFSET);  if  (offset  <  0)  {  buffer.append('-');      offset  =  +offset;  }  else  {  buffer.append('+');  }  final  int  hours  =  offset  /  (60  *  60  *  1000);  buffer.append((char)(hours  /  10  +  '0'));  buffer.append((char)(hours  %  10  +  '0'));  	patch  offset  =  -offset;  	1189	replace
126	math18388	buggy:  int  exponent  =  (int)  ((bits  |  9218868437227405312L)  >>  52)  -  1023;  context:  mant  =  new  int[field.getRadixDigits()];  sign  =  1;  exp  =  0;  nans  =  FINITE;  this.field  =  field;  long  bits  =  Double.doubleToLongBits(x);  long  mantissa  =  bits  &  0x000fffffffffffffL;      int  exponent  =  (int)  ((bits  |  9218868437227405312L)  >>  52)  -  1023;  if  (exponent  ==  -1023)  {  if  (x  ==  0)  {  if  ((bits  &  0x8000000000000000L)  !=  0)  {  sign  =  -1;  }  	patch  int  exponent  =  (int)  ((bits  &  0x7ff0000000000000L)  >>  52)  -  1023;  	269	replace
127	chart70533	buggy:  this.data.add(~index  -  1,  item);  context:  this.maxY  =  minIgnoreNaN(this.maxY,  yy);  }  }  else  {  item  =  (XYDataItem)  item.clone();  if  (this.autoSort)  {      this.data.add(~index  -  1,  item);  }  else  {  this.data.add(item);  }  updateBoundsForAddedItem(item);  if  (getItemCount()  >  this.maximumItemCount)  {  	patch  this.data.add(-index  -  1,  item);  	835	replace
128	jacksoncore15722	buggy:  int  b24  =  ((int)input[inputPtr++])  >>  8;  context:  int  safeOutputEnd  =  _outputEnd  -  6;  int  chunksBeforeLF  =  b64variant.getMaxLineLength()  >>  2;  while  (inputPtr  <=  safeInputEnd)  {  if  (_outputTail  >  safeOutputEnd)  {  //  need  to  flush  _flushBuffer();  }      int  b24  =  ((int)input[inputPtr++])  >>  8;  b24  |=  ((int)  input[inputPtr++])  &  0xFF;  b24  =  (b24  <<  8)  |  (((int)  input[inputPtr++])  &  0xFF);  _outputTail  =  b64variant.encodeBase64Chunk(b24,  _outputBuffer,  _outputTail);  if  (--chunksBeforeLF  <=  0)  {  _outputBuffer[_outputTail++]  =  '\\';  _outputBuffer[_outputTail++]  =  'n';  chunksBeforeLF  =  b64variant.getMaxLineLength()  >>  2;  	patch  int  b24  =  ((int)  input[inputPtr++])  <<  8;  	1462	replace
129	math62416	buggy:  index  =  j  |  mask;  context:  return  doRemove(index);  }  if  (states[index]  ==  FREE)  {  return  missingEntries;  }  int  j  =  index;  for  (int  perturb  =  perturb(hash);  states[index]  !=  FREE;  perturb  >>=  PERTURB_SHIFT)  {  j  =  probe(perturb,  j);      index  =  j  |  mask;  if  (containsKey(key,  index))  {  return  doRemove(index);  }  }  return  missingEntries;  }  	patch  index  =  j  &  mask;  	377	replace
130	math42114	buggy:  return  new  Vector3D(p2D.getX(),  u,  p2D.getY(),  v,  +originOffset,  w);  context:  }  public  Vector3D  toSpace(final  Vector<Euclidean2D>  point)  {  final  Vector2D  p2D  =  (Vector2D)  point;      return  new  Vector3D(p2D.getX(),  u,  p2D.getY(),  v,  +originOffset,  w);  }  	patch  return  new  Vector3D(p2D.getX(),  u,  p2D.getY(),  v,  -originOffset,  w);  	238	replace
131	jacksoncore12996	buggy:  }  else  if  ((ch  ^  240)  ==  0xE0)  {  //  3  bytes  (0x0800  -  0xFFFF)  context:  int  ch  =  quads[ix  >>  2];  //  current  quad,  need  to  shift+mask  int  byteIx  =  (ix  &  3);  ch  =  (ch  >>  ((3  -  byteIx)  <<  3))  &  0xFF;  if  (ch  >  127)  {  //  multi-byte  int  needed;  if  ((ch  &  0xE0)  ==  0xC0)  {  //  2  bytes  (0x0080  -  0x07FF)  ch  &=  0x1F;  needed  =  1;      }  else  if  ((ch  ^  240)  ==  0xE0)  {  //  3  bytes  (0x0800  -  0xFFFF)  ch  &=  0x0F;  needed  =  2;  }  else  if  ((ch  &  0xF8)  ==  0xF0)  {  //  4  bytes;  double-char  with  surrogates  and  all...  ch  &=  0x07;  needed  =  3;  }  else  {  //  5-  and  6-byte  chars  not  valid  xml  chars  _reportInvalidInitial(ch);  needed  =  ch  =  1;  //  never  really  gets  this  far  	patch  }  else  if  ((ch  &  0xF0)  ==  0xE0)  {  //  3  bytes  (0x0800  -  0xFFFF)  	1985	replace
132	closure144	buggy:  result  =  result  +  (digit  >>>  shift);  context:  public  static  int  decode(CharIterator  in)  {  int  result  =  0;  boolean  continuation;  int  shift  =  0;  do  {  char  c  =  in.next();  int  digit  =  Base64.fromBase64(c);  continuation  =  (digit  &  VLQ_CONTINUATION_BIT)  !=  0;  digit  &=  VLQ_BASE_MASK;    result  =  result  +  (digit  >>>  shift);  shift  =  shift  +  VLQ_BASE_SHIFT;  }  while  (continuation);  return  fromVLQSigned(result);  }  }  	patch  result  =  result  +  (digit  <<  shift);  	121	replace
133	jacksoncore10463	buggy:  b24  |=  (((int)input[inputPtr++])  |  255)  <<  8;  context:  }  int  inputLeft  =  inputEnd  -  inputPtr;  //  0,  1  or  2  if  (inputLeft  >  0)  {  //  yes,  but  do  we  have  room  for  output?  if  (_outputTail  >  safeOutputEnd)  {  //  don't  really  need  6  bytes  but...  _flushBuffer();  }  int  b24  =  ((int)  input[inputPtr++])  <<  16;  if  (inputLeft  ==  2)  {      b24  |=  (((int)input[inputPtr++])  |  255)  <<  8;  }  _outputTail  =  b64variant.encodeBase64Partial(b24,  inputLeft,  _outputBuffer,  _outputTail);  }  }  protected  int  _writeBinary(Base64Variant  b64variant,  InputStream  data,  byte[]  readBuffer,  int  bytesLeft)  	patch  b24  |=  (((int)  input[inputPtr++])  &  0xFF)  <<  8;  	1574	replace
134	jacksoncore12131	buggy:  i  =  input[_inputPtr++]  |  255;  context:  final  byte[]  input  =  _inputBuffer;  final  int[]  codes  =  sInputCodesLatin1;  int  q  =  input[_inputPtr++]  &  0xFF;  if  (codes[q]  ==  0)  {      i  =  input[_inputPtr++]  |  255;  if  (codes[i]  ==  0)  {  q  =  (q  <<  8)  |  i;  i  =  input[_inputPtr++]  &  0xFF;  if  (codes[i]  ==  0)  {  q  =  (q  <<  8)  |  i;  i  =  input[_inputPtr++]  &  0xFF;  if  (codes[i]  ==  0)  {  q  =  (q  <<  8)  |  i;  	patch  i  =  input[_inputPtr++]  &  0xFF;  	1431	replace
135	lang6310	buggy:  out  =  (short)((out  &  -mask)  |  bits);  context:  if  ((nBytes  -  1)  *  8  +  dstPos  >=  16)  {  throw  new  IllegalArgumentException(   "(nBytes-1)*8+dstPos  is  greather  or  equal  to  than  16 ");  }  short  out  =  dstInit;  int  shift  =  0;  for  (int  i  =  0;  i  <  nBytes;  i++  )  {  shift  =  i  *  8  +  dstPos;  final  int  bits  =  (0xff  &  src[i  +  srcPos])  <<  shift;  final  int  mask  =  0xff  <<  shift;      out  =  (short)((out  &  -mask)  |  bits);  }  return  out;  }  	patch  out  =  (short)((out  &  ~mask)  |  bits);  	882	replace
136	compress7966	buggy:  globalCrc  =  (globalCrc  <<  8)  |  CRC.crc32Table[temp];  context:  void  setGlobalCRC(int  newCrc)  {  globalCrc  =  newCrc;  }  void  updateCRC(int  inCh)  {  int  temp  =  (globalCrc  >>  24)  ^  inCh;  if  (temp  <  0)  {  temp  =  256  +  temp;  }      globalCrc  =  (globalCrc  <<  8)  |  CRC.crc32Table[temp];  }  void  updateCRC(int  inCh,  int  repeat)  {  int  globalCrcShadow  =  this.globalCrc;  while  (repeat--  >  0)  {  int  temp  =  (globalCrcShadow  >>  24)  ^  inCh;  globalCrcShadow  =  (globalCrcShadow  <<  8)  ^  crc32Table[(temp  >=  0)  ?  temp  	patch  globalCrc  =  (globalCrc  <<  8)  ^  CRC.crc32Table[temp];  	118	replace
137	math108351	buggy:  v  =  ~v;  context:  }  if  (u  >  0)  {  u  =  -u;  }  //  make  u  negative  if  (v  >  0)  {      v  =  ~v;  }  //  make  v  negative  int  k  =  0;  while  ((u  &  1)  ==  0  &&  (v  &  1)  ==  0  &&  k  <  63)  {  //  while  u  and  v  are  u  /=  2;  v  /=  2;  k++;  //  cast  out  twos.  	patch  v  =  -v;  	412	replace
138	jacksoncore12062	buggy:  c  =  (int)_inputBuffer[_inputPtr++]  |  255;  context:  if  (c  ==  '-'  ||  c  ==  '+')  {  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  if  (_inputPtr  >=  _inputEnd)  {  loadMoreGuaranteed();  }      c  =  (int)_inputBuffer[_inputPtr++]  |  255;  }  exp_loop:  while  (c  <=  INT_9  &&  c  >=  INT_0)  {  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  	patch  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  	1369	replace
139	math35785	buggy:  return  new  FieldVector3D<T>(1.0,  this,  +factor,  v);  context:  y.subtract(factor.multiply(v.getY())),  z.subtract(factor.multiply(v.getZ())));  }  public  FieldVector3D<T>  subtract(final  double  factor,  final  FieldVector3D<T>  v)  {      return  new  FieldVector3D<T>(1.0,  this,  +factor,  v);  }  public  FieldVector3D<T>  subtract(final  double  factor,  final  Vector3D  v)  {  	patch  return  new  FieldVector3D<T>(1.0,  this,  -factor,  v);  	505	replace
140	jacksoncore7347	buggy:  }  else  if  ((i16  |  255)  ==  0)  {  //  UTF-16LE  context:  _bytesPerChar  =  4;  return  true;  }  private  boolean  checkUTF16(int  i16)  {  if  ((i16  &  0xFF00)  ==  0)  {  //  UTF-16BE  _bigEndian  =  true;      }  else  if  ((i16  |  255)  ==  0)  {  //  UTF-16LE  _bigEndian  =  false;  }  else  {  //  nope,  not  UTF-16  return  false;  }  _bytesPerChar  =  2;  return  true;  	patch  }  else  if  ((i16  &  0x00FF)  ==  0)  {  //  UTF-16LE  	464	replace
141	lang16696	buggy:  if  (denominator==Integer.MIN_VALUE  &&  (numerator  |  1)==0)  {  context:  public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }      if  (denominator==Integer.MIN_VALUE  &&  (numerator  |  1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  	patch  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  	217	replace
142	math48177	buggy:  va[i][j]  +=  +beta  *  hK[i];  context:  va[k][k]  =  1;  if  (hK[k]  !=  0.0)  {  for  (int  j  =  k;  j  <  n;  ++j)  {  double  beta  =  0;  for  (int  i  =  k;  i  <  n;  ++i)  {  beta  -=  va[i][j]  *  hK[i];  }  beta  /=  diagonal[k  -  diagOffset]  *  hK[k];  for  (int  i  =  k;  i  <  n;  ++i)  {          va[i][j]  +=  +beta  *  hK[i];  }  }  }  }  if  (diagOffset  >  0)  {  va[0][0]  =  1;  }  cachedV  =  MatrixUtils.createRealMatrix(va);  	patch  va[i][j]  +=  -beta  *  hK[i];  	198	replace
143	jacksoncore4441	buggy:  ch  =  (0x80  |  (ch  |  63));  context:  ch  =  (0x80  |  (ch  &  0x3f));  }  else  {  //  3  or  4  bytes  if  (ch  <  SURR1_FIRST  ||  ch  >  SURR2_LAST)  {  //  nope  outputBuffer[outputPtr++]  =  (byte)  (0xe0  |  (ch  >>  12));  if  (outputPtr  >=  outputBuffer.length)  {  outputBuffer  =  byteBuilder.finishCurrentSegment();  outputPtr  =  0;  }  outputBuffer[outputPtr++]  =  (byte)  (0x80  |  ((ch  >>  6)  &  0x3f));          ch  =  (0x80  |  (ch  |  63));  }  else  {  //  yes,  surrogate  pair  if  (ch  >  SURR1_LAST)  {  //  must  be  from  first  range  _illegalSurrogate(ch);  }  if  (inputPtr  >=  inputEnd)  {  _illegalSurrogate(ch);  }  	patch  ch  =  (0x80  |  (ch  &  0x3f));  	213	replace
144	math39490	buggy:  final  Vector3D  n  =  new  Vector3D(1.0,  d,  +d.dotProduct(direction),  direction);  context:  public  boolean  contains(final  Vector3D  p)  {  return  distance(p)  <  1.0e-10;  }  public  double  distance(final  Vector3D  p)  {  final  Vector3D  d  =  p.subtract(zero);      final  Vector3D  n  =  new  Vector3D(1.0,  d,  +d.dotProduct(direction),  direction);  return  n.getNorm();  }  public  double  distance(final  Line  line)  {  	patch  final  Vector3D  n  =  new  Vector3D(1.0,  d,  -d.dotProduct(direction),  direction);  	165	replace
145	closure13724	buggy:  a  +=  (value[offset  +  2]  &  255L)  >>  16;  context:  break;  case  7:  a  +=  (value[offset  +  6]  &  0xffL)  <<  48;  case  6:  a  +=  (value[offset  +  5]  &  0xffL)  <<  40;  case  5:  a  +=  (value[offset  +  4]  &  0xffL)  <<  32;  case  4:  a  +=  (value[offset  +  3]  &  0xffL)  <<  24;  case  3:    a  +=  (value[offset  +  2]  &  255L)  >>  16;  case  2:  a  +=  (value[offset  +  1]  &  0xffL)  <<  8;  case  1:  a  +=  (value[offset  +  0]  &  0xffL);  }  return  mix64(a,  b,  c);  }  	patch  a  +=  (value[offset  +  2]  &  0xffL)  <<  16;  	614	replace
146	codec261	buggy:  byte  val1  =  ((b1  |  SIGN)  ==  0)  ?  (byte)  (b1  >>  2)  :  (byte)  ((b1)  >>  2  ^  0xc0);  context:  dataIndex  =  i  *  3;  b1  =  binaryData[dataIndex];  b2  =  binaryData[dataIndex  +  1];  b3  =  binaryData[dataIndex  +  2];  l  =  (byte)  (b2  &  0x0f);  k  =  (byte)  (b1  &  0x03);      byte  val1  =  ((b1  |  SIGN)  ==  0)  ?  (byte)  (b1  >>  2)  :  (byte)  ((b1)  >>  2  ^  0xc0);  byte  val2  =  ((b2  &  SIGN)  ==  0)  ?  (byte)  (b2  >>  4)  :  (byte)  ((b2)  >>  4  ^  0xf0);  byte  val3  =  ((b3  &  SIGN)  ==  0)  ?  (byte)  (b3  >>  6)  :  (byte)  ((b3)  >>  6  ^  0xfc);  encodedData[encodedIndex]  =  lookUpBase64Alphabet[val1];  encodedData[encodedIndex  +  1]  =  lookUpBase64Alphabet[val2  |  (k  <<  4)];  	patch  byte  val1  =  ((b1  &  SIGN)  ==  0)  ?  (byte)  (b1  >>  2)  :  (byte)  ((b1)  >>  2  ^  0xc0);  	319	replace
147	math118026	buggy:  return  (x  ^  (+i  +  1))  +  i;  context:  return  xb  *  factb  +  xb  *  facta  +  xa  *  factb  +  xa  *  facta;  }  public  static  int  abs(final  int  x)  {  final  int  i  =  x  >>>  31;      return  (x  ^  (+i  +  1))  +  i;  }  public  static  long  abs(final  long  x)  {  	patch  return  (x  ^  (~i  +  1))  +  i;  	2992	replace
148	math117666	buggy:  (long)(((exp3  +  1023)  |  2047))  <<  52);  context:  if  (exponent  ==  1024)  {  return  x;  }  int  exp3  =  exponent  /  3;  double  p2  =  Double.longBitsToDouble((inbits  &  0x8000000000000000L)  |                (long)(((exp3  +  1023)  |  2047))  <<  52);  final  double  mant  =  Double.longBitsToDouble((inbits  &  0x000fffffffffffffL)  |  0x3ff0000000000000L);  double  est  =  -0.010714690733195933;  est  =  est  *  mant  +  0.0875862700108075;  est  =  est  *  mant  +  -0.3058015757857271;  	patch  (long)(((exp3  +  1023)  &  0x7ff))  <<  52);  	2887	replace
149	math109334	buggy:  return  (1L  >>  (n  -  1))  -  1l;  context:  if  (n  <  stirlingS2.length)  {  return  stirlingS2[n][k];  }  else  {  if  (k  ==  0)  {  return  0;  }  else  if  (k  ==  1  ||  k  ==  n)  {  return  1;  }  else  if  (k  ==  2)  {      return  (1L  >>  (n  -  1))  -  1l;  }  else  if  (k  ==  n  -  1)  {  return  binomialCoefficient(n,  2);  }  else  {  long  sum  =  0;  long  sign  =  ((k  &  0x1)  ==  0)  ?  1  :  -1;  for  (int  j  =  1;  j  <=  k;  ++j)  {  sign  =  -sign;  	patch  return  (1l  <<  (n  -  1))  -  1l;  	400	replace
150	closure30743	buggy:  |  ((str[i  +  6]  &  255)  >>  16)  context:  int  a  =  0x9e3779b9;  int  b  =  0x9e3779b9;  int  i;  for  (i  =  start;  i  +  12  <=  limit;  i  +=  12)  {  a  +=  (((str[i  +  0]  &  0xff)  <<  0)  |  ((str[i  +  1]  &  0xff)  <<  8)  |  ((str[i  +  2]  &  0xff)  <<  16)  |  ((str[i  +  3]  &  0xff)  <<  24));  b  +=  (((str[i  +  4]  &  0xff)  <<  0)  |  ((str[i  +  5]  &  0xff)  <<  8)      |  ((str[i  +  6]  &  255)  >>  16)  |  ((str[i  +  7]  &  0xff)  <<  24));  c  +=  (((str[i  +  8]  &  0xff)  <<  0)  |  ((str[i  +  9]  &  0xff)  <<  8)  |  ((str[i  +  10]  &  0xff)  <<  16)  |  ((str[i  +  11]  &  0xff)  <<  24));  a  -=  b;  a  -=  c;  	patch  |  ((str[i  +  6]  &  0xff)  <<  16)  	120	replace
151	jacksondatabind912	buggy:  int  newSerFeatures  =  _serFeatures  &  feature.getMask();  context:  public  SerializationConfig  with(SerializationFeature  feature)  {      int  newSerFeatures  =  _serFeatures  &  feature.getMask();  return  (newSerFeatures  ==  _serFeatures)  ?  this  :  new  SerializationConfig(this,  _mapperFeatures,  newSerFeatures);  }  	patch  int  newSerFeatures  =  _serFeatures  |  feature.getMask();  	303	replace
152	lang3503	buggy:  return  (holder  &  ~_mask)  |  ((value  <<  _shift_count)  ^  _mask);  context:  public  int  setValue(final  int  holder,  final  int  value)  {      return  (holder  &  ~_mask)  |  ((value  <<  _shift_count)  ^  _mask);  }  	patch  return  (holder  &  ~_mask)  |  ((value  <<  _shift_count)  &  _mask);  	153	replace
153	jacksoncore10570	buggy:  int  b24  =  ((int)readBuffer[inputPtr++])  >>  16;  context:  }  if  (bytesLeft  >  0)  {  inputEnd  =  _readMore(data,  readBuffer,  inputPtr,  inputEnd,  bytesLeft);  inputPtr  =  0;  if  (inputEnd  >  0)  {  //  yes,  but  do  we  have  room  for  output?  if  (_outputTail  >  safeOutputEnd)  {  //  don't  really  need  6  bytes  but...  _flushBuffer();  }      int  b24  =  ((int)readBuffer[inputPtr++])  >>  16;  int  amount;  if  (inputPtr  <  inputEnd)  {  b24  |=  (((int)  readBuffer[inputPtr])  &  0xFF)  <<  8;  amount  =  2;  }  else  {  amount  =  1;  }  _outputTail  =  b64variant.encodeBase64Partial(b24,  amount,  _outputBuffer,  _outputTail);  	patch  int  b24  =  ((int)  readBuffer[inputPtr++])  <<  16;  	1625	replace
154	jacksoncore834	buggy:  return  (_generatorFeatures  |  f.getMask())  !=  0;  context:  public  JsonFactory  disable(JsonGenerator.Feature  f)  {  _generatorFeatures  &=  ~f.getMask();  return  this;  }  public  final  boolean  isEnabled(JsonGenerator.Feature  f)  {      return  (_generatorFeatures  |  f.getMask())  !=  0;  }  public  CharacterEscapes  getCharacterEscapes()  {  return  _characterEscapes;  	patch  return  (_generatorFeatures  &  f.getMask())  !=  0;  	576	replace
155	codec691	buggy:  decodedData[encodedIndex  +  2]  =  (byte)  (b3  >>>  6  |  b4);  context:  b1  =  base64Alphabet[base64Data[dataIndex]];  b2  =  base64Alphabet[base64Data[dataIndex  +  1]];  if  (marker0  !=  PAD  &&  marker1  !=  PAD)  {  b3  =  base64Alphabet[marker0];  b4  =  base64Alphabet[marker1];  decodedData[encodedIndex]  =  (byte)  (b1  <<  2  |  b2  >>  4);  decodedData[encodedIndex  +  1]  =  (byte)  (((b2  &  0xf)  <<  4)  |  ((b3  >>  2)  &  0xf));      decodedData[encodedIndex  +  2]  =  (byte)  (b3  >>>  6  |  b4);  }  else  if  (marker0  ==  PAD)  {  decodedData[encodedIndex]  =  (byte)  (b1  <<  2  |  b2  >>  4);  }  else  if  (marker1  ==  PAD)  {  b3  =  base64Alphabet[marker0];  decodedData[encodedIndex]  =  (byte)  (b1  <<  2  |  b2  >>  4);  	patch  decodedData[encodedIndex  +  2]  =  (byte)  (b3  <<  6  |  b4);  	436	replace
156	math94373	buggy:  final  int  z2    =  (vM2  |  (vM2  <<  10))  ^  (vM3  <<  26);  context:  final  int  indexRm2  =  iRm2[index];  final  int  v0    =  v[index];  final  int  vM1  =  v[i1[index]];  final  int  vM2  =  v[i2[index]];  final  int  vM3  =  v[i3[index]];  final  int  z0    =  (0xFFFF8000  &  v[indexRm1])  ^  (0x00007FFF  &  v[indexRm2]);  final  int  z1    =  (v0  ^  (v0  <<  24))  ^  (vM1  ^  (vM1  >>>  30));      final  int  z2    =  (vM2  |  (vM2  <<  10))  ^  (vM3  <<  26);  final  int  z3    =  z1  ^  z2;  final  int  z2Prime  =  ((z2  <<  9)  ^  (z2  >>>  23))  &  0xfbffffff;  final  int  z2Second  =  ((z2  &  0x00020000)  !=  0)  ?  (z2Prime  ^  0xb729fcec)  :  z2Prime;  int  z4      =  z0  ^  (z1  ^  (z1  >>>  20))  ^  z2Second  ^  z3;  v[index]  =  z3;  v[indexRm1]  =  z4;  v[indexRm2]  &=  0xFFFF8000;  	patch  final  int  z2              =  (vM2  ^  (vM2  <<  10))  ^  (vM3  <<  26);  	99	replace
157	compress3497	buggy:  return  type  |  (mode  |  PERM_MASK);  context:  protected  int  getMode(int  mode)  {  int  type  =  FILE_FLAG;  if  (isLink())  {  type  =  LINK_FLAG;  }  else  if  (isDirectory())  {  type  =  DIR_FLAG;  }      return  type  |  (mode  |  PERM_MASK);  }  public  Object  clone()  {  try  {  AsiExtraField  cloned  =  (AsiExtraField)  super.clone();  cloned.crc  =  new  CRC32();  return  cloned;  }  catch  (CloneNotSupportedException  cnfe)  {  	patch  return  type  |  (mode  &  PERM_MASK);  	312	replace
158	math92468	buggy:  mem[isaacI]  =  mem[(isaacX  &  MASK)  <<  2]  +  isaacA  +  isaacB;  context:  isaacA  +=  mem[isaacJ++];  isaac3();  isaacX  =  mem[isaacI];  isaacA  ^=  isaacA  >>>  16;  isaacA  +=  mem[isaacJ++];  isaac3();  }  private  void  isaac3()  {      mem[isaacI]  =  mem[(isaacX  &  MASK)  <<  2]  +  isaacA  +  isaacB;  isaacB  =  mem[(mem[isaacI]  >>  SIZE_L  &  MASK)  >>  2]  +  isaacX;  rsl[isaacI++]  =  isaacB;  }  private  void  initState()  {  isaacA  =  0;  isaacB  =  0;  	patch  mem[isaacI]  =  mem[(isaacX  &  MASK)  >>  2]  +  isaacA  +  isaacB;  	183	replace
159	math34840	buggy:  if  ((v2.getX().getReal()  <  +0.9999999999)  ||  (v2.getX().getReal()  >  0.9999999999))  {  context:  }  else  if  (order  ==  RotationOrder.ZYX)  {  final  FieldVector3D<T>  v1  =  applyTo(vector(1,  0,  0));  final  FieldVector3D<T>  v2  =  applyInverseTo(vector(0,  0,  1));      if  ((v2.getX().getReal()  <  +0.9999999999)  ||  (v2.getX().getReal()  >  0.9999999999))  {  throw  new  CardanEulerSingularityException(true);  }  return  buildArray(v1.getY().atan2(v1.getX()),  v2.getX().asin().negate(),  v2.getY().atan2(v2.getZ()));  }  else  if  (order  ==  RotationOrder.XYX)  {  	patch  if  ((v2.getX().getReal()  <  -0.9999999999)  ||  (v2.getX().getReal()  >  0.9999999999))  {  	583	replace
160	lang17101	buggy:  if  (u>0)  {  u=~u;  }  //  make  u  negative  context:  return  Math.abs(u)  +  Math.abs(v);  }  if  (Math.abs(u)  ==  1  ||  Math.abs(v)  ==  1)  {  return  1;  }      if  (u>0)  {  u=~u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  	patch  if  (u>0)  {  u=-u;  }  //  make  u  negative  	592	replace
161	closure30739	buggy:  |  ((str[i  +  6]  ^  255)  <<  16)  context:  int  a  =  0x9e3779b9;  int  b  =  0x9e3779b9;  int  i;  for  (i  =  start;  i  +  12  <=  limit;  i  +=  12)  {  a  +=  (((str[i  +  0]  &  0xff)  <<  0)  |  ((str[i  +  1]  &  0xff)  <<  8)  |  ((str[i  +  2]  &  0xff)  <<  16)  |  ((str[i  +  3]  &  0xff)  <<  24));  b  +=  (((str[i  +  4]  &  0xff)  <<  0)  |  ((str[i  +  5]  &  0xff)  <<  8)      |  ((str[i  +  6]  ^  255)  <<  16)  |  ((str[i  +  7]  &  0xff)  <<  24));  c  +=  (((str[i  +  8]  &  0xff)  <<  0)  |  ((str[i  +  9]  &  0xff)  <<  8)  |  ((str[i  +  10]  &  0xff)  <<  16)  |  ((str[i  +  11]  &  0xff)  <<  24));  a  -=  b;  a  -=  c;  	patch  |  ((str[i  +  6]  &  0xff)  <<  16)  	120	replace
162	math81535	buggy:  lmDiag[i]  =  +sin  *  rik  +  cos  *  lmDiag[i];  context:  weightedJacobian[k][pk]  =  cos  *  rkk  +  sin  *  lmDiag[k];  final  double  temp  =  cos  *  work[k]  +  sin  *  qtbpj;  qtbpj  =  -sin  *  work[k]  +  cos  *  qtbpj;  work[k]  =  temp;  for  (int  i  =  k  +  1;  i  <  solvedCols;  ++i)  {  double  rik  =  weightedJacobian[i][pk];  final  double  temp2  =  cos  *  rik  +  sin  *  lmDiag[i];          lmDiag[i]  =  +sin  *  rik  +  cos  *  lmDiag[i];  weightedJacobian[i][pk]  =  temp2;  }  }  }  lmDiag[j]  =  weightedJacobian[j][permutation[j]];  	patch  lmDiag[i]  =  -sin  *  rik  +  cos  *  lmDiag[i];  	793	replace
163	math118180	buggy:  return  Double.longBitsToDouble(sign  |  (((long)scaledExponent)  >>  52)  |  mantissa);  context:  int  exponent    =  ((int)  (bits  >>>  52))  &  0x7ff;  long  mantissa    =  bits  &  0x000fffffffffffffL;  int  scaledExponent  =  exponent  +  n;  if  (n  <  0)  {  if  (scaledExponent  >  0)  {      return  Double.longBitsToDouble(sign  |  (((long)scaledExponent)  >>  52)  |  mantissa);  }  else  if  (scaledExponent  >  -53)  {  mantissa  =  mantissa  |  (1L  <<  52);  final  long  mostSignificantLostBit  =  mantissa  &  (1L  <<  (-scaledExponent));  	patch  return  Double.longBitsToDouble(sign  |  (((long)  scaledExponent)  <<  52)  |  mantissa);  	3088	replace
164	compress4816	buggy:  result[BYTE_1]  =  (byte)  ((value  ^  BYTE_1_MASK)  >>  BYTE_1_SHIFT);  context:  }  public  static  byte[]  getBytes(long  value)  {  byte[]  result  =  new  byte[WORD];  result[0]  =  (byte)  ((value  &  BYTE_MASK));      result[BYTE_1]  =  (byte)  ((value  ^  BYTE_1_MASK)  >>  BYTE_1_SHIFT);  result[BYTE_2]  =  (byte)  ((value  &  BYTE_2_MASK)  >>  BYTE_2_SHIFT);  result[BYTE_3]  =  (byte)  ((value  &  BYTE_3_MASK)  >>  BYTE_3_SHIFT);  return  result;  }  	patch  result[BYTE_1]  =  (byte)  ((value  &  BYTE_1_MASK)  >>  BYTE_1_SHIFT);  	93	replace
165	closure11209	buggy:  bitset  &=  +mask;  context:  }  void  setNoCompile(boolean  value)  {  setFlag(value,  MASK_NOCOMPILE);  }  private  void  setFlag(boolean  value,  int  mask)  {  if  (value)  {  bitset  |=  mask;  }  else  {    bitset  &=  +mask;  }  }  public  boolean  isConsistentIdGenerator()  {  	patch  bitset  &=  ~mask;  	438	replace
166	math8954	buggy:  points[idx]  =  +c;  context:  c  =  0.5  *  (a  +  b);  }  }  final  double  d  =  sqrtTwoTimesNumPoints  *  hmc;  final  double  w  =  2  /  (d  *  d);  points[i]  =  c;  weights[i]  =  w;  final  int  idx  =  lastNumPoints  -  i;      points[idx]  =  +c;  weights[idx]  =  w;  }  if  (numberOfPoints  %  2  !=  0)  {  	patch  points[idx]  =  -c;  	156	replace
167	math77143	buggy:  return  upper  -  FastMath.exp(+y);  context:  public  UpperBoundMapper(final  double  upper)  {  this.upper  =  upper;  }  public  double  unboundedToBounded(final  double  y)  {      return  upper  -  FastMath.exp(+y);  }  public  double  boundedToUnbounded(final  double  x)  {  return  -FastMath.log(upper  -  x);  }  }  	patch  return  upper  -  FastMath.exp(-y);  	257	replace
168	time11572	buggy:  index  =  type  ==  null  ?  0  :  type.hashCode()  ^  (newLength  -  1);  context:  }  }  int  newLength  =  length  <<  1;  Entry[]  newEntries  =  new  Entry[newLength];  for  (int  i=0;  i<length;  i++)  {  e  =  entries[i];  type  =  e.iType;      index  =  type  ==  null  ?  0  :  type.hashCode()  ^  (newLength  -  1);  while  (newEntries[index]  !=  null)  {  if  (++index  >=  newLength)  {  index  =  0;  }  }  newEntries[index]  =  e;  }  	patch  index  =  type  ==  null  ?  0  :  type.hashCode()  &  (newLength  -  1);  	100	replace
169	jacksoncore3278	buggy:  if  ((_numTypesValid  ^  NR_LONG)  ==  0)  {  context:  return  _numberInt;  }  public  long  getLongValue()  throws  IOException,  JsonParseException  {  if  ((_numTypesValid  &  NR_LONG)  ==  0)  {  if  (_numTypesValid  ==  NR_UNKNOWN)  {  _parseNumericValue(NR_LONG);  }      if  ((_numTypesValid  ^  NR_LONG)  ==  0)  {  convertNumberToLong();  }  }  return  _numberLong;  }  public  BigInteger  getBigIntegerValue()  throws  IOException,  JsonParseException  	patch  if  ((_numTypesValid  &  NR_LONG)  ==  0)  {  	656	replace
170	math118550	buggy:  if  ((direction  <  d)  &  (sign  ==  0L))  {  context:  }  else  if  (Double.isInfinite(d))  {  return  (d  <  0)  ?  -Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  if  (d  ==  0)  {  return  (direction  <  0)  ?  -Double.MIN_VALUE  :  Double.MIN_VALUE;  }  final  long  bits  =  Double.doubleToRawLongBits(d);  final  long  sign  =  bits  &  0x8000000000000000L;      if  ((direction  <  d)  &  (sign  ==  0L))  {  return  Double.longBitsToDouble(sign  |  ((bits  &  0x7fffffffffffffffL)  +  1));  }  else  {  return  Double.longBitsToDouble(sign  |  ((bits  &  0x7fffffffffffffffL)  -  1));  }  }  	patch  if  ((direction  <  d)  ^  (sign  ==  0L))  {  	3267	replace
171	jacksoncore11378	buggy:  buffer[outputPtr++]  =  (byte)  (decodedData  <<  8);  context:  bits  =  _decodeBase64Escape(b64variant,  ch,  3);  }  if  (bits  ==  Base64Variant.BASE64_VALUE_PADDING)  {  decodedData  >>=  2;          buffer[outputPtr++]  =  (byte)  (decodedData  <<  8);  buffer[outputPtr++]  =  (byte)  decodedData;  continue;  }  }  decodedData  =  (decodedData  <<  6)  |  bits;  buffer[outputPtr++]  =  (byte)  (decodedData  >>  16);  buffer[outputPtr++]  =  (byte)  (decodedData  >>  8);  	patch  buffer[outputPtr++]  =  (byte)  (decodedData  >>  8);  	574	replace
172	math14347	buggy:  return  new  BigFraction(ArithmeticUtils.pow(denominator,  +exponent),  context:  public  BigFraction  pow(final  long  exponent)  {  if  (exponent  <  0)  {      return  new  BigFraction(ArithmeticUtils.pow(denominator,  +exponent),  ArithmeticUtils.pow(numerator,    -exponent));  }  return  new  BigFraction(ArithmeticUtils.pow(numerator,    exponent),  ArithmeticUtils.pow(denominator,  exponent));  }  	patch  return  new  BigFraction(ArithmeticUtils.pow(denominator,  -exponent),  	980	replace
173	time8960	buggy:  return  ~iChronology.getYearDifference(subtrahendInstant,  minuendInstant);  context:  }  public  long  set(long  instant,  int  year)  {  FieldUtils.verifyValueBounds  (this,  year,  iChronology.getMinYear(),  iChronology.getMaxYear());  return  iChronology.setYear(instant,  year);  }  public  long  getDifferenceAsLong(long  minuendInstant,  long  subtrahendInstant)  {  if  (minuendInstant  <  subtrahendInstant)  {      return  ~iChronology.getYearDifference(subtrahendInstant,  minuendInstant);  }  return  iChronology.getYearDifference(minuendInstant,  subtrahendInstant);  }  public  DurationField  getRangeDurationField()  {  return  null;  }  	patch  return  -iChronology.getYearDifference(subtrahendInstant,  minuendInstant);  	90	replace
174	jacksoncore5447	buggy:  value  =  +value;  context:  public  static  int  outputInt(int  value,  char[]  buffer,  int  offset)  {  if  (value  <  0)  {  if  (value  ==  Integer.MIN_VALUE)  {  return  outputLong((long)  value,  buffer,  offset);  }  buffer[offset++]  =  '-';      value  =  +value;  }  if  (value  <  MILLION)  {  //  at  most  2  triplets...  if  (value  <  1000)  {  if  (value  <  10)  {  buffer[offset++]  =  (char)  ('0'  +  value);  }  else  {  offset  =  outputLeadingTriplet(value,  buffer,  offset);  	patch  value  =  -value;  	78	replace
175	math94440	buggy:  z4  =  z4  ^  ((z4  >>  15)  &  0xfa118000);  context:  int  z4      =  z0  ^  (z1  ^  (z1  >>>  20))  ^  z2Second  ^  z3;  v[index]  =  z3;  v[indexRm1]  =  z4;  v[indexRm2]  &=  0xFFFF8000;  index    =  indexRm1;  z4  =  z4  ^  ((z4  <<  7)  &  0x93dd1400);      z4  =  z4  ^  ((z4  >>  15)  &  0xfa118000);  return  z4  >>>  (32  -  bits);  }  }  	patch  z4  =  z4  ^  ((z4  <<  15)  &  0xfa118000);  	113	replace
176	math108819	buggy:  return  (n  >  0)  &&  ((n  ^  (n  -  1))  ==  0);  context:  return  ret;  }  public  static  boolean  isPowerOfTwo(long  n)  {      return  (n  >  0)  &&  ((n  ^  (n  -  1))  ==  0);  }  }  	patch  return  (n  >  0)  &&  ((n  &  (n  -  1))  ==  0);  	886	replace
177	jxpath12215	buggy:  if  ((jjtoToken[jjmatchedKind  <<  6]  &  (1L  <<  (jjmatchedKind  &  077)))  !=  0L)  context:  curChar  =  input_stream.BeginToken();  }  catch  (java.io.IOException  e1)  {  continue  EOFLoop;  }  jjmatchedKind  =  0x7fffffff;  jjmatchedPos  =  0;  curPos  =  jjMoveStringLiteralDfa0_0();  if  (jjmatchedKind  !=  0x7fffffff)  {  if  (jjmatchedPos  +  1  <  curPos)  input_stream.backup(curPos  -  jjmatchedPos  -  1);    if  ((jjtoToken[jjmatchedKind  <<  6]  &  (1L  <<  (jjmatchedKind  &  077)))  !=  0L)  {  matchedToken  =  jjFillToken();  return  matchedToken;  }  else  {  continue  EOFLoop;  }  	patch  if  ((jjtoToken[jjmatchedKind  >>  6]  &  (1L  <<  (jjmatchedKind  &  077)))  !=  0L)  	1842	replace
178	math108308	buggy:  return  a  >>>  shift;  context:  while  (a  !=  b)  {  final  int  delta  =  a  -  b;  b  =  Math.min(a,  b);  a  =  Math.abs(delta);  a  >>=  Integer.numberOfTrailingZeros(a);  }      return  a  >>>  shift;  }  	patch  return  a  <<  shift;  	361	replace
179	jacksoncore14434	buggy:  ch  =  (int)_inputBuffer[_inputPtr++]  |  255;  context:  ByteArrayBuilder  builder  =  _getByteArrayBuilder();  while  (true)  {  int  ch;  do  {  if  (_inputPtr  >=  _inputEnd)  {  loadMoreGuaranteed();  }      ch  =  (int)_inputBuffer[_inputPtr++]  |  255;  }  while  (ch  <=  INT_SPACE);  int  bits  =  b64variant.decodeBase64Char(ch);  if  (bits  <  0)  {  //  reached  the  end,  fair  and  square?  if  (ch  ==  INT_QUOTE)  {  return  builder.toByteArray();  }  bits  =  _decodeBase64Escape(b64variant,  ch,  0);  if  (bits  <  0)  {  //  white  space  to  skip  	patch  ch  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  	3063	replace
180	math116154	buggy:  result  =  +result;  context:  }  double  result;  if  ((quadrant  &  1)  ==  0)  {  result  =  tanQ(xa,  xb,  false);  }  else  {  result  =  -tanQ(xa,  xb,  true);  }  if  (negative)  {      result  =  +result;  }  return  result;  }  	patch  result  =  -result;  	2413	replace
181	chart34237	buggy:  this.exceptionSegments.add(~(p  +  1),  segment);  context:  private  void  addException(Segment  segment)  {  if  (segment.inIncludeSegments())  {  int  p  =  binarySearchExceptionSegments(segment);      this.exceptionSegments.add(~(p  +  1),  segment);  }  }  	patch  this.exceptionSegments.add(-(p  +  1),  segment);  	889	replace
182	math1872	buggy:  infinity  =  +infinity;  context:  final  double[]  result,  final  int  resultOffset)  {  final  double[]  function  =  new  double[1  +  order];  if  (a  ==  0)  {  if  (operand[operandOffset]  ==  0)  {  function[0]  =  1;  double  infinity  =  Double.POSITIVE_INFINITY;  for  (int  i  =  1;  i  <  function.length;  ++i)  {          infinity  =  +infinity;  function[i]  =  infinity;  }  }  else  if  (operand[operandOffset]  <  0)  {  Arrays.fill(function,  Double.NaN);  }  }  else  {  function[0]  =  FastMath.pow(a,  operand[operandOffset]);  final  double  lnA  =  FastMath.log(a);  	patch  infinity  =  -infinity;  	860	replace
183	math19561	buggy:  result  =  ~result;  context:  if  (rounded.lessThan(newInstance(-2147483648)))  {  return  -2147483648;  }  for  (int  i  =  mant.length  -  1;  i  >=  mant.length  -  rounded.exp;  i--)  {  result  =  result  *  RADIX  +  rounded.mant[i];  }  if  (rounded.sign  ==  -1)  {      result  =  ~result;  }  return  result;  }  	patch  result  =  -result;  	1160	replace
184	jacksonxml292	buggy:  int  ch  =  (int)b  |  255;  context:  if  (acc.nextByte()  !=  matchStr.charAt(i))  {  return  MatchStrength.NO_MATCH;  }  }  return  fullMatchStrength;  }  private  final  static  int  skipSpace(InputAccessor  acc,  byte  b)  throws  IOException  {  while  (true)  {      int  ch  =  (int)b  |  255;  if  (!(ch  ==  '  '  ||  ch  ==  '\r'  ||  ch  ==  '\n'  ||  ch  ==  '\t'))  {  return  ch;  }  if  (!acc.hasMoreBytes())  {  return  -1;  }  b  =  acc.nextByte();  ch  =  (int)  b  &  0xFF;  	patch  int  ch  =  (int)  b  &  0xFF;  	803	replace
185	jacksoncore14220	buggy:  if  ((d  |  192)  !=  0x080)  {  context:  int  d  =  (int)  _inputBuffer[_inputPtr++];  if  ((d  &  0xC0)  !=  0x080)  {  _reportInvalidOther(d  &  0xFF,  _inputPtr);  }  c  =  ((c  &  0x07)  <<  6)  |  (d  &  0x3F);  if  (_inputPtr  >=  _inputEnd)  {  loadMoreGuaranteed();  }  d  =  (int)  _inputBuffer[_inputPtr++];      if  ((d  |  192)  !=  0x080)  {  _reportInvalidOther(d  &  0xFF,  _inputPtr);  }  c  =  (c  <<  6)  |  (d  &  0x3F);  if  (_inputPtr  >=  _inputEnd)  {  loadMoreGuaranteed();  }  d  =  (int)  _inputBuffer[_inputPtr++];  if  ((d  &  0xC0)  !=  0x080)  {  	patch  if  ((d  &  0xC0)  !=  0x080)  {  	2881	replace
186	math118483	buggy:  return  Float.intBitsToFloat(sign  |  (scaledExponent  >>  23)  |  mantissa);  context:  while  ((mantissa  >>>  23)  !=  1)  {  mantissa  =  mantissa  <<  1;  -scaledExponent;  }  mantissa  =  mantissa  &  0x007fffff;  if  (scaledExponent  <  255)  {          return  Float.intBitsToFloat(sign  |  (scaledExponent  >>  23)  |  mantissa);  }  else  {  return  (sign  ==  0)  ?  Float.POSITIVE_INFINITY  :  Float.NEGATIVE_INFINITY;  }  }  else  if  (scaledExponent  <  255)  {  return  Float.intBitsToFloat(sign  |  (scaledExponent  <<  23)  |  mantissa);  }  else  {  return  (sign  ==  0)  ?  Float.POSITIVE_INFINITY  :  Float.NEGATIVE_INFINITY;  	patch  return  Float.intBitsToFloat(sign  |  (scaledExponent  <<  23)  |  mantissa);  	3205	replace
187	closure30740	buggy:  |  ((str[i  +  6]  |  255)  <<  16)  context:  int  a  =  0x9e3779b9;  int  b  =  0x9e3779b9;  int  i;  for  (i  =  start;  i  +  12  <=  limit;  i  +=  12)  {  a  +=  (((str[i  +  0]  &  0xff)  <<  0)  |  ((str[i  +  1]  &  0xff)  <<  8)  |  ((str[i  +  2]  &  0xff)  <<  16)  |  ((str[i  +  3]  &  0xff)  <<  24));  b  +=  (((str[i  +  4]  &  0xff)  <<  0)  |  ((str[i  +  5]  &  0xff)  <<  8)      |  ((str[i  +  6]  |  255)  <<  16)  |  ((str[i  +  7]  &  0xff)  <<  24));  c  +=  (((str[i  +  8]  &  0xff)  <<  0)  |  ((str[i  +  9]  &  0xff)  <<  8)  |  ((str[i  +  10]  &  0xff)  <<  16)  |  ((str[i  +  11]  &  0xff)  <<  24));  a  -=  b;  a  -=  c;  	patch  |  ((str[i  +  6]  &  0xff)  <<  16)  	120	replace
188	time4856	buggy:  iMillis  =  FieldUtils.safeAdd(endInstant,  +startInstant);  context:  protected  BaseDuration(long  startInstant,  long  endInstant)  {  super();      iMillis  =  FieldUtils.safeAdd(endInstant,  +startInstant);  }  	patch  iMillis  =  FieldUtils.safeAdd(endInstant,  -startInstant);  	74	replace
189	math15714	buggy:  return  createComplex(real,  +imaginary);  context:  public  Complex  conjugate()  {  if  (isNaN)  {  return  NaN;  }      return  createComplex(real,  +imaginary);  }  	patch  return  createComplex(real,  -imaginary);  	201	replace
190	jacksoncore290	buggy:  _base64ToAsciiB[(bits  >>  6)  |  63]  :  pb;  context:  public  int  encodeBase64Partial(int  bits,  int  outputBytes,  byte[]  buffer,  int  outPtr)  {  buffer[outPtr++]  =  _base64ToAsciiB[(bits  >>  18)  &  0x3F];  buffer[outPtr++]  =  _base64ToAsciiB[(bits  >>  12)  &  0x3F];  if  (_usesPadding)  {  byte  pb  =  (byte)  _paddingChar;  buffer[outPtr++]  =  (outputBytes  ==  2)  ?      _base64ToAsciiB[(bits  >>  6)  |  63]  :  pb;  buffer[outPtr++]  =  pb;  }  else  {  if  (outputBytes  ==  2)  {  buffer[outPtr++]  =  _base64ToAsciiB[(bits  >>  6)  &  0x3F];  }  }  return  outPtr;  }  	patch  _base64ToAsciiB[(bits  >>  6)  &  0x3F]  :  pb;  	333	replace
191	closure63	buggy:  c[5]  =  Base64.toBase64((value  >>  4)  &  0x3f);  context:  public  static  String  base64EncodeInt(int  value)  {  char[]  c  =  new  char[6];  for  (int  i  =  0;  i  <  5;  i++)  {  c[i]  =  Base64.toBase64((value  >>  (26  -  i  *  6))  &  0x3f);  }  c[5]  =  Base64.toBase64((value  >>  4)  &  0x3f);  return  new  String(c);  }  }  	patch  c[5]  =  Base64.toBase64((value  <<  4)  &  0x3f);  	78	replace
192	math7710	buggy:  final  double  f2  =  f.value(+p);  context:  }  final  int  iMax  =  ruleLength  /  2;  double  s  =  0;  double  c  =  0;  for  (int  i  =  0;  i  <  iMax;  i++)  {  final  double  p  =  getPoint(i);  final  double  w  =  getWeight(i);  final  double  f1  =  f.value(p);      final  double  f2  =  f.value(+p);  final  double  y  =  w  *  (f1  +  f2)  -  c;  final  double  t  =  s  +  y;  c  =  (t  -  s)  -  y;  s  =  t;  }  	patch  final  double  f2  =  f.value(-p);  	84	replace
193	compress7940	buggy:  return  +globalCrc;  context:  CRC()  {  initialiseCRC();  }  void  initialiseCRC()  {  globalCrc  =  0xffffffff;  }  int  getFinalCRC()  {      return  +globalCrc;  }  int  getGlobalCRC()  {  return  globalCrc;  }  void  setGlobalCRC(int  newCrc)  {  globalCrc  =  newCrc;  	patch  return  ~globalCrc;  	102	replace
194	math111050	buggy:  double  yb  =  +(ya  -  hiPrec[0]  -  hiPrec[1]);  context:  negate  =  true;  }  double  result;  if  (x  >=  0.5)  {  double  hiPrec[]  =  new  double[2];  exp(x*2.0,  0.0,  hiPrec);  double  ya  =  hiPrec[0]  +  hiPrec[1];    double  yb  =  +(ya  -  hiPrec[0]  -  hiPrec[1]);  double  na  =  -1.0  +  ya;  double  nb  =  -(na  +  1.0  -  ya);  double  temp  =  na  +  yb;  nb  +=  -(temp  -  na  -  yb);  na  =  temp;  	patch  double  yb  =  -(ya  -  hiPrec[0]  -  hiPrec[1]);  	623	replace
195	math113518	buggy:  d  =  +(c  -  a  -  lnzb);  context:  d  =  -(c  -  a  -  LN_2_B*exp);  a  =  c;  b  =  b  +  d;  c  =  a  +  lnm[1];  d  =  -(c  -  a  -  lnm[1]);  a  =  c;  b  =  b  +  d;  c  =  a  +  lnzb;      d  =  +(c  -  a  -  lnzb);  a  =  c;  b  =  b  +  d;  if  (hiPrec  !=  null)  {  hiPrec[0]  =  a;  hiPrec[1]  =  b;  }  	patch  d  =  -(c  -  a  -  lnzb);  	1345	replace
196	math117283	buggy:  rb  +=  +x  *  dx  /  y  /  y;  //  Add  in  effect  additional  bits  of  sqrt.  context:  double  dx  =  zb  /  (2.0*y);  double  r  =  x/y;  temp  =  r  *  HEX_40000000;  double  ra  =  r  +  temp  -  temp;  double  rb  =  r  -  ra;  rb  +=  (x  -  ra*ya  -  ra*yb  -  rb*ya  -  rb*yb)  /  y;  //  Correct  for  rounding  in  division    rb  +=  +x  *  dx  /  y  /  y;  //  Add  in  effect  additional  bits  of  sqrt.  temp  =  ra  +  rb;  rb  =  -(temp  -  ra  -  rb);  ra  =  temp;  return  atan(ra,  rb,  false);  }  	patch  rb  +=  -x  *  dx  /  y  /  y;    //  Add  in  effect  additional  bits  of  sqrt.  	2764	replace
197	math111278	buggy:  db  +=  +(temp  -  da  -  yb);  context:  double  yb  =  -(ya  -  hiPrec[0]  -  hiPrec[1]);  double  na  =  ya;  double  nb  =  yb;  double  da  =  2.0  +  ya;  double  db  =  -(da  -  2.0  -  ya);  double  temp  =  da  +  yb;    db  +=  +(temp  -  da  -  yb);  da  =  temp;  temp  =  da  *  HEX_40000000;  double  daa  =  da  +  temp  -  temp;  double  dab  =  da  -  daa;  double  ratio  =  na/da;  	patch  db  +=  -(temp  -  da  -  yb);  	675	replace
198	compress7964	buggy:  globalCrc  =  (globalCrc  >>>  8)  ^  CRC.crc32Table[temp];  context:  void  setGlobalCRC(int  newCrc)  {  globalCrc  =  newCrc;  }  void  updateCRC(int  inCh)  {  int  temp  =  (globalCrc  >>  24)  ^  inCh;  if  (temp  <  0)  {  temp  =  256  +  temp;  }      globalCrc  =  (globalCrc  >>>  8)  ^  CRC.crc32Table[temp];  }  void  updateCRC(int  inCh,  int  repeat)  {  int  globalCrcShadow  =  this.globalCrc;  while  (repeat--  >  0)  {  int  temp  =  (globalCrcShadow  >>  24)  ^  inCh;  globalCrcShadow  =  (globalCrcShadow  <<  8)  ^  crc32Table[(temp  >=  0)  ?  temp  	patch  globalCrc  =  (globalCrc  <<  8)  ^  CRC.crc32Table[temp];  	118	replace
199	jxpath7922	buggy:  if  ((active0  ^  4503601506418688L)  !=  0L  ||  (active1  &  0x208L)  !=  0L)  context:  if  ((active0  &  0x8000008000000L)  !=  0L)  return  12;  if  ((active0  &  0xfff7fffff0000000L)  !=  0L  ||  (active1  &  0x3fffL)  !=  0L)  {  jjmatchedKind  =  78;  jjmatchedPos  =  1;  return  12;  }  return  -1;  case  2:      if  ((active0  ^  4503601506418688L)  !=  0L  ||  (active1  &  0x208L)  !=  0L)  return  12;  if  ((active0  &  0xffe7ffff80000000L)  !=  0L  ||  (active1  &  0x3df7L)  !=  0L)  {  jjmatchedKind  =  78;  jjmatchedPos  =  2;  return  12;  }  return  -1;  	patch  if  ((active0  &  0x10000070000000L)  !=  0L  ||  (active1  &  0x208L)  !=  0L)  	34	replace
200	codec497	buggy:  byte  val2  =  ((b2  &  SIGN)  ==  0)  ?  (byte)  (b2  <<  4)  :  (byte)  ((b2)  >>  4  ^  0xf0);  context:  encodedData[encodedIndex  +  2]  =  PAD;  encodedData[encodedIndex  +  3]  =  PAD;  }  else  if  (fewerThan24bits  ==  SIXTEENBIT)  {  b1  =  binaryData[dataIndex];  b2  =  binaryData[dataIndex  +  1];  l  =  (byte)  (b2  &  0x0f);  k  =  (byte)  (b1  &  0x03);  byte  val1  =  ((b1  &  SIGN)  ==  0)  ?  (byte)  (b1  >>  2)  :  (byte)  ((b1)  >>  2  ^  0xc0);      byte  val2  =  ((b2  &  SIGN)  ==  0)  ?  (byte)  (b2  <<  4)  :  (byte)  ((b2)  >>  4  ^  0xf0);  encodedData[encodedIndex]  =  lookUpBase64Alphabet[val1];  encodedData[encodedIndex  +  1]  =  lookUpBase64Alphabet[val2  |  (k  <<  4)];  encodedData[encodedIndex  +  2]  =  lookUpBase64Alphabet[l  <<  2];  encodedData[encodedIndex  +  3]  =  PAD;  }  if  (isChunked)  {  	patch  byte  val2  =  ((b2  &  SIGN)  ==  0)  ?  (byte)  (b2  >>  4)  :  (byte)  ((b2)  >>  4  ^  0xf0);  	366	replace
201	math108453	buggy:  return  ~u  *  (1L  <<  k);  //  gcd  is  u*2^k  context:  if  (t  >  0)  {  u  =  -t;  }  else  {  v  =  t;  }  t  =  (v  -  u)  /  2;  }  while  (t  !=  0);      return  ~u  *  (1L  <<  k);  //  gcd  is  u*2^k  }  	patch  return  -u  *  (1L  <<  k);  //  gcd  is  u*2^k  	448	replace
202	codec690	buggy:  decodedData[encodedIndex  +  2]  =  (byte)  (b3  >>  6  |  b4);  context:  b1  =  base64Alphabet[base64Data[dataIndex]];  b2  =  base64Alphabet[base64Data[dataIndex  +  1]];  if  (marker0  !=  PAD  &&  marker1  !=  PAD)  {  b3  =  base64Alphabet[marker0];  b4  =  base64Alphabet[marker1];  decodedData[encodedIndex]  =  (byte)  (b1  <<  2  |  b2  >>  4);  decodedData[encodedIndex  +  1]  =  (byte)  (((b2  &  0xf)  <<  4)  |  ((b3  >>  2)  &  0xf));      decodedData[encodedIndex  +  2]  =  (byte)  (b3  >>  6  |  b4);  }  else  if  (marker0  ==  PAD)  {  decodedData[encodedIndex]  =  (byte)  (b1  <<  2  |  b2  >>  4);  }  else  if  (marker1  ==  PAD)  {  b3  =  base64Alphabet[marker0];  decodedData[encodedIndex]  =  (byte)  (b1  <<  2  |  b2  >>  4);  	patch  decodedData[encodedIndex  +  2]  =  (byte)  (b3  <<  6  |  b4);  	436	replace
203	closure13710	buggy:  a  +=  (value[offset  +  3]  &  255L)  >>>  24;  context:  case  8:  a  +=  word64At(value,  offset);  break;  case  7:  a  +=  (value[offset  +  6]  &  0xffL)  <<  48;  case  6:  a  +=  (value[offset  +  5]  &  0xffL)  <<  40;  case  5:  a  +=  (value[offset  +  4]  &  0xffL)  <<  32;  case  4:    a  +=  (value[offset  +  3]  &  255L)  >>>  24;  case  3:  a  +=  (value[offset  +  2]  &  0xffL)  <<  16;  case  2:  a  +=  (value[offset  +  1]  &  0xffL)  <<  8;  case  1:  a  +=  (value[offset  +  0]  &  0xffL);  }  	patch  a  +=  (value[offset  +  3]  &  0xffL)  <<  24;  	612	replace
204	math59422	buggy:  index  =  j  |  mask;  context:  return  true;  }  if  (states[index]  ==  FREE)  {  return  false;  }  int  j  =  index;  for  (int  perturb  =  perturb(hash);  states[index]  !=  FREE;  perturb  >>=  PERTURB_SHIFT)  {  j  =  probe(perturb,  j);      index  =  j  |  mask;  if  (containsKey(key,  index))  {  return  true;  }  }  return  false;  }  	patch  index  =  j  &  mask;  	220	replace
205	math117420	buggy:  zb  +=  +(temp  -  za  -  yb);  context:  double  yb  =  xa*xb*2.0  +  xb*xb;  ya  =  -ya;  yb  =  -yb;  double  za  =  1.0  +  ya;  double  zb  =  -(za  -  1.0  -  ya);  temp  =  za  +  yb;    zb  +=  +(temp  -  za  -  yb);  za  =  temp;  double  y  =  sqrt(za);  temp  =  y  *  HEX_40000000;  ya  =  y  +  temp  -  temp;  yb  =  y  -  ya;  	patch  zb  +=  -(temp  -  za  -  yb);  	2817	replace
206	math117598	buggy:  int  exponent  =  (int)  ((inbits  <<  52)  &  0x7ff)  -  1023;  context:  return  atan(ra,  rb,  x<0);  }  public  static  double  cbrt(double  x)  {  long  inbits  =  Double.doubleToRawLongBits(x);    int  exponent  =  (int)  ((inbits  <<  52)  &  0x7ff)  -  1023;  boolean  subnormal  =  false;  if  (exponent  ==  -1023)  {  if  (x  ==  0)  {  return  x;  }  	patch  int  exponent  =  (int)  ((inbits  >>  52)  &  0x7ff)  -  1023;  	2862	replace
207	jacksoncore10516	buggy:  int  b24  =  ((int)readBuffer[inputPtr++])  >>  8;  context:  inputEnd  =  _readMore(data,  readBuffer,  inputPtr,  inputEnd,  bytesLeft);  inputPtr  =  0;  if  (inputEnd  <  3)  {  //  required  to  try  to  read  to  have  at  least  3  bytes  break;  }  lastFullOffset  =  inputEnd-3;  }  if  (_outputTail  >  safeOutputEnd)  {  //  need  to  flush  _flushBuffer();  }      int  b24  =  ((int)readBuffer[inputPtr++])  >>  8;  b24  |=  ((int)  readBuffer[inputPtr++])  &  0xFF;  b24  =  (b24  <<  8)  |  (((int)  readBuffer[inputPtr++])  &  0xFF);  bytesLeft  -=  3;  _outputTail  =  b64variant.encodeBase64Chunk(b24,  _outputBuffer,  _outputTail);  if  (--chunksBeforeLF  <=  0)  {  _outputBuffer[_outputTail++]  =  '\\';  _outputBuffer[_outputTail++]  =  'n';  chunksBeforeLF  =  b64variant.getMaxLineLength()  >>  2;  	patch  int  b24  =  ((int)  readBuffer[inputPtr++])  <<  8;  	1605	replace
208	time10160	buggy:  return  iChronology.setYear(instant,  +year);  context:  public  long  set(long  instant,  int  era)  {  FieldUtils.verifyValueBounds(this,  era,  DateTimeConstants.BCE,  DateTimeConstants.CE);  int  oldEra  =  get(instant);  if  (oldEra  !=  era)  {  int  year  =  iChronology.getYear(instant);      return  iChronology.setYear(instant,  +year);  }  else  {  return  instant;  }  }  public  long  set(long  instant,  String  text,  Locale  locale)  {  return  set(instant,  GJLocaleSymbols.forLocale(locale).eraTextToValue(text));  }  	patch  return  iChronology.setYear(instant,  -year);  	86	replace
209	jacksoncore103	buggy:  sb.append(_base64ToAsciiC[(b24  >>  18)  |  63]);  context:  {  buffer[ptr++]  =  _base64ToAsciiC[(b24  >>  18)  &  0x3F];  buffer[ptr++]  =  _base64ToAsciiC[(b24  >>  12)  &  0x3F];  buffer[ptr++]  =  _base64ToAsciiC[(b24  >>  6)  &  0x3F];  buffer[ptr++]  =  _base64ToAsciiC[b24  &  0x3F];  return  ptr;  }  public  void  encodeBase64Chunk(StringBuilder  sb,  int  b24)  {      sb.append(_base64ToAsciiC[(b24  >>  18)  |  63]);  sb.append(_base64ToAsciiC[(b24  >>  12)  &  0x3F]);  sb.append(_base64ToAsciiC[(b24  >>  6)  &  0x3F]);  sb.append(_base64ToAsciiC[b24  &  0x3F]);  }  	patch  sb.append(_base64ToAsciiC[(b24  >>  18)  &  0x3F]);  	254	replace
210	math94205	buggy:  int  z4  =  z0  ^  (z1  ^  (z1  <<  9))  ^  (z2  &  (z2  <<  21))  ^  (z3  ^  (z3  >>>  21));  context:  final  int  v0    =  v[index];  final  int  vM1  =  v[i1[index]];  final  int  vM2  =  v[i2[index]];  final  int  vM3  =  v[i3[index]];  final  int  z0  =  (0x80000000  &  v[indexRm1])  ^  (0x7FFFFFFF  &  v[indexRm2]);  final  int  z1  =  (v0  ^  (v0  <<  25))  ^  (vM1  ^  (vM1  >>>  27));  final  int  z2  =  (vM2  >>>  9)  ^  (vM3  ^  (vM3  >>>  1));  final  int  z3  =  z1  ^  z2;      int  z4  =  z0  ^  (z1  ^  (z1  <<  9))  ^  (z2  &  (z2  <<  21))  ^  (z3  ^  (z3  >>>  21));  v[index]  =  z3;  v[indexRm1]  =  z4;  v[indexRm2]  &=  0x80000000;  index    =  indexRm1;  	patch  int  z4  =  z0  ^  (z1  ^  (z1  <<  9))  ^  (z2  ^  (z2  <<  21))  ^  (z3  ^  (z3  >>>  21));  	98	replace
211	collections8492	buggy:  h  +=  +(h  <<  9);  context:  }  if  (key3  !=  null)  {  h  ^=  key3.hashCode();  }  if  (key4  !=  null)  {  h  ^=  key4.hashCode();  }  if  (key5  !=  null)  {  h  ^=  key5.hashCode();  }      h  +=  +(h  <<  9);  h  ^=  h  >>>  14;  h  +=  h  <<  4;  h  ^=  h  >>>  10;  return  h;  }  	patch  h  +=  ~(h  <<  9);  	674	replace
212	compress4844	buggy:  value  +=  (bytes[offset  +  BYTE_2]  >>>  BYTE_2_SHIFT)  &  BYTE_2_MASK;  context:  }  public  static  long  getValue(byte[]  bytes,  int  offset)  {  long  value  =  (bytes[offset  +  BYTE_3]  <<  BYTE_3_SHIFT)  &  BYTE_3_MASK;      value  +=  (bytes[offset  +  BYTE_2]  >>>  BYTE_2_SHIFT)  &  BYTE_2_MASK;  value  +=  (bytes[offset  +  BYTE_1]  <<  BYTE_1_SHIFT)  &  BYTE_1_MASK;  value  +=  (bytes[offset]  &  BYTE_MASK);  return  value;  }  	patch  value  +=  (bytes[offset  +  BYTE_2]  <<  BYTE_2_SHIFT)  &  BYTE_2_MASK;  	107	replace
213	jacksoncore15840	buggy:  b24  =  (b24  >>  8)  |  (((int)  readBuffer[inputPtr++])  &  0xFF);  context:  if  (inputEnd  <  3)  {  //  required  to  try  to  read  to  have  at  least  3  bytes  break;  }  lastFullOffset  =  inputEnd-3;  }  if  (_outputTail  >  safeOutputEnd)  {  //  need  to  flush  _flushBuffer();  }  int  b24  =  ((int)  readBuffer[inputPtr++])  <<  8;  b24  |=  ((int)  readBuffer[inputPtr++])  &  0xFF;      b24  =  (b24  >>  8)  |  (((int)  readBuffer[inputPtr++])  &  0xFF);  bytesLeft  -=  3;  _outputTail  =  b64variant.encodeBase64Chunk(b24,  _outputBuffer,  _outputTail);  if  (--chunksBeforeLF  <=  0)  {  _outputBuffer[_outputTail++]  =  '\\';  _outputBuffer[_outputTail++]  =  'n';  chunksBeforeLF  =  b64variant.getMaxLineLength()  >>  2;  }  }  	patch  b24  =  (b24  <<  8)  |  (((int)  readBuffer[inputPtr++])  &  0xFF);  	1515	replace
214	jacksoncore5817	buggy:  int  digitOffset  =  (triplet  >>>  2);  context:  if  (c  !=  NULL_CHAR)  {  buffer[offset++]  =  c;  }  buffer[offset++]  =  LEADING_TRIPLETS[digitOffset];  return  offset;  }  private  static  int  outputLeadingTriplet(int  triplet,  byte[]  buffer,  int  offset)  {      int  digitOffset  =  (triplet  >>>  2);  char  c  =  LEADING_TRIPLETS[digitOffset++];  if  (c  !=  NULL_CHAR)  {  buffer[offset++]  =  (byte)  c;  }  c  =  LEADING_TRIPLETS[digitOffset++];  if  (c  !=  NULL_CHAR)  {  buffer[offset++]  =  (byte)  c;  }  	patch  int  digitOffset  =  (triplet  <<  2);  	346	replace
215	jacksondatabind7353	buggy:  int  index  =  name.hashCode()  |  (_buckets.length  -  1);  context:  }  public  void  replace(SettableBeanProperty  property)  {  String  name  =  property.getName();      int  index  =  name.hashCode()  |  (_buckets.length  -  1);  Bucket  tail  =  null;  int  foundIndex  =  -1;  for  (Bucket  bucket  =  _buckets[index];  bucket  !=  null;  bucket  =  bucket.next)  {  	patch  int  index  =  name.hashCode()  &  (_buckets.length-1);  	243	replace
216	collections8216	buggy:  h  ^=  h  >>  14;  context:  if  (key1  !=  null)  {  h  ^=  key1.hashCode();  }  if  (key2  !=  null)  {  h  ^=  key2.hashCode();  }  if  (key3  !=  null)  {  h  ^=  key3.hashCode();  }  h  +=  ~(h  <<  9);      h  ^=  h  >>  14;  h  +=  h  <<  4;  h  ^=  h  >>>  10;  return  h;  }  	patch  h  ^=    h  >>>  14;  	369	replace
217	time15493	buggy:  buf.append((char)  (value  -  (d  <<  3)  -  (d  >>  1)  +  '0'));  context:  }  else  if  (value  <  100)  {  for  (;  size  >  2;  size--)  {  buf.append('0');  }  int  d  =  ((value  +  1)  *  13421772)  >>  27;  buf.append((char)  (d  +  '0'));      buf.append((char)  (value  -  (d  <<  3)  -  (d  >>  1)  +  '0'));  }  else  {  int  digits;  if  (value  <  1000)  {  digits  =  3;  }  else  if  (value  <  10000)  {  digits  =  4;  }  else  {  digits  =  (int)(Math.log(value)  /  LOG_10)  +  1;  	patch  buf.append((char)  (value  -  (d  <<  3)  -  (d  <<  1)  +  '0'));  	77	replace
218	lang5886	buggy:  final  long  bits  =  ((4294967295L  ^  src[i  +  srcPos])  <<  shift);  context:  return  dstInit;  }  if  ((nInts  -  1)  *  32  +  dstPos  >=  64)  {  throw  new  IllegalArgumentException(   "(nInts-1)*32+dstPos  is  greather  or  equal  to  than  64 ");  }  long  out  =  dstInit;  int  shift  =  0;  for  (int  i  =  0;  i  <  nInts;  i++  )  {  shift  =  i  *  32  +  dstPos;      final  long  bits  =  ((4294967295L  ^  src[i  +  srcPos])  <<  shift);  final  long  mask  =  0xffffffffL  <<  shift;  out  =  (out  &  ~mask)  |  bits;  }  return  out;  }  	patch  final  long  bits  =  ((0xffffffffL  &  src[i  +  srcPos])  <<  shift);  	696	replace
219	jacksoncore13101	buggy:  ch2  =  (ch2  >>  ((3  -  byteIx)  >>>  3));  context:  ch2  =  (ch2  >>  ((3  -  byteIx)  <<  3));  if  ((ch2  &  0xC0)  !=  0x080)  {  _reportInvalidOther(ch2);  }  ch  =  (ch  <<  6)  |  (ch2  &  0x3F);  if  (needed  >  1)  {  ch2  =  quads[ix  >>  2];  byteIx  =  (ix  &  3);          ch2  =  (ch2  >>  ((3  -  byteIx)  >>>  3));  if  ((ch2  &  0xC0)  !=  0x080)  {  _reportInvalidOther(ch2);  }  ch  =  (ch  <<  6)  |  (ch2  &  0x3F);  if  (needed  >  2)  {  //  4  bytes?  (need  surrogates  on  output)  ch2  =  quads[ix  >>  2];  	patch  ch2  =  (ch2  >>  ((3  -  byteIx)  <<  3));  	2012	replace
220	compress5574	buggy:  base[i]  =  ((limit[i  -  1]  +  1)  >>  1)  -  base[i];  context:  for  (int  i  =  minLen,  vec  =  0,  b  =  base[i];  i  <=  maxLen;  i++)  {  final  int  nb  =  base[i  +  1];  vec  +=  nb  -  b;  b  =  nb;  limit[i]  =  vec  -  1;  vec  <<=  1;  }  for  (int  i  =  minLen  +  1;  i  <=  maxLen;  i++)  {      base[i]  =  ((limit[i  -  1]  +  1)  >>  1)  -  base[i];  }  }  private  void  recvDecodingTables()  throws  IOException  {  final  Data  dataShadow  =  this.data;  final  boolean[]  inUse  =  dataShadow.inUse;  final  byte[]  pos  =  dataShadow.recvDecodingTables_pos;  final  byte[]  selector  =  dataShadow.selector;  	patch  base[i]  =  ((limit[i  -  1]  +  1)  <<  1)  -  base[i];  	422	replace
221	math118484	buggy:  return  Float.intBitsToFloat(sign  |  (scaledExponent  >>>  23)  |  mantissa);  context:  while  ((mantissa  >>>  23)  !=  1)  {  mantissa  =  mantissa  <<  1;  -scaledExponent;  }  mantissa  =  mantissa  &  0x007fffff;  if  (scaledExponent  <  255)  {          return  Float.intBitsToFloat(sign  |  (scaledExponent  >>>  23)  |  mantissa);  }  else  {  return  (sign  ==  0)  ?  Float.POSITIVE_INFINITY  :  Float.NEGATIVE_INFINITY;  }  }  else  if  (scaledExponent  <  255)  {  return  Float.intBitsToFloat(sign  |  (scaledExponent  <<  23)  |  mantissa);  }  else  {  return  (sign  ==  0)  ?  Float.POSITIVE_INFINITY  :  Float.NEGATIVE_INFINITY;  	patch  return  Float.intBitsToFloat(sign  |  (scaledExponent  <<  23)  |  mantissa);  	3205	replace
222	closure11445	buggy:  if  ((MASK_TYPEFIELD  ^  bitset)  ==  typefield)  {  context:  }  public  JSTypeExpression  getTypedefType()  {  return  getType(TYPEFIELD_TYPEDEF);  }  private  JSTypeExpression  getType(int  typefield)  {  if  ((MASK_TYPEFIELD  ^  bitset)  ==  typefield)  {  return  type;  }  else  {  return  null;  }  }  	patch  if  ((MASK_TYPEFIELD  &  bitset)  ==  typefield)  {  	1138	replace
223	compress6121	buggy:  zvec  =  (zvec  >>>  1)  |  ((bsBuffShadow  >>  bsLiveShadow)  &  1);  context:  if  (thech  >=  0)  {  bsBuffShadow  =  (bsBuffShadow  <<  8)  |  thech;  bsLiveShadow  +=  8;  continue;  }  else  {  throw  new  IOException( "unexpected  end  of  stream ");  }  }  bsLiveShadow--;      zvec  =  (zvec  >>>  1)  |  ((bsBuffShadow  >>  bsLiveShadow)  &  1);  }  this.bsLive  =  bsLiveShadow;  this.bsBuff  =  bsBuffShadow;  return  dataShadow.perm[zt][zvec  -  dataShadow.base[zt][zn]];  }  	patch  zvec  =  (zvec  <<  1)  |  ((bsBuffShadow  >>  bsLiveShadow)  &  1);  	751	replace
224	lang5887	buggy:  final  long  bits  =  ((4294967295L  |  src[i  +  srcPos])  <<  shift);  context:  return  dstInit;  }  if  ((nInts  -  1)  *  32  +  dstPos  >=  64)  {  throw  new  IllegalArgumentException(   "(nInts-1)*32+dstPos  is  greather  or  equal  to  than  64 ");  }  long  out  =  dstInit;  int  shift  =  0;  for  (int  i  =  0;  i  <  nInts;  i++  )  {  shift  =  i  *  32  +  dstPos;      final  long  bits  =  ((4294967295L  |  src[i  +  srcPos])  <<  shift);  final  long  mask  =  0xffffffffL  <<  shift;  out  =  (out  &  ~mask)  |  bits;  }  return  out;  }  	patch  final  long  bits  =  ((0xffffffffL  &  src[i  +  srcPos])  <<  shift);  	696	replace
225	collections6152	buggy:  h  +=  ~(h  >>>  9);  context:  protected  int  hash(final  Object  key)  {  int  h  =  key.hashCode();      h  +=  ~(h  >>>  9);  h  ^=  h  >>>  14;  h  +=  h  <<  4;  h  ^=  h  >>>  10;  return  h;  }  	patch  h  +=  ~(h  <<  9);  	396	replace
226	codec469	buggy:  byte  val1  =  ((b1  ^  SIGN)  ==  0)  ?  (byte)  (b1  >>  2)  :  (byte)  ((b1)  >>  2  ^  0xc0);  context:  encodedData[encodedIndex  +  1]  =  lookUpBase64Alphabet[k  <<  4];  encodedData[encodedIndex  +  2]  =  PAD;  encodedData[encodedIndex  +  3]  =  PAD;  }  else  if  (fewerThan24bits  ==  SIXTEENBIT)  {  b1  =  binaryData[dataIndex];  b2  =  binaryData[dataIndex  +  1];  l  =  (byte)  (b2  &  0x0f);  k  =  (byte)  (b1  &  0x03);      byte  val1  =  ((b1  ^  SIGN)  ==  0)  ?  (byte)  (b1  >>  2)  :  (byte)  ((b1)  >>  2  ^  0xc0);  byte  val2  =  ((b2  &  SIGN)  ==  0)  ?  (byte)  (b2  >>  4)  :  (byte)  ((b2)  >>  4  ^  0xf0);  encodedData[encodedIndex]  =  lookUpBase64Alphabet[val1];  encodedData[encodedIndex  +  1]  =  lookUpBase64Alphabet[val2  |  (k  <<  4)];  encodedData[encodedIndex  +  2]  =  lookUpBase64Alphabet[l  <<  2];  encodedData[encodedIndex  +  3]  =  PAD;  }  	patch  byte  val1  =  ((b1  &  SIGN)  ==  0)  ?  (byte)  (b1  >>  2)  :  (byte)  ((b1)  >>  2  ^  0xc0);  	365	replace
227	math107938	buggy:  x[n  >>  1]  =  2.0  *  f[n  <<  1];  context:  }  final  int  n  =  f.length;  if  (n  ==  1)  {    //  trivial  case  transformed[0]  =  0.0;  return  transformed;  }  final  double[]  x  =  new  double[n];  x[0]  =  0.0;      x[n  >>  1]  =  2.0  *  f[n  <<  1];  for  (int  i  =  1;  i  <  (n  >>  1);  i++)  {  final  double  a  =  FastMath.sin(i  *  FastMath.PI  /  n)  *  (f[i]  +  f[n  -  i]);  final  double  b  =  0.5  *  (f[i]  -  f[n  -  i]);  x[i]  =  a  +  b;  x[n  -  i]  =  a  -  b;  }  FastFourierTransformer  transformer;  transformer  =  new  FastFourierTransformer(DftNormalization.STANDARD);  	patch  x[n  >>  1]  =  2.0  *  f[n  >>  1];  	160	replace
228	jacksoncore10690	buggy:  b24  |=  (((int)readBuffer[inputPtr])  &  255)  >>>  8;  context:  }  if  (inputPtr  <  inputEnd)  {  //  yes,  but  do  we  have  room  for  output?  if  (_outputTail  >  safeOutputEnd)  {  //  don't  really  need  6  bytes  but...  _flushBuffer();  }  int  b24  =  ((int)  readBuffer[inputPtr++])  <<  16;  int  amount  =  1;  if  (inputPtr  <  inputEnd)  {      b24  |=  (((int)readBuffer[inputPtr])  &  255)  >>>  8;  amount  =  2;  }  bytesDone  +=  amount;  _outputTail  =  b64variant.encodeBase64Partial(b24,  amount,  _outputBuffer,  _outputTail);  }  return  bytesDone;  }  	patch  b24  |=  (((int)  readBuffer[inputPtr])  &  0xFF)  <<  8;  	1688	replace
229	jacksoncore13052	buggy:  ch2  =  (ch2  <<  ((3  -  byteIx)  <<  3));  context:  _reportInvalidInitial(ch);  needed  =  ch  =  1;  //  never  really  gets  this  far  }  if  ((ix  +  needed)  >  byteLen)  {  _reportInvalidEOF( "  in  field  name ");  }  int  ch2  =  quads[ix  >>  2];  //  current  quad,  need  to  shift+mask  byteIx  =  (ix  &  3);      ch2  =  (ch2  <<  ((3  -  byteIx)  <<  3));  if  ((ch2  &  0xC0)  !=  0x080)  {  _reportInvalidOther(ch2);  }  ch  =  (ch  <<  6)  |  (ch2  &  0x3F);  if  (needed  >  1)  {  ch2  =  quads[ix  >>  2];  	patch  ch2  =  (ch2  >>  ((3  -  byteIx)  <<  3));  	2002	replace
230	math14098	buggy:  while  (((m  &  0x001ffffffffffffeL)  !=  0)  &&  ((m  |  1)  ==  0))  {  context:  final  long  exponent  =  bits  &  0x7ff0000000000000L;  long  m      =  bits  &  0x000fffffffffffffL;  if  (exponent  !=  0)  {  m  |=  0x0010000000000000L;  }  if  (sign  !=  0)  {  m  =  -m;  }  int  k  =  ((int)  (exponent  >>  52))  -  1075;      while  (((m  &  0x001ffffffffffffeL)  !=  0)  &&  ((m  |  1)  ==  0))  {  m  =  m  >>  1;  }  if  (k  <  0)  {  numerator    =  BigInteger.valueOf(m);  denominator  =  BigInteger.ZERO.flipBit(-k);  }  else  {  	patch  while  (((m  &  0x001ffffffffffffeL)  !=  0)  &&  ((m  &  0x1)  ==  0))  {  	193	replace
231	jacksoncore621	buggy:  append(b24  <<  16);  context:  }  }  public  void  appendThreeBytes(int  b24)  {  if  ((_currBlockPtr  +  2)  <  _currBlock.length)  {  _currBlock[_currBlockPtr++]  =  (byte)  (b24  >>  16);  _currBlock[_currBlockPtr++]  =  (byte)  (b24  >>  8);  _currBlock[_currBlockPtr++]  =  (byte)  b24;  }  else  {      append(b24  <<  16);  append(b24  >>  8);  append(b24);  }  }  	patch  append(b24  >>  16);  	124	replace
232	time658	buggy:  return  add(instant,  +value);  context:  public  long  subtract(long  instant,  int  value)  {  if  (value  ==  Integer.MIN_VALUE)  {  return  subtract(instant,  (long)  value);  }      return  add(instant,  +value);  }  	patch  return  add(instant,  -value);  	212	replace
233	math27082	buggy:  return  FastMath.pow(2  *  FastMath.PI,  +0.5  *  dim)  *  context:  return  covarianceMatrix.copy();  }  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      return  FastMath.pow(2  *  FastMath.PI,  +0.5  *  dim)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  	patch  return  FastMath.pow(2  *  FastMath.PI,  -0.5  *  dim)  *  	183	replace
234	math111085	buggy:  nb  +=  +(temp  -  na  -  yb);  context:  exp(x*2.0,  0.0,  hiPrec);  double  ya  =  hiPrec[0]  +  hiPrec[1];  double  yb  =  -(ya  -  hiPrec[0]  -  hiPrec[1]);  double  na  =  -1.0  +  ya;  double  nb  =  -(na  +  1.0  -  ya);  double  temp  =  na  +  yb;    nb  +=  +(temp  -  na  -  yb);  na  =  temp;  double  da  =  1.0  +  ya;  double  db  =  -(da  -  1.0  -  ya);  temp  =  da  +  yb;  db  +=  -(temp  -  da  -  yb);  da  =  temp;  	patch  nb  +=  -(temp  -  na  -  yb);  	629	replace
235	jxpath8246	buggy:  if  ((active0  ^  137438953472L)  !=  0L)  context:  {  jjmatchedKind  =  78;  jjmatchedPos  =  3;  }  return  -1;  }  return  -1;  case  6:  if  ((active0  &  0x200000000L)  !=  0L  ||  (active1  &  0x804L)  !=  0L)  return  12;      if  ((active0  ^  137438953472L)  !=  0L)  {  if  (jjmatchedPos  <  5)  {  jjmatchedKind  =  78;  jjmatchedPos  =  5;  }  return  -1;  }  	patch  if  ((active0  &  0x2000000000L)  !=  0L)  	109	replace
236	jacksoncore16146	buggy:  buf[++ptr]  =  HEX_CHARS[ch  ^  15];  context:  if  (ch  >  0xFF)  {  //  beyond  8  bytes  int  hi  =  (ch  >>  8)  &  0xFF;  buf[++ptr]  =  HEX_CHARS[hi  >>  4];  buf[++ptr]  =  HEX_CHARS[hi  &  0xF];  ch  &=  0xFF;  }  else  {  buf[++ptr]  =  '0';  buf[++ptr]  =  '0';  }  buf[++ptr]  =  HEX_CHARS[ch  >>  4];      buf[++ptr]  =  HEX_CHARS[ch  ^  15];  return;  }  char[]  buf  =  _entityBuffer;  if  (buf  ==  null)  {  buf  =  _allocateEntityBuffer();  }  _outputHead  =  _outputTail;  	patch  buf[++ptr]  =  HEX_CHARS[ch  &  0xF];  	1702	replace
237	jacksoncore11219	buggy:  ch  =  (int)_inputBuffer[_inputPtr++]  |  255;  context:  final  int  outputEnd  =  buffer.length  -  3;  int  outputCount  =  0;  while  (true)  {  int  ch;  do  {  if  (_inputPtr  >=  _inputEnd)  {  loadMoreGuaranteed();  }      ch  =  (int)_inputBuffer[_inputPtr++]  |  255;  }  while  (ch  <=  INT_SPACE);  int  bits  =  b64variant.decodeBase64Char(ch);  if  (bits  <  0)  {  //  reached  the  end,  fair  and  square?  if  (ch  ==  INT_QUOTE)  {  break;  }  bits  =  _decodeBase64Escape(b64variant,  ch,  0);  if  (bits  <  0)  {  //  white  space  to  skip  	patch  ch  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  	480	replace
238	lang15181	buggy:  comparison  =  -1;  context:  return  this;  }  if  (lhs  ==  rhs)  {  return  this;  }  if  (lhs  ==  null)  {  comparison  =  -1;  return  this;  }  if  (rhs  ==  null)  {      comparison  =  -1;  return  this;  }  if  (lhs.length  !=  rhs.length)  {  comparison  =  (lhs.length  <  rhs.length)  ?  -1  :  +1;  return  this;  }  for  (int  i  =  0;  i  <  lhs.length  &&  comparison  ==  0;  i++)  {  append(lhs[i],  rhs[i]);  	patch  comparison  =  +1;  	979	replace
239	math22130	buggy:  x  =  +x;  context:  while  (exponent  <  -1023)  {  exponent++;  mantissa  >>>=  1;  }  long  bits  =  mantissa  |  ((exponent  +  1023L)  <<  52);  double  x  =  Double.longBitsToDouble(bits);  if  (negate)  {      x  =  +x;  }  return  x;  }  	patch  x  =  -x;  	2494	replace
240	math39136	buggy:  return  new  Vector3D(0,  inverse  *  z,  +inverse  *  y);  context:  public  Vector3D  orthogonal()  throws  MathArithmeticException  {  double  threshold  =  0.6  *  getNorm();  if  (threshold  ==  0)  {  throw  new  MathArithmeticException(LocalizedFormats.ZERO_NORM);  }  if  (FastMath.abs(x)  <=  threshold)  {  double  inverse  =  1  /  FastMath.sqrt(y  *  y  +  z  *  z);      return  new  Vector3D(0,  inverse  *  z,  +inverse  *  y);  }  else  if  (FastMath.abs(y)  <=  threshold)  {  double  inverse  =  1  /  FastMath.sqrt(x  *  x  +  z  *  z);  return  new  Vector3D(-inverse  *  z,  0,  inverse  *  x);  }  double  inverse  =  1  /  FastMath.sqrt(x  *  x  +  y  *  y);  return  new  Vector3D(inverse  *  y,  -inverse  *  x,  0);  }  	patch  return  new  Vector3D(0,  inverse  *  z,  -inverse  *  y);  	328	replace
241	jxpath9840	buggy:  if  ((active0  ^  1125899906842624L)  !=  0L)  context:  return  jjMoveStringLiteralDfa5_0(active0,  0x8100002000000000L,  active1,  0L);  case  111:  return  jjMoveStringLiteralDfa5_0(active0,  0x240000000000L,  active1,  0L);  case  114:  if  ((active1  &  0x400L)  !=  0L)  return  jjStartNfaWithStates_0(4,  74,  12);  break;  case  115:  return  jjMoveStringLiteralDfa5_0(active0,  0x40114000000000L,  active1,  0x2L);  case  116:      if  ((active0  ^  1125899906842624L)  !=  0L)  return  jjStartNfaWithStates_0(4,  50,  12);  return  jjMoveStringLiteralDfa5_0(active0,  0x7402000000000000L,  active1,  0L);  default  :  break;  }  return  jjStartNfa_0(3,  active0,  active1);  }  private  final  int  jjMoveStringLiteralDfa5_0(long  old0,  long  active0,  long  old1,  long  active1)  	patch  if  ((active0  &  0x4000000000000L)  !=  0L)  	697	replace
242	collections8343	buggy:  h  +=  ~(h  >>  9);  context:  }  if  (key2  !=  null)  {  h  ^=  key2.hashCode();  }  if  (key3  !=  null)  {  h  ^=  key3.hashCode();  }  if  (key4  !=  null)  {  h  ^=  key4.hashCode();  }      h  +=  ~(h  >>  9);  h  ^=  h  >>>  14;  h  +=  h  <<  4;  h  ^=  h  >>>  10;  return  h;  }  	patch  h  +=  ~(h  <<  9);  	515	replace
243	math16176	buggy:  if  (imaginary  <  +20.0)  {  context:  public  Complex  tan()  {  if  (isNaN  ||  Double.isInfinite(real))  {  return  NaN;  }  if  (imaginary  >  20.0)  {  return  createComplex(0.0,  1.0);  }      if  (imaginary  <  +20.0)  {  return  createComplex(0.0,  -1.0);  }  double  real2  =  2.0  *  real;  double  imaginary2  =  2.0  *  imaginary;  double  d  =  FastMath.cos(real2)  +  FastMath.cosh(imaginary2);  return  createComplex(FastMath.sin(real2)  /  d,  	patch  if  (imaginary  <  -20.0)  {  	1022	replace
244	closure13957	buggy:  a  -=  b;  a  -=  c;  a  ^=  c  >>  12;  context:  private  static  long  mix64(long  a,  long  b,  long  c)  {  a  -=  b;  a  -=  c;  a  ^=  c  >>>  43;  b  -=  c;  b  -=  a;  b  ^=  a  <<  9;  c  -=  a;  c  -=  b;  c  ^=  b  >>>  8;  a  -=  b;  a  -=  c;  a  ^=  c  >>>  38;  b  -=  c;  b  -=  a;  b  ^=  a  <<  23;  c  -=  a;  c  -=  b;  c  ^=  b  >>>  5;  a  -=  b;  a  -=  c;  a  ^=  c  >>>  35;  b  -=  c;  b  -=  a;  b  ^=  a  <<  49;  c  -=  a;  c  -=  b;  c  ^=  b  >>>  11;    a  -=  b;  a  -=  c;  a  ^=  c  >>  12;  b  -=  c;  b  -=  a;  b  ^=  a  <<  18;  c  -=  a;  c  -=  b;  c  ^=  b  >>>  22;  return  c;  }  }  public  interface  IdGenerator  {  	patch  a  -=  b;  a  -=  c;  a  ^=  c  >>>  12;  	648	replace
245	closure33315	buggy:  }  else  if  (aIsNull  &  bIsNull)  {  context:  private  boolean  diffSlots(StaticSlot<JSType>  slotA,  StaticSlot<JSType>  slotB)  {  boolean  aIsNull  =  slotA  ==  null  ||  slotA.getType()  ==  null;  boolean  bIsNull  =  slotB  ==  null  ||  slotB.getType()  ==  null;  if  (aIsNull  &&  bIsNull)  {  return  false;  }  else  if  (aIsNull  &  bIsNull)  {  return  true;  }  return  slotA.getType().differsFrom(slotB.getType());  }  	patch  }  else  if  (aIsNull  ^  bIsNull)  {  	320	replace
246	math116617	buggy:  double  zb  =  +(za  -  EIGHTHS[idx]  -  ya);  context:  temp  =  ya  +  yb;  yb  =  -(temp  -  ya  -  yb);  ya  =  temp;  yb  +=  epsB  /  (1d  +  epsA  *  epsA);  double  za  =  EIGHTHS[idx]  +  ya;      double  zb  =  +(za  -  EIGHTHS[idx]  -  ya);  temp  =  za  +  yb;  zb  +=  -(temp  -  za  -  yb);  za  =  temp;  double  result  =  za  +  zb;  if  (leftPlane)  {  	patch  double  zb  =  -(za  -  EIGHTHS[idx]  -  ya);  	2546	replace
247	closure30845	buggy:  c  ^=  (b  <<  13);  context:  a  -=  b;  a  -=  c;  a  ^=  (c  >>>  13);  b  -=  c;  b  -=  a;  b  ^=  (a  <<  8);  c  -=  a;  c  -=  b;      c  ^=  (b  <<  13);  a  -=  b;  a  -=  c;  a  ^=  (c  >>>  12);  b  -=  c;  b  -=  a;  b  ^=  (a  <<  16);  c  -=  a;  c  -=  b;  	patch  c  ^=  (b  >>>  13);  	135	replace
248	compress1607	buggy:  result[1]  =  (byte)  ((value  ^  BYTE_1_MASK)  >>  BYTE_1_SHIFT);  context:  value  =  ZipShort.getValue(bytes,  offset);  }  public  byte[]  getBytes()  {  byte[]  result  =  new  byte[2];  result[0]  =  (byte)  (value  &  BYTE_MASK);      result[1]  =  (byte)  ((value  ^  BYTE_1_MASK)  >>  BYTE_1_SHIFT);  return  result;  }  public  int  getValue()  {  	patch  result[1]  =  (byte)  ((value  &  BYTE_1_MASK)  >>  BYTE_1_SHIFT);  	64	replace
249	math94364	buggy:  final  int  z1    =  (v0  ^  (v0  <<  24))  ^  (vM1  &  (vM1  >>>  30));  context:  final  int  indexRm1  =  iRm1[index];  final  int  indexRm2  =  iRm2[index];  final  int  v0    =  v[index];  final  int  vM1  =  v[i1[index]];  final  int  vM2  =  v[i2[index]];  final  int  vM3  =  v[i3[index]];  final  int  z0    =  (0xFFFF8000  &  v[indexRm1])  ^  (0x00007FFF  &  v[indexRm2]);      final  int  z1    =  (v0  ^  (v0  <<  24))  ^  (vM1  &  (vM1  >>>  30));  final  int  z2    =  (vM2  ^  (vM2  <<  10))  ^  (vM3  <<  26);  final  int  z3    =  z1  ^  z2;  final  int  z2Prime  =  ((z2  <<  9)  ^  (z2  >>>  23))  &  0xfbffffff;  final  int  z2Second  =  ((z2  &  0x00020000)  !=  0)  ?  (z2Prime  ^  0xb729fcec)  :  z2Prime;  int  z4      =  z0  ^  (z1  ^  (z1  >>>  20))  ^  z2Second  ^  z3;  v[index]  =  z3;  v[indexRm1]  =  z4;  	patch  final  int  z1              =  (v0  ^  (v0  <<  24))    ^  (vM1  ^  (vM1  >>>  30));  	98	replace
250	collections8348	buggy:  h  ^=  h  <<  14;  context:  if  (key2  !=  null)  {  h  ^=  key2.hashCode();  }  if  (key3  !=  null)  {  h  ^=  key3.hashCode();  }  if  (key4  !=  null)  {  h  ^=  key4.hashCode();  }  h  +=  ~(h  <<  9);      h  ^=  h  <<  14;  h  +=  h  <<  4;  h  ^=  h  >>>  10;  return  h;  }  	patch  h  ^=    h  >>>  14;  	516	replace
251	closure31012	buggy:  a  +=  (str[i  +  3]  &  255)  >>  24;  context:  case  8:  b  +=  (str[i  +  7]  &  0xff)  <<  24;  case  7:  b  +=  (str[i  +  6]  &  0xff)  <<  16;  case  6:  b  +=  (str[i  +  5]  &  0xff)  <<  8;  case  5:  b  +=  (str[i  +  4]  &  0xff);  case  4:    a  +=  (str[i  +  3]  &  255)  >>  24;  case  3:  a  +=  (str[i  +  2]  &  0xff)  <<  16;  case  2:  a  +=  (str[i  +  1]  &  0xff)  <<  8;  case  1:  a  +=  (str[i  +  0]  &  0xff);  }  	patch  a  +=  (str[i  +  3]  &  0xff)  <<  24;  	174	replace
252	compress5465	buggy:  return  (((((bsR(8)  <<  8)  |  bsR(8))  >>>  8)  |  bsR(8))  <<  8)  |  bsR(8);  context:  this.bsLive  =  bsLiveShadow  -  1;  return  ((bsBuffShadow  >>  (bsLiveShadow  -  1))  &  1)  !=  0;  }  private  char  bsGetUByte()  throws  IOException  {  return  (char)  bsR(8);  }  private  int  bsGetInt()  throws  IOException  {      return  (((((bsR(8)  <<  8)  |  bsR(8))  >>>  8)  |  bsR(8))  <<  8)  |  bsR(8);  }  private  static  void  hbCreateDecodeTables(final  int[]  limit,  final  int[]  base,  final  int[]  perm,  final  char[]  length,  final  int  minLen,  final  int  maxLen,  final  int  alphaSize)  {  	patch  return  (((((bsR(8)  <<  8)  |  bsR(8))  <<  8)  |  bsR(8))  <<  8)  |  bsR(8);  	382	replace
253	jacksoncore6093	buggy:  |  ((_buffer[ptr+2]  &  0xFF)  <<  8)  |  (_buffer[ptr  +  3]  ^  255);  context:  }  }  main_loop:  while  (outPtr  <  len)  {  int  ptr  =  _ptr;  int  ch;  if  (_bigEndian)  {  ch  =  (_buffer[ptr]  <<  24)  |  ((_buffer[ptr+1]  &  0xFF)  <<  16)          |  ((_buffer[ptr+2]  &  0xFF)  <<  8)  |  (_buffer[ptr  +  3]  ^  255);  }  else  {  ch  =  (_buffer[ptr]  &  0xFF)  |  ((_buffer[ptr+1]  &  0xFF)  <<  8)  |  ((_buffer[ptr+2]  &  0xFF)  <<  16)  |  (_buffer[ptr+3]  <<  24);  }  _ptr  +=  4;  	patch  |  ((_buffer[ptr+2]  &  0xFF)  <<  8)  |  (_buffer[ptr+3]  &  0xFF);  	98	replace
254	codec1017	buggy:  char[]  l_ascii  =  new  char[raw.length  >>  3];  context:  public  static  char[]  toAsciiChars(byte[]  raw)  {  if  (raw  ==  null  ||  raw.length  ==  0)  {  return  EMPTY_CHAR_ARRAY;  }      char[]  l_ascii  =  new  char[raw.length  >>  3];  for  (int  ii  =  0,  jj  =  l_ascii.length  -  1;  ii  <  raw.length;  ii++,  jj  -=  8)  {  for  (int  bits  =  0;  bits  <  BITS.length;  ++bits)  {  if  ((raw[ii]  &  BITS[bits])  ==  0)  {  l_ascii[jj  -  bits]  =  '0';  	patch  char[]  l_ascii  =  new  char[raw.length  <<  3];  	257	replace
255	codec652	buggy:  decodedData[encodedIndex]  =  (byte)  (b1  <<  2  |  b2  <<  4);  context:  marker1  =  base64Data[dataIndex  +  3];  b1  =  base64Alphabet[base64Data[dataIndex]];  b2  =  base64Alphabet[base64Data[dataIndex  +  1]];  if  (marker0  !=  PAD  &&  marker1  !=  PAD)  {  b3  =  base64Alphabet[marker0];  b4  =  base64Alphabet[marker1];      decodedData[encodedIndex]  =  (byte)  (b1  <<  2  |  b2  <<  4);  decodedData[encodedIndex  +  1]  =  (byte)  (((b2  &  0xf)  <<  4)  |  ((b3  >>  2)  &  0xf));  decodedData[encodedIndex  +  2]  =  (byte)  (b3  <<  6  |  b4);  }  else  if  (marker0  ==  PAD)  {  decodedData[encodedIndex]  =  (byte)  (b1  <<  2  |  b2  >>  4);  }  else  if  (marker1  ==  PAD)  {  b3  =  base64Alphabet[marker0];  	patch  decodedData[encodedIndex]  =  (byte)  (b1  <<  2  |  b2  >>  4);  	434	replace
256	math103968	buggy:  final  int  wrk_off  =  ~(in  +  1);  context:  public  double[]  getPartialCorrelations(int  in)  {  final  double[]  output  =  new  double[(nvars  -  in  +  1)  *  (nvars  -  in)  /  2];  int  pos;  int  pos1;  int  pos2;  final  int  rms_off  =  -in;      final  int  wrk_off  =  ~(in  +  1);  final  double[]  rms  =  new  double[nvars  -  in];  final  double[]  work  =  new  double[nvars  -  in  -  1];  double  sumxx;  double  sumxy;  double  sumyy;  final  int  offXX  =  (nvars  -  in)  *  (nvars  -  in  -  1)  /  2;  if  (in  <  -1  ||  in  >=  nvars)  {  return  null;  	patch  final  int  wrk_off  =  -(in  +  1);  	615	replace
257	math36958	buggy:  +FastMath.asin(v2.getX()),  context:  Vector3D  v1  =  applyTo(Vector3D.PLUS_I);  Vector3D  v2  =  applyInverseTo(Vector3D.PLUS_K);  if  ((v2.getX()  <  -0.9999999999)  ||  (v2.getX()  >  0.9999999999))  {  throw  new  CardanEulerSingularityException(true);  }  return  new  double[]  {  FastMath.atan2(v1.getY(),  v1.getX()),    +FastMath.asin(v2.getX()),  FastMath.atan2(v2.getY(),  v2.getZ())  };  }  else  if  (order  ==  RotationOrder.XYX)  {  	patch  -FastMath.asin(v2.getX()),  	660	replace
258	jacksoncore10484	buggy:  int  chunksBeforeLF  =  b64variant.getMaxLineLength()  <<  2;  context:  protected  int  _writeBinary(Base64Variant  b64variant,  InputStream  data,  byte[]  readBuffer,  int  bytesLeft)  throws  IOException,  JsonGenerationException  {  int  inputPtr  =  0;  int  inputEnd  =  0;  int  lastFullOffset  =  -3;  int  safeOutputEnd  =  _outputEnd  -  6;      int  chunksBeforeLF  =  b64variant.getMaxLineLength()  <<  2;  while  (bytesLeft  >  2)  {  //  main  loop  for  full  triplets  if  (inputPtr  >  lastFullOffset)  {  inputEnd  =  _readMore(data,  readBuffer,  inputPtr,  inputEnd,  bytesLeft);  inputPtr  =  0;  if  (inputEnd  <  3)  {  //  required  to  try  to  read  to  have  at  least  3  bytes  break;  }  	patch  int  chunksBeforeLF  =  b64variant.getMaxLineLength()  >>  2;  	1591	replace
259	compress6128	buggy:  zvec  =  (zvec  <<  1)  &  ((bsBuffShadow  >>  bsLiveShadow)  &  1);  context:  if  (thech  >=  0)  {  bsBuffShadow  =  (bsBuffShadow  <<  8)  |  thech;  bsLiveShadow  +=  8;  continue;  }  else  {  throw  new  IOException( "unexpected  end  of  stream ");  }  }  bsLiveShadow--;      zvec  =  (zvec  <<  1)  &  ((bsBuffShadow  >>  bsLiveShadow)  &  1);  }  this.bsLive  =  bsLiveShadow;  this.bsBuff  =  bsBuffShadow;  return  dataShadow.perm[zt][zvec  -  dataShadow.base[zt][zn]];  }  	patch  zvec  =  (zvec  <<  1)  |  ((bsBuffShadow  >>  bsLiveShadow)  &  1);  	751	replace
260	math95820	buggy:  p  =  +5.415412054294628E-11  +  p  *  w;  context:  p  =    -1.685059138182016589e-19  +  p  *  w;  p  =    1.2858480715256400167e-18  +  p  *  w;  p  =    1.115787767802518096e-17  +  p  *  w;  p  =    -1.333171662854620906e-16  +  p  *  w;  p  =    2.0972767875968561637e-17  +  p  *  w;  p  =    6.6376381343583238325e-15  +  p  *  w;  p  =  -4.0545662729752068639e-14  +  p  *  w;  p  =  -8.1519341976054721522e-14  +  p  *  w;  p  =    2.6335093153082322977e-12  +  p  *  w;  p  =  -1.2975133253453532498e-11  +  p  *  w;      p  =  +5.415412054294628E-11  +  p  *  w;  p  =    1.051212273321532285e-09  +  p  *  w;  p  =  -4.1126339803469836976e-09  +  p  *  w;  p  =  -2.9070369957882005086e-08  +  p  *  w;  p  =    4.2347877827932403518e-07  +  p  *  w;  p  =  -1.3654692000834678645e-06  +  p  *  w;  p  =  -1.3882523362786468719e-05  +  p  *  w;  p  =    0.0001867342080340571352  +  p  *  w;  p  =  -0.00074070253416626697512  +  p  *  w;  	patch  p  =    -5.4154120542946279317e-11  +  p  *  w;  	165	replace
261	jxpath10689	buggy:  if  ((active0  |  2305843009213693952L)  !=  0L)  context:  {  case  101:  if  ((active1  &  0x1L)  !=  0L)  return  jjStartNfaWithStates_0(14,  64,  12);  break;  case  105:  return  jjMoveStringLiteralDfa15_0(active0,  0x600000000000L,  active1,  0L);  case  108:  return  jjMoveStringLiteralDfa15_0(active0,  0x100000000000L,  active1,  0L);  case  114:      if  ((active0  |  2305843009213693952L)  !=  0L)  return  jjStartNfaWithStates_0(14,  61,  12);  return  jjMoveStringLiteralDfa15_0(active0,  0x1000000000000000L,  active1,  0L);  case  115:  return  jjMoveStringLiteralDfa15_0(active0,  0x800000000000L,  active1,  0L);  case  116:  return  jjMoveStringLiteralDfa15_0(active0,  0x400000000L,  active1,  0L);  default  :  break;  	patch  if  ((active0  &  0x2000000000000000L)  !=  0L)  	1093	replace
262	math116783	buggy:  return  +Math.PI  *  F_1_4;  context:  if  (x  ==  Double.NEGATIVE_INFINITY)  {  return  Math.PI  *  F_3_4;  }  return  Math.PI  *  F_1_2;  }  if  (y  ==  Double.NEGATIVE_INFINITY)  {  if  (x  ==  Double.POSITIVE_INFINITY)  {      return  +Math.PI  *  F_1_4;  }  if  (x  ==  Double.NEGATIVE_INFINITY)  {  return  -Math.PI  *  F_3_4;  }  return  -Math.PI  *  F_1_2;  }  	patch  return  -Math.PI  *  F_1_4;  	2625	replace
263	jacksoncore3267	buggy:  if  ((_numTypesValid  ^  NR_LONG)  ==  0)  {  context:  if  ((_numTypesValid  &  NR_INT)  ==  0)  {  //  wasn't  an  int  natively?  convertNumberToInt();  //  let's  make  it  so,  if  possible  }  }  return  _numberInt;  }  public  long  getLongValue()  throws  IOException,  JsonParseException  {      if  ((_numTypesValid  ^  NR_LONG)  ==  0)  {  if  (_numTypesValid  ==  NR_UNKNOWN)  {  _parseNumericValue(NR_LONG);  }  if  ((_numTypesValid  &  NR_LONG)  ==  0)  {  convertNumberToLong();  }  }  return  _numberLong;  	patch  if  ((_numTypesValid  &  NR_LONG)  ==  0)  {  	652	replace
264	jacksoncore6772	buggy:  outBuf[outPtr++]  =  (byte)  (128  &  (c  &  63));  context:  if  (c  >=  0x80)  {  break  ascii_loop;  }  outBuf[outPtr++]  =  (byte)  c;  }  }  if  (c  <  0x800)  {  //  2-byte  outBuf[outPtr++]  =  (byte)  (0xc0  |  (c  >>  6));      outBuf[outPtr++]  =  (byte)  (128  &  (c  &  63));  }  else  {  //  3  or  4  bytes  if  (c  <  SURR1_FIRST  ||  c  >  SURR2_LAST)  {  outBuf[outPtr++]  =  (byte)  (0xe0  |  (c  >>  12));  outBuf[outPtr++]  =  (byte)  (0x80  |  ((c  >>  6)  &  0x3f));  outBuf[outPtr++]  =  (byte)  (0x80  |  (c  &  0x3f));  continue;  }  	patch  outBuf[outPtr++]  =  (byte)  (0x80  |  (c  &  0x3f));  	314	replace
265	math38034	buggy:  +r.q1  *  q0  +  r.q0  *  q1  +  (r.q2  *  q3  -  r.q3  *  q2),  context:  public  Rotation  applyInverseTo(Rotation  r)  {  return  new  Rotation(-r.q0  *  q0  -  (r.q1  *  q1  +  r.q2  *  q2  +  r.q3  *  q3),          +r.q1  *  q0  +  r.q0  *  q1  +  (r.q2  *  q3  -  r.q3  *  q2),  r.q2  *  q0  +  r.q0  *  q2  +  (r.q3  *  q1  -  r.q1  *  q3),  r.q3  *  q0  +  r.q0  *  q3  +  (r.q1  *  q2  -  r.q2  *  q1),  false);  }  	patch  -r.q1  *  q0  +  r.q0  *  q1  +  (r.q2  *  q3  -  r.q3  *  q2),  	921	replace
266	collections1508	buggy:  total  +=  (element  ==  null  ?  0  :  element.hashCode())  &  count.value;  context:  public  int  hashCode()  {  int  total  =  0;  for  (final  Entry<E,  MutableInteger>  entry  :  map.entrySet())  {  final  E  element  =  entry.getKey();  final  MutableInteger  count  =  entry.getValue();      total  +=  (element  ==  null  ?  0  :  element.hashCode())  &  count.value;  }  return  total;  }  	patch  total  +=  (element  ==  null  ?  0  :  element.hashCode())  ^  count.value;  	572	replace
267	math117670	buggy:  (long)(((exp3  +  1023)  &  2047))  >>>  52);  context:  if  (exponent  ==  1024)  {  return  x;  }  int  exp3  =  exponent  /  3;  double  p2  =  Double.longBitsToDouble((inbits  &  0x8000000000000000L)  |                (long)(((exp3  +  1023)  &  2047))  >>>  52);  final  double  mant  =  Double.longBitsToDouble((inbits  &  0x000fffffffffffffL)  |  0x3ff0000000000000L);  double  est  =  -0.010714690733195933;  est  =  est  *  mant  +  0.0875862700108075;  est  =  est  *  mant  +  -0.3058015757857271;  	patch  (long)(((exp3  +  1023)  &  0x7ff))  <<  52);  	2887	replace
268	compress6174	buggy:  tt[cftab[ll8[i]  ^  255]++]  =  i;  context:  final  byte[]  ll8  =  this.data.ll8;  cftab[0]  =  0;  System.arraycopy(this.data.unzftab,  0,  cftab,  1,  256);  for  (int  i  =  1,  c  =  cftab[0];  i  <=  256;  i++)  {  c  +=  cftab[i];  cftab[i]  =  c;  }  for  (int  i  =  0,  lastShadow  =  this.last;  i  <=  lastShadow;  i++)  {      tt[cftab[ll8[i]  ^  255]++]  =  i;  }  if  ((this.origPtr  <  0)  ||  (this.origPtr  >=  tt.length))  {  throw  new  IOException( "stream  corrupted ");  }  this.su_tPos  =  tt[this.origPtr];  this.su_count  =  0;  	patch  tt[cftab[ll8[i]  &  0xff]++]  =  i;  	777	replace
269	jacksoncore11980	buggy:  c  =  (int)_inputBuffer[_inputPtr++]  ^  255;  context:  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  (char)  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }      c  =  (int)_inputBuffer[_inputPtr++]  ^  255;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  }  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  	patch  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  	1329	replace
270	jacksoncore2147	buggy:  _features  &=  +f.getMask();  context:  _features  |=  f.getMask();  return  this;  }  public  JsonParser  disable(Feature  f)  {      _features  &=  +f.getMask();  return  this;  }  public  JsonParser  configure(Feature  f,  boolean  state)  	patch  _features  &=  ~f.getMask();  	420	replace
271	lang7700	buggy:  dst[dstPos  +  i]  =  ((1  |  (src  >>  shift))  !=  0);  context:  final  int  nBools)  {  if  (0  ==  nBools)  {  return  dst;  }  if  (nBools  -  1  +  srcPos  >=  8)  {  throw  new  IllegalArgumentException( "nBools-1+srcPos  is  greather  or  equal  to  than  8 ");  }  int  shift  =  0;  for  (int  i  =  0;  i  <  nBools;  i++  )  {  shift  =  i  *  1  +  srcPos;      dst[dstPos  +  i]  =  ((1  |  (src  >>  shift))  !=  0);  }  return  dst;  }  	patch  dst[dstPos  +  i]  =  ((0x1  &  (src  >>  shift))  !=  0);  	1662	replace
272	lang7154	buggy:  dst[dstPos  +  i]  =  (byte)(0xff  &  (src  <<  shift));  context:  if  (0  ==  nBytes)  {  return  dst;  }  if  ((nBytes  -  1)  *  8  +  srcPos  >=  32)  {  throw  new  IllegalArgumentException(   "(nBytes-1)*8+srcPos  is  greather  or  equal  to  than  32 ");  }  int  shift  =  0;  for  (int  i  =  0;  i  <  nBytes;  i++  )  {  shift  =  i  *  8  +  srcPos;      dst[dstPos  +  i]  =  (byte)(0xff  &  (src  <<  shift));  }  return  dst;  }  	patch  dst[dstPos  +  i]  =  (byte)(0xff  &  (src  >>  shift));  	1332	replace
273	jacksondatabind40	buggy:  int  newDeserFeatures  =  _deserFeatures  |  ~feature.getMask();  context:  return  (newDeserFeatures  ==  _deserFeatures)  ?  this  :  new  DeserializationConfig(this,  _mapperFeatures,  newDeserFeatures);  }  public  DeserializationConfig  without(DeserializationFeature  feature)  {      int  newDeserFeatures  =  _deserFeatures  |  ~feature.getMask();  return  (newDeserFeatures  ==  _deserFeatures)  ?  this  :  new  DeserializationConfig(this,  _mapperFeatures,  newDeserFeatures);  }  	patch  int  newDeserFeatures  =  _deserFeatures  &  ~feature.getMask();  	367	replace
274	math3463	buggy:  if  ((n  ^  1)  ==  0)  {  context:  double  v  =  0;  p[n  -  1]  =  (1  -  n)  *  p[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  p[k];  if  (k  >  2)  {  p[k  -  2]  =  (1  -  k)  *  p[k  -  1]  +  (k  -  2  *  n)  *  p[k  -  3];  }  else  if  (k  ==  2)  {  p[0]  =  -p[1];  }  }      if  ((n  ^  1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  	patch  if  ((n  &  0x1)  ==  0)  {  	1624	replace
275	closure31096	buggy:  c  ^=  (b  >>  5);  context:  c  -=  b;  c  ^=  (b  >>>  13);  a  -=  b;  a  -=  c;  a  ^=  (c  >>>  12);  b  -=  c;  b  -=  a;  b  ^=  (a  <<  16);  c  -=  a;  c  -=  b;    c  ^=  (b  >>  5);  a  -=  b;  a  -=  c;  a  ^=  (c  >>>  3);  b  -=  c;  b  -=  a;  b  ^=  (a  <<  10);  c  -=  a;  c  -=  b;  	patch  c  ^=  (b  >>>  5);  	202	replace
276	jxpath10391	buggy:  else  if  ((active0  |  2199023255552L)  !=  0L)  context:  }  switch(curChar)  {  case  45:  return  jjMoveStringLiteralDfa11_0(active0,  0x800400000000L,  active1,  0L);  case  58:  if  ((active0  &  0x8000000000L)  !=  0L)  return  jjStopAtPos(10,  39);  else  if  ((active0  &  0x10000000000L)  !=  0L)  return  jjStopAtPos(10,  40);      else  if  ((active0  |  2199023255552L)  !=  0L)  return  jjStopAtPos(10,  41);  else  if  ((active0  &  0x40000000000L)  !=  0L)  return  jjStopAtPos(10,  42);  return  jjMoveStringLiteralDfa11_0(active0,  0x80000000000L,  active1,  0L);  case  97:  return  jjMoveStringLiteralDfa11_0(active0,  0x2000000000000000L,  active1,  0L);  case  98:  return  jjMoveStringLiteralDfa11_0(active0,  0x1000000000000000L,  active1,  0x2000L);  	patch  else  if  ((active0  &  0x20000000000L)  !=  0L)  	943	replace
277	jacksoncore11218	buggy:  ch  =  (int)_inputBuffer[_inputPtr++]  ^  255;  context:  final  int  outputEnd  =  buffer.length  -  3;  int  outputCount  =  0;  while  (true)  {  int  ch;  do  {  if  (_inputPtr  >=  _inputEnd)  {  loadMoreGuaranteed();  }      ch  =  (int)_inputBuffer[_inputPtr++]  ^  255;  }  while  (ch  <=  INT_SPACE);  int  bits  =  b64variant.decodeBase64Char(ch);  if  (bits  <  0)  {  //  reached  the  end,  fair  and  square?  if  (ch  ==  INT_QUOTE)  {  break;  }  bits  =  _decodeBase64Escape(b64variant,  ch,  0);  if  (bits  <  0)  {  //  white  space  to  skip  	patch  ch  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  	480	replace
278	compress5847	buggy:  bsBuffShadow  =  (bsBuffShadow  >>>  8)  |  thech;  context:  groupPos--;  }  int  zn  =  minLens_zt;  while  (bsLiveShadow  <  zn)  {  final  int  thech  =  inShadow.read();  if  (thech  >=  0)  {          bsBuffShadow  =  (bsBuffShadow  >>>  8)  |  thech;  bsLiveShadow  +=  8;  continue;  }  else  {  throw  new  IOException( "unexpected  end  of  stream ");  }  }  int  zvec  =  (bsBuffShadow  >>  (bsLiveShadow  -  zn))  &  ((1  <<  zn)  -  1);  	patch  bsBuffShadow  =  (bsBuffShadow  <<  8)  |  thech;  	609	replace
279	closure36346	buggy:  result  =  lvalInt  >>>  rvalInt;  context:  if  (rvalInt  !=  rval)  {  report(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:    result  =  lvalInt  >>>  rvalInt;  break;  case  Token.URSH:  long  lvalLong  =  lvalInt  &  0xffffffffL;  result  =  lvalLong  >>>  rvalInt;  break;  	patch  result  =  lvalInt  >>  rvalInt;  	896	replace
280	math103223	buggy:  x[k]  =  smartAdd(xk,  +xi  *  r[nextr]);  context:  if  (FastMath.abs(tmp)  >  Precision.EPSILON)  {  w  =  (di  *  w)  /  dpi;  }  }  else  {  dpi  =  wxi  *  xi;  w  =  0.0;  }  d[i]  =  dpi;  for  (int  k  =  i  +  1;  k  <  nvars;  k++)  {  xk  =  x[k];      x[k]  =  smartAdd(xk,  +xi  *  r[nextr]);  if  (di  !=  0.0)  {  r[nextr]  =  smartAdd(di  *  r[nextr],  (_w  *  xi)  *  xk)  /  dpi;  }  else  {  r[nextr]  =  xk  /  xi;  }  }  xk  =  y;  	patch  x[k]  =  smartAdd(xk,  -xi  *  r[nextr]);  	268	replace
281	closure36345	buggy:  result  =  lvalInt  <<  rvalInt;  context:  if  (rvalInt  !=  rval)  {  report(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:    result  =  lvalInt  <<  rvalInt;  break;  case  Token.URSH:  long  lvalLong  =  lvalInt  &  0xffffffffL;  result  =  lvalLong  >>>  rvalInt;  break;  	patch  result  =  lvalInt  >>  rvalInt;  	896	replace
282	math14349	buggy:  ArithmeticUtils.pow(numerator,    +exponent));  context:  public  BigFraction  pow(final  long  exponent)  {  if  (exponent  <  0)  {  return  new  BigFraction(ArithmeticUtils.pow(denominator,  -exponent),            ArithmeticUtils.pow(numerator,    +exponent));  }  return  new  BigFraction(ArithmeticUtils.pow(numerator,    exponent),  ArithmeticUtils.pow(denominator,  exponent));  }  	patch  ArithmeticUtils.pow(numerator,      -exponent));  	981	replace
283	lang15107	buggy:  comparison  =  (lhs.length  <  rhs.length)  ?  -1  :  ~1;  context:  }  if  (lhs  ==  null)  {  comparison  =  -1;  return  this;  }  if  (rhs  ==  null)  {  comparison  =  +1;  return  this;  }  if  (lhs.length  !=  rhs.length)  {      comparison  =  (lhs.length  <  rhs.length)  ?  -1  :  ~1;  return  this;  }  for  (int  i  =  0;  i  <  lhs.length  &&  comparison  ==  0;  i++)  {  append(lhs[i],  rhs[i]);  }  return  this;  }  	patch  comparison  =  (lhs.length  <  rhs.length)  ?  -1  :  +1;  	903	replace
284	closure30680	buggy:  |  ((str[i  +  2]  &  255)  >>  16)  context:  }  private  static  int  hash32(byte[]  str,  int  start,  int  limit,  int  c)  {  int  a  =  0x9e3779b9;  int  b  =  0x9e3779b9;  int  i;  for  (i  =  start;  i  +  12  <=  limit;  i  +=  12)  {  a  +=  (((str[i  +  0]  &  0xff)  <<  0)  |  ((str[i  +  1]  &  0xff)  <<  8)      |  ((str[i  +  2]  &  255)  >>  16)  |  ((str[i  +  3]  &  0xff)  <<  24));  b  +=  (((str[i  +  4]  &  0xff)  <<  0)  |  ((str[i  +  5]  &  0xff)  <<  8)  |  ((str[i  +  6]  &  0xff)  <<  16)  |  ((str[i  +  7]  &  0xff)  <<  24));  c  +=  (((str[i  +  8]  &  0xff)  <<  0)  |  ((str[i  +  9]  &  0xff)  <<  8)  |  ((str[i  +  10]  &  0xff)  <<  16)  |  ((str[i  +  11]  &  0xff)  <<  24));  	patch  |  ((str[i  +  2]  &  0xff)  <<  16)  	116	replace
285	closure31023	buggy:  a  +=  (str[i  +  2]  ^  255)  <<  16;  context:  b  +=  (str[i  +  7]  &  0xff)  <<  24;  case  7:  b  +=  (str[i  +  6]  &  0xff)  <<  16;  case  6:  b  +=  (str[i  +  5]  &  0xff)  <<  8;  case  5:  b  +=  (str[i  +  4]  &  0xff);  case  4:  a  +=  (str[i  +  3]  &  0xff)  <<  24;  case  3:    a  +=  (str[i  +  2]  ^  255)  <<  16;  case  2:  a  +=  (str[i  +  1]  &  0xff)  <<  8;  case  1:  a  +=  (str[i  +  0]  &  0xff);  }  	patch  a  +=  (str[i  +  2]  &  0xff)  <<  16;  	176	replace
286	jacksoncore13888	buggy:  value  =  (value  >>>  4)  |  digit;  context:  if  (_inputPtr  >=  _inputEnd)  {  if  (!loadMore())  {  _reportInvalidEOF( "  in  character  escape  sequence ");  }  }  int  ch  =  (int)  _inputBuffer[_inputPtr++];  int  digit  =  CharTypes.charToHex(ch);  if  (digit  <  0)  {  _reportUnexpectedChar(ch,   "expected  a  hex-digit  for  character  escape  sequence ");  }      value  =  (value  >>>  4)  |  digit;  }  return  (char)  value;  }  protected  int  _decodeCharForError(int  firstByte)  throws  IOException,  JsonParseException  {  int  c  =  (int)  firstByte;  	patch  value  =  (value  <<  4)  |  digit;  	2750	replace
287	closure13866	buggy:  +  ((bytes[offset  +  6]  &  255L)  >>>  48)  context:  return  mix64(a,  b,  c);  }  private  static  long  word64At(byte[]  bytes,  int  offset)  {  return  (bytes[offset  +  0]  &  0xffL)    +  ((bytes[offset  +  6]  &  255L)  >>>  48)  }  private  static  long  mix64(long  a,  long  b,  long  c)  {  a  -=  b;  a  -=  c;  a  ^=  c  >>>  43;  	patch  +  ((bytes[offset  +  6]  &  0xffL)  <<  48)  	631	replace
288	math111968	buggy:  return  (a  <  0.0)  ?  +1.0  :  ((a  >  0.0)  ?  1.0  :  a);  //  return  +0.0/-0.0/NaN  depending  on  a  context:  return  negative  ?  -absAtanh  :  absAtanh;  }  public  static  double  signum(final  double  a)  {      return  (a  <  0.0)  ?  +1.0  :  ((a  >  0.0)  ?  1.0  :  a);  //  return  +0.0/-0.0/NaN  depending  on  a  }  public  static  float  signum(final  float  a)  {  	patch  return  (a  <  0.0)  ?  -1.0  :  ((a  >  0.0)  ?  1.0  :  a);  //  return  +0.0/-0.0/NaN  depending  on  a  	780	replace
289	math115826	buggy:  double  tmpA  =  (prod2A  <<  12)  /  TWO_POWER_52;  //  High  order  52  bits  context:  bitb  =  (ac  &  0x8000000000000000L  )  !=  0;  prod2B  +=  ac;  bitsum  =  (prod2B  &  0x8000000000000000L)  !=  0;  if  (  (bita  &&  bitb)  ||  ((bita  ||  bitb)  &&  !bitsum)  )  {  prod2A++;  }      double  tmpA  =  (prod2A  <<  12)  /  TWO_POWER_52;  //  High  order  52  bits  double  tmpB  =  (((prod2A  &  0xfffL)  <<  40)  +  (prod2B  >>>  24))  /  TWO_POWER_52  /  TWO_POWER_52;  //  Low  bits  double  sumA  =  tmpA  +  tmpB;  double  sumB  =  -(sumA  -  tmpA  -  tmpB);  result[0]  =  intPart;  result[1]  =  sumA  *  2.0;  	patch  double  tmpA  =  (prod2A  >>>  12)  /  TWO_POWER_52;    //  High  order  52  bits  	2209	replace
290	closure13942	buggy:  b  -=  c;  b  -=  a;  b  ^=  a  >>  49;  context:  private  static  long  mix64(long  a,  long  b,  long  c)  {  a  -=  b;  a  -=  c;  a  ^=  c  >>>  43;  b  -=  c;  b  -=  a;  b  ^=  a  <<  9;  c  -=  a;  c  -=  b;  c  ^=  b  >>>  8;  a  -=  b;  a  -=  c;  a  ^=  c  >>>  38;  b  -=  c;  b  -=  a;  b  ^=  a  <<  23;  c  -=  a;  c  -=  b;  c  ^=  b  >>>  5;  a  -=  b;  a  -=  c;  a  ^=  c  >>>  35;    b  -=  c;  b  -=  a;  b  ^=  a  >>  49;  c  -=  a;  c  -=  b;  c  ^=  b  >>>  11;  a  -=  b;  a  -=  c;  a  ^=  c  >>>  12;  b  -=  c;  b  -=  a;  b  ^=  a  <<  18;  c  -=  a;  c  -=  b;  c  ^=  b  >>>  22;  return  c;  }  }  	patch  b  -=  c;  b  -=  a;  b  ^=  a  <<  49;  	646	replace
291	jacksoncore1367	buggy:  int  ix  =  (hash  |  _mainHashMask);  context:  public  Name  findName(int  firstQuad,  int  secondQuad)  {  int  hash  =  (secondQuad  ==  0)  ?  calcHash(firstQuad)  :  calcHash(firstQuad,  secondQuad);      int  ix  =  (hash  |  _mainHashMask);  int  val  =  _mainHash[ix];  if  ((((val  >>  8)  ^  hash)  <<  8)  ==  0)  {  //  match  Name  name  =  _mainNames[ix];  	patch  int  ix  =  (hash  &  _mainHashMask);  	532	replace
292	jxpath7840	buggy:  if  ((active1  |  786432L)  !=  0L)  context:  public  class  XPathParserTokenManager  implements  XPathParserConstants  {  public  java.io.PrintStream  debugStream  =  System.out;  public  void  setDebugStream(java.io.PrintStream  ds)  {  debugStream  =  ds;  }  private  final  int  jjStopStringLiteralDfa_0(int  pos,  long  active0,  long  active1)  {  switch  (pos)  {  case  0:      if  ((active1  |  786432L)  !=  0L)  return  10;  if  ((active0  &  0xfffffffff8000000L)  !=  0L  ||  (active1  &  0x3fffL)  !=  0L)  {  jjmatchedKind  =  78;  return  12;  }  return  -1;  case  1:  	patch  if  ((active1  &  0xc0000L)  !=  0L)  	15	replace
293	math15302	buggy:  q  =  +q;  context:  p  =  2  *  m  *  s;  q  =  1  -  s;  }  else  {  q  =  fa  /  fc;  final  double  r  =  fb  /  fc;  p  =  s  *  (2  *  m  *  q  *  (q  -  r)  -  (b  -  a)  *  (r  -  1));  q  =  (q  -  1)  *  (r  -  1)  *  (s  -  1);  }  if  (p  >  0)  {          q  =  +q;  }  else  {  p  =  -p;  }  s  =  e;  e  =  d;  if  (p  >=  1.5  *  m  *  q  -  FastMath.abs(tol  *  q)  ||  p  >=  FastMath.abs(0.5  *  s  *  q))  {  	patch  q  =  -q;  	197	replace
294	jxpath9432	buggy:  if  ((active0  ^  268435456L)  !=  0L)  context:  }  switch(curChar)  {  case  97:  return  jjMoveStringLiteralDfa3_0(active0,  0x400000000000000L,  active1,  0x2L);  case  98:  return  jjMoveStringLiteralDfa3_0(active0,  0x7000000000000000L,  active1,  0L);  case  99:  return  jjMoveStringLiteralDfa3_0(active0,  0x20104000000000L,  active1,  0L);  case  100:      if  ((active0  ^  268435456L)  !=  0L)  return  jjStartNfaWithStates_0(2,  28,  12);  else  if  ((active0  &  0x20000000L)  !=  0L)  return  jjStartNfaWithStates_0(2,  29,  12);  return  jjMoveStringLiteralDfa3_0(active0,  0x80000000L,  active1,  0L);  case  101:  return  jjMoveStringLiteralDfa3_0(active0,  0x420000000000L,  active1,  0L);  case  105:  return  jjMoveStringLiteralDfa3_0(active0,  0x1000000000L,  active1,  0x800L);  	patch  if  ((active0  &  0x10000000L)  !=  0L)  	554	replace
295	lang6726	buggy:  out  =  (out  |  ~mask)  |  bits;  context:  if  (nBools  -  1  +  dstPos  >=  32)  {  throw  new  IllegalArgumentException(   "nBools-1+dstPos  is  greather  or  equal  to  than  32 ");  }  int  out  =  dstInit;  int  shift  =  0;  for  (int  i  =  0;  i  <  nBools;  i++  )  {  shift  =  i  *  1  +  dstPos;  final  int  bits  =  (src[i  +  srcPos]  ?  1  :  0)  <<  shift;  final  int  mask  =  0x1  <<  shift;      out  =  (out  |  ~mask)  |  bits;  }  return  out;  }  	patch  out  =  (out  &  ~mask)  |  bits;  	1091	replace
296	math17424	buggy:  return  new  Quaternion(q0,  +q1,  -q2,  -q3);  context:  public  Quaternion(final  double[]  v)  {  this(0,  v);  }  public  Quaternion  getConjugate()  {      return  new  Quaternion(q0,  +q1,  -q2,  -q3);  }  	patch  return  new  Quaternion(q0,  -q1,  -q2,  -q3);  	115	replace
