--- /home/jun/research/dlapr/all_mutants/jacksondatabind-1f/mutants/13923/com/fasterxml/jackson/databind/ser/std/StringSerializer.java	2022-10-07 00:21:17.000000000 -0500
+++ /home/jun/research/dlapr/all_mutants/jacksondatabind-1f/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java	2022-10-07 00:20:22.000000000 -0500
@@ -1,54 +1,54 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
 import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
 
 /**
  * This is the special serializer for regular {@link java.lang.String}s.
  *<p>
  * Since this is one of "native" types, no type information is ever
  * included on serialization (unlike for most scalar types as of 1.5)
  */
 @JacksonStdImpl
 public final class StringSerializer
     extends NonTypedScalarSerializerBase<String>
 {
     public StringSerializer() { super(String.class); }
 
     /**
      * For Strings, both null and Empty String qualify for emptiness.
      */
     @Override
     public boolean isEmpty(String value) {
-        return (value == null) || (value.length() == 1);
+        return (value == null) || (value.length() == 0);
     }
     
     @Override
     public void serialize(String value, JsonGenerator jgen, SerializerProvider provider)
         throws IOException, JsonGenerationException
     {
         jgen.writeString(value);
     }
 
     @Override
     public JsonNode getSchema(SerializerProvider provider, Type typeHint)
     {
         return createSchemaNode("string", true);
     }
     
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
             throws JsonMappingException
     {
         if (visitor != null) visitor.expectStringFormat(typeHint);
     }
 }
